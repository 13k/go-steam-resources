// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_linkfilter.steamclient.proto

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CCommunity_GetLinkFilterHashPrefixes_Request struct {
	HitType          *uint32 `protobuf:"varint,1,opt,name=hit_type,json=hitType" json:"hit_type,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Start            *uint64 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Request) Reset() {
	*m = CCommunity_GetLinkFilterHashPrefixes_Request{}
}
func (m *CCommunity_GetLinkFilterHashPrefixes_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCommunity_GetLinkFilterHashPrefixes_Request) ProtoMessage() {}
func (*CCommunity_GetLinkFilterHashPrefixes_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{0}
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Request) GetHitType() uint32 {
	if m != nil && m.HitType != nil {
		return *m.HitType
	}
	return 0
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Request) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Request) GetStart() uint64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

type CCommunity_GetLinkFilterHashPrefixes_Response struct {
	HashPrefixes     []uint32 `protobuf:"varint,1,rep,name=hash_prefixes,json=hashPrefixes" json:"hash_prefixes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Response) Reset() {
	*m = CCommunity_GetLinkFilterHashPrefixes_Response{}
}
func (m *CCommunity_GetLinkFilterHashPrefixes_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCommunity_GetLinkFilterHashPrefixes_Response) ProtoMessage() {}
func (*CCommunity_GetLinkFilterHashPrefixes_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{1}
}

func (m *CCommunity_GetLinkFilterHashPrefixes_Response) GetHashPrefixes() []uint32 {
	if m != nil {
		return m.HashPrefixes
	}
	return nil
}

type CCommunity_GetLinkFilterHashes_Request struct {
	HitType          *uint32 `protobuf:"varint,1,opt,name=hit_type,json=hitType" json:"hit_type,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Start            *uint64 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCommunity_GetLinkFilterHashes_Request) Reset() {
	*m = CCommunity_GetLinkFilterHashes_Request{}
}
func (m *CCommunity_GetLinkFilterHashes_Request) String() string { return proto.CompactTextString(m) }
func (*CCommunity_GetLinkFilterHashes_Request) ProtoMessage()    {}
func (*CCommunity_GetLinkFilterHashes_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{2}
}

func (m *CCommunity_GetLinkFilterHashes_Request) GetHitType() uint32 {
	if m != nil && m.HitType != nil {
		return *m.HitType
	}
	return 0
}

func (m *CCommunity_GetLinkFilterHashes_Request) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CCommunity_GetLinkFilterHashes_Request) GetStart() uint64 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

type CCommunity_GetLinkFilterHashes_Response struct {
	Hashes           [][]byte `protobuf:"bytes,1,rep,name=hashes" json:"hashes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CCommunity_GetLinkFilterHashes_Response) Reset() {
	*m = CCommunity_GetLinkFilterHashes_Response{}
}
func (m *CCommunity_GetLinkFilterHashes_Response) String() string { return proto.CompactTextString(m) }
func (*CCommunity_GetLinkFilterHashes_Response) ProtoMessage()    {}
func (*CCommunity_GetLinkFilterHashes_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{3}
}

func (m *CCommunity_GetLinkFilterHashes_Response) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type CCommunity_GetLinkFilterListVersion_Request struct {
	HitType          *uint32 `protobuf:"varint,1,opt,name=hit_type,json=hitType" json:"hit_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCommunity_GetLinkFilterListVersion_Request) Reset() {
	*m = CCommunity_GetLinkFilterListVersion_Request{}
}
func (m *CCommunity_GetLinkFilterListVersion_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCommunity_GetLinkFilterListVersion_Request) ProtoMessage() {}
func (*CCommunity_GetLinkFilterListVersion_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{4}
}

func (m *CCommunity_GetLinkFilterListVersion_Request) GetHitType() uint32 {
	if m != nil && m.HitType != nil {
		return *m.HitType
	}
	return 0
}

type CCommunity_GetLinkFilterListVersion_Response struct {
	Version          *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Count            *uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCommunity_GetLinkFilterListVersion_Response) Reset() {
	*m = CCommunity_GetLinkFilterListVersion_Response{}
}
func (m *CCommunity_GetLinkFilterListVersion_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCommunity_GetLinkFilterListVersion_Response) ProtoMessage() {}
func (*CCommunity_GetLinkFilterListVersion_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{5}
}

func (m *CCommunity_GetLinkFilterListVersion_Response) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CCommunity_GetLinkFilterListVersion_Response) GetCount() uint64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*CCommunity_GetLinkFilterHashPrefixes_Request)(nil), "CCommunity_GetLinkFilterHashPrefixes_Request")
	proto.RegisterType((*CCommunity_GetLinkFilterHashPrefixes_Response)(nil), "CCommunity_GetLinkFilterHashPrefixes_Response")
	proto.RegisterType((*CCommunity_GetLinkFilterHashes_Request)(nil), "CCommunity_GetLinkFilterHashes_Request")
	proto.RegisterType((*CCommunity_GetLinkFilterHashes_Response)(nil), "CCommunity_GetLinkFilterHashes_Response")
	proto.RegisterType((*CCommunity_GetLinkFilterListVersion_Request)(nil), "CCommunity_GetLinkFilterListVersion_Request")
	proto.RegisterType((*CCommunity_GetLinkFilterListVersion_Response)(nil), "CCommunity_GetLinkFilterListVersion_Response")
}

func init() { proto.RegisterFile("steammessages_linkfilter.steamclient.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4d, 0x6f, 0xdd, 0x44,
	0x14, 0x95, 0xd3, 0x86, 0xc2, 0xa8, 0xd9, 0xb8, 0x1b, 0xf3, 0x36, 0x5c, 0x19, 0x89, 0x44, 0x34,
	0x99, 0xd0, 0x56, 0x08, 0x21, 0x16, 0xe8, 0xbd, 0x22, 0xd2, 0x42, 0x4b, 0x23, 0x27, 0xea, 0x82,
	0xcd, 0x93, 0x3f, 0xae, 0xdf, 0x5c, 0xc5, 0x6f, 0xc6, 0xcc, 0x8c, 0x53, 0x1e, 0x4b, 0xef, 0xf8,
	0x01, 0xfc, 0x0d, 0x56, 0x78, 0x01, 0x3f, 0x80, 0x1d, 0x1b, 0x7e, 0x11, 0xf2, 0xf8, 0x23, 0x09,
	0xc9, 0x83, 0x3c, 0xd6, 0x2c, 0x3d, 0x9e, 0x39, 0xe7, 0xdc, 0x7b, 0xce, 0x9d, 0x61, 0x1f, 0x1a,
	0x8b, 0xf1, 0x72, 0x89, 0xc6, 0xc4, 0x0b, 0x34, 0xf3, 0x82, 0xe4, 0x59, 0x4e, 0x85, 0x45, 0xcd,
	0xdd, 0x8f, 0xb4, 0x20, 0x94, 0x96, 0x97, 0x5a, 0x59, 0x35, 0x81, 0x85, 0x52, 0x8b, 0x02, 0x0f,
	0xdd, 0x57, 0x52, 0xe5, 0x87, 0x19, 0x9a, 0x54, 0x53, 0x69, 0x95, 0xee, 0x77, 0xec, 0x5f, 0x45,
	0xab, 0x24, 0xe5, 0x84, 0xd9, 0x3c, 0x89, 0x0d, 0x5e, 0xc7, 0x0b, 0x7f, 0xd9, 0x62, 0xfb, 0x4f,
	0x9f, 0xaa, 0xe5, 0xb2, 0x92, 0x64, 0x57, 0xf3, 0x23, 0xb4, 0x2f, 0x48, 0x9e, 0x7d, 0xe9, 0xe8,
	0x9f, 0xc5, 0x46, 0x1c, 0x6b, 0xcc, 0xe9, 0x7b, 0x34, 0xf3, 0x08, 0xbf, 0xab, 0xd0, 0x58, 0xff,
	0x98, 0xbd, 0x2d, 0xc8, 0xce, 0xed, 0xaa, 0xc4, 0xc0, 0x03, 0x6f, 0x6f, 0x67, 0xf6, 0x71, 0xdd,
	0x04, 0x8f, 0x4e, 0x05, 0x82, 0x46, 0xab, 0x09, 0xcf, 0x31, 0x03, 0x41, 0xd6, 0xc0, 0x1b, 0x2a,
	0x0a, 0x48, 0x10, 0xba, 0x5a, 0x30, 0x03, 0xab, 0xc0, 0x0a, 0x32, 0xd0, 0x9e, 0xe5, 0xd1, 0x3d,
	0x41, 0xf6, 0x74, 0x55, 0xa2, 0x9f, 0xb2, 0xed, 0x54, 0x55, 0xd2, 0x06, 0x5b, 0x0e, 0xee, 0x65,
	0xdd, 0x04, 0xcf, 0x5b, 0x38, 0x59, 0x2d, 0x13, 0xd4, 0xa0, 0xf2, 0x0e, 0xce, 0xaa, 0x91, 0x00,
	0x48, 0x42, 0x0c, 0x86, 0xe4, 0xa2, 0x40, 0x48, 0x62, 0x9b, 0x0a, 0x0e, 0x27, 0x25, 0xa6, 0x94,
	0xaf, 0xe0, 0x23, 0xc8, 0x95, 0x06, 0xa9, 0xa0, 0xa0, 0x25, 0x59, 0x1e, 0x75, 0xd8, 0xfe, 0x4b,
	0xb6, 0x6d, 0x6c, 0xac, 0x6d, 0x70, 0x07, 0xbc, 0xbd, 0xbb, 0xb3, 0x4f, 0xea, 0x26, 0x78, 0xd2,
	0x92, 0xb8, 0x45, 0x92, 0x0b, 0x70, 0xdb, 0xe0, 0x8d, 0x40, 0x39, 0xd0, 0xb4, 0xab, 0x8e, 0x99,
	0x64, 0x47, 0x82, 0x86, 0x47, 0x1d, 0x4a, 0xf8, 0x93, 0xc7, 0x0e, 0x6e, 0xd9, 0x36, 0x53, 0x2a,
	0x69, 0xd0, 0xcf, 0xd8, 0x8e, 0x88, 0x8d, 0x98, 0x97, 0xfd, 0x9f, 0xc0, 0x83, 0x3b, 0x7b, 0x3b,
	0xb3, 0xcf, 0xeb, 0x26, 0xf8, 0xac, 0x15, 0x92, 0x93, 0x36, 0x16, 0x9e, 0x3c, 0x86, 0xa4, 0xa5,
	0x54, 0x39, 0x58, 0x81, 0x70, 0xf2, 0x6c, 0xfa, 0x08, 0xda, 0x63, 0xe8, 0x96, 0x30, 0x4e, 0x45,
	0x2b, 0x09, 0x74, 0x67, 0x06, 0x66, 0x3c, 0xba, 0x2f, 0x2e, 0xd1, 0x85, 0x3f, 0x6f, 0xb1, 0x0f,
	0xfe, 0x49, 0xd7, 0xff, 0x46, 0xfe, 0xcd, 0x48, 0xcd, 0x76, 0xff, 0xb5, 0x5f, 0xbd, 0x83, 0x47,
	0xec, 0xad, 0xce, 0x0a, 0x67, 0xdd, 0xfd, 0xd9, 0x61, 0xdd, 0x04, 0x0f, 0xa7, 0x50, 0x90, 0xb1,
	0xae, 0xb6, 0xce, 0x26, 0x8d, 0xb6, 0xd2, 0x12, 0x33, 0xc8, 0xb5, 0x5a, 0x82, 0xaa, 0xf4, 0x60,
	0x16, 0x8f, 0xfa, 0xe3, 0xe1, 0x8f, 0x1e, 0x7b, 0xb8, 0x8e, 0xf4, 0x05, 0x19, 0xfb, 0x1a, 0xb5,
	0x21, 0x25, 0x47, 0xa7, 0xbe, 0xbd, 0xe6, 0xd4, 0x98, 0x9a, 0xf3, 0x6e, 0xeb, 0x40, 0xde, 0x76,
	0x6c, 0x74, 0x66, 0xd7, 0x40, 0x2a, 0x2a, 0x79, 0x76, 0x61, 0xe0, 0xa0, 0xed, 0xc2, 0xb3, 0xf0,
	0x37, 0x6f, 0xfd, 0xfc, 0x5f, 0xd5, 0xd2, 0x77, 0xe1, 0x15, 0xbb, 0xd7, 0x93, 0x3a, 0x2d, 0xef,
	0x74, 0xa9, 0x99, 0x3a, 0x05, 0x90, 0x54, 0x54, 0x58, 0xa8, 0x5a, 0x43, 0x5d, 0x7e, 0x9f, 0x7f,
	0x31, 0x46, 0x39, 0x55, 0xd2, 0xc6, 0x24, 0xfb, 0x4c, 0xf1, 0x68, 0x40, 0xf1, 0x3f, 0xbd, 0x9c,
	0x9a, 0xbb, 0xb3, 0xf7, 0xeb, 0x26, 0x78, 0xef, 0x86, 0xd4, 0x38, 0x98, 0xbe, 0xb2, 0x3e, 0x0b,
	0x8f, 0x7f, 0xdf, 0x66, 0x0f, 0x46, 0xed, 0x17, 0xba, 0xfd, 0x3f, 0x3d, 0xf6, 0xee, 0xda, 0x91,
	0xf4, 0x0f, 0xf8, 0x26, 0x17, 0xde, 0x84, 0xf3, 0x8d, 0x06, 0x3d, 0x7c, 0x5d, 0x37, 0x41, 0x74,
	0x84, 0x16, 0xe2, 0x2b, 0xd1, 0x80, 0x61, 0xf0, 0x7b, 0x93, 0x10, 0x8c, 0x0b, 0x3a, 0x75, 0x1d,
	0x71, 0x75, 0xed, 0xb7, 0xb3, 0x51, 0x19, 0x74, 0x5b, 0xba, 0x6b, 0x1a, 0xd2, 0x38, 0x15, 0x24,
	0x17, 0xdc, 0xff, 0xd5, 0x63, 0x0f, 0x6e, 0xc8, 0xa7, 0xbf, 0xcb, 0x6f, 0x37, 0xf0, 0x93, 0x3d,
	0x7e, 0xcb, 0xa4, 0x87, 0xaf, 0xea, 0x26, 0xf8, 0xfa, 0x7a, 0x09, 0xff, 0x5d, 0xfb, 0x1f, 0x1e,
	0x0b, 0xd6, 0x45, 0xcb, 0xdf, 0xe7, 0x1b, 0x0c, 0xc3, 0xe4, 0x80, 0x6f, 0x12, 0xd7, 0xf0, 0xb4,
	0x6e, 0x82, 0xe3, 0x1b, 0x4b, 0xe9, 0x1e, 0xce, 0x64, 0x88, 0xea, 0x30, 0x49, 0xc3, 0x35, 0xeb,
	0x46, 0x67, 0x08, 0xef, 0x78, 0xdf, 0x82, 0xa1, 0x1f, 0x90, 0x4f, 0xbe, 0xa9, 0x9b, 0xe0, 0xab,
	0x29, 0x18, 0xd4, 0xe7, 0x94, 0x76, 0x25, 0x6b, 0x4c, 0x95, 0xce, 0x5a, 0xb4, 0x2c, 0xb6, 0x31,
	0xc4, 0x89, 0xaa, 0x2c, 0x9c, 0xb4, 0xef, 0x2d, 0x8c, 0x7a, 0xa1, 0x14, 0x64, 0xda, 0x8e, 0x40,
	0xfb, 0xc6, 0xf7, 0xf7, 0x29, 0xc9, 0xc5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x9d, 0x22,
	0x58, 0x02, 0x08, 0x00, 0x00,
}
