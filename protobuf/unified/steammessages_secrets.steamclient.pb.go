// Code generated by protoc-gen-go.
// source: steammessages_secrets.steamclient.proto
// DO NOT EDIT!

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EKeyEscrowUsage int32

const (
	EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice EKeyEscrowUsage = 0
)

var EKeyEscrowUsage_name = map[int32]string{
	0: "k_EKeyEscrowUsageStreamingDevice",
}
var EKeyEscrowUsage_value = map[string]int32{
	"k_EKeyEscrowUsageStreamingDevice": 0,
}

func (x EKeyEscrowUsage) Enum() *EKeyEscrowUsage {
	p := new(EKeyEscrowUsage)
	*p = x
	return p
}
func (x EKeyEscrowUsage) String() string {
	return proto.EnumName(EKeyEscrowUsage_name, int32(x))
}
func (x *EKeyEscrowUsage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EKeyEscrowUsage_value, data, "EKeyEscrowUsage")
	if err != nil {
		return err
	}
	*x = EKeyEscrowUsage(value)
	return nil
}
func (EKeyEscrowUsage) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type CKeyEscrow_Request struct {
	RsaOaepShaTicket []byte           `protobuf:"bytes,1,opt,name=rsa_oaep_sha_ticket" json:"rsa_oaep_sha_ticket,omitempty"`
	Password         []byte           `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Usage            *EKeyEscrowUsage `protobuf:"varint,3,opt,name=usage,enum=EKeyEscrowUsage,def=0" json:"usage,omitempty"`
	DeviceName       *string          `protobuf:"bytes,4,opt,name=device_name" json:"device_name,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CKeyEscrow_Request) Reset()                    { *m = CKeyEscrow_Request{} }
func (m *CKeyEscrow_Request) String() string            { return proto.CompactTextString(m) }
func (*CKeyEscrow_Request) ProtoMessage()               {}
func (*CKeyEscrow_Request) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

const Default_CKeyEscrow_Request_Usage EKeyEscrowUsage = EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice

func (m *CKeyEscrow_Request) GetRsaOaepShaTicket() []byte {
	if m != nil {
		return m.RsaOaepShaTicket
	}
	return nil
}

func (m *CKeyEscrow_Request) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CKeyEscrow_Request) GetUsage() EKeyEscrowUsage {
	if m != nil && m.Usage != nil {
		return *m.Usage
	}
	return Default_CKeyEscrow_Request_Usage
}

func (m *CKeyEscrow_Request) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

type CKeyEscrow_Ticket struct {
	Password             []byte           `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Identifier           *uint64          `protobuf:"varint,2,opt,name=identifier" json:"identifier,omitempty"`
	Payload              []byte           `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Timestamp            *uint32          `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Usage                *EKeyEscrowUsage `protobuf:"varint,5,opt,name=usage,enum=EKeyEscrowUsage,def=0" json:"usage,omitempty"`
	DeviceName           *string          `protobuf:"bytes,6,opt,name=device_name" json:"device_name,omitempty"`
	DeviceModel          *string          `protobuf:"bytes,7,opt,name=device_model" json:"device_model,omitempty"`
	DeviceSerial         *string          `protobuf:"bytes,8,opt,name=device_serial" json:"device_serial,omitempty"`
	DeviceProvisioningId *uint32          `protobuf:"varint,9,opt,name=device_provisioning_id" json:"device_provisioning_id,omitempty"`
	XXX_unrecognized     []byte           `json:"-"`
}

func (m *CKeyEscrow_Ticket) Reset()                    { *m = CKeyEscrow_Ticket{} }
func (m *CKeyEscrow_Ticket) String() string            { return proto.CompactTextString(m) }
func (*CKeyEscrow_Ticket) ProtoMessage()               {}
func (*CKeyEscrow_Ticket) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

const Default_CKeyEscrow_Ticket_Usage EKeyEscrowUsage = EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice

func (m *CKeyEscrow_Ticket) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CKeyEscrow_Ticket) GetIdentifier() uint64 {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return 0
}

func (m *CKeyEscrow_Ticket) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CKeyEscrow_Ticket) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CKeyEscrow_Ticket) GetUsage() EKeyEscrowUsage {
	if m != nil && m.Usage != nil {
		return *m.Usage
	}
	return Default_CKeyEscrow_Ticket_Usage
}

func (m *CKeyEscrow_Ticket) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceSerial() string {
	if m != nil && m.DeviceSerial != nil {
		return *m.DeviceSerial
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceProvisioningId() uint32 {
	if m != nil && m.DeviceProvisioningId != nil {
		return *m.DeviceProvisioningId
	}
	return 0
}

type CKeyEscrow_Response struct {
	Ticket           *CKeyEscrow_Ticket `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CKeyEscrow_Response) Reset()                    { *m = CKeyEscrow_Response{} }
func (m *CKeyEscrow_Response) String() string            { return proto.CompactTextString(m) }
func (*CKeyEscrow_Response) ProtoMessage()               {}
func (*CKeyEscrow_Response) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *CKeyEscrow_Response) GetTicket() *CKeyEscrow_Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*CKeyEscrow_Request)(nil), "CKeyEscrow_Request")
	proto.RegisterType((*CKeyEscrow_Ticket)(nil), "CKeyEscrow_Ticket")
	proto.RegisterType((*CKeyEscrow_Response)(nil), "CKeyEscrow_Response")
	proto.RegisterEnum("EKeyEscrowUsage", EKeyEscrowUsage_name, EKeyEscrowUsage_value)
}

var fileDescriptor15 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xc9, 0xfe, 0x75, 0x3d, 0xeb, 0x58, 0xe7, 0x0e, 0x14, 0x15, 0x09, 0x59, 0x11, 0x12,
	0x08, 0x41, 0x2e, 0x7a, 0x01, 0x62, 0x77, 0xb0, 0x4d, 0x42, 0xe2, 0x8e, 0xc2, 0x75, 0x74, 0x88,
	0xcf, 0x5a, 0xab, 0x89, 0x1d, 0x6c, 0xa7, 0xa3, 0x77, 0xd3, 0x5e, 0x83, 0xe7, 0xe0, 0x1d, 0x78,
	0x2c, 0x6c, 0xaf, 0x8c, 0x75, 0x45, 0xe2, 0x86, 0xbb, 0xe4, 0xcb, 0xd1, 0xe7, 0xdf, 0xf1, 0xf7,
	0x05, 0x9e, 0x5a, 0x47, 0x58, 0xd7, 0x64, 0x2d, 0x4e, 0xc8, 0x16, 0x96, 0x4a, 0x43, 0xce, 0xe6,
	0x51, 0x2d, 0x2b, 0x49, 0xca, 0xe5, 0x8d, 0xd1, 0x4e, 0x0f, 0x5f, 0xac, 0x0e, 0xb6, 0x4a, 0x9e,
	0x4b, 0x12, 0xc5, 0x17, 0xb4, 0xb4, 0x3e, 0x9d, 0x7d, 0x4f, 0x80, 0x9d, 0x7c, 0xa0, 0xc5, 0x99,
	0x2d, 0x8d, 0xbe, 0x28, 0x3e, 0xd2, 0xd7, 0x96, 0xac, 0x63, 0x8f, 0x60, 0x60, 0x2c, 0x16, 0x1a,
	0xa9, 0x29, 0xec, 0x14, 0x0b, 0x27, 0xcb, 0x19, 0xb9, 0x34, 0xe1, 0xc9, 0xb3, 0x1e, 0xeb, 0xc3,
	0x6e, 0x83, 0xd6, 0x5e, 0x68, 0x23, 0xd2, 0x8d, 0xa8, 0xbc, 0x85, 0xed, 0x36, 0x1c, 0x97, 0x6e,
	0xfa, 0xd7, 0xfb, 0xa3, 0x7e, 0x7e, 0x76, 0x63, 0xf9, 0x39, 0xe8, 0xc7, 0x7c, 0x56, 0xdc, 0x91,
	0xc6, 0xce, 0x78, 0x16, 0xa9, 0x26, 0xa7, 0x34, 0x97, 0x25, 0xb1, 0x01, 0xec, 0x89, 0xf8, 0x54,
	0x28, 0xac, 0x29, 0xdd, 0xf2, 0x46, 0xdd, 0xec, 0x6a, 0x03, 0x0e, 0x6f, 0xd1, 0x7d, 0x8a, 0x14,
	0x2b, 0xe7, 0x5f, 0x13, 0x31, 0x00, 0x29, 0xfc, 0x52, 0x61, 0x55, 0x13, 0x99, 0xb6, 0xd8, 0x01,
	0x74, 0x1a, 0x5c, 0x54, 0x1a, 0x45, 0xa4, 0xea, 0xb1, 0x43, 0xe8, 0x3a, 0xe9, 0xef, 0xc5, 0x61,
	0xdd, 0x44, 0xff, 0xfd, 0x3f, 0xdc, 0xdb, 0xff, 0x8b, 0x7b, 0x27, 0x70, 0xb3, 0x23, 0xe8, 0x2d,
	0xc5, 0x5a, 0x0b, 0xaa, 0xd2, 0x4e, 0x54, 0x1f, 0xc0, 0xfe, 0x52, 0xb5, 0x64, 0x24, 0x56, 0xe9,
	0x6e, 0x94, 0x1f, 0xc3, 0xc3, 0xa5, 0xec, 0x23, 0x99, 0x4b, 0x2b, 0xb5, 0xf2, 0xf6, 0x85, 0x14,
	0x69, 0x37, 0x40, 0x66, 0x6f, 0x60, 0xb0, 0x92, 0x90, 0x6d, 0xb4, 0xb2, 0xc4, 0x32, 0xd8, 0xb9,
	0x95, 0xca, 0xde, 0x88, 0xe5, 0x6b, 0x37, 0xf5, 0xfc, 0x35, 0x1c, 0xdc, 0xc1, 0x67, 0x4f, 0xe0,
	0x9f, 0x3b, 0xf5, 0xef, 0x8d, 0x7e, 0x26, 0xd0, 0x19, 0x5f, 0x57, 0x8c, 0x5d, 0x26, 0xd0, 0xbd,
	0x99, 0x67, 0x83, 0x7c, 0xbd, 0x2e, 0xc3, 0xa3, 0xfc, 0x2f, 0x84, 0xd9, 0xfb, 0xab, 0x1f, 0xe9,
	0xe9, 0x98, 0x4c, 0xf0, 0xe4, 0x4e, 0xf3, 0x86, 0xcc, 0xb9, 0x36, 0x35, 0xc7, 0xd6, 0x4d, 0x43,
	0x58, 0x25, 0x3a, 0x12, 0x7c, 0x46, 0x8b, 0x97, 0xf4, 0xad, 0x9c, 0xa2, 0x9a, 0x10, 0x97, 0x6a,
	0xae, 0xab, 0xb9, 0x27, 0xe1, 0xe3, 0x50, 0x55, 0x7e, 0x12, 0xbb, 0x3a, 0x3c, 0xf6, 0x4e, 0xaf,
	0x7e, 0x3b, 0x79, 0x0f, 0x8e, 0x65, 0xe9, 0x0b, 0x1e, 0xe6, 0x3c, 0x63, 0x4c, 0x1e, 0x2b, 0xcb,
	0x51, 0x09, 0x3e, 0x69, 0xd1, 0x88, 0xf0, 0x61, 0xf9, 0x87, 0xbc, 0xdb, 0xbc, 0x4c, 0x92, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x32, 0x21, 0xb8, 0x5f, 0x3e, 0x03, 0x00, 0x00,
}
