// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_gameservers.steamclient.proto

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CGameServers_GetServerList_Request struct {
	Filter           *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Limit            *uint32 `protobuf:"varint,2,opt,name=limit,def=100" json:"limit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CGameServers_GetServerList_Request) Reset()         { *m = CGameServers_GetServerList_Request{} }
func (m *CGameServers_GetServerList_Request) String() string { return proto.CompactTextString(m) }
func (*CGameServers_GetServerList_Request) ProtoMessage()    {}
func (*CGameServers_GetServerList_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{0}
}

const Default_CGameServers_GetServerList_Request_Limit uint32 = 100

func (m *CGameServers_GetServerList_Request) GetFilter() string {
	if m != nil && m.Filter != nil {
		return *m.Filter
	}
	return ""
}

func (m *CGameServers_GetServerList_Request) GetLimit() uint32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return Default_CGameServers_GetServerList_Request_Limit
}

type CGameServers_GetServerList_Response struct {
	Servers          []*CGameServers_GetServerList_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *CGameServers_GetServerList_Response) Reset()         { *m = CGameServers_GetServerList_Response{} }
func (m *CGameServers_GetServerList_Response) String() string { return proto.CompactTextString(m) }
func (*CGameServers_GetServerList_Response) ProtoMessage()    {}
func (*CGameServers_GetServerList_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{1}
}

func (m *CGameServers_GetServerList_Response) GetServers() []*CGameServers_GetServerList_Response_Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type CGameServers_GetServerList_Response_Server struct {
	Addr             *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Gameport         *uint32 `protobuf:"varint,2,opt,name=gameport" json:"gameport,omitempty"`
	Specport         *uint32 `protobuf:"varint,3,opt,name=specport" json:"specport,omitempty"`
	Steamid          *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Appid            *uint32 `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
	Gamedir          *string `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version          *string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product          *string `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region           *int32  `protobuf:"varint,10,opt,name=region" json:"region,omitempty"`
	Players          *int32  `protobuf:"varint,11,opt,name=players" json:"players,omitempty"`
	MaxPlayers       *int32  `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots             *int32  `protobuf:"varint,13,opt,name=bots" json:"bots,omitempty"`
	Map              *string `protobuf:"bytes,14,opt,name=map" json:"map,omitempty"`
	Secure           *bool   `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated        *bool   `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os               *string `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	Gametype         *string `protobuf:"bytes,18,opt,name=gametype" json:"gametype,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CGameServers_GetServerList_Response_Server) Reset() {
	*m = CGameServers_GetServerList_Response_Server{}
}
func (m *CGameServers_GetServerList_Response_Server) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerList_Response_Server) ProtoMessage() {}
func (*CGameServers_GetServerList_Response_Server) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{1, 0}
}

func (m *CGameServers_GetServerList_Response_Server) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetGameport() uint32 {
	if m != nil && m.Gameport != nil {
		return *m.Gameport
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetSpecport() uint32 {
	if m != nil && m.Specport != nil {
		return *m.Specport
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetGamedir() string {
	if m != nil && m.Gamedir != nil {
		return *m.Gamedir
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetProduct() string {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetRegion() int32 {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetPlayers() int32 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetMaxPlayers() int32 {
	if m != nil && m.MaxPlayers != nil {
		return *m.MaxPlayers
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetBots() int32 {
	if m != nil && m.Bots != nil {
		return *m.Bots
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetSecure() bool {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return false
}

func (m *CGameServers_GetServerList_Response_Server) GetDedicated() bool {
	if m != nil && m.Dedicated != nil {
		return *m.Dedicated
	}
	return false
}

func (m *CGameServers_GetServerList_Response_Server) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetGametype() string {
	if m != nil && m.Gametype != nil {
		return *m.Gametype
	}
	return ""
}

type CGameServers_GetServerSteamIDsByIP_Request struct {
	ServerIps        []string `protobuf:"bytes,1,rep,name=server_ips,json=serverIps" json:"server_ips,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CGameServers_GetServerSteamIDsByIP_Request) Reset() {
	*m = CGameServers_GetServerSteamIDsByIP_Request{}
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerSteamIDsByIP_Request) ProtoMessage() {}
func (*CGameServers_GetServerSteamIDsByIP_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{2}
}

func (m *CGameServers_GetServerSteamIDsByIP_Request) GetServerIps() []string {
	if m != nil {
		return m.ServerIps
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response struct {
	Servers          []*CGameServers_IPsWithSteamIDs_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CGameServers_IPsWithSteamIDs_Response) Reset()         { *m = CGameServers_IPsWithSteamIDs_Response{} }
func (m *CGameServers_IPsWithSteamIDs_Response) String() string { return proto.CompactTextString(m) }
func (*CGameServers_IPsWithSteamIDs_Response) ProtoMessage()    {}
func (*CGameServers_IPsWithSteamIDs_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{3}
}

func (m *CGameServers_IPsWithSteamIDs_Response) GetServers() []*CGameServers_IPsWithSteamIDs_Response_Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response_Server struct {
	Addr             *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Steamid          *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CGameServers_IPsWithSteamIDs_Response_Server) Reset() {
	*m = CGameServers_IPsWithSteamIDs_Response_Server{}
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_IPsWithSteamIDs_Response_Server) ProtoMessage() {}
func (*CGameServers_IPsWithSteamIDs_Response_Server) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{3, 0}
}

func (m *CGameServers_IPsWithSteamIDs_Response_Server) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *CGameServers_IPsWithSteamIDs_Response_Server) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

type CGameServers_GetServerIPsBySteamID_Request struct {
	ServerSteamids   []uint64 `protobuf:"fixed64,1,rep,name=server_steamids,json=serverSteamids" json:"server_steamids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CGameServers_GetServerIPsBySteamID_Request) Reset() {
	*m = CGameServers_GetServerIPsBySteamID_Request{}
}
func (m *CGameServers_GetServerIPsBySteamID_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerIPsBySteamID_Request) ProtoMessage() {}
func (*CGameServers_GetServerIPsBySteamID_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{4}
}

func (m *CGameServers_GetServerIPsBySteamID_Request) GetServerSteamids() []uint64 {
	if m != nil {
		return m.ServerSteamids
	}
	return nil
}

func init() {
	proto.RegisterType((*CGameServers_GetServerList_Request)(nil), "CGameServers_GetServerList_Request")
	proto.RegisterType((*CGameServers_GetServerList_Response)(nil), "CGameServers_GetServerList_Response")
	proto.RegisterType((*CGameServers_GetServerList_Response_Server)(nil), "CGameServers_GetServerList_Response.Server")
	proto.RegisterType((*CGameServers_GetServerSteamIDsByIP_Request)(nil), "CGameServers_GetServerSteamIDsByIP_Request")
	proto.RegisterType((*CGameServers_IPsWithSteamIDs_Response)(nil), "CGameServers_IPsWithSteamIDs_Response")
	proto.RegisterType((*CGameServers_IPsWithSteamIDs_Response_Server)(nil), "CGameServers_IPsWithSteamIDs_Response.Server")
	proto.RegisterType((*CGameServers_GetServerIPsBySteamID_Request)(nil), "CGameServers_GetServerIPsBySteamID_Request")
}

func init() { proto.RegisterFile("steammessages_gameservers.steamclient.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4b, 0x6f, 0x33, 0x35,
	0x14, 0xd5, 0xe4, 0xd5, 0xc6, 0xa1, 0x0f, 0xac, 0x82, 0xac, 0x88, 0x87, 0x35, 0x05, 0x1a, 0xd1,
	0x32, 0x0d, 0x5d, 0x14, 0x89, 0x2e, 0x10, 0x01, 0x29, 0x8a, 0x60, 0x11, 0xa6, 0x3c, 0x96, 0x91,
	0x33, 0x73, 0x33, 0xb1, 0x94, 0x79, 0xd4, 0xf6, 0x54, 0xcd, 0x36, 0x6b, 0x7e, 0x06, 0x0b, 0x24,
	0x04, 0xbb, 0xfc, 0x24, 0x7e, 0x06, 0x12, 0xb2, 0x3d, 0x93, 0x47, 0x9b, 0x7e, 0x5f, 0x76, 0x3e,
	0x3e, 0xf7, 0x5e, 0x9f, 0xeb, 0x7b, 0x6c, 0x74, 0x29, 0x15, 0xb0, 0x38, 0x06, 0x29, 0x59, 0x04,
	0x72, 0x14, 0xb1, 0x18, 0x24, 0x88, 0x47, 0x10, 0xd2, 0x33, 0x4c, 0x30, 0xe3, 0x90, 0x28, 0x2f,
	0x13, 0xa9, 0x4a, 0xdb, 0x34, 0x4a, 0xd3, 0x68, 0x06, 0xd7, 0x06, 0x8d, 0xf3, 0xc9, 0x75, 0x08,
	0x32, 0x10, 0x3c, 0x53, 0xa9, 0x28, 0x22, 0xae, 0xb6, 0xcb, 0xe5, 0x09, 0x9f, 0x70, 0x08, 0x47,
	0x63, 0x26, 0xe1, 0x65, 0x3d, 0xf7, 0x1f, 0x07, 0xb9, 0xdf, 0xf5, 0x59, 0x0c, 0xf7, 0xf6, 0xc8,
	0x51, 0x1f, 0x94, 0x5d, 0xfe, 0xc8, 0xa5, 0x1a, 0xf9, 0xf0, 0x90, 0x83, 0x54, 0xb8, 0x8b, 0x1a,
	0x13, 0x3e, 0x53, 0x20, 0x88, 0x43, 0x9d, 0x4e, 0xb3, 0x47, 0x16, 0x4b, 0x72, 0xf6, 0x53, 0x0e,
	0x62, 0x4e, 0xed, 0x3e, 0x95, 0x4a, 0xf0, 0x24, 0xf2, 0xfc, 0x22, 0x0e, 0xff, 0x8a, 0xea, 0x33,
	0x1e, 0x73, 0x45, 0x2a, 0xd4, 0xe9, 0x1c, 0x7d, 0x5d, 0xfd, 0xb2, 0xdb, 0xed, 0xdd, 0x2d, 0x96,
	0xe4, 0xab, 0x9f, 0xa7, 0x40, 0x63, 0xf6, 0xc4, 0xe3, 0x3c, 0xa6, 0x49, 0x1e, 0x8f, 0x41, 0xd0,
	0x74, 0x42, 0x8b, 0x8e, 0xa9, 0x4a, 0xa9, 0x00, 0x95, 0x8b, 0x84, 0xf2, 0x84, 0xaa, 0x29, 0x50,
	0x01, 0x32, 0x4b, 0x13, 0x09, 0xbe, 0x2d, 0xe7, 0xfe, 0x57, 0x43, 0xe7, 0x6f, 0x14, 0x6c, 0xc3,
	0x71, 0x82, 0x0e, 0x8a, 0x9a, 0xc4, 0xa1, 0xd5, 0x4e, 0xeb, 0xe6, 0xd2, 0xdb, 0x23, 0xcd, 0xb3,
	0x7b, 0xbd, 0x8b, 0xc5, 0x92, 0x9c, 0x6b, 0x66, 0x53, 0x5b, 0xcc, 0x54, 0x30, 0xe5, 0x49, 0x64,
	0x74, 0xd9, 0x36, 0xfd, 0xf2, 0x90, 0xf6, 0xbf, 0x55, 0xd4, 0xb0, 0xc9, 0xf8, 0x16, 0xd5, 0x58,
	0x18, 0x96, 0x57, 0xe5, 0x2e, 0x96, 0xe4, 0x23, 0xdd, 0xb4, 0x8d, 0xbc, 0x90, 0x74, 0x30, 0xa4,
	0x2c, 0x09, 0xe9, 0x83, 0xb9, 0xbe, 0x2c, 0x15, 0xca, 0x37, 0xf1, 0xb8, 0x8d, 0x0e, 0xf5, 0xf0,
	0xf5, 0x8e, 0xbd, 0x35, 0x7f, 0x85, 0x35, 0x27, 0x33, 0x08, 0x0c, 0x57, 0xb5, 0x5c, 0x89, 0x31,
	0x41, 0x07, 0x66, 0xb0, 0x3c, 0x24, 0x35, 0xea, 0x74, 0x1a, 0x7e, 0x09, 0x31, 0x46, 0xb5, 0x84,
	0xc5, 0x40, 0xea, 0x5a, 0x89, 0x6f, 0xd6, 0xf8, 0x0c, 0xd5, 0x59, 0x96, 0xf1, 0x90, 0x34, 0x4c,
	0x19, 0x0b, 0x74, 0x0d, 0x7d, 0x56, 0xc8, 0x05, 0x39, 0x30, 0xc1, 0x25, 0xd4, 0x8c, 0x6e, 0x90,
	0xa7, 0x09, 0x39, 0xb4, 0x4c, 0x01, 0x35, 0x93, 0x89, 0x34, 0xcc, 0x03, 0x45, 0x9a, 0x96, 0x29,
	0x20, 0x7e, 0x1f, 0x35, 0x04, 0x44, 0x3a, 0x05, 0x51, 0xa7, 0x53, 0xf7, 0x0b, 0x64, 0x32, 0x66,
	0x6c, 0xae, 0x87, 0xd2, 0x32, 0x44, 0x09, 0xf1, 0xc7, 0xa8, 0x15, 0xb3, 0xa7, 0x51, 0xc9, 0xbe,
	0x63, 0x58, 0x14, 0xb3, 0xa7, 0x61, 0x11, 0x80, 0x51, 0x6d, 0x9c, 0x2a, 0x49, 0x8e, 0x0c, 0x63,
	0xd6, 0xf8, 0x14, 0x55, 0x63, 0x96, 0x91, 0x63, 0x73, 0xb8, 0x5e, 0xea, 0x83, 0x25, 0x04, 0xb9,
	0x00, 0x72, 0x42, 0x9d, 0xce, 0xa1, 0x5f, 0x20, 0xfc, 0x01, 0x6a, 0x86, 0x10, 0xf2, 0x80, 0x29,
	0x08, 0xc9, 0xa9, 0xa1, 0xd6, 0x1b, 0xf8, 0x18, 0x55, 0x52, 0x49, 0xde, 0x35, 0x65, 0x2a, 0xa9,
	0x2c, 0x07, 0xa1, 0xe6, 0x19, 0x10, 0x6c, 0x76, 0x57, 0xd8, 0xfd, 0x01, 0x7d, 0xbe, 0xdb, 0x47,
	0xf7, 0xfa, 0xce, 0x07, 0xdf, 0xcb, 0xde, 0x7c, 0x30, 0x5c, 0xbd, 0x9b, 0x0f, 0x11, 0xb2, 0x63,
	0x1f, 0xf1, 0xcc, 0x1a, 0xb1, 0xe9, 0x37, 0xed, 0xce, 0x20, 0x93, 0xee, 0x9f, 0x0e, 0xfa, 0x74,
	0xab, 0xda, 0x60, 0x28, 0x7f, 0xe3, 0x6a, 0x5a, 0xd6, 0x5a, 0xdb, 0xb9, 0xff, 0xdc, 0xce, 0x5f,
	0x78, 0x7b, 0x25, 0x16, 0x86, 0x5e, 0xfb, 0xf4, 0x76, 0x65, 0x53, 0xbc, 0x69, 0xd3, 0xc2, 0x82,
	0x1b, 0x56, 0xaa, 0x6c, 0x59, 0xc9, 0xfd, 0xe5, 0xb5, 0xbe, 0x07, 0x43, 0xd9, 0x9b, 0x17, 0xe7,
	0xae, 0xfa, 0xbe, 0x40, 0x27, 0x45, 0xdf, 0x45, 0xbe, 0x95, 0xdd, 0xf0, 0x8f, 0xe5, 0xfa, 0xb2,
	0x78, 0x28, 0x6f, 0xfe, 0xaa, 0xa1, 0xd6, 0x46, 0x59, 0xfc, 0xbb, 0x83, 0x8e, 0xb6, 0x9e, 0x26,
	0x3e, 0xf7, 0xde, 0xfe, 0x3f, 0xb5, 0x3f, 0xd9, 0xe7, 0x71, 0xbb, 0xdd, 0xc5, 0x92, 0x5c, 0xf5,
	0x41, 0x49, 0xca, 0xe8, 0xec, 0xd9, 0xe3, 0x8e, 0xf8, 0x23, 0x24, 0x94, 0x6d, 0x7f, 0x67, 0xf8,
	0x0f, 0x07, 0xbd, 0xb7, 0x73, 0xc2, 0xf8, 0xb5, 0xef, 0x64, 0x97, 0x0d, 0xda, 0x9f, 0xed, 0x37,
	0x2c, 0xf7, 0x76, 0xb1, 0x24, 0x37, 0x3b, 0x05, 0xd2, 0x32, 0x78, 0x25, 0xb4, 0xe4, 0x07, 0x43,
	0x89, 0xff, 0xde, 0x94, 0xb9, 0x39, 0x90, 0x57, 0x65, 0xee, 0x9a, 0xda, 0xde, 0x32, 0xbf, 0x59,
	0x2c, 0xc9, 0xdd, 0x6e, 0x99, 0xfa, 0x6f, 0x0b, 0x43, 0x01, 0x52, 0xc2, 0x4b, 0xa9, 0x65, 0xa5,
	0xb6, 0xe9, 0xf3, 0x5b, 0x93, 0xc3, 0x03, 0xa0, 0x93, 0x54, 0x50, 0x09, 0x4c, 0xd8, 0xdf, 0x55,
	0xff, 0x8d, 0x31, 0x4b, 0x58, 0xa4, 0x81, 0x7e, 0x77, 0xe5, 0x8c, 0xbc, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x82, 0xd8, 0x49, 0x5a, 0x2b, 0x07, 0x00, 0x00,
}
