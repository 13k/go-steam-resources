// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_credentials.steamclient.proto

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CCredentials_TestAvailablePassword_Request struct {
	Password          *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	ShaDigestPassword []byte  `protobuf:"bytes,2,opt,name=sha_digest_password,json=shaDigestPassword" json:"sha_digest_password,omitempty"`
	AccountName       *string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CCredentials_TestAvailablePassword_Request) Reset() {
	*m = CCredentials_TestAvailablePassword_Request{}
}
func (m *CCredentials_TestAvailablePassword_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_TestAvailablePassword_Request) ProtoMessage() {}
func (*CCredentials_TestAvailablePassword_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0}
}

func (m *CCredentials_TestAvailablePassword_Request) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CCredentials_TestAvailablePassword_Request) GetShaDigestPassword() []byte {
	if m != nil {
		return m.ShaDigestPassword
	}
	return nil
}

func (m *CCredentials_TestAvailablePassword_Request) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

type CCredentials_TestAvailablePassword_Response struct {
	IsValid          *bool  `protobuf:"varint,3,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_TestAvailablePassword_Response) Reset() {
	*m = CCredentials_TestAvailablePassword_Response{}
}
func (m *CCredentials_TestAvailablePassword_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_TestAvailablePassword_Response) ProtoMessage() {}
func (*CCredentials_TestAvailablePassword_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{1}
}

func (m *CCredentials_TestAvailablePassword_Response) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

type CCredentials_GetSteamGuardDetails_Request struct {
	IncludeNewAuthentications *bool   `protobuf:"varint,1,opt,name=include_new_authentications,json=includeNewAuthentications,def=1" json:"include_new_authentications,omitempty"`
	Webcookie                 *string `protobuf:"bytes,2,opt,name=webcookie" json:"webcookie,omitempty"`
	TimestampMinimumWanted    *uint32 `protobuf:"fixed32,3,opt,name=timestamp_minimum_wanted,json=timestampMinimumWanted" json:"timestamp_minimum_wanted,omitempty"`
	Ipaddress                 *int32  `protobuf:"varint,4,opt,name=ipaddress" json:"ipaddress,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *CCredentials_GetSteamGuardDetails_Request) Reset() {
	*m = CCredentials_GetSteamGuardDetails_Request{}
}
func (m *CCredentials_GetSteamGuardDetails_Request) String() string { return proto.CompactTextString(m) }
func (*CCredentials_GetSteamGuardDetails_Request) ProtoMessage()    {}
func (*CCredentials_GetSteamGuardDetails_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{2}
}

const Default_CCredentials_GetSteamGuardDetails_Request_IncludeNewAuthentications bool = true

func (m *CCredentials_GetSteamGuardDetails_Request) GetIncludeNewAuthentications() bool {
	if m != nil && m.IncludeNewAuthentications != nil {
		return *m.IncludeNewAuthentications
	}
	return Default_CCredentials_GetSteamGuardDetails_Request_IncludeNewAuthentications
}

func (m *CCredentials_GetSteamGuardDetails_Request) GetWebcookie() string {
	if m != nil && m.Webcookie != nil {
		return *m.Webcookie
	}
	return ""
}

func (m *CCredentials_GetSteamGuardDetails_Request) GetTimestampMinimumWanted() uint32 {
	if m != nil && m.TimestampMinimumWanted != nil {
		return *m.TimestampMinimumWanted
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Request) GetIpaddress() int32 {
	if m != nil && m.Ipaddress != nil {
		return *m.Ipaddress
	}
	return 0
}

type CCredentials_GetSteamGuardDetails_Response struct {
	IsSteamguardEnabled                                   *bool                                                           `protobuf:"varint,1,opt,name=is_steamguard_enabled,json=isSteamguardEnabled" json:"is_steamguard_enabled,omitempty"`
	TimestampSteamguardEnabled                            *uint32                                                         `protobuf:"fixed32,2,opt,name=timestamp_steamguard_enabled,json=timestampSteamguardEnabled" json:"timestamp_steamguard_enabled,omitempty"`
	DeprecatedNewauthentication                           []*CCredentials_GetSteamGuardDetails_Response_NewAuthentication `protobuf:"bytes,3,rep,name=deprecated_newauthentication,json=deprecatedNewauthentication" json:"deprecated_newauthentication,omitempty"`
	DeprecatedMachineNameUserchosen                       *string                                                         `protobuf:"bytes,4,opt,name=deprecated_machine_name_userchosen,json=deprecatedMachineNameUserchosen" json:"deprecated_machine_name_userchosen,omitempty"`
	DeprecatedTimestampMachineSteamguardEnabled           *uint32                                                         `protobuf:"fixed32,5,opt,name=deprecated_timestamp_machine_steamguard_enabled,json=deprecatedTimestampMachineSteamguardEnabled" json:"deprecated_timestamp_machine_steamguard_enabled,omitempty"`
	DeprecatedAuthenticationExistsFromGeolocBeforeMintime *bool                                                           `protobuf:"varint,6,opt,name=deprecated_authentication_exists_from_geoloc_before_mintime,json=deprecatedAuthenticationExistsFromGeolocBeforeMintime" json:"deprecated_authentication_exists_from_geoloc_before_mintime,omitempty"`
	DeprecatedMachineId                                   *uint64                                                         `protobuf:"varint,7,opt,name=deprecated_machine_id,json=deprecatedMachineId" json:"deprecated_machine_id,omitempty"`
	SessionData                                           []*CCredentials_GetSteamGuardDetails_Response_SessionData       `protobuf:"bytes,8,rep,name=session_data,json=sessionData" json:"session_data,omitempty"`
	IsTwofactorEnabled                                    *bool                                                           `protobuf:"varint,9,opt,name=is_twofactor_enabled,json=isTwofactorEnabled" json:"is_twofactor_enabled,omitempty"`
	TimestampTwofactorEnabled                             *uint32                                                         `protobuf:"fixed32,10,opt,name=timestamp_twofactor_enabled,json=timestampTwofactorEnabled" json:"timestamp_twofactor_enabled,omitempty"`
	IsPhoneVerified                                       *bool                                                           `protobuf:"varint,11,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	XXX_unrecognized                                      []byte                                                          `json:"-"`
}

func (m *CCredentials_GetSteamGuardDetails_Response) Reset() {
	*m = CCredentials_GetSteamGuardDetails_Response{}
}
func (m *CCredentials_GetSteamGuardDetails_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_GetSteamGuardDetails_Response) ProtoMessage() {}
func (*CCredentials_GetSteamGuardDetails_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{3}
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetIsSteamguardEnabled() bool {
	if m != nil && m.IsSteamguardEnabled != nil {
		return *m.IsSteamguardEnabled
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetTimestampSteamguardEnabled() uint32 {
	if m != nil && m.TimestampSteamguardEnabled != nil {
		return *m.TimestampSteamguardEnabled
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetDeprecatedNewauthentication() []*CCredentials_GetSteamGuardDetails_Response_NewAuthentication {
	if m != nil {
		return m.DeprecatedNewauthentication
	}
	return nil
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetDeprecatedMachineNameUserchosen() string {
	if m != nil && m.DeprecatedMachineNameUserchosen != nil {
		return *m.DeprecatedMachineNameUserchosen
	}
	return ""
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetDeprecatedTimestampMachineSteamguardEnabled() uint32 {
	if m != nil && m.DeprecatedTimestampMachineSteamguardEnabled != nil {
		return *m.DeprecatedTimestampMachineSteamguardEnabled
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetDeprecatedAuthenticationExistsFromGeolocBeforeMintime() bool {
	if m != nil && m.DeprecatedAuthenticationExistsFromGeolocBeforeMintime != nil {
		return *m.DeprecatedAuthenticationExistsFromGeolocBeforeMintime
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetDeprecatedMachineId() uint64 {
	if m != nil && m.DeprecatedMachineId != nil {
		return *m.DeprecatedMachineId
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetSessionData() []*CCredentials_GetSteamGuardDetails_Response_SessionData {
	if m != nil {
		return m.SessionData
	}
	return nil
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetIsTwofactorEnabled() bool {
	if m != nil && m.IsTwofactorEnabled != nil {
		return *m.IsTwofactorEnabled
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetTimestampTwofactorEnabled() uint32 {
	if m != nil && m.TimestampTwofactorEnabled != nil {
		return *m.TimestampTwofactorEnabled
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response) GetIsPhoneVerified() bool {
	if m != nil && m.IsPhoneVerified != nil {
		return *m.IsPhoneVerified
	}
	return false
}

type CCredentials_GetSteamGuardDetails_Response_NewAuthentication struct {
	TimestampSteamguardEnabled *uint32 `protobuf:"fixed32,1,opt,name=timestamp_steamguard_enabled,json=timestampSteamguardEnabled" json:"timestamp_steamguard_enabled,omitempty"`
	IsWebCookie                *bool   `protobuf:"varint,2,opt,name=is_web_cookie,json=isWebCookie" json:"is_web_cookie,omitempty"`
	Ipaddress                  *int32  `protobuf:"varint,3,opt,name=ipaddress" json:"ipaddress,omitempty"`
	GeolocInfo                 *string `protobuf:"bytes,4,opt,name=geoloc_info,json=geolocInfo" json:"geoloc_info,omitempty"`
	IsRemembered               *bool   `protobuf:"varint,5,opt,name=is_remembered,json=isRemembered" json:"is_remembered,omitempty"`
	MachineNameUserSupplied    *string `protobuf:"bytes,6,opt,name=machine_name_user_supplied,json=machineNameUserSupplied" json:"machine_name_user_supplied,omitempty"`
	Status                     *int32  `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized           []byte  `json:"-"`
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) Reset() {
	*m = CCredentials_GetSteamGuardDetails_Response_NewAuthentication{}
}
func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_GetSteamGuardDetails_Response_NewAuthentication) ProtoMessage() {}
func (*CCredentials_GetSteamGuardDetails_Response_NewAuthentication) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{3, 0}
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetTimestampSteamguardEnabled() uint32 {
	if m != nil && m.TimestampSteamguardEnabled != nil {
		return *m.TimestampSteamguardEnabled
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetIsWebCookie() bool {
	if m != nil && m.IsWebCookie != nil {
		return *m.IsWebCookie
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetIpaddress() int32 {
	if m != nil && m.Ipaddress != nil {
		return *m.Ipaddress
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetGeolocInfo() string {
	if m != nil && m.GeolocInfo != nil {
		return *m.GeolocInfo
	}
	return ""
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetIsRemembered() bool {
	if m != nil && m.IsRemembered != nil {
		return *m.IsRemembered
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetMachineNameUserSupplied() string {
	if m != nil && m.MachineNameUserSupplied != nil {
		return *m.MachineNameUserSupplied
	}
	return ""
}

func (m *CCredentials_GetSteamGuardDetails_Response_NewAuthentication) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type CCredentials_GetSteamGuardDetails_Response_SessionData struct {
	MachineId                                   *uint64                                                         `protobuf:"varint,1,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	MachineNameUserchosen                       *string                                                         `protobuf:"bytes,2,opt,name=machine_name_userchosen,json=machineNameUserchosen" json:"machine_name_userchosen,omitempty"`
	TimestampMachineSteamguardEnabled           *uint32                                                         `protobuf:"fixed32,3,opt,name=timestamp_machine_steamguard_enabled,json=timestampMachineSteamguardEnabled" json:"timestamp_machine_steamguard_enabled,omitempty"`
	AuthenticationExistsFromGeolocBeforeMintime *bool                                                           `protobuf:"varint,4,opt,name=authentication_exists_from_geoloc_before_mintime,json=authenticationExistsFromGeolocBeforeMintime" json:"authentication_exists_from_geoloc_before_mintime,omitempty"`
	Newauthentication                           []*CCredentials_GetSteamGuardDetails_Response_NewAuthentication `protobuf:"bytes,5,rep,name=newauthentication" json:"newauthentication,omitempty"`
	AuthenticationExistsFromSameIpBeforeMintime *bool                                                           `protobuf:"varint,6,opt,name=authentication_exists_from_same_ip_before_mintime,json=authenticationExistsFromSameIpBeforeMintime" json:"authentication_exists_from_same_ip_before_mintime,omitempty"`
	PublicIpv4                                  *uint32                                                         `protobuf:"varint,7,opt,name=public_ipv4,json=publicIpv4" json:"public_ipv4,omitempty"`
	XXX_unrecognized                            []byte                                                          `json:"-"`
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) Reset() {
	*m = CCredentials_GetSteamGuardDetails_Response_SessionData{}
}
func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_GetSteamGuardDetails_Response_SessionData) ProtoMessage() {}
func (*CCredentials_GetSteamGuardDetails_Response_SessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{3, 1}
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetMachineId() uint64 {
	if m != nil && m.MachineId != nil {
		return *m.MachineId
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetMachineNameUserchosen() string {
	if m != nil && m.MachineNameUserchosen != nil {
		return *m.MachineNameUserchosen
	}
	return ""
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetTimestampMachineSteamguardEnabled() uint32 {
	if m != nil && m.TimestampMachineSteamguardEnabled != nil {
		return *m.TimestampMachineSteamguardEnabled
	}
	return 0
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetAuthenticationExistsFromGeolocBeforeMintime() bool {
	if m != nil && m.AuthenticationExistsFromGeolocBeforeMintime != nil {
		return *m.AuthenticationExistsFromGeolocBeforeMintime
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetNewauthentication() []*CCredentials_GetSteamGuardDetails_Response_NewAuthentication {
	if m != nil {
		return m.Newauthentication
	}
	return nil
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetAuthenticationExistsFromSameIpBeforeMintime() bool {
	if m != nil && m.AuthenticationExistsFromSameIpBeforeMintime != nil {
		return *m.AuthenticationExistsFromSameIpBeforeMintime
	}
	return false
}

func (m *CCredentials_GetSteamGuardDetails_Response_SessionData) GetPublicIpv4() uint32 {
	if m != nil && m.PublicIpv4 != nil {
		return *m.PublicIpv4
	}
	return 0
}

type CCredentials_NewMachineNotificationDialog_Request struct {
	IsApproved       *bool  `protobuf:"varint,1,opt,name=is_approved,json=isApproved" json:"is_approved,omitempty"`
	IsWizardComplete *bool  `protobuf:"varint,2,opt,name=is_wizard_complete,json=isWizardComplete" json:"is_wizard_complete,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_NewMachineNotificationDialog_Request) Reset() {
	*m = CCredentials_NewMachineNotificationDialog_Request{}
}
func (m *CCredentials_NewMachineNotificationDialog_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_NewMachineNotificationDialog_Request) ProtoMessage() {}
func (*CCredentials_NewMachineNotificationDialog_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{4}
}

func (m *CCredentials_NewMachineNotificationDialog_Request) GetIsApproved() bool {
	if m != nil && m.IsApproved != nil {
		return *m.IsApproved
	}
	return false
}

func (m *CCredentials_NewMachineNotificationDialog_Request) GetIsWizardComplete() bool {
	if m != nil && m.IsWizardComplete != nil {
		return *m.IsWizardComplete
	}
	return false
}

type CCredentials_NewMachineNotificationDialog_Response struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_NewMachineNotificationDialog_Response) Reset() {
	*m = CCredentials_NewMachineNotificationDialog_Response{}
}
func (m *CCredentials_NewMachineNotificationDialog_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_NewMachineNotificationDialog_Response) ProtoMessage() {}
func (*CCredentials_NewMachineNotificationDialog_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{5}
}

type CCredentials_ValidateEmailAddress_Request struct {
	Stoken           *string `protobuf:"bytes,1,opt,name=stoken" json:"stoken,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCredentials_ValidateEmailAddress_Request) Reset() {
	*m = CCredentials_ValidateEmailAddress_Request{}
}
func (m *CCredentials_ValidateEmailAddress_Request) String() string { return proto.CompactTextString(m) }
func (*CCredentials_ValidateEmailAddress_Request) ProtoMessage()    {}
func (*CCredentials_ValidateEmailAddress_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{6}
}

func (m *CCredentials_ValidateEmailAddress_Request) GetStoken() string {
	if m != nil && m.Stoken != nil {
		return *m.Stoken
	}
	return ""
}

type CCredentials_ValidateEmailAddress_Response struct {
	WasValidated     *bool  `protobuf:"varint,1,opt,name=was_validated,json=wasValidated" json:"was_validated,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_ValidateEmailAddress_Response) Reset() {
	*m = CCredentials_ValidateEmailAddress_Response{}
}
func (m *CCredentials_ValidateEmailAddress_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_ValidateEmailAddress_Response) ProtoMessage() {}
func (*CCredentials_ValidateEmailAddress_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{7}
}

func (m *CCredentials_ValidateEmailAddress_Response) GetWasValidated() bool {
	if m != nil && m.WasValidated != nil {
		return *m.WasValidated
	}
	return false
}

type CCredentials_SteamGuardPhishingReport_Request struct {
	ParamString      *string `protobuf:"bytes,1,opt,name=param_string,json=paramString" json:"param_string,omitempty"`
	IpaddressActual  *uint32 `protobuf:"varint,2,opt,name=ipaddress_actual,json=ipaddressActual" json:"ipaddress_actual,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCredentials_SteamGuardPhishingReport_Request) Reset() {
	*m = CCredentials_SteamGuardPhishingReport_Request{}
}
func (m *CCredentials_SteamGuardPhishingReport_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_SteamGuardPhishingReport_Request) ProtoMessage() {}
func (*CCredentials_SteamGuardPhishingReport_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{8}
}

func (m *CCredentials_SteamGuardPhishingReport_Request) GetParamString() string {
	if m != nil && m.ParamString != nil {
		return *m.ParamString
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Request) GetIpaddressActual() uint32 {
	if m != nil && m.IpaddressActual != nil {
		return *m.IpaddressActual
	}
	return 0
}

type CCredentials_SteamGuardPhishingReport_Response struct {
	IpaddressLoginattempt   *uint32 `protobuf:"varint,1,opt,name=ipaddress_loginattempt,json=ipaddressLoginattempt" json:"ipaddress_loginattempt,omitempty"`
	CountrynameLoginattempt *string `protobuf:"bytes,2,opt,name=countryname_loginattempt,json=countrynameLoginattempt" json:"countryname_loginattempt,omitempty"`
	StatenameLoginattempt   *string `protobuf:"bytes,3,opt,name=statename_loginattempt,json=statenameLoginattempt" json:"statename_loginattempt,omitempty"`
	CitynameLoginattempt    *string `protobuf:"bytes,4,opt,name=cityname_loginattempt,json=citynameLoginattempt" json:"cityname_loginattempt,omitempty"`
	IpaddressActual         *uint32 `protobuf:"varint,5,opt,name=ipaddress_actual,json=ipaddressActual" json:"ipaddress_actual,omitempty"`
	CountrynameActual       *string `protobuf:"bytes,6,opt,name=countryname_actual,json=countrynameActual" json:"countryname_actual,omitempty"`
	StatenameActual         *string `protobuf:"bytes,7,opt,name=statename_actual,json=statenameActual" json:"statename_actual,omitempty"`
	CitynameActual          *string `protobuf:"bytes,8,opt,name=cityname_actual,json=citynameActual" json:"cityname_actual,omitempty"`
	SteamguardCode          *string `protobuf:"bytes,9,opt,name=steamguard_code,json=steamguardCode" json:"steamguard_code,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *CCredentials_SteamGuardPhishingReport_Response) Reset() {
	*m = CCredentials_SteamGuardPhishingReport_Response{}
}
func (m *CCredentials_SteamGuardPhishingReport_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_SteamGuardPhishingReport_Response) ProtoMessage() {}
func (*CCredentials_SteamGuardPhishingReport_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{9}
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetIpaddressLoginattempt() uint32 {
	if m != nil && m.IpaddressLoginattempt != nil {
		return *m.IpaddressLoginattempt
	}
	return 0
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetCountrynameLoginattempt() string {
	if m != nil && m.CountrynameLoginattempt != nil {
		return *m.CountrynameLoginattempt
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetStatenameLoginattempt() string {
	if m != nil && m.StatenameLoginattempt != nil {
		return *m.StatenameLoginattempt
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetCitynameLoginattempt() string {
	if m != nil && m.CitynameLoginattempt != nil {
		return *m.CitynameLoginattempt
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetIpaddressActual() uint32 {
	if m != nil && m.IpaddressActual != nil {
		return *m.IpaddressActual
	}
	return 0
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetCountrynameActual() string {
	if m != nil && m.CountrynameActual != nil {
		return *m.CountrynameActual
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetStatenameActual() string {
	if m != nil && m.StatenameActual != nil {
		return *m.StatenameActual
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetCitynameActual() string {
	if m != nil && m.CitynameActual != nil {
		return *m.CitynameActual
	}
	return ""
}

func (m *CCredentials_SteamGuardPhishingReport_Response) GetSteamguardCode() string {
	if m != nil && m.SteamguardCode != nil {
		return *m.SteamguardCode
	}
	return ""
}

type CCredentials_LastCredentialChangeTime_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_LastCredentialChangeTime_Request) Reset() {
	*m = CCredentials_LastCredentialChangeTime_Request{}
}
func (m *CCredentials_LastCredentialChangeTime_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_LastCredentialChangeTime_Request) ProtoMessage() {}
func (*CCredentials_LastCredentialChangeTime_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{10}
}

type CCredentials_LastCredentialChangeTime_Response struct {
	TimestampLastPasswordChange *uint32 `protobuf:"fixed32,1,opt,name=timestamp_last_password_change,json=timestampLastPasswordChange" json:"timestamp_last_password_change,omitempty"`
	TimestampLastEmailChange    *uint32 `protobuf:"fixed32,2,opt,name=timestamp_last_email_change,json=timestampLastEmailChange" json:"timestamp_last_email_change,omitempty"`
	TimestampLastPasswordReset  *uint32 `protobuf:"fixed32,3,opt,name=timestamp_last_password_reset,json=timestampLastPasswordReset" json:"timestamp_last_password_reset,omitempty"`
	XXX_unrecognized            []byte  `json:"-"`
}

func (m *CCredentials_LastCredentialChangeTime_Response) Reset() {
	*m = CCredentials_LastCredentialChangeTime_Response{}
}
func (m *CCredentials_LastCredentialChangeTime_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_LastCredentialChangeTime_Response) ProtoMessage() {}
func (*CCredentials_LastCredentialChangeTime_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{11}
}

func (m *CCredentials_LastCredentialChangeTime_Response) GetTimestampLastPasswordChange() uint32 {
	if m != nil && m.TimestampLastPasswordChange != nil {
		return *m.TimestampLastPasswordChange
	}
	return 0
}

func (m *CCredentials_LastCredentialChangeTime_Response) GetTimestampLastEmailChange() uint32 {
	if m != nil && m.TimestampLastEmailChange != nil {
		return *m.TimestampLastEmailChange
	}
	return 0
}

func (m *CCredentials_LastCredentialChangeTime_Response) GetTimestampLastPasswordReset() uint32 {
	if m != nil && m.TimestampLastPasswordReset != nil {
		return *m.TimestampLastPasswordReset
	}
	return 0
}

type CCredentials_GetAccountAuthSecret_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_GetAccountAuthSecret_Request) Reset() {
	*m = CCredentials_GetAccountAuthSecret_Request{}
}
func (m *CCredentials_GetAccountAuthSecret_Request) String() string { return proto.CompactTextString(m) }
func (*CCredentials_GetAccountAuthSecret_Request) ProtoMessage()    {}
func (*CCredentials_GetAccountAuthSecret_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{12}
}

type CCredentials_GetAccountAuthSecret_Response struct {
	SecretId         *int32 `protobuf:"varint,1,opt,name=secret_id,json=secretId" json:"secret_id,omitempty"`
	Secret           []byte `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCredentials_GetAccountAuthSecret_Response) Reset() {
	*m = CCredentials_GetAccountAuthSecret_Response{}
}
func (m *CCredentials_GetAccountAuthSecret_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CCredentials_GetAccountAuthSecret_Response) ProtoMessage() {}
func (*CCredentials_GetAccountAuthSecret_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13}
}

func (m *CCredentials_GetAccountAuthSecret_Response) GetSecretId() int32 {
	if m != nil && m.SecretId != nil {
		return *m.SecretId
	}
	return 0
}

func (m *CCredentials_GetAccountAuthSecret_Response) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func init() {
	proto.RegisterType((*CCredentials_TestAvailablePassword_Request)(nil), "CCredentials_TestAvailablePassword_Request")
	proto.RegisterType((*CCredentials_TestAvailablePassword_Response)(nil), "CCredentials_TestAvailablePassword_Response")
	proto.RegisterType((*CCredentials_GetSteamGuardDetails_Request)(nil), "CCredentials_GetSteamGuardDetails_Request")
	proto.RegisterType((*CCredentials_GetSteamGuardDetails_Response)(nil), "CCredentials_GetSteamGuardDetails_Response")
	proto.RegisterType((*CCredentials_GetSteamGuardDetails_Response_NewAuthentication)(nil), "CCredentials_GetSteamGuardDetails_Response.NewAuthentication")
	proto.RegisterType((*CCredentials_GetSteamGuardDetails_Response_SessionData)(nil), "CCredentials_GetSteamGuardDetails_Response.SessionData")
	proto.RegisterType((*CCredentials_NewMachineNotificationDialog_Request)(nil), "CCredentials_NewMachineNotificationDialog_Request")
	proto.RegisterType((*CCredentials_NewMachineNotificationDialog_Response)(nil), "CCredentials_NewMachineNotificationDialog_Response")
	proto.RegisterType((*CCredentials_ValidateEmailAddress_Request)(nil), "CCredentials_ValidateEmailAddress_Request")
	proto.RegisterType((*CCredentials_ValidateEmailAddress_Response)(nil), "CCredentials_ValidateEmailAddress_Response")
	proto.RegisterType((*CCredentials_SteamGuardPhishingReport_Request)(nil), "CCredentials_SteamGuardPhishingReport_Request")
	proto.RegisterType((*CCredentials_SteamGuardPhishingReport_Response)(nil), "CCredentials_SteamGuardPhishingReport_Response")
	proto.RegisterType((*CCredentials_LastCredentialChangeTime_Request)(nil), "CCredentials_LastCredentialChangeTime_Request")
	proto.RegisterType((*CCredentials_LastCredentialChangeTime_Response)(nil), "CCredentials_LastCredentialChangeTime_Response")
	proto.RegisterType((*CCredentials_GetAccountAuthSecret_Request)(nil), "CCredentials_GetAccountAuthSecret_Request")
	proto.RegisterType((*CCredentials_GetAccountAuthSecret_Response)(nil), "CCredentials_GetAccountAuthSecret_Response")
}

func init() { proto.RegisterFile("steammessages_credentials.steamclient.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x07, 0x63, 0x3b, 0x91, 0x9e, 0xec, 0x4d, 0x3c, 0x89, 0x1d, 0x46, 0xc9, 0xae, 0x19, 0xa6,
	0x80, 0x9d, 0x38, 0xcb, 0xec, 0x7a, 0x93, 0x7e, 0x2d, 0xb6, 0xa8, 0x63, 0x67, 0x53, 0xb7, 0x9b,
	0x34, 0xa5, 0xd3, 0x0d, 0xd0, 0x0b, 0x31, 0x22, 0x9f, 0xa4, 0x41, 0x48, 0x0e, 0xcb, 0x19, 0x49,
	0xed, 0x02, 0x0b, 0xa4, 0xba, 0xb5, 0x87, 0xa2, 0xe8, 0xad, 0x68, 0x0f, 0x3d, 0xf5, 0x0f, 0x28,
	0xa0, 0x02, 0xfd, 0x1f, 0xfa, 0x6f, 0xf4, 0xd8, 0x73, 0xaf, 0x05, 0x87, 0x23, 0x52, 0x1f, 0x94,
	0x6d, 0x15, 0x7b, 0x23, 0xdf, 0xd7, 0xbc, 0xcf, 0xdf, 0x9b, 0x81, 0x7d, 0x21, 0x91, 0x46, 0x11,
	0x0a, 0x41, 0x3b, 0x28, 0x3c, 0x3f, 0xc5, 0x00, 0x63, 0xc9, 0x68, 0x28, 0x1c, 0xc5, 0xf1, 0x43,
	0x86, 0xb1, 0x74, 0x92, 0x94, 0x4b, 0xde, 0x7c, 0x38, 0x2d, 0xdc, 0x8b, 0x59, 0x9b, 0x61, 0xe0,
	0xb5, 0xa8, 0xc0, 0x79, 0x69, 0xfb, 0xcf, 0x06, 0x3c, 0x38, 0x3a, 0x2a, 0x0d, 0x7a, 0xaf, 0x51,
	0xc8, 0xc3, 0x3e, 0x65, 0x21, 0x6d, 0x85, 0xf8, 0x8a, 0x0a, 0x31, 0xe0, 0x69, 0xe0, 0xb9, 0xf8,
	0xcb, 0x1e, 0x0a, 0x49, 0x9a, 0x50, 0x4b, 0x34, 0xcd, 0x34, 0x2c, 0x63, 0xaf, 0xee, 0x16, 0xff,
	0xc4, 0x81, 0xeb, 0xa2, 0x4b, 0xbd, 0x80, 0x75, 0x50, 0x48, 0xaf, 0x10, 0xbb, 0x64, 0x19, 0x7b,
	0xeb, 0xee, 0xa6, 0xe8, 0xd2, 0x63, 0xc5, 0x19, 0xdb, 0x24, 0x77, 0x61, 0x9d, 0xfa, 0x3e, 0xef,
	0xc5, 0xd2, 0x8b, 0x69, 0x84, 0xe6, 0x8a, 0xb2, 0xd7, 0xd0, 0xb4, 0x97, 0x34, 0x42, 0xfb, 0x47,
	0xb0, 0x7f, 0x21, 0xe7, 0x44, 0xc2, 0x63, 0x81, 0xe4, 0x16, 0xd4, 0x98, 0xf0, 0xfa, 0x34, 0x64,
	0x81, 0xb2, 0x56, 0x73, 0xaf, 0x30, 0xf1, 0x65, 0xf6, 0x6b, 0xff, 0x73, 0x05, 0xee, 0x4f, 0x99,
	0x7a, 0x8e, 0xf2, 0x34, 0xcb, 0xc6, 0xf3, 0x1e, 0x4d, 0x83, 0x63, 0x94, 0x94, 0x85, 0xa2, 0x08,
	0xf3, 0x0f, 0x06, 0xdc, 0x66, 0xb1, 0x1f, 0xf6, 0x02, 0xf4, 0x62, 0x1c, 0x78, 0xb4, 0x27, 0xbb,
	0x99, 0xa2, 0x4f, 0x25, 0xe3, 0xb1, 0x50, 0xa1, 0xd7, 0xbe, 0xbf, 0x2a, 0xd3, 0x1e, 0x3e, 0xfd,
	0xf1, 0x70, 0x64, 0x7e, 0xfe, 0xa6, 0x8b, 0xb2, 0x8b, 0xa9, 0xc5, 0x53, 0x2b, 0xe6, 0xd2, 0x92,
	0xdc, 0x4a, 0x78, 0xd2, 0x0b, 0xa9, 0x44, 0x4b, 0x76, 0xd1, 0x8a, 0x71, 0x30, 0x6d, 0xc2, 0x6a,
	0x33, 0x0c, 0x03, 0x8b, 0xc5, 0x8a, 0x9d, 0xea, 0x00, 0xdc, 0x5b, 0xfa, 0xd0, 0x97, 0x38, 0x38,
	0x9c, 0x3e, 0x92, 0xfc, 0xd5, 0x80, 0xfa, 0x00, 0x5b, 0x3e, 0xe7, 0x6f, 0x19, 0xaa, 0xa4, 0xd6,
	0x9f, 0xfe, 0xc6, 0x18, 0x8e, 0xcc, 0xaf, 0x5f, 0x77, 0xd1, 0xea, 0x09, 0x4c, 0x77, 0x85, 0xa5,
	0x22, 0xb2, 0x54, 0x48, 0x56, 0x44, 0xfd, 0x2e, 0x8b, 0xd1, 0xca, 0x0e, 0xb6, 0x72, 0x35, 0xc7,
	0x3a, 0x69, 0x5b, 0x49, 0x8a, 0x02, 0x63, 0xf9, 0xd0, 0x62, 0x72, 0x37, 0x0c, 0xad, 0x96, 0x52,
	0x0e, 0x32, 0x97, 0x3b, 0x28, 0x95, 0x3b, 0xda, 0xd8, 0xd8, 0xc0, 0xc9, 0xb1, 0xc5, 0xe2, 0xac,
	0x73, 0x02, 0x8b, 0xb7, 0x95, 0xc0, 0xe1, 0x0b, 0x4b, 0xa0, 0x10, 0x8c, 0xc7, 0x8e, 0x5b, 0x3a,
	0x45, 0xbe, 0x0b, 0xa6, 0x64, 0x11, 0x0a, 0x49, 0xa3, 0xc4, 0x8b, 0x58, 0xcc, 0xa2, 0x5e, 0xe4,
	0x0d, 0x68, 0x2c, 0x31, 0x2f, 0xc7, 0x15, 0x77, 0xbb, 0xe0, 0xbf, 0xc8, 0xd9, 0x6f, 0x14, 0x97,
	0xdc, 0x81, 0x3a, 0x4b, 0x68, 0x10, 0xa4, 0x28, 0x84, 0xb9, 0x6a, 0x19, 0x7b, 0x6b, 0x6e, 0x49,
	0xb0, 0xff, 0xb5, 0x31, 0xd3, 0xa3, 0x0b, 0x6a, 0xa7, 0xbb, 0xe0, 0x00, 0xb6, 0x98, 0xf0, 0x54,
	0xab, 0x77, 0x32, 0x01, 0x0f, 0xe3, 0xac, 0x5d, 0xf2, 0x86, 0xad, 0xb9, 0xd7, 0x99, 0x38, 0x2d,
	0x78, 0xcf, 0x72, 0x16, 0xf9, 0x21, 0xdc, 0x29, 0x5d, 0xaf, 0x50, 0xbd, 0xa4, 0xdc, 0x6f, 0x16,
	0x32, 0xf3, 0x16, 0xde, 0x19, 0x70, 0x27, 0xc0, 0x24, 0x45, 0x9f, 0x4a, 0x0c, 0xbc, 0xb9, 0x8a,
	0x9b, 0x2b, 0xd6, 0xca, 0x5e, 0xe3, 0xe0, 0x33, 0xe7, 0xe2, 0x91, 0x38, 0x73, 0x6d, 0xe0, 0xde,
	0x2e, 0x8f, 0x78, 0x39, 0x7b, 0x02, 0xf9, 0x09, 0xd8, 0x13, 0x1e, 0xe8, 0xf2, 0xa9, 0xd9, 0xf2,
	0xb2, 0x92, 0xfa, 0x5d, 0x2e, 0x30, 0x56, 0xe9, 0xad, 0xbb, 0x3b, 0xa5, 0xe4, 0x8b, 0x5c, 0x30,
	0x1b, 0xb8, 0x9f, 0x17, 0x62, 0x24, 0x80, 0x47, 0x13, 0xc6, 0x26, 0xea, 0xaa, 0xcd, 0x56, 0x24,
	0x69, 0x4d, 0x25, 0x69, 0xbf, 0x54, 0x7b, 0x5d, 0x54, 0x3b, 0x57, 0x9a, 0xcf, 0xda, 0x57, 0xf0,
	0xe9, 0xc4, 0x29, 0xd3, 0xf1, 0x78, 0xf8, 0x2b, 0x26, 0xa4, 0xf0, 0xda, 0x29, 0x8f, 0xbc, 0x0e,
	0xf2, 0x90, 0xfb, 0x5e, 0x0b, 0xdb, 0x3c, 0xc5, 0xac, 0xb9, 0x32, 0x8f, 0xcc, 0xcb, 0xaa, 0xa2,
	0x4f, 0x4a, 0x13, 0xd3, 0xe9, 0x7a, 0xa6, 0x0c, 0x7c, 0x9e, 0xf2, 0xe8, 0xb9, 0x52, 0x7f, 0xaa,
	0xb4, 0x5f, 0xe4, 0xca, 0x59, 0x9f, 0x54, 0xa4, 0x8b, 0x05, 0xe6, 0x15, 0xcb, 0xd8, 0x5b, 0x75,
	0xaf, 0xcf, 0x65, 0xe8, 0x24, 0x20, 0xbf, 0x80, 0x75, 0xdd, 0xf9, 0x5e, 0x40, 0x25, 0x35, 0x6b,
	0xaa, 0xa8, 0xdf, 0x59, 0xa6, 0xa8, 0xa7, 0xb9, 0xfe, 0x31, 0x95, 0xd4, 0x6d, 0x88, 0xf2, 0x87,
	0x7c, 0x04, 0x37, 0x98, 0xf0, 0xe4, 0x80, 0xb7, 0xa9, 0x2f, 0x79, 0x5a, 0xa4, 0xb5, 0xae, 0x82,
	0x24, 0x4c, 0xbc, 0x1e, 0xb3, 0xc6, 0xd9, 0xfb, 0x01, 0xdc, 0x2e, 0x0b, 0x33, 0xaf, 0x08, 0xaa,
	0x1e, 0xb7, 0x0a, 0x91, 0x39, 0xfd, 0x07, 0xb0, 0xc9, 0x84, 0x97, 0x74, 0x79, 0x8c, 0x5e, 0x1f,
	0x53, 0xb5, 0x28, 0xcc, 0x86, 0x3a, 0xee, 0x2a, 0x13, 0xaf, 0x32, 0xfa, 0x97, 0x9a, 0xdc, 0xfc,
	0xfb, 0x25, 0xd8, 0x9c, 0xeb, 0xc7, 0x73, 0xe7, 0xc6, 0x38, 0x77, 0x6e, 0x6c, 0xd8, 0x60, 0xc2,
	0x1b, 0x60, 0xcb, 0x9b, 0x80, 0xb6, 0x9a, 0xdb, 0x60, 0xe2, 0x0d, 0xb6, 0x8e, 0x72, 0x60, 0x99,
	0x82, 0x87, 0x95, 0x19, 0x78, 0x20, 0x3b, 0xd0, 0xd0, 0xdd, 0xc1, 0xe2, 0x36, 0xd7, 0xfd, 0x0d,
	0x39, 0xe9, 0x24, 0x6e, 0x73, 0x72, 0x4f, 0x1d, 0x91, 0x62, 0x84, 0x51, 0x0b, 0x53, 0xdd, 0xa8,
	0x35, 0x77, 0x9d, 0x09, 0xb7, 0xa0, 0x91, 0x4f, 0xa1, 0x39, 0x37, 0x31, 0x9e, 0xe8, 0x25, 0x49,
	0x98, 0x25, 0xe5, 0xb2, 0x32, 0x7a, 0x33, 0x9a, 0x1e, 0x95, 0x53, 0xcd, 0x26, 0xdb, 0x70, 0x59,
	0x48, 0x2a, 0x7b, 0x42, 0xf5, 0xce, 0x9a, 0xab, 0xff, 0x9a, 0x7f, 0x5c, 0x85, 0xc6, 0x44, 0xbd,
	0xc9, 0xfb, 0x00, 0x13, 0x7d, 0x66, 0xa8, 0x3e, 0xab, 0x47, 0x45, 0x77, 0x7d, 0x1b, 0x6e, 0x2e,
	0x9a, 0x5a, 0x05, 0xf8, 0xee, 0x56, 0x54, 0x39, 0xab, 0x3f, 0x85, 0x6f, 0x5d, 0x68, 0x40, 0x73,
	0x10, 0xbe, 0x2b, 0xcf, 0x1d, 0x4b, 0x84, 0x8f, 0x96, 0x9e, 0xc5, 0x55, 0x95, 0xd4, 0x7d, 0xba,
	0xc4, 0x04, 0xbe, 0x85, 0xcd, 0x79, 0x9c, 0x5c, 0xfb, 0x26, 0x70, 0x72, 0xde, 0x2e, 0x69, 0xc3,
	0xc7, 0x67, 0xc4, 0x24, 0xb2, 0x7c, 0xb3, 0xa4, 0x1a, 0x60, 0x16, 0x06, 0x75, 0x4a, 0x23, 0x3c,
	0x49, 0xa6, 0x83, 0xda, 0x81, 0x46, 0xd2, 0x6b, 0x85, 0xcc, 0xf7, 0x58, 0xd2, 0x7f, 0xac, 0x1a,
	0x62, 0xc3, 0x85, 0x9c, 0x74, 0x92, 0xf4, 0x1f, 0xdb, 0x43, 0x03, 0x3e, 0x9e, 0x0a, 0xee, 0x25,
	0x0e, 0xc6, 0x18, 0xcc, 0x25, 0x6b, 0xeb, 0x53, 0x8e, 0x19, 0x0d, 0x79, 0xa7, 0xb8, 0x92, 0xec,
	0x40, 0x83, 0x09, 0x8f, 0x26, 0x49, 0xca, 0xfb, 0xc5, 0x2e, 0x03, 0x26, 0x0e, 0x35, 0x85, 0x3c,
	0x04, 0x92, 0x0d, 0x12, 0xfb, 0x2a, 0xab, 0xb8, 0xcf, 0xa3, 0x24, 0x44, 0x39, 0x9e, 0xa6, 0x6b,
	0x4c, 0xbc, 0x51, 0x8c, 0x23, 0x4d, 0xb7, 0x1f, 0xc3, 0xc1, 0x32, 0x3e, 0xe4, 0x89, 0xb6, 0x8f,
	0x66, 0x2e, 0x51, 0xea, 0x6e, 0x45, 0x25, 0x3e, 0x8b, 0x28, 0x0b, 0x0f, 0xf3, 0x79, 0x2c, 0x3c,
	0x56, 0x43, 0xc1, 0xdf, 0x62, 0xac, 0x6f, 0x8a, 0xfa, 0xcf, 0xfe, 0xd9, 0xcc, 0x36, 0x5f, 0x60,
	0x44, 0x6f, 0xf3, 0x7b, 0xb0, 0x31, 0xa0, 0xfa, 0x52, 0x97, 0x61, 0xb1, 0x8e, 0x7c, 0x7d, 0x40,
	0xc5, 0x58, 0x31, 0xb0, 0xbf, 0x86, 0x0f, 0xa7, 0x4c, 0x96, 0xbd, 0xf2, 0xaa, 0xcb, 0x44, 0x97,
	0xc5, 0x1d, 0x17, 0x13, 0x9e, 0xca, 0xc2, 0xb7, 0xbb, 0xb0, 0x9e, 0xd0, 0x94, 0x46, 0x9e, 0x90,
	0x29, 0x8b, 0x3b, 0xda, 0xc3, 0x86, 0xa2, 0x9d, 0x2a, 0x12, 0xb9, 0x0f, 0xd7, 0x0a, 0x8c, 0xf1,
	0xa8, 0x2f, 0x7b, 0x34, 0x54, 0xd9, 0xdc, 0x70, 0xaf, 0x16, 0xf4, 0x43, 0x45, 0xb6, 0xff, 0xbd,
	0x02, 0xce, 0x45, 0xcf, 0xd7, 0x61, 0x3d, 0x81, 0xed, 0xd2, 0x7a, 0xc8, 0x3b, 0x2c, 0xa6, 0x52,
	0x62, 0x94, 0x48, 0xe5, 0xca, 0x86, 0xbb, 0x55, 0x70, 0xbf, 0x98, 0x60, 0x92, 0xef, 0x81, 0xa9,
	0x6e, 0xc7, 0xe9, 0xaf, 0x15, 0x40, 0x4c, 0x29, 0xe6, 0x10, 0x71, 0x73, 0x82, 0x3f, 0xa5, 0xfa,
	0x04, 0xb6, 0x33, 0x54, 0xc2, 0x79, 0xc5, 0xfc, 0xe2, 0xbd, 0x55, 0x70, 0xa7, 0xd4, 0x3e, 0x81,
	0x2d, 0x9f, 0xc9, 0x8a, 0xe3, 0x72, 0x9c, 0xbd, 0x31, 0x66, 0x4e, 0x29, 0x55, 0xe5, 0x6e, 0xad,
	0x32, 0x77, 0xe4, 0x43, 0x20, 0x93, 0x11, 0x69, 0xe1, 0x1c, 0x6f, 0x37, 0x27, 0x38, 0x5a, 0xfc,
	0x3e, 0x5c, 0x2b, 0xa3, 0xd0, 0xc2, 0x57, 0x94, 0xf0, 0xd5, 0x82, 0xae, 0x45, 0x77, 0xe1, 0x6a,
	0xe1, 0xb9, 0x96, 0xac, 0x29, 0xc9, 0xf7, 0xc6, 0xe4, 0x52, 0x70, 0x02, 0x2c, 0x7d, 0x1e, 0xa0,
	0xda, 0xb9, 0x75, 0xf7, 0xbd, 0x92, 0x7c, 0xc4, 0x03, 0xb4, 0x1f, 0xcd, 0xb4, 0xd9, 0x17, 0x54,
	0xc8, 0xf2, 0xff, 0xa8, 0x4b, 0xe3, 0x0e, 0x66, 0x77, 0x9e, 0x71, 0x9b, 0xd9, 0xff, 0x35, 0x66,
	0x1a, 0xe3, 0x0c, 0x0d, 0xdd, 0x18, 0x47, 0xf0, 0x41, 0x89, 0xe5, 0x21, 0x9d, 0x78, 0x49, 0x79,
	0xbe, 0x12, 0xd7, 0x3b, 0xb5, 0xdc, 0xfc, 0x99, 0xcd, 0xf1, 0x5b, 0x28, 0xb7, 0x48, 0x3e, 0x9b,
	0xbc, 0x18, 0x28, 0x23, 0x98, 0x0d, 0xd7, 0xd8, 0x42, 0x7e, 0x9b, 0x35, 0xa7, 0x2c, 0xa8, 0xe9,
	0xd3, 0xea, 0x87, 0xf0, 0xfe, 0x22, 0x1f, 0xb2, 0xc7, 0x83, 0xd4, 0x8b, 0xa4, 0x59, 0xe9, 0x82,
	0x9b, 0x49, 0xd8, 0xfb, 0xf3, 0xcf, 0xad, 0xc3, 0xfc, 0x61, 0x97, 0x21, 0xf5, 0x29, 0xfa, 0x29,
	0x16, 0xd3, 0x68, 0xd3, 0xf9, 0xfb, 0x7d, 0x95, 0xb0, 0xce, 0xd0, 0x6d, 0xa8, 0x8b, 0x9c, 0xa4,
	0x77, 0xe8, 0x9a, 0x5b, 0xcb, 0x09, 0x27, 0xf9, 0x26, 0x56, 0xdf, 0xfa, 0xdd, 0xa9, 0xff, 0x0e,
	0xfe, 0x53, 0x83, 0xc6, 0xc4, 0x11, 0xe4, 0xf7, 0x06, 0x6c, 0x55, 0xbe, 0x26, 0xc9, 0xbe, 0x73,
	0xf1, 0xf7, 0x70, 0xf3, 0xa1, 0xb3, 0xc4, 0xfb, 0xd4, 0x6e, 0x0e, 0x47, 0xe6, 0x76, 0xa5, 0x8c,
	0x43, 0x7e, 0x67, 0xc0, 0x8d, 0xaa, 0x2d, 0x47, 0x1e, 0x38, 0x17, 0x7e, 0xb7, 0x36, 0xf7, 0x97,
	0xd8, 0x9a, 0xf6, 0xad, 0xe1, 0xc8, 0xdc, 0xaa, 0x12, 0x71, 0xc8, 0x3f, 0x0c, 0xb0, 0xcf, 0xda,
	0x08, 0x2e, 0x8a, 0x5e, 0x28, 0xc9, 0x81, 0xb3, 0xf4, 0x1e, 0x6b, 0x7e, 0xe2, 0xfc, 0x1f, 0x7b,
	0x67, 0x77, 0x38, 0x32, 0xef, 0x9d, 0xef, 0x90, 0x43, 0xfe, 0x62, 0xc0, 0x8d, 0xaa, 0x7d, 0x32,
	0x9b, 0xc5, 0xb3, 0x16, 0xd7, 0x6c, 0x16, 0xcf, 0xdc, 0x4f, 0xf6, 0xfe, 0x70, 0x64, 0xee, 0x8e,
	0x45, 0x2c, 0x1a, 0x5b, 0x6a, 0xd2, 0x2c, 0x0d, 0x72, 0x56, 0x87, 0xf5, 0x31, 0xb6, 0xa8, 0xa5,
	0x56, 0x1f, 0xf9, 0x93, 0x01, 0xe6, 0xa2, 0xdd, 0x40, 0x1c, 0x67, 0xa9, 0x1d, 0xd6, 0x7c, 0xb4,
	0xe4, 0xce, 0xb1, 0xef, 0x0c, 0x47, 0xe6, 0xe2, 0xe3, 0xff, 0x66, 0xc0, 0x07, 0xcf, 0xb1, 0x12,
	0x9d, 0xc6, 0xad, 0xe8, 0x38, 0x4b, 0xc1, 0xdf, 0xac, 0x87, 0xe7, 0x82, 0x9f, 0x7d, 0x6f, 0x38,
	0x32, 0x77, 0xce, 0x76, 0xc2, 0x21, 0xbf, 0xcd, 0x27, 0x65, 0x0e, 0x21, 0x2a, 0x26, 0x65, 0x21,
	0xe4, 0x54, 0x4c, 0xca, 0x62, 0xc4, 0xb1, 0xcd, 0xe1, 0xc8, 0xac, 0x3c, 0xb2, 0x79, 0x73, 0x38,
	0x32, 0xaf, 0x4f, 0x18, 0xb2, 0x04, 0xa6, 0x7d, 0xe6, 0xe3, 0xd3, 0x95, 0x77, 0x86, 0xf1, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xcb, 0x4b, 0x2f, 0xb8, 0x13, 0x00, 0x00,
}
