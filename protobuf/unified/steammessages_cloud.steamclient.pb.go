// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_cloud.steamclient.proto

package unified

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CCloud_GetUploadServerInfo_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_GetUploadServerInfo_Request) Reset()         { *m = CCloud_GetUploadServerInfo_Request{} }
func (m *CCloud_GetUploadServerInfo_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetUploadServerInfo_Request) ProtoMessage()    {}
func (*CCloud_GetUploadServerInfo_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0}
}

func (m *CCloud_GetUploadServerInfo_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_GetUploadServerInfo_Response struct {
	ServerUrl        *string `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_GetUploadServerInfo_Response) Reset()         { *m = CCloud_GetUploadServerInfo_Response{} }
func (m *CCloud_GetUploadServerInfo_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetUploadServerInfo_Response) ProtoMessage()    {}
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1}
}

func (m *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if m != nil && m.ServerUrl != nil {
		return *m.ServerUrl
	}
	return ""
}

type CCloud_BeginHTTPUpload_Request struct {
	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize             *uint32  `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Filename             *string  `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	FileSha              *string  `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	IsPublic             *bool    `protobuf:"varint,5,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	PlatformsToSync      []string `protobuf:"bytes,6,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	RequestHeadersNames  []string `protobuf:"bytes,7,rep,name=request_headers_names,json=requestHeadersNames" json:"request_headers_names,omitempty"`
	RequestHeadersValues []string `protobuf:"bytes,8,rep,name=request_headers_values,json=requestHeadersValues" json:"request_headers_values,omitempty"`
	XXX_unrecognized     []byte   `json:"-"`
}

func (m *CCloud_BeginHTTPUpload_Request) Reset()                    { *m = CCloud_BeginHTTPUpload_Request{} }
func (m *CCloud_BeginHTTPUpload_Request) String() string            { return proto.CompactTextString(m) }
func (*CCloud_BeginHTTPUpload_Request) ProtoMessage()               {}
func (*CCloud_BeginHTTPUpload_Request) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CCloud_BeginHTTPUpload_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_BeginHTTPUpload_Request) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *CCloud_BeginHTTPUpload_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_BeginHTTPUpload_Request) GetFileSha() string {
	if m != nil && m.FileSha != nil {
		return *m.FileSha
	}
	return ""
}

func (m *CCloud_BeginHTTPUpload_Request) GetIsPublic() bool {
	if m != nil && m.IsPublic != nil {
		return *m.IsPublic
	}
	return false
}

func (m *CCloud_BeginHTTPUpload_Request) GetPlatformsToSync() []string {
	if m != nil {
		return m.PlatformsToSync
	}
	return nil
}

func (m *CCloud_BeginHTTPUpload_Request) GetRequestHeadersNames() []string {
	if m != nil {
		return m.RequestHeadersNames
	}
	return nil
}

func (m *CCloud_BeginHTTPUpload_Request) GetRequestHeadersValues() []string {
	if m != nil {
		return m.RequestHeadersValues
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response struct {
	Ugcid            *uint64                                        `protobuf:"fixed64,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Timestamp        *uint32                                        `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	UrlHost          *string                                        `protobuf:"bytes,3,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                        `protobuf:"bytes,4,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                          `protobuf:"varint,5,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders   []*CCloud_BeginHTTPUpload_Response_HTTPHeaders `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CCloud_BeginHTTPUpload_Response) Reset()                    { *m = CCloud_BeginHTTPUpload_Response{} }
func (m *CCloud_BeginHTTPUpload_Response) String() string            { return proto.CompactTextString(m) }
func (*CCloud_BeginHTTPUpload_Response) ProtoMessage()               {}
func (*CCloud_BeginHTTPUpload_Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CCloud_BeginHTTPUpload_Response) GetUgcid() uint64 {
	if m != nil && m.Ugcid != nil {
		return *m.Ugcid
	}
	return 0
}

func (m *CCloud_BeginHTTPUpload_Response) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CCloud_BeginHTTPUpload_Response) GetUrlHost() string {
	if m != nil && m.UrlHost != nil {
		return *m.UrlHost
	}
	return ""
}

func (m *CCloud_BeginHTTPUpload_Response) GetUrlPath() string {
	if m != nil && m.UrlPath != nil {
		return *m.UrlPath
	}
	return ""
}

func (m *CCloud_BeginHTTPUpload_Response) GetUseHttps() bool {
	if m != nil && m.UseHttps != nil {
		return *m.UseHttps
	}
	return false
}

func (m *CCloud_BeginHTTPUpload_Response) GetRequestHeaders() []*CCloud_BeginHTTPUpload_Response_HTTPHeaders {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response_HTTPHeaders struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_BeginHTTPUpload_Response_HTTPHeaders) Reset() {
	*m = CCloud_BeginHTTPUpload_Response_HTTPHeaders{}
}
func (m *CCloud_BeginHTTPUpload_Response_HTTPHeaders) String() string {
	return proto.CompactTextString(m)
}
func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoMessage() {}
func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{3, 0}
}

func (m *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CCloud_CommitHTTPUpload_Request struct {
	TransferSucceeded *bool   `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           *string `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CCloud_CommitHTTPUpload_Request) Reset()                    { *m = CCloud_CommitHTTPUpload_Request{} }
func (m *CCloud_CommitHTTPUpload_Request) String() string            { return proto.CompactTextString(m) }
func (*CCloud_CommitHTTPUpload_Request) ProtoMessage()               {}
func (*CCloud_CommitHTTPUpload_Request) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CCloud_CommitHTTPUpload_Request) GetTransferSucceeded() bool {
	if m != nil && m.TransferSucceeded != nil {
		return *m.TransferSucceeded
	}
	return false
}

func (m *CCloud_CommitHTTPUpload_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_CommitHTTPUpload_Request) GetFileSha() string {
	if m != nil && m.FileSha != nil {
		return *m.FileSha
	}
	return ""
}

func (m *CCloud_CommitHTTPUpload_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

type CCloud_CommitHTTPUpload_Response struct {
	FileCommitted    *bool  `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_CommitHTTPUpload_Response) Reset()         { *m = CCloud_CommitHTTPUpload_Response{} }
func (m *CCloud_CommitHTTPUpload_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_CommitHTTPUpload_Response) ProtoMessage()    {}
func (*CCloud_CommitHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5}
}

func (m *CCloud_CommitHTTPUpload_Response) GetFileCommitted() bool {
	if m != nil && m.FileCommitted != nil {
		return *m.FileCommitted
	}
	return false
}

type CCloud_GetFileDetails_Request struct {
	Ugcid            *uint64 `protobuf:"varint,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Appid            *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_GetFileDetails_Request) Reset()                    { *m = CCloud_GetFileDetails_Request{} }
func (m *CCloud_GetFileDetails_Request) String() string            { return proto.CompactTextString(m) }
func (*CCloud_GetFileDetails_Request) ProtoMessage()               {}
func (*CCloud_GetFileDetails_Request) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CCloud_GetFileDetails_Request) GetUgcid() uint64 {
	if m != nil && m.Ugcid != nil {
		return *m.Ugcid
	}
	return 0
}

func (m *CCloud_GetFileDetails_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_UserFile struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid            *uint64 `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename         *string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize         *uint32 `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url              *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator   *uint64 `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_UserFile) Reset()                    { *m = CCloud_UserFile{} }
func (m *CCloud_UserFile) String() string            { return proto.CompactTextString(m) }
func (*CCloud_UserFile) ProtoMessage()               {}
func (*CCloud_UserFile) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CCloud_UserFile) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_UserFile) GetUgcid() uint64 {
	if m != nil && m.Ugcid != nil {
		return *m.Ugcid
	}
	return 0
}

func (m *CCloud_UserFile) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_UserFile) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CCloud_UserFile) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *CCloud_UserFile) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *CCloud_UserFile) GetSteamidCreator() uint64 {
	if m != nil && m.SteamidCreator != nil {
		return *m.SteamidCreator
	}
	return 0
}

type CCloud_GetFileDetails_Response struct {
	Details          *CCloud_UserFile `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CCloud_GetFileDetails_Response) Reset()                    { *m = CCloud_GetFileDetails_Response{} }
func (m *CCloud_GetFileDetails_Response) String() string            { return proto.CompactTextString(m) }
func (*CCloud_GetFileDetails_Response) ProtoMessage()               {}
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if m != nil {
		return m.Details
	}
	return nil
}

type CCloud_EnumerateUserFiles_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtendedDetails  *bool   `protobuf:"varint,2,opt,name=extended_details,json=extendedDetails" json:"extended_details,omitempty"`
	Count            *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	StartIndex       *uint32 `protobuf:"varint,4,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_EnumerateUserFiles_Request) Reset()         { *m = CCloud_EnumerateUserFiles_Request{} }
func (m *CCloud_EnumerateUserFiles_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_EnumerateUserFiles_Request) ProtoMessage()    {}
func (*CCloud_EnumerateUserFiles_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{9}
}

func (m *CCloud_EnumerateUserFiles_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_EnumerateUserFiles_Request) GetExtendedDetails() bool {
	if m != nil && m.ExtendedDetails != nil {
		return *m.ExtendedDetails
	}
	return false
}

func (m *CCloud_EnumerateUserFiles_Request) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CCloud_EnumerateUserFiles_Request) GetStartIndex() uint32 {
	if m != nil && m.StartIndex != nil {
		return *m.StartIndex
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	Files            []*CCloud_UserFile `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles       *uint32            `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CCloud_EnumerateUserFiles_Response) Reset()         { *m = CCloud_EnumerateUserFiles_Response{} }
func (m *CCloud_EnumerateUserFiles_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_EnumerateUserFiles_Response) ProtoMessage()    {}
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10}
}

func (m *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if m != nil && m.TotalFiles != nil {
		return *m.TotalFiles
	}
	return 0
}

type CCloud_Delete_Request struct {
	Filename         *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid            *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_Delete_Request) Reset()                    { *m = CCloud_Delete_Request{} }
func (m *CCloud_Delete_Request) String() string            { return proto.CompactTextString(m) }
func (*CCloud_Delete_Request) ProtoMessage()               {}
func (*CCloud_Delete_Request) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CCloud_Delete_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_Delete_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_Delete_Response struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_Delete_Response) Reset()                    { *m = CCloud_Delete_Response{} }
func (m *CCloud_Delete_Response) String() string            { return proto.CompactTextString(m) }
func (*CCloud_Delete_Response) ProtoMessage()               {}
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

type CCloud_GetClientEncryptionKey_Request struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_GetClientEncryptionKey_Request) Reset()         { *m = CCloud_GetClientEncryptionKey_Request{} }
func (m *CCloud_GetClientEncryptionKey_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetClientEncryptionKey_Request) ProtoMessage()    {}
func (*CCloud_GetClientEncryptionKey_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{13}
}

type CCloud_GetClientEncryptionKey_Response struct {
	Key              []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Crc              *int32 `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_GetClientEncryptionKey_Response) Reset() {
	*m = CCloud_GetClientEncryptionKey_Response{}
}
func (m *CCloud_GetClientEncryptionKey_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetClientEncryptionKey_Response) ProtoMessage()    {}
func (*CCloud_GetClientEncryptionKey_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{14}
}

func (m *CCloud_GetClientEncryptionKey_Response) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CCloud_GetClientEncryptionKey_Response) GetCrc() int32 {
	if m != nil && m.Crc != nil {
		return *m.Crc
	}
	return 0
}

type CCloud_CDNReport_Notification struct {
	Steamid          *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Url              *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Success          *bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	HttpStatusCode   *uint32 `protobuf:"varint,4,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	ExpectedBytes    *uint64 `protobuf:"varint,5,opt,name=expected_bytes,json=expectedBytes" json:"expected_bytes,omitempty"`
	ReceivedBytes    *uint64 `protobuf:"varint,6,opt,name=received_bytes,json=receivedBytes" json:"received_bytes,omitempty"`
	Duration         *uint32 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_CDNReport_Notification) Reset()                    { *m = CCloud_CDNReport_Notification{} }
func (m *CCloud_CDNReport_Notification) String() string            { return proto.CompactTextString(m) }
func (*CCloud_CDNReport_Notification) ProtoMessage()               {}
func (*CCloud_CDNReport_Notification) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *CCloud_CDNReport_Notification) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CCloud_CDNReport_Notification) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *CCloud_CDNReport_Notification) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *CCloud_CDNReport_Notification) GetHttpStatusCode() uint32 {
	if m != nil && m.HttpStatusCode != nil {
		return *m.HttpStatusCode
	}
	return 0
}

func (m *CCloud_CDNReport_Notification) GetExpectedBytes() uint64 {
	if m != nil && m.ExpectedBytes != nil {
		return *m.ExpectedBytes
	}
	return 0
}

func (m *CCloud_CDNReport_Notification) GetReceivedBytes() uint64 {
	if m != nil && m.ReceivedBytes != nil {
		return *m.ReceivedBytes
	}
	return 0
}

func (m *CCloud_CDNReport_Notification) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

type CCloud_ExternalStorageTransferReport_Notification struct {
	Host             *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path             *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	IsUpload         *bool   `protobuf:"varint,3,opt,name=is_upload,json=isUpload" json:"is_upload,omitempty"`
	Success          *bool   `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	HttpStatusCode   *uint32 `protobuf:"varint,5,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	BytesExpected    *uint64 `protobuf:"varint,6,opt,name=bytes_expected,json=bytesExpected" json:"bytes_expected,omitempty"`
	BytesActual      *uint64 `protobuf:"varint,7,opt,name=bytes_actual,json=bytesActual" json:"bytes_actual,omitempty"`
	DurationMs       *uint32 `protobuf:"varint,8,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Cellid           *uint32 `protobuf:"varint,9,opt,name=cellid" json:"cellid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_ExternalStorageTransferReport_Notification) Reset() {
	*m = CCloud_ExternalStorageTransferReport_Notification{}
}
func (m *CCloud_ExternalStorageTransferReport_Notification) String() string {
	return proto.CompactTextString(m)
}
func (*CCloud_ExternalStorageTransferReport_Notification) ProtoMessage() {}
func (*CCloud_ExternalStorageTransferReport_Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{16}
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetIsUpload() bool {
	if m != nil && m.IsUpload != nil {
		return *m.IsUpload
	}
	return false
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetHttpStatusCode() uint32 {
	if m != nil && m.HttpStatusCode != nil {
		return *m.HttpStatusCode
	}
	return 0
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetBytesExpected() uint64 {
	if m != nil && m.BytesExpected != nil {
		return *m.BytesExpected
	}
	return 0
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetBytesActual() uint64 {
	if m != nil && m.BytesActual != nil {
		return *m.BytesActual
	}
	return 0
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetDurationMs() uint32 {
	if m != nil && m.DurationMs != nil {
		return *m.DurationMs
	}
	return 0
}

func (m *CCloud_ExternalStorageTransferReport_Notification) GetCellid() uint32 {
	if m != nil && m.Cellid != nil {
		return *m.Cellid
	}
	return 0
}

type CCloud_ClientBeginFileUpload_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize         *uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32 `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	FileSha          []byte  `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	TimeStamp        *uint64 `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Filename         *string `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	PlatformsToSync  *uint32 `protobuf:"varint,7,opt,name=platforms_to_sync,json=platformsToSync,def=4294967295" json:"platforms_to_sync,omitempty"`
	CellId           *uint32 `protobuf:"varint,9,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	CanEncrypt       *bool   `protobuf:"varint,10,opt,name=can_encrypt,json=canEncrypt" json:"can_encrypt,omitempty"`
	IsSharedFile     *bool   `protobuf:"varint,11,opt,name=is_shared_file,json=isSharedFile" json:"is_shared_file,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_ClientBeginFileUpload_Request) Reset()         { *m = CCloud_ClientBeginFileUpload_Request{} }
func (m *CCloud_ClientBeginFileUpload_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientBeginFileUpload_Request) ProtoMessage()    {}
func (*CCloud_ClientBeginFileUpload_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{17}
}

const Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync uint32 = 4294967295

func (m *CCloud_ClientBeginFileUpload_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_ClientBeginFileUpload_Request) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *CCloud_ClientBeginFileUpload_Request) GetRawFileSize() uint32 {
	if m != nil && m.RawFileSize != nil {
		return *m.RawFileSize
	}
	return 0
}

func (m *CCloud_ClientBeginFileUpload_Request) GetFileSha() []byte {
	if m != nil {
		return m.FileSha
	}
	return nil
}

func (m *CCloud_ClientBeginFileUpload_Request) GetTimeStamp() uint64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *CCloud_ClientBeginFileUpload_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_ClientBeginFileUpload_Request) GetPlatformsToSync() uint32 {
	if m != nil && m.PlatformsToSync != nil {
		return *m.PlatformsToSync
	}
	return Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync
}

func (m *CCloud_ClientBeginFileUpload_Request) GetCellId() uint32 {
	if m != nil && m.CellId != nil {
		return *m.CellId
	}
	return 0
}

func (m *CCloud_ClientBeginFileUpload_Request) GetCanEncrypt() bool {
	if m != nil && m.CanEncrypt != nil {
		return *m.CanEncrypt
	}
	return false
}

func (m *CCloud_ClientBeginFileUpload_Request) GetIsSharedFile() bool {
	if m != nil && m.IsSharedFile != nil {
		return *m.IsSharedFile
	}
	return false
}

type ClientCloudFileUploadBlockDetails struct {
	UrlHost          *string                                          `protobuf:"bytes,1,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                          `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                            `protobuf:"varint,3,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	HttpMethod       *int32                                           `protobuf:"varint,4,opt,name=http_method,json=httpMethod" json:"http_method,omitempty"`
	RequestHeaders   []*ClientCloudFileUploadBlockDetails_HTTPHeaders `protobuf:"bytes,5,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	BlockOffset      *uint64                                          `protobuf:"varint,6,opt,name=block_offset,json=blockOffset" json:"block_offset,omitempty"`
	BlockLength      *uint32                                          `protobuf:"varint,7,opt,name=block_length,json=blockLength" json:"block_length,omitempty"`
	ExplicitBodyData []byte                                           `protobuf:"bytes,8,opt,name=explicit_body_data,json=explicitBodyData" json:"explicit_body_data,omitempty"`
	MayParallelize   *bool                                            `protobuf:"varint,9,opt,name=may_parallelize,json=mayParallelize" json:"may_parallelize,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *ClientCloudFileUploadBlockDetails) Reset()         { *m = ClientCloudFileUploadBlockDetails{} }
func (m *ClientCloudFileUploadBlockDetails) String() string { return proto.CompactTextString(m) }
func (*ClientCloudFileUploadBlockDetails) ProtoMessage()    {}
func (*ClientCloudFileUploadBlockDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{18}
}

func (m *ClientCloudFileUploadBlockDetails) GetUrlHost() string {
	if m != nil && m.UrlHost != nil {
		return *m.UrlHost
	}
	return ""
}

func (m *ClientCloudFileUploadBlockDetails) GetUrlPath() string {
	if m != nil && m.UrlPath != nil {
		return *m.UrlPath
	}
	return ""
}

func (m *ClientCloudFileUploadBlockDetails) GetUseHttps() bool {
	if m != nil && m.UseHttps != nil {
		return *m.UseHttps
	}
	return false
}

func (m *ClientCloudFileUploadBlockDetails) GetHttpMethod() int32 {
	if m != nil && m.HttpMethod != nil {
		return *m.HttpMethod
	}
	return 0
}

func (m *ClientCloudFileUploadBlockDetails) GetRequestHeaders() []*ClientCloudFileUploadBlockDetails_HTTPHeaders {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

func (m *ClientCloudFileUploadBlockDetails) GetBlockOffset() uint64 {
	if m != nil && m.BlockOffset != nil {
		return *m.BlockOffset
	}
	return 0
}

func (m *ClientCloudFileUploadBlockDetails) GetBlockLength() uint32 {
	if m != nil && m.BlockLength != nil {
		return *m.BlockLength
	}
	return 0
}

func (m *ClientCloudFileUploadBlockDetails) GetExplicitBodyData() []byte {
	if m != nil {
		return m.ExplicitBodyData
	}
	return nil
}

func (m *ClientCloudFileUploadBlockDetails) GetMayParallelize() bool {
	if m != nil && m.MayParallelize != nil {
		return *m.MayParallelize
	}
	return false
}

type ClientCloudFileUploadBlockDetails_HTTPHeaders struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClientCloudFileUploadBlockDetails_HTTPHeaders) Reset() {
	*m = ClientCloudFileUploadBlockDetails_HTTPHeaders{}
}
func (m *ClientCloudFileUploadBlockDetails_HTTPHeaders) String() string {
	return proto.CompactTextString(m)
}
func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoMessage() {}
func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{18, 0}
}

func (m *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CCloud_ClientBeginFileUpload_Response struct {
	EncryptFile      *bool                                `protobuf:"varint,1,opt,name=encrypt_file,json=encryptFile" json:"encrypt_file,omitempty"`
	BlockRequests    []*ClientCloudFileUploadBlockDetails `protobuf:"bytes,2,rep,name=block_requests,json=blockRequests" json:"block_requests,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CCloud_ClientBeginFileUpload_Response) Reset()         { *m = CCloud_ClientBeginFileUpload_Response{} }
func (m *CCloud_ClientBeginFileUpload_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientBeginFileUpload_Response) ProtoMessage()    {}
func (*CCloud_ClientBeginFileUpload_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{19}
}

func (m *CCloud_ClientBeginFileUpload_Response) GetEncryptFile() bool {
	if m != nil && m.EncryptFile != nil {
		return *m.EncryptFile
	}
	return false
}

func (m *CCloud_ClientBeginFileUpload_Response) GetBlockRequests() []*ClientCloudFileUploadBlockDetails {
	if m != nil {
		return m.BlockRequests
	}
	return nil
}

type CCloud_ClientCommitFileUpload_Request struct {
	TransferSucceeded *bool   `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           []byte  `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CCloud_ClientCommitFileUpload_Request) Reset()         { *m = CCloud_ClientCommitFileUpload_Request{} }
func (m *CCloud_ClientCommitFileUpload_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientCommitFileUpload_Request) ProtoMessage()    {}
func (*CCloud_ClientCommitFileUpload_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{20}
}

func (m *CCloud_ClientCommitFileUpload_Request) GetTransferSucceeded() bool {
	if m != nil && m.TransferSucceeded != nil {
		return *m.TransferSucceeded
	}
	return false
}

func (m *CCloud_ClientCommitFileUpload_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_ClientCommitFileUpload_Request) GetFileSha() []byte {
	if m != nil {
		return m.FileSha
	}
	return nil
}

func (m *CCloud_ClientCommitFileUpload_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

type CCloud_ClientCommitFileUpload_Response struct {
	FileCommitted    *bool  `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_ClientCommitFileUpload_Response) Reset() {
	*m = CCloud_ClientCommitFileUpload_Response{}
}
func (m *CCloud_ClientCommitFileUpload_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientCommitFileUpload_Response) ProtoMessage()    {}
func (*CCloud_ClientCommitFileUpload_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{21}
}

func (m *CCloud_ClientCommitFileUpload_Response) GetFileCommitted() bool {
	if m != nil && m.FileCommitted != nil {
		return *m.FileCommitted
	}
	return false
}

type CCloud_ClientFileDownload_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename         *string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_ClientFileDownload_Request) Reset()         { *m = CCloud_ClientFileDownload_Request{} }
func (m *CCloud_ClientFileDownload_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientFileDownload_Request) ProtoMessage()    {}
func (*CCloud_ClientFileDownload_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{22}
}

func (m *CCloud_ClientFileDownload_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_ClientFileDownload_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

type CCloud_ClientFileDownload_Response struct {
	Appid            *uint32                                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize         *uint32                                           `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32                                           `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile          []byte                                            `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64                                           `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	IsExplicitDelete *bool                                             `protobuf:"varint,6,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	UrlHost          *string                                           `protobuf:"bytes,7,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                           `protobuf:"bytes,8,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                             `protobuf:"varint,9,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders   []*CCloud_ClientFileDownload_Response_HTTPHeaders `protobuf:"bytes,10,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	Encrypted        *bool                                             `protobuf:"varint,11,opt,name=encrypted" json:"encrypted,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CCloud_ClientFileDownload_Response) Reset()         { *m = CCloud_ClientFileDownload_Response{} }
func (m *CCloud_ClientFileDownload_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientFileDownload_Response) ProtoMessage()    {}
func (*CCloud_ClientFileDownload_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{23}
}

func (m *CCloud_ClientFileDownload_Response) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_ClientFileDownload_Response) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *CCloud_ClientFileDownload_Response) GetRawFileSize() uint32 {
	if m != nil && m.RawFileSize != nil {
		return *m.RawFileSize
	}
	return 0
}

func (m *CCloud_ClientFileDownload_Response) GetShaFile() []byte {
	if m != nil {
		return m.ShaFile
	}
	return nil
}

func (m *CCloud_ClientFileDownload_Response) GetTimeStamp() uint64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *CCloud_ClientFileDownload_Response) GetIsExplicitDelete() bool {
	if m != nil && m.IsExplicitDelete != nil {
		return *m.IsExplicitDelete
	}
	return false
}

func (m *CCloud_ClientFileDownload_Response) GetUrlHost() string {
	if m != nil && m.UrlHost != nil {
		return *m.UrlHost
	}
	return ""
}

func (m *CCloud_ClientFileDownload_Response) GetUrlPath() string {
	if m != nil && m.UrlPath != nil {
		return *m.UrlPath
	}
	return ""
}

func (m *CCloud_ClientFileDownload_Response) GetUseHttps() bool {
	if m != nil && m.UseHttps != nil {
		return *m.UseHttps
	}
	return false
}

func (m *CCloud_ClientFileDownload_Response) GetRequestHeaders() []*CCloud_ClientFileDownload_Response_HTTPHeaders {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

func (m *CCloud_ClientFileDownload_Response) GetEncrypted() bool {
	if m != nil && m.Encrypted != nil {
		return *m.Encrypted
	}
	return false
}

type CCloud_ClientFileDownload_Response_HTTPHeaders struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_ClientFileDownload_Response_HTTPHeaders) Reset() {
	*m = CCloud_ClientFileDownload_Response_HTTPHeaders{}
}
func (m *CCloud_ClientFileDownload_Response_HTTPHeaders) String() string {
	return proto.CompactTextString(m)
}
func (*CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoMessage() {}
func (*CCloud_ClientFileDownload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{23, 0}
}

func (m *CCloud_ClientFileDownload_Response_HTTPHeaders) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CCloud_ClientFileDownload_Response_HTTPHeaders) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CCloud_ClientDeleteFile_Request struct {
	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename         *string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,3,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CCloud_ClientDeleteFile_Request) Reset()         { *m = CCloud_ClientDeleteFile_Request{} }
func (m *CCloud_ClientDeleteFile_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientDeleteFile_Request) ProtoMessage()    {}
func (*CCloud_ClientDeleteFile_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{24}
}

func (m *CCloud_ClientDeleteFile_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_ClientDeleteFile_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_ClientDeleteFile_Request) GetIsExplicitDelete() bool {
	if m != nil && m.IsExplicitDelete != nil {
		return *m.IsExplicitDelete
	}
	return false
}

type CCloud_ClientDeleteFile_Response struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CCloud_ClientDeleteFile_Response) Reset()         { *m = CCloud_ClientDeleteFile_Response{} }
func (m *CCloud_ClientDeleteFile_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_ClientDeleteFile_Response) ProtoMessage()    {}
func (*CCloud_ClientDeleteFile_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{25}
}

func init() {
	proto.RegisterType((*CCloud_GetUploadServerInfo_Request)(nil), "CCloud_GetUploadServerInfo_Request")
	proto.RegisterType((*CCloud_GetUploadServerInfo_Response)(nil), "CCloud_GetUploadServerInfo_Response")
	proto.RegisterType((*CCloud_BeginHTTPUpload_Request)(nil), "CCloud_BeginHTTPUpload_Request")
	proto.RegisterType((*CCloud_BeginHTTPUpload_Response)(nil), "CCloud_BeginHTTPUpload_Response")
	proto.RegisterType((*CCloud_BeginHTTPUpload_Response_HTTPHeaders)(nil), "CCloud_BeginHTTPUpload_Response.HTTPHeaders")
	proto.RegisterType((*CCloud_CommitHTTPUpload_Request)(nil), "CCloud_CommitHTTPUpload_Request")
	proto.RegisterType((*CCloud_CommitHTTPUpload_Response)(nil), "CCloud_CommitHTTPUpload_Response")
	proto.RegisterType((*CCloud_GetFileDetails_Request)(nil), "CCloud_GetFileDetails_Request")
	proto.RegisterType((*CCloud_UserFile)(nil), "CCloud_UserFile")
	proto.RegisterType((*CCloud_GetFileDetails_Response)(nil), "CCloud_GetFileDetails_Response")
	proto.RegisterType((*CCloud_EnumerateUserFiles_Request)(nil), "CCloud_EnumerateUserFiles_Request")
	proto.RegisterType((*CCloud_EnumerateUserFiles_Response)(nil), "CCloud_EnumerateUserFiles_Response")
	proto.RegisterType((*CCloud_Delete_Request)(nil), "CCloud_Delete_Request")
	proto.RegisterType((*CCloud_Delete_Response)(nil), "CCloud_Delete_Response")
	proto.RegisterType((*CCloud_GetClientEncryptionKey_Request)(nil), "CCloud_GetClientEncryptionKey_Request")
	proto.RegisterType((*CCloud_GetClientEncryptionKey_Response)(nil), "CCloud_GetClientEncryptionKey_Response")
	proto.RegisterType((*CCloud_CDNReport_Notification)(nil), "CCloud_CDNReport_Notification")
	proto.RegisterType((*CCloud_ExternalStorageTransferReport_Notification)(nil), "CCloud_ExternalStorageTransferReport_Notification")
	proto.RegisterType((*CCloud_ClientBeginFileUpload_Request)(nil), "CCloud_ClientBeginFileUpload_Request")
	proto.RegisterType((*ClientCloudFileUploadBlockDetails)(nil), "ClientCloudFileUploadBlockDetails")
	proto.RegisterType((*ClientCloudFileUploadBlockDetails_HTTPHeaders)(nil), "ClientCloudFileUploadBlockDetails.HTTPHeaders")
	proto.RegisterType((*CCloud_ClientBeginFileUpload_Response)(nil), "CCloud_ClientBeginFileUpload_Response")
	proto.RegisterType((*CCloud_ClientCommitFileUpload_Request)(nil), "CCloud_ClientCommitFileUpload_Request")
	proto.RegisterType((*CCloud_ClientCommitFileUpload_Response)(nil), "CCloud_ClientCommitFileUpload_Response")
	proto.RegisterType((*CCloud_ClientFileDownload_Request)(nil), "CCloud_ClientFileDownload_Request")
	proto.RegisterType((*CCloud_ClientFileDownload_Response)(nil), "CCloud_ClientFileDownload_Response")
	proto.RegisterType((*CCloud_ClientFileDownload_Response_HTTPHeaders)(nil), "CCloud_ClientFileDownload_Response.HTTPHeaders")
	proto.RegisterType((*CCloud_ClientDeleteFile_Request)(nil), "CCloud_ClientDeleteFile_Request")
	proto.RegisterType((*CCloud_ClientDeleteFile_Response)(nil), "CCloud_ClientDeleteFile_Response")
}

func init() { proto.RegisterFile("steammessages_cloud.steamclient.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 3773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdd, 0x6f, 0x1d, 0x49,
	0x56, 0xd7, 0x4d, 0xec, 0xd8, 0x2e, 0xc7, 0x8e, 0xa7, 0x77, 0x26, 0xf4, 0x7a, 0x67, 0x26, 0x95,
	0x9e, 0x49, 0x9c, 0x99, 0x75, 0x3a, 0x1f, 0x24, 0x99, 0xcd, 0x84, 0xd1, 0xe2, 0x6b, 0x3b, 0xb1,
	0x21, 0xc9, 0x84, 0xbe, 0xce, 0x2e, 0x30, 0x2c, 0xad, 0x72, 0x77, 0x5d, 0xdf, 0xc2, 0x7d, 0xbb,
	0xee, 0x54, 0x55, 0xdb, 0xbe, 0xa3, 0xd5, 0xee, 0xaa, 0x91, 0x98, 0x45, 0x7c, 0x48, 0x20, 0xf1,
	0xc0, 0x0a, 0xc1, 0x2b, 0x12, 0xcb, 0x63, 0x0b, 0x89, 0x17, 0xfe, 0x01, 0x24, 0xc4, 0x2b, 0xcf,
	0xfc, 0x07, 0x48, 0x48, 0xbc, 0xa1, 0x3a, 0x55, 0xfd, 0x71, 0xaf, 0xaf, 0x63, 0x6f, 0x66, 0x07,
	0xf1, 0x62, 0xb9, 0xab, 0x4e, 0x9d, 0x3a, 0x75, 0xea, 0x7c, 0xfc, 0xce, 0xa9, 0x8b, 0xae, 0x49,
	0x45, 0x49, 0xbf, 0x4f, 0xa5, 0x24, 0x7b, 0x54, 0x86, 0x51, 0xc2, 0xb3, 0xd8, 0x87, 0xb1, 0x28,
	0x61, 0x34, 0x55, 0xfe, 0x40, 0x70, 0xc5, 0x97, 0xf1, 0x1e, 0xe7, 0x7b, 0x09, 0xbd, 0x05, 0x5f,
	0xbb, 0x59, 0xf7, 0x56, 0x4c, 0x65, 0x24, 0xd8, 0x40, 0x71, 0x61, 0x29, 0x56, 0x47, 0x19, 0x65,
	0x29, 0xeb, 0x32, 0x1a, 0x87, 0xbb, 0x44, 0xd2, 0xe3, 0xfc, 0xbc, 0x7d, 0xe4, 0xad, 0xaf, 0xeb,
	0xbd, 0xc2, 0x27, 0x54, 0xbd, 0x1c, 0x24, 0x9c, 0xc4, 0x1d, 0x2a, 0x0e, 0xa8, 0xd8, 0x4e, 0xbb,
	0x3c, 0x0c, 0xe8, 0xe7, 0x19, 0x95, 0xca, 0xd9, 0x44, 0xd3, 0x64, 0x30, 0x60, 0xb1, 0xdb, 0xc2,
	0xad, 0x1b, 0x0b, 0xed, 0x5b, 0x79, 0xe1, 0x7e, 0x7b, 0x6d, 0x30, 0xc0, 0xdb, 0x1b, 0x58, 0x71,
	0x7c, 0xd8, 0x63, 0x51, 0x0f, 0x13, 0xdc, 0x65, 0x09, 0xc5, 0x87, 0x2c, 0x49, 0xf0, 0x2e, 0xc5,
	0x19, 0xf0, 0xa2, 0x31, 0x56, 0xdc, 0x0f, 0xcc, 0x6a, 0x6f, 0x03, 0xbd, 0xf7, 0xca, 0xcd, 0xe4,
	0x80, 0xa7, 0x92, 0x3a, 0xef, 0x20, 0x24, 0x61, 0x38, 0xcc, 0x44, 0x02, 0x5b, 0xce, 0x05, 0x73,
	0x66, 0xe4, 0xa5, 0x48, 0xbc, 0x9f, 0xcc, 0xa0, 0x77, 0x2d, 0x9b, 0x36, 0xdd, 0x63, 0xe9, 0xd6,
	0xce, 0xce, 0x0b, 0xc3, 0xac, 0x92, 0xf7, 0xf1, 0xa8, 0xbc, 0xb7, 0xf3, 0xc2, 0x5d, 0xb5, 0xf2,
	0x76, 0xb9, 0xb0, 0x02, 0xab, 0x1e, 0x35, 0x22, 0x33, 0x89, 0x77, 0x29, 0x4b, 0xf7, 0x2a, 0x99,
	0x4b, 0x81, 0x9d, 0x4f, 0xd0, 0x9c, 0xa6, 0x08, 0x25, 0xfb, 0x82, 0xba, 0xe7, 0x80, 0x17, 0xce,
	0x0b, 0xf7, 0xed, 0x4f, 0x05, 0xdb, 0x63, 0x29, 0x49, 0xcc, 0x7a, 0x3d, 0x8b, 0x59, 0x8a, 0x77,
	0x87, 0x8a, 0x4a, 0x3f, 0x98, 0xd5, 0x83, 0x1d, 0xf6, 0x05, 0x75, 0x9e, 0x20, 0xf8, 0x3f, 0x25,
	0x7d, 0xea, 0x9e, 0xd7, 0xc7, 0x68, 0x7f, 0x3b, 0x2f, 0xdc, 0x95, 0xe7, 0xa4, 0x4f, 0x31, 0xef,
	0xd6, 0x02, 0x28, 0x8e, 0xa5, 0xe2, 0x02, 0x98, 0xe8, 0x41, 0x73, 0xf9, 0x41, 0xb5, 0xd8, 0x09,
	0x0d, 0xa3, 0x50, 0xf6, 0x88, 0x3b, 0x05, 0x8c, 0x36, 0xf2, 0xc2, 0xfd, 0xf5, 0x2d, 0x7a, 0x84,
	0xa5, 0x12, 0x5a, 0xf4, 0x1b, 0xf7, 0x6e, 0xe3, 0x98, 0xed, 0x31, 0x25, 0x3f, 0xc0, 0x82, 0x0e,
	0x04, 0x95, 0x34, 0x55, 0x7a, 0x42, 0xf3, 0xeb, 0x6c, 0xad, 0xdd, 0xd1, 0xb3, 0x54, 0xaa, 0xe6,
	0xbe, 0x7e, 0x30, 0x03, 0xa2, 0xf6, 0x88, 0xd3, 0x45, 0x73, 0x4c, 0x86, 0x83, 0x6c, 0x37, 0x61,
	0x91, 0x3b, 0x8d, 0x5b, 0x37, 0x66, 0xdb, 0xdb, 0x79, 0xe1, 0x6e, 0xee, 0x88, 0x8c, 0x62, 0xd6,
	0x10, 0x55, 0xf6, 0x78, 0x96, 0xc4, 0xfa, 0x82, 0xfb, 0x44, 0xec, 0xd3, 0x18, 0x9b, 0x35, 0x98,
	0x1b, 0xc9, 0x5f, 0x3e, 0xee, 0xac, 0xe2, 0x2e, 0x49, 0x24, 0xc5, 0x5c, 0xf5, 0xa8, 0x38, 0x64,
	0x92, 0xfa, 0xc1, 0x2c, 0x93, 0x2f, 0x80, 0xcc, 0xf9, 0x93, 0x16, 0x7a, 0x63, 0x90, 0x10, 0xd5,
	0xe5, 0xa2, 0x2f, 0x43, 0xc5, 0x43, 0x39, 0x4c, 0x23, 0xf7, 0x02, 0x3e, 0x7f, 0x63, 0xae, 0x1d,
	0xe6, 0x85, 0xfb, 0xd9, 0x9a, 0x10, 0x64, 0xa8, 0x85, 0xb4, 0xe7, 0x92, 0x03, 0x1a, 0xb1, 0xee,
	0x50, 0xff, 0x6b, 0x6e, 0xad, 0x5a, 0x0d, 0x5a, 0x1b, 0xa6, 0xd1, 0x23, 0x7c, 0x40, 0x92, 0x8c,
	0x9a, 0xbf, 0xf2, 0x63, 0x4c, 0x92, 0x64, 0x15, 0x1f, 0xb2, 0x34, 0xe6, 0x87, 0x72, 0x15, 0x73,
	0x79, 0xb4, 0x8a, 0x13, 0x96, 0x66, 0x47, 0x7e, 0x70, 0xa9, 0x5a, 0xbb, 0xc3, 0x3b, 0xc3, 0x34,
	0x72, 0xbe, 0x6c, 0xa1, 0xb7, 0x84, 0x31, 0x99, 0xb0, 0x47, 0x49, 0x4c, 0x85, 0x0c, 0xb5, 0xbe,
	0xa5, 0x3b, 0x03, 0x12, 0x75, 0xf2, 0xc2, 0xfd, 0x54, 0xdf, 0x96, 0x04, 0xb3, 0xb1, 0x24, 0x78,
	0xc8, 0xb3, 0x95, 0x24, 0xc1, 0x87, 0x24, 0x55, 0x20, 0x04, 0x55, 0xfa, 0xf8, 0x43, 0x9e, 0x09,
	0x6b, 0x41, 0xd8, 0x32, 0xf5, 0xf1, 0x33, 0x32, 0xd4, 0xba, 0x4a, 0x68, 0x57, 0xe1, 0xdd, 0x84,
	0xa4, 0xfb, 0x7e, 0xf0, 0x0d, 0x3b, 0xb9, 0x65, 0xb8, 0x01, 0x7b, 0xe7, 0xe7, 0x2d, 0x74, 0x79,
	0x5c, 0x12, 0x73, 0x20, 0x77, 0x16, 0x44, 0x39, 0xc8, 0x0b, 0x57, 0x7c, 0x0f, 0x46, 0x5e, 0x57,
	0x96, 0x9d, 0x1e, 0xc5, 0x69, 0xd6, 0xdf, 0xa5, 0x42, 0xeb, 0x17, 0xce, 0x89, 0xfb, 0x99, 0x54,
	0x98, 0x7e, 0x9e, 0x91, 0x04, 0xae, 0xaf, 0x9e, 0x36, 0x9b, 0xfb, 0xc1, 0x9b, 0xa3, 0xd2, 0x1a,
	0x09, 0xbc, 0xff, 0x9c, 0x42, 0x57, 0x4e, 0x74, 0x41, 0xeb, 0xc5, 0x0f, 0xd0, 0x74, 0xb6, 0x17,
	0x59, 0x1f, 0xbc, 0x60, 0xfc, 0xe6, 0xe5, 0x93, 0x75, 0xed, 0x83, 0xd6, 0x06, 0xab, 0x10, 0x61,
	0x8c, 0xd1, 0x90, 0x3b, 0x8f, 0xd0, 0x9c, 0x62, 0x7d, 0x2a, 0x15, 0xe9, 0x0f, 0xc0, 0xe7, 0x66,
	0xda, 0xef, 0xe4, 0x85, 0xfb, 0x4d, 0x13, 0x29, 0x70, 0x35, 0xa7, 0xb9, 0x98, 0x85, 0x35, 0xbd,
	0x43, 0xd0, 0x6c, 0x26, 0x92, 0xb0, 0xc7, 0xa5, 0xb2, 0x1e, 0xf7, 0x38, 0x2f, 0xdc, 0xf6, 0x16,
	0x97, 0x0a, 0x4e, 0x0c, 0x96, 0x65, 0x19, 0x95, 0x81, 0x6b, 0xcc, 0xae, 0x2b, 0xa9, 0x0e, 0x18,
	0xc1, 0xfa, 0x60, 0xf8, 0xc5, 0xcb, 0x1d, 0x3f, 0x98, 0xc9, 0x44, 0xa2, 0xd9, 0x38, 0xbf, 0x6d,
	0xb6, 0x18, 0x10, 0xd5, 0xb3, 0xbe, 0xf8, 0x49, 0x5e, 0xb8, 0x0f, 0x03, 0x9a, 0x10, 0xc5, 0x0e,
	0x28, 0xd6, 0x13, 0xfa, 0x0e, 0xce, 0xb8, 0x8d, 0xe1, 0xfc, 0x82, 0xa8, 0x9e, 0xb3, 0x85, 0xe6,
	0x32, 0x49, 0xc3, 0x9e, 0x52, 0x03, 0x69, 0x9d, 0x10, 0xe2, 0xc5, 0x76, 0x17, 0x2b, 0x91, 0xd1,
	0x55, 0x9c, 0x49, 0x8a, 0x61, 0x76, 0xb5, 0xf6, 0xae, 0x6a, 0xd0, 0x0f, 0x66, 0x33, 0x49, 0xb7,
	0xf4, 0xb4, 0x76, 0xb3, 0x4b, 0x63, 0xe6, 0x04, 0x4e, 0x36, 0x7f, 0x77, 0xd5, 0x3f, 0xe5, 0xde,
	0x7c, 0x3d, 0x66, 0x6f, 0xbb, 0x7d, 0x2f, 0x2f, 0xdc, 0xdb, 0xda, 0x42, 0x6f, 0x1a, 0x1f, 0x1b,
	0x10, 0x26, 0xc0, 0xf1, 0x76, 0x29, 0xd6, 0x01, 0x46, 0x07, 0xac, 0x52, 0x45, 0x95, 0xa1, 0x05,
	0x8b, 0xa3, 0x36, 0xb3, 0xfc, 0x11, 0x9a, 0x6f, 0x30, 0x75, 0x1c, 0x34, 0x05, 0x11, 0xd1, 0x04,
	0x76, 0xf8, 0xdf, 0x79, 0x13, 0x4d, 0xc3, 0x0e, 0x70, 0xe1, 0x73, 0x81, 0xf9, 0xf0, 0xfe, 0xa3,
	0x36, 0xb3, 0x75, 0xde, 0xef, 0x33, 0x35, 0x21, 0xd4, 0xff, 0x53, 0x0b, 0x39, 0x4a, 0x90, 0x54,
	0x76, 0xa9, 0x08, 0x65, 0x16, 0x45, 0x94, 0xc6, 0xd4, 0x18, 0xdd, 0x6c, 0xfb, 0xcb, 0x56, 0x5e,
	0xb8, 0x79, 0xab, 0x19, 0xc5, 0x2a, 0x71, 0x15, 0x6f, 0x18, 0x21, 0x7e, 0x19, 0x3c, 0xc5, 0xd5,
	0x6a, 0x7c, 0x43, 0x7f, 0x0e, 0x04, 0x3f, 0x60, 0xfa, 0x8b, 0xa5, 0x58, 0x58, 0xed, 0xe8, 0x55,
	0x20, 0x90, 0x3f, 0xa6, 0xbf, 0x0f, 0xca, 0xb0, 0xc7, 0xba, 0x3a, 0x13, 0x12, 0x96, 0x64, 0x82,
	0x62, 0x1e, 0x45, 0x99, 0x10, 0xfa, 0x92, 0xdf, 0x28, 0x65, 0xec, 0x94, 0x9b, 0x38, 0x3f, 0x2e,
	0x93, 0x94, 0x49, 0x2c, 0x2c, 0x2f, 0x5c, 0xfa, 0x8b, 0x24, 0x29, 0xfc, 0x4c, 0x3b, 0x6f, 0x9f,
	0x28, 0x4b, 0x46, 0xcc, 0xda, 0x4a, 0xec, 0x93, 0x44, 0xad, 0xb2, 0xdb, 0xdf, 0xb6, 0x1a, 0x69,
	0xc5, 0x78, 0x4b, 0xae, 0x15, 0xf6, 0xa3, 0xaf, 0x9a, 0x57, 0xc6, 0x25, 0x6b, 0xd2, 0x9d, 0x41,
	0xbc, 0x2a, 0x2b, 0x7d, 0xd6, 0xc8, 0x9f, 0xc6, 0xd5, 0xbe, 0x9b, 0x17, 0xee, 0xa3, 0xc7, 0x76,
	0x0c, 0x13, 0x69, 0xf3, 0x03, 0x33, 0xb7, 0xa4, 0xf7, 0x9a, 0xc8, 0xb3, 0xb6, 0xcd, 0x8a, 0xa1,
	0xf7, 0xa7, 0x2d, 0x84, 0x4f, 0x36, 0x2e, 0x1b, 0xc4, 0x7a, 0x68, 0x11, 0x34, 0x14, 0x01, 0x85,
	0xaa, 0x0c, 0x6b, 0x2d, 0x2f, 0xdc, 0x4f, 0x8e, 0x25, 0xc7, 0x43, 0x2d, 0x90, 0xbe, 0x5f, 0x29,
	0xbb, 0x59, 0x92, 0x0c, 0x71, 0xb5, 0x6c, 0x42, 0x52, 0x5c, 0xd0, 0x4b, 0xd6, 0x4b, 0x02, 0xef,
	0x67, 0x2d, 0xf4, 0x4e, 0x0d, 0x8e, 0xf4, 0x11, 0x37, 0xa8, 0x22, 0x2c, 0x91, 0x95, 0xa5, 0xb7,
	0x9b, 0x01, 0x75, 0xaa, 0xbd, 0x9a, 0x17, 0xee, 0x8d, 0x3a, 0x98, 0xc2, 0xd2, 0x0a, 0x4e, 0xec,
	0x51, 0x85, 0x63, 0xb3, 0x5e, 0x1b, 0x53, 0x15, 0x5c, 0xef, 0x8f, 0xda, 0xdc, 0x95, 0xbc, 0x70,
	0xbf, 0x55, 0x02, 0xb9, 0xf2, 0x14, 0xbb, 0x34, 0xe1, 0xe9, 0x9e, 0x6c, 0x02, 0xb7, 0x7f, 0x6b,
	0xa1, 0x4b, 0x56, 0xb8, 0x97, 0x92, 0x0a, 0x2d, 0x9d, 0x76, 0xd9, 0x06, 0xc6, 0x2a, 0x6d, 0xea,
	0xcd, 0x52, 0x48, 0xbd, 0xc1, 0x54, 0xb9, 0xed, 0xf2, 0x38, 0x10, 0x6a, 0x60, 0x9b, 0xb7, 0x9b,
	0xf1, 0x7e, 0x0a, 0x56, 0x35, 0x02, 0xfa, 0xb7, 0x9a, 0x08, 0x6c, 0x1a, 0x76, 0xaa, 0xf1, 0xd5,
	0x12, 0x3a, 0xaf, 0x11, 0xe2, 0x05, 0xe0, 0xa8, 0xff, 0x75, 0x56, 0xd0, 0x25, 0xc0, 0xb8, 0x2c,
	0x0e, 0x23, 0x41, 0x89, 0xe2, 0xc2, 0x9d, 0xd1, 0xe9, 0x27, 0x58, 0xb4, 0xc3, 0xeb, 0x66, 0xd4,
	0x7b, 0x5a, 0x61, 0xc8, 0x63, 0xda, 0xb6, 0x57, 0xff, 0x21, 0x9a, 0xb1, 0x1a, 0x84, 0x13, 0xce,
	0xdf, 0x5d, 0xf2, 0xc7, 0x54, 0x10, 0x94, 0x04, 0xde, 0x5f, 0x4d, 0xa1, 0xab, 0x76, 0x72, 0x33,
	0xcd, 0xfa, 0x54, 0x10, 0x45, 0x4b, 0xaa, 0xfa, 0x02, 0x1f, 0x8d, 0xa2, 0xd2, 0x6b, 0x79, 0xe1,
	0x5e, 0xad, 0x51, 0x34, 0x2d, 0x17, 0x56, 0x37, 0x21, 0x31, 0xef, 0x56, 0xce, 0xfa, 0xf3, 0x16,
	0x5a, 0xa2, 0x47, 0x8a, 0xa6, 0x31, 0x8d, 0xc3, 0x52, 0xb0, 0x73, 0x60, 0x8c, 0x3f, 0xd1, 0x4e,
	0xfb, 0xc3, 0x1b, 0x9f, 0x0e, 0x14, 0xe3, 0x29, 0x49, 0x3e, 0xc0, 0x4f, 0xa8, 0xc2, 0x25, 0x6d,
	0x65, 0x06, 0xbb, 0x24, 0xda, 0x2f, 0x61, 0x9a, 0xe1, 0xde, 0xe5, 0x59, 0x1a, 0xfb, 0x78, 0x83,
	0x76, 0x49, 0x96, 0x28, 0x88, 0xeb, 0x3c, 0x4d, 0x86, 0x58, 0x50, 0x95, 0x89, 0x54, 0xbb, 0x68,
	0x19, 0x55, 0x62, 0x4c, 0xd2, 0x18, 0x43, 0xf6, 0x8e, 0x9b, 0x9e, 0x5e, 0xf2, 0x08, 0x2e, 0x95,
	0xdb, 0x59, 0x35, 0x3a, 0x7f, 0xd8, 0x42, 0xd3, 0x11, 0xcf, 0x52, 0x93, 0x86, 0x17, 0xda, 0xfd,
	0xbc, 0x70, 0x59, 0x43, 0xc4, 0x67, 0xe4, 0x88, 0xf5, 0xb3, 0x7e, 0x03, 0x71, 0x08, 0x2a, 0x4b,
	0x29, 0x8c, 0x00, 0x46, 0x58, 0x26, 0x71, 0x44, 0x92, 0x64, 0x54, 0x4c, 0x82, 0xfb, 0x76, 0x3d,
	0xef, 0xe2, 0xfb, 0xb7, 0x6f, 0x5b, 0x61, 0x4a, 0xc1, 0xfd, 0xc0, 0xec, 0xed, 0xfc, 0x08, 0xcd,
	0x4b, 0x45, 0x84, 0x0a, 0x59, 0x1a, 0xd3, 0x23, 0xb0, 0xae, 0x85, 0xf6, 0x0f, 0xf2, 0xc2, 0xfd,
	0x9d, 0x86, 0x28, 0x1d, 0x4d, 0xa1, 0x43, 0x1a, 0x10, 0x99, 0xec, 0xb6, 0xc7, 0xd2, 0xea, 0x42,
	0x18, 0x4f, 0x31, 0x51, 0xa3, 0x02, 0x68, 0x05, 0x00, 0x55, 0xaa, 0x17, 0x5a, 0x8d, 0x24, 0x4c,
	0x47, 0x18, 0x04, 0x3b, 0x6e, 0x6b, 0x5e, 0x5e, 0xbf, 0xaa, 0xae, 0x26, 0x9a, 0x85, 0xb5, 0xb4,
	0xeb, 0x68, 0x1a, 0xe4, 0x77, 0x5b, 0x90, 0xa2, 0x8f, 0xdb, 0x99, 0x99, 0x76, 0xae, 0xa0, 0x79,
	0xc5, 0x15, 0x49, 0x42, 0x43, 0x0d, 0x2e, 0x1c, 0x20, 0x18, 0x02, 0x8e, 0xde, 0x1f, 0xa0, 0xb7,
	0xec, 0xd2, 0x0d, 0x9a, 0x50, 0x45, 0x2b, 0xcb, 0x6b, 0xfa, 0x5f, 0x6b, 0xcc, 0xff, 0x5e, 0x33,
	0x24, 0xb8, 0xe8, 0xf2, 0xf8, 0x5e, 0xe6, 0x38, 0xde, 0x0a, 0xba, 0x56, 0xbb, 0xd6, 0x3a, 0x14,
	0x9b, 0x9b, 0x69, 0x24, 0x86, 0xa0, 0xf0, 0xdf, 0xa4, 0xc3, 0x52, 0x2a, 0xef, 0x08, 0x5d, 0x3f,
	0x8d, 0xd0, 0x6a, 0x68, 0x15, 0x9d, 0xdf, 0xa7, 0x43, 0x10, 0xfd, 0x62, 0x7b, 0x39, 0x2f, 0xdc,
	0xcb, 0x6b, 0x9b, 0x9d, 0x9b, 0x77, 0xef, 0x3f, 0xc0, 0xb4, 0x5a, 0x80, 0xf7, 0xe9, 0x30, 0xd0,
	0x64, 0x0e, 0x46, 0xe7, 0x23, 0x11, 0xc1, 0x79, 0xa6, 0xdb, 0x8b, 0x79, 0xe1, 0xa2, 0xf5, 0x60,
	0x5d, 0x5f, 0x12, 0x50, 0x44, 0x22, 0xf2, 0xfe, 0xa7, 0x0e, 0xb6, 0xeb, 0x1b, 0xcf, 0x03, 0x3a,
	0xe0, 0x42, 0x85, 0xcf, 0xb9, 0x62, 0x5d, 0x16, 0xc1, 0x85, 0x3b, 0x2e, 0x9a, 0xb1, 0x11, 0xc3,
	0xe0, 0xd7, 0xa0, 0xfc, 0x2c, 0x83, 0xce, 0xb9, 0x3a, 0xe8, 0x68, 0x5a, 0x13, 0xf5, 0xc1, 0xd8,
	0x67, 0x83, 0xf2, 0xd3, 0xb9, 0x81, 0x96, 0x34, 0x34, 0x0b, 0xa5, 0x22, 0x2a, 0x93, 0x61, 0xc4,
	0x63, 0x93, 0xc8, 0x16, 0x82, 0x45, 0x3d, 0xde, 0x81, 0xe1, 0x75, 0x1e, 0x53, 0xe7, 0x1a, 0x5a,
	0xa4, 0x47, 0x03, 0x1a, 0x29, 0x5d, 0xaa, 0xeb, 0x3a, 0x12, 0x82, 0xdd, 0x54, 0xb0, 0x50, 0x8e,
	0xb6, 0xf5, 0xa0, 0x26, 0x13, 0x34, 0xa2, 0xec, 0xa0, 0x22, 0xbb, 0x60, 0xc8, 0xca, 0x51, 0x43,
	0xb6, 0x8c, 0x66, 0xe3, 0xcc, 0x98, 0x2e, 0xc4, 0xbf, 0x85, 0xa0, 0xfa, 0xf6, 0xfe, 0xe5, 0x1c,
	0xba, 0x53, 0x1a, 0xe5, 0x91, 0xa2, 0x22, 0x25, 0x49, 0x47, 0x71, 0x41, 0xf6, 0xe8, 0x8e, 0x85,
	0x28, 0x93, 0xf4, 0xe1, 0xa0, 0x29, 0x00, 0xd5, 0x16, 0xb4, 0xe9, 0xff, 0xf5, 0x18, 0xa0, 0x60,
	0xa3, 0x0a, 0xf8, 0x5f, 0xc7, 0x6b, 0x26, 0x43, 0x83, 0x51, 0xac, 0x36, 0x66, 0x99, 0x34, 0x69,
	0xb5, 0xa9, 0xa8, 0xa9, 0xd3, 0x15, 0x35, 0x7d, 0x92, 0xa2, 0xe0, 0xe0, 0x61, 0xa9, 0x98, 0x52,
	0x03, 0x30, 0xba, 0x69, 0x07, 0x9d, 0xab, 0xe8, 0xa2, 0x21, 0x23, 0x91, 0xca, 0x48, 0x02, 0x5a,
	0x98, 0x0a, 0xe6, 0x61, 0x6c, 0x0d, 0x86, 0xb4, 0x3b, 0x95, 0x4a, 0x09, 0xfb, 0xba, 0xce, 0x02,
	0x77, 0x2a, 0x87, 0x9e, 0x49, 0xe7, 0x32, 0xba, 0x10, 0xd1, 0x24, 0x61, 0xb1, 0x3b, 0x07, 0x73,
	0xf6, 0xcb, 0xfb, 0x87, 0x0b, 0xe8, 0xfd, 0xd2, 0x7a, 0xc0, 0x6a, 0x01, 0x6d, 0x68, 0x17, 0xfc,
	0x9a, 0xda, 0x10, 0xcf, 0x8f, 0xb7, 0x21, 0xee, 0xe4, 0x85, 0x7b, 0xb3, 0xee, 0x3e, 0x10, 0x89,
	0x01, 0x60, 0x1a, 0x30, 0x01, 0xd1, 0x1a, 0x3a, 0x0a, 0x00, 0x8b, 0xd6, 0x1b, 0xed, 0x04, 0xc8,
	0x9b, 0x9f, 0xa1, 0x05, 0x41, 0x0e, 0xc3, 0x9a, 0xa7, 0x89, 0xd1, 0x1f, 0xe5, 0x85, 0xfb, 0xab,
	0x35, 0xcf, 0x5d, 0xda, 0xe5, 0x82, 0x62, 0x92, 0x02, 0x8e, 0xd1, 0xd0, 0x4f, 0x42, 0x28, 0x4c,
	0xe3, 0x5b, 0x5c, 0x34, 0x1c, 0xcf, 0x0f, 0xe6, 0x05, 0x39, 0x7c, 0x5c, 0x32, 0xbf, 0x33, 0xd6,
	0xab, 0xb8, 0xd8, 0xbe, 0x9c, 0x17, 0xae, 0xd3, 0xd9, 0x5a, 0xbb, 0x79, 0x07, 0xe2, 0x3c, 0x39,
	0x1c, 0xef, 0x3e, 0xdc, 0x47, 0x48, 0x67, 0xfc, 0xd0, 0x60, 0x00, 0x30, 0x7c, 0xb3, 0x68, 0xe7,
	0x84, 0x62, 0xaf, 0x03, 0xd8, 0xa0, 0xd9, 0x5e, 0xb9, 0xf0, 0x55, 0xda, 0x2b, 0x0f, 0x26, 0x35,
	0x25, 0xc0, 0x6f, 0x3e, 0x46, 0xf7, 0xee, 0x3e, 0xbc, 0xf7, 0xf0, 0xc1, 0x47, 0x77, 0x1f, 0xde,
	0x3f, 0xde, 0x3f, 0x78, 0x8e, 0x66, 0xb4, 0x49, 0x84, 0xa5, 0x85, 0xb4, 0xef, 0xe7, 0x85, 0x7b,
	0xc7, 0xd8, 0xc4, 0x8a, 0xc4, 0x7a, 0x4e, 0xdf, 0xb5, 0xe4, 0xf8, 0x90, 0xe2, 0x88, 0xa4, 0x78,
	0xc0, 0xa2, 0x7d, 0x90, 0x85, 0xec, 0x51, 0x9c, 0x70, 0xe3, 0x5b, 0xbe, 0x31, 0xac, 0xed, 0xd8,
	0xf9, 0x01, 0x9a, 0x8f, 0x48, 0x1a, 0x5a, 0xd5, 0xba, 0x08, 0xb2, 0xfb, 0xaf, 0xe5, 0x85, 0xfb,
	0x1d, 0x56, 0x96, 0x80, 0xa6, 0x79, 0x07, 0xcc, 0x2c, 0x59, 0x33, 0x4a, 0xc3, 0x85, 0x19, 0xf3,
	0x81, 0x84, 0xa6, 0x02, 0x14, 0x91, 0xd4, 0x06, 0x55, 0x47, 0xa1, 0x45, 0x26, 0xf5, 0xbd, 0x08,
	0x1a, 0xc3, 0xe5, 0xbb, 0xf3, 0xb0, 0xc3, 0xf3, 0xbc, 0x70, 0x7f, 0xa3, 0xda, 0x01, 0x52, 0x2e,
	0x93, 0x78, 0x8f, 0x03, 0xcc, 0x87, 0x5a, 0x4f, 0x67, 0x7e, 0x2e, 0x30, 0xc1, 0x32, 0x12, 0x94,
	0xa6, 0xb2, 0xc7, 0x95, 0xfe, 0x96, 0xbc, 0x6f, 0x21, 0x2d, 0x36, 0x5c, 0x41, 0x8e, 0xe0, 0x22,
	0x93, 0x1d, 0xf8, 0xd4, 0x36, 0xe1, 0xfd, 0xd7, 0x0c, 0xba, 0x6a, 0x54, 0x02, 0x76, 0x58, 0xbb,
	0x49, 0x3b, 0xe1, 0xd1, 0x7e, 0x89, 0x17, 0x9a, 0x85, 0x7b, 0xeb, 0xeb, 0x2f, 0xdc, 0xcf, 0x7d,
	0x7d, 0x85, 0xfb, 0xf9, 0xaf, 0x52, 0xb8, 0x3f, 0x41, 0xf3, 0x10, 0x07, 0xfb, 0x54, 0xf5, 0x78,
	0x0c, 0xfe, 0x33, 0xdd, 0xbe, 0x9e, 0x17, 0xae, 0xb7, 0xa9, 0x4f, 0xf4, 0x0c, 0x86, 0xb5, 0x68,
	0x7a, 0xb1, 0x8e, 0x21, 0x70, 0x5b, 0xbb, 0x5a, 0x93, 0x7e, 0x80, 0xf4, 0x52, 0x43, 0xe2, 0xfc,
	0xd9, 0x84, 0x0e, 0xc0, 0x34, 0xc0, 0x0b, 0xdf, 0x3f, 0xf5, 0x36, 0x7e, 0xf9, 0x3d, 0x00, 0x67,
	0x13, 0x5d, 0x04, 0x29, 0x43, 0xde, 0xed, 0x4a, 0xaa, 0x4c, 0xd0, 0x6e, 0x7b, 0x79, 0xe1, 0xbe,
	0x6b, 0x46, 0x4a, 0x0f, 0x37, 0x87, 0x81, 0x23, 0x82, 0x5c, 0xc1, 0x3c, 0x0c, 0x7c, 0x0a, 0x44,
	0xce, 0x17, 0x25, 0x9b, 0x84, 0xa6, 0x7b, 0xaa, 0x67, 0x9c, 0xb4, 0xfd, 0xfd, 0xbc, 0x70, 0x3b,
	0x66, 0xe4, 0x24, 0x36, 0xf8, 0xa6, 0xae, 0xd4, 0xbe, 0xa0, 0x82, 0xaf, 0xe2, 0x94, 0xe3, 0x01,
	0x11, 0x23, 0x25, 0xab, 0x36, 0xf8, 0x7a, 0xac, 0x54, 0xa9, 0xdd, 0xfb, 0x29, 0x70, 0x76, 0x3e,
	0x47, 0x0e, 0x3d, 0x1a, 0x24, 0x2c, 0x62, 0x2a, 0xdc, 0xe5, 0xf1, 0x30, 0x8c, 0x89, 0x22, 0x90,
	0x36, 0x2e, 0xb6, 0xd7, 0xf3, 0xc2, 0xfd, 0x6e, 0x39, 0x8b, 0xf5, 0x2c, 0xd6, 0xb3, 0xf6, 0xa6,
	0x56, 0x31, 0x4b, 0x35, 0x7c, 0x88, 0x2b, 0xe9, 0xf4, 0xe4, 0xea, 0xd8, 0x05, 0x06, 0x4b, 0x25,
	0x83, 0x36, 0x8f, 0x87, 0x1b, 0x44, 0x11, 0xe7, 0xc7, 0xe8, 0x52, 0x9f, 0x0c, 0xc3, 0x01, 0x11,
	0x24, 0x49, 0x68, 0xa2, 0x43, 0xf5, 0x1c, 0x98, 0xd7, 0xf7, 0xf2, 0xc2, 0x0d, 0x46, 0x5d, 0xd6,
	0x2a, 0x1c, 0xf7, 0x4d, 0xcb, 0x31, 0xe6, 0x29, 0x04, 0xbc, 0x72, 0x2d, 0x3e, 0x64, 0x5a, 0x3b,
	0xc6, 0x59, 0x59, 0x9f, 0x25, 0x44, 0x24, 0xc3, 0x9b, 0xb6, 0x89, 0x6b, 0xd7, 0xca, 0x60, 0xb1,
	0x4f, 0x86, 0x2f, 0xea, 0xdd, 0x5e, 0xbf, 0x75, 0xf3, 0xc7, 0xe7, 0x2a, 0x14, 0x78, 0x52, 0x8e,
	0xac, 0x4a, 0xec, 0x8b, 0x36, 0x92, 0x99, 0x98, 0x64, 0x0a, 0xec, 0xcd, 0xbc, 0x70, 0xd7, 0xb6,
	0xeb, 0x03, 0x1e, 0x6b, 0x3f, 0xdb, 0x35, 0x34, 0xc6, 0xbb, 0x43, 0x1b, 0xd5, 0x21, 0x32, 0x8e,
	0x04, 0xc1, 0x60, 0xde, 0x92, 0x41, 0xc5, 0x7a, 0x80, 0x16, 0x8d, 0xf1, 0x94, 0xc7, 0x75, 0xcf,
	0x81, 0x47, 0x78, 0xa7, 0x7b, 0x84, 0xf1, 0x67, 0x30, 0xf3, 0x72, 0xb1, 0xbe, 0xdb, 0x3e, 0xd9,
	0x87, 0xf4, 0x32, 0xa0, 0x42, 0xe7, 0x85, 0x72, 0xd7, 0x05, 0x73, 0x9f, 0x96, 0xd0, 0xfb, 0xef,
	0xf3, 0x63, 0xba, 0x30, 0x55, 0xff, 0x04, 0xc0, 0xa0, 0x5e, 0xd1, 0xcb, 0x02, 0x8d, 0x94, 0x2d,
	0x07, 0x92, 0x24, 0xd6, 0xc2, 0xcd, 0x96, 0xb2, 0x6e, 0x5e, 0x35, 0x1b, 0x51, 0xe9, 0xd0, 0x1a,
	0x79, 0x1f, 0x5a, 0x52, 0xff, 0x2f, 0x1a, 0x51, 0xf5, 0xb1, 0x2b, 0x7c, 0x33, 0x1c, 0xeb, 0x43,
	0x5d, 0x6c, 0xff, 0x7e, 0x5e, 0xb8, 0xbf, 0x3b, 0xa1, 0xbd, 0x54, 0x81, 0x87, 0xd7, 0x68, 0x31,
	0x35, 0x37, 0xfe, 0x65, 0xb5, 0x98, 0x6a, 0x9e, 0x93, 0x5a, 0x4c, 0x7f, 0xd9, 0xaa, 0x2a, 0x9c,
	0x13, 0x2f, 0xfe, 0xff, 0xbc, 0xd1, 0xf4, 0x17, 0xad, 0xaa, 0x57, 0x61, 0x84, 0x82, 0xee, 0x07,
	0x3f, 0x4c, 0x47, 0x2c, 0xf1, 0xfe, 0x28, 0x74, 0x9d, 0x58, 0x15, 0xd6, 0x31, 0xb3, 0xba, 0xc9,
	0xfb, 0x0d, 0x75, 0x9a, 0x1c, 0xfb, 0xcd, 0xbc, 0x70, 0xdf, 0xaa, 0xd4, 0x39, 0xf2, 0xfa, 0x54,
	0x2b, 0xea, 0xcb, 0x99, 0xaa, 0x50, 0x9e, 0x28, 0x93, 0x55, 0xd2, 0xc3, 0x51, 0xa1, 0xde, 0xcb,
	0x0b, 0xf7, 0xca, 0xda, 0x40, 0xc7, 0x4c, 0x53, 0xa5, 0x4f, 0xa8, 0x57, 0x4b, 0xc1, 0x7e, 0xeb,
	0x38, 0x84, 0x86, 0xc4, 0x76, 0x46, 0x08, 0x5d, 0x5d, 0x7b, 0x03, 0x45, 0xef, 0x4c, 0x46, 0xd1,
	0x80, 0xf2, 0x6b, 0xb6, 0x87, 0x3d, 0x9a, 0xe2, 0x98, 0x96, 0x08, 0xda, 0x70, 0xd6, 0x00, 0x3a,
	0xa6, 0x36, 0x80, 0x8d, 0xc2, 0xe7, 0x0f, 0xd1, 0xac, 0xec, 0x11, 0x13, 0x0a, 0x0d, 0x7c, 0xbe,
	0x94, 0x17, 0xee, 0x7c, 0x67, 0x6b, 0xad, 0x4c, 0x1e, 0xc1, 0x8c, 0xec, 0x11, 0x08, 0x68, 0xf7,
	0x26, 0xe0, 0xe6, 0xb7, 0xf2, 0xc2, 0x7d, 0xe3, 0x18, 0x6e, 0x6e, 0xc2, 0xe6, 0xdf, 0x43, 0x0e,
	0x83, 0xf2, 0xc9, 0xa4, 0xb2, 0x18, 0xca, 0x77, 0x48, 0xc8, 0xb3, 0x6d, 0x3f, 0x2f, 0xdc, 0x0f,
	0x6b, 0x73, 0x33, 0x48, 0x50, 0x63, 0x4d, 0x4b, 0x9d, 0x0c, 0xb1, 0xa1, 0xb7, 0x50, 0x6f, 0x89,
	0xe9, 0x92, 0x0b, 0xa6, 0x4c, 0x1b, 0xc0, 0xf9, 0x4e, 0x03, 0xc8, 0xcd, 0x80, 0x05, 0xc0, 0xeb,
	0x0d, 0x00, 0x39, 0xc5, 0xf1, 0x93, 0xcd, 0x9d, 0xfa, 0x9a, 0xba, 0x82, 0xf7, 0x27, 0xe3, 0xb3,
	0xd9, 0x1a, 0x9f, 0xbd, 0xb0, 0xb0, 0x4c, 0xf5, 0x88, 0xc2, 0x3d, 0xcb, 0xc6, 0x26, 0xd5, 0x28,
	0xc9, 0x00, 0xe8, 0x42, 0xbb, 0x9e, 0x08, 0xd2, 0xa7, 0x8a, 0x0a, 0x69, 0x43, 0x5f, 0x8d, 0xcf,
	0xd6, 0x9a, 0xf8, 0xcc, 0x24, 0xd0, 0xf7, 0xf3, 0xc2, 0xc5, 0xdb, 0x1a, 0x53, 0x2a, 0x03, 0xcf,
	0x74, 0x6c, 0xef, 0xac, 0x62, 0x9a, 0x58, 0x64, 0xa6, 0xbf, 0x1b, 0xc0, 0xec, 0xcf, 0x27, 0xe0,
	0x29, 0x04, 0xd9, 0xe3, 0x96, 0x7f, 0xba, 0xe5, 0xbe, 0x1e, 0xa0, 0xd2, 0xba, 0x3a, 0x11, 0x50,
	0xbd, 0x8d, 0xe6, 0xaa, 0x14, 0x68, 0x70, 0x7c, 0x50, 0x0f, 0xbc, 0x7e, 0xde, 0xfe, 0xa3, 0x73,
	0xf5, 0x93, 0x0b, 0x9c, 0xc7, 0x5c, 0xab, 0x3e, 0xd5, 0x59, 0x7e, 0x0d, 0xf0, 0xaa, 0x7c, 0x61,
	0x0d, 0xa7, 0x8a, 0x15, 0x77, 0x8e, 0xc5, 0x0a, 0xb0, 0xdd, 0x66, 0xac, 0x18, 0x8b, 0x13, 0x0e,
	0x9b, 0x68, 0xba, 0x06, 0x71, 0x3f, 0xca, 0x0b, 0xf7, 0xa3, 0xed, 0xf1, 0x2a, 0x86, 0xe0, 0x15,
	0x43, 0xb5, 0xf2, 0x48, 0x9b, 0x05, 0x04, 0xc7, 0x55, 0xcc, 0x94, 0x9d, 0xeb, 0x72, 0xb1, 0x47,
	0xd5, 0xca, 0x71, 0x3b, 0xf6, 0xbc, 0xfa, 0x75, 0xe0, 0xb8, 0x1e, 0xcc, 0xad, 0xde, 0xfd, 0xe9,
	0x12, 0x9a, 0x06, 0x1a, 0xe7, 0x6f, 0x5a, 0xe8, 0x1b, 0x13, 0x7e, 0xd3, 0xe0, 0xbc, 0xe7, 0x9f,
	0xfe, 0xeb, 0x8a, 0xe5, 0xf7, 0xfd, 0x33, 0xfc, 0x2a, 0xc2, 0xfb, 0x38, 0x2f, 0xdc, 0x07, 0x01,
	0x74, 0x38, 0xa5, 0x79, 0x6b, 0x0f, 0x9e, 0x96, 0xf1, 0x74, 0x20, 0xf8, 0x80, 0x0a, 0x53, 0xd8,
	0x96, 0xf5, 0x4b, 0x17, 0x0a, 0xb6, 0x4c, 0x52, 0xe1, 0x3b, 0x7f, 0x7f, 0x0e, 0x5d, 0x1a, 0x7b,
	0x12, 0x71, 0xae, 0xf8, 0xaf, 0xfe, 0x11, 0xc5, 0x32, 0x3e, 0xed, 0xa9, 0xd0, 0xfb, 0xf7, 0x56,
	0x5e, 0xb8, 0xff, 0xda, 0x82, 0x79, 0x59, 0x0a, 0xa2, 0x93, 0x92, 0x96, 0xab, 0x2e, 0x43, 0x49,
	0x55, 0x86, 0x77, 0x14, 0x25, 0x7d, 0x68, 0x4d, 0x8b, 0x94, 0x24, 0x55, 0x25, 0xac, 0x25, 0x66,
	0x11, 0x95, 0x3e, 0x7e, 0x7c, 0x86, 0x92, 0xae, 0xec, 0xbf, 0x56, 0x6d, 0xea, 0x97, 0xc1, 0xd3,
	0x55, 0x4c, 0xba, 0x8a, 0x36, 0x6d, 0xcf, 0xc2, 0x7e, 0x78, 0xe0, 0xde, 0xd5, 0xa6, 0x98, 0x12,
	0x8d, 0x68, 0x01, 0x2e, 0x12, 0x68, 0x29, 0x03, 0x3c, 0x18, 0x7b, 0xf9, 0xf1, 0x9d, 0x7f, 0x6c,
	0xa1, 0xa5, 0xf1, 0x51, 0xa7, 0x52, 0xc5, 0x49, 0xcf, 0x90, 0xcb, 0x57, 0xfd, 0xd3, 0xde, 0x92,
	0xbc, 0x9d, 0xbc, 0x70, 0x5f, 0x98, 0x69, 0x59, 0xea, 0xc4, 0x4a, 0xc9, 0x52, 0xa6, 0x18, 0xb1,
	0x60, 0x76, 0xfc, 0xed, 0x4a, 0x67, 0xa2, 0x12, 0xb4, 0x89, 0xf1, 0xf2, 0xd6, 0x39, 0x44, 0x8b,
	0xa3, 0x2f, 0x18, 0xce, 0xbb, 0xfe, 0x2b, 0xdf, 0x91, 0x96, 0xaf, 0xf8, 0xaf, 0x7e, 0xf9, 0xf0,
	0x20, 0x36, 0x96, 0x96, 0x56, 0x3e, 0x1f, 0xf0, 0x14, 0x93, 0xc6, 0x23, 0x93, 0xef, 0xfc, 0x73,
	0x0b, 0x39, 0xc7, 0xbb, 0xda, 0x8e, 0xe7, 0x9f, 0xfa, 0x10, 0xb2, 0xfc, 0x9e, 0x7f, 0x7a, 0x57,
	0xdc, 0xfb, 0x2c, 0x2f, 0xdc, 0xef, 0x57, 0x04, 0xb2, 0xb1, 0xb7, 0x6c, 0xd8, 0xb6, 0xb6, 0x34,
	0x82, 0xf7, 0xd8, 0x01, 0x4d, 0x2d, 0xee, 0xf4, 0x2b, 0xd1, 0xb3, 0x81, 0xbe, 0xe2, 0xfa, 0x79,
	0x80, 0x28, 0x4c, 0xe0, 0xf7, 0x03, 0xbe, 0x13, 0xa3, 0x0b, 0x36, 0x5f, 0x5d, 0xf6, 0x27, 0xb6,
	0xcc, 0x97, 0x7f, 0xc5, 0x3f, 0xa1, 0xbd, 0xfd, 0x41, 0x5e, 0xb8, 0xd7, 0xcc, 0x60, 0x75, 0x8d,
	0x3a, 0x91, 0x19, 0xab, 0x93, 0x54, 0xac, 0x48, 0xdb, 0x61, 0x72, 0xfe, 0xba, 0x85, 0x2e, 0x4f,
	0x6e, 0x6d, 0x3b, 0xd7, 0xfd, 0x33, 0xf5, 0xc8, 0x97, 0x57, 0xfc, 0xb3, 0xb5, 0xc8, 0x3d, 0xc8,
	0xdc, 0x4f, 0xa8, 0x92, 0x4d, 0x39, 0x1a, 0x8f, 0x82, 0xa3, 0x8d, 0x72, 0xdf, 0x89, 0xd0, 0x5c,
	0xd5, 0xfa, 0xae, 0x4d, 0x66, 0x72, 0x37, 0x7c, 0x79, 0xde, 0x7f, 0xce, 0x47, 0x15, 0x60, 0xa8,
	0xa4, 0x75, 0x44, 0x99, 0x25, 0xca, 0xdc, 0xc4, 0xfa, 0xc6, 0xf3, 0xca, 0x58, 0x7d, 0xe7, 0xef,
	0x5a, 0xe8, 0x9d, 0x57, 0x36, 0x99, 0x9d, 0xbb, 0xfe, 0x2f, 0xdc, 0x8b, 0x1e, 0x95, 0xc6, 0xf6,
	0x70, 0x26, 0x4a, 0x93, 0xd6, 0xa1, 0xc6, 0x68, 0xa2, 0x0c, 0x38, 0xb5, 0x84, 0x3f, 0x6d, 0xa1,
	0xb7, 0x26, 0x16, 0xa8, 0xce, 0x35, 0xff, 0x2c, 0x3d, 0xde, 0xe5, 0xeb, 0xfe, 0x99, 0xca, 0x5c,
	0x0f, 0x7e, 0xff, 0xb2, 0x6d, 0xfd, 0x5c, 0x8b, 0x66, 0x5d, 0xbf, 0xaa, 0x51, 0x9c, 0x9f, 0xb5,
	0xd0, 0xe5, 0xc9, 0x65, 0x82, 0x33, 0xb6, 0xc9, 0x49, 0xf5, 0x63, 0x6d, 0x2d, 0xa7, 0x94, 0x1b,
	0x1e, 0xe4, 0x6c, 0x33, 0x5d, 0x67, 0x6a, 0x2b, 0x11, 0x17, 0x98, 0xa5, 0xb1, 0x56, 0x36, 0x2d,
	0x7f, 0xc8, 0xe0, 0x3b, 0x3f, 0x44, 0xce, 0x71, 0x7c, 0x53, 0x3b, 0xfb, 0xc9, 0x95, 0x44, 0xed,
	0xec, 0xaf, 0xc0, 0x47, 0x1e, 0x60, 0xc4, 0x5a, 0x3b, 0xb6, 0x49, 0x62, 0xc9, 0x7c, 0x27, 0x43,
	0x4b, 0xe3, 0x59, 0xb8, 0x11, 0x93, 0x4f, 0xc0, 0x29, 0x8d, 0x98, 0x7c, 0x52, 0x06, 0xf7, 0xde,
	0xce, 0x0b, 0xd7, 0x35, 0x13, 0xfa, 0xdc, 0x06, 0x0e, 0xd8, 0xfd, 0xfd, 0x65, 0xb0, 0xf4, 0xb5,
	0x32, 0x3d, 0x41, 0xd4, 0x31, 0x19, 0xcc, 0x58, 0x93, 0xce, 0xb9, 0x60, 0x91, 0xd2, 0xff, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc3, 0xb2, 0x9d, 0xbf, 0x29, 0x00, 0x00,
}
