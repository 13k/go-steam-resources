// Code generated by protoc-gen-go.
// source: dota_gcmessages_client_fantasy.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ETournamentGameState int32

const (
	ETournamentGameState_k_ETournamentGameState_Unknown                ETournamentGameState = 0
	ETournamentGameState_k_ETournamentGameState_Scheduled              ETournamentGameState = 1
	ETournamentGameState_k_ETournamentGameState_WaitingForLobbyToStart ETournamentGameState = 2
	ETournamentGameState_k_ETournamentGameState_Active                 ETournamentGameState = 3
	ETournamentGameState_k_ETournamentGameState_DireVictory            ETournamentGameState = 4
	ETournamentGameState_k_ETournamentGameState_RadVictory             ETournamentGameState = 5
	ETournamentGameState_k_ETournamentGameState_Canceled               ETournamentGameState = 6
	ETournamentGameState_k_ETournamentTeamState_NotNeeded              ETournamentGameState = 7
)

var ETournamentGameState_name = map[int32]string{
	0: "k_ETournamentGameState_Unknown",
	1: "k_ETournamentGameState_Scheduled",
	2: "k_ETournamentGameState_WaitingForLobbyToStart",
	3: "k_ETournamentGameState_Active",
	4: "k_ETournamentGameState_DireVictory",
	5: "k_ETournamentGameState_RadVictory",
	6: "k_ETournamentGameState_Canceled",
	7: "k_ETournamentTeamState_NotNeeded",
}
var ETournamentGameState_value = map[string]int32{
	"k_ETournamentGameState_Unknown":                0,
	"k_ETournamentGameState_Scheduled":              1,
	"k_ETournamentGameState_WaitingForLobbyToStart": 2,
	"k_ETournamentGameState_Active":                 3,
	"k_ETournamentGameState_DireVictory":            4,
	"k_ETournamentGameState_RadVictory":             5,
	"k_ETournamentGameState_Canceled":               6,
	"k_ETournamentTeamState_NotNeeded":              7,
}

func (x ETournamentGameState) Enum() *ETournamentGameState {
	p := new(ETournamentGameState)
	*p = x
	return p
}
func (x ETournamentGameState) String() string {
	return proto.EnumName(ETournamentGameState_name, int32(x))
}
func (x *ETournamentGameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentGameState_value, data, "ETournamentGameState")
	if err != nil {
		return err
	}
	*x = ETournamentGameState(value)
	return nil
}

type ETournamentTeamState int32

const (
	ETournamentTeamState_k_ETournamentTeamState_Unknown      ETournamentTeamState = 0
	ETournamentTeamState_k_ETournamentTeamState_Node1        ETournamentTeamState = 1
	ETournamentTeamState_k_ETournamentTeamState_NodeMax      ETournamentTeamState = 1024
	ETournamentTeamState_k_ETournamentTeamState_Eliminated   ETournamentTeamState = 14003
	ETournamentTeamState_k_ETournamentTeamState_Forfeited    ETournamentTeamState = 14004
	ETournamentTeamState_k_ETournamentTeamState_Finished1st  ETournamentTeamState = 15001
	ETournamentTeamState_k_ETournamentTeamState_Finished2nd  ETournamentTeamState = 15002
	ETournamentTeamState_k_ETournamentTeamState_Finished3rd  ETournamentTeamState = 15003
	ETournamentTeamState_k_ETournamentTeamState_Finished4th  ETournamentTeamState = 15004
	ETournamentTeamState_k_ETournamentTeamState_Finished5th  ETournamentTeamState = 15005
	ETournamentTeamState_k_ETournamentTeamState_Finished6th  ETournamentTeamState = 15006
	ETournamentTeamState_k_ETournamentTeamState_Finished7th  ETournamentTeamState = 15007
	ETournamentTeamState_k_ETournamentTeamState_Finished8th  ETournamentTeamState = 15008
	ETournamentTeamState_k_ETournamentTeamState_Finished9th  ETournamentTeamState = 15009
	ETournamentTeamState_k_ETournamentTeamState_Finished10th ETournamentTeamState = 15010
	ETournamentTeamState_k_ETournamentTeamState_Finished11th ETournamentTeamState = 15011
	ETournamentTeamState_k_ETournamentTeamState_Finished12th ETournamentTeamState = 15012
	ETournamentTeamState_k_ETournamentTeamState_Finished13th ETournamentTeamState = 15013
	ETournamentTeamState_k_ETournamentTeamState_Finished14th ETournamentTeamState = 15014
	ETournamentTeamState_k_ETournamentTeamState_Finished15th ETournamentTeamState = 15015
	ETournamentTeamState_k_ETournamentTeamState_Finished16th ETournamentTeamState = 15016
)

var ETournamentTeamState_name = map[int32]string{
	0:     "k_ETournamentTeamState_Unknown",
	1:     "k_ETournamentTeamState_Node1",
	1024:  "k_ETournamentTeamState_NodeMax",
	14003: "k_ETournamentTeamState_Eliminated",
	14004: "k_ETournamentTeamState_Forfeited",
	15001: "k_ETournamentTeamState_Finished1st",
	15002: "k_ETournamentTeamState_Finished2nd",
	15003: "k_ETournamentTeamState_Finished3rd",
	15004: "k_ETournamentTeamState_Finished4th",
	15005: "k_ETournamentTeamState_Finished5th",
	15006: "k_ETournamentTeamState_Finished6th",
	15007: "k_ETournamentTeamState_Finished7th",
	15008: "k_ETournamentTeamState_Finished8th",
	15009: "k_ETournamentTeamState_Finished9th",
	15010: "k_ETournamentTeamState_Finished10th",
	15011: "k_ETournamentTeamState_Finished11th",
	15012: "k_ETournamentTeamState_Finished12th",
	15013: "k_ETournamentTeamState_Finished13th",
	15014: "k_ETournamentTeamState_Finished14th",
	15015: "k_ETournamentTeamState_Finished15th",
	15016: "k_ETournamentTeamState_Finished16th",
}
var ETournamentTeamState_value = map[string]int32{
	"k_ETournamentTeamState_Unknown":      0,
	"k_ETournamentTeamState_Node1":        1,
	"k_ETournamentTeamState_NodeMax":      1024,
	"k_ETournamentTeamState_Eliminated":   14003,
	"k_ETournamentTeamState_Forfeited":    14004,
	"k_ETournamentTeamState_Finished1st":  15001,
	"k_ETournamentTeamState_Finished2nd":  15002,
	"k_ETournamentTeamState_Finished3rd":  15003,
	"k_ETournamentTeamState_Finished4th":  15004,
	"k_ETournamentTeamState_Finished5th":  15005,
	"k_ETournamentTeamState_Finished6th":  15006,
	"k_ETournamentTeamState_Finished7th":  15007,
	"k_ETournamentTeamState_Finished8th":  15008,
	"k_ETournamentTeamState_Finished9th":  15009,
	"k_ETournamentTeamState_Finished10th": 15010,
	"k_ETournamentTeamState_Finished11th": 15011,
	"k_ETournamentTeamState_Finished12th": 15012,
	"k_ETournamentTeamState_Finished13th": 15013,
	"k_ETournamentTeamState_Finished14th": 15014,
	"k_ETournamentTeamState_Finished15th": 15015,
	"k_ETournamentTeamState_Finished16th": 15016,
}

func (x ETournamentTeamState) Enum() *ETournamentTeamState {
	p := new(ETournamentTeamState)
	*p = x
	return p
}
func (x ETournamentTeamState) String() string {
	return proto.EnumName(ETournamentTeamState_name, int32(x))
}
func (x *ETournamentTeamState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentTeamState_value, data, "ETournamentTeamState")
	if err != nil {
		return err
	}
	*x = ETournamentTeamState(value)
	return nil
}

type ETournamentState int32

const (
	ETournamentState_k_ETournamentState_Unknown    ETournamentState = 0
	ETournamentState_k_ETournamentState_Setup      ETournamentState = 1
	ETournamentState_k_ETournamentState_Scheduled  ETournamentState = 2
	ETournamentState_k_ETournamentState_InProgress ETournamentState = 3
	ETournamentState_k_ETournamentState_Completed  ETournamentState = 4
	ETournamentState_k_ETournamentState_Canceled   ETournamentState = 5
)

var ETournamentState_name = map[int32]string{
	0: "k_ETournamentState_Unknown",
	1: "k_ETournamentState_Setup",
	2: "k_ETournamentState_Scheduled",
	3: "k_ETournamentState_InProgress",
	4: "k_ETournamentState_Completed",
	5: "k_ETournamentState_Canceled",
}
var ETournamentState_value = map[string]int32{
	"k_ETournamentState_Unknown":    0,
	"k_ETournamentState_Setup":      1,
	"k_ETournamentState_Scheduled":  2,
	"k_ETournamentState_InProgress": 3,
	"k_ETournamentState_Completed":  4,
	"k_ETournamentState_Canceled":   5,
}

func (x ETournamentState) Enum() *ETournamentState {
	p := new(ETournamentState)
	*p = x
	return p
}
func (x ETournamentState) String() string {
	return proto.EnumName(ETournamentState_name, int32(x))
}
func (x *ETournamentState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentState_value, data, "ETournamentState")
	if err != nil {
		return err
	}
	*x = ETournamentState(value)
	return nil
}

type ETournamentNodeState int32

const (
	ETournamentNodeState_k_ETournamentNodeState_Unknown             ETournamentNodeState = 0
	ETournamentNodeState_k_ETournamentNodeState_TeamsNotYetAssigned ETournamentNodeState = 1
	ETournamentNodeState_k_ETournamentNodeState_InBetweenGames      ETournamentNodeState = 2
	ETournamentNodeState_k_ETournamentNodeState_GameInProgress      ETournamentNodeState = 3
	ETournamentNodeState_k_ETournamentNodeState_A_Won               ETournamentNodeState = 4
	ETournamentNodeState_k_ETournamentNodeState_B_Won               ETournamentNodeState = 5
	ETournamentNodeState_k_ETournamentNodeState_Canceled            ETournamentNodeState = 6
)

var ETournamentNodeState_name = map[int32]string{
	0: "k_ETournamentNodeState_Unknown",
	1: "k_ETournamentNodeState_TeamsNotYetAssigned",
	2: "k_ETournamentNodeState_InBetweenGames",
	3: "k_ETournamentNodeState_GameInProgress",
	4: "k_ETournamentNodeState_A_Won",
	5: "k_ETournamentNodeState_B_Won",
	6: "k_ETournamentNodeState_Canceled",
}
var ETournamentNodeState_value = map[string]int32{
	"k_ETournamentNodeState_Unknown":             0,
	"k_ETournamentNodeState_TeamsNotYetAssigned": 1,
	"k_ETournamentNodeState_InBetweenGames":      2,
	"k_ETournamentNodeState_GameInProgress":      3,
	"k_ETournamentNodeState_A_Won":               4,
	"k_ETournamentNodeState_B_Won":               5,
	"k_ETournamentNodeState_Canceled":            6,
}

func (x ETournamentNodeState) Enum() *ETournamentNodeState {
	p := new(ETournamentNodeState)
	*p = x
	return p
}
func (x ETournamentNodeState) String() string {
	return proto.EnumName(ETournamentNodeState_name, int32(x))
}
func (x *ETournamentNodeState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentNodeState_value, data, "ETournamentNodeState")
	if err != nil {
		return err
	}
	*x = ETournamentNodeState(value)
	return nil
}

type DOTA_2013PassportSelectionIndices int32

const (
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0    DOTA_2013PassportSelectionIndices = 0
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_1    DOTA_2013PassportSelectionIndices = 1
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_2    DOTA_2013PassportSelectionIndices = 2
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_3    DOTA_2013PassportSelectionIndices = 3
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_4    DOTA_2013PassportSelectionIndices = 4
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_5    DOTA_2013PassportSelectionIndices = 5
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_6    DOTA_2013PassportSelectionIndices = 6
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_7    DOTA_2013PassportSelectionIndices = 7
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_8    DOTA_2013PassportSelectionIndices = 8
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_9    DOTA_2013PassportSelectionIndices = 9
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_0     DOTA_2013PassportSelectionIndices = 10
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_1     DOTA_2013PassportSelectionIndices = 11
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_2     DOTA_2013PassportSelectionIndices = 12
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_3     DOTA_2013PassportSelectionIndices = 13
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_4     DOTA_2013PassportSelectionIndices = 14
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_5     DOTA_2013PassportSelectionIndices = 15
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_6     DOTA_2013PassportSelectionIndices = 16
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_7     DOTA_2013PassportSelectionIndices = 17
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_8     DOTA_2013PassportSelectionIndices = 18
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_9     DOTA_2013PassportSelectionIndices = 19
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_10    DOTA_2013PassportSelectionIndices = 20
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_11    DOTA_2013PassportSelectionIndices = 21
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_12    DOTA_2013PassportSelectionIndices = 22
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_13    DOTA_2013PassportSelectionIndices = 23
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_14    DOTA_2013PassportSelectionIndices = 24
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_0     DOTA_2013PassportSelectionIndices = 25
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_1     DOTA_2013PassportSelectionIndices = 26
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_2     DOTA_2013PassportSelectionIndices = 27
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_3     DOTA_2013PassportSelectionIndices = 28
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_4     DOTA_2013PassportSelectionIndices = 29
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_5     DOTA_2013PassportSelectionIndices = 30
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_6     DOTA_2013PassportSelectionIndices = 31
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_7     DOTA_2013PassportSelectionIndices = 32
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_8     DOTA_2013PassportSelectionIndices = 33
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_9     DOTA_2013PassportSelectionIndices = 34
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_10    DOTA_2013PassportSelectionIndices = 35
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_11    DOTA_2013PassportSelectionIndices = 36
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_12    DOTA_2013PassportSelectionIndices = 37
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_13    DOTA_2013PassportSelectionIndices = 38
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_14    DOTA_2013PassportSelectionIndices = 39
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM        DOTA_2013PassportSelectionIndices = 40
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER      DOTA_2013PassportSelectionIndices = 41
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM_LOCK   DOTA_2013PassportSelectionIndices = 42
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER_LOCK DOTA_2013PassportSelectionIndices = 43
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_0         DOTA_2013PassportSelectionIndices = 44
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_1         DOTA_2013PassportSelectionIndices = 45
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_2         DOTA_2013PassportSelectionIndices = 46
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_3         DOTA_2013PassportSelectionIndices = 47
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_4         DOTA_2013PassportSelectionIndices = 48
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_5         DOTA_2013PassportSelectionIndices = 49
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_6         DOTA_2013PassportSelectionIndices = 50
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_7         DOTA_2013PassportSelectionIndices = 51
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_8         DOTA_2013PassportSelectionIndices = 52
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_9         DOTA_2013PassportSelectionIndices = 53
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_10        DOTA_2013PassportSelectionIndices = 54
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_11        DOTA_2013PassportSelectionIndices = 55
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_12        DOTA_2013PassportSelectionIndices = 56
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_13        DOTA_2013PassportSelectionIndices = 57
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_14        DOTA_2013PassportSelectionIndices = 58
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_15        DOTA_2013PassportSelectionIndices = 59
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_16        DOTA_2013PassportSelectionIndices = 60
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_17        DOTA_2013PassportSelectionIndices = 61
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_18        DOTA_2013PassportSelectionIndices = 62
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_19        DOTA_2013PassportSelectionIndices = 63
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_20        DOTA_2013PassportSelectionIndices = 64
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_21        DOTA_2013PassportSelectionIndices = 65
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_22        DOTA_2013PassportSelectionIndices = 66
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_23        DOTA_2013PassportSelectionIndices = 67
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_24        DOTA_2013PassportSelectionIndices = 68
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_25        DOTA_2013PassportSelectionIndices = 69
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_26        DOTA_2013PassportSelectionIndices = 70
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_27        DOTA_2013PassportSelectionIndices = 71
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_28        DOTA_2013PassportSelectionIndices = 72
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_29        DOTA_2013PassportSelectionIndices = 73
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_30        DOTA_2013PassportSelectionIndices = 74
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_31        DOTA_2013PassportSelectionIndices = 75
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_32        DOTA_2013PassportSelectionIndices = 76
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_33        DOTA_2013PassportSelectionIndices = 77
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_34        DOTA_2013PassportSelectionIndices = 78
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_35        DOTA_2013PassportSelectionIndices = 79
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_36        DOTA_2013PassportSelectionIndices = 80
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_37        DOTA_2013PassportSelectionIndices = 81
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_38        DOTA_2013PassportSelectionIndices = 82
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_39        DOTA_2013PassportSelectionIndices = 83
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_40        DOTA_2013PassportSelectionIndices = 84
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_41        DOTA_2013PassportSelectionIndices = 85
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_42        DOTA_2013PassportSelectionIndices = 86
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_43        DOTA_2013PassportSelectionIndices = 87
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_0              DOTA_2013PassportSelectionIndices = 88
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_1              DOTA_2013PassportSelectionIndices = 89
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_2              DOTA_2013PassportSelectionIndices = 90
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_3              DOTA_2013PassportSelectionIndices = 91
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_4              DOTA_2013PassportSelectionIndices = 92
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_5              DOTA_2013PassportSelectionIndices = 93
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_6              DOTA_2013PassportSelectionIndices = 94
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_7              DOTA_2013PassportSelectionIndices = 95
)

var DOTA_2013PassportSelectionIndices_name = map[int32]string{
	0:  "PP13_SEL_ALLSTAR_PLAYER_0",
	1:  "PP13_SEL_ALLSTAR_PLAYER_1",
	2:  "PP13_SEL_ALLSTAR_PLAYER_2",
	3:  "PP13_SEL_ALLSTAR_PLAYER_3",
	4:  "PP13_SEL_ALLSTAR_PLAYER_4",
	5:  "PP13_SEL_ALLSTAR_PLAYER_5",
	6:  "PP13_SEL_ALLSTAR_PLAYER_6",
	7:  "PP13_SEL_ALLSTAR_PLAYER_7",
	8:  "PP13_SEL_ALLSTAR_PLAYER_8",
	9:  "PP13_SEL_ALLSTAR_PLAYER_9",
	10: "PP13_SEL_QUALPRED_WEST_0",
	11: "PP13_SEL_QUALPRED_WEST_1",
	12: "PP13_SEL_QUALPRED_WEST_2",
	13: "PP13_SEL_QUALPRED_WEST_3",
	14: "PP13_SEL_QUALPRED_WEST_4",
	15: "PP13_SEL_QUALPRED_WEST_5",
	16: "PP13_SEL_QUALPRED_WEST_6",
	17: "PP13_SEL_QUALPRED_WEST_7",
	18: "PP13_SEL_QUALPRED_WEST_8",
	19: "PP13_SEL_QUALPRED_WEST_9",
	20: "PP13_SEL_QUALPRED_WEST_10",
	21: "PP13_SEL_QUALPRED_WEST_11",
	22: "PP13_SEL_QUALPRED_WEST_12",
	23: "PP13_SEL_QUALPRED_WEST_13",
	24: "PP13_SEL_QUALPRED_WEST_14",
	25: "PP13_SEL_QUALPRED_EAST_0",
	26: "PP13_SEL_QUALPRED_EAST_1",
	27: "PP13_SEL_QUALPRED_EAST_2",
	28: "PP13_SEL_QUALPRED_EAST_3",
	29: "PP13_SEL_QUALPRED_EAST_4",
	30: "PP13_SEL_QUALPRED_EAST_5",
	31: "PP13_SEL_QUALPRED_EAST_6",
	32: "PP13_SEL_QUALPRED_EAST_7",
	33: "PP13_SEL_QUALPRED_EAST_8",
	34: "PP13_SEL_QUALPRED_EAST_9",
	35: "PP13_SEL_QUALPRED_EAST_10",
	36: "PP13_SEL_QUALPRED_EAST_11",
	37: "PP13_SEL_QUALPRED_EAST_12",
	38: "PP13_SEL_QUALPRED_EAST_13",
	39: "PP13_SEL_QUALPRED_EAST_14",
	40: "PP13_SEL_TEAMCUP_TEAM",
	41: "PP13_SEL_TEAMCUP_PLAYER",
	42: "PP13_SEL_TEAMCUP_TEAM_LOCK",
	43: "PP13_SEL_TEAMCUP_PLAYER_LOCK",
	44: "PP13_SEL_EVENTPRED_0",
	45: "PP13_SEL_EVENTPRED_1",
	46: "PP13_SEL_EVENTPRED_2",
	47: "PP13_SEL_EVENTPRED_3",
	48: "PP13_SEL_EVENTPRED_4",
	49: "PP13_SEL_EVENTPRED_5",
	50: "PP13_SEL_EVENTPRED_6",
	51: "PP13_SEL_EVENTPRED_7",
	52: "PP13_SEL_EVENTPRED_8",
	53: "PP13_SEL_EVENTPRED_9",
	54: "PP13_SEL_EVENTPRED_10",
	55: "PP13_SEL_EVENTPRED_11",
	56: "PP13_SEL_EVENTPRED_12",
	57: "PP13_SEL_EVENTPRED_13",
	58: "PP13_SEL_EVENTPRED_14",
	59: "PP13_SEL_EVENTPRED_15",
	60: "PP13_SEL_EVENTPRED_16",
	61: "PP13_SEL_EVENTPRED_17",
	62: "PP13_SEL_EVENTPRED_18",
	63: "PP13_SEL_EVENTPRED_19",
	64: "PP13_SEL_EVENTPRED_20",
	65: "PP13_SEL_EVENTPRED_21",
	66: "PP13_SEL_EVENTPRED_22",
	67: "PP13_SEL_EVENTPRED_23",
	68: "PP13_SEL_EVENTPRED_24",
	69: "PP13_SEL_EVENTPRED_25",
	70: "PP13_SEL_EVENTPRED_26",
	71: "PP13_SEL_EVENTPRED_27",
	72: "PP13_SEL_EVENTPRED_28",
	73: "PP13_SEL_EVENTPRED_29",
	74: "PP13_SEL_EVENTPRED_30",
	75: "PP13_SEL_EVENTPRED_31",
	76: "PP13_SEL_EVENTPRED_32",
	77: "PP13_SEL_EVENTPRED_33",
	78: "PP13_SEL_EVENTPRED_34",
	79: "PP13_SEL_EVENTPRED_35",
	80: "PP13_SEL_EVENTPRED_36",
	81: "PP13_SEL_EVENTPRED_37",
	82: "PP13_SEL_EVENTPRED_38",
	83: "PP13_SEL_EVENTPRED_39",
	84: "PP13_SEL_EVENTPRED_40",
	85: "PP13_SEL_EVENTPRED_41",
	86: "PP13_SEL_EVENTPRED_42",
	87: "PP13_SEL_EVENTPRED_43",
	88: "PP13_SEL_SOLO_0",
	89: "PP13_SEL_SOLO_1",
	90: "PP13_SEL_SOLO_2",
	91: "PP13_SEL_SOLO_3",
	92: "PP13_SEL_SOLO_4",
	93: "PP13_SEL_SOLO_5",
	94: "PP13_SEL_SOLO_6",
	95: "PP13_SEL_SOLO_7",
}
var DOTA_2013PassportSelectionIndices_value = map[string]int32{
	"PP13_SEL_ALLSTAR_PLAYER_0":    0,
	"PP13_SEL_ALLSTAR_PLAYER_1":    1,
	"PP13_SEL_ALLSTAR_PLAYER_2":    2,
	"PP13_SEL_ALLSTAR_PLAYER_3":    3,
	"PP13_SEL_ALLSTAR_PLAYER_4":    4,
	"PP13_SEL_ALLSTAR_PLAYER_5":    5,
	"PP13_SEL_ALLSTAR_PLAYER_6":    6,
	"PP13_SEL_ALLSTAR_PLAYER_7":    7,
	"PP13_SEL_ALLSTAR_PLAYER_8":    8,
	"PP13_SEL_ALLSTAR_PLAYER_9":    9,
	"PP13_SEL_QUALPRED_WEST_0":     10,
	"PP13_SEL_QUALPRED_WEST_1":     11,
	"PP13_SEL_QUALPRED_WEST_2":     12,
	"PP13_SEL_QUALPRED_WEST_3":     13,
	"PP13_SEL_QUALPRED_WEST_4":     14,
	"PP13_SEL_QUALPRED_WEST_5":     15,
	"PP13_SEL_QUALPRED_WEST_6":     16,
	"PP13_SEL_QUALPRED_WEST_7":     17,
	"PP13_SEL_QUALPRED_WEST_8":     18,
	"PP13_SEL_QUALPRED_WEST_9":     19,
	"PP13_SEL_QUALPRED_WEST_10":    20,
	"PP13_SEL_QUALPRED_WEST_11":    21,
	"PP13_SEL_QUALPRED_WEST_12":    22,
	"PP13_SEL_QUALPRED_WEST_13":    23,
	"PP13_SEL_QUALPRED_WEST_14":    24,
	"PP13_SEL_QUALPRED_EAST_0":     25,
	"PP13_SEL_QUALPRED_EAST_1":     26,
	"PP13_SEL_QUALPRED_EAST_2":     27,
	"PP13_SEL_QUALPRED_EAST_3":     28,
	"PP13_SEL_QUALPRED_EAST_4":     29,
	"PP13_SEL_QUALPRED_EAST_5":     30,
	"PP13_SEL_QUALPRED_EAST_6":     31,
	"PP13_SEL_QUALPRED_EAST_7":     32,
	"PP13_SEL_QUALPRED_EAST_8":     33,
	"PP13_SEL_QUALPRED_EAST_9":     34,
	"PP13_SEL_QUALPRED_EAST_10":    35,
	"PP13_SEL_QUALPRED_EAST_11":    36,
	"PP13_SEL_QUALPRED_EAST_12":    37,
	"PP13_SEL_QUALPRED_EAST_13":    38,
	"PP13_SEL_QUALPRED_EAST_14":    39,
	"PP13_SEL_TEAMCUP_TEAM":        40,
	"PP13_SEL_TEAMCUP_PLAYER":      41,
	"PP13_SEL_TEAMCUP_TEAM_LOCK":   42,
	"PP13_SEL_TEAMCUP_PLAYER_LOCK": 43,
	"PP13_SEL_EVENTPRED_0":         44,
	"PP13_SEL_EVENTPRED_1":         45,
	"PP13_SEL_EVENTPRED_2":         46,
	"PP13_SEL_EVENTPRED_3":         47,
	"PP13_SEL_EVENTPRED_4":         48,
	"PP13_SEL_EVENTPRED_5":         49,
	"PP13_SEL_EVENTPRED_6":         50,
	"PP13_SEL_EVENTPRED_7":         51,
	"PP13_SEL_EVENTPRED_8":         52,
	"PP13_SEL_EVENTPRED_9":         53,
	"PP13_SEL_EVENTPRED_10":        54,
	"PP13_SEL_EVENTPRED_11":        55,
	"PP13_SEL_EVENTPRED_12":        56,
	"PP13_SEL_EVENTPRED_13":        57,
	"PP13_SEL_EVENTPRED_14":        58,
	"PP13_SEL_EVENTPRED_15":        59,
	"PP13_SEL_EVENTPRED_16":        60,
	"PP13_SEL_EVENTPRED_17":        61,
	"PP13_SEL_EVENTPRED_18":        62,
	"PP13_SEL_EVENTPRED_19":        63,
	"PP13_SEL_EVENTPRED_20":        64,
	"PP13_SEL_EVENTPRED_21":        65,
	"PP13_SEL_EVENTPRED_22":        66,
	"PP13_SEL_EVENTPRED_23":        67,
	"PP13_SEL_EVENTPRED_24":        68,
	"PP13_SEL_EVENTPRED_25":        69,
	"PP13_SEL_EVENTPRED_26":        70,
	"PP13_SEL_EVENTPRED_27":        71,
	"PP13_SEL_EVENTPRED_28":        72,
	"PP13_SEL_EVENTPRED_29":        73,
	"PP13_SEL_EVENTPRED_30":        74,
	"PP13_SEL_EVENTPRED_31":        75,
	"PP13_SEL_EVENTPRED_32":        76,
	"PP13_SEL_EVENTPRED_33":        77,
	"PP13_SEL_EVENTPRED_34":        78,
	"PP13_SEL_EVENTPRED_35":        79,
	"PP13_SEL_EVENTPRED_36":        80,
	"PP13_SEL_EVENTPRED_37":        81,
	"PP13_SEL_EVENTPRED_38":        82,
	"PP13_SEL_EVENTPRED_39":        83,
	"PP13_SEL_EVENTPRED_40":        84,
	"PP13_SEL_EVENTPRED_41":        85,
	"PP13_SEL_EVENTPRED_42":        86,
	"PP13_SEL_EVENTPRED_43":        87,
	"PP13_SEL_SOLO_0":              88,
	"PP13_SEL_SOLO_1":              89,
	"PP13_SEL_SOLO_2":              90,
	"PP13_SEL_SOLO_3":              91,
	"PP13_SEL_SOLO_4":              92,
	"PP13_SEL_SOLO_5":              93,
	"PP13_SEL_SOLO_6":              94,
	"PP13_SEL_SOLO_7":              95,
}

func (x DOTA_2013PassportSelectionIndices) Enum() *DOTA_2013PassportSelectionIndices {
	p := new(DOTA_2013PassportSelectionIndices)
	*p = x
	return p
}
func (x DOTA_2013PassportSelectionIndices) String() string {
	return proto.EnumName(DOTA_2013PassportSelectionIndices_name, int32(x))
}
func (x *DOTA_2013PassportSelectionIndices) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_2013PassportSelectionIndices_value, data, "DOTA_2013PassportSelectionIndices")
	if err != nil {
		return err
	}
	*x = DOTA_2013PassportSelectionIndices(value)
	return nil
}

type CMsgDOTACreateFantasyLeagueResponse_EResult int32

const (
	CMsgDOTACreateFantasyLeagueResponse_SUCCESS                  CMsgDOTACreateFantasyLeagueResponse_EResult = 0
	CMsgDOTACreateFantasyLeagueResponse_ERROR_UNSPECIFIED        CMsgDOTACreateFantasyLeagueResponse_EResult = 1
	CMsgDOTACreateFantasyLeagueResponse_ERROR_TOO_MANY_LEAGUES   CMsgDOTACreateFantasyLeagueResponse_EResult = 2
	CMsgDOTACreateFantasyLeagueResponse_ERROR_INVALID_TEAM_COUNT CMsgDOTACreateFantasyLeagueResponse_EResult = 3
	CMsgDOTACreateFantasyLeagueResponse_ERROR_CREATION_DISABLED  CMsgDOTACreateFantasyLeagueResponse_EResult = 4
)

var CMsgDOTACreateFantasyLeagueResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_TOO_MANY_LEAGUES",
	3: "ERROR_INVALID_TEAM_COUNT",
	4: "ERROR_CREATION_DISABLED",
}
var CMsgDOTACreateFantasyLeagueResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_UNSPECIFIED":        1,
	"ERROR_TOO_MANY_LEAGUES":   2,
	"ERROR_INVALID_TEAM_COUNT": 3,
	"ERROR_CREATION_DISABLED":  4,
}

func (x CMsgDOTACreateFantasyLeagueResponse_EResult) Enum() *CMsgDOTACreateFantasyLeagueResponse_EResult {
	p := new(CMsgDOTACreateFantasyLeagueResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTACreateFantasyLeagueResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTACreateFantasyLeagueResponse_EResult_name, int32(x))
}
func (x *CMsgDOTACreateFantasyLeagueResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTACreateFantasyLeagueResponse_EResult_value, data, "CMsgDOTACreateFantasyLeagueResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTACreateFantasyLeagueResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 2
)

var CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInfoResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueEditInfoResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value, data, "CMsgDOTAFantasyLeagueEditInfoResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInfoResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueFindResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueFindResponse_SUCCESS                CMsgDOTAFantasyLeagueFindResponse_EResult = 0
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeagueFindResponse_EResult = 1
	CMsgDOTAFantasyLeagueFindResponse_ERROR_BAD_PASSWORD     CMsgDOTAFantasyLeagueFindResponse_EResult = 2
	CMsgDOTAFantasyLeagueFindResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeagueFindResponse_EResult = 3
	CMsgDOTAFantasyLeagueFindResponse_ERROR_FULL             CMsgDOTAFantasyLeagueFindResponse_EResult = 4
	CMsgDOTAFantasyLeagueFindResponse_ERROR_ALREADY_MEMBER   CMsgDOTAFantasyLeagueFindResponse_EResult = 5
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_LOCKED    CMsgDOTAFantasyLeagueFindResponse_EResult = 6
)

var CMsgDOTAFantasyLeagueFindResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_LEAGUE_NOT_FOUND",
	2: "ERROR_BAD_PASSWORD",
	3: "ERROR_UNSPECIFIED",
	4: "ERROR_FULL",
	5: "ERROR_ALREADY_MEMBER",
	6: "ERROR_LEAGUE_LOCKED",
}
var CMsgDOTAFantasyLeagueFindResponse_EResult_value = map[string]int32{
	"SUCCESS":                0,
	"ERROR_LEAGUE_NOT_FOUND": 1,
	"ERROR_BAD_PASSWORD":     2,
	"ERROR_UNSPECIFIED":      3,
	"ERROR_FULL":             4,
	"ERROR_ALREADY_MEMBER":   5,
	"ERROR_LEAGUE_LOCKED":    6,
}

func (x CMsgDOTAFantasyLeagueFindResponse_EResult) Enum() *CMsgDOTAFantasyLeagueFindResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueFindResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueFindResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueFindResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueFindResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueFindResponse_EResult_value, data, "CMsgDOTAFantasyLeagueFindResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueFindResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueInfoResponse_EResult = 2
)

var CMsgDOTAFantasyLeagueInfoResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_BAD_LEAGUE_ID",
}
var CMsgDOTAFantasyLeagueInfoResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_BAD_LEAGUE_ID": 2,
}

func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueInfoResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueInfoResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueInfoResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueInfoResponse_EResult_value, data, "CMsgDOTAFantasyLeagueInfoResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueInfoResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueMatchupsResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS             CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 0
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 1
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 2
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 3
)

var CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_BAD_LEAGUE_ID",
	3: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_BAD_LEAGUE_ID": 2,
	"ERROR_NO_PERMISSION": 3,
}

func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Enum() *CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueMatchupsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueMatchupsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value, data, "CMsgDOTAFantasyLeagueMatchupsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueMatchupsResponse_EResult(value)
	return nil
}

type CMsgDOTAEditFantasyTeamResponse_EResult int32

const (
	CMsgDOTAEditFantasyTeamResponse_SUCCESS                  CMsgDOTAEditFantasyTeamResponse_EResult = 0
	CMsgDOTAEditFantasyTeamResponse_ERROR_UNSPECIFIED        CMsgDOTAEditFantasyTeamResponse_EResult = 1
	CMsgDOTAEditFantasyTeamResponse_ERROR_INVALID_TEAM_INFO  CMsgDOTAEditFantasyTeamResponse_EResult = 2
	CMsgDOTAEditFantasyTeamResponse_ERROR_NAME_ALREADY_TAKEN CMsgDOTAEditFantasyTeamResponse_EResult = 3
	CMsgDOTAEditFantasyTeamResponse_ERROR_NO_PERMISSION      CMsgDOTAEditFantasyTeamResponse_EResult = 4
)

var CMsgDOTAEditFantasyTeamResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_TEAM_INFO",
	3: "ERROR_NAME_ALREADY_TAKEN",
	4: "ERROR_NO_PERMISSION",
}
var CMsgDOTAEditFantasyTeamResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_UNSPECIFIED":        1,
	"ERROR_INVALID_TEAM_INFO":  2,
	"ERROR_NAME_ALREADY_TAKEN": 3,
	"ERROR_NO_PERMISSION":      4,
}

func (x CMsgDOTAEditFantasyTeamResponse_EResult) Enum() *CMsgDOTAEditFantasyTeamResponse_EResult {
	p := new(CMsgDOTAEditFantasyTeamResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAEditFantasyTeamResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAEditFantasyTeamResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAEditFantasyTeamResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAEditFantasyTeamResponse_EResult_value, data, "CMsgDOTAEditFantasyTeamResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAEditFantasyTeamResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamScoreResponse_EResult int32

const (
	CMsgDOTAFantasyTeamScoreResponse_SUCCESS                   CMsgDOTAFantasyTeamScoreResponse_EResult = 0
	CMsgDOTAFantasyTeamScoreResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamScoreResponse_EResult = 1
	CMsgDOTAFantasyTeamScoreResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamScoreResponse_EResult = 2
	CMsgDOTAFantasyTeamScoreResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamScoreResponse_EResult = 3
)

var CMsgDOTAFantasyTeamScoreResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_OWNER_NOT_IN_LEAGUE",
}
var CMsgDOTAFantasyTeamScoreResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_NO_PERMISSION":       2,
	"ERROR_OWNER_NOT_IN_LEAGUE": 3,
}

func (x CMsgDOTAFantasyTeamScoreResponse_EResult) Enum() *CMsgDOTAFantasyTeamScoreResponse_EResult {
	p := new(CMsgDOTAFantasyTeamScoreResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamScoreResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamScoreResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamScoreResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamScoreResponse_EResult_value, data, "CMsgDOTAFantasyTeamScoreResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamScoreResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyTeamStandingsResponse_SUCCESS             CMsgDOTAFantasyTeamStandingsResponse_EResult = 0
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamStandingsResponse_EResult = 1
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamStandingsResponse_EResult = 2
)

var CMsgDOTAFantasyTeamStandingsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyTeamStandingsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) Enum() *CMsgDOTAFantasyTeamStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyTeamStandingsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamStandingsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamStandingsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamStandingsResponse_EResult_value, data, "CMsgDOTAFantasyTeamStandingsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamStandingsResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyPlayerScoreResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreResponse_SUCCESS             CMsgDOTAFantasyPlayerScoreResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerScoreResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerScoreResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerScoreResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerScoreResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerScoreResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerScoreResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerScoreResponse_EResult_value, data, "CMsgDOTAFantasyPlayerScoreResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyPlayerStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS             CMsgDOTAFantasyPlayerStandingsResponse_EResult = 0
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerStandingsResponse_EResult = 1
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerStandingsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerStandingsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerStandingsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerStandingsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerStandingsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerStandingsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerStandingsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerStandingsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerStandingsResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueCreateResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueCreateResponse_SUCCESS                  CMsgDOTAFantasyLeagueCreateResponse_EResult = 0
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_PERMISSION      CMsgDOTAFantasyLeagueCreateResponse_EResult = 1
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_SEASON_ID      CMsgDOTAFantasyLeagueCreateResponse_EResult = 2
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_LEAGUE_NAME    CMsgDOTAFantasyLeagueCreateResponse_EResult = 3
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_TEAM_NAME      CMsgDOTAFantasyLeagueCreateResponse_EResult = 4
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_UNSPECIFIED        CMsgDOTAFantasyLeagueCreateResponse_EResult = 5
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_FAILED_LOGO_UPLOAD CMsgDOTAFantasyLeagueCreateResponse_EResult = 6
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_TICKET          CMsgDOTAFantasyLeagueCreateResponse_EResult = 7
)

var CMsgDOTAFantasyLeagueCreateResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_NO_PERMISSION",
	2: "ERROR_BAD_SEASON_ID",
	3: "ERROR_BAD_LEAGUE_NAME",
	4: "ERROR_BAD_TEAM_NAME",
	5: "ERROR_UNSPECIFIED",
	6: "ERROR_FAILED_LOGO_UPLOAD",
	7: "ERROR_NO_TICKET",
}
var CMsgDOTAFantasyLeagueCreateResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_NO_PERMISSION":      1,
	"ERROR_BAD_SEASON_ID":      2,
	"ERROR_BAD_LEAGUE_NAME":    3,
	"ERROR_BAD_TEAM_NAME":      4,
	"ERROR_UNSPECIFIED":        5,
	"ERROR_FAILED_LOGO_UPLOAD": 6,
	"ERROR_NO_TICKET":          7,
}

func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) Enum() *CMsgDOTAFantasyLeagueCreateResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueCreateResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueCreateResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueCreateResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueCreateResponse_EResult_value, data, "CMsgDOTAFantasyLeagueCreateResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueCreateResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamCreateResponse_EResult int32

const (
	CMsgDOTAFantasyTeamCreateResponse_SUCCESS                     CMsgDOTAFantasyTeamCreateResponse_EResult = 0
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_PERMISSION         CMsgDOTAFantasyTeamCreateResponse_EResult = 1
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FAILED_LOGO_UPLOAD    CMsgDOTAFantasyTeamCreateResponse_EResult = 2
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_FANTASY_LEAGUE_ID CMsgDOTAFantasyTeamCreateResponse_EResult = 3
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_NAME              CMsgDOTAFantasyTeamCreateResponse_EResult = 4
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FULL                  CMsgDOTAFantasyTeamCreateResponse_EResult = 5
	CMsgDOTAFantasyTeamCreateResponse_ERROR_ALREADY_MEMBER        CMsgDOTAFantasyTeamCreateResponse_EResult = 6
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_PASSWORD          CMsgDOTAFantasyTeamCreateResponse_EResult = 7
	CMsgDOTAFantasyTeamCreateResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamCreateResponse_EResult = 8
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_TICKET             CMsgDOTAFantasyTeamCreateResponse_EResult = 9
	CMsgDOTAFantasyTeamCreateResponse_ERROR_LEAGUE_LOCKED         CMsgDOTAFantasyTeamCreateResponse_EResult = 10
)

var CMsgDOTAFantasyTeamCreateResponse_EResult_name = map[int32]string{
	0:  "SUCCESS",
	1:  "ERROR_NO_PERMISSION",
	2:  "ERROR_FAILED_LOGO_UPLOAD",
	3:  "ERROR_BAD_FANTASY_LEAGUE_ID",
	4:  "ERROR_BAD_NAME",
	5:  "ERROR_FULL",
	6:  "ERROR_ALREADY_MEMBER",
	7:  "ERROR_BAD_PASSWORD",
	8:  "ERROR_UNSPECIFIED",
	9:  "ERROR_NO_TICKET",
	10: "ERROR_LEAGUE_LOCKED",
}
var CMsgDOTAFantasyTeamCreateResponse_EResult_value = map[string]int32{
	"SUCCESS":                     0,
	"ERROR_NO_PERMISSION":         1,
	"ERROR_FAILED_LOGO_UPLOAD":    2,
	"ERROR_BAD_FANTASY_LEAGUE_ID": 3,
	"ERROR_BAD_NAME":              4,
	"ERROR_FULL":                  5,
	"ERROR_ALREADY_MEMBER":        6,
	"ERROR_BAD_PASSWORD":          7,
	"ERROR_UNSPECIFIED":           8,
	"ERROR_NO_TICKET":             9,
	"ERROR_LEAGUE_LOCKED":         10,
}

func (x CMsgDOTAFantasyTeamCreateResponse_EResult) Enum() *CMsgDOTAFantasyTeamCreateResponse_EResult {
	p := new(CMsgDOTAFantasyTeamCreateResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamCreateResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamCreateResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamCreateResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamCreateResponse_EResult_value, data, "CMsgDOTAFantasyTeamCreateResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamCreateResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueEditInvitesResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS           CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInvitesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 1
)

var CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
}
var CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
}

func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value, data, "CMsgDOTAFantasyLeagueEditInvitesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS                           CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 0
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_UNSPECIFIED                 CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 1
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_INVALID_FANTASY_LEAGUE      CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 2
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_FANTASY_LEAGUE_NOT_DRAFTING CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 3
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_OWNER_NOT_IN_LEAGUE         CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 4
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_NOT_OWNERS_TURN             CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 5
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_INVALID              CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 6
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_UNAVAILABLE          CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 7
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_NO_VALID_SLOTS       CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 8
)

var CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_FANTASY_LEAGUE",
	3: "ERROR_FANTASY_LEAGUE_NOT_DRAFTING",
	4: "ERROR_OWNER_NOT_IN_LEAGUE",
	5: "ERROR_NOT_OWNERS_TURN",
	6: "ERROR_PLAYER_INVALID",
	7: "ERROR_PLAYER_UNAVAILABLE",
	8: "ERROR_PLAYER_NO_VALID_SLOTS",
}
var CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value = map[string]int32{
	"SUCCESS":                           0,
	"ERROR_UNSPECIFIED":                 1,
	"ERROR_INVALID_FANTASY_LEAGUE":      2,
	"ERROR_FANTASY_LEAGUE_NOT_DRAFTING": 3,
	"ERROR_OWNER_NOT_IN_LEAGUE":         4,
	"ERROR_NOT_OWNERS_TURN":             5,
	"ERROR_PLAYER_INVALID":              6,
	"ERROR_PLAYER_UNAVAILABLE":          7,
	"ERROR_PLAYER_NO_VALID_SLOTS":       8,
}

func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Enum() *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value, data, "CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamRosterSwapResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOTS_INVALID       CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOT_LOCKED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 4
)

var CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_OWNER_NOT_IN_LEAGUE",
	3: "ERROR_SLOTS_INVALID",
	4: "ERROR_SLOT_LOCKED",
}
var CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_OWNER_NOT_IN_LEAGUE": 2,
	"ERROR_SLOTS_INVALID":       3,
	"ERROR_SLOT_LOCKED":         4,
}

func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterSwapResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterSwapResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterSwapResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterSwapResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamRosterAddDropResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS                     CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_OWNER_NOT_IN_LEAGUE   CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_AVAILABLE  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_ON_TEAM    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 4
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_TRADE_ALREADY_PENDING CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 5
)

var CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_OWNER_NOT_IN_LEAGUE",
	3: "ERROR_PLAYER_NOT_AVAILABLE",
	4: "ERROR_PLAYER_NOT_ON_TEAM",
	5: "ERROR_TRADE_ALREADY_PENDING",
}
var CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value = map[string]int32{
	"SUCCESS":                     0,
	"ERROR_UNSPECIFIED":           1,
	"ERROR_OWNER_NOT_IN_LEAGUE":   2,
	"ERROR_PLAYER_NOT_AVAILABLE":  3,
	"ERROR_PLAYER_NOT_ON_TEAM":    4,
	"ERROR_TRADE_ALREADY_PENDING": 5,
}

func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterAddDropResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamTradesResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradesResponse_SUCCESS             CMsgDOTAFantasyTeamTradesResponse_EResult = 0
	CMsgDOTAFantasyTeamTradesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradesResponse_EResult = 1
	CMsgDOTAFantasyTeamTradesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradesResponse_EResult = 2
)

var CMsgDOTAFantasyTeamTradesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyTeamTradesResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyTeamTradesResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradesResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamTradesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamTradesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamTradesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamTradesResponse_EResult_value, data, "CMsgDOTAFantasyTeamTradesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradesResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamTradeCancelResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS             CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 0
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 1
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 2
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_TRADE      CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 3
)

var CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_NO_TRADE",
}
var CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
	"ERROR_NO_TRADE":      3,
}

func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradeCancelResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamTradeCancelResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value, data, "CMsgDOTAFantasyTeamTradeCancelResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradeCancelResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyTeamRosterResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamRosterResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterResponse_EResult = 3
)

var CMsgDOTAFantasyTeamRosterResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_OWNER_NOT_IN_LEAGUE",
}
var CMsgDOTAFantasyTeamRosterResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_NO_PERMISSION":       2,
	"ERROR_OWNER_NOT_IN_LEAGUE": 3,
}

func (x CMsgDOTAFantasyTeamRosterResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS             CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 0
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 1
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyMessagesResponse_EResult int32

const (
	CMsgDOTAFantasyMessagesResponse_SUCCESS             CMsgDOTAFantasyMessagesResponse_EResult = 0
	CMsgDOTAFantasyMessagesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyMessagesResponse_EResult = 1
	CMsgDOTAFantasyMessagesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyMessagesResponse_EResult = 2
)

var CMsgDOTAFantasyMessagesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyMessagesResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyMessagesResponse_EResult) Enum() *CMsgDOTAFantasyMessagesResponse_EResult {
	p := new(CMsgDOTAFantasyMessagesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyMessagesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyMessagesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyMessagesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyMessagesResponse_EResult_value, data, "CMsgDOTAFantasyMessagesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyMessagesResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyRemoveOwnerResponse_EResult int32

const (
	CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS             CMsgDOTAFantasyRemoveOwnerResponse_EResult = 0
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyRemoveOwnerResponse_EResult = 1
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyRemoveOwnerResponse_EResult = 2
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_LEAGUE_LOCKED CMsgDOTAFantasyRemoveOwnerResponse_EResult = 3
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NOT_A_MEMBER  CMsgDOTAFantasyRemoveOwnerResponse_EResult = 4
)

var CMsgDOTAFantasyRemoveOwnerResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_LEAGUE_LOCKED",
	4: "ERROR_NOT_A_MEMBER",
}
var CMsgDOTAFantasyRemoveOwnerResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
	"ERROR_LEAGUE_LOCKED": 3,
	"ERROR_NOT_A_MEMBER":  4,
}

func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) Enum() *CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	p := new(CMsgDOTAFantasyRemoveOwnerResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyRemoveOwnerResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyRemoveOwnerResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyRemoveOwnerResponse_EResult_value, data, "CMsgDOTAFantasyRemoveOwnerResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyRemoveOwnerResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyScheduledMatchesResponse_EResult int32

const (
	CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS           CMsgDOTAFantasyScheduledMatchesResponse_EResult = 0
	CMsgDOTAFantasyScheduledMatchesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyScheduledMatchesResponse_EResult = 1
)

var CMsgDOTAFantasyScheduledMatchesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
}
var CMsgDOTAFantasyScheduledMatchesResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
}

func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) Enum() *CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	p := new(CMsgDOTAFantasyScheduledMatchesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyScheduledMatchesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyScheduledMatchesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyScheduledMatchesResponse_EResult_value, data, "CMsgDOTAFantasyScheduledMatchesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyScheduledMatchesResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyLeaveLeagueResponse_EResult int32

const (
	CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS                CMsgDOTAFantasyLeaveLeagueResponse_EResult = 0
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeaveLeagueResponse_EResult = 1
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_NOT_MEMBER       CMsgDOTAFantasyLeaveLeagueResponse_EResult = 2
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeaveLeagueResponse_EResult = 3
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_DRAFT_ACTIVE     CMsgDOTAFantasyLeaveLeagueResponse_EResult = 4
)

var CMsgDOTAFantasyLeaveLeagueResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NOT_MEMBER",
	3: "ERROR_LEAGUE_NOT_FOUND",
	4: "ERROR_DRAFT_ACTIVE",
}
var CMsgDOTAFantasyLeaveLeagueResponse_EResult_value = map[string]int32{
	"SUCCESS":                0,
	"ERROR_UNSPECIFIED":      1,
	"ERROR_NOT_MEMBER":       2,
	"ERROR_LEAGUE_NOT_FOUND": 3,
	"ERROR_DRAFT_ACTIVE":     4,
}

func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) Enum() *CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	p := new(CMsgDOTAFantasyLeaveLeagueResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeaveLeagueResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeaveLeagueResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeaveLeagueResponse_EResult_value, data, "CMsgDOTAFantasyLeaveLeagueResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeaveLeagueResponse_EResult(value)
	return nil
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS           CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_NOT_MEMBER  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NOT_MEMBER",
}
var CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
	"ERROR_NOT_MEMBER":  2,
}

func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult(value)
	return nil
}

type CMsgGCPlayerInfo struct {
	PlayerInfos      []*CMsgGCPlayerInfo_PlayerInfo `protobuf:"bytes,1,rep,name=player_infos" json:"player_infos,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *CMsgGCPlayerInfo) Reset()         { *m = CMsgGCPlayerInfo{} }
func (m *CMsgGCPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgGCPlayerInfo) ProtoMessage()    {}

func (m *CMsgGCPlayerInfo) GetPlayerInfos() []*CMsgGCPlayerInfo_PlayerInfo {
	if m != nil {
		return m.PlayerInfos
	}
	return nil
}

type CMsgGCPlayerInfo_PlayerInfo struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode      *string `protobuf:"bytes,3,opt,name=country_code" json:"country_code,omitempty"`
	FantasyRole      *uint32 `protobuf:"varint,4,opt,name=fantasy_role" json:"fantasy_role,omitempty"`
	TeamId           *uint32 `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string `protobuf:"bytes,6,opt,name=team_name" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,7,opt,name=team_tag" json:"team_tag,omitempty"`
	Sponsor          *string `protobuf:"bytes,8,opt,name=sponsor" json:"sponsor,omitempty"`
	IsLocked         *bool   `protobuf:"varint,9,opt,name=is_locked" json:"is_locked,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgGCPlayerInfo_PlayerInfo) Reset()         { *m = CMsgGCPlayerInfo_PlayerInfo{} }
func (m *CMsgGCPlayerInfo_PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgGCPlayerInfo_PlayerInfo) ProtoMessage()    {}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetFantasyRole() uint32 {
	if m != nil && m.FantasyRole != nil {
		return *m.FantasyRole
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetSponsor() string {
	if m != nil && m.Sponsor != nil {
		return *m.Sponsor
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetIsLocked() bool {
	if m != nil && m.IsLocked != nil {
		return *m.IsLocked
	}
	return false
}

type CMsgDOTACreateFantasyLeagueRequest struct {
	LeagueName       *string                 `protobuf:"bytes,1,opt,name=league_name" json:"league_name,omitempty"`
	LeagueLogo       *uint64                 `protobuf:"varint,2,opt,name=league_logo" json:"league_logo,omitempty"`
	SelectionMode    *Fantasy_Selection_Mode `protobuf:"varint,3,opt,name=selection_mode,enum=Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount        *uint32                 `protobuf:"varint,4,opt,name=team_count" json:"team_count,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgDOTACreateFantasyLeagueRequest) Reset()         { *m = CMsgDOTACreateFantasyLeagueRequest{} }
func (m *CMsgDOTACreateFantasyLeagueRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTACreateFantasyLeagueRequest) ProtoMessage()    {}

const Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode Fantasy_Selection_Mode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID

func (m *CMsgDOTACreateFantasyLeagueRequest) GetLeagueName() string {
	if m != nil && m.LeagueName != nil {
		return *m.LeagueName
	}
	return ""
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetLeagueLogo() uint64 {
	if m != nil && m.LeagueLogo != nil {
		return *m.LeagueLogo
	}
	return 0
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetSelectionMode() Fantasy_Selection_Mode {
	if m != nil && m.SelectionMode != nil {
		return *m.SelectionMode
	}
	return Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetTeamCount() uint32 {
	if m != nil && m.TeamCount != nil {
		return *m.TeamCount
	}
	return 0
}

type CMsgDOTACreateFantasyLeagueResponse struct {
	Result           *CMsgDOTACreateFantasyLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTACreateFantasyLeagueResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTACreateFantasyLeagueResponse) Reset()         { *m = CMsgDOTACreateFantasyLeagueResponse{} }
func (m *CMsgDOTACreateFantasyLeagueResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTACreateFantasyLeagueResponse) ProtoMessage()    {}

const Default_CMsgDOTACreateFantasyLeagueResponse_Result CMsgDOTACreateFantasyLeagueResponse_EResult = CMsgDOTACreateFantasyLeagueResponse_SUCCESS

func (m *CMsgDOTACreateFantasyLeagueResponse) GetResult() CMsgDOTACreateFantasyLeagueResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTACreateFantasyLeagueResponse_Result
}

type CMsgFantasyLeagueScoring struct {
	Level                  *float32 `protobuf:"fixed32,1,opt,name=level" json:"level,omitempty"`
	Kills                  *float32 `protobuf:"fixed32,2,opt,name=kills" json:"kills,omitempty"`
	Deaths                 *float32 `protobuf:"fixed32,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists                *float32 `protobuf:"fixed32,4,opt,name=assists" json:"assists,omitempty"`
	LastHits               *float32 `protobuf:"fixed32,5,opt,name=last_hits" json:"last_hits,omitempty"`
	Denies                 *float32 `protobuf:"fixed32,6,opt,name=denies" json:"denies,omitempty"`
	Gpm                    *float32 `protobuf:"fixed32,7,opt,name=gpm" json:"gpm,omitempty"`
	Xppm                   *float32 `protobuf:"fixed32,8,opt,name=xppm" json:"xppm,omitempty"`
	Stuns                  *float32 `protobuf:"fixed32,9,opt,name=stuns" json:"stuns,omitempty"`
	Healing                *float32 `protobuf:"fixed32,10,opt,name=healing" json:"healing,omitempty"`
	TowerKills             *float32 `protobuf:"fixed32,11,opt,name=tower_kills" json:"tower_kills,omitempty"`
	RoshanKills            *float32 `protobuf:"fixed32,12,opt,name=roshan_kills" json:"roshan_kills,omitempty"`
	MultiplierPremium      *float32 `protobuf:"fixed32,13,opt,name=multiplier_premium" json:"multiplier_premium,omitempty"`
	MultiplierProfessional *float32 `protobuf:"fixed32,14,opt,name=multiplier_professional" json:"multiplier_professional,omitempty"`
	XXX_unrecognized       []byte   `json:"-"`
}

func (m *CMsgFantasyLeagueScoring) Reset()         { *m = CMsgFantasyLeagueScoring{} }
func (m *CMsgFantasyLeagueScoring) String() string { return proto.CompactTextString(m) }
func (*CMsgFantasyLeagueScoring) ProtoMessage()    {}

func (m *CMsgFantasyLeagueScoring) GetLevel() float32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetKills() float32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetDeaths() float32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetAssists() float32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetLastHits() float32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetDenies() float32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetGpm() float32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetXppm() float32 {
	if m != nil && m.Xppm != nil {
		return *m.Xppm
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetStuns() float32 {
	if m != nil && m.Stuns != nil {
		return *m.Stuns
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetHealing() float32 {
	if m != nil && m.Healing != nil {
		return *m.Healing
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetTowerKills() float32 {
	if m != nil && m.TowerKills != nil {
		return *m.TowerKills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetRoshanKills() float32 {
	if m != nil && m.RoshanKills != nil {
		return *m.RoshanKills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetMultiplierPremium() float32 {
	if m != nil && m.MultiplierPremium != nil {
		return *m.MultiplierPremium
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetMultiplierProfessional() float32 {
	if m != nil && m.MultiplierProfessional != nil {
		return *m.MultiplierProfessional
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfo struct {
	FantasyLeagueId       *uint32                                `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	CommissionerAccountId *uint32                                `protobuf:"varint,2,opt,name=commissioner_account_id" json:"commissioner_account_id,omitempty"`
	FantasyLeagueName     *string                                `protobuf:"bytes,3,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	SelectionMode         *Fantasy_Selection_Mode                `protobuf:"varint,4,opt,name=selection_mode,enum=Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount             *uint32                                `protobuf:"varint,5,opt,name=team_count" json:"team_count,omitempty"`
	Logo                  *uint64                                `protobuf:"varint,6,opt,name=logo" json:"logo,omitempty"`
	Scoring               *CMsgFantasyLeagueScoring              `protobuf:"bytes,7,opt,name=scoring" json:"scoring,omitempty"`
	DraftTime             *uint32                                `protobuf:"varint,12,opt,name=draft_time" json:"draft_time,omitempty"`
	DraftPickTime         *uint32                                `protobuf:"varint,13,opt,name=draft_pick_time" json:"draft_pick_time,omitempty"`
	SeasonStart           *uint32                                `protobuf:"varint,15,opt,name=season_start" json:"season_start,omitempty"`
	SeasonLength          *uint32                                `protobuf:"varint,16,opt,name=season_length" json:"season_length,omitempty"`
	VetoVotes             *uint32                                `protobuf:"varint,17,opt,name=veto_votes" json:"veto_votes,omitempty"`
	Acquisitions          *uint32                                `protobuf:"varint,18,opt,name=acquisitions" json:"acquisitions,omitempty"`
	Slot_1                *uint32                                `protobuf:"varint,19,opt,name=slot_1" json:"slot_1,omitempty"`
	Slot_2                *uint32                                `protobuf:"varint,20,opt,name=slot_2" json:"slot_2,omitempty"`
	Slot_3                *uint32                                `protobuf:"varint,21,opt,name=slot_3" json:"slot_3,omitempty"`
	Slot_4                *uint32                                `protobuf:"varint,22,opt,name=slot_4" json:"slot_4,omitempty"`
	Slot_5                *uint32                                `protobuf:"varint,23,opt,name=slot_5" json:"slot_5,omitempty"`
	BenchSlots            *uint32                                `protobuf:"varint,24,opt,name=bench_slots" json:"bench_slots,omitempty"`
	OwnerInfo             []*CMsgDOTAFantasyLeagueInfo_OwnerInfo `protobuf:"bytes,25,rep,name=owner_info" json:"owner_info,omitempty"`
	Players               []uint32                               `protobuf:"varint,26,rep,name=players" json:"players,omitempty"`
	TimeZone              *uint32                                `protobuf:"varint,27,opt,name=time_zone" json:"time_zone,omitempty"`
	Season                *uint32                                `protobuf:"varint,28,opt,name=season" json:"season,omitempty"`
	Password              *string                                `protobuf:"bytes,29,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized      []byte                                 `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfo) Reset()         { *m = CMsgDOTAFantasyLeagueInfo{} }
func (m *CMsgDOTAFantasyLeagueInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfo) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueInfo_SelectionMode Fantasy_Selection_Mode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID

func (m *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetCommissionerAccountId() uint32 {
	if m != nil && m.CommissionerAccountId != nil {
		return *m.CommissionerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSelectionMode() Fantasy_Selection_Mode {
	if m != nil && m.SelectionMode != nil {
		return *m.SelectionMode
	}
	return Default_CMsgDOTAFantasyLeagueInfo_SelectionMode
}

func (m *CMsgDOTAFantasyLeagueInfo) GetTeamCount() uint32 {
	if m != nil && m.TeamCount != nil {
		return *m.TeamCount
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetScoring() *CMsgFantasyLeagueScoring {
	if m != nil {
		return m.Scoring
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetDraftTime() uint32 {
	if m != nil && m.DraftTime != nil {
		return *m.DraftTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetDraftPickTime() uint32 {
	if m != nil && m.DraftPickTime != nil {
		return *m.DraftPickTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeasonStart() uint32 {
	if m != nil && m.SeasonStart != nil {
		return *m.SeasonStart
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeasonLength() uint32 {
	if m != nil && m.SeasonLength != nil {
		return *m.SeasonLength
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetVetoVotes() uint32 {
	if m != nil && m.VetoVotes != nil {
		return *m.VetoVotes
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetAcquisitions() uint32 {
	if m != nil && m.Acquisitions != nil {
		return *m.Acquisitions
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_1() uint32 {
	if m != nil && m.Slot_1 != nil {
		return *m.Slot_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_2() uint32 {
	if m != nil && m.Slot_2 != nil {
		return *m.Slot_2
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_3() uint32 {
	if m != nil && m.Slot_3 != nil {
		return *m.Slot_3
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_4() uint32 {
	if m != nil && m.Slot_4 != nil {
		return *m.Slot_4
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_5() uint32 {
	if m != nil && m.Slot_5 != nil {
		return *m.Slot_5
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetBenchSlots() uint32 {
	if m != nil && m.BenchSlots != nil {
		return *m.BenchSlots
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetOwnerInfo() []*CMsgDOTAFantasyLeagueInfo_OwnerInfo {
	if m != nil {
		return m.OwnerInfo
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetPlayers() []uint32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetTimeZone() uint32 {
	if m != nil && m.TimeZone != nil {
		return *m.TimeZone
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueInfo_OwnerInfo struct {
	OwnerAccountId   *uint32  `protobuf:"varint,1,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	LeftLeague       *bool    `protobuf:"varint,2,opt,name=left_league" json:"left_league,omitempty"`
	PlayerAccountId  []uint32 `protobuf:"varint,3,rep,name=player_account_id" json:"player_account_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) Reset()         { *m = CMsgDOTAFantasyLeagueInfo_OwnerInfo{} }
func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfo_OwnerInfo) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetLeftLeague() bool {
	if m != nil && m.LeftLeague != nil {
		return *m.LeftLeague
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetPlayerAccountId() []uint32 {
	if m != nil {
		return m.PlayerAccountId
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoRequest struct {
	FantasyLeagueId  *uint32                    `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	EditInfo         *CMsgDOTAFantasyLeagueInfo `protobuf:"bytes,2,opt,name=edit_info" json:"edit_info,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) Reset()         { *m = CMsgDOTAFantasyLeagueEditInfoRequest{} }
func (m *CMsgDOTAFantasyLeagueEditInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInfoRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) GetEditInfo() *CMsgDOTAFantasyLeagueInfo {
	if m != nil {
		return m.EditInfo
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoResponse struct {
	Result           *CMsgDOTAFantasyLeagueEditInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueEditInfoResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInfoResponse) Reset()         { *m = CMsgDOTAFantasyLeagueEditInfoResponse{} }
func (m *CMsgDOTAFantasyLeagueEditInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInfoResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result CMsgDOTAFantasyLeagueEditInfoResponse_EResult = CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueEditInfoResponse) GetResult() CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result
}

type CMsgDOTAFantasyLeagueFindRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueFindRequest) Reset()         { *m = CMsgDOTAFantasyLeagueFindRequest{} }
func (m *CMsgDOTAFantasyLeagueFindRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueFindRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueFindRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueFindRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueFindResponse struct {
	Result            *CMsgDOTAFantasyLeagueFindResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueFindResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueName *string                                    `protobuf:"bytes,2,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	CommissionerName  *string                                    `protobuf:"bytes,3,opt,name=commissioner_name" json:"commissioner_name,omitempty"`
	XXX_unrecognized  []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueFindResponse) Reset()         { *m = CMsgDOTAFantasyLeagueFindResponse{} }
func (m *CMsgDOTAFantasyLeagueFindResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueFindResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueFindResponse_Result CMsgDOTAFantasyLeagueFindResponse_EResult = CMsgDOTAFantasyLeagueFindResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueFindResponse) GetResult() CMsgDOTAFantasyLeagueFindResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueFindResponse_Result
}

func (m *CMsgDOTAFantasyLeagueFindResponse) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueFindResponse) GetCommissionerName() string {
	if m != nil && m.CommissionerName != nil {
		return *m.CommissionerName
	}
	return ""
}

type CMsgDOTAFantasyLeagueInfoRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfoRequest) Reset()         { *m = CMsgDOTAFantasyLeagueInfoRequest{} }
func (m *CMsgDOTAFantasyLeagueInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfoRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueInfoRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfoResponse struct {
	Result           *CMsgDOTAFantasyLeagueInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueInfoResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfoResponse) Reset()         { *m = CMsgDOTAFantasyLeagueInfoResponse{} }
func (m *CMsgDOTAFantasyLeagueInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfoResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueInfoResponse_Result CMsgDOTAFantasyLeagueInfoResponse_EResult = CMsgDOTAFantasyLeagueInfoResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueInfoResponse) GetResult() CMsgDOTAFantasyLeagueInfoResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueInfoResponse_Result
}

type CMsgDOTAFantasyLeagueMatchupsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsRequest) Reset()         { *m = CMsgDOTAFantasyLeagueMatchupsRequest{} }
func (m *CMsgDOTAFantasyLeagueMatchupsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueMatchupsRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueMatchupsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse struct {
	Result           *CMsgDOTAFantasyLeagueMatchupsResponse_EResult          `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueMatchupsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                                 `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	WeeklyMatchups   []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups `protobuf:"bytes,3,rep,name=weekly_matchups" json:"weekly_matchups,omitempty"`
	XXX_unrecognized []byte                                                  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) Reset()         { *m = CMsgDOTAFantasyLeagueMatchupsResponse{} }
func (m *CMsgDOTAFantasyLeagueMatchupsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueMatchupsResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result CMsgDOTAFantasyLeagueMatchupsResponse_EResult = CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetResult() CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetWeeklyMatchups() []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups {
	if m != nil {
		return m.WeeklyMatchups
	}
	return nil
}

type CMsgDOTAFantasyLeagueMatchupsResponse_Matchup struct {
	OwnerAccountId_1 *uint32  `protobuf:"varint,1,opt,name=owner_account_id_1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2 *uint32  `protobuf:"varint,2,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	Score_1          *float32 `protobuf:"fixed32,3,opt,name=score_1" json:"score_1,omitempty"`
	Score_2          *float32 `protobuf:"fixed32,4,opt,name=score_2" json:"score_2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) Reset() {
	*m = CMsgDOTAFantasyLeagueMatchupsResponse_Matchup{}
}
func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) ProtoMessage() {}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_1() uint32 {
	if m != nil && m.OwnerAccountId_1 != nil {
		return *m.OwnerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_1() float32 {
	if m != nil && m.Score_1 != nil {
		return *m.Score_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_2() float32 {
	if m != nil && m.Score_2 != nil {
		return *m.Score_2
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups struct {
	Matchup          []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup `protobuf:"bytes,1,rep,name=matchup" json:"matchup,omitempty"`
	StartTime        *uint32                                          `protobuf:"varint,2,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *uint32                                          `protobuf:"varint,3,opt,name=end_time" json:"end_time,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) Reset() {
	*m = CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups{}
}
func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) ProtoMessage() {}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetMatchup() []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup {
	if m != nil {
		return m.Matchup
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type CMsgDOTAEditFantasyTeamRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,4,opt,name=team_logo" json:"team_logo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAEditFantasyTeamRequest) Reset()         { *m = CMsgDOTAEditFantasyTeamRequest{} }
func (m *CMsgDOTAEditFantasyTeamRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAEditFantasyTeamRequest) ProtoMessage()    {}

func (m *CMsgDOTAEditFantasyTeamRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

type CMsgDOTAEditFantasyTeamResponse struct {
	Result           *CMsgDOTAEditFantasyTeamResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAEditFantasyTeamResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CMsgDOTAEditFantasyTeamResponse) Reset()         { *m = CMsgDOTAEditFantasyTeamResponse{} }
func (m *CMsgDOTAEditFantasyTeamResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAEditFantasyTeamResponse) ProtoMessage()    {}

const Default_CMsgDOTAEditFantasyTeamResponse_Result CMsgDOTAEditFantasyTeamResponse_EResult = CMsgDOTAEditFantasyTeamResponse_SUCCESS

func (m *CMsgDOTAEditFantasyTeamResponse) GetResult() CMsgDOTAEditFantasyTeamResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAEditFantasyTeamResponse_Result
}

type CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) Reset() {
	*m = CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID{}
}
func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) ProtoMessage() {}

func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID struct {
	OwnerAccountId   *uint32 `protobuf:"varint,1,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) Reset() {
	*m = CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID{}
}
func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) ProtoMessage() {}

func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoResponse struct {
	Results          []*CMsgDOTAFantasyTeamInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoResponse) Reset()         { *m = CMsgDOTAFantasyTeamInfoResponse{} }
func (m *CMsgDOTAFantasyTeamInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamInfoResponse) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamInfoResponse) GetResults() []*CMsgDOTAFantasyTeamInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type CMsgDOTAFantasyTeamInfo struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	TeamName         *string  `protobuf:"bytes,4,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64  `protobuf:"varint,5,opt,name=team_logo" json:"team_logo,omitempty"`
	Wins             *uint32  `protobuf:"varint,6,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,7,opt,name=losses" json:"losses,omitempty"`
	CurrentRoster    []uint32 `protobuf:"varint,8,rep,name=current_roster" json:"current_roster,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfo) Reset()         { *m = CMsgDOTAFantasyTeamInfo{} }
func (m *CMsgDOTAFantasyTeamInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamInfo) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamInfo) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamInfo) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetCurrentRoster() []uint32 {
	if m != nil {
		return m.CurrentRoster
	}
	return nil
}

type CMsgDOTAFantasyTeamScoreRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,4,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,5,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,6,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	IncludeBench     *bool   `protobuf:"varint,7,opt,name=include_bench" json:"include_bench,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreRequest) Reset()         { *m = CMsgDOTAFantasyTeamScoreRequest{} }
func (m *CMsgDOTAFantasyTeamScoreRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamScoreRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetIncludeBench() bool {
	if m != nil && m.IncludeBench != nil {
		return *m.IncludeBench
	}
	return false
}

type CMsgDOTAFantasyTeamScoreResponse struct {
	Result             *CMsgDOTAFantasyTeamScoreResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamScore   *float32                                            `protobuf:"fixed32,2,opt,name=fantasy_team_score" json:"fantasy_team_score,omitempty"`
	FantasyPlayerScore []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore `protobuf:"bytes,3,rep,name=fantasy_player_score" json:"fantasy_player_score,omitempty"`
	XXX_unrecognized   []byte                                              `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreResponse) Reset()         { *m = CMsgDOTAFantasyTeamScoreResponse{} }
func (m *CMsgDOTAFantasyTeamScoreResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamScoreResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamScoreResponse_Result CMsgDOTAFantasyTeamScoreResponse_EResult = CMsgDOTAFantasyTeamScoreResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamScoreResponse) GetResult() CMsgDOTAFantasyTeamScoreResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamScoreResponse_Result
}

func (m *CMsgDOTAFantasyTeamScoreResponse) GetFantasyTeamScore() float32 {
	if m != nil && m.FantasyTeamScore != nil {
		return *m.FantasyTeamScore
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreResponse) GetFantasyPlayerScore() []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore {
	if m != nil {
		return m.FantasyPlayerScore
	}
	return nil
}

type CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore struct {
	AccountId        *uint32  `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Score            *float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) Reset() {
	*m = CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore{}
}
func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) ProtoMessage() {}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyTeamStandingsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,3,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,4,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,5,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,6,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	FilterInHall     *bool   `protobuf:"varint,7,opt,name=filter_in_hall" json:"filter_in_hall,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) Reset()         { *m = CMsgDOTAFantasyTeamStandingsRequest{} }
func (m *CMsgDOTAFantasyTeamStandingsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamStandingsRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterInHall() bool {
	if m != nil && m.FilterInHall != nil {
		return *m.FilterInHall
	}
	return false
}

type CMsgDOTAFantasyTeamStandingsResponse struct {
	Result           *CMsgDOTAFantasyTeamStandingsResponse_EResult         `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamStandingsResponse_EResult,def=0" json:"result,omitempty"`
	TeamScores       []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore `protobuf:"bytes,3,rep,name=team_scores" json:"team_scores,omitempty"`
	XXX_unrecognized []byte                                                `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsResponse) Reset()         { *m = CMsgDOTAFantasyTeamStandingsResponse{} }
func (m *CMsgDOTAFantasyTeamStandingsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamStandingsResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamStandingsResponse_Result CMsgDOTAFantasyTeamStandingsResponse_EResult = CMsgDOTAFantasyTeamStandingsResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamStandingsResponse) GetResult() CMsgDOTAFantasyTeamStandingsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamStandingsResponse_Result
}

func (m *CMsgDOTAFantasyTeamStandingsResponse) GetTeamScores() []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore {
	if m != nil {
		return m.TeamScores
	}
	return nil
}

type CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	FantasyTeamLogo  *uint64  `protobuf:"varint,4,opt,name=fantasy_team_logo" json:"fantasy_team_logo,omitempty"`
	OwnerName        *string  `protobuf:"bytes,5,opt,name=owner_name" json:"owner_name,omitempty"`
	FantasyTeamName  *string  `protobuf:"bytes,6,opt,name=fantasy_team_name" json:"fantasy_team_name,omitempty"`
	Score            *float32 `protobuf:"fixed32,7,opt,name=score" json:"score,omitempty"`
	ScoreAgainst     *float32 `protobuf:"fixed32,8,opt,name=score_against" json:"score_against,omitempty"`
	Wins             *uint32  `protobuf:"varint,9,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,10,opt,name=losses" json:"losses,omitempty"`
	Streak           *int32   `protobuf:"varint,11,opt,name=streak" json:"streak,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) Reset() {
	*m = CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore{}
}
func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) ProtoMessage() {}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamLogo() uint64 {
	if m != nil && m.FantasyTeamLogo != nil {
		return *m.FantasyTeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerName() string {
	if m != nil && m.OwnerName != nil {
		return *m.OwnerName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamName() string {
	if m != nil && m.FantasyTeamName != nil {
		return *m.FantasyTeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScoreAgainst() float32 {
	if m != nil && m.ScoreAgainst != nil {
		return *m.ScoreAgainst
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetStreak() int32 {
	if m != nil && m.Streak != nil {
		return *m.Streak
	}
	return 0
}

type CMsgDOTAFantasyPlayerScoreRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,2,opt,name=player_account_id" json:"player_account_id,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,3,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,4,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,5,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,6,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) Reset()         { *m = CMsgDOTAFantasyPlayerScoreRequest{} }
func (m *CMsgDOTAFantasyPlayerScoreRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerScoreResponse struct {
	Result           *CMsgDOTAFantasyPlayerScoreResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyPlayerScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                     `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32                                     `protobuf:"varint,3,opt,name=player_account_id" json:"player_account_id,omitempty"`
	PlayerName       *string                                     `protobuf:"bytes,4,opt,name=player_name" json:"player_name,omitempty"`
	Score            *float32                                    `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) Reset()         { *m = CMsgDOTAFantasyPlayerScoreResponse{} }
func (m *CMsgDOTAFantasyPlayerScoreResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyPlayerScoreResponse_Result CMsgDOTAFantasyPlayerScoreResponse_EResult = CMsgDOTAFantasyPlayerScoreResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetResult() CMsgDOTAFantasyPlayerScoreResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreResponse_Result
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerStandingsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Role             *uint32 `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,4,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,5,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,6,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,7,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) Reset()         { *m = CMsgDOTAFantasyPlayerStandingsRequest{} }
func (m *CMsgDOTAFantasyPlayerStandingsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerStandingsRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetRole() uint32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerStandingsResponse struct {
	Result           *CMsgDOTAFantasyPlayerStandingsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyPlayerStandingsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                                   `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Role             *uint32                                                   `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	PlayerScores     []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore `protobuf:"bytes,4,rep,name=player_scores" json:"player_scores,omitempty"`
	XXX_unrecognized []byte                                                    `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerStandingsResponse{}
}
func (m *CMsgDOTAFantasyPlayerStandingsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerStandingsResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyPlayerStandingsResponse_Result CMsgDOTAFantasyPlayerStandingsResponse_EResult = CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetResult() CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerStandingsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetRole() uint32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetPlayerScores() []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore {
	if m != nil {
		return m.PlayerScores
	}
	return nil
}

type CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore struct {
	PlayerAccountId  *uint32  `protobuf:"varint,1,opt,name=player_account_id" json:"player_account_id,omitempty"`
	PlayerName       *string  `protobuf:"bytes,2,opt,name=player_name" json:"player_name,omitempty"`
	Score            *float32 `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) Reset() {
	*m = CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore{}
}
func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) ProtoMessage() {}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerInfoRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerInfoRequest) Reset()         { *m = CMsgDOTAFantasyPlayerInfoRequest{} }
func (m *CMsgDOTAFantasyPlayerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerInfoRequest) ProtoMessage()    {}

type CMsgDOTAFantasyPlayerInfoResponse struct {
	Msg              *CMsgGCPlayerInfo `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerInfoResponse) Reset()         { *m = CMsgDOTAFantasyPlayerInfoResponse{} }
func (m *CMsgDOTAFantasyPlayerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerInfoResponse) ProtoMessage()    {}

func (m *CMsgDOTAFantasyPlayerInfoResponse) GetMsg() *CMsgGCPlayerInfo {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CMsgDOTAFantasyLeagueCreateRequest struct {
	SeasonId          *uint32 `protobuf:"varint,1,opt,name=season_id" json:"season_id,omitempty"`
	FantasyLeagueName *string `protobuf:"bytes,2,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	Password          *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	TeamName          *string `protobuf:"bytes,4,opt,name=team_name" json:"team_name,omitempty"`
	Logo              *uint64 `protobuf:"varint,5,opt,name=logo" json:"logo,omitempty"`
	TicketItemId      *uint64 `protobuf:"varint,6,opt,name=ticket_item_id" json:"ticket_item_id,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) Reset()         { *m = CMsgDOTAFantasyLeagueCreateRequest{} }
func (m *CMsgDOTAFantasyLeagueCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueCreateRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetSeasonId() uint32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetTicketItemId() uint64 {
	if m != nil && m.TicketItemId != nil {
		return *m.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyLeagueCreateResponse struct {
	Result           *CMsgDOTAFantasyLeagueCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                      `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueCreateResponse) Reset()         { *m = CMsgDOTAFantasyLeagueCreateResponse{} }
func (m *CMsgDOTAFantasyLeagueCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueCreateResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueCreateResponse_Result CMsgDOTAFantasyLeagueCreateResponse_EResult = CMsgDOTAFantasyLeagueCreateResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueCreateResponse) GetResult() CMsgDOTAFantasyLeagueCreateResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueCreateResponse_Result
}

func (m *CMsgDOTAFantasyLeagueCreateResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	Logo             *uint64 `protobuf:"varint,4,opt,name=logo" json:"logo,omitempty"`
	TicketItemId     *uint64 `protobuf:"varint,5,opt,name=ticket_item_id" json:"ticket_item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamCreateRequest) Reset()         { *m = CMsgDOTAFantasyTeamCreateRequest{} }
func (m *CMsgDOTAFantasyTeamCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamCreateRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetTicketItemId() uint64 {
	if m != nil && m.TicketItemId != nil {
		return *m.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateResponse struct {
	Result           *CMsgDOTAFantasyTeamCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamIndex *uint32                                    `protobuf:"varint,2,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamCreateResponse) Reset()         { *m = CMsgDOTAFantasyTeamCreateResponse{} }
func (m *CMsgDOTAFantasyTeamCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamCreateResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamCreateResponse_Result CMsgDOTAFantasyTeamCreateResponse_EResult = CMsgDOTAFantasyTeamCreateResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamCreateResponse) GetResult() CMsgDOTAFantasyTeamCreateResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamCreateResponse_Result
}

func (m *CMsgDOTAFantasyTeamCreateResponse) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeagueEditInvitesRequest struct {
	FantasyLeagueId  *uint32                                                 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string                                                 `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	InviteChange     []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange `protobuf:"bytes,3,rep,name=invite_change" json:"invite_change,omitempty"`
	XXX_unrecognized []byte                                                  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesRequest{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInvitesRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetInviteChange() []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange {
	if m != nil {
		return m.InviteChange
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Invited          *bool   `protobuf:"varint,2,opt,name=invited" json:"invited,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) ProtoMessage() {}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetInvited() bool {
	if m != nil && m.Invited != nil {
		return *m.Invited
	}
	return false
}

type CMsgDOTAFantasyLeagueEditInvitesResponse struct {
	Result           *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueEditInvitesResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesResponse{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInvitesResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) GetResult() CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result
}

type CMsgDOTAFantasyLeagueDraftStatusRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftStatusRequest{}
}
func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftStatusRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftStatus struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	DraftOrder       []uint32 `protobuf:"varint,2,rep,name=draft_order" json:"draft_order,omitempty"`
	CurrentPick      *uint32  `protobuf:"varint,3,opt,name=current_pick" json:"current_pick,omitempty"`
	TimeRemaining    *uint32  `protobuf:"varint,4,opt,name=time_remaining" json:"time_remaining,omitempty"`
	PendingResume    *bool    `protobuf:"varint,5,opt,name=pending_resume" json:"pending_resume,omitempty"`
	Completed        *bool    `protobuf:"varint,6,opt,name=completed" json:"completed,omitempty"`
	AvailablePlayers []uint32 `protobuf:"varint,7,rep,name=available_players" json:"available_players,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) Reset()         { *m = CMsgDOTAFantasyLeagueDraftStatus{} }
func (m *CMsgDOTAFantasyLeagueDraftStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftStatus) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetDraftOrder() []uint32 {
	if m != nil {
		return m.DraftOrder
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetCurrentPick() uint32 {
	if m != nil && m.CurrentPick != nil {
		return *m.CurrentPick
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetTimeRemaining() uint32 {
	if m != nil && m.TimeRemaining != nil {
		return *m.TimeRemaining
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetPendingResume() bool {
	if m != nil && m.PendingResume != nil {
		return *m.PendingResume
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetAvailablePlayers() []uint32 {
	if m != nil {
		return m.AvailablePlayers
	}
	return nil
}

type CMsgDOTAFantasyLeagueDraftPlayerRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,3,opt,name=player_account_id" json:"player_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftPlayerRequest{}
}
func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftPlayerRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse struct {
	Result           *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftPlayerResponse{}
}
func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftPlayerResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) GetResult() CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result
}

type CMsgDOTAFantasyTeamRosterSwapRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Slot_1           *uint32 `protobuf:"varint,4,opt,name=slot_1" json:"slot_1,omitempty"`
	Slot_2           *uint32 `protobuf:"varint,5,opt,name=slot_2" json:"slot_2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) Reset()         { *m = CMsgDOTAFantasyTeamRosterSwapRequest{} }
func (m *CMsgDOTAFantasyTeamRosterSwapRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterSwapRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_1() uint32 {
	if m != nil && m.Slot_1 != nil {
		return *m.Slot_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_2() uint32 {
	if m != nil && m.Slot_2 != nil {
		return *m.Slot_2
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterSwapResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterSwapResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamRosterSwapResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterSwapResponse) Reset()         { *m = CMsgDOTAFantasyTeamRosterSwapResponse{} }
func (m *CMsgDOTAFantasyTeamRosterSwapResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterSwapResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result CMsgDOTAFantasyTeamRosterSwapResponse_EResult = CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterSwapResponse) GetResult() CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result
}

type CMsgDOTAFantasyTeamRosterAddDropRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	AddAccountId     *uint32 `protobuf:"varint,5,opt,name=add_account_id" json:"add_account_id,omitempty"`
	DropAccountId    *uint32 `protobuf:"varint,6,opt,name=drop_account_id" json:"drop_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) Reset() {
	*m = CMsgDOTAFantasyTeamRosterAddDropRequest{}
}
func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterAddDropRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetAddAccountId() uint32 {
	if m != nil && m.AddAccountId != nil {
		return *m.AddAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetDropAccountId() uint32 {
	if m != nil && m.DropAccountId != nil {
		return *m.DropAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterAddDropResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamRosterAddDropResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) Reset() {
	*m = CMsgDOTAFantasyTeamRosterAddDropResponse{}
}
func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterAddDropResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) GetResult() CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result
}

type CMsgDOTAFantasyTeamTradesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesRequest) Reset()         { *m = CMsgDOTAFantasyTeamTradesRequest{} }
func (m *CMsgDOTAFantasyTeamTradesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamTradesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamTradesResponse struct {
	Result           *CMsgDOTAFantasyTeamTradesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamTradesResponse_EResult,def=0" json:"result,omitempty"`
	Trades           []*CMsgDOTAFantasyTeamTradesResponse_Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesResponse) Reset()         { *m = CMsgDOTAFantasyTeamTradesResponse{} }
func (m *CMsgDOTAFantasyTeamTradesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamTradesResponse_Result CMsgDOTAFantasyTeamTradesResponse_EResult = CMsgDOTAFantasyTeamTradesResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamTradesResponse) GetResult() CMsgDOTAFantasyTeamTradesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamTradesResponse_Result
}

func (m *CMsgDOTAFantasyTeamTradesResponse) GetTrades() []*CMsgDOTAFantasyTeamTradesResponse_Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type CMsgDOTAFantasyTeamTradesResponse_Trade struct {
	Timestamp         *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	OwnerAccountId_1  *uint32 `protobuf:"varint,2,opt,name=owner_account_id_1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2  *uint32 `protobuf:"varint,3,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	PlayerAccountId_1 *uint32 `protobuf:"varint,4,opt,name=player_account_id_1" json:"player_account_id_1,omitempty"`
	PlayerAccountId_2 *uint32 `protobuf:"varint,5,opt,name=player_account_id_2" json:"player_account_id_2,omitempty"`
	Status            *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) Reset() {
	*m = CMsgDOTAFantasyTeamTradesResponse_Trade{}
}
func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesResponse_Trade) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_1() uint32 {
	if m != nil && m.OwnerAccountId_1 != nil {
		return *m.OwnerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_1() uint32 {
	if m != nil && m.PlayerAccountId_1 != nil {
		return *m.PlayerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_2() uint32 {
	if m != nil && m.PlayerAccountId_2 != nil {
		return *m.PlayerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type CMsgDOTAFantasyTeamTradeCancelRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex_1      *uint32 `protobuf:"varint,3,opt,name=team_index_1" json:"team_index_1,omitempty"`
	OwnerAccountId_2 *uint32 `protobuf:"varint,4,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	TeamIndex_2      *uint32 `protobuf:"varint,5,opt,name=team_index_2" json:"team_index_2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) Reset()         { *m = CMsgDOTAFantasyTeamTradeCancelRequest{} }
func (m *CMsgDOTAFantasyTeamTradeCancelRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradeCancelRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_1() uint32 {
	if m != nil && m.TeamIndex_1 != nil {
		return *m.TeamIndex_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_2() uint32 {
	if m != nil && m.TeamIndex_2 != nil {
		return *m.TeamIndex_2
	}
	return 0
}

type CMsgDOTAFantasyTeamTradeCancelResponse struct {
	Result           *CMsgDOTAFantasyTeamTradeCancelResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamTradeCancelResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradeCancelResponse) Reset() {
	*m = CMsgDOTAFantasyTeamTradeCancelResponse{}
}
func (m *CMsgDOTAFantasyTeamTradeCancelResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradeCancelResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result CMsgDOTAFantasyTeamTradeCancelResponse_EResult = CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamTradeCancelResponse) GetResult() CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result
}

type CMsgDOTAFantasyTeamRosterRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,3,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterRequest) Reset()         { *m = CMsgDOTAFantasyTeamRosterRequest{} }
func (m *CMsgDOTAFantasyTeamRosterRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyTeamRosterResponse_EResult,def=0" json:"result,omitempty"`
	PlayerAccountIds []uint32                                   `protobuf:"varint,2,rep,name=player_account_ids" json:"player_account_ids,omitempty"`
	PlayerLocked     []bool                                     `protobuf:"varint,3,rep,name=player_locked" json:"player_locked,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterResponse) Reset()         { *m = CMsgDOTAFantasyTeamRosterResponse{} }
func (m *CMsgDOTAFantasyTeamRosterResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyTeamRosterResponse_Result CMsgDOTAFantasyTeamRosterResponse_EResult = CMsgDOTAFantasyTeamRosterResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterResponse) GetResult() CMsgDOTAFantasyTeamRosterResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterResponse_Result
}

func (m *CMsgDOTAFantasyTeamRosterResponse) GetPlayerAccountIds() []uint32 {
	if m != nil {
		return m.PlayerAccountIds
	}
	return nil
}

func (m *CMsgDOTAFantasyTeamRosterResponse) GetPlayerLocked() []bool {
	if m != nil {
		return m.PlayerLocked
	}
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsRequest{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsRequest) ProtoMessage() {}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse struct {
	Result           *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult       `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult,def=0" json:"result,omitempty"`
	Stats            []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	XXX_unrecognized []byte                                                     `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse) ProtoMessage() {}

const Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetResult() CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetStats() []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator struct {
	Matches          *uint32  `protobuf:"varint,1,opt,name=matches" json:"matches,omitempty"`
	Levels           *float32 `protobuf:"fixed32,2,opt,name=levels" json:"levels,omitempty"`
	Kills            *float32 `protobuf:"fixed32,3,opt,name=kills" json:"kills,omitempty"`
	Deaths           *float32 `protobuf:"fixed32,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *float32 `protobuf:"fixed32,5,opt,name=assists" json:"assists,omitempty"`
	LastHits         *float32 `protobuf:"fixed32,6,opt,name=last_hits" json:"last_hits,omitempty"`
	Denies           *float32 `protobuf:"fixed32,7,opt,name=denies" json:"denies,omitempty"`
	Gpm              *float32 `protobuf:"fixed32,8,opt,name=gpm" json:"gpm,omitempty"`
	Xppm             *float32 `protobuf:"fixed32,9,opt,name=xppm" json:"xppm,omitempty"`
	Stuns            *float32 `protobuf:"fixed32,10,opt,name=stuns" json:"stuns,omitempty"`
	Healing          *float32 `protobuf:"fixed32,11,opt,name=healing" json:"healing,omitempty"`
	TowerKills       *float32 `protobuf:"fixed32,12,opt,name=tower_kills" json:"tower_kills,omitempty"`
	RoshanKills      *float32 `protobuf:"fixed32,13,opt,name=roshan_kills" json:"roshan_kills,omitempty"`
	Score            *float32 `protobuf:"fixed32,14,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) ProtoMessage() {}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetMatches() uint32 {
	if m != nil && m.Matches != nil {
		return *m.Matches
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLevels() float32 {
	if m != nil && m.Levels != nil {
		return *m.Levels
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetKills() float32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDeaths() float32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetAssists() float32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLastHits() float32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDenies() float32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetGpm() float32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetXppm() float32 {
	if m != nil && m.Xppm != nil {
		return *m.Xppm
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetStuns() float32 {
	if m != nil && m.Stuns != nil {
		return *m.Stuns
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetHealing() float32 {
	if m != nil && m.Healing != nil {
		return *m.Healing
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetTowerKills() float32 {
	if m != nil && m.TowerKills != nil {
		return *m.TowerKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetRoshanKills() float32 {
	if m != nil && m.RoshanKills != nil {
		return *m.RoshanKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats struct {
	AccountId         *uint32                                                             `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Weeks             *uint32                                                             `protobuf:"varint,2,opt,name=weeks" json:"weeks,omitempty"`
	StatsPremium      *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,4,opt,name=stats_premium" json:"stats_premium,omitempty"`
	StatsProfessional *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,5,opt,name=stats_professional" json:"stats_professional,omitempty"`
	XXX_unrecognized  []byte                                                              `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) ProtoMessage() {}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetWeeks() uint32 {
	if m != nil && m.Weeks != nil {
		return *m.Weeks
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsPremium() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if m != nil {
		return m.StatsPremium
	}
	return nil
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsProfessional() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if m != nil {
		return m.StatsProfessional
	}
	return nil
}

type CMsgDOTAFantasyMessageAdd struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessageAdd) Reset()         { *m = CMsgDOTAFantasyMessageAdd{} }
func (m *CMsgDOTAFantasyMessageAdd) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessageAdd) ProtoMessage()    {}

func (m *CMsgDOTAFantasyMessageAdd) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessageAdd) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgDOTAFantasyMessagesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	StartMessage     *uint32 `protobuf:"varint,2,opt,name=start_message" json:"start_message,omitempty"`
	EndMessage       *uint32 `protobuf:"varint,3,opt,name=end_message" json:"end_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesRequest) Reset()         { *m = CMsgDOTAFantasyMessagesRequest{} }
func (m *CMsgDOTAFantasyMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyMessagesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesRequest) GetStartMessage() uint32 {
	if m != nil && m.StartMessage != nil {
		return *m.StartMessage
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesRequest) GetEndMessage() uint32 {
	if m != nil && m.EndMessage != nil {
		return *m.EndMessage
	}
	return 0
}

type CMsgDOTAFantasyMessagesResponse struct {
	Result           *CMsgDOTAFantasyMessagesResponse_EResult   `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyMessagesResponse_EResult,def=0" json:"result,omitempty"`
	Messages         []*CMsgDOTAFantasyMessagesResponse_Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	NumTotalMessages *uint32                                    `protobuf:"varint,3,opt,name=num_total_messages" json:"num_total_messages,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesResponse) Reset()         { *m = CMsgDOTAFantasyMessagesResponse{} }
func (m *CMsgDOTAFantasyMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyMessagesResponse_Result CMsgDOTAFantasyMessagesResponse_EResult = CMsgDOTAFantasyMessagesResponse_SUCCESS

func (m *CMsgDOTAFantasyMessagesResponse) GetResult() CMsgDOTAFantasyMessagesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyMessagesResponse_Result
}

func (m *CMsgDOTAFantasyMessagesResponse) GetMessages() []*CMsgDOTAFantasyMessagesResponse_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *CMsgDOTAFantasyMessagesResponse) GetNumTotalMessages() uint32 {
	if m != nil && m.NumTotalMessages != nil {
		return *m.NumTotalMessages
	}
	return 0
}

type CMsgDOTAFantasyMessagesResponse_Message struct {
	MessageId        *uint32 `protobuf:"varint,1,opt,name=message_id" json:"message_id,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	AuthorAccountId  *uint32 `protobuf:"varint,3,opt,name=author_account_id" json:"author_account_id,omitempty"`
	Time             *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) Reset() {
	*m = CMsgDOTAFantasyMessagesResponse_Message{}
}
func (m *CMsgDOTAFantasyMessagesResponse_Message) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesResponse_Message) ProtoMessage()    {}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetMessageId() uint32 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetAuthorAccountId() uint32 {
	if m != nil && m.AuthorAccountId != nil {
		return *m.AuthorAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwner struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,3,opt,name=team_index" json:"team_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyRemoveOwner) Reset()         { *m = CMsgDOTAFantasyRemoveOwner{} }
func (m *CMsgDOTAFantasyRemoveOwner) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyRemoveOwner) ProtoMessage()    {}

func (m *CMsgDOTAFantasyRemoveOwner) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyRemoveOwner) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyRemoveOwner) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwnerResponse struct {
	Result           *CMsgDOTAFantasyRemoveOwnerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyRemoveOwnerResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyRemoveOwnerResponse) Reset()         { *m = CMsgDOTAFantasyRemoveOwnerResponse{} }
func (m *CMsgDOTAFantasyRemoveOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyRemoveOwnerResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyRemoveOwnerResponse_Result CMsgDOTAFantasyRemoveOwnerResponse_EResult = CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS

func (m *CMsgDOTAFantasyRemoveOwnerResponse) GetResult() CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyRemoveOwnerResponse_Result
}

type CMsgDOTAFantasyScheduledMatchesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesRequest) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesRequest{}
}
func (m *CMsgDOTAFantasyScheduledMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyScheduledMatchesRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyScheduledMatchesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyScheduledMatchesResponse struct {
	Result             *CMsgDOTAFantasyScheduledMatchesResponse_EResult              `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyScheduledMatchesResponse_EResult,def=0" json:"result,omitempty"`
	ScheduledMatchDays []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays `protobuf:"bytes,2,rep,name=scheduled_match_days" json:"scheduled_match_days,omitempty"`
	XXX_unrecognized   []byte                                                        `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesResponse{}
}
func (m *CMsgDOTAFantasyScheduledMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyScheduledMatchesResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyScheduledMatchesResponse_Result CMsgDOTAFantasyScheduledMatchesResponse_EResult = CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS

func (m *CMsgDOTAFantasyScheduledMatchesResponse) GetResult() CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyScheduledMatchesResponse_Result
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse) GetScheduledMatchDays() []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays {
	if m != nil {
		return m.ScheduledMatchDays
	}
	return nil
}

type CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays struct {
	Timestamp        *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TeamIds          []uint32 `protobuf:"varint,2,rep,name=team_ids" json:"team_ids,omitempty"`
	LeagueIds        []uint32 `protobuf:"varint,3,rep,name=league_ids" json:"league_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays{}
}
func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) ProtoMessage() {}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTeamIds() []uint32 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetLeagueIds() []uint32 {
	if m != nil {
		return m.LeagueIds
	}
	return nil
}

type CMsgDOTAFantasyLeaveLeagueRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,2,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) Reset()         { *m = CMsgDOTAFantasyLeaveLeagueRequest{} }
func (m *CMsgDOTAFantasyLeaveLeagueRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeaveLeagueRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeaveLeagueResponse struct {
	Result           *CMsgDOTAFantasyLeaveLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyLeaveLeagueResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyLeaveLeagueResponse) Reset()         { *m = CMsgDOTAFantasyLeaveLeagueResponse{} }
func (m *CMsgDOTAFantasyLeaveLeagueResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeaveLeagueResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyLeaveLeagueResponse_Result CMsgDOTAFantasyLeaveLeagueResponse_EResult = CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS

func (m *CMsgDOTAFantasyLeaveLeagueResponse) GetResult() CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeaveLeagueResponse_Result
}

type CMsgDOTAFantasyPlayerScoreDetailsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,2,opt,name=player_account_id" json:"player_account_id,omitempty"`
	StartTime        *uint32 `protobuf:"varint,3,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *uint32 `protobuf:"varint,4,opt,name=end_time" json:"end_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsRequest{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreDetailsRequest) ProtoMessage()    {}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse struct {
	Result           *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult,def=0" json:"result,omitempty"`
	Data             []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                                                       `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsResponse{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse) ProtoMessage()    {}

const Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetResult() CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetData() []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData struct {
	MatchId          *uint64                   `protobuf:"varint,1,opt,name=match_id" json:"match_id,omitempty"`
	SeriesId         *uint32                   `protobuf:"varint,2,opt,name=series_id" json:"series_id,omitempty"`
	SeriesNum        *uint32                   `protobuf:"varint,3,opt,name=series_num" json:"series_num,omitempty"`
	SeriesType       *uint32                   `protobuf:"varint,4,opt,name=series_type" json:"series_type,omitempty"`
	LeagueTier       *uint32                   `protobuf:"varint,5,opt,name=league_tier" json:"league_tier,omitempty"`
	LeagueId         *uint32                   `protobuf:"varint,6,opt,name=league_id" json:"league_id,omitempty"`
	OpposingTeamId   *uint32                   `protobuf:"varint,7,opt,name=opposing_team_id" json:"opposing_team_id,omitempty"`
	OpposingTeamLogo *uint64                   `protobuf:"varint,8,opt,name=opposing_team_logo" json:"opposing_team_logo,omitempty"`
	OpposingTeamName *string                   `protobuf:"bytes,9,opt,name=opposing_team_name" json:"opposing_team_name,omitempty"`
	Stats            *CMsgFantasyLeagueScoring `protobuf:"bytes,10,opt,name=stats" json:"stats,omitempty"`
	OwnedBy          *uint32                   `protobuf:"varint,11,opt,name=owned_by" json:"owned_by,omitempty"`
	Benched          *bool                     `protobuf:"varint,12,opt,name=benched" json:"benched,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) ProtoMessage() {}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesNum() uint32 {
	if m != nil && m.SeriesNum != nil {
		return *m.SeriesNum
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueTier() uint32 {
	if m != nil && m.LeagueTier != nil {
		return *m.LeagueTier
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamId() uint32 {
	if m != nil && m.OpposingTeamId != nil {
		return *m.OpposingTeamId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamLogo() uint64 {
	if m != nil && m.OpposingTeamLogo != nil {
		return *m.OpposingTeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamName() string {
	if m != nil && m.OpposingTeamName != nil {
		return *m.OpposingTeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetStats() *CMsgFantasyLeagueScoring {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOwnedBy() uint32 {
	if m != nil && m.OwnedBy != nil {
		return *m.OwnedBy
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetBenched() bool {
	if m != nil && m.Benched != nil {
		return *m.Benched
	}
	return false
}

type CMsgDOTATournament struct {
	Teams              []*CMsgDOTATournament_Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	Games              []*CMsgDOTATournament_Game `protobuf:"bytes,2,rep,name=games" json:"games,omitempty"`
	Gid                *uint64                    `protobuf:"varint,3,opt,name=gid" json:"gid,omitempty"`
	TournamentId       *uint32                    `protobuf:"varint,4,opt,name=tournament_id" json:"tournament_id,omitempty"`
	TournamentType     *ETournamentType           `protobuf:"varint,5,opt,name=tournament_type,enum=ETournamentType,def=0" json:"tournament_type,omitempty"`
	TournamentTemplate *ETournamentTemplate       `protobuf:"varint,6,opt,name=tournament_template,enum=ETournamentTemplate,def=0" json:"tournament_template,omitempty"`
	LeagueId           *uint32                    `protobuf:"varint,7,opt,name=league_id" json:"league_id,omitempty"`
	StartTime          *uint32                    `protobuf:"varint,8,opt,name=start_time" json:"start_time,omitempty"`
	State              *ETournamentState          `protobuf:"varint,9,opt,name=state,enum=ETournamentState,def=0" json:"state,omitempty"`
	Nodes              []*CMsgDOTATournament_Node `protobuf:"bytes,10,rep,name=nodes" json:"nodes,omitempty"`
	XXX_unrecognized   []byte                     `json:"-"`
}

func (m *CMsgDOTATournament) Reset()         { *m = CMsgDOTATournament{} }
func (m *CMsgDOTATournament) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournament) ProtoMessage()    {}

const Default_CMsgDOTATournament_TournamentType ETournamentType = ETournamentType_k_ETournamentType_Unknown
const Default_CMsgDOTATournament_TournamentTemplate ETournamentTemplate = ETournamentTemplate_k_ETournamentTemplate_None
const Default_CMsgDOTATournament_State ETournamentState = ETournamentState_k_ETournamentState_Unknown

func (m *CMsgDOTATournament) GetTeams() []*CMsgDOTATournament_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTATournament) GetGames() []*CMsgDOTATournament_Game {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *CMsgDOTATournament) GetGid() uint64 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *CMsgDOTATournament) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournament) GetTournamentType() ETournamentType {
	if m != nil && m.TournamentType != nil {
		return *m.TournamentType
	}
	return Default_CMsgDOTATournament_TournamentType
}

func (m *CMsgDOTATournament) GetTournamentTemplate() ETournamentTemplate {
	if m != nil && m.TournamentTemplate != nil {
		return *m.TournamentTemplate
	}
	return Default_CMsgDOTATournament_TournamentTemplate
}

func (m *CMsgDOTATournament) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTATournament) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTATournament) GetState() ETournamentState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_State
}

func (m *CMsgDOTATournament) GetNodes() []*CMsgDOTATournament_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type CMsgDOTATournament_Team struct {
	TeamId           *uint32  `protobuf:"varint,1,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string  `protobuf:"bytes,2,opt,name=team_name" json:"team_name,omitempty"`
	TeamAbbrev       *string  `protobuf:"bytes,3,opt,name=team_abbrev" json:"team_abbrev,omitempty"`
	Players          []uint32 `protobuf:"varint,4,rep,packed,name=players" json:"players,omitempty"`
	Seed             *uint32  `protobuf:"varint,5,opt,name=seed" json:"seed,omitempty"`
	TeamLogo         *uint64  `protobuf:"varint,6,opt,name=team_logo" json:"team_logo,omitempty"`
	CountryCode      *string  `protobuf:"bytes,7,opt,name=country_code" json:"country_code,omitempty"`
	NodeOrState      *uint32  `protobuf:"varint,8,opt,name=node_or_state" json:"node_or_state,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTATournament_Team) Reset()         { *m = CMsgDOTATournament_Team{} }
func (m *CMsgDOTATournament_Team) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Team) ProtoMessage()    {}

func (m *CMsgDOTATournament_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTATournament_Team) GetTeamAbbrev() string {
	if m != nil && m.TeamAbbrev != nil {
		return *m.TeamAbbrev
	}
	return ""
}

func (m *CMsgDOTATournament_Team) GetPlayers() []uint32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetSeed() uint32 {
	if m != nil && m.Seed != nil {
		return *m.Seed
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CMsgDOTATournament_Team) GetNodeOrState() uint32 {
	if m != nil && m.NodeOrState != nil {
		return *m.NodeOrState
	}
	return 0
}

type CMsgDOTATournament_Game struct {
	GameId           *uint32               `protobuf:"varint,1,opt,name=game_id" json:"game_id,omitempty"`
	GoodTeamId       *uint32               `protobuf:"varint,2,opt,name=good_team_id" json:"good_team_id,omitempty"`
	BadTeamId        *uint32               `protobuf:"varint,3,opt,name=bad_team_id" json:"bad_team_id,omitempty"`
	GoodTeamSeed     *uint32               `protobuf:"varint,12,opt,name=good_team_seed" json:"good_team_seed,omitempty"`
	BadTeamSeed      *uint32               `protobuf:"varint,13,opt,name=bad_team_seed" json:"bad_team_seed,omitempty"`
	LobbyId          *uint64               `protobuf:"fixed64,4,opt,name=lobby_id" json:"lobby_id,omitempty"`
	MatchId          *uint64               `protobuf:"varint,5,opt,name=match_id" json:"match_id,omitempty"`
	GameName         *string               `protobuf:"bytes,6,opt,name=game_name" json:"game_name,omitempty"`
	LiveStream       *bool                 `protobuf:"varint,7,opt,name=live_stream" json:"live_stream,omitempty"`
	Message          *string               `protobuf:"bytes,9,opt,name=message" json:"message,omitempty"`
	ResultsFinal     *bool                 `protobuf:"varint,10,opt,name=results_final" json:"results_final,omitempty"`
	State            *ETournamentGameState `protobuf:"varint,14,opt,name=state,enum=ETournamentGameState,def=0" json:"state,omitempty"`
	NodeId           *uint32               `protobuf:"varint,15,opt,name=node_id" json:"node_id,omitempty"`
	StartTime        *uint32               `protobuf:"varint,16,opt,name=start_time" json:"start_time,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Game) Reset()         { *m = CMsgDOTATournament_Game{} }
func (m *CMsgDOTATournament_Game) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Game) ProtoMessage()    {}

const Default_CMsgDOTATournament_Game_State ETournamentGameState = ETournamentGameState_k_ETournamentGameState_Unknown

func (m *CMsgDOTATournament_Game) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetGoodTeamId() uint32 {
	if m != nil && m.GoodTeamId != nil {
		return *m.GoodTeamId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetBadTeamId() uint32 {
	if m != nil && m.BadTeamId != nil {
		return *m.BadTeamId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetGoodTeamSeed() uint32 {
	if m != nil && m.GoodTeamSeed != nil {
		return *m.GoodTeamSeed
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetBadTeamSeed() uint32 {
	if m != nil && m.BadTeamSeed != nil {
		return *m.BadTeamSeed
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CMsgDOTATournament_Game) GetLiveStream() bool {
	if m != nil && m.LiveStream != nil {
		return *m.LiveStream
	}
	return false
}

func (m *CMsgDOTATournament_Game) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CMsgDOTATournament_Game) GetResultsFinal() bool {
	if m != nil && m.ResultsFinal != nil {
		return *m.ResultsFinal
	}
	return false
}

func (m *CMsgDOTATournament_Game) GetState() ETournamentGameState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_Game_State
}

func (m *CMsgDOTATournament_Game) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

type CMsgDOTATournament_Node struct {
	NodeId           *uint32               `protobuf:"varint,1,opt,name=node_id" json:"node_id,omitempty"`
	TeamSeedA        *uint32               `protobuf:"varint,2,opt,name=team_seed_a" json:"team_seed_a,omitempty"`
	TeamSeedB        *uint32               `protobuf:"varint,3,opt,name=team_seed_b" json:"team_seed_b,omitempty"`
	WinnerNode       *uint32               `protobuf:"varint,4,opt,name=winner_node" json:"winner_node,omitempty"`
	LoserNode        *uint32               `protobuf:"varint,5,opt,name=loser_node" json:"loser_node,omitempty"`
	SeriesType       *uint32               `protobuf:"varint,7,opt,name=series_type" json:"series_type,omitempty"`
	NodeState        *ETournamentNodeState `protobuf:"varint,8,opt,name=node_state,enum=ETournamentNodeState,def=0" json:"node_state,omitempty"`
	SeriesId         *uint32               `protobuf:"varint,9,opt,name=series_id" json:"series_id,omitempty"`
	StartTime        *uint32               `protobuf:"varint,16,opt,name=start_time" json:"start_time,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Node) Reset()         { *m = CMsgDOTATournament_Node{} }
func (m *CMsgDOTATournament_Node) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Node) ProtoMessage()    {}

const Default_CMsgDOTATournament_Node_NodeState ETournamentNodeState = ETournamentNodeState_k_ETournamentNodeState_Unknown

func (m *CMsgDOTATournament_Node) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamSeedA() uint32 {
	if m != nil && m.TeamSeedA != nil {
		return *m.TeamSeedA
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamSeedB() uint32 {
	if m != nil && m.TeamSeedB != nil {
		return *m.TeamSeedB
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetWinnerNode() uint32 {
	if m != nil && m.WinnerNode != nil {
		return *m.WinnerNode
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetLoserNode() uint32 {
	if m != nil && m.LoserNode != nil {
		return *m.LoserNode
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetNodeState() ETournamentNodeState {
	if m != nil && m.NodeState != nil {
		return *m.NodeState
	}
	return Default_CMsgDOTATournament_Node_NodeState
}

func (m *CMsgDOTATournament_Node) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

type CMsgDOTATournamentRequest struct {
	TournamentId        *uint32 `protobuf:"varint,1,opt,name=tournament_id" json:"tournament_id,omitempty"`
	ClientTournamentGid *uint64 `protobuf:"varint,2,opt,name=client_tournament_gid" json:"client_tournament_gid,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgDOTATournamentRequest) Reset()         { *m = CMsgDOTATournamentRequest{} }
func (m *CMsgDOTATournamentRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentRequest) ProtoMessage()    {}

func (m *CMsgDOTATournamentRequest) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournamentRequest) GetClientTournamentGid() uint64 {
	if m != nil && m.ClientTournamentGid != nil {
		return *m.ClientTournamentGid
	}
	return 0
}

type CMsgDOTATournamentResponse struct {
	Result           *uint32             `protobuf:"varint,1,opt,name=result,def=2" json:"result,omitempty"`
	Tournament       *CMsgDOTATournament `protobuf:"bytes,2,opt,name=tournament" json:"tournament,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CMsgDOTATournamentResponse) Reset()         { *m = CMsgDOTATournamentResponse{} }
func (m *CMsgDOTATournamentResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentResponse) ProtoMessage()    {}

const Default_CMsgDOTATournamentResponse_Result uint32 = 2

func (m *CMsgDOTATournamentResponse) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTATournamentResponse_Result
}

func (m *CMsgDOTATournamentResponse) GetTournament() *CMsgDOTATournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

type CMsgDOTAClearTournamentGame struct {
	TournamentId     *uint32 `protobuf:"varint,1,opt,name=tournament_id" json:"tournament_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id" json:"game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAClearTournamentGame) Reset()         { *m = CMsgDOTAClearTournamentGame{} }
func (m *CMsgDOTAClearTournamentGame) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAClearTournamentGame) ProtoMessage()    {}

func (m *CMsgDOTAClearTournamentGame) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTAClearTournamentGame) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

type CMsgDOTAPassportVoteTeamGuess struct {
	LeagueId         *uint32 `protobuf:"varint,1,opt,name=league_id" json:"league_id,omitempty"`
	WinnerId         *uint32 `protobuf:"varint,2,opt,name=winner_id" json:"winner_id,omitempty"`
	RunnerupId       *uint32 `protobuf:"varint,3,opt,name=runnerup_id" json:"runnerup_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportVoteTeamGuess) Reset()         { *m = CMsgDOTAPassportVoteTeamGuess{} }
func (m *CMsgDOTAPassportVoteTeamGuess) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteTeamGuess) ProtoMessage()    {}

func (m *CMsgDOTAPassportVoteTeamGuess) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetWinnerId() uint32 {
	if m != nil && m.WinnerId != nil {
		return *m.WinnerId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetRunnerupId() uint32 {
	if m != nil && m.RunnerupId != nil {
		return *m.RunnerupId
	}
	return 0
}

type CMsgDOTAPassportVoteGenericSelection struct {
	SelectionIndex   *DOTA_2013PassportSelectionIndices `protobuf:"varint,1,opt,name=selection_index,enum=DOTA_2013PassportSelectionIndices,def=0" json:"selection_index,omitempty"`
	Selection        *uint32                            `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *CMsgDOTAPassportVoteGenericSelection) Reset()         { *m = CMsgDOTAPassportVoteGenericSelection{} }
func (m *CMsgDOTAPassportVoteGenericSelection) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteGenericSelection) ProtoMessage()    {}

const Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex DOTA_2013PassportSelectionIndices = DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelectionIndex() DOTA_2013PassportSelectionIndices {
	if m != nil && m.SelectionIndex != nil {
		return *m.SelectionIndex
	}
	return Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex
}

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelection() uint32 {
	if m != nil && m.Selection != nil {
		return *m.Selection
	}
	return 0
}

type CMsgDOTAPassportStampedPlayer struct {
	SteamId          *uint64 `protobuf:"varint,1,opt,name=steam_id" json:"steam_id,omitempty"`
	StampLevel       *uint32 `protobuf:"varint,2,opt,name=stamp_level" json:"stamp_level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportStampedPlayer) Reset()         { *m = CMsgDOTAPassportStampedPlayer{} }
func (m *CMsgDOTAPassportStampedPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportStampedPlayer) ProtoMessage()    {}

func (m *CMsgDOTAPassportStampedPlayer) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgDOTAPassportStampedPlayer) GetStampLevel() uint32 {
	if m != nil && m.StampLevel != nil {
		return *m.StampLevel
	}
	return 0
}

type CMsgDOTAPassportPlayerCardChallenge struct {
	ChallengeId      *uint32 `protobuf:"varint,1,opt,name=challenge_id" json:"challenge_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportPlayerCardChallenge) Reset()         { *m = CMsgDOTAPassportPlayerCardChallenge{} }
func (m *CMsgDOTAPassportPlayerCardChallenge) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportPlayerCardChallenge) ProtoMessage()    {}

func (m *CMsgDOTAPassportPlayerCardChallenge) GetChallengeId() uint32 {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return 0
}

type CMsgDOTAPassportVote struct {
	TeamVotes            []*CMsgDOTAPassportVoteTeamGuess        `protobuf:"bytes,1,rep,name=team_votes" json:"team_votes,omitempty"`
	GenericSelections    []*CMsgDOTAPassportVoteGenericSelection `protobuf:"bytes,2,rep,name=generic_selections" json:"generic_selections,omitempty"`
	StampedPlayers       []*CMsgDOTAPassportStampedPlayer        `protobuf:"bytes,3,rep,name=stamped_players" json:"stamped_players,omitempty"`
	PlayerCardChallenges []*CMsgDOTAPassportPlayerCardChallenge  `protobuf:"bytes,4,rep,name=player_card_challenges" json:"player_card_challenges,omitempty"`
	XXX_unrecognized     []byte                                  `json:"-"`
}

func (m *CMsgDOTAPassportVote) Reset()         { *m = CMsgDOTAPassportVote{} }
func (m *CMsgDOTAPassportVote) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVote) ProtoMessage()    {}

func (m *CMsgDOTAPassportVote) GetTeamVotes() []*CMsgDOTAPassportVoteTeamGuess {
	if m != nil {
		return m.TeamVotes
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetGenericSelections() []*CMsgDOTAPassportVoteGenericSelection {
	if m != nil {
		return m.GenericSelections
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetStampedPlayers() []*CMsgDOTAPassportStampedPlayer {
	if m != nil {
		return m.StampedPlayers
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetPlayerCardChallenges() []*CMsgDOTAPassportPlayerCardChallenge {
	if m != nil {
		return m.PlayerCardChallenges
	}
	return nil
}

type CMsgPassportDataRequest struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPassportDataRequest) Reset()         { *m = CMsgPassportDataRequest{} }
func (m *CMsgPassportDataRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgPassportDataRequest) ProtoMessage()    {}

func (m *CMsgPassportDataRequest) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgPassportDataResponse struct {
	AccountId                    *uint32               `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Result                       *uint32               `protobuf:"varint,2,opt,name=result,def=2" json:"result,omitempty"`
	International                *CMsgDOTATournament   `protobuf:"bytes,5,opt,name=international" json:"international,omitempty"`
	EastQualifiersPredictEndTime *uint32               `protobuf:"varint,7,opt,name=east_qualifiers_predict_end_time" json:"east_qualifiers_predict_end_time,omitempty"`
	WestQualifiersPredictEndTime *uint32               `protobuf:"varint,8,opt,name=west_qualifiers_predict_end_time" json:"west_qualifiers_predict_end_time,omitempty"`
	AllstarMatchEndTime          *uint32               `protobuf:"varint,9,opt,name=allstar_match_end_time" json:"allstar_match_end_time,omitempty"`
	LeagueGuesses                *CMsgDOTAPassportVote `protobuf:"bytes,6,opt,name=league_guesses" json:"league_guesses,omitempty"`
	EastQualifiersWinnerTeamId   *uint32               `protobuf:"varint,10,opt,name=east_qualifiers_winner_team_id" json:"east_qualifiers_winner_team_id,omitempty"`
	EastQualifiersRunnerUpTeamId *uint32               `protobuf:"varint,11,opt,name=east_qualifiers_runner_up_team_id" json:"east_qualifiers_runner_up_team_id,omitempty"`
	WestQualifiersWinnerTeamId   *uint32               `protobuf:"varint,12,opt,name=west_qualifiers_winner_team_id" json:"west_qualifiers_winner_team_id,omitempty"`
	WestQualifiersRunnerUpTeamId *uint32               `protobuf:"varint,13,opt,name=west_qualifiers_runner_up_team_id" json:"west_qualifiers_runner_up_team_id,omitempty"`
	PassportsBought              *uint32               `protobuf:"varint,14,opt,name=passports_bought" json:"passports_bought,omitempty"`
	OriginalPurchaserId          *uint32               `protobuf:"varint,15,opt,name=original_purchaser_id" json:"original_purchaser_id,omitempty"`
	FantasyTeamCount             *uint32               `protobuf:"varint,16,opt,name=fantasy_team_count" json:"fantasy_team_count,omitempty"`
	FantasyTeamexpiration        *uint32               `protobuf:"varint,17,opt,name=fantasy_teamexpiration" json:"fantasy_teamexpiration,omitempty"`
	FantasyTeamsWillLockAt       *uint32               `protobuf:"varint,18,opt,name=fantasy_teams_will_lock_at" json:"fantasy_teams_will_lock_at,omitempty"`
	XXX_unrecognized             []byte                `json:"-"`
}

func (m *CMsgPassportDataResponse) Reset()         { *m = CMsgPassportDataResponse{} }
func (m *CMsgPassportDataResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgPassportDataResponse) ProtoMessage()    {}

const Default_CMsgPassportDataResponse_Result uint32 = 2

func (m *CMsgPassportDataResponse) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgPassportDataResponse_Result
}

func (m *CMsgPassportDataResponse) GetInternational() *CMsgDOTATournament {
	if m != nil {
		return m.International
	}
	return nil
}

func (m *CMsgPassportDataResponse) GetEastQualifiersPredictEndTime() uint32 {
	if m != nil && m.EastQualifiersPredictEndTime != nil {
		return *m.EastQualifiersPredictEndTime
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetWestQualifiersPredictEndTime() uint32 {
	if m != nil && m.WestQualifiersPredictEndTime != nil {
		return *m.WestQualifiersPredictEndTime
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetAllstarMatchEndTime() uint32 {
	if m != nil && m.AllstarMatchEndTime != nil {
		return *m.AllstarMatchEndTime
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetLeagueGuesses() *CMsgDOTAPassportVote {
	if m != nil {
		return m.LeagueGuesses
	}
	return nil
}

func (m *CMsgPassportDataResponse) GetEastQualifiersWinnerTeamId() uint32 {
	if m != nil && m.EastQualifiersWinnerTeamId != nil {
		return *m.EastQualifiersWinnerTeamId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetEastQualifiersRunnerUpTeamId() uint32 {
	if m != nil && m.EastQualifiersRunnerUpTeamId != nil {
		return *m.EastQualifiersRunnerUpTeamId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetWestQualifiersWinnerTeamId() uint32 {
	if m != nil && m.WestQualifiersWinnerTeamId != nil {
		return *m.WestQualifiersWinnerTeamId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetWestQualifiersRunnerUpTeamId() uint32 {
	if m != nil && m.WestQualifiersRunnerUpTeamId != nil {
		return *m.WestQualifiersRunnerUpTeamId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetPassportsBought() uint32 {
	if m != nil && m.PassportsBought != nil {
		return *m.PassportsBought
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetOriginalPurchaserId() uint32 {
	if m != nil && m.OriginalPurchaserId != nil {
		return *m.OriginalPurchaserId
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetFantasyTeamCount() uint32 {
	if m != nil && m.FantasyTeamCount != nil {
		return *m.FantasyTeamCount
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetFantasyTeamexpiration() uint32 {
	if m != nil && m.FantasyTeamexpiration != nil {
		return *m.FantasyTeamexpiration
	}
	return 0
}

func (m *CMsgPassportDataResponse) GetFantasyTeamsWillLockAt() uint32 {
	if m != nil && m.FantasyTeamsWillLockAt != nil {
		return *m.FantasyTeamsWillLockAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("ETournamentGameState", ETournamentGameState_name, ETournamentGameState_value)
	proto.RegisterEnum("ETournamentTeamState", ETournamentTeamState_name, ETournamentTeamState_value)
	proto.RegisterEnum("ETournamentState", ETournamentState_name, ETournamentState_value)
	proto.RegisterEnum("ETournamentNodeState", ETournamentNodeState_name, ETournamentNodeState_value)
	proto.RegisterEnum("DOTA_2013PassportSelectionIndices", DOTA_2013PassportSelectionIndices_name, DOTA_2013PassportSelectionIndices_value)
	proto.RegisterEnum("CMsgDOTACreateFantasyLeagueResponse_EResult", CMsgDOTACreateFantasyLeagueResponse_EResult_name, CMsgDOTACreateFantasyLeagueResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueEditInfoResponse_EResult", CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name, CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueFindResponse_EResult", CMsgDOTAFantasyLeagueFindResponse_EResult_name, CMsgDOTAFantasyLeagueFindResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueInfoResponse_EResult", CMsgDOTAFantasyLeagueInfoResponse_EResult_name, CMsgDOTAFantasyLeagueInfoResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueMatchupsResponse_EResult", CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name, CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAEditFantasyTeamResponse_EResult", CMsgDOTAEditFantasyTeamResponse_EResult_name, CMsgDOTAEditFantasyTeamResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamScoreResponse_EResult", CMsgDOTAFantasyTeamScoreResponse_EResult_name, CMsgDOTAFantasyTeamScoreResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamStandingsResponse_EResult", CMsgDOTAFantasyTeamStandingsResponse_EResult_name, CMsgDOTAFantasyTeamStandingsResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyPlayerScoreResponse_EResult", CMsgDOTAFantasyPlayerScoreResponse_EResult_name, CMsgDOTAFantasyPlayerScoreResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyPlayerStandingsResponse_EResult", CMsgDOTAFantasyPlayerStandingsResponse_EResult_name, CMsgDOTAFantasyPlayerStandingsResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueCreateResponse_EResult", CMsgDOTAFantasyLeagueCreateResponse_EResult_name, CMsgDOTAFantasyLeagueCreateResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamCreateResponse_EResult", CMsgDOTAFantasyTeamCreateResponse_EResult_name, CMsgDOTAFantasyTeamCreateResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueEditInvitesResponse_EResult", CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name, CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult", CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name, CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamRosterSwapResponse_EResult", CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name, CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamRosterAddDropResponse_EResult", CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name, CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamTradesResponse_EResult", CMsgDOTAFantasyTeamTradesResponse_EResult_name, CMsgDOTAFantasyTeamTradesResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamTradeCancelResponse_EResult", CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name, CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyTeamRosterResponse_EResult", CMsgDOTAFantasyTeamRosterResponse_EResult_name, CMsgDOTAFantasyTeamRosterResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult", CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name, CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyMessagesResponse_EResult", CMsgDOTAFantasyMessagesResponse_EResult_name, CMsgDOTAFantasyMessagesResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyRemoveOwnerResponse_EResult", CMsgDOTAFantasyRemoveOwnerResponse_EResult_name, CMsgDOTAFantasyRemoveOwnerResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyScheduledMatchesResponse_EResult", CMsgDOTAFantasyScheduledMatchesResponse_EResult_name, CMsgDOTAFantasyScheduledMatchesResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyLeaveLeagueResponse_EResult", CMsgDOTAFantasyLeaveLeagueResponse_EResult_name, CMsgDOTAFantasyLeaveLeagueResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult", CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name, CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value)
}
