// Code generated by protoc-gen-go.
// source: dota_gcmessages_common.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/13k/go-steam-resources/protobuf/gc"
import gcsdk_gcmessages "github.com/13k/go-steam-resources/protobuf/gc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EDOTAGCMsg int32

const (
	EDOTAGCMsg_k_EMsgGCDOTABase                                           EDOTAGCMsg = 7000
	EDOTAGCMsg_k_EMsgGCGeneralResponse                                    EDOTAGCMsg = 7001
	EDOTAGCMsg_k_EMsgGCGameMatchSignOut                                   EDOTAGCMsg = 7004
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutResponse                           EDOTAGCMsg = 7005
	EDOTAGCMsg_k_EMsgGCJoinChatChannel                                    EDOTAGCMsg = 7009
	EDOTAGCMsg_k_EMsgGCJoinChatChannelResponse                            EDOTAGCMsg = 7010
	EDOTAGCMsg_k_EMsgGCOtherJoinedChannel                                 EDOTAGCMsg = 7013
	EDOTAGCMsg_k_EMsgGCOtherLeftChannel                                   EDOTAGCMsg = 7014
	EDOTAGCMsg_k_EMsgGCMatchHistoryList                                   EDOTAGCMsg = 7017
	EDOTAGCMsg_k_EMsgServerToGCRequestStatus                              EDOTAGCMsg = 7026
	EDOTAGCMsg_k_EMsgGCGetRecentMatches                                   EDOTAGCMsg = 7027
	EDOTAGCMsg_k_EMsgGCRecentMatchesResponse                              EDOTAGCMsg = 7028
	EDOTAGCMsg_k_EMsgGCStartFindingMatch                                  EDOTAGCMsg = 7033
	EDOTAGCMsg_k_EMsgGCConnectedPlayers                                   EDOTAGCMsg = 7034
	EDOTAGCMsg_k_EMsgGCAbandonCurrentGame                                 EDOTAGCMsg = 7035
	EDOTAGCMsg_k_EMsgGCStopFindingMatch                                   EDOTAGCMsg = 7036
	EDOTAGCMsg_k_EMsgGCPracticeLobbyCreate                                EDOTAGCMsg = 7038
	EDOTAGCMsg_k_EMsgGCPracticeLobbyLeave                                 EDOTAGCMsg = 7040
	EDOTAGCMsg_k_EMsgGCPracticeLobbyLaunch                                EDOTAGCMsg = 7041
	EDOTAGCMsg_k_EMsgGCPracticeLobbyList                                  EDOTAGCMsg = 7042
	EDOTAGCMsg_k_EMsgGCPracticeLobbyListResponse                          EDOTAGCMsg = 7043
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoin                                  EDOTAGCMsg = 7044
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetDetails                            EDOTAGCMsg = 7046
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetTeamSlot                           EDOTAGCMsg = 7047
	EDOTAGCMsg_k_EMsgGCInitialQuestionnaireResponse                       EDOTAGCMsg = 7049
	EDOTAGCMsg_k_EMsgGCTournamentRequest                                  EDOTAGCMsg = 7051
	EDOTAGCMsg_k_EMsgGCTournamentResponse                                 EDOTAGCMsg = 7052
	EDOTAGCMsg_k_EMsgGCPracticeLobbyResponse                              EDOTAGCMsg = 7055
	EDOTAGCMsg_k_EMsgGCBroadcastNotification                              EDOTAGCMsg = 7056
	EDOTAGCMsg_k_EMsgGCLiveScoreboardUpdate                               EDOTAGCMsg = 7057
	EDOTAGCMsg_k_EMsgGCRequestChatChannelList                             EDOTAGCMsg = 7060
	EDOTAGCMsg_k_EMsgGCRequestChatChannelListResponse                     EDOTAGCMsg = 7061
	EDOTAGCMsg_k_EMsgGCRequestMatches                                     EDOTAGCMsg = 7064
	EDOTAGCMsg_k_EMsgGCRequestMatchesResponse                             EDOTAGCMsg = 7065
	EDOTAGCMsg_k_EMsgGCRequestPlayerResources                             EDOTAGCMsg = 7068
	EDOTAGCMsg_k_EMsgGCRequestPlayerResourcesResponse                     EDOTAGCMsg = 7069
	EDOTAGCMsg_k_EMsgGCReadyUp                                            EDOTAGCMsg = 7070
	EDOTAGCMsg_k_EMsgGCKickedFromMatchmakingQueue                         EDOTAGCMsg = 7071
	EDOTAGCMsg_k_EMsgGCLeaverDetected                                     EDOTAGCMsg = 7072
	EDOTAGCMsg_k_EMsgGCSpectateFriendGame                                 EDOTAGCMsg = 7073
	EDOTAGCMsg_k_EMsgGCSpectateFriendGameResponse                         EDOTAGCMsg = 7074
	EDOTAGCMsg_k_EMsgGCPlayerReports                                      EDOTAGCMsg = 7075
	EDOTAGCMsg_k_EMsgGCReportsRemainingRequest                            EDOTAGCMsg = 7076
	EDOTAGCMsg_k_EMsgGCReportsRemainingResponse                           EDOTAGCMsg = 7077
	EDOTAGCMsg_k_EMsgGCSubmitPlayerReport                                 EDOTAGCMsg = 7078
	EDOTAGCMsg_k_EMsgGCSubmitPlayerReportResponse                         EDOTAGCMsg = 7079
	EDOTAGCMsg_k_EMsgGCGameChatLog                                        EDOTAGCMsg = 7080
	EDOTAGCMsg_k_EMsgGCPracticeLobbyKick                                  EDOTAGCMsg = 7081
	EDOTAGCMsg_k_EMsgGCReportCountsRequest                                EDOTAGCMsg = 7082
	EDOTAGCMsg_k_EMsgGCReportCountsResponse                               EDOTAGCMsg = 7083
	EDOTAGCMsg_k_EMsgGCRequestSaveGames                                   EDOTAGCMsg = 7084
	EDOTAGCMsg_k_EMsgGCRequestSaveGamesServer                             EDOTAGCMsg = 7085
	EDOTAGCMsg_k_EMsgGCRequestSaveGamesResponse                           EDOTAGCMsg = 7086
	EDOTAGCMsg_k_EMsgGCLeaverDetectedResponse                             EDOTAGCMsg = 7087
	EDOTAGCMsg_k_EMsgGCPlayerFailedToConnect                              EDOTAGCMsg = 7088
	EDOTAGCMsg_k_EMsgGCGCToRelayConnect                                   EDOTAGCMsg = 7089
	EDOTAGCMsg_k_EMsgGCGCToRelayConnectresponse                           EDOTAGCMsg = 7090
	EDOTAGCMsg_k_EMsgGCWatchGame                                          EDOTAGCMsg = 7091
	EDOTAGCMsg_k_EMsgGCWatchGameResponse                                  EDOTAGCMsg = 7092
	EDOTAGCMsg_k_EMsgGCBanStatusRequest                                   EDOTAGCMsg = 7093
	EDOTAGCMsg_k_EMsgGCBanStatusResponse                                  EDOTAGCMsg = 7094
	EDOTAGCMsg_k_EMsgGCMatchDetailsRequest                                EDOTAGCMsg = 7095
	EDOTAGCMsg_k_EMsgGCMatchDetailsResponse                               EDOTAGCMsg = 7096
	EDOTAGCMsg_k_EMsgGCCancelWatchGame                                    EDOTAGCMsg = 7097
	EDOTAGCMsg_k_EMsgGCProfileRequest                                     EDOTAGCMsg = 7098
	EDOTAGCMsg_k_EMsgGCProfileResponse                                    EDOTAGCMsg = 7099
	EDOTAGCMsg_k_EMsgGCPopup                                              EDOTAGCMsg = 7102
	EDOTAGCMsg_k_EMsgGCDOTAClearNotifySuccessfulReport                    EDOTAGCMsg = 7104
	EDOTAGCMsg_k_EMsgGCGenericResult                                      EDOTAGCMsg = 7108
	EDOTAGCMsg_k_EMsgGCFriendPracticeLobbyListRequest                     EDOTAGCMsg = 7111
	EDOTAGCMsg_k_EMsgGCFriendPracticeLobbyListResponse                    EDOTAGCMsg = 7112
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoinResponse                          EDOTAGCMsg = 7113
	EDOTAGCMsg_k_EMsgClientEconNotification_Job                           EDOTAGCMsg = 7114
	EDOTAGCMsg_k_EMsgGCCreateTeam                                         EDOTAGCMsg = 7115
	EDOTAGCMsg_k_EMsgGCCreateTeamResponse                                 EDOTAGCMsg = 7116
	EDOTAGCMsg_k_EMsgGCDisbandTeam                                        EDOTAGCMsg = 7117
	EDOTAGCMsg_k_EMsgGCDisbandTeamResponse                                EDOTAGCMsg = 7118
	EDOTAGCMsg_k_EMsgGCRequestTeamData                                    EDOTAGCMsg = 7119
	EDOTAGCMsg_k_EMsgGCRequestTeamDataResponse                            EDOTAGCMsg = 7120
	EDOTAGCMsg_k_EMsgGCTeamData                                           EDOTAGCMsg = 7121
	EDOTAGCMsg_k_EMsgGCTeamInvite_InviterToGC                             EDOTAGCMsg = 7122
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCImmediateResponseToInviter            EDOTAGCMsg = 7123
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCRequestToInvitee                      EDOTAGCMsg = 7124
	EDOTAGCMsg_k_EMsgGCTeamInvite_InviteeResponseToGC                     EDOTAGCMsg = 7125
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCResponseToInviter                     EDOTAGCMsg = 7126
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCResponseToInvitee                     EDOTAGCMsg = 7127
	EDOTAGCMsg_k_EMsgGCKickTeamMember                                     EDOTAGCMsg = 7128
	EDOTAGCMsg_k_EMsgGCKickTeamMemberResponse                             EDOTAGCMsg = 7129
	EDOTAGCMsg_k_EMsgGCLeaveTeam                                          EDOTAGCMsg = 7130
	EDOTAGCMsg_k_EMsgGCLeaveTeamResponse                                  EDOTAGCMsg = 7131
	EDOTAGCMsg_k_EMsgGCSuggestTeamMatchmaking                             EDOTAGCMsg = 7132
	EDOTAGCMsg_k_EMsgGCPlayerHeroesFavoritesAdd                           EDOTAGCMsg = 7133
	EDOTAGCMsg_k_EMsgGCPlayerHeroesFavoritesRemove                        EDOTAGCMsg = 7134
	EDOTAGCMsg_k_EMsgGCEditTeamLogo                                       EDOTAGCMsg = 7139
	EDOTAGCMsg_k_EMsgGCEditTeamLogoResponse                               EDOTAGCMsg = 7140
	EDOTAGCMsg_k_EMsgGCSetShowcaseHero                                    EDOTAGCMsg = 7141
	EDOTAGCMsg_k_EMsgGCApplyTeamToPracticeLobby                           EDOTAGCMsg = 7142
	EDOTAGCMsg_k_EMsgGCRequestInternatinalTicketEmail                     EDOTAGCMsg = 7143
	EDOTAGCMsg_k_EMsgGCTransferTeamAdmin                                  EDOTAGCMsg = 7144
	EDOTAGCMsg_k_EMsgGCClearTournamentGame                                EDOTAGCMsg = 7145
	EDOTAGCMsg_k_EMsgRequestLeagueInfo                                    EDOTAGCMsg = 7147
	EDOTAGCMsg_k_EMsgResponseLeagueInfo                                   EDOTAGCMsg = 7148
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoinBroadcastChannel                  EDOTAGCMsg = 7149
	EDOTAGCMsg_k_EMsgGC_TournamentItemEvent                               EDOTAGCMsg = 7150
	EDOTAGCMsg_k_EMsgGC_TournamentItemEventResponse                       EDOTAGCMsg = 7151
	EDOTAGCMsg_k_EMsgCastMatchVote                                        EDOTAGCMsg = 7152
	EDOTAGCMsg_k_EMsgCastMatchVoteResponse                                EDOTAGCMsg = 7153
	EDOTAGCMsg_k_EMsgRetrieveMatchVote                                    EDOTAGCMsg = 7154
	EDOTAGCMsg_k_EMsgRetrieveMatchVoteResponse                            EDOTAGCMsg = 7155
	EDOTAGCMsg_k_EMsgTeamFanfare                                          EDOTAGCMsg = 7156
	EDOTAGCMsg_k_EMsgResponseTeamFanfare                                  EDOTAGCMsg = 7157
	EDOTAGCMsg_k_EMsgGC_GameServerUploadSaveGame                          EDOTAGCMsg = 7158
	EDOTAGCMsg_k_EMsgGC_GameServerSaveGameResult                          EDOTAGCMsg = 7159
	EDOTAGCMsg_k_EMsgGC_GameServerGetLoadGame                             EDOTAGCMsg = 7160
	EDOTAGCMsg_k_EMsgGC_GameServerGetLoadGameResult                       EDOTAGCMsg = 7161
	EDOTAGCMsg_k_EMsgGCTeamProfileRequest                                 EDOTAGCMsg = 7164
	EDOTAGCMsg_k_EMsgGCTeamProfileResponse                                EDOTAGCMsg = 7165
	EDOTAGCMsg_k_EMsgGCEditTeamDetails                                    EDOTAGCMsg = 7166
	EDOTAGCMsg_k_EMsgGCEditTeamDetailsResponse                            EDOTAGCMsg = 7167
	EDOTAGCMsg_k_EMsgGCProTeamListRequest                                 EDOTAGCMsg = 7168
	EDOTAGCMsg_k_EMsgGCProTeamListResponse                                EDOTAGCMsg = 7169
	EDOTAGCMsg_k_EMsgGCReadyUpStatus                                      EDOTAGCMsg = 7170
	EDOTAGCMsg_k_EMsgGCHallOfFame                                         EDOTAGCMsg = 7171
	EDOTAGCMsg_k_EMsgGCHallOfFameRequest                                  EDOTAGCMsg = 7172
	EDOTAGCMsg_k_EMsgGCHallOfFameResponse                                 EDOTAGCMsg = 7173
	EDOTAGCMsg_k_EMsgGCGenerateDiretidePrizeList                          EDOTAGCMsg = 7174
	EDOTAGCMsg_k_EMsgGCRewardDiretidePrizes                               EDOTAGCMsg = 7176
	EDOTAGCMsg_k_EMsgGCDiretidePrizesRewardedResponse                     EDOTAGCMsg = 7177
	EDOTAGCMsg_k_EMsgGCHalloweenHighScoreRequest                          EDOTAGCMsg = 7178
	EDOTAGCMsg_k_EMsgGCHalloweenHighScoreResponse                         EDOTAGCMsg = 7179
	EDOTAGCMsg_k_EMsgGCGenerateDiretidePrizeListResponse                  EDOTAGCMsg = 7180
	EDOTAGCMsg_k_EMsgGCStorePromoPagesRequest                             EDOTAGCMsg = 7182
	EDOTAGCMsg_k_EMsgGCStorePromoPagesResponse                            EDOTAGCMsg = 7183
	EDOTAGCMsg_k_EMsgGCSpawnLootGreevil                                   EDOTAGCMsg = 7184
	EDOTAGCMsg_k_EMsgGCDismissLootGreevil                                 EDOTAGCMsg = 7185
	EDOTAGCMsg_k_EMsgGCToGCMatchCompleted                                 EDOTAGCMsg = 7186
	EDOTAGCMsg_k_EMsgGCDismissLootGreevilResponse                         EDOTAGCMsg = 7187
	EDOTAGCMsg_k_EMsgGCBalancedShuffleLobby                               EDOTAGCMsg = 7188
	EDOTAGCMsg_k_EMsgGCToGCCheckLeaguePermission                          EDOTAGCMsg = 7189
	EDOTAGCMsg_k_EMsgGCToGCCheckLeaguePermissionResponse                  EDOTAGCMsg = 7190
	EDOTAGCMsg_k_EMsgGCLeagueScheduleRequest                              EDOTAGCMsg = 7191
	EDOTAGCMsg_k_EMsgGCLeagueScheduleResponse                             EDOTAGCMsg = 7192
	EDOTAGCMsg_k_EMsgGCLeagueScheduleEdit                                 EDOTAGCMsg = 7193
	EDOTAGCMsg_k_EMsgGCLeagueScheduleEditResponse                         EDOTAGCMsg = 7194
	EDOTAGCMsg_k_EMsgGCLeaguesInMonthRequest                              EDOTAGCMsg = 7195
	EDOTAGCMsg_k_EMsgGCLeaguesInMonthResponse                             EDOTAGCMsg = 7196
	EDOTAGCMsg_k_EMsgGCMatchmakingStatsRequest                            EDOTAGCMsg = 7197
	EDOTAGCMsg_k_EMsgGCMatchmakingStatsResponse                           EDOTAGCMsg = 7198
	EDOTAGCMsg_k_EMsgGCBotGameCreate                                      EDOTAGCMsg = 7199
	EDOTAGCMsg_k_EMsgGCSetMatchHistoryAccess                              EDOTAGCMsg = 7200
	EDOTAGCMsg_k_EMsgGCSetMatchHistoryAccessResponse                      EDOTAGCMsg = 7201
	EDOTAGCMsg_k_EMsgUpgradeLeagueItem                                    EDOTAGCMsg = 7203
	EDOTAGCMsg_k_EMsgUpgradeLeagueItemResponse                            EDOTAGCMsg = 7204
	EDOTAGCMsg_k_EMsgGCTeamMemberProfileRequest                           EDOTAGCMsg = 7205
	EDOTAGCMsg_k_EMsgGCWatchDownloadedReplay                              EDOTAGCMsg = 7206
	EDOTAGCMsg_k_EMsgGCSetMapLocationState                                EDOTAGCMsg = 7207
	EDOTAGCMsg_k_EMsgGCSetMapLocationStateResponse                        EDOTAGCMsg = 7208
	EDOTAGCMsg_k_EMsgGCResetMapLocations                                  EDOTAGCMsg = 7209
	EDOTAGCMsg_k_EMsgGCResetMapLocationsResponse                          EDOTAGCMsg = 7210
	EDOTAGCMsg_k_EMsgGCTeamOnProfile                                      EDOTAGCMsg = 7211
	EDOTAGCMsg_k_EMsgGCSetFeaturedItems                                   EDOTAGCMsg = 7212
	EDOTAGCMsg_k_EMsgGCFeaturedItems                                      EDOTAGCMsg = 7215
	EDOTAGCMsg_k_EMsgRefreshPartnerAccountLink                            EDOTAGCMsg = 7216
	EDOTAGCMsg_k_EMsgClientsRejoinChatChannels                            EDOTAGCMsg = 7217
	EDOTAGCMsg_k_EMsgGCToGCGetUserChatInfo                                EDOTAGCMsg = 7218
	EDOTAGCMsg_k_EMsgGCToGCGetUserChatInfoResponse                        EDOTAGCMsg = 7219
	EDOTAGCMsg_k_EMsgGCToGCLeaveAllChatChannels                           EDOTAGCMsg = 7220
	EDOTAGCMsg_k_EMsgGCToGCUpdateAccountChatBan                           EDOTAGCMsg = 7221
	EDOTAGCMsg_k_EMsgGCGuildCreateRequest                                 EDOTAGCMsg = 7222
	EDOTAGCMsg_k_EMsgGCGuildCreateResponse                                EDOTAGCMsg = 7223
	EDOTAGCMsg_k_EMsgGCGuildSetAccountRoleRequest                         EDOTAGCMsg = 7224
	EDOTAGCMsg_k_EMsgGCGuildSetAccountRoleResponse                        EDOTAGCMsg = 7225
	EDOTAGCMsg_k_EMsgGCRequestGuildData                                   EDOTAGCMsg = 7226
	EDOTAGCMsg_k_EMsgGCGuildData                                          EDOTAGCMsg = 7227
	EDOTAGCMsg_k_EMsgGCGuildInviteAccountRequest                          EDOTAGCMsg = 7228
	EDOTAGCMsg_k_EMsgGCGuildInviteAccountResponse                         EDOTAGCMsg = 7229
	EDOTAGCMsg_k_EMsgGCGuildCancelInviteRequest                           EDOTAGCMsg = 7230
	EDOTAGCMsg_k_EMsgGCGuildCancelInviteResponse                          EDOTAGCMsg = 7231
	EDOTAGCMsg_k_EMsgGCGuildUpdateDetailsRequest                          EDOTAGCMsg = 7232
	EDOTAGCMsg_k_EMsgGCGuildUpdateDetailsResponse                         EDOTAGCMsg = 7233
	EDOTAGCMsg_k_EMsgGCToGCCanInviteUser                                  EDOTAGCMsg = 7234
	EDOTAGCMsg_k_EMsgGCToGCCanInviteUserResponse                          EDOTAGCMsg = 7235
	EDOTAGCMsg_k_EMsgGCToGCGetUserRank                                    EDOTAGCMsg = 7236
	EDOTAGCMsg_k_EMsgGCToGCGetUserRankResponse                            EDOTAGCMsg = 7237
	EDOTAGCMsg_k_EMsgGCToGCUpdateTeamStats                                EDOTAGCMsg = 7240
	EDOTAGCMsg_k_EMsgGCToGCGetTeamRank                                    EDOTAGCMsg = 7241
	EDOTAGCMsg_k_EMsgGCToGCGetTeamRankResponse                            EDOTAGCMsg = 7242
	EDOTAGCMsg_k_EMsgGCTeamIDByNameRequest                                EDOTAGCMsg = 7245
	EDOTAGCMsg_k_EMsgGCTeamIDByNameResponse                               EDOTAGCMsg = 7246
	EDOTAGCMsg_k_EMsgGCEditTeam                                           EDOTAGCMsg = 7247
	EDOTAGCMsg_k_EMsgGCPassportDataRequest                                EDOTAGCMsg = 7248
	EDOTAGCMsg_k_EMsgGCPassportDataResponse                               EDOTAGCMsg = 7249
	EDOTAGCMsg_k_EMsgGCNotInGuildData                                     EDOTAGCMsg = 7251
	EDOTAGCMsg_k_EMsgGCGuildInviteData                                    EDOTAGCMsg = 7254
	EDOTAGCMsg_k_EMsgGCToGCGetLeagueAdmin                                 EDOTAGCMsg = 7255
	EDOTAGCMsg_k_EMsgGCToGCGetLeagueAdminResponse                         EDOTAGCMsg = 7256
	EDOTAGCMsg_k_EMsgGCRequestLeaguePrizePool                             EDOTAGCMsg = 7258
	EDOTAGCMsg_k_EMsgGCRequestLeaguePrizePoolResponse                     EDOTAGCMsg = 7259
	EDOTAGCMsg_k_EMsgGCToGCUpdateOpenGuildPartyRequest                    EDOTAGCMsg = 7261
	EDOTAGCMsg_k_EMsgGCToGCUpdateOpenGuildPartyResponse                   EDOTAGCMsg = 7262
	EDOTAGCMsg_k_EMsgGCToGCDestroyOpenGuildPartyRequest                   EDOTAGCMsg = 7263
	EDOTAGCMsg_k_EMsgGCToGCDestroyOpenGuildPartyResponse                  EDOTAGCMsg = 7264
	EDOTAGCMsg_k_EMsgGCGuildUpdateMessage                                 EDOTAGCMsg = 7265
	EDOTAGCMsg_k_EMsgGCPartySetOpenGuildRequest                           EDOTAGCMsg = 7266
	EDOTAGCMsg_k_EMsgGCPartySetOpenGuildResponse                          EDOTAGCMsg = 7267
	EDOTAGCMsg_k_EMsgGCGuildOpenPartyRefresh                              EDOTAGCMsg = 7268
	EDOTAGCMsg_k_EMsgGCJoinOpenGuildPartyRequest                          EDOTAGCMsg = 7269
	EDOTAGCMsg_k_EMsgGCJoinOpenGuildPartyResponse                         EDOTAGCMsg = 7270
	EDOTAGCMsg_k_EMsgGCLeaveChatChannel                                   EDOTAGCMsg = 7272
	EDOTAGCMsg_k_EMsgGCChatMessage                                        EDOTAGCMsg = 7273
	EDOTAGCMsg_k_EMsgGCGetHeroStandings                                   EDOTAGCMsg = 7274
	EDOTAGCMsg_k_EMsgGCGetHeroStandingsResponse                           EDOTAGCMsg = 7275
	EDOTAGCMsg_k_EMsgGCGuildEditLogoRequest                               EDOTAGCMsg = 7279
	EDOTAGCMsg_k_EMsgGCGuildEditLogoResponse                              EDOTAGCMsg = 7280
	EDOTAGCMsg_k_EMsgGCGuildmatePracticeLobbyListRequest                  EDOTAGCMsg = 7281
	EDOTAGCMsg_k_EMsgGCGuildmatePracticeLobbyListResponse                 EDOTAGCMsg = 7282
	EDOTAGCMsg_k_EMsgGCItemEditorReservationsRequest                      EDOTAGCMsg = 7283
	EDOTAGCMsg_k_EMsgGCItemEditorReservationsResponse                     EDOTAGCMsg = 7284
	EDOTAGCMsg_k_EMsgGCItemEditorReserveItemDef                           EDOTAGCMsg = 7285
	EDOTAGCMsg_k_EMsgGCItemEditorReserveItemDefResponse                   EDOTAGCMsg = 7286
	EDOTAGCMsg_k_EMsgGCItemEditorReleaseReservation                       EDOTAGCMsg = 7287
	EDOTAGCMsg_k_EMsgGCItemEditorReleaseReservationResponse               EDOTAGCMsg = 7288
	EDOTAGCMsg_k_EMsgGCRewardTutorialPrizes                               EDOTAGCMsg = 7289
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScorePost                      EDOTAGCMsg = 7290
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScoreRequest                   EDOTAGCMsg = 7291
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScoreResponse                  EDOTAGCMsg = 7292
	EDOTAGCMsg_k_EMsgGCCreateFantasyLeagueRequest                         EDOTAGCMsg = 7293
	EDOTAGCMsg_k_EMsgGCCreateFantasyLeagueResponse                        EDOTAGCMsg = 7294
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfoRequest                           EDOTAGCMsg = 7297
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfoResponse                          EDOTAGCMsg = 7298
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfo                                  EDOTAGCMsg = 7299
	EDOTAGCMsg_k_EMsgGCCreateFantasyTeamRequest                           EDOTAGCMsg = 7300
	EDOTAGCMsg_k_EMsgGCCreateFantasyTeamResponse                          EDOTAGCMsg = 7301
	EDOTAGCMsg_k_EMsgGCEditFantasyTeamRequest                             EDOTAGCMsg = 7302
	EDOTAGCMsg_k_EMsgGCEditFantasyTeamResponse                            EDOTAGCMsg = 7303
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID            EDOTAGCMsg = 7304
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID             EDOTAGCMsg = 7305
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoResponse                            EDOTAGCMsg = 7306
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfo                                    EDOTAGCMsg = 7307
	EDOTAGCMsg_k_EMsgGCFantasyLivePlayerStats                             EDOTAGCMsg = 7308
	EDOTAGCMsg_k_EMsgGCFantasyFinalPlayerStats                            EDOTAGCMsg = 7309
	EDOTAGCMsg_k_EMsgGCFantasyMatch                                       EDOTAGCMsg = 7310
	EDOTAGCMsg_k_EMsgGCToGCReloadVersions                                 EDOTAGCMsg = 7311
	EDOTAGCMsg_k_EMsgGCFantasyTeamScoreRequest                            EDOTAGCMsg = 7312
	EDOTAGCMsg_k_EMsgGCFantasyTeamScoreResponse                           EDOTAGCMsg = 7313
	EDOTAGCMsg_k_EMsgGCFantasyTeamStandingsRequest                        EDOTAGCMsg = 7314
	EDOTAGCMsg_k_EMsgGCFantasyTeamStandingsResponse                       EDOTAGCMsg = 7315
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreRequest                          EDOTAGCMsg = 7316
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreResponse                         EDOTAGCMsg = 7317
	EDOTAGCMsg_k_EMsgGCFantasyPlayerStandingsRequest                      EDOTAGCMsg = 7318
	EDOTAGCMsg_k_EMsgGCFantasyPlayerStandingsResponse                     EDOTAGCMsg = 7319
	EDOTAGCMsg_k_EMsgGCFlipLobbyTeams                                     EDOTAGCMsg = 7320
	EDOTAGCMsg_k_EMsgGCCustomGameCreate                                   EDOTAGCMsg = 7321
	EDOTAGCMsg_k_EMsgGCFantasyPlayerInfoRequest                           EDOTAGCMsg = 7322
	EDOTAGCMsg_k_EMsgGCFantasyPlayerInfoResponse                          EDOTAGCMsg = 7323
	EDOTAGCMsg_k_EMsgGCToGCProcessPlayerReportForTarget                   EDOTAGCMsg = 7324
	EDOTAGCMsg_k_EMsgGCToGCProcessReportSuccess                           EDOTAGCMsg = 7325
	EDOTAGCMsg_k_EMsgGCNotifyAccountFlagsChange                           EDOTAGCMsg = 7326
	EDOTAGCMsg_k_EMsgGCSetProfilePrivacy                                  EDOTAGCMsg = 7327
	EDOTAGCMsg_k_EMsgGCSetProfilePrivacyResponse                          EDOTAGCMsg = 7328
	EDOTAGCMsg_k_EMsgGCSteamProfileRequest                                EDOTAGCMsg = 7329
	EDOTAGCMsg_k_EMsgGCSteamProfileRequestResponse                        EDOTAGCMsg = 7330
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateInfoRequest                     EDOTAGCMsg = 7331
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateInfoResponse                    EDOTAGCMsg = 7332
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInviteInfoRequest                     EDOTAGCMsg = 7333
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInviteInfoResponse                    EDOTAGCMsg = 7334
	EDOTAGCMsg_k_EMsgGCClientIgnoredUser                                  EDOTAGCMsg = 7335
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateRequest                         EDOTAGCMsg = 7336
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateResponse                        EDOTAGCMsg = 7337
	EDOTAGCMsg_k_EMsgGCFantasyTeamCreateRequest                           EDOTAGCMsg = 7338
	EDOTAGCMsg_k_EMsgGCFantasyTeamCreateResponse                          EDOTAGCMsg = 7339
	EDOTAGCMsg_k_EMsgGCFantasyLeagueFriendJoinListRequest                 EDOTAGCMsg = 7340
	EDOTAGCMsg_k_EMsgGCFantasyLeagueFriendJoinListResponse                EDOTAGCMsg = 7341
	EDOTAGCMsg_k_EMsgGCClientSuspended                                    EDOTAGCMsg = 7342
	EDOTAGCMsg_k_EMsgGCPartyMemberSetCoach                                EDOTAGCMsg = 7343
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInvitesRequest                    EDOTAGCMsg = 7344
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInvitesResponse                   EDOTAGCMsg = 7345
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetCoach                              EDOTAGCMsg = 7346
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInfoRequest                       EDOTAGCMsg = 7347
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInfoResponse                      EDOTAGCMsg = 7348
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftStatusRequest                    EDOTAGCMsg = 7349
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftStatus                           EDOTAGCMsg = 7350
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftPlayerRequest                    EDOTAGCMsg = 7351
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftPlayerResponse                   EDOTAGCMsg = 7352
	EDOTAGCMsg_k_EMsgGCFantasyLeagueMatchupsRequest                       EDOTAGCMsg = 7353
	EDOTAGCMsg_k_EMsgGCFantasyLeagueMatchupsResponse                      EDOTAGCMsg = 7354
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterSwapRequest                       EDOTAGCMsg = 7355
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterSwapResponse                      EDOTAGCMsg = 7356
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterRequest                           EDOTAGCMsg = 7357
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterResponse                          EDOTAGCMsg = 7358
	EDOTAGCMsg_k_EMsgGCNexonPartnerUpdate                                 EDOTAGCMsg = 7359
	EDOTAGCMsg_k_EMsgGCToGCProcessPCBangRewardPoints                      EDOTAGCMsg = 7360
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterAddDropRequest                    EDOTAGCMsg = 7361
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterAddDropResponse                   EDOTAGCMsg = 7362
	EDOTAGCMsg_k_EMsgPresentedClientTerminateDlg                          EDOTAGCMsg = 7363
	EDOTAGCMsg_k_EMsgGCFantasyPlayerHisoricalStatsRequest                 EDOTAGCMsg = 7364
	EDOTAGCMsg_k_EMsgGCFantasyPlayerHisoricalStatsResponse                EDOTAGCMsg = 7365
	EDOTAGCMsg_k_EMsgGCPCBangTimedRewardMessage                           EDOTAGCMsg = 7366
	EDOTAGCMsg_k_EMsgGCLobbyUpdateBroadcastChannelInfo                    EDOTAGCMsg = 7367
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradesRequest                           EDOTAGCMsg = 7368
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradesResponse                          EDOTAGCMsg = 7369
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradeCancelRequest                      EDOTAGCMsg = 7370
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradeCancelResponse                     EDOTAGCMsg = 7371
	EDOTAGCMsg_k_EMsgGCToGCGrantTournamentItem                            EDOTAGCMsg = 7372
	EDOTAGCMsg_k_EMsgGCProcessFantasyScheduledEvent                       EDOTAGCMsg = 7373
	EDOTAGCMsg_k_EMsgGCToGCGrantPCBangRewardItem                          EDOTAGCMsg = 7374
	EDOTAGCMsg_k_EMsgGCToGCUpgradeTwitchViewerItems                       EDOTAGCMsg = 7375
	EDOTAGCMsg_k_EMsgGCToGCGetLiveMatchAffiliates                         EDOTAGCMsg = 7376
	EDOTAGCMsg_k_EMsgGCToGCGetLiveMatchAffiliatesResponse                 EDOTAGCMsg = 7377
	EDOTAGCMsg_k_EMsgGCToGCUpdatePlayerPennantCounts                      EDOTAGCMsg = 7378
	EDOTAGCMsg_k_EMsgGCToGCGetPlayerPennantCounts                         EDOTAGCMsg = 7379
	EDOTAGCMsg_k_EMsgGCToGCGetPlayerPennantCountsResponse                 EDOTAGCMsg = 7380
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutPermissionRequest                  EDOTAGCMsg = 7381
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutPermissionResponse                 EDOTAGCMsg = 7382
	EDOTAGCMsg_k_EMsgDOTAChatChannelMemberUpdate                          EDOTAGCMsg = 7383
	EDOTAGCMsg_k_EMsgDOTAAwardEventPoints                                 EDOTAGCMsg = 7384
	EDOTAGCMsg_k_EMsgDOTARedeemEventPrize                                 EDOTAGCMsg = 7385
	EDOTAGCMsg_k_EMsgDOTARedeemEventPrizeResponse                         EDOTAGCMsg = 7386
	EDOTAGCMsg_k_EMsgDOTAGetEventPoints                                   EDOTAGCMsg = 7387
	EDOTAGCMsg_k_EMsgDOTAGetEventPointsResponse                           EDOTAGCMsg = 7388
	EDOTAGCMsg_k_EMsgGCToGCSignoutAwardEventPoints                        EDOTAGCMsg = 7390
	EDOTAGCMsg_k_EMsgDOTASendFriendRecruits                               EDOTAGCMsg = 7393
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitsRequest                            EDOTAGCMsg = 7394
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitsResponse                           EDOTAGCMsg = 7395
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitInviteAcceptDecline                 EDOTAGCMsg = 7396
	EDOTAGCMsg_k_EMsgGCPartyLeaderWatchGamePrompt                         EDOTAGCMsg = 7397
	EDOTAGCMsg_k_EMsgDOTAFrostivusTimeElapsed                             EDOTAGCMsg = 7398
	EDOTAGCMsg_k_EMsgGCToGCGrantEarnedLicense                             EDOTAGCMsg = 7399
	EDOTAGCMsg_k_EMsgDOTALiveLeagueGameUpdate                             EDOTAGCMsg = 7402
	EDOTAGCMsg_k_EMsgDOTAChatGetUserList                                  EDOTAGCMsg = 7403
	EDOTAGCMsg_k_EMsgDOTAChatGetUserListResponse                          EDOTAGCMsg = 7404
	EDOTAGCMsg_k_EMsgGCCompendiumSetSelection                             EDOTAGCMsg = 7405
	EDOTAGCMsg_k_EMsgGCCompendiumDataRequest                              EDOTAGCMsg = 7406
	EDOTAGCMsg_k_EMsgGCCompendiumDataResponse                             EDOTAGCMsg = 7407
	EDOTAGCMsg_k_EMsgDOTAGetPlayerMatchHistory                            EDOTAGCMsg = 7408
	EDOTAGCMsg_k_EMsgDOTAGetPlayerMatchHistoryResponse                    EDOTAGCMsg = 7409
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingAddParty                            EDOTAGCMsg = 7410
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingRemoveParty                         EDOTAGCMsg = 7411
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingRemoveAllParties                    EDOTAGCMsg = 7412
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingMatchFound                          EDOTAGCMsg = 7413
	EDOTAGCMsg_k_EMsgGCToGCUpdateMatchManagementStats                     EDOTAGCMsg = 7414
	EDOTAGCMsg_k_EMsgGCToGCUpdateMatchmakingStats                         EDOTAGCMsg = 7415
	EDOTAGCMsg_k_EMsgGCToServerPingRequest                                EDOTAGCMsg = 7416
	EDOTAGCMsg_k_EMsgGCToServerPingResponse                               EDOTAGCMsg = 7417
	EDOTAGCMsg_k_EMsgGCToServerConsoleCommand                             EDOTAGCMsg = 7418
	EDOTAGCMsg_k_EMsgGCToGCUpdateLiveLeagueGameInfo                       EDOTAGCMsg = 7420
	EDOTAGCMsg_k_EMsgGCMakeOffering                                       EDOTAGCMsg = 7423
	EDOTAGCMsg_k_EMsgGCRequestOfferings                                   EDOTAGCMsg = 7424
	EDOTAGCMsg_k_EMsgGCRequestOfferingsResponse                           EDOTAGCMsg = 7425
	EDOTAGCMsg_k_EMsgGCToGCProcessMatchLeaver                             EDOTAGCMsg = 7426
	EDOTAGCMsg_k_EMsgGCNotificationsRequest                               EDOTAGCMsg = 7427
	EDOTAGCMsg_k_EMsgGCNotificationsResponse                              EDOTAGCMsg = 7428
	EDOTAGCMsg_k_EMsgGCToGCModifyNotification                             EDOTAGCMsg = 7429
	EDOTAGCMsg_k_EMsgGCToGCSetNewNotifications                            EDOTAGCMsg = 7430
	EDOTAGCMsg_k_EMsgGCToGCSetIsLeagueAdmin                               EDOTAGCMsg = 7431
	EDOTAGCMsg_k_EMsgGCLeagueAdminState                                   EDOTAGCMsg = 7432
	EDOTAGCMsg_k_EMsgGCToGCSendLeagueAdminState                           EDOTAGCMsg = 7433
	EDOTAGCMsg_k_EMsgGCLeagueAdminList                                    EDOTAGCMsg = 7434
	EDOTAGCMsg_k_EMsgGCNotificationsMarkReadRequest                       EDOTAGCMsg = 7435
	EDOTAGCMsg_k_EMsgGCFantasyMessageAdd                                  EDOTAGCMsg = 7436
	EDOTAGCMsg_k_EMsgGCFantasyMessagesRequest                             EDOTAGCMsg = 7437
	EDOTAGCMsg_k_EMsgGCFantasyMessagesResponse                            EDOTAGCMsg = 7438
	EDOTAGCMsg_k_EMsgGCFantasyScheduledMatchesRequest                     EDOTAGCMsg = 7439
	EDOTAGCMsg_k_EMsgGCFantasyScheduledMatchesResponse                    EDOTAGCMsg = 7440
	EDOTAGCMsg_k_EMsgGCToGCGrantLeagueAccess                              EDOTAGCMsg = 7441
	EDOTAGCMsg_k_EMsgGCEventGameCreate                                    EDOTAGCMsg = 7443
	EDOTAGCMsg_k_EMsgGCPerfectWorldUserLookupRequest                      EDOTAGCMsg = 7444
	EDOTAGCMsg_k_EMsgGCPerfectWorldUserLookupResponse                     EDOTAGCMsg = 7445
	EDOTAGCMsg_k_EMsgGCToGCIncrementRecruitmentSDO                        EDOTAGCMsg = 7446
	EDOTAGCMsg_k_EMsgGCToGCIncrementRecruitmentLevel                      EDOTAGCMsg = 7447
	EDOTAGCMsg_k_EMsgGCFantasyRemoveOwner                                 EDOTAGCMsg = 7448
	EDOTAGCMsg_k_EMsgGCFantasyRemoveOwnerResponse                         EDOTAGCMsg = 7449
	EDOTAGCMsg_k_EMsgGCRequestBatchPlayerResources                        EDOTAGCMsg = 7450
	EDOTAGCMsg_k_EMsgGCRequestBatchPlayerResourcesResponse                EDOTAGCMsg = 7451
	EDOTAGCMsg_k_EMsgGCToGCSendUpdateLeagues                              EDOTAGCMsg = 7452
	EDOTAGCMsg_k_EMsgGCCompendiumSetSelectionResponse                     EDOTAGCMsg = 7453
	EDOTAGCMsg_k_EMsgGCPlayerInfoRequest                                  EDOTAGCMsg = 7454
	EDOTAGCMsg_k_EMsgGCPlayerInfo                                         EDOTAGCMsg = 7455
	EDOTAGCMsg_k_EMsgGCPlayerInfoSubmit                                   EDOTAGCMsg = 7456
	EDOTAGCMsg_k_EMsgGCPlayerInfoSubmitResponse                           EDOTAGCMsg = 7457
	EDOTAGCMsg_k_EMsgGCToGCGetAccountLevel                                EDOTAGCMsg = 7458
	EDOTAGCMsg_k_EMsgGCToGCGetAccountLevelResponse                        EDOTAGCMsg = 7459
	EDOTAGCMsg_k_EMsgGCToGCGetAccountPartner                              EDOTAGCMsg = 7460
	EDOTAGCMsg_k_EMsgGCToGCGetAccountPartnerResponse                      EDOTAGCMsg = 7461
	EDOTAGCMsg_k_EMsgGCToGCGetAccountProfile                              EDOTAGCMsg = 7462
	EDOTAGCMsg_k_EMsgGCToGCGetAccountProfileResponse                      EDOTAGCMsg = 7463
	EDOTAGCMsg_k_EMsgDOTAGetWeekendTourneySchedule                        EDOTAGCMsg = 7464
	EDOTAGCMsg_k_EMsgDOTAWeekendTourneySchedule                           EDOTAGCMsg = 7465
	EDOTAGCMsg_k_EMsgGCJoinableCustomGameModesRequest                     EDOTAGCMsg = 7466
	EDOTAGCMsg_k_EMsgGCJoinableCustomGameModesResponse                    EDOTAGCMsg = 7467
	EDOTAGCMsg_k_EMsgGCJoinableCustomLobbiesRequest                       EDOTAGCMsg = 7468
	EDOTAGCMsg_k_EMsgGCJoinableCustomLobbiesResponse                      EDOTAGCMsg = 7469
	EDOTAGCMsg_k_EMsgGCQuickJoinCustomLobby                               EDOTAGCMsg = 7470
	EDOTAGCMsg_k_EMsgGCQuickJoinCustomLobbyResponse                       EDOTAGCMsg = 7471
	EDOTAGCMsg_k_EMsgGCToGCGrantEventPointAction                          EDOTAGCMsg = 7472
	EDOTAGCMsg_k_EMsgServerGetEventPoints                                 EDOTAGCMsg = 7473
	EDOTAGCMsg_k_EMsgServerGetEventPointsResponse                         EDOTAGCMsg = 7474
	EDOTAGCMsg_k_EMsgServerGrantSurveyPermission                          EDOTAGCMsg = 7475
	EDOTAGCMsg_k_EMsgServerGrantSurveyPermissionResponse                  EDOTAGCMsg = 7476
	EDOTAGCMsg_k_EMsgClientProvideSurveyResult                            EDOTAGCMsg = 7477
	EDOTAGCMsg_k_EMsgGCToGCSetCompendiumSelection                         EDOTAGCMsg = 7478
	EDOTAGCMsg_k_EMsgGCToGCUpdateTI4HeroQuest                             EDOTAGCMsg = 7480
	EDOTAGCMsg_k_EMsgGCCompendiumDataChanged                              EDOTAGCMsg = 7481
	EDOTAGCMsg_k_EMsgDOTAFantasyLeagueFindRequest                         EDOTAGCMsg = 7482
	EDOTAGCMsg_k_EMsgDOTAFantasyLeagueFindResponse                        EDOTAGCMsg = 7483
	EDOTAGCMsg_k_EMsgGCHasItemQuery                                       EDOTAGCMsg = 7484
	EDOTAGCMsg_k_EMsgGCHasItemResponse                                    EDOTAGCMsg = 7485
	EDOTAGCMsg_k_EMsgGCConsumeFantasyTicket                               EDOTAGCMsg = 7486
	EDOTAGCMsg_k_EMsgGCConsumeFantasyTicketFailure                        EDOTAGCMsg = 7487
	EDOTAGCMsg_k_EMsgGCToGCGrantEventPointActionMsg                       EDOTAGCMsg = 7488
	EDOTAGCMsg_k_EMsgClientToGCTrackDialogResult                          EDOTAGCMsg = 7489
	EDOTAGCMsg_k_EMsgGCFantasyLeaveLeagueRequest                          EDOTAGCMsg = 7490
	EDOTAGCMsg_k_EMsgGCFantasyLeaveLeagueResponse                         EDOTAGCMsg = 7491
	EDOTAGCMsg_k_EMsgGCToGCGetCompendiumSelections                        EDOTAGCMsg = 7492
	EDOTAGCMsg_k_EMsgGCToGCGetCompendiumSelectionsResponse                EDOTAGCMsg = 7493
	EDOTAGCMsg_k_EMsgServerToGCMatchConnectionStats                       EDOTAGCMsg = 7494
	EDOTAGCMsg_k_EMsgGCToClientTournamentItemDrop                         EDOTAGCMsg = 7495
	EDOTAGCMsg_k_EMsgSQLDelayedGrantLeagueDrop                            EDOTAGCMsg = 7496
	EDOTAGCMsg_k_EMsgServerGCUpdateSpectatorCount                         EDOTAGCMsg = 7497
	EDOTAGCMsg_k_EMsgDOTAStartDailyHeroChallengeRequest                   EDOTAGCMsg = 7498
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreDetailsRequest                   EDOTAGCMsg = 7499
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreDetailsResponse                  EDOTAGCMsg = 7500
	EDOTAGCMsg_k_EMsgGCToGCEmoticonUnlock                                 EDOTAGCMsg = 7501
	EDOTAGCMsg_k_EMsgSignOutDraftInfo                                     EDOTAGCMsg = 7502
	EDOTAGCMsg_k_EMsgClientToGCEmoticonDataRequest                        EDOTAGCMsg = 7503
	EDOTAGCMsg_k_EMsgGCToClientEmoticonData                               EDOTAGCMsg = 7504
	EDOTAGCMsg_k_EMsgGCPracticeLobbyToggleBroadcastChannelCameramanStatus EDOTAGCMsg = 7505
	EDOTAGCMsg_k_EMsgGCToGCCreateWeekendTourneyRequest                    EDOTAGCMsg = 7506
	EDOTAGCMsg_k_EMsgGCToGCCreateWeekendTourneyResponse                   EDOTAGCMsg = 7507
	EDOTAGCMsg_k_EMsgGCToGCCreateGenericTeamsRequest                      EDOTAGCMsg = 7510
	EDOTAGCMsg_k_EMsgGCToGCCreateGenericTeamsResponse                     EDOTAGCMsg = 7511
	EDOTAGCMsg_k_EMsgSQLLaunchOneWeekendTourney                           EDOTAGCMsg = 7512
	EDOTAGCMsg_k_EMsgClientToGCSetAdditionalEquips                        EDOTAGCMsg = 7513
	EDOTAGCMsg_k_EMsgClientToGCGetAdditionalEquips                        EDOTAGCMsg = 7514
	EDOTAGCMsg_k_EMsgClientToGCGetAdditionalEquipsResponse                EDOTAGCMsg = 7515
	EDOTAGCMsg_k_EMsgServerToGCGetAdditionalEquips                        EDOTAGCMsg = 7516
	EDOTAGCMsg_k_EMsgServerToGCGetAdditionalEquipsResponse                EDOTAGCMsg = 7517
	EDOTAGCMsg_k_EMsgDOTARedeemItem                                       EDOTAGCMsg = 7518
	EDOTAGCMsg_k_EMsgDOTARedeemItemResponse                               EDOTAGCMsg = 7519
	EDOTAGCMsg_k_EMsgSQLGCToGCGrantAllHeroProgress                        EDOTAGCMsg = 7520
	EDOTAGCMsg_k_EMsgClientToGCGetAllHeroProgress                         EDOTAGCMsg = 7521
	EDOTAGCMsg_k_EMsgClientToGCGetAllHeroProgressResponse                 EDOTAGCMsg = 7522
	EDOTAGCMsg_k_EMsgGCToGCGetServerForClient                             EDOTAGCMsg = 7523
	EDOTAGCMsg_k_EMsgGCToGCGetServerForClientResponse                     EDOTAGCMsg = 7524
	EDOTAGCMsg_k_EMsgSQLProcessTournamentGameOutcome                      EDOTAGCMsg = 7525
	EDOTAGCMsg_k_EMsgSQLGrantTrophyToAccount                              EDOTAGCMsg = 7526
	EDOTAGCMsg_k_EMsgClientToGCGetTrophyList                              EDOTAGCMsg = 7527
	EDOTAGCMsg_k_EMsgClientToGCGetTrophyListResponse                      EDOTAGCMsg = 7528
	EDOTAGCMsg_k_EMsgGCToClientTrophyAwarded                              EDOTAGCMsg = 7529
	EDOTAGCMsg_k_EMsgGCGameBotMatchSignOut                                EDOTAGCMsg = 7530
	EDOTAGCMsg_k_EMsgGCGameBotMatchSignOutPermissionRequest               EDOTAGCMsg = 7531
	EDOTAGCMsg_k_EMsgSignOutBotInfo                                       EDOTAGCMsg = 7532
	EDOTAGCMsg_k_EMsgGCToGCUpdateProfileCards                             EDOTAGCMsg = 7533
	EDOTAGCMsg_k_EMsgClientToGCGetProfileCard                             EDOTAGCMsg = 7534
	EDOTAGCMsg_k_EMsgClientToGCGetProfileCardResponse                     EDOTAGCMsg = 7535
	EDOTAGCMsg_k_EMsgServerToGCGetProfileCard                             EDOTAGCMsg = 7536
	EDOTAGCMsg_k_EMsgServerToGCGetProfileCardResponse                     EDOTAGCMsg = 7537
	EDOTAGCMsg_k_EMsgClientToGCSetProfileCardSlots                        EDOTAGCMsg = 7538
	EDOTAGCMsg_k_EMsgGCToClientProfileCardUpdated                         EDOTAGCMsg = 7539
	EDOTAGCMsg_k_EMsgServerToGCVictoryPredictions                         EDOTAGCMsg = 7540
	EDOTAGCMsg_k_EMsgClientToGCMarkNotificationListRead                   EDOTAGCMsg = 7542
	EDOTAGCMsg_k_EMsgGCToClientNewNotificationAdded                       EDOTAGCMsg = 7543
	EDOTAGCMsg_k_EMsgServerToGCSuspiciousActivity                         EDOTAGCMsg = 7544
	EDOTAGCMsg_k_EMsgSignOutCommunicationSummary                          EDOTAGCMsg = 7545
	EDOTAGCMsg_k_EMsgServerToGCRequestStatus_Response                     EDOTAGCMsg = 7546
	EDOTAGCMsg_k_EMsgClientToGCCreateHeroStatue                           EDOTAGCMsg = 7547
	EDOTAGCMsg_k_EMsgGCToClientHeroStatueCreateResult                     EDOTAGCMsg = 7548
	EDOTAGCMsg_k_EMsgGCGCToLANServerRelayConnect                          EDOTAGCMsg = 7549
	EDOTAGCMsg_k_EMsgSignOutAssassinMiniGameInfo                          EDOTAGCMsg = 7550
	EDOTAGCMsg_k_EMsgServerToGCGetIngameEventData                         EDOTAGCMsg = 7551
	EDOTAGCMsg_k_EMsgGCToGCUpdateIngameEventDataBroadcast                 EDOTAGCMsg = 7552
	EDOTAGCMsg_k_EMsgGCToServerIngameEventData_OraclePA                   EDOTAGCMsg = 7553
	EDOTAGCMsg_k_EMsgServerToGCReportKillSummaries                        EDOTAGCMsg = 7554
	EDOTAGCMsg_k_EMsgGCToGCReportKillSummaries                            EDOTAGCMsg = 7555
	EDOTAGCMsg_k_EMsgGCToGCUpdateAssassinMinigame                         EDOTAGCMsg = 7556
	EDOTAGCMsg_k_EMsgGCToGCFantasySetMatchLeague                          EDOTAGCMsg = 7557
	EDOTAGCMsg_k_EMsgClientToGCRecordCompendiumStats                      EDOTAGCMsg = 7558
	EDOTAGCMsg_k_EMsgGCItemEditorRequestLeagueInfo                        EDOTAGCMsg = 7559
	EDOTAGCMsg_k_EMsgGCItemEditorLeagueInfoResponse                       EDOTAGCMsg = 7560
	EDOTAGCMsg_k_EMsgGCToGCUpdatePlayerPredictions                        EDOTAGCMsg = 7561
	EDOTAGCMsg_k_EMsgGCToServerPredictionResult                           EDOTAGCMsg = 7562
	EDOTAGCMsg_k_EMsgServerToGCSignoutAwardAdditionalDrops                EDOTAGCMsg = 7563
	EDOTAGCMsg_k_EMsgGCToGCSignoutAwardAdditionalDrops                    EDOTAGCMsg = 7564
	EDOTAGCMsg_k_EMsgGCToClientEventStatusChanged                         EDOTAGCMsg = 7565
	EDOTAGCMsg_k_EMsgGCHasItemDefsQuery                                   EDOTAGCMsg = 7566
	EDOTAGCMsg_k_EMsgGCHasItemDefsResponse                                EDOTAGCMsg = 7567
	EDOTAGCMsg_k_EMsgGCToGCReplayMonitorValidateReplay                    EDOTAGCMsg = 7569
	EDOTAGCMsg_k_EMsgClientToGCExchangeItemsForOffering                   EDOTAGCMsg = 7570
	EDOTAGCMsg_k_EMsgClientToGCExchangeItemsForOfferingResponse           EDOTAGCMsg = 7571
	EDOTAGCMsg_k_EMsgLobbyEventPoints                                     EDOTAGCMsg = 7572
	EDOTAGCMsg_k_EMsgGCToGCGetCustomGameTickets                           EDOTAGCMsg = 7573
	EDOTAGCMsg_k_EMsgGCToGCGetCustomGameTicketsResponse                   EDOTAGCMsg = 7574
	EDOTAGCMsg_k_EMsgGCToClientNewBloomTimingUpdated                      EDOTAGCMsg = 7575
	EDOTAGCMsg_k_EMsgGCToGCCustomGamePlayed                               EDOTAGCMsg = 7576
	EDOTAGCMsg_k_EMsgGCToGCGrantEventPointsToUser                         EDOTAGCMsg = 7577
	EDOTAGCMsg_k_EMsgGCToGCSetEventMMPanicFlushTime                       EDOTAGCMsg = 7578
	EDOTAGCMsg_k_EMsgGameserverCrashReport                                EDOTAGCMsg = 7579
	EDOTAGCMsg_k_EMsgGameserverCrashReportResponse                        EDOTAGCMsg = 7580
	EDOTAGCMsg_k_EMsgGCToClientSteamDatagramTicket                        EDOTAGCMsg = 7581
	EDOTAGCMsg_k_EMsgGCToGCGrantEventOwnership                            EDOTAGCMsg = 7582
	EDOTAGCMsg_k_EMsgGCToGCSendAccountsEventPoints                        EDOTAGCMsg = 7583
	EDOTAGCMsg_k_EMsgClientToGCRerollPlayerChallenge                      EDOTAGCMsg = 7584
	EDOTAGCMsg_k_EMsgServerToGCRerollPlayerChallenge                      EDOTAGCMsg = 7585
	EDOTAGCMsg_k_EMsgGCRerollPlayerChallengeResponse                      EDOTAGCMsg = 7586
	EDOTAGCMsg_k_EMsgSignOutUpdatePlayerChallenge                         EDOTAGCMsg = 7587
	EDOTAGCMsg_k_EMsgClientToGCSetPartyLeader                             EDOTAGCMsg = 7588
	EDOTAGCMsg_k_EMsgClientToGCCancelPartyInvites                         EDOTAGCMsg = 7589
	EDOTAGCMsg_k_EMsgGCToGCMasterReloadAccount                            EDOTAGCMsg = 7590
	EDOTAGCMsg_k_EMsgSQLGCToGCGrantBackpackSlots                          EDOTAGCMsg = 7591
	EDOTAGCMsg_k_EMsgSQLGrantLeagueMatchToTicketHolders                   EDOTAGCMsg = 7592
	EDOTAGCMsg_k_EMsgClientToGCSetAdditionalEquipsResponse                EDOTAGCMsg = 7593
	EDOTAGCMsg_k_EMsgGCToGCEmoticonUnlockNoRollback                       EDOTAGCMsg = 7594
	EDOTAGCMsg_k_EMsgGCToGCGetCompendiumFanfare                           EDOTAGCMsg = 7595
	EDOTAGCMsg_k_EMsgServerToGCHoldEventPoints                            EDOTAGCMsg = 7596
	EDOTAGCMsg_k_EMsgSignOutReleaseEventPointHolds                        EDOTAGCMsg = 7597
	EDOTAGCMsg_k_EMsgGCToGCChatNewUserSession                             EDOTAGCMsg = 7598
	EDOTAGCMsg_k_EMsgClientToGCGetLeagueSeries                            EDOTAGCMsg = 7599
	EDOTAGCMsg_k_EMsgClientToGCGetLeagueSeriesResponse                    EDOTAGCMsg = 7600
	EDOTAGCMsg_k_EMsgSQLGCToGCSignoutUpdateLeagueSchedule                 EDOTAGCMsg = 7601
	EDOTAGCMsg_k_EMsgGCToServerUpdateBroadcastCheers                      EDOTAGCMsg = 7602
	EDOTAGCMsg_k_EMsgClientToGCApplyGemCombiner                           EDOTAGCMsg = 7603
	EDOTAGCMsg_k_EMsgClientToGCCreateStaticRecipe                         EDOTAGCMsg = 7604
	EDOTAGCMsg_k_EMsgClientToGCCreateStaticRecipeResponse                 EDOTAGCMsg = 7605
	EDOTAGCMsg_k_EMsgClientToGCGetAllHeroOrder                            EDOTAGCMsg = 7606
	EDOTAGCMsg_k_EMsgClientToGCGetAllHeroOrderResponse                    EDOTAGCMsg = 7607
	EDOTAGCMsg_k_EMsgSQLGCToGCGrantBadgePoints                            EDOTAGCMsg = 7608
	EDOTAGCMsg_k_EMsgGCToGCGetAccountMatchStatus                          EDOTAGCMsg = 7609
	EDOTAGCMsg_k_EMsgGCToGCGetAccountMatchStatusResponse                  EDOTAGCMsg = 7610
	EDOTAGCMsg_k_EMsgGCDev_GrantWarKill                                   EDOTAGCMsg = 8001
	EDOTAGCMsg_k_EMsgClientToGCCreateTeamShowcase                         EDOTAGCMsg = 8002
	EDOTAGCMsg_k_EMsgGCToClientTeamShowcaseCreateResult                   EDOTAGCMsg = 8003
	EDOTAGCMsg_k_EMsgServerToGCLockCharmTrading                           EDOTAGCMsg = 8004
	EDOTAGCMsg_k_EMsgDOTACNY2015EventPointUsage                           EDOTAGCMsg = 8005
	EDOTAGCMsg_k_EMsgClientToGCPlayerStatsRequest                         EDOTAGCMsg = 8006
	EDOTAGCMsg_k_EMsgGCToClientPlayerStatsResponse                        EDOTAGCMsg = 8007
	EDOTAGCMsg_k_EMsgGCClearPracticeLobbyTeam                             EDOTAGCMsg = 8008
	EDOTAGCMsg_k_EMsgClientToGCFindTopSourceTVGames                       EDOTAGCMsg = 8009
	EDOTAGCMsg_k_EMsgGCToClientFindTopSourceTVGamesResponse               EDOTAGCMsg = 8010
	EDOTAGCMsg_k_EMsgGCLobbyList                                          EDOTAGCMsg = 8011
	EDOTAGCMsg_k_EMsgGCLobbyListResponse                                  EDOTAGCMsg = 8012
	EDOTAGCMsg_k_EMsgGCPlayerStatsMatchSignOut                            EDOTAGCMsg = 8013
	EDOTAGCMsg_k_EMsgClientToGCCustomGamePlayerCountRequest               EDOTAGCMsg = 8014
	EDOTAGCMsg_k_EMsgGCToClientCustomGamePlayerCountResponse              EDOTAGCMsg = 8015
	EDOTAGCMsg_k_EMsgClientToGCSocialFeedPostCommentRequest               EDOTAGCMsg = 8016
	EDOTAGCMsg_k_EMsgGCToClientSocialFeedPostCommentResponse              EDOTAGCMsg = 8017
	EDOTAGCMsg_k_EMsgClientToGCCustomGamesFriendsPlayedRequest            EDOTAGCMsg = 8018
	EDOTAGCMsg_k_EMsgGCToClientCustomGamesFriendsPlayedResponse           EDOTAGCMsg = 8019
	EDOTAGCMsg_k_EMsgClientToGCFriendsPlayedCustomGameRequest             EDOTAGCMsg = 8020
	EDOTAGCMsg_k_EMsgGCToClientFriendsPlayedCustomGameResponse            EDOTAGCMsg = 8021
	EDOTAGCMsg_k_EMsgClientToGCFeaturedHeroesRequest                      EDOTAGCMsg = 8022
	EDOTAGCMsg_k_EMsgGCToClientFeaturedHeroesResponse                     EDOTAGCMsg = 8023
	EDOTAGCMsg_k_EMsgGCTopCustomGamesList                                 EDOTAGCMsg = 8024
	EDOTAGCMsg_k_EMsgClientToGCSocialMatchPostCommentRequest              EDOTAGCMsg = 8025
	EDOTAGCMsg_k_EMsgGCToClientSocialMatchPostCommentResponse             EDOTAGCMsg = 8026
	EDOTAGCMsg_k_EMsgClientToGCSocialMatchDetailsRequest                  EDOTAGCMsg = 8027
	EDOTAGCMsg_k_EMsgGCToClientSocialMatchDetailsResponse                 EDOTAGCMsg = 8028
	EDOTAGCMsg_k_EMsgClientToGCSetPartyOpen                               EDOTAGCMsg = 8029
	EDOTAGCMsg_k_EMsgClientToGCMergePartyInvite                           EDOTAGCMsg = 8030
	EDOTAGCMsg_k_EMsgGCToClientMergeGroupInviteReply                      EDOTAGCMsg = 8031
	EDOTAGCMsg_k_EMsgClientToGCMergePartyResponse                         EDOTAGCMsg = 8032
	EDOTAGCMsg_k_EMsgGCToClientMergePartyResponseReply                    EDOTAGCMsg = 8033
	EDOTAGCMsg_k_EMsgClientToGCGetProfileCardStats                        EDOTAGCMsg = 8034
	EDOTAGCMsg_k_EMsgClientToGCGetProfileCardStatsResponse                EDOTAGCMsg = 8035
	EDOTAGCMsg_k_EMsgClientToGCTopLeagueMatchesRequest                    EDOTAGCMsg = 8036
	EDOTAGCMsg_k_EMsgClientToGCTopFriendMatchesRequest                    EDOTAGCMsg = 8037
	EDOTAGCMsg_k_EMsgGCToClientProfileCardStatsUpdated                    EDOTAGCMsg = 8040
	EDOTAGCMsg_k_EMsgServerToGCRealtimeStats                              EDOTAGCMsg = 8041
	EDOTAGCMsg_k_EMsgGCToServerRealtimeStatsStartStop                     EDOTAGCMsg = 8042
	EDOTAGCMsg_k_EMsgGCToGCGetServersForClients                           EDOTAGCMsg = 8045
	EDOTAGCMsg_k_EMsgGCToGCGetServersForClientsResponse                   EDOTAGCMsg = 8046
	EDOTAGCMsg_k_EMsgGCPracticeLobbyKickFromTeam                          EDOTAGCMsg = 8047
	EDOTAGCMsg_k_EMsgDOTAChatGetMemberCount                               EDOTAGCMsg = 8048
	EDOTAGCMsg_k_EMsgDOTAChatGetMemberCountResponse                       EDOTAGCMsg = 8049
	EDOTAGCMsg_k_EMsgClientToGCSocialFeedPostMessageRequest               EDOTAGCMsg = 8050
	EDOTAGCMsg_k_EMsgGCToClientSocialFeedPostMessageResponse              EDOTAGCMsg = 8051
	EDOTAGCMsg_k_EMsgCustomGameListenServerStartedLoading                 EDOTAGCMsg = 8052
	EDOTAGCMsg_k_EMsgCustomGameClientFinishedLoading                      EDOTAGCMsg = 8053
	EDOTAGCMsg_k_EMsgGCPracticeLobbyCloseBroadcastChannel                 EDOTAGCMsg = 8054
	EDOTAGCMsg_k_EMsgGCStartFindingMatchResponse                          EDOTAGCMsg = 8055
	EDOTAGCMsg_k_EMsgSQLGCToGCUpdateHeroMMR                               EDOTAGCMsg = 8056
	EDOTAGCMsg_k_EMsgSQLGCToGCGrantAccountFlag                            EDOTAGCMsg = 8057
	EDOTAGCMsg_k_EMsgGCToGCGetAccountFlags                                EDOTAGCMsg = 8058
	EDOTAGCMsg_k_EMsgGCToGCGetAccountFlagsResponse                        EDOTAGCMsg = 8059
	EDOTAGCMsg_k_EMsgSignOutWagerStats                                    EDOTAGCMsg = 8060
	EDOTAGCMsg_k_EMsgGCToClientTopLeagueMatchesResponse                   EDOTAGCMsg = 8061
	EDOTAGCMsg_k_EMsgGCToClientTopFriendMatchesResponse                   EDOTAGCMsg = 8062
	EDOTAGCMsg_k_EMsgClientToGCMatchesMinimalRequest                      EDOTAGCMsg = 8063
	EDOTAGCMsg_k_EMsgClientToGCMatchesMinimalResponse                     EDOTAGCMsg = 8064
	EDOTAGCMsg_k_EMsgGCToGCGetProfileBadgePoints                          EDOTAGCMsg = 8065
	EDOTAGCMsg_k_EMsgGCToGCGetProfileBadgePointsResponse                  EDOTAGCMsg = 8066
	EDOTAGCMsg_k_EMsgGCToClientChatRegionsEnabled                         EDOTAGCMsg = 8067
	EDOTAGCMsg_k_EMsgClientToGCPingData                                   EDOTAGCMsg = 8068
	EDOTAGCMsg_k_EMsgServerToGCMatchDetailsRequest                        EDOTAGCMsg = 8069
	EDOTAGCMsg_k_EMsgGCToServerMatchDetailsResponse                       EDOTAGCMsg = 8070
	EDOTAGCMsg_k_EMsgGCToGCEnsureAccountInParty                           EDOTAGCMsg = 8071
	EDOTAGCMsg_k_EMsgGCToGCEnsureAccountInPartyResponse                   EDOTAGCMsg = 8072
	EDOTAGCMsg_k_EMsgClientToGCGetProfileTickets                          EDOTAGCMsg = 8073
	EDOTAGCMsg_k_EMsgClientToGCGetProfileTicketsResponse                  EDOTAGCMsg = 8074
)

var EDOTAGCMsg_name = map[int32]string{
	7000: "k_EMsgGCDOTABase",
	7001: "k_EMsgGCGeneralResponse",
	7004: "k_EMsgGCGameMatchSignOut",
	7005: "k_EMsgGCGameMatchSignOutResponse",
	7009: "k_EMsgGCJoinChatChannel",
	7010: "k_EMsgGCJoinChatChannelResponse",
	7013: "k_EMsgGCOtherJoinedChannel",
	7014: "k_EMsgGCOtherLeftChannel",
	7017: "k_EMsgGCMatchHistoryList",
	7026: "k_EMsgServerToGCRequestStatus",
	7027: "k_EMsgGCGetRecentMatches",
	7028: "k_EMsgGCRecentMatchesResponse",
	7033: "k_EMsgGCStartFindingMatch",
	7034: "k_EMsgGCConnectedPlayers",
	7035: "k_EMsgGCAbandonCurrentGame",
	7036: "k_EMsgGCStopFindingMatch",
	7038: "k_EMsgGCPracticeLobbyCreate",
	7040: "k_EMsgGCPracticeLobbyLeave",
	7041: "k_EMsgGCPracticeLobbyLaunch",
	7042: "k_EMsgGCPracticeLobbyList",
	7043: "k_EMsgGCPracticeLobbyListResponse",
	7044: "k_EMsgGCPracticeLobbyJoin",
	7046: "k_EMsgGCPracticeLobbySetDetails",
	7047: "k_EMsgGCPracticeLobbySetTeamSlot",
	7049: "k_EMsgGCInitialQuestionnaireResponse",
	7051: "k_EMsgGCTournamentRequest",
	7052: "k_EMsgGCTournamentResponse",
	7055: "k_EMsgGCPracticeLobbyResponse",
	7056: "k_EMsgGCBroadcastNotification",
	7057: "k_EMsgGCLiveScoreboardUpdate",
	7060: "k_EMsgGCRequestChatChannelList",
	7061: "k_EMsgGCRequestChatChannelListResponse",
	7064: "k_EMsgGCRequestMatches",
	7065: "k_EMsgGCRequestMatchesResponse",
	7068: "k_EMsgGCRequestPlayerResources",
	7069: "k_EMsgGCRequestPlayerResourcesResponse",
	7070: "k_EMsgGCReadyUp",
	7071: "k_EMsgGCKickedFromMatchmakingQueue",
	7072: "k_EMsgGCLeaverDetected",
	7073: "k_EMsgGCSpectateFriendGame",
	7074: "k_EMsgGCSpectateFriendGameResponse",
	7075: "k_EMsgGCPlayerReports",
	7076: "k_EMsgGCReportsRemainingRequest",
	7077: "k_EMsgGCReportsRemainingResponse",
	7078: "k_EMsgGCSubmitPlayerReport",
	7079: "k_EMsgGCSubmitPlayerReportResponse",
	7080: "k_EMsgGCGameChatLog",
	7081: "k_EMsgGCPracticeLobbyKick",
	7082: "k_EMsgGCReportCountsRequest",
	7083: "k_EMsgGCReportCountsResponse",
	7084: "k_EMsgGCRequestSaveGames",
	7085: "k_EMsgGCRequestSaveGamesServer",
	7086: "k_EMsgGCRequestSaveGamesResponse",
	7087: "k_EMsgGCLeaverDetectedResponse",
	7088: "k_EMsgGCPlayerFailedToConnect",
	7089: "k_EMsgGCGCToRelayConnect",
	7090: "k_EMsgGCGCToRelayConnectresponse",
	7091: "k_EMsgGCWatchGame",
	7092: "k_EMsgGCWatchGameResponse",
	7093: "k_EMsgGCBanStatusRequest",
	7094: "k_EMsgGCBanStatusResponse",
	7095: "k_EMsgGCMatchDetailsRequest",
	7096: "k_EMsgGCMatchDetailsResponse",
	7097: "k_EMsgGCCancelWatchGame",
	7098: "k_EMsgGCProfileRequest",
	7099: "k_EMsgGCProfileResponse",
	7102: "k_EMsgGCPopup",
	7104: "k_EMsgGCDOTAClearNotifySuccessfulReport",
	7108: "k_EMsgGCGenericResult",
	7111: "k_EMsgGCFriendPracticeLobbyListRequest",
	7112: "k_EMsgGCFriendPracticeLobbyListResponse",
	7113: "k_EMsgGCPracticeLobbyJoinResponse",
	7114: "k_EMsgClientEconNotification_Job",
	7115: "k_EMsgGCCreateTeam",
	7116: "k_EMsgGCCreateTeamResponse",
	7117: "k_EMsgGCDisbandTeam",
	7118: "k_EMsgGCDisbandTeamResponse",
	7119: "k_EMsgGCRequestTeamData",
	7120: "k_EMsgGCRequestTeamDataResponse",
	7121: "k_EMsgGCTeamData",
	7122: "k_EMsgGCTeamInvite_InviterToGC",
	7123: "k_EMsgGCTeamInvite_GCImmediateResponseToInviter",
	7124: "k_EMsgGCTeamInvite_GCRequestToInvitee",
	7125: "k_EMsgGCTeamInvite_InviteeResponseToGC",
	7126: "k_EMsgGCTeamInvite_GCResponseToInviter",
	7127: "k_EMsgGCTeamInvite_GCResponseToInvitee",
	7128: "k_EMsgGCKickTeamMember",
	7129: "k_EMsgGCKickTeamMemberResponse",
	7130: "k_EMsgGCLeaveTeam",
	7131: "k_EMsgGCLeaveTeamResponse",
	7132: "k_EMsgGCSuggestTeamMatchmaking",
	7133: "k_EMsgGCPlayerHeroesFavoritesAdd",
	7134: "k_EMsgGCPlayerHeroesFavoritesRemove",
	7139: "k_EMsgGCEditTeamLogo",
	7140: "k_EMsgGCEditTeamLogoResponse",
	7141: "k_EMsgGCSetShowcaseHero",
	7142: "k_EMsgGCApplyTeamToPracticeLobby",
	7143: "k_EMsgGCRequestInternatinalTicketEmail",
	7144: "k_EMsgGCTransferTeamAdmin",
	7145: "k_EMsgGCClearTournamentGame",
	7147: "k_EMsgRequestLeagueInfo",
	7148: "k_EMsgResponseLeagueInfo",
	7149: "k_EMsgGCPracticeLobbyJoinBroadcastChannel",
	7150: "k_EMsgGC_TournamentItemEvent",
	7151: "k_EMsgGC_TournamentItemEventResponse",
	7152: "k_EMsgCastMatchVote",
	7153: "k_EMsgCastMatchVoteResponse",
	7154: "k_EMsgRetrieveMatchVote",
	7155: "k_EMsgRetrieveMatchVoteResponse",
	7156: "k_EMsgTeamFanfare",
	7157: "k_EMsgResponseTeamFanfare",
	7158: "k_EMsgGC_GameServerUploadSaveGame",
	7159: "k_EMsgGC_GameServerSaveGameResult",
	7160: "k_EMsgGC_GameServerGetLoadGame",
	7161: "k_EMsgGC_GameServerGetLoadGameResult",
	7164: "k_EMsgGCTeamProfileRequest",
	7165: "k_EMsgGCTeamProfileResponse",
	7166: "k_EMsgGCEditTeamDetails",
	7167: "k_EMsgGCEditTeamDetailsResponse",
	7168: "k_EMsgGCProTeamListRequest",
	7169: "k_EMsgGCProTeamListResponse",
	7170: "k_EMsgGCReadyUpStatus",
	7171: "k_EMsgGCHallOfFame",
	7172: "k_EMsgGCHallOfFameRequest",
	7173: "k_EMsgGCHallOfFameResponse",
	7174: "k_EMsgGCGenerateDiretidePrizeList",
	7176: "k_EMsgGCRewardDiretidePrizes",
	7177: "k_EMsgGCDiretidePrizesRewardedResponse",
	7178: "k_EMsgGCHalloweenHighScoreRequest",
	7179: "k_EMsgGCHalloweenHighScoreResponse",
	7180: "k_EMsgGCGenerateDiretidePrizeListResponse",
	7182: "k_EMsgGCStorePromoPagesRequest",
	7183: "k_EMsgGCStorePromoPagesResponse",
	7184: "k_EMsgGCSpawnLootGreevil",
	7185: "k_EMsgGCDismissLootGreevil",
	7186: "k_EMsgGCToGCMatchCompleted",
	7187: "k_EMsgGCDismissLootGreevilResponse",
	7188: "k_EMsgGCBalancedShuffleLobby",
	7189: "k_EMsgGCToGCCheckLeaguePermission",
	7190: "k_EMsgGCToGCCheckLeaguePermissionResponse",
	7191: "k_EMsgGCLeagueScheduleRequest",
	7192: "k_EMsgGCLeagueScheduleResponse",
	7193: "k_EMsgGCLeagueScheduleEdit",
	7194: "k_EMsgGCLeagueScheduleEditResponse",
	7195: "k_EMsgGCLeaguesInMonthRequest",
	7196: "k_EMsgGCLeaguesInMonthResponse",
	7197: "k_EMsgGCMatchmakingStatsRequest",
	7198: "k_EMsgGCMatchmakingStatsResponse",
	7199: "k_EMsgGCBotGameCreate",
	7200: "k_EMsgGCSetMatchHistoryAccess",
	7201: "k_EMsgGCSetMatchHistoryAccessResponse",
	7203: "k_EMsgUpgradeLeagueItem",
	7204: "k_EMsgUpgradeLeagueItemResponse",
	7205: "k_EMsgGCTeamMemberProfileRequest",
	7206: "k_EMsgGCWatchDownloadedReplay",
	7207: "k_EMsgGCSetMapLocationState",
	7208: "k_EMsgGCSetMapLocationStateResponse",
	7209: "k_EMsgGCResetMapLocations",
	7210: "k_EMsgGCResetMapLocationsResponse",
	7211: "k_EMsgGCTeamOnProfile",
	7212: "k_EMsgGCSetFeaturedItems",
	7215: "k_EMsgGCFeaturedItems",
	7216: "k_EMsgRefreshPartnerAccountLink",
	7217: "k_EMsgClientsRejoinChatChannels",
	7218: "k_EMsgGCToGCGetUserChatInfo",
	7219: "k_EMsgGCToGCGetUserChatInfoResponse",
	7220: "k_EMsgGCToGCLeaveAllChatChannels",
	7221: "k_EMsgGCToGCUpdateAccountChatBan",
	7222: "k_EMsgGCGuildCreateRequest",
	7223: "k_EMsgGCGuildCreateResponse",
	7224: "k_EMsgGCGuildSetAccountRoleRequest",
	7225: "k_EMsgGCGuildSetAccountRoleResponse",
	7226: "k_EMsgGCRequestGuildData",
	7227: "k_EMsgGCGuildData",
	7228: "k_EMsgGCGuildInviteAccountRequest",
	7229: "k_EMsgGCGuildInviteAccountResponse",
	7230: "k_EMsgGCGuildCancelInviteRequest",
	7231: "k_EMsgGCGuildCancelInviteResponse",
	7232: "k_EMsgGCGuildUpdateDetailsRequest",
	7233: "k_EMsgGCGuildUpdateDetailsResponse",
	7234: "k_EMsgGCToGCCanInviteUser",
	7235: "k_EMsgGCToGCCanInviteUserResponse",
	7236: "k_EMsgGCToGCGetUserRank",
	7237: "k_EMsgGCToGCGetUserRankResponse",
	7240: "k_EMsgGCToGCUpdateTeamStats",
	7241: "k_EMsgGCToGCGetTeamRank",
	7242: "k_EMsgGCToGCGetTeamRankResponse",
	7245: "k_EMsgGCTeamIDByNameRequest",
	7246: "k_EMsgGCTeamIDByNameResponse",
	7247: "k_EMsgGCEditTeam",
	7248: "k_EMsgGCPassportDataRequest",
	7249: "k_EMsgGCPassportDataResponse",
	7251: "k_EMsgGCNotInGuildData",
	7254: "k_EMsgGCGuildInviteData",
	7255: "k_EMsgGCToGCGetLeagueAdmin",
	7256: "k_EMsgGCToGCGetLeagueAdminResponse",
	7258: "k_EMsgGCRequestLeaguePrizePool",
	7259: "k_EMsgGCRequestLeaguePrizePoolResponse",
	7261: "k_EMsgGCToGCUpdateOpenGuildPartyRequest",
	7262: "k_EMsgGCToGCUpdateOpenGuildPartyResponse",
	7263: "k_EMsgGCToGCDestroyOpenGuildPartyRequest",
	7264: "k_EMsgGCToGCDestroyOpenGuildPartyResponse",
	7265: "k_EMsgGCGuildUpdateMessage",
	7266: "k_EMsgGCPartySetOpenGuildRequest",
	7267: "k_EMsgGCPartySetOpenGuildResponse",
	7268: "k_EMsgGCGuildOpenPartyRefresh",
	7269: "k_EMsgGCJoinOpenGuildPartyRequest",
	7270: "k_EMsgGCJoinOpenGuildPartyResponse",
	7272: "k_EMsgGCLeaveChatChannel",
	7273: "k_EMsgGCChatMessage",
	7274: "k_EMsgGCGetHeroStandings",
	7275: "k_EMsgGCGetHeroStandingsResponse",
	7279: "k_EMsgGCGuildEditLogoRequest",
	7280: "k_EMsgGCGuildEditLogoResponse",
	7281: "k_EMsgGCGuildmatePracticeLobbyListRequest",
	7282: "k_EMsgGCGuildmatePracticeLobbyListResponse",
	7283: "k_EMsgGCItemEditorReservationsRequest",
	7284: "k_EMsgGCItemEditorReservationsResponse",
	7285: "k_EMsgGCItemEditorReserveItemDef",
	7286: "k_EMsgGCItemEditorReserveItemDefResponse",
	7287: "k_EMsgGCItemEditorReleaseReservation",
	7288: "k_EMsgGCItemEditorReleaseReservationResponse",
	7289: "k_EMsgGCRewardTutorialPrizes",
	7290: "k_EMsgGCLastHitChallengeHighScorePost",
	7291: "k_EMsgGCLastHitChallengeHighScoreRequest",
	7292: "k_EMsgGCLastHitChallengeHighScoreResponse",
	7293: "k_EMsgGCCreateFantasyLeagueRequest",
	7294: "k_EMsgGCCreateFantasyLeagueResponse",
	7297: "k_EMsgGCFantasyLeagueInfoRequest",
	7298: "k_EMsgGCFantasyLeagueInfoResponse",
	7299: "k_EMsgGCFantasyLeagueInfo",
	7300: "k_EMsgGCCreateFantasyTeamRequest",
	7301: "k_EMsgGCCreateFantasyTeamResponse",
	7302: "k_EMsgGCEditFantasyTeamRequest",
	7303: "k_EMsgGCEditFantasyTeamResponse",
	7304: "k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID",
	7305: "k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID",
	7306: "k_EMsgGCFantasyTeamInfoResponse",
	7307: "k_EMsgGCFantasyTeamInfo",
	7308: "k_EMsgGCFantasyLivePlayerStats",
	7309: "k_EMsgGCFantasyFinalPlayerStats",
	7310: "k_EMsgGCFantasyMatch",
	7311: "k_EMsgGCToGCReloadVersions",
	7312: "k_EMsgGCFantasyTeamScoreRequest",
	7313: "k_EMsgGCFantasyTeamScoreResponse",
	7314: "k_EMsgGCFantasyTeamStandingsRequest",
	7315: "k_EMsgGCFantasyTeamStandingsResponse",
	7316: "k_EMsgGCFantasyPlayerScoreRequest",
	7317: "k_EMsgGCFantasyPlayerScoreResponse",
	7318: "k_EMsgGCFantasyPlayerStandingsRequest",
	7319: "k_EMsgGCFantasyPlayerStandingsResponse",
	7320: "k_EMsgGCFlipLobbyTeams",
	7321: "k_EMsgGCCustomGameCreate",
	7322: "k_EMsgGCFantasyPlayerInfoRequest",
	7323: "k_EMsgGCFantasyPlayerInfoResponse",
	7324: "k_EMsgGCToGCProcessPlayerReportForTarget",
	7325: "k_EMsgGCToGCProcessReportSuccess",
	7326: "k_EMsgGCNotifyAccountFlagsChange",
	7327: "k_EMsgGCSetProfilePrivacy",
	7328: "k_EMsgGCSetProfilePrivacyResponse",
	7329: "k_EMsgGCSteamProfileRequest",
	7330: "k_EMsgGCSteamProfileRequestResponse",
	7331: "k_EMsgGCFantasyLeagueCreateInfoRequest",
	7332: "k_EMsgGCFantasyLeagueCreateInfoResponse",
	7333: "k_EMsgGCFantasyLeagueInviteInfoRequest",
	7334: "k_EMsgGCFantasyLeagueInviteInfoResponse",
	7335: "k_EMsgGCClientIgnoredUser",
	7336: "k_EMsgGCFantasyLeagueCreateRequest",
	7337: "k_EMsgGCFantasyLeagueCreateResponse",
	7338: "k_EMsgGCFantasyTeamCreateRequest",
	7339: "k_EMsgGCFantasyTeamCreateResponse",
	7340: "k_EMsgGCFantasyLeagueFriendJoinListRequest",
	7341: "k_EMsgGCFantasyLeagueFriendJoinListResponse",
	7342: "k_EMsgGCClientSuspended",
	7343: "k_EMsgGCPartyMemberSetCoach",
	7344: "k_EMsgGCFantasyLeagueEditInvitesRequest",
	7345: "k_EMsgGCFantasyLeagueEditInvitesResponse",
	7346: "k_EMsgGCPracticeLobbySetCoach",
	7347: "k_EMsgGCFantasyLeagueEditInfoRequest",
	7348: "k_EMsgGCFantasyLeagueEditInfoResponse",
	7349: "k_EMsgGCFantasyLeagueDraftStatusRequest",
	7350: "k_EMsgGCFantasyLeagueDraftStatus",
	7351: "k_EMsgGCFantasyLeagueDraftPlayerRequest",
	7352: "k_EMsgGCFantasyLeagueDraftPlayerResponse",
	7353: "k_EMsgGCFantasyLeagueMatchupsRequest",
	7354: "k_EMsgGCFantasyLeagueMatchupsResponse",
	7355: "k_EMsgGCFantasyTeamRosterSwapRequest",
	7356: "k_EMsgGCFantasyTeamRosterSwapResponse",
	7357: "k_EMsgGCFantasyTeamRosterRequest",
	7358: "k_EMsgGCFantasyTeamRosterResponse",
	7359: "k_EMsgGCNexonPartnerUpdate",
	7360: "k_EMsgGCToGCProcessPCBangRewardPoints",
	7361: "k_EMsgGCFantasyTeamRosterAddDropRequest",
	7362: "k_EMsgGCFantasyTeamRosterAddDropResponse",
	7363: "k_EMsgPresentedClientTerminateDlg",
	7364: "k_EMsgGCFantasyPlayerHisoricalStatsRequest",
	7365: "k_EMsgGCFantasyPlayerHisoricalStatsResponse",
	7366: "k_EMsgGCPCBangTimedRewardMessage",
	7367: "k_EMsgGCLobbyUpdateBroadcastChannelInfo",
	7368: "k_EMsgGCFantasyTeamTradesRequest",
	7369: "k_EMsgGCFantasyTeamTradesResponse",
	7370: "k_EMsgGCFantasyTeamTradeCancelRequest",
	7371: "k_EMsgGCFantasyTeamTradeCancelResponse",
	7372: "k_EMsgGCToGCGrantTournamentItem",
	7373: "k_EMsgGCProcessFantasyScheduledEvent",
	7374: "k_EMsgGCToGCGrantPCBangRewardItem",
	7375: "k_EMsgGCToGCUpgradeTwitchViewerItems",
	7376: "k_EMsgGCToGCGetLiveMatchAffiliates",
	7377: "k_EMsgGCToGCGetLiveMatchAffiliatesResponse",
	7378: "k_EMsgGCToGCUpdatePlayerPennantCounts",
	7379: "k_EMsgGCToGCGetPlayerPennantCounts",
	7380: "k_EMsgGCToGCGetPlayerPennantCountsResponse",
	7381: "k_EMsgGCGameMatchSignOutPermissionRequest",
	7382: "k_EMsgGCGameMatchSignOutPermissionResponse",
	7383: "k_EMsgDOTAChatChannelMemberUpdate",
	7384: "k_EMsgDOTAAwardEventPoints",
	7385: "k_EMsgDOTARedeemEventPrize",
	7386: "k_EMsgDOTARedeemEventPrizeResponse",
	7387: "k_EMsgDOTAGetEventPoints",
	7388: "k_EMsgDOTAGetEventPointsResponse",
	7390: "k_EMsgGCToGCSignoutAwardEventPoints",
	7393: "k_EMsgDOTASendFriendRecruits",
	7394: "k_EMsgDOTAFriendRecruitsRequest",
	7395: "k_EMsgDOTAFriendRecruitsResponse",
	7396: "k_EMsgDOTAFriendRecruitInviteAcceptDecline",
	7397: "k_EMsgGCPartyLeaderWatchGamePrompt",
	7398: "k_EMsgDOTAFrostivusTimeElapsed",
	7399: "k_EMsgGCToGCGrantEarnedLicense",
	7402: "k_EMsgDOTALiveLeagueGameUpdate",
	7403: "k_EMsgDOTAChatGetUserList",
	7404: "k_EMsgDOTAChatGetUserListResponse",
	7405: "k_EMsgGCCompendiumSetSelection",
	7406: "k_EMsgGCCompendiumDataRequest",
	7407: "k_EMsgGCCompendiumDataResponse",
	7408: "k_EMsgDOTAGetPlayerMatchHistory",
	7409: "k_EMsgDOTAGetPlayerMatchHistoryResponse",
	7410: "k_EMsgGCToGCMatchmakingAddParty",
	7411: "k_EMsgGCToGCMatchmakingRemoveParty",
	7412: "k_EMsgGCToGCMatchmakingRemoveAllParties",
	7413: "k_EMsgGCToGCMatchmakingMatchFound",
	7414: "k_EMsgGCToGCUpdateMatchManagementStats",
	7415: "k_EMsgGCToGCUpdateMatchmakingStats",
	7416: "k_EMsgGCToServerPingRequest",
	7417: "k_EMsgGCToServerPingResponse",
	7418: "k_EMsgGCToServerConsoleCommand",
	7420: "k_EMsgGCToGCUpdateLiveLeagueGameInfo",
	7423: "k_EMsgGCMakeOffering",
	7424: "k_EMsgGCRequestOfferings",
	7425: "k_EMsgGCRequestOfferingsResponse",
	7426: "k_EMsgGCToGCProcessMatchLeaver",
	7427: "k_EMsgGCNotificationsRequest",
	7428: "k_EMsgGCNotificationsResponse",
	7429: "k_EMsgGCToGCModifyNotification",
	7430: "k_EMsgGCToGCSetNewNotifications",
	7431: "k_EMsgGCToGCSetIsLeagueAdmin",
	7432: "k_EMsgGCLeagueAdminState",
	7433: "k_EMsgGCToGCSendLeagueAdminState",
	7434: "k_EMsgGCLeagueAdminList",
	7435: "k_EMsgGCNotificationsMarkReadRequest",
	7436: "k_EMsgGCFantasyMessageAdd",
	7437: "k_EMsgGCFantasyMessagesRequest",
	7438: "k_EMsgGCFantasyMessagesResponse",
	7439: "k_EMsgGCFantasyScheduledMatchesRequest",
	7440: "k_EMsgGCFantasyScheduledMatchesResponse",
	7441: "k_EMsgGCToGCGrantLeagueAccess",
	7443: "k_EMsgGCEventGameCreate",
	7444: "k_EMsgGCPerfectWorldUserLookupRequest",
	7445: "k_EMsgGCPerfectWorldUserLookupResponse",
	7446: "k_EMsgGCToGCIncrementRecruitmentSDO",
	7447: "k_EMsgGCToGCIncrementRecruitmentLevel",
	7448: "k_EMsgGCFantasyRemoveOwner",
	7449: "k_EMsgGCFantasyRemoveOwnerResponse",
	7450: "k_EMsgGCRequestBatchPlayerResources",
	7451: "k_EMsgGCRequestBatchPlayerResourcesResponse",
	7452: "k_EMsgGCToGCSendUpdateLeagues",
	7453: "k_EMsgGCCompendiumSetSelectionResponse",
	7454: "k_EMsgGCPlayerInfoRequest",
	7455: "k_EMsgGCPlayerInfo",
	7456: "k_EMsgGCPlayerInfoSubmit",
	7457: "k_EMsgGCPlayerInfoSubmitResponse",
	7458: "k_EMsgGCToGCGetAccountLevel",
	7459: "k_EMsgGCToGCGetAccountLevelResponse",
	7460: "k_EMsgGCToGCGetAccountPartner",
	7461: "k_EMsgGCToGCGetAccountPartnerResponse",
	7462: "k_EMsgGCToGCGetAccountProfile",
	7463: "k_EMsgGCToGCGetAccountProfileResponse",
	7464: "k_EMsgDOTAGetWeekendTourneySchedule",
	7465: "k_EMsgDOTAWeekendTourneySchedule",
	7466: "k_EMsgGCJoinableCustomGameModesRequest",
	7467: "k_EMsgGCJoinableCustomGameModesResponse",
	7468: "k_EMsgGCJoinableCustomLobbiesRequest",
	7469: "k_EMsgGCJoinableCustomLobbiesResponse",
	7470: "k_EMsgGCQuickJoinCustomLobby",
	7471: "k_EMsgGCQuickJoinCustomLobbyResponse",
	7472: "k_EMsgGCToGCGrantEventPointAction",
	7473: "k_EMsgServerGetEventPoints",
	7474: "k_EMsgServerGetEventPointsResponse",
	7475: "k_EMsgServerGrantSurveyPermission",
	7476: "k_EMsgServerGrantSurveyPermissionResponse",
	7477: "k_EMsgClientProvideSurveyResult",
	7478: "k_EMsgGCToGCSetCompendiumSelection",
	7480: "k_EMsgGCToGCUpdateTI4HeroQuest",
	7481: "k_EMsgGCCompendiumDataChanged",
	7482: "k_EMsgDOTAFantasyLeagueFindRequest",
	7483: "k_EMsgDOTAFantasyLeagueFindResponse",
	7484: "k_EMsgGCHasItemQuery",
	7485: "k_EMsgGCHasItemResponse",
	7486: "k_EMsgGCConsumeFantasyTicket",
	7487: "k_EMsgGCConsumeFantasyTicketFailure",
	7488: "k_EMsgGCToGCGrantEventPointActionMsg",
	7489: "k_EMsgClientToGCTrackDialogResult",
	7490: "k_EMsgGCFantasyLeaveLeagueRequest",
	7491: "k_EMsgGCFantasyLeaveLeagueResponse",
	7492: "k_EMsgGCToGCGetCompendiumSelections",
	7493: "k_EMsgGCToGCGetCompendiumSelectionsResponse",
	7494: "k_EMsgServerToGCMatchConnectionStats",
	7495: "k_EMsgGCToClientTournamentItemDrop",
	7496: "k_EMsgSQLDelayedGrantLeagueDrop",
	7497: "k_EMsgServerGCUpdateSpectatorCount",
	7498: "k_EMsgDOTAStartDailyHeroChallengeRequest",
	7499: "k_EMsgGCFantasyPlayerScoreDetailsRequest",
	7500: "k_EMsgGCFantasyPlayerScoreDetailsResponse",
	7501: "k_EMsgGCToGCEmoticonUnlock",
	7502: "k_EMsgSignOutDraftInfo",
	7503: "k_EMsgClientToGCEmoticonDataRequest",
	7504: "k_EMsgGCToClientEmoticonData",
	7505: "k_EMsgGCPracticeLobbyToggleBroadcastChannelCameramanStatus",
	7506: "k_EMsgGCToGCCreateWeekendTourneyRequest",
	7507: "k_EMsgGCToGCCreateWeekendTourneyResponse",
	7510: "k_EMsgGCToGCCreateGenericTeamsRequest",
	7511: "k_EMsgGCToGCCreateGenericTeamsResponse",
	7512: "k_EMsgSQLLaunchOneWeekendTourney",
	7513: "k_EMsgClientToGCSetAdditionalEquips",
	7514: "k_EMsgClientToGCGetAdditionalEquips",
	7515: "k_EMsgClientToGCGetAdditionalEquipsResponse",
	7516: "k_EMsgServerToGCGetAdditionalEquips",
	7517: "k_EMsgServerToGCGetAdditionalEquipsResponse",
	7518: "k_EMsgDOTARedeemItem",
	7519: "k_EMsgDOTARedeemItemResponse",
	7520: "k_EMsgSQLGCToGCGrantAllHeroProgress",
	7521: "k_EMsgClientToGCGetAllHeroProgress",
	7522: "k_EMsgClientToGCGetAllHeroProgressResponse",
	7523: "k_EMsgGCToGCGetServerForClient",
	7524: "k_EMsgGCToGCGetServerForClientResponse",
	7525: "k_EMsgSQLProcessTournamentGameOutcome",
	7526: "k_EMsgSQLGrantTrophyToAccount",
	7527: "k_EMsgClientToGCGetTrophyList",
	7528: "k_EMsgClientToGCGetTrophyListResponse",
	7529: "k_EMsgGCToClientTrophyAwarded",
	7530: "k_EMsgGCGameBotMatchSignOut",
	7531: "k_EMsgGCGameBotMatchSignOutPermissionRequest",
	7532: "k_EMsgSignOutBotInfo",
	7533: "k_EMsgGCToGCUpdateProfileCards",
	7534: "k_EMsgClientToGCGetProfileCard",
	7535: "k_EMsgClientToGCGetProfileCardResponse",
	7536: "k_EMsgServerToGCGetProfileCard",
	7537: "k_EMsgServerToGCGetProfileCardResponse",
	7538: "k_EMsgClientToGCSetProfileCardSlots",
	7539: "k_EMsgGCToClientProfileCardUpdated",
	7540: "k_EMsgServerToGCVictoryPredictions",
	7542: "k_EMsgClientToGCMarkNotificationListRead",
	7543: "k_EMsgGCToClientNewNotificationAdded",
	7544: "k_EMsgServerToGCSuspiciousActivity",
	7545: "k_EMsgSignOutCommunicationSummary",
	7546: "k_EMsgServerToGCRequestStatus_Response",
	7547: "k_EMsgClientToGCCreateHeroStatue",
	7548: "k_EMsgGCToClientHeroStatueCreateResult",
	7549: "k_EMsgGCGCToLANServerRelayConnect",
	7550: "k_EMsgSignOutAssassinMiniGameInfo",
	7551: "k_EMsgServerToGCGetIngameEventData",
	7552: "k_EMsgGCToGCUpdateIngameEventDataBroadcast",
	7553: "k_EMsgGCToServerIngameEventData_OraclePA",
	7554: "k_EMsgServerToGCReportKillSummaries",
	7555: "k_EMsgGCToGCReportKillSummaries",
	7556: "k_EMsgGCToGCUpdateAssassinMinigame",
	7557: "k_EMsgGCToGCFantasySetMatchLeague",
	7558: "k_EMsgClientToGCRecordCompendiumStats",
	7559: "k_EMsgGCItemEditorRequestLeagueInfo",
	7560: "k_EMsgGCItemEditorLeagueInfoResponse",
	7561: "k_EMsgGCToGCUpdatePlayerPredictions",
	7562: "k_EMsgGCToServerPredictionResult",
	7563: "k_EMsgServerToGCSignoutAwardAdditionalDrops",
	7564: "k_EMsgGCToGCSignoutAwardAdditionalDrops",
	7565: "k_EMsgGCToClientEventStatusChanged",
	7566: "k_EMsgGCHasItemDefsQuery",
	7567: "k_EMsgGCHasItemDefsResponse",
	7569: "k_EMsgGCToGCReplayMonitorValidateReplay",
	7570: "k_EMsgClientToGCExchangeItemsForOffering",
	7571: "k_EMsgClientToGCExchangeItemsForOfferingResponse",
	7572: "k_EMsgLobbyEventPoints",
	7573: "k_EMsgGCToGCGetCustomGameTickets",
	7574: "k_EMsgGCToGCGetCustomGameTicketsResponse",
	7575: "k_EMsgGCToClientNewBloomTimingUpdated",
	7576: "k_EMsgGCToGCCustomGamePlayed",
	7577: "k_EMsgGCToGCGrantEventPointsToUser",
	7578: "k_EMsgGCToGCSetEventMMPanicFlushTime",
	7579: "k_EMsgGameserverCrashReport",
	7580: "k_EMsgGameserverCrashReportResponse",
	7581: "k_EMsgGCToClientSteamDatagramTicket",
	7582: "k_EMsgGCToGCGrantEventOwnership",
	7583: "k_EMsgGCToGCSendAccountsEventPoints",
	7584: "k_EMsgClientToGCRerollPlayerChallenge",
	7585: "k_EMsgServerToGCRerollPlayerChallenge",
	7586: "k_EMsgGCRerollPlayerChallengeResponse",
	7587: "k_EMsgSignOutUpdatePlayerChallenge",
	7588: "k_EMsgClientToGCSetPartyLeader",
	7589: "k_EMsgClientToGCCancelPartyInvites",
	7590: "k_EMsgGCToGCMasterReloadAccount",
	7591: "k_EMsgSQLGCToGCGrantBackpackSlots",
	7592: "k_EMsgSQLGrantLeagueMatchToTicketHolders",
	7593: "k_EMsgClientToGCSetAdditionalEquipsResponse",
	7594: "k_EMsgGCToGCEmoticonUnlockNoRollback",
	7595: "k_EMsgGCToGCGetCompendiumFanfare",
	7596: "k_EMsgServerToGCHoldEventPoints",
	7597: "k_EMsgSignOutReleaseEventPointHolds",
	7598: "k_EMsgGCToGCChatNewUserSession",
	7599: "k_EMsgClientToGCGetLeagueSeries",
	7600: "k_EMsgClientToGCGetLeagueSeriesResponse",
	7601: "k_EMsgSQLGCToGCSignoutUpdateLeagueSchedule",
	7602: "k_EMsgGCToServerUpdateBroadcastCheers",
	7603: "k_EMsgClientToGCApplyGemCombiner",
	7604: "k_EMsgClientToGCCreateStaticRecipe",
	7605: "k_EMsgClientToGCCreateStaticRecipeResponse",
	7606: "k_EMsgClientToGCGetAllHeroOrder",
	7607: "k_EMsgClientToGCGetAllHeroOrderResponse",
	7608: "k_EMsgSQLGCToGCGrantBadgePoints",
	7609: "k_EMsgGCToGCGetAccountMatchStatus",
	7610: "k_EMsgGCToGCGetAccountMatchStatusResponse",
	8001: "k_EMsgGCDev_GrantWarKill",
	8002: "k_EMsgClientToGCCreateTeamShowcase",
	8003: "k_EMsgGCToClientTeamShowcaseCreateResult",
	8004: "k_EMsgServerToGCLockCharmTrading",
	8005: "k_EMsgDOTACNY2015EventPointUsage",
	8006: "k_EMsgClientToGCPlayerStatsRequest",
	8007: "k_EMsgGCToClientPlayerStatsResponse",
	8008: "k_EMsgGCClearPracticeLobbyTeam",
	8009: "k_EMsgClientToGCFindTopSourceTVGames",
	8010: "k_EMsgGCToClientFindTopSourceTVGamesResponse",
	8011: "k_EMsgGCLobbyList",
	8012: "k_EMsgGCLobbyListResponse",
	8013: "k_EMsgGCPlayerStatsMatchSignOut",
	8014: "k_EMsgClientToGCCustomGamePlayerCountRequest",
	8015: "k_EMsgGCToClientCustomGamePlayerCountResponse",
	8016: "k_EMsgClientToGCSocialFeedPostCommentRequest",
	8017: "k_EMsgGCToClientSocialFeedPostCommentResponse",
	8018: "k_EMsgClientToGCCustomGamesFriendsPlayedRequest",
	8019: "k_EMsgGCToClientCustomGamesFriendsPlayedResponse",
	8020: "k_EMsgClientToGCFriendsPlayedCustomGameRequest",
	8021: "k_EMsgGCToClientFriendsPlayedCustomGameResponse",
	8022: "k_EMsgClientToGCFeaturedHeroesRequest",
	8023: "k_EMsgGCToClientFeaturedHeroesResponse",
	8024: "k_EMsgGCTopCustomGamesList",
	8025: "k_EMsgClientToGCSocialMatchPostCommentRequest",
	8026: "k_EMsgGCToClientSocialMatchPostCommentResponse",
	8027: "k_EMsgClientToGCSocialMatchDetailsRequest",
	8028: "k_EMsgGCToClientSocialMatchDetailsResponse",
	8029: "k_EMsgClientToGCSetPartyOpen",
	8030: "k_EMsgClientToGCMergePartyInvite",
	8031: "k_EMsgGCToClientMergeGroupInviteReply",
	8032: "k_EMsgClientToGCMergePartyResponse",
	8033: "k_EMsgGCToClientMergePartyResponseReply",
	8034: "k_EMsgClientToGCGetProfileCardStats",
	8035: "k_EMsgClientToGCGetProfileCardStatsResponse",
	8036: "k_EMsgClientToGCTopLeagueMatchesRequest",
	8037: "k_EMsgClientToGCTopFriendMatchesRequest",
	8040: "k_EMsgGCToClientProfileCardStatsUpdated",
	8041: "k_EMsgServerToGCRealtimeStats",
	8042: "k_EMsgGCToServerRealtimeStatsStartStop",
	8045: "k_EMsgGCToGCGetServersForClients",
	8046: "k_EMsgGCToGCGetServersForClientsResponse",
	8047: "k_EMsgGCPracticeLobbyKickFromTeam",
	8048: "k_EMsgDOTAChatGetMemberCount",
	8049: "k_EMsgDOTAChatGetMemberCountResponse",
	8050: "k_EMsgClientToGCSocialFeedPostMessageRequest",
	8051: "k_EMsgGCToClientSocialFeedPostMessageResponse",
	8052: "k_EMsgCustomGameListenServerStartedLoading",
	8053: "k_EMsgCustomGameClientFinishedLoading",
	8054: "k_EMsgGCPracticeLobbyCloseBroadcastChannel",
	8055: "k_EMsgGCStartFindingMatchResponse",
	8056: "k_EMsgSQLGCToGCUpdateHeroMMR",
	8057: "k_EMsgSQLGCToGCGrantAccountFlag",
	8058: "k_EMsgGCToGCGetAccountFlags",
	8059: "k_EMsgGCToGCGetAccountFlagsResponse",
	8060: "k_EMsgSignOutWagerStats",
	8061: "k_EMsgGCToClientTopLeagueMatchesResponse",
	8062: "k_EMsgGCToClientTopFriendMatchesResponse",
	8063: "k_EMsgClientToGCMatchesMinimalRequest",
	8064: "k_EMsgClientToGCMatchesMinimalResponse",
	8065: "k_EMsgGCToGCGetProfileBadgePoints",
	8066: "k_EMsgGCToGCGetProfileBadgePointsResponse",
	8067: "k_EMsgGCToClientChatRegionsEnabled",
	8068: "k_EMsgClientToGCPingData",
	8069: "k_EMsgServerToGCMatchDetailsRequest",
	8070: "k_EMsgGCToServerMatchDetailsResponse",
	8071: "k_EMsgGCToGCEnsureAccountInParty",
	8072: "k_EMsgGCToGCEnsureAccountInPartyResponse",
	8073: "k_EMsgClientToGCGetProfileTickets",
	8074: "k_EMsgClientToGCGetProfileTicketsResponse",
}
var EDOTAGCMsg_value = map[string]int32{
	"k_EMsgGCDOTABase":                                           7000,
	"k_EMsgGCGeneralResponse":                                    7001,
	"k_EMsgGCGameMatchSignOut":                                   7004,
	"k_EMsgGCGameMatchSignOutResponse":                           7005,
	"k_EMsgGCJoinChatChannel":                                    7009,
	"k_EMsgGCJoinChatChannelResponse":                            7010,
	"k_EMsgGCOtherJoinedChannel":                                 7013,
	"k_EMsgGCOtherLeftChannel":                                   7014,
	"k_EMsgGCMatchHistoryList":                                   7017,
	"k_EMsgServerToGCRequestStatus":                              7026,
	"k_EMsgGCGetRecentMatches":                                   7027,
	"k_EMsgGCRecentMatchesResponse":                              7028,
	"k_EMsgGCStartFindingMatch":                                  7033,
	"k_EMsgGCConnectedPlayers":                                   7034,
	"k_EMsgGCAbandonCurrentGame":                                 7035,
	"k_EMsgGCStopFindingMatch":                                   7036,
	"k_EMsgGCPracticeLobbyCreate":                                7038,
	"k_EMsgGCPracticeLobbyLeave":                                 7040,
	"k_EMsgGCPracticeLobbyLaunch":                                7041,
	"k_EMsgGCPracticeLobbyList":                                  7042,
	"k_EMsgGCPracticeLobbyListResponse":                          7043,
	"k_EMsgGCPracticeLobbyJoin":                                  7044,
	"k_EMsgGCPracticeLobbySetDetails":                            7046,
	"k_EMsgGCPracticeLobbySetTeamSlot":                           7047,
	"k_EMsgGCInitialQuestionnaireResponse":                       7049,
	"k_EMsgGCTournamentRequest":                                  7051,
	"k_EMsgGCTournamentResponse":                                 7052,
	"k_EMsgGCPracticeLobbyResponse":                              7055,
	"k_EMsgGCBroadcastNotification":                              7056,
	"k_EMsgGCLiveScoreboardUpdate":                               7057,
	"k_EMsgGCRequestChatChannelList":                             7060,
	"k_EMsgGCRequestChatChannelListResponse":                     7061,
	"k_EMsgGCRequestMatches":                                     7064,
	"k_EMsgGCRequestMatchesResponse":                             7065,
	"k_EMsgGCRequestPlayerResources":                             7068,
	"k_EMsgGCRequestPlayerResourcesResponse":                     7069,
	"k_EMsgGCReadyUp":                                            7070,
	"k_EMsgGCKickedFromMatchmakingQueue":                         7071,
	"k_EMsgGCLeaverDetected":                                     7072,
	"k_EMsgGCSpectateFriendGame":                                 7073,
	"k_EMsgGCSpectateFriendGameResponse":                         7074,
	"k_EMsgGCPlayerReports":                                      7075,
	"k_EMsgGCReportsRemainingRequest":                            7076,
	"k_EMsgGCReportsRemainingResponse":                           7077,
	"k_EMsgGCSubmitPlayerReport":                                 7078,
	"k_EMsgGCSubmitPlayerReportResponse":                         7079,
	"k_EMsgGCGameChatLog":                                        7080,
	"k_EMsgGCPracticeLobbyKick":                                  7081,
	"k_EMsgGCReportCountsRequest":                                7082,
	"k_EMsgGCReportCountsResponse":                               7083,
	"k_EMsgGCRequestSaveGames":                                   7084,
	"k_EMsgGCRequestSaveGamesServer":                             7085,
	"k_EMsgGCRequestSaveGamesResponse":                           7086,
	"k_EMsgGCLeaverDetectedResponse":                             7087,
	"k_EMsgGCPlayerFailedToConnect":                              7088,
	"k_EMsgGCGCToRelayConnect":                                   7089,
	"k_EMsgGCGCToRelayConnectresponse":                           7090,
	"k_EMsgGCWatchGame":                                          7091,
	"k_EMsgGCWatchGameResponse":                                  7092,
	"k_EMsgGCBanStatusRequest":                                   7093,
	"k_EMsgGCBanStatusResponse":                                  7094,
	"k_EMsgGCMatchDetailsRequest":                                7095,
	"k_EMsgGCMatchDetailsResponse":                               7096,
	"k_EMsgGCCancelWatchGame":                                    7097,
	"k_EMsgGCProfileRequest":                                     7098,
	"k_EMsgGCProfileResponse":                                    7099,
	"k_EMsgGCPopup":                                              7102,
	"k_EMsgGCDOTAClearNotifySuccessfulReport":                    7104,
	"k_EMsgGCGenericResult":                                      7108,
	"k_EMsgGCFriendPracticeLobbyListRequest":                     7111,
	"k_EMsgGCFriendPracticeLobbyListResponse":                    7112,
	"k_EMsgGCPracticeLobbyJoinResponse":                          7113,
	"k_EMsgClientEconNotification_Job":                           7114,
	"k_EMsgGCCreateTeam":                                         7115,
	"k_EMsgGCCreateTeamResponse":                                 7116,
	"k_EMsgGCDisbandTeam":                                        7117,
	"k_EMsgGCDisbandTeamResponse":                                7118,
	"k_EMsgGCRequestTeamData":                                    7119,
	"k_EMsgGCRequestTeamDataResponse":                            7120,
	"k_EMsgGCTeamData":                                           7121,
	"k_EMsgGCTeamInvite_InviterToGC":                             7122,
	"k_EMsgGCTeamInvite_GCImmediateResponseToInviter":            7123,
	"k_EMsgGCTeamInvite_GCRequestToInvitee":                      7124,
	"k_EMsgGCTeamInvite_InviteeResponseToGC":                     7125,
	"k_EMsgGCTeamInvite_GCResponseToInviter":                     7126,
	"k_EMsgGCTeamInvite_GCResponseToInvitee":                     7127,
	"k_EMsgGCKickTeamMember":                                     7128,
	"k_EMsgGCKickTeamMemberResponse":                             7129,
	"k_EMsgGCLeaveTeam":                                          7130,
	"k_EMsgGCLeaveTeamResponse":                                  7131,
	"k_EMsgGCSuggestTeamMatchmaking":                             7132,
	"k_EMsgGCPlayerHeroesFavoritesAdd":                           7133,
	"k_EMsgGCPlayerHeroesFavoritesRemove":                        7134,
	"k_EMsgGCEditTeamLogo":                                       7139,
	"k_EMsgGCEditTeamLogoResponse":                               7140,
	"k_EMsgGCSetShowcaseHero":                                    7141,
	"k_EMsgGCApplyTeamToPracticeLobby":                           7142,
	"k_EMsgGCRequestInternatinalTicketEmail":                     7143,
	"k_EMsgGCTransferTeamAdmin":                                  7144,
	"k_EMsgGCClearTournamentGame":                                7145,
	"k_EMsgRequestLeagueInfo":                                    7147,
	"k_EMsgResponseLeagueInfo":                                   7148,
	"k_EMsgGCPracticeLobbyJoinBroadcastChannel":                  7149,
	"k_EMsgGC_TournamentItemEvent":                               7150,
	"k_EMsgGC_TournamentItemEventResponse":                       7151,
	"k_EMsgCastMatchVote":                                        7152,
	"k_EMsgCastMatchVoteResponse":                                7153,
	"k_EMsgRetrieveMatchVote":                                    7154,
	"k_EMsgRetrieveMatchVoteResponse":                            7155,
	"k_EMsgTeamFanfare":                                          7156,
	"k_EMsgResponseTeamFanfare":                                  7157,
	"k_EMsgGC_GameServerUploadSaveGame":                          7158,
	"k_EMsgGC_GameServerSaveGameResult":                          7159,
	"k_EMsgGC_GameServerGetLoadGame":                             7160,
	"k_EMsgGC_GameServerGetLoadGameResult":                       7161,
	"k_EMsgGCTeamProfileRequest":                                 7164,
	"k_EMsgGCTeamProfileResponse":                                7165,
	"k_EMsgGCEditTeamDetails":                                    7166,
	"k_EMsgGCEditTeamDetailsResponse":                            7167,
	"k_EMsgGCProTeamListRequest":                                 7168,
	"k_EMsgGCProTeamListResponse":                                7169,
	"k_EMsgGCReadyUpStatus":                                      7170,
	"k_EMsgGCHallOfFame":                                         7171,
	"k_EMsgGCHallOfFameRequest":                                  7172,
	"k_EMsgGCHallOfFameResponse":                                 7173,
	"k_EMsgGCGenerateDiretidePrizeList":                          7174,
	"k_EMsgGCRewardDiretidePrizes":                               7176,
	"k_EMsgGCDiretidePrizesRewardedResponse":                     7177,
	"k_EMsgGCHalloweenHighScoreRequest":                          7178,
	"k_EMsgGCHalloweenHighScoreResponse":                         7179,
	"k_EMsgGCGenerateDiretidePrizeListResponse":                  7180,
	"k_EMsgGCStorePromoPagesRequest":                             7182,
	"k_EMsgGCStorePromoPagesResponse":                            7183,
	"k_EMsgGCSpawnLootGreevil":                                   7184,
	"k_EMsgGCDismissLootGreevil":                                 7185,
	"k_EMsgGCToGCMatchCompleted":                                 7186,
	"k_EMsgGCDismissLootGreevilResponse":                         7187,
	"k_EMsgGCBalancedShuffleLobby":                               7188,
	"k_EMsgGCToGCCheckLeaguePermission":                          7189,
	"k_EMsgGCToGCCheckLeaguePermissionResponse":                  7190,
	"k_EMsgGCLeagueScheduleRequest":                              7191,
	"k_EMsgGCLeagueScheduleResponse":                             7192,
	"k_EMsgGCLeagueScheduleEdit":                                 7193,
	"k_EMsgGCLeagueScheduleEditResponse":                         7194,
	"k_EMsgGCLeaguesInMonthRequest":                              7195,
	"k_EMsgGCLeaguesInMonthResponse":                             7196,
	"k_EMsgGCMatchmakingStatsRequest":                            7197,
	"k_EMsgGCMatchmakingStatsResponse":                           7198,
	"k_EMsgGCBotGameCreate":                                      7199,
	"k_EMsgGCSetMatchHistoryAccess":                              7200,
	"k_EMsgGCSetMatchHistoryAccessResponse":                      7201,
	"k_EMsgUpgradeLeagueItem":                                    7203,
	"k_EMsgUpgradeLeagueItemResponse":                            7204,
	"k_EMsgGCTeamMemberProfileRequest":                           7205,
	"k_EMsgGCWatchDownloadedReplay":                              7206,
	"k_EMsgGCSetMapLocationState":                                7207,
	"k_EMsgGCSetMapLocationStateResponse":                        7208,
	"k_EMsgGCResetMapLocations":                                  7209,
	"k_EMsgGCResetMapLocationsResponse":                          7210,
	"k_EMsgGCTeamOnProfile":                                      7211,
	"k_EMsgGCSetFeaturedItems":                                   7212,
	"k_EMsgGCFeaturedItems":                                      7215,
	"k_EMsgRefreshPartnerAccountLink":                            7216,
	"k_EMsgClientsRejoinChatChannels":                            7217,
	"k_EMsgGCToGCGetUserChatInfo":                                7218,
	"k_EMsgGCToGCGetUserChatInfoResponse":                        7219,
	"k_EMsgGCToGCLeaveAllChatChannels":                           7220,
	"k_EMsgGCToGCUpdateAccountChatBan":                           7221,
	"k_EMsgGCGuildCreateRequest":                                 7222,
	"k_EMsgGCGuildCreateResponse":                                7223,
	"k_EMsgGCGuildSetAccountRoleRequest":                         7224,
	"k_EMsgGCGuildSetAccountRoleResponse":                        7225,
	"k_EMsgGCRequestGuildData":                                   7226,
	"k_EMsgGCGuildData":                                          7227,
	"k_EMsgGCGuildInviteAccountRequest":                          7228,
	"k_EMsgGCGuildInviteAccountResponse":                         7229,
	"k_EMsgGCGuildCancelInviteRequest":                           7230,
	"k_EMsgGCGuildCancelInviteResponse":                          7231,
	"k_EMsgGCGuildUpdateDetailsRequest":                          7232,
	"k_EMsgGCGuildUpdateDetailsResponse":                         7233,
	"k_EMsgGCToGCCanInviteUser":                                  7234,
	"k_EMsgGCToGCCanInviteUserResponse":                          7235,
	"k_EMsgGCToGCGetUserRank":                                    7236,
	"k_EMsgGCToGCGetUserRankResponse":                            7237,
	"k_EMsgGCToGCUpdateTeamStats":                                7240,
	"k_EMsgGCToGCGetTeamRank":                                    7241,
	"k_EMsgGCToGCGetTeamRankResponse":                            7242,
	"k_EMsgGCTeamIDByNameRequest":                                7245,
	"k_EMsgGCTeamIDByNameResponse":                               7246,
	"k_EMsgGCEditTeam":                                           7247,
	"k_EMsgGCPassportDataRequest":                                7248,
	"k_EMsgGCPassportDataResponse":                               7249,
	"k_EMsgGCNotInGuildData":                                     7251,
	"k_EMsgGCGuildInviteData":                                    7254,
	"k_EMsgGCToGCGetLeagueAdmin":                                 7255,
	"k_EMsgGCToGCGetLeagueAdminResponse":                         7256,
	"k_EMsgGCRequestLeaguePrizePool":                             7258,
	"k_EMsgGCRequestLeaguePrizePoolResponse":                     7259,
	"k_EMsgGCToGCUpdateOpenGuildPartyRequest":                    7261,
	"k_EMsgGCToGCUpdateOpenGuildPartyResponse":                   7262,
	"k_EMsgGCToGCDestroyOpenGuildPartyRequest":                   7263,
	"k_EMsgGCToGCDestroyOpenGuildPartyResponse":                  7264,
	"k_EMsgGCGuildUpdateMessage":                                 7265,
	"k_EMsgGCPartySetOpenGuildRequest":                           7266,
	"k_EMsgGCPartySetOpenGuildResponse":                          7267,
	"k_EMsgGCGuildOpenPartyRefresh":                              7268,
	"k_EMsgGCJoinOpenGuildPartyRequest":                          7269,
	"k_EMsgGCJoinOpenGuildPartyResponse":                         7270,
	"k_EMsgGCLeaveChatChannel":                                   7272,
	"k_EMsgGCChatMessage":                                        7273,
	"k_EMsgGCGetHeroStandings":                                   7274,
	"k_EMsgGCGetHeroStandingsResponse":                           7275,
	"k_EMsgGCGuildEditLogoRequest":                               7279,
	"k_EMsgGCGuildEditLogoResponse":                              7280,
	"k_EMsgGCGuildmatePracticeLobbyListRequest":                  7281,
	"k_EMsgGCGuildmatePracticeLobbyListResponse":                 7282,
	"k_EMsgGCItemEditorReservationsRequest":                      7283,
	"k_EMsgGCItemEditorReservationsResponse":                     7284,
	"k_EMsgGCItemEditorReserveItemDef":                           7285,
	"k_EMsgGCItemEditorReserveItemDefResponse":                   7286,
	"k_EMsgGCItemEditorReleaseReservation":                       7287,
	"k_EMsgGCItemEditorReleaseReservationResponse":               7288,
	"k_EMsgGCRewardTutorialPrizes":                               7289,
	"k_EMsgGCLastHitChallengeHighScorePost":                      7290,
	"k_EMsgGCLastHitChallengeHighScoreRequest":                   7291,
	"k_EMsgGCLastHitChallengeHighScoreResponse":                  7292,
	"k_EMsgGCCreateFantasyLeagueRequest":                         7293,
	"k_EMsgGCCreateFantasyLeagueResponse":                        7294,
	"k_EMsgGCFantasyLeagueInfoRequest":                           7297,
	"k_EMsgGCFantasyLeagueInfoResponse":                          7298,
	"k_EMsgGCFantasyLeagueInfo":                                  7299,
	"k_EMsgGCCreateFantasyTeamRequest":                           7300,
	"k_EMsgGCCreateFantasyTeamResponse":                          7301,
	"k_EMsgGCEditFantasyTeamRequest":                             7302,
	"k_EMsgGCEditFantasyTeamResponse":                            7303,
	"k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID":            7304,
	"k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID":             7305,
	"k_EMsgGCFantasyTeamInfoResponse":                            7306,
	"k_EMsgGCFantasyTeamInfo":                                    7307,
	"k_EMsgGCFantasyLivePlayerStats":                             7308,
	"k_EMsgGCFantasyFinalPlayerStats":                            7309,
	"k_EMsgGCFantasyMatch":                                       7310,
	"k_EMsgGCToGCReloadVersions":                                 7311,
	"k_EMsgGCFantasyTeamScoreRequest":                            7312,
	"k_EMsgGCFantasyTeamScoreResponse":                           7313,
	"k_EMsgGCFantasyTeamStandingsRequest":                        7314,
	"k_EMsgGCFantasyTeamStandingsResponse":                       7315,
	"k_EMsgGCFantasyPlayerScoreRequest":                          7316,
	"k_EMsgGCFantasyPlayerScoreResponse":                         7317,
	"k_EMsgGCFantasyPlayerStandingsRequest":                      7318,
	"k_EMsgGCFantasyPlayerStandingsResponse":                     7319,
	"k_EMsgGCFlipLobbyTeams":                                     7320,
	"k_EMsgGCCustomGameCreate":                                   7321,
	"k_EMsgGCFantasyPlayerInfoRequest":                           7322,
	"k_EMsgGCFantasyPlayerInfoResponse":                          7323,
	"k_EMsgGCToGCProcessPlayerReportForTarget":                   7324,
	"k_EMsgGCToGCProcessReportSuccess":                           7325,
	"k_EMsgGCNotifyAccountFlagsChange":                           7326,
	"k_EMsgGCSetProfilePrivacy":                                  7327,
	"k_EMsgGCSetProfilePrivacyResponse":                          7328,
	"k_EMsgGCSteamProfileRequest":                                7329,
	"k_EMsgGCSteamProfileRequestResponse":                        7330,
	"k_EMsgGCFantasyLeagueCreateInfoRequest":                     7331,
	"k_EMsgGCFantasyLeagueCreateInfoResponse":                    7332,
	"k_EMsgGCFantasyLeagueInviteInfoRequest":                     7333,
	"k_EMsgGCFantasyLeagueInviteInfoResponse":                    7334,
	"k_EMsgGCClientIgnoredUser":                                  7335,
	"k_EMsgGCFantasyLeagueCreateRequest":                         7336,
	"k_EMsgGCFantasyLeagueCreateResponse":                        7337,
	"k_EMsgGCFantasyTeamCreateRequest":                           7338,
	"k_EMsgGCFantasyTeamCreateResponse":                          7339,
	"k_EMsgGCFantasyLeagueFriendJoinListRequest":                 7340,
	"k_EMsgGCFantasyLeagueFriendJoinListResponse":                7341,
	"k_EMsgGCClientSuspended":                                    7342,
	"k_EMsgGCPartyMemberSetCoach":                                7343,
	"k_EMsgGCFantasyLeagueEditInvitesRequest":                    7344,
	"k_EMsgGCFantasyLeagueEditInvitesResponse":                   7345,
	"k_EMsgGCPracticeLobbySetCoach":                              7346,
	"k_EMsgGCFantasyLeagueEditInfoRequest":                       7347,
	"k_EMsgGCFantasyLeagueEditInfoResponse":                      7348,
	"k_EMsgGCFantasyLeagueDraftStatusRequest":                    7349,
	"k_EMsgGCFantasyLeagueDraftStatus":                           7350,
	"k_EMsgGCFantasyLeagueDraftPlayerRequest":                    7351,
	"k_EMsgGCFantasyLeagueDraftPlayerResponse":                   7352,
	"k_EMsgGCFantasyLeagueMatchupsRequest":                       7353,
	"k_EMsgGCFantasyLeagueMatchupsResponse":                      7354,
	"k_EMsgGCFantasyTeamRosterSwapRequest":                       7355,
	"k_EMsgGCFantasyTeamRosterSwapResponse":                      7356,
	"k_EMsgGCFantasyTeamRosterRequest":                           7357,
	"k_EMsgGCFantasyTeamRosterResponse":                          7358,
	"k_EMsgGCNexonPartnerUpdate":                                 7359,
	"k_EMsgGCToGCProcessPCBangRewardPoints":                      7360,
	"k_EMsgGCFantasyTeamRosterAddDropRequest":                    7361,
	"k_EMsgGCFantasyTeamRosterAddDropResponse":                   7362,
	"k_EMsgPresentedClientTerminateDlg":                          7363,
	"k_EMsgGCFantasyPlayerHisoricalStatsRequest":                 7364,
	"k_EMsgGCFantasyPlayerHisoricalStatsResponse":                7365,
	"k_EMsgGCPCBangTimedRewardMessage":                           7366,
	"k_EMsgGCLobbyUpdateBroadcastChannelInfo":                    7367,
	"k_EMsgGCFantasyTeamTradesRequest":                           7368,
	"k_EMsgGCFantasyTeamTradesResponse":                          7369,
	"k_EMsgGCFantasyTeamTradeCancelRequest":                      7370,
	"k_EMsgGCFantasyTeamTradeCancelResponse":                     7371,
	"k_EMsgGCToGCGrantTournamentItem":                            7372,
	"k_EMsgGCProcessFantasyScheduledEvent":                       7373,
	"k_EMsgGCToGCGrantPCBangRewardItem":                          7374,
	"k_EMsgGCToGCUpgradeTwitchViewerItems":                       7375,
	"k_EMsgGCToGCGetLiveMatchAffiliates":                         7376,
	"k_EMsgGCToGCGetLiveMatchAffiliatesResponse":                 7377,
	"k_EMsgGCToGCUpdatePlayerPennantCounts":                      7378,
	"k_EMsgGCToGCGetPlayerPennantCounts":                         7379,
	"k_EMsgGCToGCGetPlayerPennantCountsResponse":                 7380,
	"k_EMsgGCGameMatchSignOutPermissionRequest":                  7381,
	"k_EMsgGCGameMatchSignOutPermissionResponse":                 7382,
	"k_EMsgDOTAChatChannelMemberUpdate":                          7383,
	"k_EMsgDOTAAwardEventPoints":                                 7384,
	"k_EMsgDOTARedeemEventPrize":                                 7385,
	"k_EMsgDOTARedeemEventPrizeResponse":                         7386,
	"k_EMsgDOTAGetEventPoints":                                   7387,
	"k_EMsgDOTAGetEventPointsResponse":                           7388,
	"k_EMsgGCToGCSignoutAwardEventPoints":                        7390,
	"k_EMsgDOTASendFriendRecruits":                               7393,
	"k_EMsgDOTAFriendRecruitsRequest":                            7394,
	"k_EMsgDOTAFriendRecruitsResponse":                           7395,
	"k_EMsgDOTAFriendRecruitInviteAcceptDecline":                 7396,
	"k_EMsgGCPartyLeaderWatchGamePrompt":                         7397,
	"k_EMsgDOTAFrostivusTimeElapsed":                             7398,
	"k_EMsgGCToGCGrantEarnedLicense":                             7399,
	"k_EMsgDOTALiveLeagueGameUpdate":                             7402,
	"k_EMsgDOTAChatGetUserList":                                  7403,
	"k_EMsgDOTAChatGetUserListResponse":                          7404,
	"k_EMsgGCCompendiumSetSelection":                             7405,
	"k_EMsgGCCompendiumDataRequest":                              7406,
	"k_EMsgGCCompendiumDataResponse":                             7407,
	"k_EMsgDOTAGetPlayerMatchHistory":                            7408,
	"k_EMsgDOTAGetPlayerMatchHistoryResponse":                    7409,
	"k_EMsgGCToGCMatchmakingAddParty":                            7410,
	"k_EMsgGCToGCMatchmakingRemoveParty":                         7411,
	"k_EMsgGCToGCMatchmakingRemoveAllParties":                    7412,
	"k_EMsgGCToGCMatchmakingMatchFound":                          7413,
	"k_EMsgGCToGCUpdateMatchManagementStats":                     7414,
	"k_EMsgGCToGCUpdateMatchmakingStats":                         7415,
	"k_EMsgGCToServerPingRequest":                                7416,
	"k_EMsgGCToServerPingResponse":                               7417,
	"k_EMsgGCToServerConsoleCommand":                             7418,
	"k_EMsgGCToGCUpdateLiveLeagueGameInfo":                       7420,
	"k_EMsgGCMakeOffering":                                       7423,
	"k_EMsgGCRequestOfferings":                                   7424,
	"k_EMsgGCRequestOfferingsResponse":                           7425,
	"k_EMsgGCToGCProcessMatchLeaver":                             7426,
	"k_EMsgGCNotificationsRequest":                               7427,
	"k_EMsgGCNotificationsResponse":                              7428,
	"k_EMsgGCToGCModifyNotification":                             7429,
	"k_EMsgGCToGCSetNewNotifications":                            7430,
	"k_EMsgGCToGCSetIsLeagueAdmin":                               7431,
	"k_EMsgGCLeagueAdminState":                                   7432,
	"k_EMsgGCToGCSendLeagueAdminState":                           7433,
	"k_EMsgGCLeagueAdminList":                                    7434,
	"k_EMsgGCNotificationsMarkReadRequest":                       7435,
	"k_EMsgGCFantasyMessageAdd":                                  7436,
	"k_EMsgGCFantasyMessagesRequest":                             7437,
	"k_EMsgGCFantasyMessagesResponse":                            7438,
	"k_EMsgGCFantasyScheduledMatchesRequest":                     7439,
	"k_EMsgGCFantasyScheduledMatchesResponse":                    7440,
	"k_EMsgGCToGCGrantLeagueAccess":                              7441,
	"k_EMsgGCEventGameCreate":                                    7443,
	"k_EMsgGCPerfectWorldUserLookupRequest":                      7444,
	"k_EMsgGCPerfectWorldUserLookupResponse":                     7445,
	"k_EMsgGCToGCIncrementRecruitmentSDO":                        7446,
	"k_EMsgGCToGCIncrementRecruitmentLevel":                      7447,
	"k_EMsgGCFantasyRemoveOwner":                                 7448,
	"k_EMsgGCFantasyRemoveOwnerResponse":                         7449,
	"k_EMsgGCRequestBatchPlayerResources":                        7450,
	"k_EMsgGCRequestBatchPlayerResourcesResponse":                7451,
	"k_EMsgGCToGCSendUpdateLeagues":                              7452,
	"k_EMsgGCCompendiumSetSelectionResponse":                     7453,
	"k_EMsgGCPlayerInfoRequest":                                  7454,
	"k_EMsgGCPlayerInfo":                                         7455,
	"k_EMsgGCPlayerInfoSubmit":                                   7456,
	"k_EMsgGCPlayerInfoSubmitResponse":                           7457,
	"k_EMsgGCToGCGetAccountLevel":                                7458,
	"k_EMsgGCToGCGetAccountLevelResponse":                        7459,
	"k_EMsgGCToGCGetAccountPartner":                              7460,
	"k_EMsgGCToGCGetAccountPartnerResponse":                      7461,
	"k_EMsgGCToGCGetAccountProfile":                              7462,
	"k_EMsgGCToGCGetAccountProfileResponse":                      7463,
	"k_EMsgDOTAGetWeekendTourneySchedule":                        7464,
	"k_EMsgDOTAWeekendTourneySchedule":                           7465,
	"k_EMsgGCJoinableCustomGameModesRequest":                     7466,
	"k_EMsgGCJoinableCustomGameModesResponse":                    7467,
	"k_EMsgGCJoinableCustomLobbiesRequest":                       7468,
	"k_EMsgGCJoinableCustomLobbiesResponse":                      7469,
	"k_EMsgGCQuickJoinCustomLobby":                               7470,
	"k_EMsgGCQuickJoinCustomLobbyResponse":                       7471,
	"k_EMsgGCToGCGrantEventPointAction":                          7472,
	"k_EMsgServerGetEventPoints":                                 7473,
	"k_EMsgServerGetEventPointsResponse":                         7474,
	"k_EMsgServerGrantSurveyPermission":                          7475,
	"k_EMsgServerGrantSurveyPermissionResponse":                  7476,
	"k_EMsgClientProvideSurveyResult":                            7477,
	"k_EMsgGCToGCSetCompendiumSelection":                         7478,
	"k_EMsgGCToGCUpdateTI4HeroQuest":                             7480,
	"k_EMsgGCCompendiumDataChanged":                              7481,
	"k_EMsgDOTAFantasyLeagueFindRequest":                         7482,
	"k_EMsgDOTAFantasyLeagueFindResponse":                        7483,
	"k_EMsgGCHasItemQuery":                                       7484,
	"k_EMsgGCHasItemResponse":                                    7485,
	"k_EMsgGCConsumeFantasyTicket":                               7486,
	"k_EMsgGCConsumeFantasyTicketFailure":                        7487,
	"k_EMsgGCToGCGrantEventPointActionMsg":                       7488,
	"k_EMsgClientToGCTrackDialogResult":                          7489,
	"k_EMsgGCFantasyLeaveLeagueRequest":                          7490,
	"k_EMsgGCFantasyLeaveLeagueResponse":                         7491,
	"k_EMsgGCToGCGetCompendiumSelections":                        7492,
	"k_EMsgGCToGCGetCompendiumSelectionsResponse":                7493,
	"k_EMsgServerToGCMatchConnectionStats":                       7494,
	"k_EMsgGCToClientTournamentItemDrop":                         7495,
	"k_EMsgSQLDelayedGrantLeagueDrop":                            7496,
	"k_EMsgServerGCUpdateSpectatorCount":                         7497,
	"k_EMsgDOTAStartDailyHeroChallengeRequest":                   7498,
	"k_EMsgGCFantasyPlayerScoreDetailsRequest":                   7499,
	"k_EMsgGCFantasyPlayerScoreDetailsResponse":                  7500,
	"k_EMsgGCToGCEmoticonUnlock":                                 7501,
	"k_EMsgSignOutDraftInfo":                                     7502,
	"k_EMsgClientToGCEmoticonDataRequest":                        7503,
	"k_EMsgGCToClientEmoticonData":                               7504,
	"k_EMsgGCPracticeLobbyToggleBroadcastChannelCameramanStatus": 7505,
	"k_EMsgGCToGCCreateWeekendTourneyRequest":                    7506,
	"k_EMsgGCToGCCreateWeekendTourneyResponse":                   7507,
	"k_EMsgGCToGCCreateGenericTeamsRequest":                      7510,
	"k_EMsgGCToGCCreateGenericTeamsResponse":                     7511,
	"k_EMsgSQLLaunchOneWeekendTourney":                           7512,
	"k_EMsgClientToGCSetAdditionalEquips":                        7513,
	"k_EMsgClientToGCGetAdditionalEquips":                        7514,
	"k_EMsgClientToGCGetAdditionalEquipsResponse":                7515,
	"k_EMsgServerToGCGetAdditionalEquips":                        7516,
	"k_EMsgServerToGCGetAdditionalEquipsResponse":                7517,
	"k_EMsgDOTARedeemItem":                                       7518,
	"k_EMsgDOTARedeemItemResponse":                               7519,
	"k_EMsgSQLGCToGCGrantAllHeroProgress":                        7520,
	"k_EMsgClientToGCGetAllHeroProgress":                         7521,
	"k_EMsgClientToGCGetAllHeroProgressResponse":                 7522,
	"k_EMsgGCToGCGetServerForClient":                             7523,
	"k_EMsgGCToGCGetServerForClientResponse":                     7524,
	"k_EMsgSQLProcessTournamentGameOutcome":                      7525,
	"k_EMsgSQLGrantTrophyToAccount":                              7526,
	"k_EMsgClientToGCGetTrophyList":                              7527,
	"k_EMsgClientToGCGetTrophyListResponse":                      7528,
	"k_EMsgGCToClientTrophyAwarded":                              7529,
	"k_EMsgGCGameBotMatchSignOut":                                7530,
	"k_EMsgGCGameBotMatchSignOutPermissionRequest":               7531,
	"k_EMsgSignOutBotInfo":                                       7532,
	"k_EMsgGCToGCUpdateProfileCards":                             7533,
	"k_EMsgClientToGCGetProfileCard":                             7534,
	"k_EMsgClientToGCGetProfileCardResponse":                     7535,
	"k_EMsgServerToGCGetProfileCard":                             7536,
	"k_EMsgServerToGCGetProfileCardResponse":                     7537,
	"k_EMsgClientToGCSetProfileCardSlots":                        7538,
	"k_EMsgGCToClientProfileCardUpdated":                         7539,
	"k_EMsgServerToGCVictoryPredictions":                         7540,
	"k_EMsgClientToGCMarkNotificationListRead":                   7542,
	"k_EMsgGCToClientNewNotificationAdded":                       7543,
	"k_EMsgServerToGCSuspiciousActivity":                         7544,
	"k_EMsgSignOutCommunicationSummary":                          7545,
	"k_EMsgServerToGCRequestStatus_Response":                     7546,
	"k_EMsgClientToGCCreateHeroStatue":                           7547,
	"k_EMsgGCToClientHeroStatueCreateResult":                     7548,
	"k_EMsgGCGCToLANServerRelayConnect":                          7549,
	"k_EMsgSignOutAssassinMiniGameInfo":                          7550,
	"k_EMsgServerToGCGetIngameEventData":                         7551,
	"k_EMsgGCToGCUpdateIngameEventDataBroadcast":                 7552,
	"k_EMsgGCToServerIngameEventData_OraclePA":                   7553,
	"k_EMsgServerToGCReportKillSummaries":                        7554,
	"k_EMsgGCToGCReportKillSummaries":                            7555,
	"k_EMsgGCToGCUpdateAssassinMinigame":                         7556,
	"k_EMsgGCToGCFantasySetMatchLeague":                          7557,
	"k_EMsgClientToGCRecordCompendiumStats":                      7558,
	"k_EMsgGCItemEditorRequestLeagueInfo":                        7559,
	"k_EMsgGCItemEditorLeagueInfoResponse":                       7560,
	"k_EMsgGCToGCUpdatePlayerPredictions":                        7561,
	"k_EMsgGCToServerPredictionResult":                           7562,
	"k_EMsgServerToGCSignoutAwardAdditionalDrops":                7563,
	"k_EMsgGCToGCSignoutAwardAdditionalDrops":                    7564,
	"k_EMsgGCToClientEventStatusChanged":                         7565,
	"k_EMsgGCHasItemDefsQuery":                                   7566,
	"k_EMsgGCHasItemDefsResponse":                                7567,
	"k_EMsgGCToGCReplayMonitorValidateReplay":                    7569,
	"k_EMsgClientToGCExchangeItemsForOffering":                   7570,
	"k_EMsgClientToGCExchangeItemsForOfferingResponse":           7571,
	"k_EMsgLobbyEventPoints":                                     7572,
	"k_EMsgGCToGCGetCustomGameTickets":                           7573,
	"k_EMsgGCToGCGetCustomGameTicketsResponse":                   7574,
	"k_EMsgGCToClientNewBloomTimingUpdated":                      7575,
	"k_EMsgGCToGCCustomGamePlayed":                               7576,
	"k_EMsgGCToGCGrantEventPointsToUser":                         7577,
	"k_EMsgGCToGCSetEventMMPanicFlushTime":                       7578,
	"k_EMsgGameserverCrashReport":                                7579,
	"k_EMsgGameserverCrashReportResponse":                        7580,
	"k_EMsgGCToClientSteamDatagramTicket":                        7581,
	"k_EMsgGCToGCGrantEventOwnership":                            7582,
	"k_EMsgGCToGCSendAccountsEventPoints":                        7583,
	"k_EMsgClientToGCRerollPlayerChallenge":                      7584,
	"k_EMsgServerToGCRerollPlayerChallenge":                      7585,
	"k_EMsgGCRerollPlayerChallengeResponse":                      7586,
	"k_EMsgSignOutUpdatePlayerChallenge":                         7587,
	"k_EMsgClientToGCSetPartyLeader":                             7588,
	"k_EMsgClientToGCCancelPartyInvites":                         7589,
	"k_EMsgGCToGCMasterReloadAccount":                            7590,
	"k_EMsgSQLGCToGCGrantBackpackSlots":                          7591,
	"k_EMsgSQLGrantLeagueMatchToTicketHolders":                   7592,
	"k_EMsgClientToGCSetAdditionalEquipsResponse":                7593,
	"k_EMsgGCToGCEmoticonUnlockNoRollback":                       7594,
	"k_EMsgGCToGCGetCompendiumFanfare":                           7595,
	"k_EMsgServerToGCHoldEventPoints":                            7596,
	"k_EMsgSignOutReleaseEventPointHolds":                        7597,
	"k_EMsgGCToGCChatNewUserSession":                             7598,
	"k_EMsgClientToGCGetLeagueSeries":                            7599,
	"k_EMsgClientToGCGetLeagueSeriesResponse":                    7600,
	"k_EMsgSQLGCToGCSignoutUpdateLeagueSchedule":                 7601,
	"k_EMsgGCToServerUpdateBroadcastCheers":                      7602,
	"k_EMsgClientToGCApplyGemCombiner":                           7603,
	"k_EMsgClientToGCCreateStaticRecipe":                         7604,
	"k_EMsgClientToGCCreateStaticRecipeResponse":                 7605,
	"k_EMsgClientToGCGetAllHeroOrder":                            7606,
	"k_EMsgClientToGCGetAllHeroOrderResponse":                    7607,
	"k_EMsgSQLGCToGCGrantBadgePoints":                            7608,
	"k_EMsgGCToGCGetAccountMatchStatus":                          7609,
	"k_EMsgGCToGCGetAccountMatchStatusResponse":                  7610,
	"k_EMsgGCDev_GrantWarKill":                                   8001,
	"k_EMsgClientToGCCreateTeamShowcase":                         8002,
	"k_EMsgGCToClientTeamShowcaseCreateResult":                   8003,
	"k_EMsgServerToGCLockCharmTrading":                           8004,
	"k_EMsgDOTACNY2015EventPointUsage":                           8005,
	"k_EMsgClientToGCPlayerStatsRequest":                         8006,
	"k_EMsgGCToClientPlayerStatsResponse":                        8007,
	"k_EMsgGCClearPracticeLobbyTeam":                             8008,
	"k_EMsgClientToGCFindTopSourceTVGames":                       8009,
	"k_EMsgGCToClientFindTopSourceTVGamesResponse":               8010,
	"k_EMsgGCLobbyList":                                          8011,
	"k_EMsgGCLobbyListResponse":                                  8012,
	"k_EMsgGCPlayerStatsMatchSignOut":                            8013,
	"k_EMsgClientToGCCustomGamePlayerCountRequest":               8014,
	"k_EMsgGCToClientCustomGamePlayerCountResponse":              8015,
	"k_EMsgClientToGCSocialFeedPostCommentRequest":               8016,
	"k_EMsgGCToClientSocialFeedPostCommentResponse":              8017,
	"k_EMsgClientToGCCustomGamesFriendsPlayedRequest":            8018,
	"k_EMsgGCToClientCustomGamesFriendsPlayedResponse":           8019,
	"k_EMsgClientToGCFriendsPlayedCustomGameRequest":             8020,
	"k_EMsgGCToClientFriendsPlayedCustomGameResponse":            8021,
	"k_EMsgClientToGCFeaturedHeroesRequest":                      8022,
	"k_EMsgGCToClientFeaturedHeroesResponse":                     8023,
	"k_EMsgGCTopCustomGamesList":                                 8024,
	"k_EMsgClientToGCSocialMatchPostCommentRequest":              8025,
	"k_EMsgGCToClientSocialMatchPostCommentResponse":             8026,
	"k_EMsgClientToGCSocialMatchDetailsRequest":                  8027,
	"k_EMsgGCToClientSocialMatchDetailsResponse":                 8028,
	"k_EMsgClientToGCSetPartyOpen":                               8029,
	"k_EMsgClientToGCMergePartyInvite":                           8030,
	"k_EMsgGCToClientMergeGroupInviteReply":                      8031,
	"k_EMsgClientToGCMergePartyResponse":                         8032,
	"k_EMsgGCToClientMergePartyResponseReply":                    8033,
	"k_EMsgClientToGCGetProfileCardStats":                        8034,
	"k_EMsgClientToGCGetProfileCardStatsResponse":                8035,
	"k_EMsgClientToGCTopLeagueMatchesRequest":                    8036,
	"k_EMsgClientToGCTopFriendMatchesRequest":                    8037,
	"k_EMsgGCToClientProfileCardStatsUpdated":                    8040,
	"k_EMsgServerToGCRealtimeStats":                              8041,
	"k_EMsgGCToServerRealtimeStatsStartStop":                     8042,
	"k_EMsgGCToGCGetServersForClients":                           8045,
	"k_EMsgGCToGCGetServersForClientsResponse":                   8046,
	"k_EMsgGCPracticeLobbyKickFromTeam":                          8047,
	"k_EMsgDOTAChatGetMemberCount":                               8048,
	"k_EMsgDOTAChatGetMemberCountResponse":                       8049,
	"k_EMsgClientToGCSocialFeedPostMessageRequest":               8050,
	"k_EMsgGCToClientSocialFeedPostMessageResponse":              8051,
	"k_EMsgCustomGameListenServerStartedLoading":                 8052,
	"k_EMsgCustomGameClientFinishedLoading":                      8053,
	"k_EMsgGCPracticeLobbyCloseBroadcastChannel":                 8054,
	"k_EMsgGCStartFindingMatchResponse":                          8055,
	"k_EMsgSQLGCToGCUpdateHeroMMR":                               8056,
	"k_EMsgSQLGCToGCGrantAccountFlag":                            8057,
	"k_EMsgGCToGCGetAccountFlags":                                8058,
	"k_EMsgGCToGCGetAccountFlagsResponse":                        8059,
	"k_EMsgSignOutWagerStats":                                    8060,
	"k_EMsgGCToClientTopLeagueMatchesResponse":                   8061,
	"k_EMsgGCToClientTopFriendMatchesResponse":                   8062,
	"k_EMsgClientToGCMatchesMinimalRequest":                      8063,
	"k_EMsgClientToGCMatchesMinimalResponse":                     8064,
	"k_EMsgGCToGCGetProfileBadgePoints":                          8065,
	"k_EMsgGCToGCGetProfileBadgePointsResponse":                  8066,
	"k_EMsgGCToClientChatRegionsEnabled":                         8067,
	"k_EMsgClientToGCPingData":                                   8068,
	"k_EMsgServerToGCMatchDetailsRequest":                        8069,
	"k_EMsgGCToServerMatchDetailsResponse":                       8070,
	"k_EMsgGCToGCEnsureAccountInParty":                           8071,
	"k_EMsgGCToGCEnsureAccountInPartyResponse":                   8072,
	"k_EMsgClientToGCGetProfileTickets":                          8073,
	"k_EMsgClientToGCGetProfileTicketsResponse":                  8074,
}

func (x EDOTAGCMsg) Enum() *EDOTAGCMsg {
	p := new(EDOTAGCMsg)
	*p = x
	return p
}
func (x EDOTAGCMsg) String() string {
	return proto.EnumName(EDOTAGCMsg_name, int32(x))
}
func (x *EDOTAGCMsg) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAGCMsg_value, data, "EDOTAGCMsg")
	if err != nil {
		return err
	}
	*x = EDOTAGCMsg(value)
	return nil
}
func (EDOTAGCMsg) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ESpecialPingValue int32

const (
	ESpecialPingValue_k_ESpecialPingValue_NoData ESpecialPingValue = 16382
	ESpecialPingValue_k_ESpecialPingValue_Failed ESpecialPingValue = 16383
)

var ESpecialPingValue_name = map[int32]string{
	16382: "k_ESpecialPingValue_NoData",
	16383: "k_ESpecialPingValue_Failed",
}
var ESpecialPingValue_value = map[string]int32{
	"k_ESpecialPingValue_NoData": 16382,
	"k_ESpecialPingValue_Failed": 16383,
}

func (x ESpecialPingValue) Enum() *ESpecialPingValue {
	p := new(ESpecialPingValue)
	*p = x
	return p
}
func (x ESpecialPingValue) String() string {
	return proto.EnumName(ESpecialPingValue_name, int32(x))
}
func (x *ESpecialPingValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESpecialPingValue_value, data, "ESpecialPingValue")
	if err != nil {
		return err
	}
	*x = ESpecialPingValue(value)
	return nil
}
func (ESpecialPingValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE          DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP            DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM            DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD            DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD            DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR            DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO         DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW            DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM    DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS          DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL      DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO            DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP            DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1         DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH            DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM        DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD            DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD            DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT         DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM          DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID        DOTA_GameMode = 21
	DOTA_GameMode_DOTA_GAMEMODE_ALL_DRAFT     DOTA_GameMode = 22
)

var DOTA_GameMode_name = map[int32]string{
	0:  "DOTA_GAMEMODE_NONE",
	1:  "DOTA_GAMEMODE_AP",
	2:  "DOTA_GAMEMODE_CM",
	3:  "DOTA_GAMEMODE_RD",
	4:  "DOTA_GAMEMODE_SD",
	5:  "DOTA_GAMEMODE_AR",
	6:  "DOTA_GAMEMODE_INTRO",
	7:  "DOTA_GAMEMODE_HW",
	8:  "DOTA_GAMEMODE_REVERSE_CM",
	9:  "DOTA_GAMEMODE_XMAS",
	10: "DOTA_GAMEMODE_TUTORIAL",
	11: "DOTA_GAMEMODE_MO",
	12: "DOTA_GAMEMODE_LP",
	13: "DOTA_GAMEMODE_POOL1",
	14: "DOTA_GAMEMODE_FH",
	15: "DOTA_GAMEMODE_CUSTOM",
	16: "DOTA_GAMEMODE_CD",
	17: "DOTA_GAMEMODE_BD",
	18: "DOTA_GAMEMODE_ABILITY_DRAFT",
	19: "DOTA_GAMEMODE_EVENT",
	20: "DOTA_GAMEMODE_ARDM",
	21: "DOTA_GAMEMODE_1V1MID",
	22: "DOTA_GAMEMODE_ALL_DRAFT",
}
var DOTA_GameMode_value = map[string]int32{
	"DOTA_GAMEMODE_NONE":          0,
	"DOTA_GAMEMODE_AP":            1,
	"DOTA_GAMEMODE_CM":            2,
	"DOTA_GAMEMODE_RD":            3,
	"DOTA_GAMEMODE_SD":            4,
	"DOTA_GAMEMODE_AR":            5,
	"DOTA_GAMEMODE_INTRO":         6,
	"DOTA_GAMEMODE_HW":            7,
	"DOTA_GAMEMODE_REVERSE_CM":    8,
	"DOTA_GAMEMODE_XMAS":          9,
	"DOTA_GAMEMODE_TUTORIAL":      10,
	"DOTA_GAMEMODE_MO":            11,
	"DOTA_GAMEMODE_LP":            12,
	"DOTA_GAMEMODE_POOL1":         13,
	"DOTA_GAMEMODE_FH":            14,
	"DOTA_GAMEMODE_CUSTOM":        15,
	"DOTA_GAMEMODE_CD":            16,
	"DOTA_GAMEMODE_BD":            17,
	"DOTA_GAMEMODE_ABILITY_DRAFT": 18,
	"DOTA_GAMEMODE_EVENT":         19,
	"DOTA_GAMEMODE_ARDM":          20,
	"DOTA_GAMEMODE_1V1MID":        21,
	"DOTA_GAMEMODE_ALL_DRAFT":     22,
}

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}
func (x DOTA_GameMode) String() string {
	return proto.EnumName(DOTA_GameMode_name, int32(x))
}
func (x *DOTA_GameMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameMode_value, data, "DOTA_GameMode")
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(value)
	return nil
}
func (DOTA_GameMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type DOTA_GameState int32

const (
	DOTA_GameState_DOTA_GAMERULES_STATE_INIT                     DOTA_GameState = 0
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD DOTA_GameState = 1
	DOTA_GameState_DOTA_GAMERULES_STATE_HERO_SELECTION           DOTA_GameState = 2
	DOTA_GameState_DOTA_GAMERULES_STATE_STRATEGY_TIME            DOTA_GameState = 3
	DOTA_GameState_DOTA_GAMERULES_STATE_PRE_GAME                 DOTA_GameState = 4
	DOTA_GameState_DOTA_GAMERULES_STATE_GAME_IN_PROGRESS         DOTA_GameState = 5
	DOTA_GameState_DOTA_GAMERULES_STATE_POST_GAME                DOTA_GameState = 6
	DOTA_GameState_DOTA_GAMERULES_STATE_DISCONNECT               DOTA_GameState = 7
	DOTA_GameState_DOTA_GAMERULES_STATE_TEAM_SHOWCASE            DOTA_GameState = 8
	DOTA_GameState_DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP        DOTA_GameState = 9
	DOTA_GameState_DOTA_GAMERULES_STATE_LAST                     DOTA_GameState = 10
)

var DOTA_GameState_name = map[int32]string{
	0:  "DOTA_GAMERULES_STATE_INIT",
	1:  "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
	2:  "DOTA_GAMERULES_STATE_HERO_SELECTION",
	3:  "DOTA_GAMERULES_STATE_STRATEGY_TIME",
	4:  "DOTA_GAMERULES_STATE_PRE_GAME",
	5:  "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
	6:  "DOTA_GAMERULES_STATE_POST_GAME",
	7:  "DOTA_GAMERULES_STATE_DISCONNECT",
	8:  "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
	9:  "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
	10: "DOTA_GAMERULES_STATE_LAST",
}
var DOTA_GameState_value = map[string]int32{
	"DOTA_GAMERULES_STATE_INIT":                     0,
	"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
	"DOTA_GAMERULES_STATE_HERO_SELECTION":           2,
	"DOTA_GAMERULES_STATE_STRATEGY_TIME":            3,
	"DOTA_GAMERULES_STATE_PRE_GAME":                 4,
	"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":         5,
	"DOTA_GAMERULES_STATE_POST_GAME":                6,
	"DOTA_GAMERULES_STATE_DISCONNECT":               7,
	"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":            8,
	"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":        9,
	"DOTA_GAMERULES_STATE_LAST":                     10,
}

func (x DOTA_GameState) Enum() *DOTA_GameState {
	p := new(DOTA_GameState)
	*p = x
	return p
}
func (x DOTA_GameState) String() string {
	return proto.EnumName(DOTA_GameState_name, int32(x))
}
func (x *DOTA_GameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameState_value, data, "DOTA_GameState")
	if err != nil {
		return err
	}
	*x = DOTA_GameState(value)
	return nil
}
func (DOTA_GameState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type DOTA_GC_TEAM int32

const (
	DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS   DOTA_GC_TEAM = 0
	DOTA_GC_TEAM_DOTA_GC_TEAM_BAD_GUYS    DOTA_GC_TEAM = 1
	DOTA_GC_TEAM_DOTA_GC_TEAM_BROADCASTER DOTA_GC_TEAM = 2
	DOTA_GC_TEAM_DOTA_GC_TEAM_SPECTATOR   DOTA_GC_TEAM = 3
	DOTA_GC_TEAM_DOTA_GC_TEAM_PLAYER_POOL DOTA_GC_TEAM = 4
	DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM      DOTA_GC_TEAM = 5
)

var DOTA_GC_TEAM_name = map[int32]string{
	0: "DOTA_GC_TEAM_GOOD_GUYS",
	1: "DOTA_GC_TEAM_BAD_GUYS",
	2: "DOTA_GC_TEAM_BROADCASTER",
	3: "DOTA_GC_TEAM_SPECTATOR",
	4: "DOTA_GC_TEAM_PLAYER_POOL",
	5: "DOTA_GC_TEAM_NOTEAM",
}
var DOTA_GC_TEAM_value = map[string]int32{
	"DOTA_GC_TEAM_GOOD_GUYS":   0,
	"DOTA_GC_TEAM_BAD_GUYS":    1,
	"DOTA_GC_TEAM_BROADCASTER": 2,
	"DOTA_GC_TEAM_SPECTATOR":   3,
	"DOTA_GC_TEAM_PLAYER_POOL": 4,
	"DOTA_GC_TEAM_NOTEAM":      5,
}

func (x DOTA_GC_TEAM) Enum() *DOTA_GC_TEAM {
	p := new(DOTA_GC_TEAM)
	*p = x
	return p
}
func (x DOTA_GC_TEAM) String() string {
	return proto.EnumName(DOTA_GC_TEAM_name, int32(x))
}
func (x *DOTA_GC_TEAM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GC_TEAM_value, data, "DOTA_GC_TEAM")
	if err != nil {
		return err
	}
	*x = DOTA_GC_TEAM(value)
	return nil
}
func (DOTA_GC_TEAM) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type DOTA_CM_PICK int32

const (
	DOTA_CM_PICK_DOTA_CM_RANDOM    DOTA_CM_PICK = 0
	DOTA_CM_PICK_DOTA_CM_GOOD_GUYS DOTA_CM_PICK = 1
	DOTA_CM_PICK_DOTA_CM_BAD_GUYS  DOTA_CM_PICK = 2
)

var DOTA_CM_PICK_name = map[int32]string{
	0: "DOTA_CM_RANDOM",
	1: "DOTA_CM_GOOD_GUYS",
	2: "DOTA_CM_BAD_GUYS",
}
var DOTA_CM_PICK_value = map[string]int32{
	"DOTA_CM_RANDOM":    0,
	"DOTA_CM_GOOD_GUYS": 1,
	"DOTA_CM_BAD_GUYS":  2,
}

func (x DOTA_CM_PICK) Enum() *DOTA_CM_PICK {
	p := new(DOTA_CM_PICK)
	*p = x
	return p
}
func (x DOTA_CM_PICK) String() string {
	return proto.EnumName(DOTA_CM_PICK_name, int32(x))
}
func (x *DOTA_CM_PICK) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_CM_PICK_value, data, "DOTA_CM_PICK")
	if err != nil {
		return err
	}
	*x = DOTA_CM_PICK(value)
	return nil
}
func (DOTA_CM_PICK) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type DOTAConnectionStateT int32

const (
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_UNKNOWN           DOTAConnectionStateT = 0
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_NOT_YET_CONNECTED DOTAConnectionStateT = 1
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_CONNECTED         DOTAConnectionStateT = 2
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_DISCONNECTED      DOTAConnectionStateT = 3
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_ABANDONED         DOTAConnectionStateT = 4
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_LOADING           DOTAConnectionStateT = 5
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_FAILED            DOTAConnectionStateT = 6
)

var DOTAConnectionStateT_name = map[int32]string{
	0: "DOTA_CONNECTION_STATE_UNKNOWN",
	1: "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
	2: "DOTA_CONNECTION_STATE_CONNECTED",
	3: "DOTA_CONNECTION_STATE_DISCONNECTED",
	4: "DOTA_CONNECTION_STATE_ABANDONED",
	5: "DOTA_CONNECTION_STATE_LOADING",
	6: "DOTA_CONNECTION_STATE_FAILED",
}
var DOTAConnectionStateT_value = map[string]int32{
	"DOTA_CONNECTION_STATE_UNKNOWN":           0,
	"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED": 1,
	"DOTA_CONNECTION_STATE_CONNECTED":         2,
	"DOTA_CONNECTION_STATE_DISCONNECTED":      3,
	"DOTA_CONNECTION_STATE_ABANDONED":         4,
	"DOTA_CONNECTION_STATE_LOADING":           5,
	"DOTA_CONNECTION_STATE_FAILED":            6,
}

func (x DOTAConnectionStateT) Enum() *DOTAConnectionStateT {
	p := new(DOTAConnectionStateT)
	*p = x
	return p
}
func (x DOTAConnectionStateT) String() string {
	return proto.EnumName(DOTAConnectionStateT_name, int32(x))
}
func (x *DOTAConnectionStateT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAConnectionStateT_value, data, "DOTAConnectionStateT")
	if err != nil {
		return err
	}
	*x = DOTAConnectionStateT(value)
	return nil
}
func (DOTAConnectionStateT) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type DOTALeaverStatusT int32

const (
	DOTALeaverStatusT_DOTA_LEAVER_NONE                     DOTALeaverStatusT = 0
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED             DOTALeaverStatusT = 1
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED_TOO_LONG    DOTALeaverStatusT = 2
	DOTALeaverStatusT_DOTA_LEAVER_ABANDONED                DOTALeaverStatusT = 3
	DOTALeaverStatusT_DOTA_LEAVER_AFK                      DOTALeaverStatusT = 4
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED          DOTALeaverStatusT = 5
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG DOTALeaverStatusT = 6
	DOTALeaverStatusT_DOTA_LEAVER_FAILED_TO_READY_UP       DOTALeaverStatusT = 7
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED                 DOTALeaverStatusT = 8
)

var DOTALeaverStatusT_name = map[int32]string{
	0: "DOTA_LEAVER_NONE",
	1: "DOTA_LEAVER_DISCONNECTED",
	2: "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
	3: "DOTA_LEAVER_ABANDONED",
	4: "DOTA_LEAVER_AFK",
	5: "DOTA_LEAVER_NEVER_CONNECTED",
	6: "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
	7: "DOTA_LEAVER_FAILED_TO_READY_UP",
	8: "DOTA_LEAVER_DECLINED",
}
var DOTALeaverStatusT_value = map[string]int32{
	"DOTA_LEAVER_NONE":                     0,
	"DOTA_LEAVER_DISCONNECTED":             1,
	"DOTA_LEAVER_DISCONNECTED_TOO_LONG":    2,
	"DOTA_LEAVER_ABANDONED":                3,
	"DOTA_LEAVER_AFK":                      4,
	"DOTA_LEAVER_NEVER_CONNECTED":          5,
	"DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG": 6,
	"DOTA_LEAVER_FAILED_TO_READY_UP":       7,
	"DOTA_LEAVER_DECLINED":                 8,
}

func (x DOTALeaverStatusT) Enum() *DOTALeaverStatusT {
	p := new(DOTALeaverStatusT)
	*p = x
	return p
}
func (x DOTALeaverStatusT) String() string {
	return proto.EnumName(DOTALeaverStatusT_name, int32(x))
}
func (x *DOTALeaverStatusT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALeaverStatusT_value, data, "DOTALeaverStatusT")
	if err != nil {
		return err
	}
	*x = DOTALeaverStatusT(value)
	return nil
}
func (DOTALeaverStatusT) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type DOTALowPriorityBanType int32

const (
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_ABANDON           DOTALowPriorityBanType = 0
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_REPORTS           DOTALowPriorityBanType = 1
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON DOTALowPriorityBanType = 2
)

var DOTALowPriorityBanType_name = map[int32]string{
	0: "DOTA_LOW_PRIORITY_BAN_ABANDON",
	1: "DOTA_LOW_PRIORITY_BAN_REPORTS",
	2: "DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON",
}
var DOTALowPriorityBanType_value = map[string]int32{
	"DOTA_LOW_PRIORITY_BAN_ABANDON":           0,
	"DOTA_LOW_PRIORITY_BAN_REPORTS":           1,
	"DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON": 2,
}

func (x DOTALowPriorityBanType) Enum() *DOTALowPriorityBanType {
	p := new(DOTALowPriorityBanType)
	*p = x
	return p
}
func (x DOTALowPriorityBanType) String() string {
	return proto.EnumName(DOTALowPriorityBanType_name, int32(x))
}
func (x *DOTALowPriorityBanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALowPriorityBanType_value, data, "DOTALowPriorityBanType")
	if err != nil {
		return err
	}
	*x = DOTALowPriorityBanType(value)
	return nil
}
func (DOTALowPriorityBanType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type DOTALobbyReadyState int32

const (
	DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED DOTALobbyReadyState = 0
	DOTALobbyReadyState_DOTALobbyReadyState_ACCEPTED   DOTALobbyReadyState = 1
	DOTALobbyReadyState_DOTALobbyReadyState_DECLINED   DOTALobbyReadyState = 2
)

var DOTALobbyReadyState_name = map[int32]string{
	0: "DOTALobbyReadyState_UNDECLARED",
	1: "DOTALobbyReadyState_ACCEPTED",
	2: "DOTALobbyReadyState_DECLINED",
}
var DOTALobbyReadyState_value = map[string]int32{
	"DOTALobbyReadyState_UNDECLARED": 0,
	"DOTALobbyReadyState_ACCEPTED":   1,
	"DOTALobbyReadyState_DECLINED":   2,
}

func (x DOTALobbyReadyState) Enum() *DOTALobbyReadyState {
	p := new(DOTALobbyReadyState)
	*p = x
	return p
}
func (x DOTALobbyReadyState) String() string {
	return proto.EnumName(DOTALobbyReadyState_name, int32(x))
}
func (x *DOTALobbyReadyState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALobbyReadyState_value, data, "DOTALobbyReadyState")
	if err != nil {
		return err
	}
	*x = DOTALobbyReadyState(value)
	return nil
}
func (DOTALobbyReadyState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type DOTAGameVersion int32

const (
	DOTAGameVersion_GAME_VERSION_CURRENT DOTAGameVersion = 0
	DOTAGameVersion_GAME_VERSION_STABLE  DOTAGameVersion = 1
)

var DOTAGameVersion_name = map[int32]string{
	0: "GAME_VERSION_CURRENT",
	1: "GAME_VERSION_STABLE",
}
var DOTAGameVersion_value = map[string]int32{
	"GAME_VERSION_CURRENT": 0,
	"GAME_VERSION_STABLE":  1,
}

func (x DOTAGameVersion) Enum() *DOTAGameVersion {
	p := new(DOTAGameVersion)
	*p = x
	return p
}
func (x DOTAGameVersion) String() string {
	return proto.EnumName(DOTAGameVersion_name, int32(x))
}
func (x *DOTAGameVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAGameVersion_value, data, "DOTAGameVersion")
	if err != nil {
		return err
	}
	*x = DOTAGameVersion(value)
	return nil
}
func (DOTAGameVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type DOTAJoinLobbyResult int32

const (
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS                       DOTAJoinLobbyResult = 0
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ALREADY_IN_GAME               DOTAJoinLobbyResult = 1
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INVALID_LOBBY                 DOTAJoinLobbyResult = 2
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_PASSWORD            DOTAJoinLobbyResult = 3
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ACCESS_DENIED                 DOTAJoinLobbyResult = 4
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_GENERIC_ERROR                 DOTAJoinLobbyResult = 5
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_VERSION             DOTAJoinLobbyResult = 6
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_IN_TEAM_PARTY                 DOTAJoinLobbyResult = 7
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_NO_LOBBY_FOUND                DOTAJoinLobbyResult = 8
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_LOBBY_FULL                    DOTAJoinLobbyResult = 9
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION DOTAJoinLobbyResult = 10
)

var DOTAJoinLobbyResult_name = map[int32]string{
	0:  "DOTA_JOIN_RESULT_SUCCESS",
	1:  "DOTA_JOIN_RESULT_ALREADY_IN_GAME",
	2:  "DOTA_JOIN_RESULT_INVALID_LOBBY",
	3:  "DOTA_JOIN_RESULT_INCORRECT_PASSWORD",
	4:  "DOTA_JOIN_RESULT_ACCESS_DENIED",
	5:  "DOTA_JOIN_RESULT_GENERIC_ERROR",
	6:  "DOTA_JOIN_RESULT_INCORRECT_VERSION",
	7:  "DOTA_JOIN_RESULT_IN_TEAM_PARTY",
	8:  "DOTA_JOIN_RESULT_NO_LOBBY_FOUND",
	9:  "DOTA_JOIN_RESULT_LOBBY_FULL",
	10: "DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION",
}
var DOTAJoinLobbyResult_value = map[string]int32{
	"DOTA_JOIN_RESULT_SUCCESS":                       0,
	"DOTA_JOIN_RESULT_ALREADY_IN_GAME":               1,
	"DOTA_JOIN_RESULT_INVALID_LOBBY":                 2,
	"DOTA_JOIN_RESULT_INCORRECT_PASSWORD":            3,
	"DOTA_JOIN_RESULT_ACCESS_DENIED":                 4,
	"DOTA_JOIN_RESULT_GENERIC_ERROR":                 5,
	"DOTA_JOIN_RESULT_INCORRECT_VERSION":             6,
	"DOTA_JOIN_RESULT_IN_TEAM_PARTY":                 7,
	"DOTA_JOIN_RESULT_NO_LOBBY_FOUND":                8,
	"DOTA_JOIN_RESULT_LOBBY_FULL":                    9,
	"DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION": 10,
}

func (x DOTAJoinLobbyResult) Enum() *DOTAJoinLobbyResult {
	p := new(DOTAJoinLobbyResult)
	*p = x
	return p
}
func (x DOTAJoinLobbyResult) String() string {
	return proto.EnumName(DOTAJoinLobbyResult_name, int32(x))
}
func (x *DOTAJoinLobbyResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAJoinLobbyResult_value, data, "DOTAJoinLobbyResult")
	if err != nil {
		return err
	}
	*x = DOTAJoinLobbyResult(value)
	return nil
}
func (DOTAJoinLobbyResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type DOTAMatchVote int32

const (
	DOTAMatchVote_DOTAMatchVote_INVALID  DOTAMatchVote = 0
	DOTAMatchVote_DOTAMatchVote_POSITIVE DOTAMatchVote = 1
	DOTAMatchVote_DOTAMatchVote_NEGATIVE DOTAMatchVote = 2
)

var DOTAMatchVote_name = map[int32]string{
	0: "DOTAMatchVote_INVALID",
	1: "DOTAMatchVote_POSITIVE",
	2: "DOTAMatchVote_NEGATIVE",
}
var DOTAMatchVote_value = map[string]int32{
	"DOTAMatchVote_INVALID":  0,
	"DOTAMatchVote_POSITIVE": 1,
	"DOTAMatchVote_NEGATIVE": 2,
}

func (x DOTAMatchVote) Enum() *DOTAMatchVote {
	p := new(DOTAMatchVote)
	*p = x
	return p
}
func (x DOTAMatchVote) String() string {
	return proto.EnumName(DOTAMatchVote_name, int32(x))
}
func (x *DOTAMatchVote) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAMatchVote_value, data, "DOTAMatchVote")
	if err != nil {
		return err
	}
	*x = DOTAMatchVote(value)
	return nil
}
func (DOTAMatchVote) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type DOTA_LobbyMemberXPBonus int32

const (
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_DEFAULT        DOTA_LobbyMemberXPBonus = 0
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER DOTA_LobbyMemberXPBonus = 1
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_SHARE_BONUS    DOTA_LobbyMemberXPBonus = 2
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PARTY          DOTA_LobbyMemberXPBonus = 3
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_RECRUITMENT    DOTA_LobbyMemberXPBonus = 4
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PCBANG         DOTA_LobbyMemberXPBonus = 5
)

var DOTA_LobbyMemberXPBonus_name = map[int32]string{
	0: "DOTA_LobbyMemberXPBonus_DEFAULT",
	1: "DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER",
	2: "DOTA_LobbyMemberXPBonus_SHARE_BONUS",
	3: "DOTA_LobbyMemberXPBonus_PARTY",
	4: "DOTA_LobbyMemberXPBonus_RECRUITMENT",
	5: "DOTA_LobbyMemberXPBonus_PCBANG",
}
var DOTA_LobbyMemberXPBonus_value = map[string]int32{
	"DOTA_LobbyMemberXPBonus_DEFAULT":        0,
	"DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER": 1,
	"DOTA_LobbyMemberXPBonus_SHARE_BONUS":    2,
	"DOTA_LobbyMemberXPBonus_PARTY":          3,
	"DOTA_LobbyMemberXPBonus_RECRUITMENT":    4,
	"DOTA_LobbyMemberXPBonus_PCBANG":         5,
}

func (x DOTA_LobbyMemberXPBonus) Enum() *DOTA_LobbyMemberXPBonus {
	p := new(DOTA_LobbyMemberXPBonus)
	*p = x
	return p
}
func (x DOTA_LobbyMemberXPBonus) String() string {
	return proto.EnumName(DOTA_LobbyMemberXPBonus_name, int32(x))
}
func (x *DOTA_LobbyMemberXPBonus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_LobbyMemberXPBonus_value, data, "DOTA_LobbyMemberXPBonus")
	if err != nil {
		return err
	}
	*x = DOTA_LobbyMemberXPBonus(value)
	return nil
}
func (DOTA_LobbyMemberXPBonus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type DOTALobbyVisibility int32

const (
	DOTALobbyVisibility_DOTALobbyVisibility_Public   DOTALobbyVisibility = 0
	DOTALobbyVisibility_DOTALobbyVisibility_Friends  DOTALobbyVisibility = 1
	DOTALobbyVisibility_DOTALobbyVisibility_Unlisted DOTALobbyVisibility = 2
)

var DOTALobbyVisibility_name = map[int32]string{
	0: "DOTALobbyVisibility_Public",
	1: "DOTALobbyVisibility_Friends",
	2: "DOTALobbyVisibility_Unlisted",
}
var DOTALobbyVisibility_value = map[string]int32{
	"DOTALobbyVisibility_Public":   0,
	"DOTALobbyVisibility_Friends":  1,
	"DOTALobbyVisibility_Unlisted": 2,
}

func (x DOTALobbyVisibility) Enum() *DOTALobbyVisibility {
	p := new(DOTALobbyVisibility)
	*p = x
	return p
}
func (x DOTALobbyVisibility) String() string {
	return proto.EnumName(DOTALobbyVisibility_name, int32(x))
}
func (x *DOTALobbyVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALobbyVisibility_value, data, "DOTALobbyVisibility")
	if err != nil {
		return err
	}
	*x = DOTALobbyVisibility(value)
	return nil
}
func (DOTALobbyVisibility) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type EDOTAPlayerMMRType int32

const (
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Invalid            EDOTAPlayerMMRType = 0
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralHidden      EDOTAPlayerMMRType = 1
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloHidden         EDOTAPlayerMMRType = 2
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralCompetitive EDOTAPlayerMMRType = 3
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloCompetitive    EDOTAPlayerMMRType = 4
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_1v1Competitive     EDOTAPlayerMMRType = 5
)

var EDOTAPlayerMMRType_name = map[int32]string{
	0: "k_EDOTAPlayerMMRType_Invalid",
	1: "k_EDOTAPlayerMMRType_GeneralHidden",
	2: "k_EDOTAPlayerMMRType_SoloHidden",
	3: "k_EDOTAPlayerMMRType_GeneralCompetitive",
	4: "k_EDOTAPlayerMMRType_SoloCompetitive",
	5: "k_EDOTAPlayerMMRType_1v1Competitive",
}
var EDOTAPlayerMMRType_value = map[string]int32{
	"k_EDOTAPlayerMMRType_Invalid":            0,
	"k_EDOTAPlayerMMRType_GeneralHidden":      1,
	"k_EDOTAPlayerMMRType_SoloHidden":         2,
	"k_EDOTAPlayerMMRType_GeneralCompetitive": 3,
	"k_EDOTAPlayerMMRType_SoloCompetitive":    4,
	"k_EDOTAPlayerMMRType_1v1Competitive":     5,
}

func (x EDOTAPlayerMMRType) Enum() *EDOTAPlayerMMRType {
	p := new(EDOTAPlayerMMRType)
	*p = x
	return p
}
func (x EDOTAPlayerMMRType) String() string {
	return proto.EnumName(EDOTAPlayerMMRType_name, int32(x))
}
func (x *EDOTAPlayerMMRType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAPlayerMMRType_value, data, "EDOTAPlayerMMRType")
	if err != nil {
		return err
	}
	*x = EDOTAPlayerMMRType(value)
	return nil
}
func (EDOTAPlayerMMRType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type MatchType int32

const (
	MatchType_MATCH_TYPE_CASUAL            MatchType = 0
	MatchType_MATCH_TYPE_COOP_BOTS         MatchType = 1
	MatchType_MATCH_TYPE_TEAM_RANKED       MatchType = 2
	MatchType_MATCH_TYPE_LEGACY_SOLO_QUEUE MatchType = 3
	MatchType_MATCH_TYPE_COMPETITIVE       MatchType = 4
	MatchType_MATCH_TYPE_WEEKEND_TOURNEY   MatchType = 5
	MatchType_MATCH_TYPE_CASUAL_1V1        MatchType = 6
	MatchType_MATCH_TYPE_EVENT             MatchType = 7
)

var MatchType_name = map[int32]string{
	0: "MATCH_TYPE_CASUAL",
	1: "MATCH_TYPE_COOP_BOTS",
	2: "MATCH_TYPE_TEAM_RANKED",
	3: "MATCH_TYPE_LEGACY_SOLO_QUEUE",
	4: "MATCH_TYPE_COMPETITIVE",
	5: "MATCH_TYPE_WEEKEND_TOURNEY",
	6: "MATCH_TYPE_CASUAL_1V1",
	7: "MATCH_TYPE_EVENT",
}
var MatchType_value = map[string]int32{
	"MATCH_TYPE_CASUAL":            0,
	"MATCH_TYPE_COOP_BOTS":         1,
	"MATCH_TYPE_TEAM_RANKED":       2,
	"MATCH_TYPE_LEGACY_SOLO_QUEUE": 3,
	"MATCH_TYPE_COMPETITIVE":       4,
	"MATCH_TYPE_WEEKEND_TOURNEY":   5,
	"MATCH_TYPE_CASUAL_1V1":        6,
	"MATCH_TYPE_EVENT":             7,
}

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}
func (x MatchType) String() string {
	return proto.EnumName(MatchType_name, int32(x))
}
func (x *MatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchType_value, data, "MatchType")
	if err != nil {
		return err
	}
	*x = MatchType(value)
	return nil
}
func (MatchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type DOTABotDifficulty int32

const (
	DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE DOTABotDifficulty = 0
	DOTABotDifficulty_BOT_DIFFICULTY_EASY    DOTABotDifficulty = 1
	DOTABotDifficulty_BOT_DIFFICULTY_MEDIUM  DOTABotDifficulty = 2
	DOTABotDifficulty_BOT_DIFFICULTY_HARD    DOTABotDifficulty = 3
	DOTABotDifficulty_BOT_DIFFICULTY_UNFAIR  DOTABotDifficulty = 4
	DOTABotDifficulty_BOT_DIFFICULTY_INVALID DOTABotDifficulty = 5
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA1  DOTABotDifficulty = 6
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA2  DOTABotDifficulty = 7
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA3  DOTABotDifficulty = 8
)

var DOTABotDifficulty_name = map[int32]string{
	0: "BOT_DIFFICULTY_PASSIVE",
	1: "BOT_DIFFICULTY_EASY",
	2: "BOT_DIFFICULTY_MEDIUM",
	3: "BOT_DIFFICULTY_HARD",
	4: "BOT_DIFFICULTY_UNFAIR",
	5: "BOT_DIFFICULTY_INVALID",
	6: "BOT_DIFFICULTY_EXTRA1",
	7: "BOT_DIFFICULTY_EXTRA2",
	8: "BOT_DIFFICULTY_EXTRA3",
}
var DOTABotDifficulty_value = map[string]int32{
	"BOT_DIFFICULTY_PASSIVE": 0,
	"BOT_DIFFICULTY_EASY":    1,
	"BOT_DIFFICULTY_MEDIUM":  2,
	"BOT_DIFFICULTY_HARD":    3,
	"BOT_DIFFICULTY_UNFAIR":  4,
	"BOT_DIFFICULTY_INVALID": 5,
	"BOT_DIFFICULTY_EXTRA1":  6,
	"BOT_DIFFICULTY_EXTRA2":  7,
	"BOT_DIFFICULTY_EXTRA3":  8,
}

func (x DOTABotDifficulty) Enum() *DOTABotDifficulty {
	p := new(DOTABotDifficulty)
	*p = x
	return p
}
func (x DOTABotDifficulty) String() string {
	return proto.EnumName(DOTABotDifficulty_name, int32(x))
}
func (x *DOTABotDifficulty) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTABotDifficulty_value, data, "DOTABotDifficulty")
	if err != nil {
		return err
	}
	*x = DOTABotDifficulty(value)
	return nil
}
func (DOTABotDifficulty) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type MatchLanguages int32

const (
	MatchLanguages_MATCH_LANGUAGE_INVALID    MatchLanguages = 0
	MatchLanguages_MATCH_LANGUAGE_ENGLISH    MatchLanguages = 1
	MatchLanguages_MATCH_LANGUAGE_RUSSIAN    MatchLanguages = 2
	MatchLanguages_MATCH_LANGUAGE_CHINESE    MatchLanguages = 3
	MatchLanguages_MATCH_LANGUAGE_KOREAN     MatchLanguages = 4
	MatchLanguages_MATCH_LANGUAGE_SPANISH    MatchLanguages = 5
	MatchLanguages_MATCH_LANGUAGE_PORTUGUESE MatchLanguages = 6
	MatchLanguages_MATCH_LANGUAGE_ENGLISH2   MatchLanguages = 7
)

var MatchLanguages_name = map[int32]string{
	0: "MATCH_LANGUAGE_INVALID",
	1: "MATCH_LANGUAGE_ENGLISH",
	2: "MATCH_LANGUAGE_RUSSIAN",
	3: "MATCH_LANGUAGE_CHINESE",
	4: "MATCH_LANGUAGE_KOREAN",
	5: "MATCH_LANGUAGE_SPANISH",
	6: "MATCH_LANGUAGE_PORTUGUESE",
	7: "MATCH_LANGUAGE_ENGLISH2",
}
var MatchLanguages_value = map[string]int32{
	"MATCH_LANGUAGE_INVALID":    0,
	"MATCH_LANGUAGE_ENGLISH":    1,
	"MATCH_LANGUAGE_RUSSIAN":    2,
	"MATCH_LANGUAGE_CHINESE":    3,
	"MATCH_LANGUAGE_KOREAN":     4,
	"MATCH_LANGUAGE_SPANISH":    5,
	"MATCH_LANGUAGE_PORTUGUESE": 6,
	"MATCH_LANGUAGE_ENGLISH2":   7,
}

func (x MatchLanguages) Enum() *MatchLanguages {
	p := new(MatchLanguages)
	*p = x
	return p
}
func (x MatchLanguages) String() string {
	return proto.EnumName(MatchLanguages_name, int32(x))
}
func (x *MatchLanguages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchLanguages_value, data, "MatchLanguages")
	if err != nil {
		return err
	}
	*x = MatchLanguages(value)
	return nil
}
func (MatchLanguages) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type ETournamentTemplate int32

const (
	ETournamentTemplate_k_ETournamentTemplate_None              ETournamentTemplate = 0
	ETournamentTemplate_k_ETournamentTemplate_SingleElimination ETournamentTemplate = 1
)

var ETournamentTemplate_name = map[int32]string{
	0: "k_ETournamentTemplate_None",
	1: "k_ETournamentTemplate_SingleElimination",
}
var ETournamentTemplate_value = map[string]int32{
	"k_ETournamentTemplate_None":              0,
	"k_ETournamentTemplate_SingleElimination": 1,
}

func (x ETournamentTemplate) Enum() *ETournamentTemplate {
	p := new(ETournamentTemplate)
	*p = x
	return p
}
func (x ETournamentTemplate) String() string {
	return proto.EnumName(ETournamentTemplate_name, int32(x))
}
func (x *ETournamentTemplate) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentTemplate_value, data, "ETournamentTemplate")
	if err != nil {
		return err
	}
	*x = ETournamentTemplate(value)
	return nil
}
func (ETournamentTemplate) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

type ETournamentType int32

const (
	ETournamentType_k_ETournamentType_Unknown        ETournamentType = 0
	ETournamentType_k_ETournamentType_WeeklyDivision ETournamentType = 1
)

var ETournamentType_name = map[int32]string{
	0: "k_ETournamentType_Unknown",
	1: "k_ETournamentType_WeeklyDivision",
}
var ETournamentType_value = map[string]int32{
	"k_ETournamentType_Unknown":        0,
	"k_ETournamentType_WeeklyDivision": 1,
}

func (x ETournamentType) Enum() *ETournamentType {
	p := new(ETournamentType)
	*p = x
	return p
}
func (x ETournamentType) String() string {
	return proto.EnumName(ETournamentType_name, int32(x))
}
func (x *ETournamentType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentType_value, data, "ETournamentType")
	if err != nil {
		return err
	}
	*x = ETournamentType(value)
	return nil
}
func (ETournamentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type EEvent int32

const (
	EEvent_EVENT_ID_NONE                    EEvent = 0
	EEvent_EVENT_ID_DIRETIDE                EEvent = 1
	EEvent_EVENT_ID_SPRING_FESTIVAL         EEvent = 2
	EEvent_EVENT_ID_FROSTIVUS_2013          EEvent = 3
	EEvent_EVENT_ID_COMPENDIUM_2014         EEvent = 4
	EEvent_EVENT_ID_NEXON_PC_BANG           EEvent = 5
	EEvent_EVENT_ID_PWRD_DAC_2015           EEvent = 6
	EEvent_EVENT_ID_NEW_BLOOM_2015          EEvent = 7
	EEvent_EVENT_ID_INTERNATIONAL_2015      EEvent = 8
	EEvent_EVENT_ID_FALL_MAJOR_2015         EEvent = 9
	EEvent_EVENT_ID_ORACLE_PA               EEvent = 10
	EEvent_EVENT_ID_NEW_BLOOM_2015_PREBEAST EEvent = 11
	EEvent_EVENT_ID_FROSTIVUS               EEvent = 12
)

var EEvent_name = map[int32]string{
	0:  "EVENT_ID_NONE",
	1:  "EVENT_ID_DIRETIDE",
	2:  "EVENT_ID_SPRING_FESTIVAL",
	3:  "EVENT_ID_FROSTIVUS_2013",
	4:  "EVENT_ID_COMPENDIUM_2014",
	5:  "EVENT_ID_NEXON_PC_BANG",
	6:  "EVENT_ID_PWRD_DAC_2015",
	7:  "EVENT_ID_NEW_BLOOM_2015",
	8:  "EVENT_ID_INTERNATIONAL_2015",
	9:  "EVENT_ID_FALL_MAJOR_2015",
	10: "EVENT_ID_ORACLE_PA",
	11: "EVENT_ID_NEW_BLOOM_2015_PREBEAST",
	12: "EVENT_ID_FROSTIVUS",
}
var EEvent_value = map[string]int32{
	"EVENT_ID_NONE":                    0,
	"EVENT_ID_DIRETIDE":                1,
	"EVENT_ID_SPRING_FESTIVAL":         2,
	"EVENT_ID_FROSTIVUS_2013":          3,
	"EVENT_ID_COMPENDIUM_2014":         4,
	"EVENT_ID_NEXON_PC_BANG":           5,
	"EVENT_ID_PWRD_DAC_2015":           6,
	"EVENT_ID_NEW_BLOOM_2015":          7,
	"EVENT_ID_INTERNATIONAL_2015":      8,
	"EVENT_ID_FALL_MAJOR_2015":         9,
	"EVENT_ID_ORACLE_PA":               10,
	"EVENT_ID_NEW_BLOOM_2015_PREBEAST": 11,
	"EVENT_ID_FROSTIVUS":               12,
}

func (x EEvent) Enum() *EEvent {
	p := new(EEvent)
	*p = x
	return p
}
func (x EEvent) String() string {
	return proto.EnumName(EEvent_name, int32(x))
}
func (x *EEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EEvent_value, data, "EEvent")
	if err != nil {
		return err
	}
	*x = EEvent(value)
	return nil
}
func (EEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
}
var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}
func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}
func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}
func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type EMatchOutcome int32

const (
	EMatchOutcome_k_EMatchOutcome_Unknown                         EMatchOutcome = 0
	EMatchOutcome_k_EMatchOutcome_RadVictory                      EMatchOutcome = 2
	EMatchOutcome_k_EMatchOutcome_DireVictory                     EMatchOutcome = 3
	EMatchOutcome_k_EMatchOutcome_NotScored_PoorNetworkConditions EMatchOutcome = 64
	EMatchOutcome_k_EMatchOutcome_NotScored_Leaver                EMatchOutcome = 65
	EMatchOutcome_k_EMatchOutcome_NotScored_ServerCrash           EMatchOutcome = 66
	EMatchOutcome_k_EMatchOutcome_NotScored_NeverStarted          EMatchOutcome = 67
)

var EMatchOutcome_name = map[int32]string{
	0:  "k_EMatchOutcome_Unknown",
	2:  "k_EMatchOutcome_RadVictory",
	3:  "k_EMatchOutcome_DireVictory",
	64: "k_EMatchOutcome_NotScored_PoorNetworkConditions",
	65: "k_EMatchOutcome_NotScored_Leaver",
	66: "k_EMatchOutcome_NotScored_ServerCrash",
	67: "k_EMatchOutcome_NotScored_NeverStarted",
}
var EMatchOutcome_value = map[string]int32{
	"k_EMatchOutcome_Unknown":                         0,
	"k_EMatchOutcome_RadVictory":                      2,
	"k_EMatchOutcome_DireVictory":                     3,
	"k_EMatchOutcome_NotScored_PoorNetworkConditions": 64,
	"k_EMatchOutcome_NotScored_Leaver":                65,
	"k_EMatchOutcome_NotScored_ServerCrash":           66,
	"k_EMatchOutcome_NotScored_NeverStarted":          67,
}

func (x EMatchOutcome) Enum() *EMatchOutcome {
	p := new(EMatchOutcome)
	*p = x
	return p
}
func (x EMatchOutcome) String() string {
	return proto.EnumName(EMatchOutcome_name, int32(x))
}
func (x *EMatchOutcome) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchOutcome_value, data, "EMatchOutcome")
	if err != nil {
		return err
	}
	*x = EMatchOutcome(value)
	return nil
}
func (EMatchOutcome) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

type EDOTAGCSessionNeed int32

const (
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_Unknown                EDOTAGCSessionNeed = 0
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserNoSessionNeeded    EDOTAGCSessionNeed = 100
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInOnlineGame       EDOTAGCSessionNeed = 101
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInLocalGame        EDOTAGCSessionNeed = 102
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnected   EDOTAGCSessionNeed = 103
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnected EDOTAGCSessionNeed = 104
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserTutorials          EDOTAGCSessionNeed = 105
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerOnline       EDOTAGCSessionNeed = 200
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocal        EDOTAGCSessionNeed = 201
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerIdle         EDOTAGCSessionNeed = 202
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerRelay        EDOTAGCSessionNeed = 203
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocalUpload  EDOTAGCSessionNeed = 204
)

var EDOTAGCSessionNeed_name = map[int32]string{
	0:   "k_EDOTAGCSessionNeed_Unknown",
	100: "k_EDOTAGCSessionNeed_UserNoSessionNeeded",
	101: "k_EDOTAGCSessionNeed_UserInOnlineGame",
	102: "k_EDOTAGCSessionNeed_UserInLocalGame",
	103: "k_EDOTAGCSessionNeed_UserInUIWasConnected",
	104: "k_EDOTAGCSessionNeed_UserInUINeverConnected",
	105: "k_EDOTAGCSessionNeed_UserTutorials",
	200: "k_EDOTAGCSessionNeed_GameServerOnline",
	201: "k_EDOTAGCSessionNeed_GameServerLocal",
	202: "k_EDOTAGCSessionNeed_GameServerIdle",
	203: "k_EDOTAGCSessionNeed_GameServerRelay",
	204: "k_EDOTAGCSessionNeed_GameServerLocalUpload",
}
var EDOTAGCSessionNeed_value = map[string]int32{
	"k_EDOTAGCSessionNeed_Unknown":                0,
	"k_EDOTAGCSessionNeed_UserNoSessionNeeded":    100,
	"k_EDOTAGCSessionNeed_UserInOnlineGame":       101,
	"k_EDOTAGCSessionNeed_UserInLocalGame":        102,
	"k_EDOTAGCSessionNeed_UserInUIWasConnected":   103,
	"k_EDOTAGCSessionNeed_UserInUINeverConnected": 104,
	"k_EDOTAGCSessionNeed_UserTutorials":          105,
	"k_EDOTAGCSessionNeed_GameServerOnline":       200,
	"k_EDOTAGCSessionNeed_GameServerLocal":        201,
	"k_EDOTAGCSessionNeed_GameServerIdle":         202,
	"k_EDOTAGCSessionNeed_GameServerRelay":        203,
	"k_EDOTAGCSessionNeed_GameServerLocalUpload":  204,
}

func (x EDOTAGCSessionNeed) Enum() *EDOTAGCSessionNeed {
	p := new(EDOTAGCSessionNeed)
	*p = x
	return p
}
func (x EDOTAGCSessionNeed) String() string {
	return proto.EnumName(EDOTAGCSessionNeed_name, int32(x))
}
func (x *EDOTAGCSessionNeed) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAGCSessionNeed_value, data, "EDOTAGCSessionNeed")
	if err != nil {
		return err
	}
	*x = EDOTAGCSessionNeed(value)
	return nil
}
func (EDOTAGCSessionNeed) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type Fantasy_Roles int32

const (
	Fantasy_Roles_FANTASY_ROLE_UNDEFINED Fantasy_Roles = 0
	Fantasy_Roles_FANTASY_ROLE_CORE      Fantasy_Roles = 1
	Fantasy_Roles_FANTASY_ROLE_SUPPORT   Fantasy_Roles = 2
)

var Fantasy_Roles_name = map[int32]string{
	0: "FANTASY_ROLE_UNDEFINED",
	1: "FANTASY_ROLE_CORE",
	2: "FANTASY_ROLE_SUPPORT",
}
var Fantasy_Roles_value = map[string]int32{
	"FANTASY_ROLE_UNDEFINED": 0,
	"FANTASY_ROLE_CORE":      1,
	"FANTASY_ROLE_SUPPORT":   2,
}

func (x Fantasy_Roles) Enum() *Fantasy_Roles {
	p := new(Fantasy_Roles)
	*p = x
	return p
}
func (x Fantasy_Roles) String() string {
	return proto.EnumName(Fantasy_Roles_name, int32(x))
}
func (x *Fantasy_Roles) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Roles_value, data, "Fantasy_Roles")
	if err != nil {
		return err
	}
	*x = Fantasy_Roles(value)
	return nil
}
func (Fantasy_Roles) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

type Fantasy_Team_Slots int32

const (
	Fantasy_Team_Slots_FANTASY_SLOT_NONE    Fantasy_Team_Slots = 0
	Fantasy_Team_Slots_FANTASY_SLOT_CORE    Fantasy_Team_Slots = 1
	Fantasy_Team_Slots_FANTASY_SLOT_SUPPORT Fantasy_Team_Slots = 2
	Fantasy_Team_Slots_FANTASY_SLOT_ANY     Fantasy_Team_Slots = 3
	Fantasy_Team_Slots_FANTASY_SLOT_BENCH   Fantasy_Team_Slots = 4
)

var Fantasy_Team_Slots_name = map[int32]string{
	0: "FANTASY_SLOT_NONE",
	1: "FANTASY_SLOT_CORE",
	2: "FANTASY_SLOT_SUPPORT",
	3: "FANTASY_SLOT_ANY",
	4: "FANTASY_SLOT_BENCH",
}
var Fantasy_Team_Slots_value = map[string]int32{
	"FANTASY_SLOT_NONE":    0,
	"FANTASY_SLOT_CORE":    1,
	"FANTASY_SLOT_SUPPORT": 2,
	"FANTASY_SLOT_ANY":     3,
	"FANTASY_SLOT_BENCH":   4,
}

func (x Fantasy_Team_Slots) Enum() *Fantasy_Team_Slots {
	p := new(Fantasy_Team_Slots)
	*p = x
	return p
}
func (x Fantasy_Team_Slots) String() string {
	return proto.EnumName(Fantasy_Team_Slots_name, int32(x))
}
func (x *Fantasy_Team_Slots) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Team_Slots_value, data, "Fantasy_Team_Slots")
	if err != nil {
		return err
	}
	*x = Fantasy_Team_Slots(value)
	return nil
}
func (Fantasy_Team_Slots) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

type Fantasy_Selection_Mode int32

const (
	Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID        Fantasy_Selection_Mode = 0
	Fantasy_Selection_Mode_FANTASY_SELECTION_LOCKED         Fantasy_Selection_Mode = 1
	Fantasy_Selection_Mode_FANTASY_SELECTION_SHUFFLE        Fantasy_Selection_Mode = 2
	Fantasy_Selection_Mode_FANTASY_SELECTION_FREE_PICK      Fantasy_Selection_Mode = 3
	Fantasy_Selection_Mode_FANTASY_SELECTION_ENDED          Fantasy_Selection_Mode = 4
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_SEASON     Fantasy_Selection_Mode = 5
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_DRAFT      Fantasy_Selection_Mode = 6
	Fantasy_Selection_Mode_FANTASY_SELECTION_DRAFTING       Fantasy_Selection_Mode = 7
	Fantasy_Selection_Mode_FANTASY_SELECTION_REGULAR_SEASON Fantasy_Selection_Mode = 8
)

var Fantasy_Selection_Mode_name = map[int32]string{
	0: "FANTASY_SELECTION_INVALID",
	1: "FANTASY_SELECTION_LOCKED",
	2: "FANTASY_SELECTION_SHUFFLE",
	3: "FANTASY_SELECTION_FREE_PICK",
	4: "FANTASY_SELECTION_ENDED",
	5: "FANTASY_SELECTION_PRE_SEASON",
	6: "FANTASY_SELECTION_PRE_DRAFT",
	7: "FANTASY_SELECTION_DRAFTING",
	8: "FANTASY_SELECTION_REGULAR_SEASON",
}
var Fantasy_Selection_Mode_value = map[string]int32{
	"FANTASY_SELECTION_INVALID":        0,
	"FANTASY_SELECTION_LOCKED":         1,
	"FANTASY_SELECTION_SHUFFLE":        2,
	"FANTASY_SELECTION_FREE_PICK":      3,
	"FANTASY_SELECTION_ENDED":          4,
	"FANTASY_SELECTION_PRE_SEASON":     5,
	"FANTASY_SELECTION_PRE_DRAFT":      6,
	"FANTASY_SELECTION_DRAFTING":       7,
	"FANTASY_SELECTION_REGULAR_SEASON": 8,
}

func (x Fantasy_Selection_Mode) Enum() *Fantasy_Selection_Mode {
	p := new(Fantasy_Selection_Mode)
	*p = x
	return p
}
func (x Fantasy_Selection_Mode) String() string {
	return proto.EnumName(Fantasy_Selection_Mode_name, int32(x))
}
func (x *Fantasy_Selection_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Selection_Mode_value, data, "Fantasy_Selection_Mode")
	if err != nil {
		return err
	}
	*x = Fantasy_Selection_Mode(value)
	return nil
}
func (Fantasy_Selection_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

type DOTA_TournamentEvents int32

const (
	DOTA_TournamentEvents_TE_FIRST_BLOOD  DOTA_TournamentEvents = 0
	DOTA_TournamentEvents_TE_GAME_END     DOTA_TournamentEvents = 1
	DOTA_TournamentEvents_TE_MULTI_KILL   DOTA_TournamentEvents = 2
	DOTA_TournamentEvents_TE_HERO_DENY    DOTA_TournamentEvents = 3
	DOTA_TournamentEvents_TE_AEGIS_DENY   DOTA_TournamentEvents = 4
	DOTA_TournamentEvents_TE_AEGIS_STOLEN DOTA_TournamentEvents = 5
	DOTA_TournamentEvents_TE_GODLIKE      DOTA_TournamentEvents = 6
	DOTA_TournamentEvents_TE_COURIER_KILL DOTA_TournamentEvents = 7
	DOTA_TournamentEvents_TE_ECHOSLAM     DOTA_TournamentEvents = 8
	DOTA_TournamentEvents_TE_RAPIER       DOTA_TournamentEvents = 9
	DOTA_TournamentEvents_TE_EARLY_ROSHAN DOTA_TournamentEvents = 10
	DOTA_TournamentEvents_TE_BLACK_HOLE   DOTA_TournamentEvents = 11
)

var DOTA_TournamentEvents_name = map[int32]string{
	0:  "TE_FIRST_BLOOD",
	1:  "TE_GAME_END",
	2:  "TE_MULTI_KILL",
	3:  "TE_HERO_DENY",
	4:  "TE_AEGIS_DENY",
	5:  "TE_AEGIS_STOLEN",
	6:  "TE_GODLIKE",
	7:  "TE_COURIER_KILL",
	8:  "TE_ECHOSLAM",
	9:  "TE_RAPIER",
	10: "TE_EARLY_ROSHAN",
	11: "TE_BLACK_HOLE",
}
var DOTA_TournamentEvents_value = map[string]int32{
	"TE_FIRST_BLOOD":  0,
	"TE_GAME_END":     1,
	"TE_MULTI_KILL":   2,
	"TE_HERO_DENY":    3,
	"TE_AEGIS_DENY":   4,
	"TE_AEGIS_STOLEN": 5,
	"TE_GODLIKE":      6,
	"TE_COURIER_KILL": 7,
	"TE_ECHOSLAM":     8,
	"TE_RAPIER":       9,
	"TE_EARLY_ROSHAN": 10,
	"TE_BLACK_HOLE":   11,
}

func (x DOTA_TournamentEvents) Enum() *DOTA_TournamentEvents {
	p := new(DOTA_TournamentEvents)
	*p = x
	return p
}
func (x DOTA_TournamentEvents) String() string {
	return proto.EnumName(DOTA_TournamentEvents_name, int32(x))
}
func (x *DOTA_TournamentEvents) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_TournamentEvents_value, data, "DOTA_TournamentEvents")
	if err != nil {
		return err
	}
	*x = DOTA_TournamentEvents(value)
	return nil
}
func (DOTA_TournamentEvents) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type DOTA_COMBATLOG_TYPES int32

const (
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DAMAGE             DOTA_COMBATLOG_TYPES = 0
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HEAL               DOTA_COMBATLOG_TYPES = 1
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_ADD       DOTA_COMBATLOG_TYPES = 2
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_REMOVE    DOTA_COMBATLOG_TYPES = 3
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DEATH              DOTA_COMBATLOG_TYPES = 4
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY            DOTA_COMBATLOG_TYPES = 5
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ITEM               DOTA_COMBATLOG_TYPES = 6
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_LOCATION           DOTA_COMBATLOG_TYPES = 7
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GOLD               DOTA_COMBATLOG_TYPES = 8
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GAME_STATE         DOTA_COMBATLOG_TYPES = 9
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_XP                 DOTA_COMBATLOG_TYPES = 10
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PURCHASE           DOTA_COMBATLOG_TYPES = 11
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BUYBACK            DOTA_COMBATLOG_TYPES = 12
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY_TRIGGER    DOTA_COMBATLOG_TYPES = 13
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PLAYERSTATS        DOTA_COMBATLOG_TYPES = 14
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MULTIKILL          DOTA_COMBATLOG_TYPES = 15
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_KILLSTREAK         DOTA_COMBATLOG_TYPES = 16
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_TEAM_BUILDING_KILL DOTA_COMBATLOG_TYPES = 17
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_FIRST_BLOOD        DOTA_COMBATLOG_TYPES = 18
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_REFRESH   DOTA_COMBATLOG_TYPES = 19
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_NEUTRAL_CAMP_STACK DOTA_COMBATLOG_TYPES = 20
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PICKUP_RUNE        DOTA_COMBATLOG_TYPES = 21
)

var DOTA_COMBATLOG_TYPES_name = map[int32]string{
	0:  "DOTA_COMBATLOG_DAMAGE",
	1:  "DOTA_COMBATLOG_HEAL",
	2:  "DOTA_COMBATLOG_MODIFIER_ADD",
	3:  "DOTA_COMBATLOG_MODIFIER_REMOVE",
	4:  "DOTA_COMBATLOG_DEATH",
	5:  "DOTA_COMBATLOG_ABILITY",
	6:  "DOTA_COMBATLOG_ITEM",
	7:  "DOTA_COMBATLOG_LOCATION",
	8:  "DOTA_COMBATLOG_GOLD",
	9:  "DOTA_COMBATLOG_GAME_STATE",
	10: "DOTA_COMBATLOG_XP",
	11: "DOTA_COMBATLOG_PURCHASE",
	12: "DOTA_COMBATLOG_BUYBACK",
	13: "DOTA_COMBATLOG_ABILITY_TRIGGER",
	14: "DOTA_COMBATLOG_PLAYERSTATS",
	15: "DOTA_COMBATLOG_MULTIKILL",
	16: "DOTA_COMBATLOG_KILLSTREAK",
	17: "DOTA_COMBATLOG_TEAM_BUILDING_KILL",
	18: "DOTA_COMBATLOG_FIRST_BLOOD",
	19: "DOTA_COMBATLOG_MODIFIER_REFRESH",
	20: "DOTA_COMBATLOG_NEUTRAL_CAMP_STACK",
	21: "DOTA_COMBATLOG_PICKUP_RUNE",
}
var DOTA_COMBATLOG_TYPES_value = map[string]int32{
	"DOTA_COMBATLOG_DAMAGE":             0,
	"DOTA_COMBATLOG_HEAL":               1,
	"DOTA_COMBATLOG_MODIFIER_ADD":       2,
	"DOTA_COMBATLOG_MODIFIER_REMOVE":    3,
	"DOTA_COMBATLOG_DEATH":              4,
	"DOTA_COMBATLOG_ABILITY":            5,
	"DOTA_COMBATLOG_ITEM":               6,
	"DOTA_COMBATLOG_LOCATION":           7,
	"DOTA_COMBATLOG_GOLD":               8,
	"DOTA_COMBATLOG_GAME_STATE":         9,
	"DOTA_COMBATLOG_XP":                 10,
	"DOTA_COMBATLOG_PURCHASE":           11,
	"DOTA_COMBATLOG_BUYBACK":            12,
	"DOTA_COMBATLOG_ABILITY_TRIGGER":    13,
	"DOTA_COMBATLOG_PLAYERSTATS":        14,
	"DOTA_COMBATLOG_MULTIKILL":          15,
	"DOTA_COMBATLOG_KILLSTREAK":         16,
	"DOTA_COMBATLOG_TEAM_BUILDING_KILL": 17,
	"DOTA_COMBATLOG_FIRST_BLOOD":        18,
	"DOTA_COMBATLOG_MODIFIER_REFRESH":   19,
	"DOTA_COMBATLOG_NEUTRAL_CAMP_STACK": 20,
	"DOTA_COMBATLOG_PICKUP_RUNE":        21,
}

func (x DOTA_COMBATLOG_TYPES) Enum() *DOTA_COMBATLOG_TYPES {
	p := new(DOTA_COMBATLOG_TYPES)
	*p = x
	return p
}
func (x DOTA_COMBATLOG_TYPES) String() string {
	return proto.EnumName(DOTA_COMBATLOG_TYPES_name, int32(x))
}
func (x *DOTA_COMBATLOG_TYPES) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_COMBATLOG_TYPES_value, data, "DOTA_COMBATLOG_TYPES")
	if err != nil {
		return err
	}
	*x = DOTA_COMBATLOG_TYPES(value)
	return nil
}
func (DOTA_COMBATLOG_TYPES) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

type DOTAChatChannelTypeT int32

const (
	DOTAChatChannelTypeT_DOTAChannelType_Regional      DOTAChatChannelTypeT = 0
	DOTAChatChannelTypeT_DOTAChannelType_Custom        DOTAChatChannelTypeT = 1
	DOTAChatChannelTypeT_DOTAChannelType_Party         DOTAChatChannelTypeT = 2
	DOTAChatChannelTypeT_DOTAChannelType_Lobby         DOTAChatChannelTypeT = 3
	DOTAChatChannelTypeT_DOTAChannelType_Team          DOTAChatChannelTypeT = 4
	DOTAChatChannelTypeT_DOTAChannelType_Guild         DOTAChatChannelTypeT = 5
	DOTAChatChannelTypeT_DOTAChannelType_Fantasy       DOTAChatChannelTypeT = 6
	DOTAChatChannelTypeT_DOTAChannelType_Whisper       DOTAChatChannelTypeT = 7
	DOTAChatChannelTypeT_DOTAChannelType_Console       DOTAChatChannelTypeT = 8
	DOTAChatChannelTypeT_DOTAChannelType_Tab           DOTAChatChannelTypeT = 9
	DOTAChatChannelTypeT_DOTAChannelType_Invalid       DOTAChatChannelTypeT = 10
	DOTAChatChannelTypeT_DOTAChannelType_GameAll       DOTAChatChannelTypeT = 11
	DOTAChatChannelTypeT_DOTAChannelType_GameAllies    DOTAChatChannelTypeT = 12
	DOTAChatChannelTypeT_DOTAChannelType_GameSpectator DOTAChatChannelTypeT = 13
	DOTAChatChannelTypeT_DOTAChannelType_GameCoaching  DOTAChatChannelTypeT = 14
	DOTAChatChannelTypeT_DOTAChannelType_Cafe          DOTAChatChannelTypeT = 15
	DOTAChatChannelTypeT_DOTAChannelType_CustomGame    DOTAChatChannelTypeT = 16
)

var DOTAChatChannelTypeT_name = map[int32]string{
	0:  "DOTAChannelType_Regional",
	1:  "DOTAChannelType_Custom",
	2:  "DOTAChannelType_Party",
	3:  "DOTAChannelType_Lobby",
	4:  "DOTAChannelType_Team",
	5:  "DOTAChannelType_Guild",
	6:  "DOTAChannelType_Fantasy",
	7:  "DOTAChannelType_Whisper",
	8:  "DOTAChannelType_Console",
	9:  "DOTAChannelType_Tab",
	10: "DOTAChannelType_Invalid",
	11: "DOTAChannelType_GameAll",
	12: "DOTAChannelType_GameAllies",
	13: "DOTAChannelType_GameSpectator",
	14: "DOTAChannelType_GameCoaching",
	15: "DOTAChannelType_Cafe",
	16: "DOTAChannelType_CustomGame",
}
var DOTAChatChannelTypeT_value = map[string]int32{
	"DOTAChannelType_Regional":      0,
	"DOTAChannelType_Custom":        1,
	"DOTAChannelType_Party":         2,
	"DOTAChannelType_Lobby":         3,
	"DOTAChannelType_Team":          4,
	"DOTAChannelType_Guild":         5,
	"DOTAChannelType_Fantasy":       6,
	"DOTAChannelType_Whisper":       7,
	"DOTAChannelType_Console":       8,
	"DOTAChannelType_Tab":           9,
	"DOTAChannelType_Invalid":       10,
	"DOTAChannelType_GameAll":       11,
	"DOTAChannelType_GameAllies":    12,
	"DOTAChannelType_GameSpectator": 13,
	"DOTAChannelType_GameCoaching":  14,
	"DOTAChannelType_Cafe":          15,
	"DOTAChannelType_CustomGame":    16,
}

func (x DOTAChatChannelTypeT) Enum() *DOTAChatChannelTypeT {
	p := new(DOTAChatChannelTypeT)
	*p = x
	return p
}
func (x DOTAChatChannelTypeT) String() string {
	return proto.EnumName(DOTAChatChannelTypeT_name, int32(x))
}
func (x *DOTAChatChannelTypeT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAChatChannelTypeT_value, data, "DOTAChatChannelTypeT")
	if err != nil {
		return err
	}
	*x = DOTAChatChannelTypeT(value)
	return nil
}
func (DOTAChatChannelTypeT) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

var CSODOTAParty_State_name = map[int32]string{
	0: "UI",
	1: "FINDING_MATCH",
	2: "IN_MATCH",
}
var CSODOTAParty_State_value = map[string]int32{
	"UI":            0,
	"FINDING_MATCH": 1,
	"IN_MATCH":      2,
}

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}
func (x CSODOTAParty_State) String() string {
	return proto.EnumName(CSODOTAParty_State_name, int32(x))
}
func (x *CSODOTAParty_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAParty_State_value, data, "CSODOTAParty_State")
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(value)
	return nil
}
func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}
var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}
func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}
func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}
func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 0} }

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_TOURNAMENT              CSODOTALobby_LobbyType = 2
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	2:  "TOURNAMENT",
	4:  "COOP_BOT_MATCH",
	5:  "LEGACY_TEAM_MATCH",
	6:  "LEGACY_SOLO_QUEUE_MATCH",
	7:  "COMPETITIVE_MATCH",
	8:  "CASUAL_1V1_MATCH",
	9:  "WEEKEND_TOURNEY",
	10: "LOCAL_BOT_MATCH",
}
var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":                 -1,
	"CASUAL_MATCH":            0,
	"PRACTICE":                1,
	"TOURNAMENT":              2,
	"COOP_BOT_MATCH":          4,
	"LEGACY_TEAM_MATCH":       5,
	"LEGACY_SOLO_QUEUE_MATCH": 6,
	"COMPETITIVE_MATCH":       7,
	"CASUAL_1V1_MATCH":        8,
	"WEEKEND_TOURNEY":         9,
	"LOCAL_BOT_MATCH":         10,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}
func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}
func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 1} }

type CMsgPerfectWorldUserLookupResponse_EResultCode int32

const (
	CMsgPerfectWorldUserLookupResponse_SUCCESS_ACCOUNT_FOUND                CMsgPerfectWorldUserLookupResponse_EResultCode = 0
	CMsgPerfectWorldUserLookupResponse_ERROR_UNKNOWN                        CMsgPerfectWorldUserLookupResponse_EResultCode = 1
	CMsgPerfectWorldUserLookupResponse_ERROR_USER_NAME_WRONG_FORMAT         CMsgPerfectWorldUserLookupResponse_EResultCode = 2
	CMsgPerfectWorldUserLookupResponse_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND CMsgPerfectWorldUserLookupResponse_EResultCode = 3
	CMsgPerfectWorldUserLookupResponse_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND  CMsgPerfectWorldUserLookupResponse_EResultCode = 4
)

var CMsgPerfectWorldUserLookupResponse_EResultCode_name = map[int32]string{
	0: "SUCCESS_ACCOUNT_FOUND",
	1: "ERROR_UNKNOWN",
	2: "ERROR_USER_NAME_WRONG_FORMAT",
	3: "ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND",
	4: "ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND",
}
var CMsgPerfectWorldUserLookupResponse_EResultCode_value = map[string]int32{
	"SUCCESS_ACCOUNT_FOUND":                0,
	"ERROR_UNKNOWN":                        1,
	"ERROR_USER_NAME_WRONG_FORMAT":         2,
	"ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND": 3,
	"ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND":  4,
}

func (x CMsgPerfectWorldUserLookupResponse_EResultCode) Enum() *CMsgPerfectWorldUserLookupResponse_EResultCode {
	p := new(CMsgPerfectWorldUserLookupResponse_EResultCode)
	*p = x
	return p
}
func (x CMsgPerfectWorldUserLookupResponse_EResultCode) String() string {
	return proto.EnumName(CMsgPerfectWorldUserLookupResponse_EResultCode_name, int32(x))
}
func (x *CMsgPerfectWorldUserLookupResponse_EResultCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgPerfectWorldUserLookupResponse_EResultCode_value, data, "CMsgPerfectWorldUserLookupResponse_EResultCode")
	if err != nil {
		return err
	}
	*x = CMsgPerfectWorldUserLookupResponse_EResultCode(value)
	return nil
}
func (CMsgPerfectWorldUserLookupResponse_EResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{49, 0}
}

type CMsgDOTAProfileCard_EStatID int32

const (
	CMsgDOTAProfileCard_k_eStat_SoloRank       CMsgDOTAProfileCard_EStatID = 1
	CMsgDOTAProfileCard_k_eStat_PartyRank      CMsgDOTAProfileCard_EStatID = 2
	CMsgDOTAProfileCard_k_eStat_Wins           CMsgDOTAProfileCard_EStatID = 3
	CMsgDOTAProfileCard_k_eStat_Commends       CMsgDOTAProfileCard_EStatID = 4
	CMsgDOTAProfileCard_k_eStat_GamesPlayed    CMsgDOTAProfileCard_EStatID = 5
	CMsgDOTAProfileCard_k_eStat_FirstMatchDate CMsgDOTAProfileCard_EStatID = 6
)

var CMsgDOTAProfileCard_EStatID_name = map[int32]string{
	1: "k_eStat_SoloRank",
	2: "k_eStat_PartyRank",
	3: "k_eStat_Wins",
	4: "k_eStat_Commends",
	5: "k_eStat_GamesPlayed",
	6: "k_eStat_FirstMatchDate",
}
var CMsgDOTAProfileCard_EStatID_value = map[string]int32{
	"k_eStat_SoloRank":       1,
	"k_eStat_PartyRank":      2,
	"k_eStat_Wins":           3,
	"k_eStat_Commends":       4,
	"k_eStat_GamesPlayed":    5,
	"k_eStat_FirstMatchDate": 6,
}

func (x CMsgDOTAProfileCard_EStatID) Enum() *CMsgDOTAProfileCard_EStatID {
	p := new(CMsgDOTAProfileCard_EStatID)
	*p = x
	return p
}
func (x CMsgDOTAProfileCard_EStatID) String() string {
	return proto.EnumName(CMsgDOTAProfileCard_EStatID_name, int32(x))
}
func (x *CMsgDOTAProfileCard_EStatID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAProfileCard_EStatID_value, data, "CMsgDOTAProfileCard_EStatID")
	if err != nil {
		return err
	}
	*x = CMsgDOTAProfileCard_EStatID(value)
	return nil
}
func (CMsgDOTAProfileCard_EStatID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0}
}

type CSODOTAPlayerChallenge_EFlags int32

const (
	CSODOTAPlayerChallenge_eFlag_InstantRerollUncompleted CSODOTAPlayerChallenge_EFlags = 1
)

var CSODOTAPlayerChallenge_EFlags_name = map[int32]string{
	1: "eFlag_InstantRerollUncompleted",
}
var CSODOTAPlayerChallenge_EFlags_value = map[string]int32{
	"eFlag_InstantRerollUncompleted": 1,
}

func (x CSODOTAPlayerChallenge_EFlags) Enum() *CSODOTAPlayerChallenge_EFlags {
	p := new(CSODOTAPlayerChallenge_EFlags)
	*p = x
	return p
}
func (x CSODOTAPlayerChallenge_EFlags) String() string {
	return proto.EnumName(CSODOTAPlayerChallenge_EFlags_name, int32(x))
}
func (x *CSODOTAPlayerChallenge_EFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAPlayerChallenge_EFlags_value, data, "CSODOTAPlayerChallenge_EFlags")
	if err != nil {
		return err
	}
	*x = CSODOTAPlayerChallenge_EFlags(value)
	return nil
}
func (CSODOTAPlayerChallenge_EFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{59, 0}
}

type CMsgGCRerollPlayerChallengeResponse_EResult int32

const (
	CMsgGCRerollPlayerChallengeResponse_eResult_Success     CMsgGCRerollPlayerChallengeResponse_EResult = 0
	CMsgGCRerollPlayerChallengeResponse_eResult_Dropped     CMsgGCRerollPlayerChallengeResponse_EResult = 1
	CMsgGCRerollPlayerChallengeResponse_eResult_NotFound    CMsgGCRerollPlayerChallengeResponse_EResult = 2
	CMsgGCRerollPlayerChallengeResponse_eResult_CantReroll  CMsgGCRerollPlayerChallengeResponse_EResult = 3
	CMsgGCRerollPlayerChallengeResponse_eResult_ServerError CMsgGCRerollPlayerChallengeResponse_EResult = 4
)

var CMsgGCRerollPlayerChallengeResponse_EResult_name = map[int32]string{
	0: "eResult_Success",
	1: "eResult_Dropped",
	2: "eResult_NotFound",
	3: "eResult_CantReroll",
	4: "eResult_ServerError",
}
var CMsgGCRerollPlayerChallengeResponse_EResult_value = map[string]int32{
	"eResult_Success":     0,
	"eResult_Dropped":     1,
	"eResult_NotFound":    2,
	"eResult_CantReroll":  3,
	"eResult_ServerError": 4,
}

func (x CMsgGCRerollPlayerChallengeResponse_EResult) Enum() *CMsgGCRerollPlayerChallengeResponse_EResult {
	p := new(CMsgGCRerollPlayerChallengeResponse_EResult)
	*p = x
	return p
}
func (x CMsgGCRerollPlayerChallengeResponse_EResult) String() string {
	return proto.EnumName(CMsgGCRerollPlayerChallengeResponse_EResult_name, int32(x))
}
func (x *CMsgGCRerollPlayerChallengeResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgGCRerollPlayerChallengeResponse_EResult_value, data, "CMsgGCRerollPlayerChallengeResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgGCRerollPlayerChallengeResponse_EResult(value)
	return nil
}
func (CMsgGCRerollPlayerChallengeResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{61, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataEStat int32

const (
	CMsgDOTARealtimeGameStats_GraphData_CreepGoldEarned         CMsgDOTARealtimeGameStats_GraphDataEStat = 0
	CMsgDOTARealtimeGameStats_GraphData_KillGoldEarned          CMsgDOTARealtimeGameStats_GraphDataEStat = 1
	CMsgDOTARealtimeGameStats_GraphData_DeathAndBuybackGoldLost CMsgDOTARealtimeGameStats_GraphDataEStat = 2
	CMsgDOTARealtimeGameStats_GraphData_XPEarned                CMsgDOTARealtimeGameStats_GraphDataEStat = 3
)

var CMsgDOTARealtimeGameStats_GraphDataEStat_name = map[int32]string{
	0: "CreepGoldEarned",
	1: "KillGoldEarned",
	2: "DeathAndBuybackGoldLost",
	3: "XPEarned",
}
var CMsgDOTARealtimeGameStats_GraphDataEStat_value = map[string]int32{
	"CreepGoldEarned":         0,
	"KillGoldEarned":          1,
	"DeathAndBuybackGoldLost": 2,
	"XPEarned":                3,
}

func (x CMsgDOTARealtimeGameStats_GraphDataEStat) Enum() *CMsgDOTARealtimeGameStats_GraphDataEStat {
	p := new(CMsgDOTARealtimeGameStats_GraphDataEStat)
	*p = x
	return p
}
func (x CMsgDOTARealtimeGameStats_GraphDataEStat) String() string {
	return proto.EnumName(CMsgDOTARealtimeGameStats_GraphDataEStat_name, int32(x))
}
func (x *CMsgDOTARealtimeGameStats_GraphDataEStat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTARealtimeGameStats_GraphDataEStat_value, data, "CMsgDOTARealtimeGameStats_GraphDataEStat")
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataEStat(value)
	return nil
}
func (CMsgDOTARealtimeGameStats_GraphDataEStat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 11, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataELocation int32

const (
	CMsgDOTARealtimeGameStats_GraphData_BotLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 0
	CMsgDOTARealtimeGameStats_GraphData_MidLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 1
	CMsgDOTARealtimeGameStats_GraphData_TopLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 2
	CMsgDOTARealtimeGameStats_GraphData_Jungle   CMsgDOTARealtimeGameStats_GraphDataELocation = 3
	CMsgDOTARealtimeGameStats_GraphData_Ancients CMsgDOTARealtimeGameStats_GraphDataELocation = 4
	CMsgDOTARealtimeGameStats_GraphData_Other    CMsgDOTARealtimeGameStats_GraphDataELocation = 5
)

var CMsgDOTARealtimeGameStats_GraphDataELocation_name = map[int32]string{
	0: "BotLane",
	1: "MidLane",
	2: "TopLane",
	3: "Jungle",
	4: "Ancients",
	5: "Other",
}
var CMsgDOTARealtimeGameStats_GraphDataELocation_value = map[string]int32{
	"BotLane":  0,
	"MidLane":  1,
	"TopLane":  2,
	"Jungle":   3,
	"Ancients": 4,
	"Other":    5,
}

func (x CMsgDOTARealtimeGameStats_GraphDataELocation) Enum() *CMsgDOTARealtimeGameStats_GraphDataELocation {
	p := new(CMsgDOTARealtimeGameStats_GraphDataELocation)
	*p = x
	return p
}
func (x CMsgDOTARealtimeGameStats_GraphDataELocation) String() string {
	return proto.EnumName(CMsgDOTARealtimeGameStats_GraphDataELocation_name, int32(x))
}
func (x *CMsgDOTARealtimeGameStats_GraphDataELocation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTARealtimeGameStats_GraphDataELocation_value, data, "CMsgDOTARealtimeGameStats_GraphDataELocation")
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataELocation(value)
	return nil
}
func (CMsgDOTARealtimeGameStats_GraphDataELocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 11, 1}
}

type CSODOTAGameAccountClient struct {
	AccountId                                *uint32                              `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Wins                                     *uint32                              `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Losses                                   *uint32                              `protobuf:"varint,4,opt,name=losses" json:"losses,omitempty"`
	Xp                                       *uint32                              `protobuf:"varint,12,opt,name=xp" json:"xp,omitempty"`
	Level                                    *uint32                              `protobuf:"varint,13,opt,name=level" json:"level,omitempty"`
	InitialSkill                             *uint32                              `protobuf:"varint,14,opt,name=initial_skill" json:"initial_skill,omitempty"`
	LeaverCount                              *uint32                              `protobuf:"varint,15,opt,name=leaver_count" json:"leaver_count,omitempty"`
	SecondaryLeaverCount                     *uint32                              `protobuf:"varint,58,opt,name=secondary_leaver_count" json:"secondary_leaver_count,omitempty"`
	LowPriorityUntilDate                     *uint32                              `protobuf:"varint,18,opt,name=low_priority_until_date" json:"low_priority_until_date,omitempty"`
	PreventTextChatUntilDate                 *uint32                              `protobuf:"varint,20,opt,name=prevent_text_chat_until_date" json:"prevent_text_chat_until_date,omitempty"`
	PreventVoiceUntilDate                    *uint32                              `protobuf:"varint,21,opt,name=prevent_voice_until_date" json:"prevent_voice_until_date,omitempty"`
	LastAbandonedGameDate                    *uint32                              `protobuf:"varint,22,opt,name=last_abandoned_game_date" json:"last_abandoned_game_date,omitempty"`
	LastSecondaryAbandonedGameDate           *uint32                              `protobuf:"varint,59,opt,name=last_secondary_abandoned_game_date" json:"last_secondary_abandoned_game_date,omitempty"`
	LeaverPenaltyCount                       *uint32                              `protobuf:"varint,23,opt,name=leaver_penalty_count" json:"leaver_penalty_count,omitempty"`
	CompletedGameStreak                      *uint32                              `protobuf:"varint,24,opt,name=completed_game_streak" json:"completed_game_streak,omitempty"`
	Teaching                                 *uint32                              `protobuf:"varint,28,opt,name=teaching" json:"teaching,omitempty"`
	Leadership                               *uint32                              `protobuf:"varint,29,opt,name=leadership" json:"leadership,omitempty"`
	Friendly                                 *uint32                              `protobuf:"varint,30,opt,name=friendly" json:"friendly,omitempty"`
	Forgiving                                *uint32                              `protobuf:"varint,31,opt,name=forgiving" json:"forgiving,omitempty"`
	AccountDisabledUntilDate                 *uint32                              `protobuf:"varint,38,opt,name=account_disabled_until_date" json:"account_disabled_until_date,omitempty"`
	AccountDisabledCount                     *uint32                              `protobuf:"varint,39,opt,name=account_disabled_count" json:"account_disabled_count,omitempty"`
	ShowcaseHeroId                           *uint32                              `protobuf:"varint,40,opt,name=showcase_hero_id" json:"showcase_hero_id,omitempty"`
	MatchDisabledUntilDate                   *uint32                              `protobuf:"varint,41,opt,name=match_disabled_until_date" json:"match_disabled_until_date,omitempty"`
	MatchDisabledCount                       *uint32                              `protobuf:"varint,42,opt,name=match_disabled_count" json:"match_disabled_count,omitempty"`
	PartnerAccountType                       *gcsdk_gcmessages.PartnerAccountType `protobuf:"varint,44,opt,name=partner_account_type,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	PartnerAccountState                      *uint32                              `protobuf:"varint,45,opt,name=partner_account_state" json:"partner_account_state,omitempty"`
	Shutdownlawterminatetimestamp            *uint32                              `protobuf:"varint,47,opt,name=shutdownlawterminatetimestamp" json:"shutdownlawterminatetimestamp,omitempty"`
	LowPriorityGamesRemaining                *uint32                              `protobuf:"varint,48,opt,name=low_priority_games_remaining" json:"low_priority_games_remaining,omitempty"`
	CompetitiveRank                          *uint32                              `protobuf:"varint,49,opt,name=competitive_rank" json:"competitive_rank,omitempty"`
	CalibrationGamesRemaining                *uint32                              `protobuf:"varint,51,opt,name=calibration_games_remaining" json:"calibration_games_remaining,omitempty"`
	SoloCompetitiveRank                      *uint32                              `protobuf:"varint,52,opt,name=solo_competitive_rank" json:"solo_competitive_rank,omitempty"`
	SoloCalibrationGamesRemaining            *uint32                              `protobuf:"varint,54,opt,name=solo_calibration_games_remaining" json:"solo_calibration_games_remaining,omitempty"`
	Competitive_1V1Rank                      *uint32                              `protobuf:"varint,63,opt,name=competitive_1v1_rank" json:"competitive_1v1_rank,omitempty"`
	Competitive_1V1CalibrationGamesRemaining *uint32                              `protobuf:"varint,64,opt,name=competitive_1v1_calibration_games_remaining" json:"competitive_1v1_calibration_games_remaining,omitempty"`
	RecruitmentLevel                         *uint32                              `protobuf:"varint,55,opt,name=recruitment_level" json:"recruitment_level,omitempty"`
	HasNewNotifications                      *bool                                `protobuf:"varint,56,opt,name=has_new_notifications" json:"has_new_notifications,omitempty"`
	IsLeagueAdmin                            *bool                                `protobuf:"varint,57,opt,name=is_league_admin" json:"is_league_admin,omitempty"`
	CasualGamesPlayed                        *uint32                              `protobuf:"varint,60,opt,name=casual_games_played" json:"casual_games_played,omitempty"`
	SoloCompetitiveGamesPlayed               *uint32                              `protobuf:"varint,61,opt,name=solo_competitive_games_played" json:"solo_competitive_games_played,omitempty"`
	PartyCompetitiveGamesPlayed              *uint32                              `protobuf:"varint,62,opt,name=party_competitive_games_played" json:"party_competitive_games_played,omitempty"`
	Casual_1V1GamesPlayed                    *uint32                              `protobuf:"varint,65,opt,name=casual_1v1_games_played" json:"casual_1v1_games_played,omitempty"`
	CompetitiveTeamGamesPlayed               *uint32                              `protobuf:"varint,66,opt,name=competitive_team_games_played" json:"competitive_team_games_played,omitempty"`
	CurrAllHeroChallengeId                   *uint32                              `protobuf:"varint,67,opt,name=curr_all_hero_challenge_id" json:"curr_all_hero_challenge_id,omitempty"`
	PlayTimePoints                           *uint32                              `protobuf:"varint,68,opt,name=play_time_points" json:"play_time_points,omitempty"`
	AccountFlags                             *uint32                              `protobuf:"varint,69,opt,name=account_flags" json:"account_flags,omitempty"`
	PlayTimeLevel                            *uint32                              `protobuf:"varint,70,opt,name=play_time_level" json:"play_time_level,omitempty"`
	XXX_unrecognized                         []byte                               `json:"-"`
}

func (m *CSODOTAGameAccountClient) Reset()                    { *m = CSODOTAGameAccountClient{} }
func (m *CSODOTAGameAccountClient) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAGameAccountClient) ProtoMessage()               {}
func (*CSODOTAGameAccountClient) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_CSODOTAGameAccountClient_PartnerAccountType gcsdk_gcmessages.PartnerAccountType = gcsdk_gcmessages.PartnerAccountType_PARTNER_NONE

func (m *CSODOTAGameAccountClient) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetXp() uint32 {
	if m != nil && m.Xp != nil {
		return *m.Xp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetInitialSkill() uint32 {
	if m != nil && m.InitialSkill != nil {
		return *m.InitialSkill
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverCount() uint32 {
	if m != nil && m.LeaverCount != nil {
		return *m.LeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSecondaryLeaverCount() uint32 {
	if m != nil && m.SecondaryLeaverCount != nil {
		return *m.SecondaryLeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityUntilDate() uint32 {
	if m != nil && m.LowPriorityUntilDate != nil {
		return *m.LowPriorityUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventTextChatUntilDate() uint32 {
	if m != nil && m.PreventTextChatUntilDate != nil {
		return *m.PreventTextChatUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventVoiceUntilDate() uint32 {
	if m != nil && m.PreventVoiceUntilDate != nil {
		return *m.PreventVoiceUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastAbandonedGameDate() uint32 {
	if m != nil && m.LastAbandonedGameDate != nil {
		return *m.LastAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastSecondaryAbandonedGameDate() uint32 {
	if m != nil && m.LastSecondaryAbandonedGameDate != nil {
		return *m.LastSecondaryAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverPenaltyCount() uint32 {
	if m != nil && m.LeaverPenaltyCount != nil {
		return *m.LeaverPenaltyCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompletedGameStreak() uint32 {
	if m != nil && m.CompletedGameStreak != nil {
		return *m.CompletedGameStreak
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetTeaching() uint32 {
	if m != nil && m.Teaching != nil {
		return *m.Teaching
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeadership() uint32 {
	if m != nil && m.Leadership != nil {
		return *m.Leadership
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetFriendly() uint32 {
	if m != nil && m.Friendly != nil {
		return *m.Friendly
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetForgiving() uint32 {
	if m != nil && m.Forgiving != nil {
		return *m.Forgiving
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledUntilDate() uint32 {
	if m != nil && m.AccountDisabledUntilDate != nil {
		return *m.AccountDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledCount() uint32 {
	if m != nil && m.AccountDisabledCount != nil {
		return *m.AccountDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetShowcaseHeroId() uint32 {
	if m != nil && m.ShowcaseHeroId != nil {
		return *m.ShowcaseHeroId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledCount() uint32 {
	if m != nil && m.MatchDisabledCount != nil {
		return *m.MatchDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountType() gcsdk_gcmessages.PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CSODOTAGameAccountClient_PartnerAccountType
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountState() uint32 {
	if m != nil && m.PartnerAccountState != nil {
		return *m.PartnerAccountState
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetShutdownlawterminatetimestamp() uint32 {
	if m != nil && m.Shutdownlawterminatetimestamp != nil {
		return *m.Shutdownlawterminatetimestamp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveRank() uint32 {
	if m != nil && m.CompetitiveRank != nil {
		return *m.CompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCalibrationGamesRemaining() uint32 {
	if m != nil && m.CalibrationGamesRemaining != nil {
		return *m.CalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveRank() uint32 {
	if m != nil && m.SoloCompetitiveRank != nil {
		return *m.SoloCompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCalibrationGamesRemaining() uint32 {
	if m != nil && m.SoloCalibrationGamesRemaining != nil {
		return *m.SoloCalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitive_1V1Rank() uint32 {
	if m != nil && m.Competitive_1V1Rank != nil {
		return *m.Competitive_1V1Rank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitive_1V1CalibrationGamesRemaining() uint32 {
	if m != nil && m.Competitive_1V1CalibrationGamesRemaining != nil {
		return *m.Competitive_1V1CalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecruitmentLevel() uint32 {
	if m != nil && m.RecruitmentLevel != nil {
		return *m.RecruitmentLevel
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetHasNewNotifications() bool {
	if m != nil && m.HasNewNotifications != nil {
		return *m.HasNewNotifications
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetIsLeagueAdmin() bool {
	if m != nil && m.IsLeagueAdmin != nil {
		return *m.IsLeagueAdmin
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetCasualGamesPlayed() uint32 {
	if m != nil && m.CasualGamesPlayed != nil {
		return *m.CasualGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveGamesPlayed() uint32 {
	if m != nil && m.SoloCompetitiveGamesPlayed != nil {
		return *m.SoloCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartyCompetitiveGamesPlayed() uint32 {
	if m != nil && m.PartyCompetitiveGamesPlayed != nil {
		return *m.PartyCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCasual_1V1GamesPlayed() uint32 {
	if m != nil && m.Casual_1V1GamesPlayed != nil {
		return *m.Casual_1V1GamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveTeamGamesPlayed() uint32 {
	if m != nil && m.CompetitiveTeamGamesPlayed != nil {
		return *m.CompetitiveTeamGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCurrAllHeroChallengeId() uint32 {
	if m != nil && m.CurrAllHeroChallengeId != nil {
		return *m.CurrAllHeroChallengeId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayTimePoints() uint32 {
	if m != nil && m.PlayTimePoints != nil {
		return *m.PlayTimePoints
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayTimeLevel() uint32 {
	if m != nil && m.PlayTimeLevel != nil {
		return *m.PlayTimeLevel
	}
	return 0
}

type CSODOTAPartyMember struct {
	PartnerType             *gcsdk_gcmessages.PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,enum=PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool                                `protobuf:"varint,2,opt,name=is_coach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32                             `protobuf:"varint,4,rep,packed,name=region_ping_codes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32                             `protobuf:"varint,5,rep,packed,name=region_ping_times" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32                              `protobuf:"varint,6,opt,name=region_ping_failed_bitmask" json:"region_ping_failed_bitmask,omitempty"`
	XXX_unrecognized        []byte                               `json:"-"`
}

func (m *CSODOTAPartyMember) Reset()                    { *m = CSODOTAPartyMember{} }
func (m *CSODOTAPartyMember) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAPartyMember) ProtoMessage()               {}
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

const Default_CSODOTAPartyMember_PartnerType gcsdk_gcmessages.PartnerAccountType = gcsdk_gcmessages.PartnerAccountType_PARTNER_NONE

func (m *CSODOTAPartyMember) GetPartnerType() gcsdk_gcmessages.PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (m *CSODOTAPartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

func (m *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if m != nil {
		return m.RegionPingCodes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if m != nil {
		return m.RegionPingTimes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if m != nil && m.RegionPingFailedBitmask != nil {
		return *m.RegionPingFailedBitmask
	}
	return 0
}

type CSODOTAParty struct {
	PartyId                         *uint64               `protobuf:"varint,1,opt,name=party_id" json:"party_id,omitempty"`
	LeaderId                        *uint64               `protobuf:"fixed64,2,opt,name=leader_id" json:"leader_id,omitempty"`
	MemberIds                       []uint64              `protobuf:"fixed64,3,rep,name=member_ids" json:"member_ids,omitempty"`
	GameModes                       *uint32               `protobuf:"varint,4,opt,name=game_modes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State   `protobuf:"varint,6,opt,name=state,enum=CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32               `protobuf:"varint,7,opt,name=effective_started_matchmaking_time" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32               `protobuf:"varint,32,opt,name=raw_started_matchmaking_time" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32               `protobuf:"varint,33,opt,name=attempt_start_time" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32               `protobuf:"varint,34,opt,name=attempt_num" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32               `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32               `protobuf:"varint,19,opt,name=low_priority_account_id" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType            `protobuf:"varint,21,opt,name=match_type,enum=MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty    `protobuf:"varint,22,opt,name=bot_difficulty,enum=DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32               `protobuf:"varint,23,opt,name=team_id" json:"team_id,omitempty"`
	MatchDisabledUntilDate          *uint32               `protobuf:"varint,24,opt,name=match_disabled_until_date" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32               `protobuf:"varint,25,opt,name=match_disabled_account_id" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32               `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32               `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	MapPreference                   *uint32               `protobuf:"varint,38,opt,name=map_preference" json:"map_preference,omitempty"`
	Members                         []*CSODOTAPartyMember `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	OpenGuildId                     *uint32               `protobuf:"varint,30,opt,name=open_guild_id" json:"open_guild_id,omitempty"`
	CommonGuilds                    []uint32              `protobuf:"varint,31,rep,name=common_guilds" json:"common_guilds,omitempty"`
	LowPriorityGamesRemaining       *uint32               `protobuf:"varint,35,opt,name=low_priority_games_remaining" json:"low_priority_games_remaining,omitempty"`
	MinLevel                        *uint32               `protobuf:"varint,36,opt,name=min_level" json:"min_level,omitempty"`
	MaxLevel                        *uint32               `protobuf:"varint,37,opt,name=max_level" json:"max_level,omitempty"`
	ActiveIngameEvents              []EEvent              `protobuf:"varint,39,rep,name=active_ingame_events,enum=EEvent" json:"active_ingame_events,omitempty"`
	OpenForJoinRequests             *bool                 `protobuf:"varint,40,opt,name=open_for_join_requests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite `protobuf:"bytes,41,rep,name=sent_invites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite `protobuf:"bytes,42,rep,name=recv_invites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32               `protobuf:"varint,43,opt,name=account_flags" json:"account_flags,omitempty"`
	XXX_unrecognized                []byte                `json:"-"`
}

func (m *CSODOTAParty) Reset()                    { *m = CSODOTAParty{} }
func (m *CSODOTAParty) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAParty) ProtoMessage()               {}
func (*CSODOTAParty) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

const Default_CSODOTAParty_State CSODOTAParty_State = CSODOTAParty_UI
const Default_CSODOTAParty_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTAParty_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE

func (m *CSODOTAParty) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTAParty) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTAParty) GetMemberIds() []uint64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *CSODOTAParty) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return 0
}

func (m *CSODOTAParty) GetState() CSODOTAParty_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTAParty_State
}

func (m *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if m != nil && m.EffectiveStartedMatchmakingTime != nil {
		return *m.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if m != nil && m.RawStartedMatchmakingTime != nil {
		return *m.RawStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptStartTime() uint32 {
	if m != nil && m.AttemptStartTime != nil {
		return *m.AttemptStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptNum() uint32 {
	if m != nil && m.AttemptNum != nil {
		return *m.AttemptNum
	}
	return 0
}

func (m *CSODOTAParty) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if m != nil && m.LowPriorityAccountId != nil {
		return *m.LowPriorityAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (m *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (m *CSODOTAParty) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if m != nil && m.MatchDisabledAccountId != nil {
		return *m.MatchDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if m != nil && m.MatchmakingMaxRangeMinutes != nil {
		return *m.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (m *CSODOTAParty) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return 0
}

func (m *CSODOTAParty) GetMapPreference() uint32 {
	if m != nil && m.MapPreference != nil {
		return *m.MapPreference
	}
	return 0
}

func (m *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAParty) GetOpenGuildId() uint32 {
	if m != nil && m.OpenGuildId != nil {
		return *m.OpenGuildId
	}
	return 0
}

func (m *CSODOTAParty) GetCommonGuilds() []uint32 {
	if m != nil {
		return m.CommonGuilds
	}
	return nil
}

func (m *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAParty) GetMinLevel() uint32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *CSODOTAParty) GetMaxLevel() uint32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

func (m *CSODOTAParty) GetActiveIngameEvents() []EEvent {
	if m != nil {
		return m.ActiveIngameEvents
	}
	return nil
}

func (m *CSODOTAParty) GetOpenForJoinRequests() bool {
	if m != nil && m.OpenForJoinRequests != nil {
		return *m.OpenForJoinRequests
	}
	return false
}

func (m *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.SentInvites
	}
	return nil
}

func (m *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.RecvInvites
	}
	return nil
}

func (m *CSODOTAParty) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

type CSODOTAPartyInvite struct {
	GroupId           *uint64                           `protobuf:"varint,1,opt,name=group_id" json:"group_id,omitempty"`
	SenderId          *uint64                           `protobuf:"fixed64,2,opt,name=sender_id" json:"sender_id,omitempty"`
	SenderName        *string                           `protobuf:"bytes,3,opt,name=sender_name" json:"sender_name,omitempty"`
	Members           []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId            *uint32                           `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	LowPriorityStatus *bool                             `protobuf:"varint,6,opt,name=low_priority_status" json:"low_priority_status,omitempty"`
	AsCoach           *bool                             `protobuf:"varint,7,opt,name=as_coach" json:"as_coach,omitempty"`
	InviteGid         *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid" json:"invite_gid,omitempty"`
	Engine            *uint32                           `protobuf:"varint,9,opt,name=engine" json:"engine,omitempty"`
	XXX_unrecognized  []byte                            `json:"-"`
}

func (m *CSODOTAPartyInvite) Reset()                    { *m = CSODOTAPartyInvite{} }
func (m *CSODOTAPartyInvite) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite) ProtoMessage()               {}
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CSODOTAPartyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAPartyInvite) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if m != nil && m.LowPriorityStatus != nil {
		return *m.LowPriorityStatus
	}
	return false
}

func (m *CSODOTAPartyInvite) GetAsCoach() bool {
	if m != nil && m.AsCoach != nil {
		return *m.AsCoach
	}
	return false
}

func (m *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetEngine() uint32 {
	if m != nil && m.Engine != nil {
		return *m.Engine
	}
	return 0
}

type CSODOTAPartyInvite_PartyMember struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,2,opt,name=steam_id" json:"steam_id,omitempty"`
	IsCoach          *bool   `protobuf:"varint,4,opt,name=is_coach" json:"is_coach,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAPartyInvite_PartyMember) Reset()         { *m = CSODOTAPartyInvite_PartyMember{} }
func (m *CSODOTAPartyInvite_PartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite_PartyMember) ProtoMessage()    {}
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

func (m *CSODOTAPartyInvite_PartyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

type CSODOTALobbyInvite struct {
	GroupId             *uint64                           `protobuf:"varint,1,opt,name=group_id" json:"group_id,omitempty"`
	SenderId            *uint64                           `protobuf:"fixed64,2,opt,name=sender_id" json:"sender_id,omitempty"`
	SenderName          *string                           `protobuf:"bytes,3,opt,name=sender_name" json:"sender_name,omitempty"`
	Members             []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId        *uint64                           `protobuf:"varint,5,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	InviteGid           *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid" json:"invite_gid,omitempty"`
	CustomGameCrc       *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp" json:"custom_game_timestamp,omitempty"`
	XXX_unrecognized    []byte                            `json:"-"`
}

func (m *CSODOTALobbyInvite) Reset()                    { *m = CSODOTALobbyInvite{} }
func (m *CSODOTALobbyInvite) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite) ProtoMessage()               {}
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CSODOTALobbyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyInvite_LobbyMember struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,2,opt,name=steam_id" json:"steam_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTALobbyInvite_LobbyMember) Reset()         { *m = CSODOTALobbyInvite_LobbyMember{} }
func (m *CSODOTALobbyInvite_LobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{4, 0}
}

func (m *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CDOTAClientHardwareSpecs struct {
	LogicalProcessors   *uint32 `protobuf:"varint,1,opt,name=logical_processors" json:"logical_processors,omitempty"`
	CpuCyclesPerSecond  *uint64 `protobuf:"fixed64,2,opt,name=cpu_cycles_per_second" json:"cpu_cycles_per_second,omitempty"`
	TotalPhysicalMemory *uint64 `protobuf:"fixed64,3,opt,name=total_physical_memory" json:"total_physical_memory,omitempty"`
	Is_64BitOs          *bool   `protobuf:"varint,4,opt,name=is_64_bit_os" json:"is_64_bit_os,omitempty"`
	UploadMeasurement   *uint64 `protobuf:"varint,5,opt,name=upload_measurement" json:"upload_measurement,omitempty"`
	PreferNotHost       *bool   `protobuf:"varint,6,opt,name=prefer_not_host" json:"prefer_not_host,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CDOTAClientHardwareSpecs) Reset()                    { *m = CDOTAClientHardwareSpecs{} }
func (m *CDOTAClientHardwareSpecs) String() string            { return proto.CompactTextString(m) }
func (*CDOTAClientHardwareSpecs) ProtoMessage()               {}
func (*CDOTAClientHardwareSpecs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CDOTAClientHardwareSpecs) GetLogicalProcessors() uint32 {
	if m != nil && m.LogicalProcessors != nil {
		return *m.LogicalProcessors
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetCpuCyclesPerSecond() uint64 {
	if m != nil && m.CpuCyclesPerSecond != nil {
		return *m.CpuCyclesPerSecond
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetTotalPhysicalMemory() uint64 {
	if m != nil && m.TotalPhysicalMemory != nil {
		return *m.TotalPhysicalMemory
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetIs_64BitOs() bool {
	if m != nil && m.Is_64BitOs != nil {
		return *m.Is_64BitOs
	}
	return false
}

func (m *CDOTAClientHardwareSpecs) GetUploadMeasurement() uint64 {
	if m != nil && m.UploadMeasurement != nil {
		return *m.UploadMeasurement
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetPreferNotHost() bool {
	if m != nil && m.PreferNotHost != nil {
		return *m.PreferNotHost
	}
	return false
}

type CDOTASaveGame struct {
	MatchId          *uint64                       `protobuf:"varint,5,opt,name=match_id" json:"match_id,omitempty"`
	SaveTime         *uint32                       `protobuf:"varint,2,opt,name=save_time" json:"save_time,omitempty"`
	Players          []*CDOTASaveGame_Player       `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	SaveInstances    []*CDOTASaveGame_SaveInstance `protobuf:"bytes,4,rep,name=save_instances" json:"save_instances,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CDOTASaveGame) Reset()                    { *m = CDOTASaveGame{} }
func (m *CDOTASaveGame) String() string            { return proto.CompactTextString(m) }
func (*CDOTASaveGame) ProtoMessage()               {}
func (*CDOTASaveGame) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CDOTASaveGame) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CDOTASaveGame) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

func (m *CDOTASaveGame) GetPlayers() []*CDOTASaveGame_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CDOTASaveGame) GetSaveInstances() []*CDOTASaveGame_SaveInstance {
	if m != nil {
		return m.SaveInstances
	}
	return nil
}

type CDOTASaveGame_Player struct {
	Team             *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name             *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Hero             *string       `protobuf:"bytes,3,opt,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CDOTASaveGame_Player) Reset()                    { *m = CDOTASaveGame_Player{} }
func (m *CDOTASaveGame_Player) String() string            { return proto.CompactTextString(m) }
func (*CDOTASaveGame_Player) ProtoMessage()               {}
func (*CDOTASaveGame_Player) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6, 0} }

const Default_CDOTASaveGame_Player_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CDOTASaveGame_Player) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTASaveGame_Player_Team
}

func (m *CDOTASaveGame_Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTASaveGame_Player) GetHero() string {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return ""
}

type CDOTASaveGame_SaveInstance struct {
	GameTime         *uint32                                       `protobuf:"varint,2,opt,name=game_time" json:"game_time,omitempty"`
	Team1Score       *uint32                                       `protobuf:"varint,3,opt,name=team1_score" json:"team1_score,omitempty"`
	Team2Score       *uint32                                       `protobuf:"varint,4,opt,name=team2_score" json:"team2_score,omitempty"`
	PlayerPositions  []*CDOTASaveGame_SaveInstance_PlayerPositions `protobuf:"bytes,5,rep,name=player_positions" json:"player_positions,omitempty"`
	SaveId           *uint32                                       `protobuf:"varint,6,opt,name=save_id" json:"save_id,omitempty"`
	SaveTime         *uint32                                       `protobuf:"varint,7,opt,name=save_time" json:"save_time,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance) Reset()                    { *m = CDOTASaveGame_SaveInstance{} }
func (m *CDOTASaveGame_SaveInstance) String() string            { return proto.CompactTextString(m) }
func (*CDOTASaveGame_SaveInstance) ProtoMessage()               {}
func (*CDOTASaveGame_SaveInstance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6, 1} }

func (m *CDOTASaveGame_SaveInstance) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam1Score() uint32 {
	if m != nil && m.Team1Score != nil {
		return *m.Team1Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam2Score() uint32 {
	if m != nil && m.Team2Score != nil {
		return *m.Team2Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetPlayerPositions() []*CDOTASaveGame_SaveInstance_PlayerPositions {
	if m != nil {
		return m.PlayerPositions
	}
	return nil
}

func (m *CDOTASaveGame_SaveInstance) GetSaveId() uint32 {
	if m != nil && m.SaveId != nil {
		return *m.SaveId
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

type CDOTASaveGame_SaveInstance_PlayerPositions struct {
	X                *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) Reset() {
	*m = CDOTASaveGame_SaveInstance_PlayerPositions{}
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTASaveGame_SaveInstance_PlayerPositions) ProtoMessage() {}
func (*CDOTASaveGame_SaveInstance_PlayerPositions) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6, 1, 0}
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

type CMsgLeaverState struct {
	LobbyState          *uint32         `protobuf:"varint,1,opt,name=lobby_state" json:"lobby_state,omitempty"`
	GameState           *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected      *bool           `protobuf:"varint,3,opt,name=leaver_detected" json:"leaver_detected,omitempty"`
	FirstBloodHappened  *bool           `protobuf:"varint,4,opt,name=first_blood_happened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults *bool           `protobuf:"varint,5,opt,name=discard_match_results" json:"discard_match_results,omitempty"`
	MassDisconnect      *bool           `protobuf:"varint,6,opt,name=mass_disconnect" json:"mass_disconnect,omitempty"`
	XXX_unrecognized    []byte          `json:"-"`
}

func (m *CMsgLeaverState) Reset()                    { *m = CMsgLeaverState{} }
func (m *CMsgLeaverState) String() string            { return proto.CompactTextString(m) }
func (*CMsgLeaverState) ProtoMessage()               {}
func (*CMsgLeaverState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

const Default_CMsgLeaverState_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT

func (m *CMsgLeaverState) GetLobbyState() uint32 {
	if m != nil && m.LobbyState != nil {
		return *m.LobbyState
	}
	return 0
}

func (m *CMsgLeaverState) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (m *CMsgLeaverState) GetLeaverDetected() bool {
	if m != nil && m.LeaverDetected != nil {
		return *m.LeaverDetected
	}
	return false
}

func (m *CMsgLeaverState) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CMsgLeaverState) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CMsgLeaverState) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

type CDOTALobbyMember struct {
	Id                   *uint64                                     `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId               *uint32                                     `protobuf:"varint,2,opt,name=hero_id" json:"hero_id,omitempty"`
	Team                 *DOTA_GC_TEAM                               `protobuf:"varint,3,opt,name=team,enum=DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                 *string                                     `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                 *uint32                                     `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId              *uint64                                     `protobuf:"varint,12,opt,name=party_id" json:"party_id,omitempty"`
	MetaLevel            *uint32                                     `protobuf:"varint,13,opt,name=meta_level" json:"meta_level,omitempty"`
	MetaXp               *uint32                                     `protobuf:"varint,14,opt,name=meta_xp" json:"meta_xp,omitempty"`
	MetaXpAwarded        *uint32                                     `protobuf:"varint,15,opt,name=meta_xp_awarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus         *DOTALeaverStatusT                          `protobuf:"varint,16,opt,name=leaver_status,enum=DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions        *uint32                                     `protobuf:"varint,28,opt,name=leaver_actions" json:"leaver_actions,omitempty"`
	Channel              *uint32                                     `protobuf:"varint,17,opt,name=channel" json:"channel,omitempty"`
	PrizeDefIndex        *uint32                                     `protobuf:"varint,18,opt,name=prize_def_index" json:"prize_def_index,omitempty"`
	DisabledHeroId       []uint32                                    `protobuf:"varint,20,rep,name=disabled_hero_id" json:"disabled_hero_id,omitempty"`
	PartnerAccountType   *gcsdk_gcmessages.PartnerAccountType        `protobuf:"varint,21,opt,name=partner_account_type,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId        []uint32                                    `protobuf:"varint,22,rep,name=enabled_hero_id" json:"enabled_hero_id,omitempty"`
	CoachTeam            *DOTA_GC_TEAM                               `protobuf:"varint,23,opt,name=coach_team,enum=DOTA_GC_TEAM,def=0" json:"coach_team,omitempty"`
	NexonPcBangNo        *uint32                                     `protobuf:"varint,24,opt,name=nexon_pc_bang_no" json:"nexon_pc_bang_no,omitempty"`
	NexonPcBangName      *string                                     `protobuf:"bytes,25,opt,name=nexon_pc_bang_name" json:"nexon_pc_bang_name,omitempty"`
	XpBonuses            []*CDOTALobbyMember_CDOTALobbyMemberXPBonus `protobuf:"bytes,27,rep,name=xp_bonuses" json:"xp_bonuses,omitempty"`
	RankChange           *int32                                      `protobuf:"zigzag32,29,opt,name=rank_change" json:"rank_change,omitempty"`
	Cameraman            *bool                                       `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds []uint32                                    `protobuf:"varint,31,rep,name=custom_game_product_ids" json:"custom_game_product_ids,omitempty"`
	XXX_unrecognized     []byte                                      `json:"-"`
}

func (m *CDOTALobbyMember) Reset()                    { *m = CDOTALobbyMember{} }
func (m *CDOTALobbyMember) String() string            { return proto.CompactTextString(m) }
func (*CDOTALobbyMember) ProtoMessage()               {}
func (*CDOTALobbyMember) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

const Default_CDOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CDOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CDOTALobbyMember_PartnerAccountType gcsdk_gcmessages.PartnerAccountType = gcsdk_gcmessages.PartnerAccountType_PARTNER_NONE
const Default_CDOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CDOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CDOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTALobbyMember_Team
}

func (m *CDOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CDOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CDOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CDOTALobbyMember_LeaverStatus
}

func (m *CDOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CDOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CDOTALobbyMember) GetPrizeDefIndex() uint32 {
	if m != nil && m.PrizeDefIndex != nil {
		return *m.PrizeDefIndex
	}
	return 0
}

func (m *CDOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetPartnerAccountType() gcsdk_gcmessages.PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CDOTALobbyMember_PartnerAccountType
}

func (m *CDOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CDOTALobbyMember_CoachTeam
}

func (m *CDOTALobbyMember) GetNexonPcBangNo() uint32 {
	if m != nil && m.NexonPcBangNo != nil {
		return *m.NexonPcBangNo
	}
	return 0
}

func (m *CDOTALobbyMember) GetNexonPcBangName() string {
	if m != nil && m.NexonPcBangName != nil {
		return *m.NexonPcBangName
	}
	return ""
}

func (m *CDOTALobbyMember) GetXpBonuses() []*CDOTALobbyMember_CDOTALobbyMemberXPBonus {
	if m != nil {
		return m.XpBonuses
	}
	return nil
}

func (m *CDOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CDOTALobbyMember) GetCameraman() bool {
	if m != nil && m.Cameraman != nil {
		return *m.Cameraman
	}
	return false
}

func (m *CDOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if m != nil {
		return m.CustomGameProductIds
	}
	return nil
}

type CDOTALobbyMember_CDOTALobbyMemberXPBonus struct {
	Type             *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	XpBonus          *float32 `protobuf:"fixed32,2,opt,name=xp_bonus" json:"xp_bonus,omitempty"`
	SourceKey        *uint64  `protobuf:"varint,3,opt,name=source_key" json:"source_key,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) Reset() {
	*m = CDOTALobbyMember_CDOTALobbyMemberXPBonus{}
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoMessage()    {}
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{8, 0}
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetXpBonus() float32 {
	if m != nil && m.XpBonus != nil {
		return *m.XpBonus
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetSourceKey() uint64 {
	if m != nil && m.SourceKey != nil {
		return *m.SourceKey
	}
	return 0
}

type CLobbyTeamDetails struct {
	TeamName         *string `protobuf:"bytes,1,opt,name=team_name" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,3,opt,name=team_tag" json:"team_tag,omitempty"`
	TeamId           *uint32 `protobuf:"varint,4,opt,name=team_id" json:"team_id,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,5,opt,name=team_logo" json:"team_logo,omitempty"`
	TeamBaseLogo     *uint64 `protobuf:"varint,6,opt,name=team_base_logo" json:"team_base_logo,omitempty"`
	TeamBannerLogo   *uint64 `protobuf:"varint,7,opt,name=team_banner_logo" json:"team_banner_logo,omitempty"`
	TeamComplete     *bool   `protobuf:"varint,8,opt,name=team_complete" json:"team_complete,omitempty"`
	GuildName        *string `protobuf:"bytes,9,opt,name=guild_name" json:"guild_name,omitempty"`
	GuildTag         *string `protobuf:"bytes,10,opt,name=guild_tag" json:"guild_tag,omitempty"`
	GuildId          *uint32 `protobuf:"varint,11,opt,name=guild_id" json:"guild_id,omitempty"`
	GuildLogo        *uint64 `protobuf:"varint,12,opt,name=guild_logo" json:"guild_logo,omitempty"`
	GuildBaseLogo    *uint64 `protobuf:"varint,13,opt,name=guild_base_logo" json:"guild_base_logo,omitempty"`
	GuildBannerLogo  *uint64 `protobuf:"varint,14,opt,name=guild_banner_logo" json:"guild_banner_logo,omitempty"`
	Rank             *uint32 `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange       *int32  `protobuf:"zigzag32,16,opt,name=rank_change" json:"rank_change,omitempty"`
	IsHomeTeam       *bool   `protobuf:"varint,17,opt,name=is_home_team" json:"is_home_team,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()                    { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string            { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()               {}
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetGuildName() string {
	if m != nil && m.GuildName != nil {
		return *m.GuildName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBaseLogo() uint64 {
	if m != nil && m.GuildBaseLogo != nil {
		return *m.GuildBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBannerLogo() uint64 {
	if m != nil && m.GuildBannerLogo != nil {
		return *m.GuildBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if m != nil && m.IsHomeTeam != nil {
		return *m.IsHomeTeam
	}
	return false
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex     *uint32 `protobuf:"varint,2,opt,name=item_def_index" json:"item_def_index,omitempty"`
	IsSupplyCrate    *bool   `protobuf:"varint,3,opt,name=is_supply_crate" json:"is_supply_crate,omitempty"`
	IsTimedDrop      *bool   `protobuf:"varint,4,opt,name=is_timed_drop" json:"is_timed_drop,omitempty"`
	AccountId        *uint32 `protobuf:"varint,5,opt,name=account_id" json:"account_id,omitempty"`
	Origin           *uint32 `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()                    { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string            { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()               {}
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId        *uint32 `protobuf:"varint,1,opt,name=channel_id" json:"channel_id,omitempty"`
	CountryCode      *string `protobuf:"bytes,2,opt,name=country_code" json:"country_code,omitempty"`
	Description      *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode     *string `protobuf:"bytes,4,opt,name=language_code" json:"language_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()                    { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string            { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()               {}
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CSODOTALobby struct {
	LobbyId                    *uint64                              `protobuf:"varint,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	Members                    []*CDOTALobbyMember                  `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers                []*CDOTALobbyMember                  `protobuf:"bytes,7,rep,name=left_members" json:"left_members,omitempty"`
	LeaderId                   *uint64                              `protobuf:"fixed64,11,opt,name=leader_id" json:"leader_id,omitempty"`
	ServerId                   *uint64                              `protobuf:"fixed64,6,opt,name=server_id,def=0" json:"server_id,omitempty"`
	GameMode                   *uint32                              `protobuf:"varint,3,opt,name=game_mode" json:"game_mode,omitempty"`
	PendingInvites             []uint64                             `protobuf:"fixed64,10,rep,name=pending_invites" json:"pending_invites,omitempty"`
	State                      *CSODOTALobby_State                  `protobuf:"varint,4,opt,name=state,enum=CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                    *string                              `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                  *CSODOTALobby_LobbyType              `protobuf:"varint,12,opt,name=lobby_type,enum=CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                *bool                                `protobuf:"varint,13,opt,name=allow_cheats" json:"allow_cheats,omitempty"`
	FillWithBots               *bool                                `protobuf:"varint,14,opt,name=fill_with_bots" json:"fill_with_bots,omitempty"`
	IntroMode                  *bool                                `protobuf:"varint,15,opt,name=intro_mode" json:"intro_mode,omitempty"`
	GameName                   *string                              `protobuf:"bytes,16,opt,name=game_name" json:"game_name,omitempty"`
	TeamDetails                []*CLobbyTeamDetails                 `protobuf:"bytes,17,rep,name=team_details" json:"team_details,omitempty"`
	TutorialLesson             *uint32                              `protobuf:"varint,18,opt,name=tutorial_lesson" json:"tutorial_lesson,omitempty"`
	TournamentId               *uint32                              `protobuf:"varint,19,opt,name=tournament_id" json:"tournament_id,omitempty"`
	TournamentGameId           *uint32                              `protobuf:"varint,20,opt,name=tournament_game_id" json:"tournament_game_id,omitempty"`
	ServerRegion               *uint32                              `protobuf:"varint,21,opt,name=server_region,def=0" json:"server_region,omitempty"`
	GameState                  *DOTA_GameState                      `protobuf:"varint,22,opt,name=game_state,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators              *uint32                              `protobuf:"varint,23,opt,name=num_spectators" json:"num_spectators,omitempty"`
	Matchgroup                 *uint32                              `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                     *DOTA_CM_PICK                        `protobuf:"varint,28,opt,name=cm_pick,enum=DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                    *uint64                              `protobuf:"varint,30,opt,name=match_id" json:"match_id,omitempty"`
	AllowSpectating            *bool                                `protobuf:"varint,31,opt,name=allow_spectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficulty              *DOTABotDifficulty                   `protobuf:"varint,36,opt,name=bot_difficulty,enum=DOTABotDifficulty,def=3" json:"bot_difficulty,omitempty"`
	GameVersion                *DOTAGameVersion                     `protobuf:"varint,37,opt,name=game_version,enum=DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails         []*CLobbyTimedRewardDetails          `protobuf:"bytes,38,rep,name=timed_reward_details" json:"timed_reward_details,omitempty"`
	PassKey                    *string                              `protobuf:"bytes,39,opt,name=pass_key" json:"pass_key,omitempty"`
	BotSlotDifficulty          []DOTABotDifficulty                  `protobuf:"varint,41,rep,name=bot_slot_difficulty,enum=DOTABotDifficulty" json:"bot_slot_difficulty,omitempty"`
	Leagueid                   *uint32                              `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant        *uint32                              `protobuf:"varint,43,opt,name=penalty_level_radiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire           *uint32                              `protobuf:"varint,44,opt,name=penalty_level_dire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                 *uint32                              `protobuf:"varint,45,opt,name=load_game_id" json:"load_game_id,omitempty"`
	SeriesType                 *uint32                              `protobuf:"varint,46,opt,name=series_type" json:"series_type,omitempty"`
	RadiantSeriesWins          *uint32                              `protobuf:"varint,47,opt,name=radiant_series_wins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins             *uint32                              `protobuf:"varint,48,opt,name=dire_series_wins" json:"dire_series_wins,omitempty"`
	LootGenerated              *uint32                              `protobuf:"varint,49,opt,name=loot_generated" json:"loot_generated,omitempty"`
	LootAwarded                *uint32                              `protobuf:"varint,50,opt,name=loot_awarded" json:"loot_awarded,omitempty"`
	Allchat                    *bool                                `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                *LobbyDotaTVDelay                    `protobuf:"varint,53,opt,name=dota_tv_delay,enum=LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode             *string                              `protobuf:"bytes,54,opt,name=custom_game_mode" json:"custom_game_mode,omitempty"`
	CustomMapName              *string                              `protobuf:"bytes,55,opt,name=custom_map_name" json:"custom_map_name,omitempty"`
	CustomDifficulty           *uint32                              `protobuf:"varint,56,opt,name=custom_difficulty" json:"custom_difficulty,omitempty"`
	Lan                        *bool                                `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo       []*CLobbyBroadcastChannelInfo        `protobuf:"bytes,58,rep,name=broadcast_channel_info" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid       *uint32                              `protobuf:"varint,59,opt,name=first_leaver_accountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                   *uint32                              `protobuf:"varint,60,opt,name=series_id" json:"series_id,omitempty"`
	LowPriority                *bool                                `protobuf:"varint,61,opt,name=low_priority" json:"low_priority,omitempty"`
	ExtraMessages              []*CSODOTALobby_CExtraMsg            `protobuf:"bytes,62,rep,name=extra_messages" json:"extra_messages,omitempty"`
	SaveGame                   *CDOTASaveGame                       `protobuf:"bytes,63,opt,name=save_game" json:"save_game,omitempty"`
	FirstBloodHappened         *bool                                `protobuf:"varint,65,opt,name=first_blood_happened" json:"first_blood_happened,omitempty"`
	MatchOutcome               *EMatchOutcome                       `protobuf:"varint,70,opt,name=match_outcome,enum=EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect             *bool                                `protobuf:"varint,67,opt,name=mass_disconnect" json:"mass_disconnect,omitempty"`
	CustomGameId               *uint64                              `protobuf:"varint,68,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	ActiveIngameEvents         []EEvent                             `protobuf:"varint,69,rep,name=active_ingame_events,enum=EEvent" json:"active_ingame_events,omitempty"`
	CustomMinPlayers           *uint32                              `protobuf:"varint,71,opt,name=custom_min_players" json:"custom_min_players,omitempty"`
	CustomMaxPlayers           *uint32                              `protobuf:"varint,72,opt,name=custom_max_players" json:"custom_max_players,omitempty"`
	PartnerType                *gcsdk_gcmessages.PartnerAccountType `protobuf:"varint,73,opt,name=partner_type,enum=PartnerAccountType,def=0" json:"partner_type,omitempty"`
	LanHostPingToServerRegion  *uint32                              `protobuf:"varint,74,opt,name=lan_host_ping_to_server_region" json:"lan_host_ping_to_server_region,omitempty"`
	Visibility                 *DOTALobbyVisibility                 `protobuf:"varint,75,opt,name=visibility,enum=DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc              *uint64                              `protobuf:"fixed64,76,opt,name=custom_game_crc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby *bool                                `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby" json:"custom_game_auto_created_lobby,omitempty"`
	LeagueSeriesId             *uint32                              `protobuf:"varint,78,opt,name=league_series_id" json:"league_series_id,omitempty"`
	LeagueGameId               *uint32                              `protobuf:"varint,79,opt,name=league_game_id" json:"league_game_id,omitempty"`
	CustomGameTimestamp        *uint32                              `protobuf:"fixed32,80,opt,name=custom_game_timestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches      []uint64                             `protobuf:"varint,81,rep,name=previous_series_matches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride      *uint64                              `protobuf:"varint,82,opt,name=previous_match_override" json:"previous_match_override,omitempty"`
	XXX_unrecognized           []byte                               `json:"-"`
}

func (m *CSODOTALobby) Reset()                    { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()               {}
func (*CSODOTALobby) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10
const Default_CSODOTALobby_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
const Default_CSODOTALobby_PartnerType gcsdk_gcmessages.PartnerAccountType = gcsdk_gcmessages.PartnerAccountType_PARTNER_NONE
const Default_CSODOTALobby_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.LeftMembers
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTALobby_BotDifficulty
}

func (m *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetBotSlotDifficulty() []DOTABotDifficulty {
	if m != nil {
		return m.BotSlotDifficulty
	}
	return nil
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobby) GetActiveIngameEvents() []EEvent {
	if m != nil {
		return m.ActiveIngameEvents
	}
	return nil
}

func (m *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetPartnerType() gcsdk_gcmessages.PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (m *CSODOTALobby) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (m *CSODOTALobby) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if m != nil && m.CustomGameAutoCreatedLobby != nil {
		return *m.CustomGameAutoCreatedLobby
	}
	return false
}

func (m *CSODOTALobby) GetLeagueSeriesId() uint32 {
	if m != nil && m.LeagueSeriesId != nil {
		return *m.LeagueSeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLeagueGameId() uint32 {
	if m != nil && m.LeagueGameId != nil {
		return *m.LeagueGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if m != nil {
		return m.PreviousSeriesMatches
	}
	return nil
}

func (m *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

type CSODOTALobby_CExtraMsg struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents         []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()                    { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string            { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()               {}
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 0} }

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CMsgLobbyEventPoints struct {
	EventId          *uint32                               `protobuf:"varint,1,opt,name=event_id" json:"event_id,omitempty"`
	AccountPoints    []*CMsgLobbyEventPoints_AccountPoints `protobuf:"bytes,2,rep,name=account_points" json:"account_points,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgLobbyEventPoints) Reset()                    { *m = CMsgLobbyEventPoints{} }
func (m *CMsgLobbyEventPoints) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints) ProtoMessage()               {}
func (*CMsgLobbyEventPoints) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *CMsgLobbyEventPoints) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgLobbyEventPoints) GetAccountPoints() []*CMsgLobbyEventPoints_AccountPoints {
	if m != nil {
		return m.AccountPoints
	}
	return nil
}

type CMsgLobbyEventPoints_AccountPoints struct {
	AccountId             *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	NormalPoints          *uint32 `protobuf:"varint,2,opt,name=normal_points" json:"normal_points,omitempty"`
	PremiumPoints         *uint32 `protobuf:"varint,3,opt,name=premium_points" json:"premium_points,omitempty"`
	Owned                 *bool   `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	FavoriteTeam          *uint32 `protobuf:"varint,5,opt,name=favorite_team" json:"favorite_team,omitempty"`
	FavoriteTeamLevel     *uint32 `protobuf:"varint,6,opt,name=favorite_team_level" json:"favorite_team_level,omitempty"`
	PointsHeld            *uint32 `protobuf:"varint,7,opt,name=points_held" json:"points_held,omitempty"`
	PremiumPointsHeld     *uint32 `protobuf:"varint,8,opt,name=premium_points_held" json:"premium_points_held,omitempty"`
	FavoriteTeamFoilLevel *uint32 `protobuf:"varint,9,opt,name=favorite_team_foil_level" json:"favorite_team_foil_level,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *CMsgLobbyEventPoints_AccountPoints) Reset()         { *m = CMsgLobbyEventPoints_AccountPoints{} }
func (m *CMsgLobbyEventPoints_AccountPoints) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints_AccountPoints) ProtoMessage()    {}
func (*CMsgLobbyEventPoints_AccountPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{13, 0}
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetNormalPoints() uint32 {
	if m != nil && m.NormalPoints != nil {
		return *m.NormalPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPremiumPoints() uint32 {
	if m != nil && m.PremiumPoints != nil {
		return *m.PremiumPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetOwned() bool {
	if m != nil && m.Owned != nil {
		return *m.Owned
	}
	return false
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeam() uint32 {
	if m != nil && m.FavoriteTeam != nil {
		return *m.FavoriteTeam
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamLevel() uint32 {
	if m != nil && m.FavoriteTeamLevel != nil {
		return *m.FavoriteTeamLevel
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPointsHeld() uint32 {
	if m != nil && m.PointsHeld != nil {
		return *m.PointsHeld
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPremiumPointsHeld() uint32 {
	if m != nil && m.PremiumPointsHeld != nil {
		return *m.PremiumPointsHeld
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamFoilLevel() uint32 {
	if m != nil && m.FavoriteTeamFoilLevel != nil {
		return *m.FavoriteTeamFoilLevel
	}
	return 0
}

type CMsgDOTAGenericResult struct {
	Eresult          *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGenericResult) Reset()                    { *m = CMsgDOTAGenericResult{} }
func (m *CMsgDOTAGenericResult) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGenericResult) ProtoMessage()               {}
func (*CMsgDOTAGenericResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

const Default_CMsgDOTAGenericResult_Eresult uint32 = 2

func (m *CMsgDOTAGenericResult) GetEresult() uint32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgDOTAGenericResult_Eresult
}

type CMsgDOTABroadcastNotification struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTABroadcastNotification) Reset()                    { *m = CMsgDOTABroadcastNotification{} }
func (m *CMsgDOTABroadcastNotification) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTABroadcastNotification) ProtoMessage()               {}
func (*CMsgDOTABroadcastNotification) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *CMsgDOTABroadcastNotification) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgDOTAPCBangTimedReward struct {
	Persona          *string `protobuf:"bytes,1,opt,name=persona" json:"persona,omitempty"`
	Itemdef          *uint32 `protobuf:"varint,2,opt,name=itemdef" json:"itemdef,omitempty"`
	Pcbangname       *string `protobuf:"bytes,3,opt,name=pcbangname" json:"pcbangname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPCBangTimedReward) Reset()                    { *m = CMsgDOTAPCBangTimedReward{} }
func (m *CMsgDOTAPCBangTimedReward) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPCBangTimedReward) ProtoMessage()               {}
func (*CMsgDOTAPCBangTimedReward) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *CMsgDOTAPCBangTimedReward) GetPersona() string {
	if m != nil && m.Persona != nil {
		return *m.Persona
	}
	return ""
}

func (m *CMsgDOTAPCBangTimedReward) GetItemdef() uint32 {
	if m != nil && m.Itemdef != nil {
		return *m.Itemdef
	}
	return 0
}

func (m *CMsgDOTAPCBangTimedReward) GetPcbangname() string {
	if m != nil && m.Pcbangname != nil {
		return *m.Pcbangname
	}
	return ""
}

type CAttribute_String struct {
	Value            *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CAttribute_String) Reset()                    { *m = CAttribute_String{} }
func (m *CAttribute_String) String() string            { return proto.CompactTextString(m) }
func (*CAttribute_String) ProtoMessage()               {}
func (*CAttribute_String) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *CAttribute_String) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CAttribute_ItemDynamicRecipeComponent struct {
	ItemDef          *uint32 `protobuf:"varint,1,opt,name=item_def" json:"item_def,omitempty"`
	ItemQuality      *uint32 `protobuf:"varint,2,opt,name=item_quality" json:"item_quality,omitempty"`
	ItemFlags        *uint32 `protobuf:"varint,3,opt,name=item_flags" json:"item_flags,omitempty"`
	AttributesString *string `protobuf:"bytes,4,opt,name=attributes_string" json:"attributes_string,omitempty"`
	ItemCount        *uint32 `protobuf:"varint,5,opt,name=item_count" json:"item_count,omitempty"`
	ItemsFulfilled   *uint32 `protobuf:"varint,6,opt,name=items_fulfilled" json:"items_fulfilled,omitempty"`
	ItemRarity       *uint32 `protobuf:"varint,7,opt,name=item_rarity" json:"item_rarity,omitempty"`
	Lootlist         *string `protobuf:"bytes,8,opt,name=lootlist" json:"lootlist,omitempty"`
	FulfilledItemId  *uint64 `protobuf:"varint,9,opt,name=fulfilled_item_id" json:"fulfilled_item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CAttribute_ItemDynamicRecipeComponent) Reset()         { *m = CAttribute_ItemDynamicRecipeComponent{} }
func (m *CAttribute_ItemDynamicRecipeComponent) String() string { return proto.CompactTextString(m) }
func (*CAttribute_ItemDynamicRecipeComponent) ProtoMessage()    {}
func (*CAttribute_ItemDynamicRecipeComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{18}
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemDef() uint32 {
	if m != nil && m.ItemDef != nil {
		return *m.ItemDef
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemQuality() uint32 {
	if m != nil && m.ItemQuality != nil {
		return *m.ItemQuality
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemFlags() uint32 {
	if m != nil && m.ItemFlags != nil {
		return *m.ItemFlags
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetAttributesString() string {
	if m != nil && m.AttributesString != nil {
		return *m.AttributesString
	}
	return ""
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemCount() uint32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemsFulfilled() uint32 {
	if m != nil && m.ItemsFulfilled != nil {
		return *m.ItemsFulfilled
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemRarity() uint32 {
	if m != nil && m.ItemRarity != nil {
		return *m.ItemRarity
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetLootlist() string {
	if m != nil && m.Lootlist != nil {
		return *m.Lootlist
	}
	return ""
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetFulfilledItemId() uint64 {
	if m != nil && m.FulfilledItemId != nil {
		return *m.FulfilledItemId
	}
	return 0
}

type CProtoItemHeroStatue struct {
	HeroId            *uint32  `protobuf:"varint,1,opt,name=hero_id" json:"hero_id,omitempty"`
	StatusEffectIndex *uint32  `protobuf:"varint,2,opt,name=status_effect_index" json:"status_effect_index,omitempty"`
	SequenceName      *string  `protobuf:"bytes,3,opt,name=sequence_name" json:"sequence_name,omitempty"`
	Cycle             *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable          []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription       *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style             []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
	TournamentDrop    *bool    `protobuf:"varint,8,opt,name=tournament_drop" json:"tournament_drop,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *CProtoItemHeroStatue) Reset()                    { *m = CProtoItemHeroStatue{} }
func (m *CProtoItemHeroStatue) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemHeroStatue) ProtoMessage()               {}
func (*CProtoItemHeroStatue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *CProtoItemHeroStatue) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetStatusEffectIndex() uint32 {
	if m != nil && m.StatusEffectIndex != nil {
		return *m.StatusEffectIndex
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetSequenceName() string {
	if m != nil && m.SequenceName != nil {
		return *m.SequenceName
	}
	return ""
}

func (m *CProtoItemHeroStatue) GetCycle() float32 {
	if m != nil && m.Cycle != nil {
		return *m.Cycle
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetWearable() []uint32 {
	if m != nil {
		return m.Wearable
	}
	return nil
}

func (m *CProtoItemHeroStatue) GetInscription() string {
	if m != nil && m.Inscription != nil {
		return *m.Inscription
	}
	return ""
}

func (m *CProtoItemHeroStatue) GetStyle() []uint32 {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *CProtoItemHeroStatue) GetTournamentDrop() bool {
	if m != nil && m.TournamentDrop != nil {
		return *m.TournamentDrop
	}
	return false
}

type CProtoItemTeamShowcase struct {
	HeroId            *uint32  `protobuf:"varint,1,opt,name=hero_id" json:"hero_id,omitempty"`
	StatusEffectIndex *uint32  `protobuf:"varint,2,opt,name=status_effect_index" json:"status_effect_index,omitempty"`
	SequenceName      *string  `protobuf:"bytes,3,opt,name=sequence_name" json:"sequence_name,omitempty"`
	Cycle             *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable          []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription       *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style             []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *CProtoItemTeamShowcase) Reset()                    { *m = CProtoItemTeamShowcase{} }
func (m *CProtoItemTeamShowcase) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemTeamShowcase) ProtoMessage()               {}
func (*CProtoItemTeamShowcase) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *CProtoItemTeamShowcase) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetStatusEffectIndex() uint32 {
	if m != nil && m.StatusEffectIndex != nil {
		return *m.StatusEffectIndex
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetSequenceName() string {
	if m != nil && m.SequenceName != nil {
		return *m.SequenceName
	}
	return ""
}

func (m *CProtoItemTeamShowcase) GetCycle() float32 {
	if m != nil && m.Cycle != nil {
		return *m.Cycle
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetWearable() []uint32 {
	if m != nil {
		return m.Wearable
	}
	return nil
}

func (m *CProtoItemTeamShowcase) GetInscription() string {
	if m != nil && m.Inscription != nil {
		return *m.Inscription
	}
	return ""
}

func (m *CProtoItemTeamShowcase) GetStyle() []uint32 {
	if m != nil {
		return m.Style
	}
	return nil
}

type CProtoItemSocket struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id" json:"item_id,omitempty"`
	AttrDefIndex     *uint32 `protobuf:"varint,2,opt,name=attr_def_index" json:"attr_def_index,omitempty"`
	RequiredType     *uint32 `protobuf:"varint,3,opt,name=required_type" json:"required_type,omitempty"`
	RequiredHero     *string `protobuf:"bytes,4,opt,name=required_hero" json:"required_hero,omitempty"`
	GemDefIndex      *uint32 `protobuf:"varint,5,opt,name=gem_def_index" json:"gem_def_index,omitempty"`
	NotTradable      *bool   `protobuf:"varint,6,opt,name=not_tradable" json:"not_tradable,omitempty"`
	RequiredItemSlot *string `protobuf:"bytes,7,opt,name=required_item_slot" json:"required_item_slot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CProtoItemSocket) Reset()                    { *m = CProtoItemSocket{} }
func (m *CProtoItemSocket) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket) ProtoMessage()               {}
func (*CProtoItemSocket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *CProtoItemSocket) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CProtoItemSocket) GetAttrDefIndex() uint32 {
	if m != nil && m.AttrDefIndex != nil {
		return *m.AttrDefIndex
	}
	return 0
}

func (m *CProtoItemSocket) GetRequiredType() uint32 {
	if m != nil && m.RequiredType != nil {
		return *m.RequiredType
	}
	return 0
}

func (m *CProtoItemSocket) GetRequiredHero() string {
	if m != nil && m.RequiredHero != nil {
		return *m.RequiredHero
	}
	return ""
}

func (m *CProtoItemSocket) GetGemDefIndex() uint32 {
	if m != nil && m.GemDefIndex != nil {
		return *m.GemDefIndex
	}
	return 0
}

func (m *CProtoItemSocket) GetNotTradable() bool {
	if m != nil && m.NotTradable != nil {
		return *m.NotTradable
	}
	return false
}

func (m *CProtoItemSocket) GetRequiredItemSlot() string {
	if m != nil && m.RequiredItemSlot != nil {
		return *m.RequiredItemSlot
	}
	return ""
}

type CProtoItemSocket_Empty struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Empty) Reset()                    { *m = CProtoItemSocket_Empty{} }
func (m *CProtoItemSocket_Empty) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Empty) ProtoMessage()               {}
func (*CProtoItemSocket_Empty) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *CProtoItemSocket_Empty) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

type CProtoItemSocket_Effect struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Effect           *uint32           `protobuf:"varint,2,opt,name=effect" json:"effect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Effect) Reset()                    { *m = CProtoItemSocket_Effect{} }
func (m *CProtoItemSocket_Effect) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Effect) ProtoMessage()               {}
func (*CProtoItemSocket_Effect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *CProtoItemSocket_Effect) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Effect) GetEffect() uint32 {
	if m != nil && m.Effect != nil {
		return *m.Effect
	}
	return 0
}

type CProtoItemSocket_Color struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Red              *uint32           `protobuf:"varint,2,opt,name=red" json:"red,omitempty"`
	Green            *uint32           `protobuf:"varint,3,opt,name=green" json:"green,omitempty"`
	Blue             *uint32           `protobuf:"varint,4,opt,name=blue" json:"blue,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Color) Reset()                    { *m = CProtoItemSocket_Color{} }
func (m *CProtoItemSocket_Color) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Color) ProtoMessage()               {}
func (*CProtoItemSocket_Color) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *CProtoItemSocket_Color) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Color) GetRed() uint32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *CProtoItemSocket_Color) GetGreen() uint32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *CProtoItemSocket_Color) GetBlue() uint32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

type CProtoItemSocket_Strange struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	StrangeType      *uint32           `protobuf:"varint,2,opt,name=strange_type" json:"strange_type,omitempty"`
	StrangeValue     *uint32           `protobuf:"varint,3,opt,name=strange_value" json:"strange_value,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Strange) Reset()                    { *m = CProtoItemSocket_Strange{} }
func (m *CProtoItemSocket_Strange) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Strange) ProtoMessage()               {}
func (*CProtoItemSocket_Strange) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *CProtoItemSocket_Strange) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Strange) GetStrangeType() uint32 {
	if m != nil && m.StrangeType != nil {
		return *m.StrangeType
	}
	return 0
}

func (m *CProtoItemSocket_Strange) GetStrangeValue() uint32 {
	if m != nil && m.StrangeValue != nil {
		return *m.StrangeValue
	}
	return 0
}

type CProtoItemSocket_Spectator struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	GamesViewed      *uint32           `protobuf:"varint,2,opt,name=games_viewed" json:"games_viewed,omitempty"`
	CorporationId    *uint32           `protobuf:"varint,3,opt,name=corporation_id" json:"corporation_id,omitempty"`
	LeagueId         *uint32           `protobuf:"varint,4,opt,name=league_id" json:"league_id,omitempty"`
	TeamId           *uint32           `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Spectator) Reset()                    { *m = CProtoItemSocket_Spectator{} }
func (m *CProtoItemSocket_Spectator) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Spectator) ProtoMessage()               {}
func (*CProtoItemSocket_Spectator) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *CProtoItemSocket_Spectator) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Spectator) GetGamesViewed() uint32 {
	if m != nil && m.GamesViewed != nil {
		return *m.GamesViewed
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetCorporationId() uint32 {
	if m != nil && m.CorporationId != nil {
		return *m.CorporationId
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CProtoItemSocket_AssetModifier struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	AssetModifier    *uint32           `protobuf:"varint,2,opt,name=asset_modifier" json:"asset_modifier,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_AssetModifier) Reset()                    { *m = CProtoItemSocket_AssetModifier{} }
func (m *CProtoItemSocket_AssetModifier) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_AssetModifier) ProtoMessage()               {}
func (*CProtoItemSocket_AssetModifier) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *CProtoItemSocket_AssetModifier) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_AssetModifier) GetAssetModifier() uint32 {
	if m != nil && m.AssetModifier != nil {
		return *m.AssetModifier
	}
	return 0
}

type CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	AssetModifier    *uint32           `protobuf:"varint,2,opt,name=asset_modifier" json:"asset_modifier,omitempty"`
	AnimModifier     *uint32           `protobuf:"varint,3,opt,name=anim_modifier" json:"anim_modifier,omitempty"`
	AbilityEffect    *uint32           `protobuf:"varint,4,opt,name=ability_effect" json:"ability_effect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) Reset() {
	*m = CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY{}
}
func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) String() string {
	return proto.CompactTextString(m)
}
func (*CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) ProtoMessage() {}
func (*CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{28}
}

func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) GetAssetModifier() uint32 {
	if m != nil && m.AssetModifier != nil {
		return *m.AssetModifier
	}
	return 0
}

func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) GetAnimModifier() uint32 {
	if m != nil && m.AnimModifier != nil {
		return *m.AnimModifier
	}
	return 0
}

func (m *CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY) GetAbilityEffect() uint32 {
	if m != nil && m.AbilityEffect != nil {
		return *m.AbilityEffect
	}
	return 0
}

type CProtoItemSocket_Autograph struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Autograph        *string           `protobuf:"bytes,2,opt,name=autograph" json:"autograph,omitempty"`
	AutographId      *uint32           `protobuf:"varint,3,opt,name=autograph_id" json:"autograph_id,omitempty"`
	AutographScore   *uint32           `protobuf:"varint,4,opt,name=autograph_score" json:"autograph_score,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Autograph) Reset()                    { *m = CProtoItemSocket_Autograph{} }
func (m *CProtoItemSocket_Autograph) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Autograph) ProtoMessage()               {}
func (*CProtoItemSocket_Autograph) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *CProtoItemSocket_Autograph) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Autograph) GetAutograph() string {
	if m != nil && m.Autograph != nil {
		return *m.Autograph
	}
	return ""
}

func (m *CProtoItemSocket_Autograph) GetAutographId() uint32 {
	if m != nil && m.AutographId != nil {
		return *m.AutographId
	}
	return 0
}

func (m *CProtoItemSocket_Autograph) GetAutographScore() uint32 {
	if m != nil && m.AutographScore != nil {
		return *m.AutographScore
	}
	return 0
}

type CProtoItemSocket_StaticVisuals struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_StaticVisuals) Reset()                    { *m = CProtoItemSocket_StaticVisuals{} }
func (m *CProtoItemSocket_StaticVisuals) String() string            { return proto.CompactTextString(m) }
func (*CProtoItemSocket_StaticVisuals) ProtoMessage()               {}
func (*CProtoItemSocket_StaticVisuals) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *CProtoItemSocket_StaticVisuals) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

type CMatchPlayerAbilityUpgrade struct {
	Ability          *uint32 `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time             *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMatchPlayerAbilityUpgrade) Reset()                    { *m = CMatchPlayerAbilityUpgrade{} }
func (m *CMatchPlayerAbilityUpgrade) String() string            { return proto.CompactTextString(m) }
func (*CMatchPlayerAbilityUpgrade) ProtoMessage()               {}
func (*CMatchPlayerAbilityUpgrade) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *CMatchPlayerAbilityUpgrade) GetAbility() uint32 {
	if m != nil && m.Ability != nil {
		return *m.Ability
	}
	return 0
}

func (m *CMatchPlayerAbilityUpgrade) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CMatchAdditionalUnitInventory struct {
	UnitName         *string  `protobuf:"bytes,1,opt,name=unit_name" json:"unit_name,omitempty"`
	Items            []uint32 `protobuf:"varint,2,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMatchAdditionalUnitInventory) Reset()                    { *m = CMatchAdditionalUnitInventory{} }
func (m *CMatchAdditionalUnitInventory) String() string            { return proto.CompactTextString(m) }
func (*CMatchAdditionalUnitInventory) ProtoMessage()               {}
func (*CMatchAdditionalUnitInventory) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *CMatchAdditionalUnitInventory) GetUnitName() string {
	if m != nil && m.UnitName != nil {
		return *m.UnitName
	}
	return ""
}

func (m *CMatchAdditionalUnitInventory) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type CMatchHeroSelectEvent struct {
	IsPick           *bool   `protobuf:"varint,1,opt,name=is_pick" json:"is_pick,omitempty"`
	Team             *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId           *uint32 `protobuf:"varint,3,opt,name=hero_id" json:"hero_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMatchHeroSelectEvent) Reset()                    { *m = CMatchHeroSelectEvent{} }
func (m *CMatchHeroSelectEvent) String() string            { return proto.CompactTextString(m) }
func (*CMatchHeroSelectEvent) ProtoMessage()               {}
func (*CMatchHeroSelectEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *CMatchHeroSelectEvent) GetIsPick() bool {
	if m != nil && m.IsPick != nil {
		return *m.IsPick
	}
	return false
}

func (m *CMatchHeroSelectEvent) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMatchHeroSelectEvent) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

type CMsgDOTAProcessFantasyScheduledEvent struct {
	Event            *uint32 `protobuf:"varint,1,opt,name=event" json:"event,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Season           *uint32 `protobuf:"varint,4,opt,name=season" json:"season,omitempty"`
	ReferenceData    *uint32 `protobuf:"varint,5,opt,name=reference_data" json:"reference_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) Reset()         { *m = CMsgDOTAProcessFantasyScheduledEvent{} }
func (m *CMsgDOTAProcessFantasyScheduledEvent) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProcessFantasyScheduledEvent) ProtoMessage()    {}
func (*CMsgDOTAProcessFantasyScheduledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{34}
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetEvent() uint32 {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetReferenceData() uint32 {
	if m != nil && m.ReferenceData != nil {
		return *m.ReferenceData
	}
	return 0
}

type CMsgDOTAHasItemQuery struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAHasItemQuery) Reset()                    { *m = CMsgDOTAHasItemQuery{} }
func (m *CMsgDOTAHasItemQuery) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemQuery) ProtoMessage()               {}
func (*CMsgDOTAHasItemQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *CMsgDOTAHasItemQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAHasItemQuery) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgDOTAHasItemResponse struct {
	HasItem          *bool  `protobuf:"varint,1,opt,name=has_item" json:"has_item,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAHasItemResponse) Reset()                    { *m = CMsgDOTAHasItemResponse{} }
func (m *CMsgDOTAHasItemResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemResponse) ProtoMessage()               {}
func (*CMsgDOTAHasItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *CMsgDOTAHasItemResponse) GetHasItem() bool {
	if m != nil && m.HasItem != nil {
		return *m.HasItem
	}
	return false
}

type CMsgDOTAHasItemDefsQuery struct {
	AccountId        *uint32  `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemdefIds       []uint32 `protobuf:"varint,2,rep,name=itemdef_ids" json:"itemdef_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAHasItemDefsQuery) Reset()                    { *m = CMsgDOTAHasItemDefsQuery{} }
func (m *CMsgDOTAHasItemDefsQuery) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemDefsQuery) ProtoMessage()               {}
func (*CMsgDOTAHasItemDefsQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *CMsgDOTAHasItemDefsQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAHasItemDefsQuery) GetItemdefIds() []uint32 {
	if m != nil {
		return m.ItemdefIds
	}
	return nil
}

type CMsgDOTAHasItemDefsResponse struct {
	HasItems         *bool  `protobuf:"varint,1,opt,name=has_items" json:"has_items,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAHasItemDefsResponse) Reset()                    { *m = CMsgDOTAHasItemDefsResponse{} }
func (m *CMsgDOTAHasItemDefsResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemDefsResponse) ProtoMessage()               {}
func (*CMsgDOTAHasItemDefsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *CMsgDOTAHasItemDefsResponse) GetHasItems() bool {
	if m != nil && m.HasItems != nil {
		return *m.HasItems
	}
	return false
}

type CMsgDOTAConsumeFantasyTicket struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAConsumeFantasyTicket) Reset()                    { *m = CMsgDOTAConsumeFantasyTicket{} }
func (m *CMsgDOTAConsumeFantasyTicket) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAConsumeFantasyTicket) ProtoMessage()               {}
func (*CMsgDOTAConsumeFantasyTicket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *CMsgDOTAConsumeFantasyTicket) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicket) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicket) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAConsumeFantasyTicketFailure struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) Reset()         { *m = CMsgDOTAConsumeFantasyTicketFailure{} }
func (m *CMsgDOTAConsumeFantasyTicketFailure) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAConsumeFantasyTicketFailure) ProtoMessage()    {}
func (*CMsgDOTAConsumeFantasyTicketFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{40}
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgGCToGCFantasySetMatchLeague struct {
	MatchId          *uint64 `protobuf:"varint,1,opt,name=match_id" json:"match_id,omitempty"`
	LeagueId         *uint32 `protobuf:"varint,2,opt,name=league_id" json:"league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgGCToGCFantasySetMatchLeague) Reset()         { *m = CMsgGCToGCFantasySetMatchLeague{} }
func (m *CMsgGCToGCFantasySetMatchLeague) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToGCFantasySetMatchLeague) ProtoMessage()    {}
func (*CMsgGCToGCFantasySetMatchLeague) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{41}
}

func (m *CMsgGCToGCFantasySetMatchLeague) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgGCToGCFantasySetMatchLeague) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CSODOTAMapLocationState struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	LocationId       *int32  `protobuf:"varint,2,opt,name=location_id" json:"location_id,omitempty"`
	Completed        *bool   `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAMapLocationState) Reset()                    { *m = CSODOTAMapLocationState{} }
func (m *CSODOTAMapLocationState) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAMapLocationState) ProtoMessage()               {}
func (*CSODOTAMapLocationState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *CSODOTAMapLocationState) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CMsgNexonPartnerUpdate struct {
	Messagetype      *uint32 `protobuf:"varint,1,opt,name=messagetype" json:"messagetype,omitempty"`
	Timeremaining    *uint32 `protobuf:"varint,2,opt,name=timeremaining" json:"timeremaining,omitempty"`
	Terminate        *bool   `protobuf:"varint,3,opt,name=terminate" json:"terminate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgNexonPartnerUpdate) Reset()                    { *m = CMsgNexonPartnerUpdate{} }
func (m *CMsgNexonPartnerUpdate) String() string            { return proto.CompactTextString(m) }
func (*CMsgNexonPartnerUpdate) ProtoMessage()               {}
func (*CMsgNexonPartnerUpdate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *CMsgNexonPartnerUpdate) GetMessagetype() uint32 {
	if m != nil && m.Messagetype != nil {
		return *m.Messagetype
	}
	return 0
}

func (m *CMsgNexonPartnerUpdate) GetTimeremaining() uint32 {
	if m != nil && m.Timeremaining != nil {
		return *m.Timeremaining
	}
	return 0
}

func (m *CMsgNexonPartnerUpdate) GetTerminate() bool {
	if m != nil && m.Terminate != nil {
		return *m.Terminate
	}
	return false
}

type CMsgMakeOffering struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgMakeOffering) Reset()                    { *m = CMsgMakeOffering{} }
func (m *CMsgMakeOffering) String() string            { return proto.CompactTextString(m) }
func (*CMsgMakeOffering) ProtoMessage()               {}
func (*CMsgMakeOffering) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *CMsgMakeOffering) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgRequestOfferings struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgRequestOfferings) Reset()                    { *m = CMsgRequestOfferings{} }
func (m *CMsgRequestOfferings) String() string            { return proto.CompactTextString(m) }
func (*CMsgRequestOfferings) ProtoMessage()               {}
func (*CMsgRequestOfferings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

type CMsgRequestOfferingsResponse struct {
	Offerings        []*CMsgRequestOfferingsResponse_NewYearsOffering `protobuf:"bytes,1,rep,name=offerings" json:"offerings,omitempty"`
	Completed        *bool                                            `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *CMsgRequestOfferingsResponse) Reset()                    { *m = CMsgRequestOfferingsResponse{} }
func (m *CMsgRequestOfferingsResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgRequestOfferingsResponse) ProtoMessage()               {}
func (*CMsgRequestOfferingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *CMsgRequestOfferingsResponse) GetOfferings() []*CMsgRequestOfferingsResponse_NewYearsOffering {
	if m != nil {
		return m.Offerings
	}
	return nil
}

func (m *CMsgRequestOfferingsResponse) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CMsgRequestOfferingsResponse_NewYearsOffering struct {
	DefIndex         *uint32 `protobuf:"varint,1,opt,name=def_index" json:"def_index,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) Reset() {
	*m = CMsgRequestOfferingsResponse_NewYearsOffering{}
}
func (m *CMsgRequestOfferingsResponse_NewYearsOffering) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgRequestOfferingsResponse_NewYearsOffering) ProtoMessage() {}
func (*CMsgRequestOfferingsResponse_NewYearsOffering) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{46, 0}
}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) GetDefIndex() uint32 {
	if m != nil && m.DefIndex != nil {
		return *m.DefIndex
	}
	return 0
}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgLeagueAdminList struct {
	AccountIds       []uint32 `protobuf:"varint,1,rep,name=account_ids" json:"account_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgLeagueAdminList) Reset()                    { *m = CMsgLeagueAdminList{} }
func (m *CMsgLeagueAdminList) String() string            { return proto.CompactTextString(m) }
func (*CMsgLeagueAdminList) ProtoMessage()               {}
func (*CMsgLeagueAdminList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *CMsgLeagueAdminList) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

type CMsgPerfectWorldUserLookupRequest struct {
	UserName         *string `protobuf:"bytes,1,opt,name=user_name" json:"user_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPerfectWorldUserLookupRequest) Reset()         { *m = CMsgPerfectWorldUserLookupRequest{} }
func (m *CMsgPerfectWorldUserLookupRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgPerfectWorldUserLookupRequest) ProtoMessage()    {}
func (*CMsgPerfectWorldUserLookupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{48}
}

func (m *CMsgPerfectWorldUserLookupRequest) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

type CMsgPerfectWorldUserLookupResponse struct {
	ResultCode       *CMsgPerfectWorldUserLookupResponse_EResultCode `protobuf:"varint,1,opt,name=result_code,enum=CMsgPerfectWorldUserLookupResponse_EResultCode,def=0" json:"result_code,omitempty"`
	AccountId        *uint32                                         `protobuf:"varint,2,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CMsgPerfectWorldUserLookupResponse) Reset()         { *m = CMsgPerfectWorldUserLookupResponse{} }
func (m *CMsgPerfectWorldUserLookupResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgPerfectWorldUserLookupResponse) ProtoMessage()    {}
func (*CMsgPerfectWorldUserLookupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{49}
}

const Default_CMsgPerfectWorldUserLookupResponse_ResultCode CMsgPerfectWorldUserLookupResponse_EResultCode = CMsgPerfectWorldUserLookupResponse_SUCCESS_ACCOUNT_FOUND

func (m *CMsgPerfectWorldUserLookupResponse) GetResultCode() CMsgPerfectWorldUserLookupResponse_EResultCode {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return Default_CMsgPerfectWorldUserLookupResponse_ResultCode
}

func (m *CMsgPerfectWorldUserLookupResponse) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CCompendiumTimestampedData struct {
	GameTime         *uint32  `protobuf:"varint,1,opt,name=game_time" json:"game_time,omitempty"`
	Gpm              *uint32  `protobuf:"varint,2,opt,name=gpm" json:"gpm,omitempty"`
	Xpm              *uint32  `protobuf:"varint,3,opt,name=xpm" json:"xpm,omitempty"`
	Kills            *uint32  `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32  `protobuf:"varint,5,opt,name=deaths" json:"deaths,omitempty"`
	ItemPurchases    []uint32 `protobuf:"varint,6,rep,name=item_purchases" json:"item_purchases,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CCompendiumTimestampedData) Reset()                    { *m = CCompendiumTimestampedData{} }
func (m *CCompendiumTimestampedData) String() string            { return proto.CompactTextString(m) }
func (*CCompendiumTimestampedData) ProtoMessage()               {}
func (*CCompendiumTimestampedData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *CCompendiumTimestampedData) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetGpm() uint32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetXpm() uint32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetItemPurchases() []uint32 {
	if m != nil {
		return m.ItemPurchases
	}
	return nil
}

type CCompendiumGameTimeline struct {
	Data             []*CCompendiumTimestampedData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Tags             []string                      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CCompendiumGameTimeline) Reset()                    { *m = CCompendiumGameTimeline{} }
func (m *CCompendiumGameTimeline) String() string            { return proto.CompactTextString(m) }
func (*CCompendiumGameTimeline) ProtoMessage()               {}
func (*CCompendiumGameTimeline) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *CCompendiumGameTimeline) GetData() []*CCompendiumTimestampedData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CCompendiumGameTimeline) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CCompendiumGameList struct {
	Games            []*CCompendiumGameTimeline `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CCompendiumGameList) Reset()                    { *m = CCompendiumGameList{} }
func (m *CCompendiumGameList) String() string            { return proto.CompactTextString(m) }
func (*CCompendiumGameList) ProtoMessage()               {}
func (*CCompendiumGameList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *CCompendiumGameList) GetGames() []*CCompendiumGameTimeline {
	if m != nil {
		return m.Games
	}
	return nil
}

type CAdditionalEquipSlot struct {
	ClassId          *uint32 `protobuf:"varint,1,opt,name=class_id" json:"class_id,omitempty"`
	SlotId           *uint32 `protobuf:"varint,2,opt,name=slot_id" json:"slot_id,omitempty"`
	DefIndex         *uint32 `protobuf:"varint,3,opt,name=def_index" json:"def_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CAdditionalEquipSlot) Reset()                    { *m = CAdditionalEquipSlot{} }
func (m *CAdditionalEquipSlot) String() string            { return proto.CompactTextString(m) }
func (*CAdditionalEquipSlot) ProtoMessage()               {}
func (*CAdditionalEquipSlot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *CAdditionalEquipSlot) GetClassId() uint32 {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return 0
}

func (m *CAdditionalEquipSlot) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CAdditionalEquipSlot) GetDefIndex() uint32 {
	if m != nil && m.DefIndex != nil {
		return *m.DefIndex
	}
	return 0
}

type CMsgDOTARedeemItem struct {
	CurrencyId       *uint64 `protobuf:"varint,1,opt,name=currency_id" json:"currency_id,omitempty"`
	PurchaseDef      *uint32 `protobuf:"varint,2,opt,name=purchase_def" json:"purchase_def,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARedeemItem) Reset()                    { *m = CMsgDOTARedeemItem{} }
func (m *CMsgDOTARedeemItem) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTARedeemItem) ProtoMessage()               {}
func (*CMsgDOTARedeemItem) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

func (m *CMsgDOTARedeemItem) GetCurrencyId() uint64 {
	if m != nil && m.CurrencyId != nil {
		return *m.CurrencyId
	}
	return 0
}

func (m *CMsgDOTARedeemItem) GetPurchaseDef() uint32 {
	if m != nil && m.PurchaseDef != nil {
		return *m.PurchaseDef
	}
	return 0
}

type CMsgDOTARedeemItemResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTARedeemItemResponse) Reset()                    { *m = CMsgDOTARedeemItemResponse{} }
func (m *CMsgDOTARedeemItemResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTARedeemItemResponse) ProtoMessage()               {}
func (*CMsgDOTARedeemItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

type CMsgDOTACombatLogEntry struct {
	Type               *DOTA_COMBATLOG_TYPES `protobuf:"varint,1,opt,name=type,enum=DOTA_COMBATLOG_TYPES,def=0" json:"type,omitempty"`
	TargetName         *uint32               `protobuf:"varint,2,opt,name=target_name" json:"target_name,omitempty"`
	TargetSourceName   *uint32               `protobuf:"varint,3,opt,name=target_source_name" json:"target_source_name,omitempty"`
	AttackerName       *uint32               `protobuf:"varint,4,opt,name=attacker_name" json:"attacker_name,omitempty"`
	DamageSourceName   *uint32               `protobuf:"varint,5,opt,name=damage_source_name" json:"damage_source_name,omitempty"`
	InflictorName      *uint32               `protobuf:"varint,6,opt,name=inflictor_name" json:"inflictor_name,omitempty"`
	IsAttackerIllusion *bool                 `protobuf:"varint,7,opt,name=is_attacker_illusion" json:"is_attacker_illusion,omitempty"`
	IsAttackerHero     *bool                 `protobuf:"varint,8,opt,name=is_attacker_hero" json:"is_attacker_hero,omitempty"`
	IsTargetIllusion   *bool                 `protobuf:"varint,9,opt,name=is_target_illusion" json:"is_target_illusion,omitempty"`
	IsTargetHero       *bool                 `protobuf:"varint,10,opt,name=is_target_hero" json:"is_target_hero,omitempty"`
	IsVisibleRadiant   *bool                 `protobuf:"varint,11,opt,name=is_visible_radiant" json:"is_visible_radiant,omitempty"`
	IsVisibleDire      *bool                 `protobuf:"varint,12,opt,name=is_visible_dire" json:"is_visible_dire,omitempty"`
	Value              *uint32               `protobuf:"varint,13,opt,name=value" json:"value,omitempty"`
	Health             *int32                `protobuf:"varint,14,opt,name=health" json:"health,omitempty"`
	Timestamp          *float32              `protobuf:"fixed32,15,opt,name=timestamp" json:"timestamp,omitempty"`
	StunDuration       *float32              `protobuf:"fixed32,16,opt,name=stun_duration" json:"stun_duration,omitempty"`
	SlowDuration       *float32              `protobuf:"fixed32,17,opt,name=slow_duration" json:"slow_duration,omitempty"`
	IsAbilityToggleOn  *bool                 `protobuf:"varint,18,opt,name=is_ability_toggle_on" json:"is_ability_toggle_on,omitempty"`
	IsAbilityToggleOff *bool                 `protobuf:"varint,19,opt,name=is_ability_toggle_off" json:"is_ability_toggle_off,omitempty"`
	AbilityLevel       *uint32               `protobuf:"varint,20,opt,name=ability_level" json:"ability_level,omitempty"`
	LocationX          *float32              `protobuf:"fixed32,21,opt,name=location_x" json:"location_x,omitempty"`
	LocationY          *float32              `protobuf:"fixed32,22,opt,name=location_y" json:"location_y,omitempty"`
	GoldReason         *uint32               `protobuf:"varint,23,opt,name=gold_reason" json:"gold_reason,omitempty"`
	TimestampRaw       *float32              `protobuf:"fixed32,24,opt,name=timestamp_raw" json:"timestamp_raw,omitempty"`
	ModifierDuration   *float32              `protobuf:"fixed32,25,opt,name=modifier_duration" json:"modifier_duration,omitempty"`
	XpReason           *uint32               `protobuf:"varint,26,opt,name=xp_reason" json:"xp_reason,omitempty"`
	LastHits           *uint32               `protobuf:"varint,27,opt,name=last_hits" json:"last_hits,omitempty"`
	AttackerTeam       *uint32               `protobuf:"varint,28,opt,name=attacker_team" json:"attacker_team,omitempty"`
	TargetTeam         *uint32               `protobuf:"varint,29,opt,name=target_team" json:"target_team,omitempty"`
	ObsWardsPlaced     *uint32               `protobuf:"varint,30,opt,name=obs_wards_placed" json:"obs_wards_placed,omitempty"`
	AssistPlayer0      *uint32               `protobuf:"varint,31,opt,name=assist_player0" json:"assist_player0,omitempty"`
	AssistPlayer1      *uint32               `protobuf:"varint,32,opt,name=assist_player1" json:"assist_player1,omitempty"`
	AssistPlayer2      *uint32               `protobuf:"varint,33,opt,name=assist_player2" json:"assist_player2,omitempty"`
	AssistPlayer3      *uint32               `protobuf:"varint,34,opt,name=assist_player3" json:"assist_player3,omitempty"`
	StackCount         *uint32               `protobuf:"varint,35,opt,name=stack_count" json:"stack_count,omitempty"`
	HiddenModifier     *bool                 `protobuf:"varint,36,opt,name=hidden_modifier" json:"hidden_modifier,omitempty"`
	IsTargetBuilding   *bool                 `protobuf:"varint,37,opt,name=is_target_building" json:"is_target_building,omitempty"`
	NeutralCampType    *uint32               `protobuf:"varint,38,opt,name=neutral_camp_type" json:"neutral_camp_type,omitempty"`
	RuneType           *uint32               `protobuf:"varint,39,opt,name=rune_type" json:"rune_type,omitempty"`
	AssistPlayers      []uint32              `protobuf:"varint,40,rep,name=assist_players" json:"assist_players,omitempty"`
	XXX_unrecognized   []byte                `json:"-"`
}

func (m *CMsgDOTACombatLogEntry) Reset()                    { *m = CMsgDOTACombatLogEntry{} }
func (m *CMsgDOTACombatLogEntry) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTACombatLogEntry) ProtoMessage()               {}
func (*CMsgDOTACombatLogEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{56} }

const Default_CMsgDOTACombatLogEntry_Type DOTA_COMBATLOG_TYPES = DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DAMAGE

func (m *CMsgDOTACombatLogEntry) GetType() DOTA_COMBATLOG_TYPES {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMsgDOTACombatLogEntry_Type
}

func (m *CMsgDOTACombatLogEntry) GetTargetName() uint32 {
	if m != nil && m.TargetName != nil {
		return *m.TargetName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetSourceName() uint32 {
	if m != nil && m.TargetSourceName != nil {
		return *m.TargetSourceName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAttackerName() uint32 {
	if m != nil && m.AttackerName != nil {
		return *m.AttackerName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetDamageSourceName() uint32 {
	if m != nil && m.DamageSourceName != nil {
		return *m.DamageSourceName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetInflictorName() uint32 {
	if m != nil && m.InflictorName != nil {
		return *m.InflictorName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetIsAttackerIllusion() bool {
	if m != nil && m.IsAttackerIllusion != nil {
		return *m.IsAttackerIllusion
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsAttackerHero() bool {
	if m != nil && m.IsAttackerHero != nil {
		return *m.IsAttackerHero
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetIllusion() bool {
	if m != nil && m.IsTargetIllusion != nil {
		return *m.IsTargetIllusion
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetHero() bool {
	if m != nil && m.IsTargetHero != nil {
		return *m.IsTargetHero
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsVisibleRadiant() bool {
	if m != nil && m.IsVisibleRadiant != nil {
		return *m.IsVisibleRadiant
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsVisibleDire() bool {
	if m != nil && m.IsVisibleDire != nil {
		return *m.IsVisibleDire
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetHealth() int32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTimestamp() float32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetStunDuration() float32 {
	if m != nil && m.StunDuration != nil {
		return *m.StunDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetSlowDuration() float32 {
	if m != nil && m.SlowDuration != nil {
		return *m.SlowDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetIsAbilityToggleOn() bool {
	if m != nil && m.IsAbilityToggleOn != nil {
		return *m.IsAbilityToggleOn
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsAbilityToggleOff() bool {
	if m != nil && m.IsAbilityToggleOff != nil {
		return *m.IsAbilityToggleOff
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetAbilityLevel() uint32 {
	if m != nil && m.AbilityLevel != nil {
		return *m.AbilityLevel
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLocationX() float32 {
	if m != nil && m.LocationX != nil {
		return *m.LocationX
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLocationY() float32 {
	if m != nil && m.LocationY != nil {
		return *m.LocationY
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetGoldReason() uint32 {
	if m != nil && m.GoldReason != nil {
		return *m.GoldReason
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTimestampRaw() float32 {
	if m != nil && m.TimestampRaw != nil {
		return *m.TimestampRaw
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetModifierDuration() float32 {
	if m != nil && m.ModifierDuration != nil {
		return *m.ModifierDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetXpReason() uint32 {
	if m != nil && m.XpReason != nil {
		return *m.XpReason
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLastHits() uint32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAttackerTeam() uint32 {
	if m != nil && m.AttackerTeam != nil {
		return *m.AttackerTeam
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetTeam() uint32 {
	if m != nil && m.TargetTeam != nil {
		return *m.TargetTeam
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetObsWardsPlaced() uint32 {
	if m != nil && m.ObsWardsPlaced != nil {
		return *m.ObsWardsPlaced
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer0() uint32 {
	if m != nil && m.AssistPlayer0 != nil {
		return *m.AssistPlayer0
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer1() uint32 {
	if m != nil && m.AssistPlayer1 != nil {
		return *m.AssistPlayer1
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer2() uint32 {
	if m != nil && m.AssistPlayer2 != nil {
		return *m.AssistPlayer2
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer3() uint32 {
	if m != nil && m.AssistPlayer3 != nil {
		return *m.AssistPlayer3
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetStackCount() uint32 {
	if m != nil && m.StackCount != nil {
		return *m.StackCount
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetHiddenModifier() bool {
	if m != nil && m.HiddenModifier != nil {
		return *m.HiddenModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetBuilding() bool {
	if m != nil && m.IsTargetBuilding != nil {
		return *m.IsTargetBuilding
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetNeutralCampType() uint32 {
	if m != nil && m.NeutralCampType != nil {
		return *m.NeutralCampType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetRuneType() uint32 {
	if m != nil && m.RuneType != nil {
		return *m.RuneType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayers() []uint32 {
	if m != nil {
		return m.AssistPlayers
	}
	return nil
}

type CMsgDOTAProfileCard struct {
	AccountId          *uint32                     `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	BackgroundDefIndex *uint32                     `protobuf:"varint,2,opt,name=background_def_index" json:"background_def_index,omitempty"`
	Slots              []*CMsgDOTAProfileCard_Slot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	BadgePoints        *uint32                     `protobuf:"varint,4,opt,name=badge_points" json:"badge_points,omitempty"`
	EventPoints        *uint32                     `protobuf:"varint,5,opt,name=event_points" json:"event_points,omitempty"`
	EventId            *uint32                     `protobuf:"varint,6,opt,name=event_id" json:"event_id,omitempty"`
	XXX_unrecognized   []byte                      `json:"-"`
}

func (m *CMsgDOTAProfileCard) Reset()                    { *m = CMsgDOTAProfileCard{} }
func (m *CMsgDOTAProfileCard) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard) ProtoMessage()               {}
func (*CMsgDOTAProfileCard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57} }

func (m *CMsgDOTAProfileCard) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetBackgroundDefIndex() uint32 {
	if m != nil && m.BackgroundDefIndex != nil {
		return *m.BackgroundDefIndex
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetSlots() []*CMsgDOTAProfileCard_Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *CMsgDOTAProfileCard) GetBadgePoints() uint32 {
	if m != nil && m.BadgePoints != nil {
		return *m.BadgePoints
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetEventPoints() uint32 {
	if m != nil && m.EventPoints != nil {
		return *m.EventPoints
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot struct {
	SlotId           *uint32                            `protobuf:"varint,1,opt,name=slot_id" json:"slot_id,omitempty"`
	Trophy           *CMsgDOTAProfileCard_Slot_Trophy   `protobuf:"bytes,2,opt,name=trophy" json:"trophy,omitempty"`
	Stat             *CMsgDOTAProfileCard_Slot_Stat     `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
	Item             *CMsgDOTAProfileCard_Slot_Item     `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	Hero             *CMsgDOTAProfileCard_Slot_Hero     `protobuf:"bytes,5,opt,name=hero" json:"hero,omitempty"`
	Emoticon         *CMsgDOTAProfileCard_Slot_Emoticon `protobuf:"bytes,6,opt,name=emoticon" json:"emoticon,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot) Reset()                    { *m = CMsgDOTAProfileCard_Slot{} }
func (m *CMsgDOTAProfileCard_Slot) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot) ProtoMessage()               {}
func (*CMsgDOTAProfileCard_Slot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{57, 0} }

func (m *CMsgDOTAProfileCard_Slot) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot) GetTrophy() *CMsgDOTAProfileCard_Slot_Trophy {
	if m != nil {
		return m.Trophy
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetStat() *CMsgDOTAProfileCard_Slot_Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetItem() *CMsgDOTAProfileCard_Slot_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetHero() *CMsgDOTAProfileCard_Slot_Hero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetEmoticon() *CMsgDOTAProfileCard_Slot_Emoticon {
	if m != nil {
		return m.Emoticon
	}
	return nil
}

type CMsgDOTAProfileCard_Slot_Trophy struct {
	TrophyId         *uint32 `protobuf:"varint,1,opt,name=trophy_id" json:"trophy_id,omitempty"`
	TrophyScore      *uint32 `protobuf:"varint,2,opt,name=trophy_score" json:"trophy_score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Trophy) Reset()         { *m = CMsgDOTAProfileCard_Slot_Trophy{} }
func (m *CMsgDOTAProfileCard_Slot_Trophy) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Trophy) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Trophy) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0, 0}
}

func (m *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyId() uint32 {
	if m != nil && m.TrophyId != nil {
		return *m.TrophyId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyScore() uint32 {
	if m != nil && m.TrophyScore != nil {
		return *m.TrophyScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Stat struct {
	StatId           *CMsgDOTAProfileCard_EStatID `protobuf:"varint,1,opt,name=stat_id,enum=CMsgDOTAProfileCard_EStatID,def=1" json:"stat_id,omitempty"`
	StatScore        *uint32                      `protobuf:"varint,2,opt,name=stat_score" json:"stat_score,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Stat) Reset()         { *m = CMsgDOTAProfileCard_Slot_Stat{} }
func (m *CMsgDOTAProfileCard_Slot_Stat) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Stat) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0, 1}
}

const Default_CMsgDOTAProfileCard_Slot_Stat_StatId CMsgDOTAProfileCard_EStatID = CMsgDOTAProfileCard_k_eStat_SoloRank

func (m *CMsgDOTAProfileCard_Slot_Stat) GetStatId() CMsgDOTAProfileCard_EStatID {
	if m != nil && m.StatId != nil {
		return *m.StatId
	}
	return Default_CMsgDOTAProfileCard_Slot_Stat_StatId
}

func (m *CMsgDOTAProfileCard_Slot_Stat) GetStatScore() uint32 {
	if m != nil && m.StatScore != nil {
		return *m.StatScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Item struct {
	SerializedItem   []byte  `protobuf:"bytes,1,opt,name=serialized_item" json:"serialized_item,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Item) Reset()         { *m = CMsgDOTAProfileCard_Slot_Item{} }
func (m *CMsgDOTAProfileCard_Slot_Item) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Item) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0, 2}
}

func (m *CMsgDOTAProfileCard_Slot_Item) GetSerializedItem() []byte {
	if m != nil {
		return m.SerializedItem
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot_Item) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Hero struct {
	HeroId           *uint32 `protobuf:"varint,1,opt,name=hero_id" json:"hero_id,omitempty"`
	HeroWins         *uint32 `protobuf:"varint,2,opt,name=hero_wins" json:"hero_wins,omitempty"`
	HeroLosses       *uint32 `protobuf:"varint,3,opt,name=hero_losses" json:"hero_losses,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Hero) Reset()         { *m = CMsgDOTAProfileCard_Slot_Hero{} }
func (m *CMsgDOTAProfileCard_Slot_Hero) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Hero) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Hero) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0, 3}
}

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroWins() uint32 {
	if m != nil && m.HeroWins != nil {
		return *m.HeroWins
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroLosses() uint32 {
	if m != nil && m.HeroLosses != nil {
		return *m.HeroLosses
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Emoticon struct {
	EmoticonId       *uint32 `protobuf:"varint,1,opt,name=emoticon_id" json:"emoticon_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Emoticon) Reset()         { *m = CMsgDOTAProfileCard_Slot_Emoticon{} }
func (m *CMsgDOTAProfileCard_Slot_Emoticon) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Emoticon) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Emoticon) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57, 0, 4}
}

func (m *CMsgDOTAProfileCard_Slot_Emoticon) GetEmoticonId() uint32 {
	if m != nil && m.EmoticonId != nil {
		return *m.EmoticonId
	}
	return 0
}

type CMsgGCToClientNewBloomTimingUpdated struct {
	IsActive           *bool   `protobuf:"varint,1,opt,name=is_active" json:"is_active,omitempty"`
	NextTransitionTime *uint32 `protobuf:"varint,2,opt,name=next_transition_time" json:"next_transition_time,omitempty"`
	BonusAmount        *uint32 `protobuf:"varint,3,opt,name=bonus_amount" json:"bonus_amount,omitempty"`
	StandbyDuration    *uint32 `protobuf:"varint,4,opt,name=standby_duration" json:"standby_duration,omitempty"`
	TransitionTime     *uint32 `protobuf:"varint,5,opt,name=transition_time" json:"transition_time,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgGCToClientNewBloomTimingUpdated) Reset()         { *m = CMsgGCToClientNewBloomTimingUpdated{} }
func (m *CMsgGCToClientNewBloomTimingUpdated) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientNewBloomTimingUpdated) ProtoMessage()    {}
func (*CMsgGCToClientNewBloomTimingUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{58}
}

func (m *CMsgGCToClientNewBloomTimingUpdated) GetIsActive() bool {
	if m != nil && m.IsActive != nil {
		return *m.IsActive
	}
	return false
}

func (m *CMsgGCToClientNewBloomTimingUpdated) GetNextTransitionTime() uint32 {
	if m != nil && m.NextTransitionTime != nil {
		return *m.NextTransitionTime
	}
	return 0
}

func (m *CMsgGCToClientNewBloomTimingUpdated) GetBonusAmount() uint32 {
	if m != nil && m.BonusAmount != nil {
		return *m.BonusAmount
	}
	return 0
}

func (m *CMsgGCToClientNewBloomTimingUpdated) GetStandbyDuration() uint32 {
	if m != nil && m.StandbyDuration != nil {
		return *m.StandbyDuration
	}
	return 0
}

func (m *CMsgGCToClientNewBloomTimingUpdated) GetTransitionTime() uint32 {
	if m != nil && m.TransitionTime != nil {
		return *m.TransitionTime
	}
	return 0
}

type CSODOTAPlayerChallenge struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	EventId          *uint32 `protobuf:"varint,2,opt,name=event_id" json:"event_id,omitempty"`
	SlotId           *uint32 `protobuf:"varint,3,opt,name=slot_id" json:"slot_id,omitempty"`
	ChallengeType    *uint32 `protobuf:"varint,4,opt,name=challenge_type" json:"challenge_type,omitempty"`
	IntParam_0       *uint32 `protobuf:"varint,5,opt,name=int_param_0" json:"int_param_0,omitempty"`
	IntParam_1       *uint32 `protobuf:"varint,6,opt,name=int_param_1" json:"int_param_1,omitempty"`
	CreatedTime      *uint32 `protobuf:"varint,7,opt,name=created_time" json:"created_time,omitempty"`
	Completed        *uint32 `protobuf:"varint,8,opt,name=completed" json:"completed,omitempty"`
	SequenceId       *uint32 `protobuf:"varint,9,opt,name=sequence_id" json:"sequence_id,omitempty"`
	ChallengeTier    *uint32 `protobuf:"varint,10,opt,name=challenge_tier" json:"challenge_tier,omitempty"`
	Flags            *uint32 `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAPlayerChallenge) Reset()                    { *m = CSODOTAPlayerChallenge{} }
func (m *CSODOTAPlayerChallenge) String() string            { return proto.CompactTextString(m) }
func (*CSODOTAPlayerChallenge) ProtoMessage()               {}
func (*CSODOTAPlayerChallenge) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{59} }

func (m *CSODOTAPlayerChallenge) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetChallengeType() uint32 {
	if m != nil && m.ChallengeType != nil {
		return *m.ChallengeType
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetIntParam_0() uint32 {
	if m != nil && m.IntParam_0 != nil {
		return *m.IntParam_0
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetIntParam_1() uint32 {
	if m != nil && m.IntParam_1 != nil {
		return *m.IntParam_1
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetCreatedTime() uint32 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetCompleted() uint32 {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetSequenceId() uint32 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetChallengeTier() uint32 {
	if m != nil && m.ChallengeTier != nil {
		return *m.ChallengeTier
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type CMsgClientToGCRerollPlayerChallenge struct {
	EventId          *uint32 `protobuf:"varint,1,opt,name=event_id" json:"event_id,omitempty"`
	SequenceId       *uint32 `protobuf:"varint,3,opt,name=sequence_id" json:"sequence_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientToGCRerollPlayerChallenge) Reset()         { *m = CMsgClientToGCRerollPlayerChallenge{} }
func (m *CMsgClientToGCRerollPlayerChallenge) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCRerollPlayerChallenge) ProtoMessage()    {}
func (*CMsgClientToGCRerollPlayerChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{60}
}

func (m *CMsgClientToGCRerollPlayerChallenge) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgClientToGCRerollPlayerChallenge) GetSequenceId() uint32 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

type CMsgGCRerollPlayerChallengeResponse struct {
	Result           *CMsgGCRerollPlayerChallengeResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgGCRerollPlayerChallengeResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgGCRerollPlayerChallengeResponse) Reset()         { *m = CMsgGCRerollPlayerChallengeResponse{} }
func (m *CMsgGCRerollPlayerChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCRerollPlayerChallengeResponse) ProtoMessage()    {}
func (*CMsgGCRerollPlayerChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{61}
}

const Default_CMsgGCRerollPlayerChallengeResponse_Result CMsgGCRerollPlayerChallengeResponse_EResult = CMsgGCRerollPlayerChallengeResponse_eResult_Success

func (m *CMsgGCRerollPlayerChallengeResponse) GetResult() CMsgGCRerollPlayerChallengeResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgGCRerollPlayerChallengeResponse_Result
}

type CMsgGCTopCustomGamesList struct {
	TopCustomGames   []uint64 `protobuf:"varint,1,rep,name=top_custom_games" json:"top_custom_games,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgGCTopCustomGamesList) Reset()                    { *m = CMsgGCTopCustomGamesList{} }
func (m *CMsgGCTopCustomGamesList) String() string            { return proto.CompactTextString(m) }
func (*CMsgGCTopCustomGamesList) ProtoMessage()               {}
func (*CMsgGCTopCustomGamesList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{62} }

func (m *CMsgGCTopCustomGamesList) GetTopCustomGames() []uint64 {
	if m != nil {
		return m.TopCustomGames
	}
	return nil
}

type CMsgDOTARealtimeGameStats struct {
	Match            *CMsgDOTARealtimeGameStats_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams            []*CMsgDOTARealtimeGameStats_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings        []*CMsgDOTARealtimeGameStats_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData        *CMsgDOTARealtimeGameStats_GraphData         `protobuf:"bytes,4,opt,name=graph_data" json:"graph_data,omitempty"`
	DeltaFrame       *bool                                        `protobuf:"varint,5,opt,name=delta_frame" json:"delta_frame,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats) Reset()                    { *m = CMsgDOTARealtimeGameStats{} }
func (m *CMsgDOTARealtimeGameStats) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats) ProtoMessage()               {}
func (*CMsgDOTARealtimeGameStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{63} }

func (m *CMsgDOTARealtimeGameStats) GetMatch() *CMsgDOTARealtimeGameStats_MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetTeams() []*CMsgDOTARealtimeGameStats_TeamDetails {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetBuildings() []*CMsgDOTARealtimeGameStats_BuildingDetails {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetGraphData() *CMsgDOTARealtimeGameStats_GraphData {
	if m != nil {
		return m.GraphData
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetDeltaFrame() bool {
	if m != nil && m.DeltaFrame != nil {
		return *m.DeltaFrame
	}
	return false
}

type CMsgDOTARealtimeGameStats_TeamDetails struct {
	TeamNumber       *uint32                                    `protobuf:"varint,1,opt,name=team_number" json:"team_number,omitempty"`
	TeamId           *uint32                                    `protobuf:"varint,2,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string                                    `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64                                    `protobuf:"fixed64,4,opt,name=team_logo" json:"team_logo,omitempty"`
	Score            *uint32                                    `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	Players          []*CMsgDOTARealtimeGameStats_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	OnlyTeam         *bool                                      `protobuf:"varint,7,opt,name=only_team" json:"only_team,omitempty"`
	Cheers           *uint32                                    `protobuf:"varint,8,opt,name=cheers" json:"cheers,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_TeamDetails{} }
func (m *CMsgDOTARealtimeGameStats_TeamDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_TeamDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_TeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 0}
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamNumber() uint32 {
	if m != nil && m.TeamNumber != nil {
		return *m.TeamNumber
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStats_PlayerDetails {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetOnlyTeam() bool {
	if m != nil && m.OnlyTeam != nil {
		return *m.OnlyTeam
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetCheers() uint32 {
	if m != nil && m.Cheers != nil {
		return *m.Cheers
	}
	return 0
}

type CMsgDOTARealtimeGameStats_ItemDetails struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Time             *int32  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Sold             *bool   `protobuf:"varint,4,opt,name=sold" json:"sold,omitempty"`
	Stackcount       *uint32 `protobuf:"varint,5,opt,name=stackcount" json:"stackcount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_ItemDetails{} }
func (m *CMsgDOTARealtimeGameStats_ItemDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_ItemDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_ItemDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 1}
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetSold() bool {
	if m != nil && m.Sold != nil {
		return *m.Sold
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetStackcount() uint32 {
	if m != nil && m.Stackcount != nil {
		return *m.Stackcount
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityDetails struct {
	Id               *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level            *uint32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Cooldown         *float32 `protobuf:"fixed32,4,opt,name=cooldown" json:"cooldown,omitempty"`
	CooldownMax      *float32 `protobuf:"fixed32,5,opt,name=cooldown_max" json:"cooldown_max,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_AbilityDetails{}
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_AbilityDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_AbilityDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 2}
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldown() float32 {
	if m != nil && m.Cooldown != nil {
		return *m.Cooldown
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldownMax() float32 {
	if m != nil && m.CooldownMax != nil {
		return *m.CooldownMax
	}
	return 0
}

type CMsgDOTARealtimeGameStats_HeroToHeroStats struct {
	Victimid         *uint32 `protobuf:"varint,1,opt,name=victimid" json:"victimid,omitempty"`
	Kills            *uint32 `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Assists          *uint32 `protobuf:"varint,3,opt,name=assists" json:"assists,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_HeroToHeroStats{}
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 3}
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetVictimid() uint32 {
	if m != nil && m.Victimid != nil {
		return *m.Victimid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityList struct {
	Id               []uint32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_AbilityList) Reset()         { *m = CMsgDOTARealtimeGameStats_AbilityList{} }
func (m *CMsgDOTARealtimeGameStats_AbilityList) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_AbilityList) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_AbilityList) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 4}
}

func (m *CMsgDOTARealtimeGameStats_AbilityList) GetId() []uint32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type CMsgDOTARealtimeGameStats_PlayerDetails struct {
	Accountid        *uint32                                      `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid         *uint32                                      `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name             *string                                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team             *uint32                                      `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid           *uint32                                      `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Healthpoints     *uint32                                      `protobuf:"varint,6,opt,name=healthpoints" json:"healthpoints,omitempty"`
	Maxhealthpoints  *uint32                                      `protobuf:"varint,7,opt,name=maxhealthpoints" json:"maxhealthpoints,omitempty"`
	Healthregenrate  *float32                                     `protobuf:"fixed32,8,opt,name=healthregenrate" json:"healthregenrate,omitempty"`
	Manapoints       *uint32                                      `protobuf:"varint,9,opt,name=manapoints" json:"manapoints,omitempty"`
	Maxmanapoints    *uint32                                      `protobuf:"varint,10,opt,name=maxmanapoints" json:"maxmanapoints,omitempty"`
	Manaregenrate    *float32                                     `protobuf:"fixed32,11,opt,name=manaregenrate" json:"manaregenrate,omitempty"`
	BaseStrength     *uint32                                      `protobuf:"varint,12,opt,name=base_strength" json:"base_strength,omitempty"`
	BaseAgility      *uint32                                      `protobuf:"varint,13,opt,name=base_agility" json:"base_agility,omitempty"`
	BaseIntelligence *uint32                                      `protobuf:"varint,14,opt,name=base_intelligence" json:"base_intelligence,omitempty"`
	BaseArmor        *int32                                       `protobuf:"varint,15,opt,name=base_armor" json:"base_armor,omitempty"`
	BaseMovespeed    *uint32                                      `protobuf:"varint,16,opt,name=base_movespeed" json:"base_movespeed,omitempty"`
	BaseDamage       *uint32                                      `protobuf:"varint,17,opt,name=base_damage" json:"base_damage,omitempty"`
	Strength         *uint32                                      `protobuf:"varint,18,opt,name=strength" json:"strength,omitempty"`
	Agility          *uint32                                      `protobuf:"varint,19,opt,name=agility" json:"agility,omitempty"`
	Intelligence     *uint32                                      `protobuf:"varint,20,opt,name=intelligence" json:"intelligence,omitempty"`
	Armor            *int32                                       `protobuf:"varint,21,opt,name=armor" json:"armor,omitempty"`
	Movespeed        *uint32                                      `protobuf:"varint,22,opt,name=movespeed" json:"movespeed,omitempty"`
	Damage           *uint32                                      `protobuf:"varint,23,opt,name=damage" json:"damage,omitempty"`
	HeroDamage       *uint32                                      `protobuf:"varint,24,opt,name=hero_damage" json:"hero_damage,omitempty"`
	TowerDamage      *uint32                                      `protobuf:"varint,25,opt,name=tower_damage" json:"tower_damage,omitempty"`
	Abilities        []*CMsgDOTARealtimeGameStats_AbilityDetails  `protobuf:"bytes,26,rep,name=abilities" json:"abilities,omitempty"`
	Level            *uint32                                      `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	KillCount        *uint32                                      `protobuf:"varint,28,opt,name=kill_count" json:"kill_count,omitempty"`
	DeathCount       *uint32                                      `protobuf:"varint,29,opt,name=death_count" json:"death_count,omitempty"`
	AssistsCount     *uint32                                      `protobuf:"varint,30,opt,name=assists_count" json:"assists_count,omitempty"`
	DeniesCount      *uint32                                      `protobuf:"varint,31,opt,name=denies_count" json:"denies_count,omitempty"`
	LhCount          *uint32                                      `protobuf:"varint,32,opt,name=lh_count" json:"lh_count,omitempty"`
	HeroHealing      *uint32                                      `protobuf:"varint,33,opt,name=hero_healing" json:"hero_healing,omitempty"`
	GoldPerMin       *uint32                                      `protobuf:"varint,34,opt,name=gold_per_min" json:"gold_per_min,omitempty"`
	XpPerMin         *uint32                                      `protobuf:"varint,35,opt,name=xp_per_min" json:"xp_per_min,omitempty"`
	NetGold          *uint32                                      `protobuf:"varint,36,opt,name=net_gold" json:"net_gold,omitempty"`
	Gold             *uint32                                      `protobuf:"varint,37,opt,name=gold" json:"gold,omitempty"`
	X                *float32                                     `protobuf:"fixed32,38,opt,name=x" json:"x,omitempty"`
	Y                *float32                                     `protobuf:"fixed32,39,opt,name=y" json:"y,omitempty"`
	RespawnTime      *int32                                       `protobuf:"varint,40,opt,name=respawn_time" json:"respawn_time,omitempty"`
	UltimateCooldown *uint32                                      `protobuf:"varint,41,opt,name=ultimate_cooldown" json:"ultimate_cooldown,omitempty"`
	HasBuyback       *bool                                        `protobuf:"varint,42,opt,name=has_buyback" json:"has_buyback,omitempty"`
	Items            []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,43,rep,name=items" json:"items,omitempty"`
	Stashitems       []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,44,rep,name=stashitems" json:"stashitems,omitempty"`
	Itemshoppinglist []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,45,rep,name=itemshoppinglist" json:"itemshoppinglist,omitempty"`
	Levelpoints      []*CMsgDOTARealtimeGameStats_AbilityList     `protobuf:"bytes,46,rep,name=levelpoints" json:"levelpoints,omitempty"`
	HeroToHeroStats  []*CMsgDOTARealtimeGameStats_HeroToHeroStats `protobuf:"bytes,47,rep,name=hero_to_hero_stats" json:"hero_to_hero_stats,omitempty"`
	HasUltimate      *bool                                        `protobuf:"varint,48,opt,name=has_ultimate" json:"has_ultimate,omitempty"`
	HasUltimateMana  *bool                                        `protobuf:"varint,49,opt,name=has_ultimate_mana" json:"has_ultimate_mana,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_PlayerDetails{}
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_PlayerDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_PlayerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 5}
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetPlayerid() uint32 {
	if m != nil && m.Playerid != nil {
		return *m.Playerid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroid() uint32 {
	if m != nil && m.Heroid != nil {
		return *m.Heroid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthpoints() uint32 {
	if m != nil && m.Healthpoints != nil {
		return *m.Healthpoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxhealthpoints() uint32 {
	if m != nil && m.Maxhealthpoints != nil {
		return *m.Maxhealthpoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthregenrate() float32 {
	if m != nil && m.Healthregenrate != nil {
		return *m.Healthregenrate
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetManapoints() uint32 {
	if m != nil && m.Manapoints != nil {
		return *m.Manapoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxmanapoints() uint32 {
	if m != nil && m.Maxmanapoints != nil {
		return *m.Maxmanapoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetManaregenrate() float32 {
	if m != nil && m.Manaregenrate != nil {
		return *m.Manaregenrate
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseStrength() uint32 {
	if m != nil && m.BaseStrength != nil {
		return *m.BaseStrength
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseAgility() uint32 {
	if m != nil && m.BaseAgility != nil {
		return *m.BaseAgility
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseIntelligence() uint32 {
	if m != nil && m.BaseIntelligence != nil {
		return *m.BaseIntelligence
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseArmor() int32 {
	if m != nil && m.BaseArmor != nil {
		return *m.BaseArmor
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseMovespeed() uint32 {
	if m != nil && m.BaseMovespeed != nil {
		return *m.BaseMovespeed
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseDamage() uint32 {
	if m != nil && m.BaseDamage != nil {
		return *m.BaseDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAgility() uint32 {
	if m != nil && m.Agility != nil {
		return *m.Agility
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetIntelligence() uint32 {
	if m != nil && m.Intelligence != nil {
		return *m.Intelligence
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetArmor() int32 {
	if m != nil && m.Armor != nil {
		return *m.Armor
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMovespeed() uint32 {
	if m != nil && m.Movespeed != nil {
		return *m.Movespeed
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDamage() uint32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroDamage() uint32 {
	if m != nil && m.HeroDamage != nil {
		return *m.HeroDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetTowerDamage() uint32 {
	if m != nil && m.TowerDamage != nil {
		return *m.TowerDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAbilities() []*CMsgDOTARealtimeGameStats_AbilityDetails {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetKillCount() uint32 {
	if m != nil && m.KillCount != nil {
		return *m.KillCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeathCount() uint32 {
	if m != nil && m.DeathCount != nil {
		return *m.DeathCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAssistsCount() uint32 {
	if m != nil && m.AssistsCount != nil {
		return *m.AssistsCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeniesCount() uint32 {
	if m != nil && m.DeniesCount != nil {
		return *m.DeniesCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLhCount() uint32 {
	if m != nil && m.LhCount != nil {
		return *m.LhCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroHealing() uint32 {
	if m != nil && m.HeroHealing != nil {
		return *m.HeroHealing
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetGoldPerMin() uint32 {
	if m != nil && m.GoldPerMin != nil {
		return *m.GoldPerMin
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetXpPerMin() uint32 {
	if m != nil && m.XpPerMin != nil {
		return *m.XpPerMin
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetNetGold() uint32 {
	if m != nil && m.NetGold != nil {
		return *m.NetGold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetGold() uint32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetRespawnTime() int32 {
	if m != nil && m.RespawnTime != nil {
		return *m.RespawnTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetUltimateCooldown() uint32 {
	if m != nil && m.UltimateCooldown != nil {
		return *m.UltimateCooldown
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasBuyback() bool {
	if m != nil && m.HasBuyback != nil {
		return *m.HasBuyback
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetItems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetStashitems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Stashitems
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetItemshoppinglist() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Itemshoppinglist
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevelpoints() []*CMsgDOTARealtimeGameStats_AbilityList {
	if m != nil {
		return m.Levelpoints
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroToHeroStats() []*CMsgDOTARealtimeGameStats_HeroToHeroStats {
	if m != nil {
		return m.HeroToHeroStats
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimate() bool {
	if m != nil && m.HasUltimate != nil {
		return *m.HasUltimate
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimateMana() bool {
	if m != nil && m.HasUltimateMana != nil {
		return *m.HasUltimateMana
	}
	return false
}

type CMsgDOTARealtimeGameStats_BuildingDetails struct {
	Team             *uint32  `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	Heading          *float32 `protobuf:"fixed32,3,opt,name=heading" json:"heading,omitempty"`
	Lane             *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier             *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	Type             *uint32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	X                *float32 `protobuf:"fixed32,7,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,8,opt,name=y" json:"y,omitempty"`
	Destroyed        *bool    `protobuf:"varint,9,opt,name=destroyed" json:"destroyed,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_BuildingDetails{}
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_BuildingDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_BuildingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 6}
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetHeading() float32 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetLane() uint32 {
	if m != nil && m.Lane != nil {
		return *m.Lane
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetTier() uint32 {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetDestroyed() bool {
	if m != nil && m.Destroyed != nil {
		return *m.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStats_KillDetails struct {
	PlayerId         *uint32 `protobuf:"varint,1,opt,name=player_id" json:"player_id,omitempty"`
	DeathTime        *int32  `protobuf:"varint,2,opt,name=death_time" json:"death_time,omitempty"`
	KillerPlayerId   *uint32 `protobuf:"varint,3,opt,name=killer_player_id" json:"killer_player_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_KillDetails{} }
func (m *CMsgDOTARealtimeGameStats_KillDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_KillDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_KillDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 7}
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetDeathTime() int32 {
	if m != nil && m.DeathTime != nil {
		return *m.DeathTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetKillerPlayerId() uint32 {
	if m != nil && m.KillerPlayerId != nil {
		return *m.KillerPlayerId
	}
	return 0
}

type CMsgDOTARealtimeGameStats_BroadcasterDetails struct {
	PlayerId         *uint32 `protobuf:"varint,1,opt,name=player_id" json:"player_id,omitempty"`
	SelectedHero     *uint32 `protobuf:"varint,2,opt,name=selected_hero" json:"selected_hero,omitempty"`
	SelectedGraph    *uint32 `protobuf:"varint,3,opt,name=selected_graph" json:"selected_graph,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_BroadcasterDetails{}
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 8}
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedHero() uint32 {
	if m != nil && m.SelectedHero != nil {
		return *m.SelectedHero
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedGraph() uint32 {
	if m != nil && m.SelectedGraph != nil {
		return *m.SelectedGraph
	}
	return 0
}

type CMsgDOTARealtimeGameStats_PickBanDetails struct {
	Hero             *uint32 `protobuf:"varint,1,opt,name=hero" json:"hero,omitempty"`
	Team             *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_PickBanDetails{}
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_PickBanDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_PickBanDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 9}
}

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) GetHero() uint32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

type CMsgDOTARealtimeGameStats_MatchDetails struct {
	ServerSteamId       *uint64                                         `protobuf:"fixed64,1,opt,name=server_steam_id" json:"server_steam_id,omitempty"`
	Matchid             *uint64                                         `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp           *uint32                                         `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TimeOfDay           *float32                                        `protobuf:"fixed32,4,opt,name=time_of_day" json:"time_of_day,omitempty"`
	IsNightstalkerNight *bool                                           `protobuf:"varint,5,opt,name=is_nightstalker_night" json:"is_nightstalker_night,omitempty"`
	GameTime            *int32                                          `protobuf:"varint,6,opt,name=game_time" json:"game_time,omitempty"`
	TeamidRadiant       *uint32                                         `protobuf:"varint,8,opt,name=teamid_radiant" json:"teamid_radiant,omitempty"`
	TeamidDire          *uint32                                         `protobuf:"varint,9,opt,name=teamid_dire" json:"teamid_dire,omitempty"`
	Picks               []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
	Bans                []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,11,rep,name=bans" json:"bans,omitempty"`
	Kills               []*CMsgDOTARealtimeGameStats_KillDetails        `protobuf:"bytes,12,rep,name=kills" json:"kills,omitempty"`
	Broadcasters        []*CMsgDOTARealtimeGameStats_BroadcasterDetails `protobuf:"bytes,13,rep,name=broadcasters" json:"broadcasters,omitempty"`
	GameMode            *uint32                                         `protobuf:"varint,14,opt,name=game_mode" json:"game_mode,omitempty"`
	LeagueId            *uint32                                         `protobuf:"varint,15,opt,name=league_id" json:"league_id,omitempty"`
	SingleTeam          *bool                                           `protobuf:"varint,16,opt,name=single_team" json:"single_team,omitempty"`
	CheersPeak          *uint32                                         `protobuf:"varint,17,opt,name=cheers_peak" json:"cheers_peak,omitempty"`
	XXX_unrecognized    []byte                                          `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_MatchDetails{}
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_MatchDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_MatchDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 10}
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetMatchid() uint64 {
	if m != nil && m.Matchid != nil {
		return *m.Matchid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTimeOfDay() float32 {
	if m != nil && m.TimeOfDay != nil {
		return *m.TimeOfDay
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetIsNightstalkerNight() bool {
	if m != nil && m.IsNightstalkerNight != nil {
		return *m.IsNightstalkerNight
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidRadiant() uint32 {
	if m != nil && m.TeamidRadiant != nil {
		return *m.TeamidRadiant
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidDire() uint32 {
	if m != nil && m.TeamidDire != nil {
		return *m.TeamidDire
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetPicks() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if m != nil {
		return m.Picks
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetBans() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetKills() []*CMsgDOTARealtimeGameStats_KillDetails {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetBroadcasters() []*CMsgDOTARealtimeGameStats_BroadcasterDetails {
	if m != nil {
		return m.Broadcasters
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetSingleTeam() bool {
	if m != nil && m.SingleTeam != nil {
		return *m.SingleTeam
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetCheersPeak() uint32 {
	if m != nil && m.CheersPeak != nil {
		return *m.CheersPeak
	}
	return 0
}

type CMsgDOTARealtimeGameStats_GraphData struct {
	GraphGold        []int32                                                  `protobuf:"varint,1,rep,name=graph_gold" json:"graph_gold,omitempty"`
	GraphXp          []int32                                                  `protobuf:"varint,2,rep,name=graph_xp" json:"graph_xp,omitempty"`
	GraphKill        []int32                                                  `protobuf:"varint,3,rep,name=graph_kill" json:"graph_kill,omitempty"`
	GraphTower       []int32                                                  `protobuf:"varint,4,rep,name=graph_tower" json:"graph_tower,omitempty"`
	GraphRax         []int32                                                  `protobuf:"varint,5,rep,name=graph_rax" json:"graph_rax,omitempty"`
	TeamLocStats     []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats `protobuf:"bytes,6,rep,name=team_loc_stats" json:"team_loc_stats,omitempty"`
	XXX_unrecognized []byte                                                   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData) Reset()         { *m = CMsgDOTARealtimeGameStats_GraphData{} }
func (m *CMsgDOTARealtimeGameStats_GraphData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_GraphData) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_GraphData) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 11}
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphGold() []int32 {
	if m != nil {
		return m.GraphGold
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphXp() []int32 {
	if m != nil {
		return m.GraphXp
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphKill() []int32 {
	if m != nil {
		return m.GraphKill
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphTower() []int32 {
	if m != nil {
		return m.GraphTower
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphRax() []int32 {
	if m != nil {
		return m.GraphRax
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetTeamLocStats() []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats {
	if m != nil {
		return m.TeamLocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_LocationStats struct {
	Stats            []int32 `protobuf:"varint,1,rep,name=stats" json:"stats,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_GraphData_LocationStats{}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 11, 0}
}

func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) GetStats() []int32 {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats struct {
	LocStats         []*CMsgDOTARealtimeGameStats_GraphData_LocationStats `protobuf:"bytes,1,rep,name=loc_stats" json:"loc_stats,omitempty"`
	XXX_unrecognized []byte                                               `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats{}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{63, 11, 1}
}

func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) GetLocStats() []*CMsgDOTARealtimeGameStats_GraphData_LocationStats {
	if m != nil {
		return m.LocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse struct {
	Match            *CMsgDOTARealtimeGameStatsTerse_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams            []*CMsgDOTARealtimeGameStatsTerse_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings        []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData        *CMsgDOTARealtimeGameStatsTerse_GraphData         `protobuf:"bytes,4,opt,name=graph_data" json:"graph_data,omitempty"`
	DeltaFrame       *bool                                             `protobuf:"varint,5,opt,name=delta_frame" json:"delta_frame,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse) Reset()                    { *m = CMsgDOTARealtimeGameStatsTerse{} }
func (m *CMsgDOTARealtimeGameStatsTerse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStatsTerse) ProtoMessage()               {}
func (*CMsgDOTARealtimeGameStatsTerse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{64} }

func (m *CMsgDOTARealtimeGameStatsTerse) GetMatch() *CMsgDOTARealtimeGameStatsTerse_MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetTeams() []*CMsgDOTARealtimeGameStatsTerse_TeamDetails {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetBuildings() []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetGraphData() *CMsgDOTARealtimeGameStatsTerse_GraphData {
	if m != nil {
		return m.GraphData
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetDeltaFrame() bool {
	if m != nil && m.DeltaFrame != nil {
		return *m.DeltaFrame
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse_TeamDetails struct {
	TeamNumber       *uint32                                         `protobuf:"varint,1,opt,name=team_number" json:"team_number,omitempty"`
	TeamId           *uint32                                         `protobuf:"varint,2,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string                                         `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64                                         `protobuf:"fixed64,4,opt,name=team_logo" json:"team_logo,omitempty"`
	Score            *uint32                                         `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	Players          []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_TeamDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64, 0}
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamNumber() uint32 {
	if m != nil && m.TeamNumber != nil {
		return *m.TeamNumber
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails {
	if m != nil {
		return m.Players
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_PlayerDetails struct {
	Accountid        *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid         *uint32  `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name             *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team             *uint32  `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid           *uint32  `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Level            *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	KillCount        *uint32  `protobuf:"varint,7,opt,name=kill_count" json:"kill_count,omitempty"`
	DeathCount       *uint32  `protobuf:"varint,8,opt,name=death_count" json:"death_count,omitempty"`
	AssistsCount     *uint32  `protobuf:"varint,9,opt,name=assists_count" json:"assists_count,omitempty"`
	DeniesCount      *uint32  `protobuf:"varint,10,opt,name=denies_count" json:"denies_count,omitempty"`
	LhCount          *uint32  `protobuf:"varint,11,opt,name=lh_count" json:"lh_count,omitempty"`
	Gold             *uint32  `protobuf:"varint,12,opt,name=gold" json:"gold,omitempty"`
	X                *float32 `protobuf:"fixed32,13,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,14,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_PlayerDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64, 1}
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetPlayerid() uint32 {
	if m != nil && m.Playerid != nil {
		return *m.Playerid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetHeroid() uint32 {
	if m != nil && m.Heroid != nil {
		return *m.Heroid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetKillCount() uint32 {
	if m != nil && m.KillCount != nil {
		return *m.KillCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeathCount() uint32 {
	if m != nil && m.DeathCount != nil {
		return *m.DeathCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAssistsCount() uint32 {
	if m != nil && m.AssistsCount != nil {
		return *m.AssistsCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeniesCount() uint32 {
	if m != nil && m.DeniesCount != nil {
		return *m.DeniesCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLhCount() uint32 {
	if m != nil && m.LhCount != nil {
		return *m.LhCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetGold() uint32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

type CMsgDOTARealtimeGameStatsTerse_BuildingDetails struct {
	Team             *uint32  `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	Heading          *float32 `protobuf:"fixed32,2,opt,name=heading" json:"heading,omitempty"`
	Type             *uint32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Lane             *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier             *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	X                *float32 `protobuf:"fixed32,6,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,7,opt,name=y" json:"y,omitempty"`
	Destroyed        *bool    `protobuf:"varint,8,opt,name=destroyed" json:"destroyed,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_BuildingDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64, 2}
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetHeading() float32 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetLane() uint32 {
	if m != nil && m.Lane != nil {
		return *m.Lane
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTier() uint32 {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetDestroyed() bool {
	if m != nil && m.Destroyed != nil {
		return *m.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse_MatchDetails struct {
	ServerSteamId              *uint64  `protobuf:"fixed64,1,opt,name=server_steam_id" json:"server_steam_id,omitempty"`
	Matchid                    *uint64  `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp                  *uint32  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	GameTime                   *int32   `protobuf:"varint,4,opt,name=game_time" json:"game_time,omitempty"`
	SteamBroadcasterAccountIds []uint32 `protobuf:"varint,6,rep,name=steam_broadcaster_account_ids" json:"steam_broadcaster_account_ids,omitempty"`
	GameMode                   *uint32  `protobuf:"varint,7,opt,name=game_mode" json:"game_mode,omitempty"`
	LeagueId                   *uint32  `protobuf:"varint,8,opt,name=league_id" json:"league_id,omitempty"`
	XXX_unrecognized           []byte   `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_MatchDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64, 3}
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetMatchid() uint64 {
	if m != nil && m.Matchid != nil {
		return *m.Matchid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetSteamBroadcasterAccountIds() []uint32 {
	if m != nil {
		return m.SteamBroadcasterAccountIds
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CMsgDOTARealtimeGameStatsTerse_GraphData struct {
	GraphGold        []int32 `protobuf:"varint,1,rep,name=graph_gold" json:"graph_gold,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_GraphData{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStatsTerse_GraphData) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStatsTerse_GraphData) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{64, 4}
}

func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) GetGraphGold() []int32 {
	if m != nil {
		return m.GraphGold
	}
	return nil
}

func init() {
	proto.RegisterType((*CSODOTAGameAccountClient)(nil), "CSODOTAGameAccountClient")
	proto.RegisterType((*CSODOTAPartyMember)(nil), "CSODOTAPartyMember")
	proto.RegisterType((*CSODOTAParty)(nil), "CSODOTAParty")
	proto.RegisterType((*CSODOTAPartyInvite)(nil), "CSODOTAPartyInvite")
	proto.RegisterType((*CSODOTAPartyInvite_PartyMember)(nil), "CSODOTAPartyInvite.PartyMember")
	proto.RegisterType((*CSODOTALobbyInvite)(nil), "CSODOTALobbyInvite")
	proto.RegisterType((*CSODOTALobbyInvite_LobbyMember)(nil), "CSODOTALobbyInvite.LobbyMember")
	proto.RegisterType((*CDOTAClientHardwareSpecs)(nil), "CDOTAClientHardwareSpecs")
	proto.RegisterType((*CDOTASaveGame)(nil), "CDOTASaveGame")
	proto.RegisterType((*CDOTASaveGame_Player)(nil), "CDOTASaveGame.Player")
	proto.RegisterType((*CDOTASaveGame_SaveInstance)(nil), "CDOTASaveGame.SaveInstance")
	proto.RegisterType((*CDOTASaveGame_SaveInstance_PlayerPositions)(nil), "CDOTASaveGame.SaveInstance.PlayerPositions")
	proto.RegisterType((*CMsgLeaverState)(nil), "CMsgLeaverState")
	proto.RegisterType((*CDOTALobbyMember)(nil), "CDOTALobbyMember")
	proto.RegisterType((*CDOTALobbyMember_CDOTALobbyMemberXPBonus)(nil), "CDOTALobbyMember.CDOTALobbyMemberXPBonus")
	proto.RegisterType((*CLobbyTeamDetails)(nil), "CLobbyTeamDetails")
	proto.RegisterType((*CLobbyTimedRewardDetails)(nil), "CLobbyTimedRewardDetails")
	proto.RegisterType((*CLobbyBroadcastChannelInfo)(nil), "CLobbyBroadcastChannelInfo")
	proto.RegisterType((*CSODOTALobby)(nil), "CSODOTALobby")
	proto.RegisterType((*CSODOTALobby_CExtraMsg)(nil), "CSODOTALobby.CExtraMsg")
	proto.RegisterType((*CMsgLobbyEventPoints)(nil), "CMsgLobbyEventPoints")
	proto.RegisterType((*CMsgLobbyEventPoints_AccountPoints)(nil), "CMsgLobbyEventPoints.AccountPoints")
	proto.RegisterType((*CMsgDOTAGenericResult)(nil), "CMsgDOTAGenericResult")
	proto.RegisterType((*CMsgDOTABroadcastNotification)(nil), "CMsgDOTABroadcastNotification")
	proto.RegisterType((*CMsgDOTAPCBangTimedReward)(nil), "CMsgDOTAPCBangTimedReward")
	proto.RegisterType((*CAttribute_String)(nil), "CAttribute_String")
	proto.RegisterType((*CAttribute_ItemDynamicRecipeComponent)(nil), "CAttribute_ItemDynamicRecipeComponent")
	proto.RegisterType((*CProtoItemHeroStatue)(nil), "CProtoItemHeroStatue")
	proto.RegisterType((*CProtoItemTeamShowcase)(nil), "CProtoItemTeamShowcase")
	proto.RegisterType((*CProtoItemSocket)(nil), "CProtoItemSocket")
	proto.RegisterType((*CProtoItemSocket_Empty)(nil), "CProtoItemSocket_Empty")
	proto.RegisterType((*CProtoItemSocket_Effect)(nil), "CProtoItemSocket_Effect")
	proto.RegisterType((*CProtoItemSocket_Color)(nil), "CProtoItemSocket_Color")
	proto.RegisterType((*CProtoItemSocket_Strange)(nil), "CProtoItemSocket_Strange")
	proto.RegisterType((*CProtoItemSocket_Spectator)(nil), "CProtoItemSocket_Spectator")
	proto.RegisterType((*CProtoItemSocket_AssetModifier)(nil), "CProtoItemSocket_AssetModifier")
	proto.RegisterType((*CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)(nil), "CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY")
	proto.RegisterType((*CProtoItemSocket_Autograph)(nil), "CProtoItemSocket_Autograph")
	proto.RegisterType((*CProtoItemSocket_StaticVisuals)(nil), "CProtoItemSocket_StaticVisuals")
	proto.RegisterType((*CMatchPlayerAbilityUpgrade)(nil), "CMatchPlayerAbilityUpgrade")
	proto.RegisterType((*CMatchAdditionalUnitInventory)(nil), "CMatchAdditionalUnitInventory")
	proto.RegisterType((*CMatchHeroSelectEvent)(nil), "CMatchHeroSelectEvent")
	proto.RegisterType((*CMsgDOTAProcessFantasyScheduledEvent)(nil), "CMsgDOTAProcessFantasyScheduledEvent")
	proto.RegisterType((*CMsgDOTAHasItemQuery)(nil), "CMsgDOTAHasItemQuery")
	proto.RegisterType((*CMsgDOTAHasItemResponse)(nil), "CMsgDOTAHasItemResponse")
	proto.RegisterType((*CMsgDOTAHasItemDefsQuery)(nil), "CMsgDOTAHasItemDefsQuery")
	proto.RegisterType((*CMsgDOTAHasItemDefsResponse)(nil), "CMsgDOTAHasItemDefsResponse")
	proto.RegisterType((*CMsgDOTAConsumeFantasyTicket)(nil), "CMsgDOTAConsumeFantasyTicket")
	proto.RegisterType((*CMsgDOTAConsumeFantasyTicketFailure)(nil), "CMsgDOTAConsumeFantasyTicketFailure")
	proto.RegisterType((*CMsgGCToGCFantasySetMatchLeague)(nil), "CMsgGCToGCFantasySetMatchLeague")
	proto.RegisterType((*CSODOTAMapLocationState)(nil), "CSODOTAMapLocationState")
	proto.RegisterType((*CMsgNexonPartnerUpdate)(nil), "CMsgNexonPartnerUpdate")
	proto.RegisterType((*CMsgMakeOffering)(nil), "CMsgMakeOffering")
	proto.RegisterType((*CMsgRequestOfferings)(nil), "CMsgRequestOfferings")
	proto.RegisterType((*CMsgRequestOfferingsResponse)(nil), "CMsgRequestOfferingsResponse")
	proto.RegisterType((*CMsgRequestOfferingsResponse_NewYearsOffering)(nil), "CMsgRequestOfferingsResponse.NewYearsOffering")
	proto.RegisterType((*CMsgLeagueAdminList)(nil), "CMsgLeagueAdminList")
	proto.RegisterType((*CMsgPerfectWorldUserLookupRequest)(nil), "CMsgPerfectWorldUserLookupRequest")
	proto.RegisterType((*CMsgPerfectWorldUserLookupResponse)(nil), "CMsgPerfectWorldUserLookupResponse")
	proto.RegisterType((*CCompendiumTimestampedData)(nil), "CCompendiumTimestampedData")
	proto.RegisterType((*CCompendiumGameTimeline)(nil), "CCompendiumGameTimeline")
	proto.RegisterType((*CCompendiumGameList)(nil), "CCompendiumGameList")
	proto.RegisterType((*CAdditionalEquipSlot)(nil), "CAdditionalEquipSlot")
	proto.RegisterType((*CMsgDOTARedeemItem)(nil), "CMsgDOTARedeemItem")
	proto.RegisterType((*CMsgDOTARedeemItemResponse)(nil), "CMsgDOTARedeemItemResponse")
	proto.RegisterType((*CMsgDOTACombatLogEntry)(nil), "CMsgDOTACombatLogEntry")
	proto.RegisterType((*CMsgDOTAProfileCard)(nil), "CMsgDOTAProfileCard")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot)(nil), "CMsgDOTAProfileCard.Slot")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Trophy)(nil), "CMsgDOTAProfileCard.Slot.Trophy")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Stat)(nil), "CMsgDOTAProfileCard.Slot.Stat")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Item)(nil), "CMsgDOTAProfileCard.Slot.Item")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Hero)(nil), "CMsgDOTAProfileCard.Slot.Hero")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Emoticon)(nil), "CMsgDOTAProfileCard.Slot.Emoticon")
	proto.RegisterType((*CMsgGCToClientNewBloomTimingUpdated)(nil), "CMsgGCToClientNewBloomTimingUpdated")
	proto.RegisterType((*CSODOTAPlayerChallenge)(nil), "CSODOTAPlayerChallenge")
	proto.RegisterType((*CMsgClientToGCRerollPlayerChallenge)(nil), "CMsgClientToGCRerollPlayerChallenge")
	proto.RegisterType((*CMsgGCRerollPlayerChallengeResponse)(nil), "CMsgGCRerollPlayerChallengeResponse")
	proto.RegisterType((*CMsgGCTopCustomGamesList)(nil), "CMsgGCTopCustomGamesList")
	proto.RegisterType((*CMsgDOTARealtimeGameStats)(nil), "CMsgDOTARealtimeGameStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_TeamDetails)(nil), "CMsgDOTARealtimeGameStats.TeamDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_ItemDetails)(nil), "CMsgDOTARealtimeGameStats.ItemDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_AbilityDetails)(nil), "CMsgDOTARealtimeGameStats.AbilityDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_HeroToHeroStats)(nil), "CMsgDOTARealtimeGameStats.HeroToHeroStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_AbilityList)(nil), "CMsgDOTARealtimeGameStats.AbilityList")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_PlayerDetails)(nil), "CMsgDOTARealtimeGameStats.PlayerDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_BuildingDetails)(nil), "CMsgDOTARealtimeGameStats.BuildingDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_KillDetails)(nil), "CMsgDOTARealtimeGameStats.KillDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_BroadcasterDetails)(nil), "CMsgDOTARealtimeGameStats.BroadcasterDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_PickBanDetails)(nil), "CMsgDOTARealtimeGameStats.PickBanDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_MatchDetails)(nil), "CMsgDOTARealtimeGameStats.MatchDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData)(nil), "CMsgDOTARealtimeGameStats.GraphData")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData_LocationStats)(nil), "CMsgDOTARealtimeGameStats.GraphData.LocationStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)(nil), "CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse)(nil), "CMsgDOTARealtimeGameStatsTerse")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_TeamDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.TeamDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_PlayerDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.PlayerDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_BuildingDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.BuildingDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_MatchDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.MatchDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_GraphData)(nil), "CMsgDOTARealtimeGameStatsTerse.GraphData")
	proto.RegisterEnum("EDOTAGCMsg", EDOTAGCMsg_name, EDOTAGCMsg_value)
	proto.RegisterEnum("ESpecialPingValue", ESpecialPingValue_name, ESpecialPingValue_value)
	proto.RegisterEnum("DOTA_GameMode", DOTA_GameMode_name, DOTA_GameMode_value)
	proto.RegisterEnum("DOTA_GameState", DOTA_GameState_name, DOTA_GameState_value)
	proto.RegisterEnum("DOTA_GC_TEAM", DOTA_GC_TEAM_name, DOTA_GC_TEAM_value)
	proto.RegisterEnum("DOTA_CM_PICK", DOTA_CM_PICK_name, DOTA_CM_PICK_value)
	proto.RegisterEnum("DOTAConnectionStateT", DOTAConnectionStateT_name, DOTAConnectionStateT_value)
	proto.RegisterEnum("DOTALeaverStatusT", DOTALeaverStatusT_name, DOTALeaverStatusT_value)
	proto.RegisterEnum("DOTALowPriorityBanType", DOTALowPriorityBanType_name, DOTALowPriorityBanType_value)
	proto.RegisterEnum("DOTALobbyReadyState", DOTALobbyReadyState_name, DOTALobbyReadyState_value)
	proto.RegisterEnum("DOTAGameVersion", DOTAGameVersion_name, DOTAGameVersion_value)
	proto.RegisterEnum("DOTAJoinLobbyResult", DOTAJoinLobbyResult_name, DOTAJoinLobbyResult_value)
	proto.RegisterEnum("DOTAMatchVote", DOTAMatchVote_name, DOTAMatchVote_value)
	proto.RegisterEnum("DOTA_LobbyMemberXPBonus", DOTA_LobbyMemberXPBonus_name, DOTA_LobbyMemberXPBonus_value)
	proto.RegisterEnum("DOTALobbyVisibility", DOTALobbyVisibility_name, DOTALobbyVisibility_value)
	proto.RegisterEnum("EDOTAPlayerMMRType", EDOTAPlayerMMRType_name, EDOTAPlayerMMRType_value)
	proto.RegisterEnum("MatchType", MatchType_name, MatchType_value)
	proto.RegisterEnum("DOTABotDifficulty", DOTABotDifficulty_name, DOTABotDifficulty_value)
	proto.RegisterEnum("MatchLanguages", MatchLanguages_name, MatchLanguages_value)
	proto.RegisterEnum("ETournamentTemplate", ETournamentTemplate_name, ETournamentTemplate_value)
	proto.RegisterEnum("ETournamentType", ETournamentType_name, ETournamentType_value)
	proto.RegisterEnum("EEvent", EEvent_name, EEvent_value)
	proto.RegisterEnum("LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("EMatchOutcome", EMatchOutcome_name, EMatchOutcome_value)
	proto.RegisterEnum("EDOTAGCSessionNeed", EDOTAGCSessionNeed_name, EDOTAGCSessionNeed_value)
	proto.RegisterEnum("Fantasy_Roles", Fantasy_Roles_name, Fantasy_Roles_value)
	proto.RegisterEnum("Fantasy_Team_Slots", Fantasy_Team_Slots_name, Fantasy_Team_Slots_value)
	proto.RegisterEnum("Fantasy_Selection_Mode", Fantasy_Selection_Mode_name, Fantasy_Selection_Mode_value)
	proto.RegisterEnum("DOTA_TournamentEvents", DOTA_TournamentEvents_name, DOTA_TournamentEvents_value)
	proto.RegisterEnum("DOTA_COMBATLOG_TYPES", DOTA_COMBATLOG_TYPES_name, DOTA_COMBATLOG_TYPES_value)
	proto.RegisterEnum("DOTAChatChannelTypeT", DOTAChatChannelTypeT_name, DOTAChatChannelTypeT_value)
	proto.RegisterEnum("CSODOTAParty_State", CSODOTAParty_State_name, CSODOTAParty_State_value)
	proto.RegisterEnum("CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
	proto.RegisterEnum("CMsgPerfectWorldUserLookupResponse_EResultCode", CMsgPerfectWorldUserLookupResponse_EResultCode_name, CMsgPerfectWorldUserLookupResponse_EResultCode_value)
	proto.RegisterEnum("CMsgDOTAProfileCard_EStatID", CMsgDOTAProfileCard_EStatID_name, CMsgDOTAProfileCard_EStatID_value)
	proto.RegisterEnum("CSODOTAPlayerChallenge_EFlags", CSODOTAPlayerChallenge_EFlags_name, CSODOTAPlayerChallenge_EFlags_value)
	proto.RegisterEnum("CMsgGCRerollPlayerChallengeResponse_EResult", CMsgGCRerollPlayerChallengeResponse_EResult_name, CMsgGCRerollPlayerChallengeResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTARealtimeGameStats_GraphDataEStat", CMsgDOTARealtimeGameStats_GraphDataEStat_name, CMsgDOTARealtimeGameStats_GraphDataEStat_value)
	proto.RegisterEnum("CMsgDOTARealtimeGameStats_GraphDataELocation", CMsgDOTARealtimeGameStats_GraphDataELocation_name, CMsgDOTARealtimeGameStats_GraphDataELocation_value)
}

var fileDescriptor1 = []byte{
	// 16971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0xbd, 0x09, 0x74, 0x1b, 0xc7,
	0x95, 0x28, 0x6a, 0x52, 0x24, 0x45, 0xb5, 0x24, 0xaa, 0x04, 0x4b, 0x32, 0x45, 0xdb, 0xb2, 0x4d,
	0x3b, 0x5e, 0x68, 0x9b, 0x96, 0x64, 0xc7, 0x24, 0xc1, 0x17, 0x6a, 0x40, 0x00, 0xa4, 0x10, 0x81,
	0x00, 0x0d, 0x80, 0x52, 0xf4, 0xf2, 0xcf, 0xef, 0xd3, 0x02, 0x9a, 0x24, 0x46, 0x20, 0x1a, 0x83,
	0x06, 0x24, 0x71, 0xce, 0xf9, 0xe7, 0x39, 0x71, 0xf6, 0x64, 0xb2, 0x4d, 0xf6, 0xc9, 0xbe, 0xef,
	0xfb, 0x32, 0xd9, 0x97, 0xc9, 0xcb, 0xbe, 0x4e, 0x26, 0xeb, 0x64, 0x79, 0x99, 0xc9, 0x9e, 0x49,
	0xe2, 0x97, 0x7d, 0x9b, 0xe4, 0xdf, 0x7b, 0x6b, 0xe9, 0xaa, 0xee, 0x06, 0xa5, 0xfc, 0xf7, 0xdf,
	0x3f, 0x3f, 0xe7, 0xc4, 0x22, 0xaa, 0x6e, 0x6d, 0xb7, 0xee, 0x5e, 0xb7, 0xaa, 0xad, 0xab, 0x6a,
	0x5e, 0xc7, 0xb1, 0xd7, 0xaa, 0x1b, 0xae, 0xef, 0x3b, 0x6b, 0xae, 0x6f, 0x57, 0xbd, 0x8d, 0x0d,
	0xaf, 0x39, 0xd9, 0x6a, 0x7b, 0x1d, 0x6f, 0xec, 0x72, 0xbf, 0xe3, 0x3a, 0x1b, 0xb2, 0x4e, 0x14,
	0x1e, 0x58, 0xab, 0xfa, 0xb5, 0xb3, 0x5a, 0x1b, 0x5e, 0x3e, 0xfe, 0x8c, 0x9d, 0xd6, 0x68, 0xba,
	0x5c, 0xcc, 0x14, 0x2b, 0xa9, 0x45, 0x67, 0xc3, 0x4d, 0x55, 0xab, 0x5e, 0xb7, 0xd9, 0x49, 0x37,
	0xea, 0x6e, 0xb3, 0x93, 0x18, 0xb5, 0x2c, 0x87, 0x17, 0xd8, 0xf5, 0xda, 0x68, 0xdf, 0xb5, 0x7d,
	0x37, 0xef, 0x9e, 0x1f, 0xb8, 0xf7, 0xe5, 0x57, 0xf7, 0x25, 0x76, 0x59, 0x03, 0xe7, 0xeb, 0x4d,
	0x7f, 0x74, 0x1b, 0x96, 0x25, 0x46, 0xac, 0xa1, 0x86, 0xe7, 0xfb, 0xae, 0x3f, 0x3a, 0x40, 0xbf,
	0x2d, 0xab, 0xff, 0x42, 0x6b, 0x74, 0x17, 0xfd, 0xbd, 0xdb, 0x1a, 0x6c, 0xb8, 0xe7, 0xdc, 0xc6,
	0xe8, 0x6e, 0xfa, 0xb9, 0xdf, 0xda, 0x5d, 0x6f, 0xd6, 0x3b, 0x75, 0xa7, 0x61, 0xfb, 0x67, 0xeb,
	0x8d, 0xc6, 0xe8, 0x08, 0x15, 0xef, 0xb3, 0x76, 0x35, 0x5c, 0xe7, 0x9c, 0xdb, 0xb6, 0x69, 0xb8,
	0xd1, 0x3d, 0x54, 0x7a, 0xc8, 0x3a, 0xe0, 0xbb, 0x55, 0xaf, 0x59, 0x73, 0xda, 0x9b, 0xb6, 0x51,
	0x9f, 0xa4, 0xfa, 0x6b, 0xac, 0x2b, 0x1a, 0xde, 0x79, 0xbb, 0xd5, 0xae, 0x7b, 0xed, 0x7a, 0x67,
	0xd3, 0x86, 0x9a, 0x7a, 0xc3, 0xae, 0x39, 0x1d, 0x77, 0x34, 0x41, 0x00, 0x37, 0x58, 0x57, 0xb5,
	0xda, 0x30, 0x3a, 0x2c, 0xa0, 0xe3, 0x5e, 0xe8, 0xd8, 0xd5, 0x75, 0xa7, 0xa3, 0x43, 0xed, 0x23,
	0xa8, 0x6b, 0xad, 0x51, 0x09, 0x75, 0xce, 0xab, 0x57, 0x5d, 0x1d, 0x62, 0xbf, 0x84, 0x68, 0x38,
	0x7e, 0xc7, 0x76, 0xce, 0x38, 0xcd, 0x9a, 0xd7, 0x74, 0x6b, 0xf6, 0x1a, 0x20, 0x8b, 0x43, 0x1c,
	0x20, 0x88, 0x09, 0x6b, 0x9c, 0x20, 0x82, 0xf9, 0xc6, 0xc1, 0xce, 0x12, 0xec, 0x55, 0xd6, 0x3e,
	0xb1, 0x98, 0x96, 0xdb, 0x74, 0x1a, 0x30, 0x71, 0xbe, 0xa8, 0x2b, 0xa8, 0xf6, 0x6a, 0x6b, 0x3f,
	0x6c, 0x67, 0xab, 0xe1, 0x76, 0x64, 0x53, 0xbf, 0xd3, 0x76, 0x9d, 0xb3, 0xa3, 0xa3, 0x54, 0xcd,
	0xac, 0x61, 0xd8, 0xde, 0xea, 0x7a, 0xbd, 0xb9, 0x36, 0x7a, 0x15, 0x95, 0x00, 0xba, 0xa1, 0xbb,
	0x9a, 0xdb, 0xf6, 0xd7, 0xeb, 0xad, 0xd1, 0xab, 0x25, 0xd4, 0x6a, 0x1b, 0xf6, 0xb0, 0xd6, 0xd8,
	0x1c, 0x3d, 0x44, 0x25, 0x7b, 0xad, 0x1d, 0xab, 0x5e, 0x7b, 0xad, 0x7e, 0x0e, 0x1b, 0x5e, 0x43,
	0x45, 0xd7, 0x5b, 0x57, 0xca, 0xed, 0xad, 0xd5, 0x7d, 0xe7, 0x4c, 0x03, 0x06, 0xd4, 0x96, 0x7e,
	0xa3, 0xdc, 0x83, 0x08, 0x10, 0x9f, 0xee, 0x4d, 0x54, 0x3f, 0x6a, 0x31, 0x7f, 0xdd, 0x3b, 0x5f,
	0x75, 0x7c, 0xd7, 0x5e, 0x77, 0xdb, 0x1e, 0x52, 0xca, 0xcd, 0x54, 0x73, 0x9d, 0x75, 0x70, 0xc3,
	0xe9, 0x54, 0xd7, 0x63, 0x3b, 0xbf, 0x45, 0x62, 0x22, 0x04, 0xc2, 0xbb, 0x9e, 0xa0, 0xda, 0x63,
	0xd6, 0xbe, 0x96, 0xd3, 0xee, 0x34, 0x01, 0x51, 0x72, 0x0a, 0x9d, 0xcd, 0x96, 0x3b, 0x7a, 0x1b,
	0xd4, 0x8e, 0x1c, 0xbd, 0x7c, 0x72, 0x99, 0x57, 0x0a, 0x9a, 0xad, 0x40, 0x55, 0x72, 0xd7, 0x72,
	0xaa, 0x54, 0x29, 0x64, 0x4b, 0x76, 0xa1, 0x58, 0xc8, 0x22, 0x2a, 0xc3, 0x1d, 0xf8, 0x1d, 0x1c,
	0xfd, 0x76, 0xea, 0xff, 0x01, 0xd6, 0xd5, 0xfe, 0x7a, 0xb7, 0x53, 0xf3, 0xce, 0x37, 0x1b, 0xce,
	0xf9, 0x8e, 0xdb, 0xde, 0xa8, 0x37, 0xa1, 0xb6, 0x53, 0x07, 0x1e, 0xe9, 0x38, 0x1b, 0xad, 0xd1,
	0x3b, 0x24, 0x11, 0x19, 0x54, 0x86, 0x7b, 0xe2, 0xdb, 0x6d, 0x77, 0xc3, 0x01, 0x4a, 0x06, 0x64,
	0x1e, 0x96, 0x78, 0xc0, 0x6d, 0x83, 0xd6, 0x9d, 0xfa, 0x39, 0xd7, 0x6e, 0x3b, 0xcd, 0xb3, 0xa3,
	0x47, 0x24, 0x9a, 0xab, 0x4e, 0xa3, 0x7e, 0xa6, 0xed, 0x74, 0xea, 0x5e, 0x33, 0xd2, 0xfc, 0x4e,
	0xb9, 0xeb, 0xbe, 0xd7, 0xf0, 0xec, 0x48, 0x1f, 0x77, 0x51, 0xf5, 0xcd, 0xd6, 0xb5, 0xbc, 0x7a,
	0x8b, 0x8e, 0xee, 0x96, 0x28, 0xd5, 0xfb, 0x38, 0x72, 0xee, 0x08, 0xef, 0xe7, 0x18, 0xd5, 0xde,
	0x69, 0xdd, 0x1a, 0xae, 0xdd, 0xaa, 0xcb, 0xbf, 0xa2, 0x46, 0x07, 0xad, 0xbd, 0x6d, 0xb7, 0xda,
	0xee, 0xd6, 0x3b, 0x1b, 0xc8, 0x23, 0x9c, 0x9d, 0xa7, 0xe4, 0xb4, 0xd7, 0x1d, 0xdf, 0x6e, 0xba,
	0xe7, 0xed, 0xa6, 0xd7, 0xa9, 0xaf, 0xd6, 0xab, 0xd4, 0x91, 0x3f, 0x3a, 0x0d, 0xd5, 0xc3, 0x89,
	0x2b, 0xac, 0x3d, 0x75, 0x1f, 0x39, 0x77, 0xad, 0xeb, 0xda, 0x4e, 0x0d, 0xf0, 0x3b, 0x3a, 0x43,
	0x15, 0x57, 0x5a, 0x97, 0x03, 0xc5, 0x74, 0x41, 0x0a, 0xf0, 0x21, 0x5b, 0x0d, 0x67, 0xd3, 0xad,
	0x8d, 0xfe, 0x17, 0xb5, 0x2f, 0x61, 0x5c, 0x18, 0x60, 0x0f, 0x22, 0xb0, 0x1b, 0xad, 0x43, 0xb8,
	0xbb, 0x9b, 0xbd, 0xe1, 0xe6, 0xa4, 0x94, 0x10, 0x63, 0xe1, 0x72, 0x0d, 0x80, 0x94, 0x1c, 0x4f,
	0xef, 0x02, 0xa5, 0xa7, 0x09, 0x36, 0x4f, 0x60, 0xe3, 0xd6, 0x58, 0xb5, 0xdb, 0x06, 0x52, 0x6a,
	0x34, 0x38, 0xa5, 0x83, 0x34, 0x69, 0x34, 0xdc, 0xe6, 0x9a, 0x8b, 0x34, 0x9f, 0x96, 0x54, 0x80,
	0x6d, 0x6c, 0xa4, 0x21, 0xbb, 0xe5, 0xd5, 0x9b, 0x1d, 0x7f, 0x34, 0x23, 0x05, 0x9f, 0xa4, 0xc1,
	0xd5, 0x86, 0xb3, 0xe6, 0x8f, 0x66, 0xa9, 0x18, 0x30, 0x14, 0x34, 0xe0, 0x98, 0x5d, 0xc0, 0x8a,
	0xf1, 0x0f, 0xf6, 0x59, 0x09, 0x21, 0x98, 0x91, 0xce, 0x37, 0x97, 0xdc, 0x8d, 0x33, 0x6e, 0x3b,
	0x31, 0x65, 0xed, 0x92, 0x24, 0x4d, 0xbc, 0xd0, 0x77, 0xa9, 0xbc, 0x00, 0x12, 0xa1, 0x8e, 0x8a,
	0x02, 0x44, 0xc7, 0x68, 0x3f, 0xed, 0xc1, 0xd5, 0xb8, 0xad, 0x6b, 0xb8, 0xed, 0x2d, 0xd8, 0x6b,
	0xa8, 0xaa, 0x91, 0x00, 0xdf, 0x06, 0x42, 0xbe, 0x9f, 0xf5, 0x85, 0xab, 0x89, 0x2b, 0x46, 0x07,
	0x55, 0x35, 0x60, 0x43, 0xaf, 0x5e, 0x75, 0xea, 0xc8, 0xbe, 0x67, 0x80, 0x46, 0x1c, 0xff, 0xec,
	0xe8, 0x10, 0xad, 0xe1, 0x27, 0xdb, 0xad, 0x5d, 0xfa, 0x1a, 0x12, 0x07, 0xac, 0x61, 0xbe, 0x65,
	0x42, 0x9d, 0x0c, 0x08, 0x75, 0x02, 0xc2, 0x89, 0x8b, 0x30, 0xac, 0xc0, 0xd9, 0x0d, 0xa1, 0x54,
	0xdb, 0xa0, 0x25, 0x43, 0x11, 0xea, 0x99, 0x6d, 0xbc, 0x8c, 0x04, 0xe2, 0x86, 0x98, 0x2a, 0xa7,
	0x82, 0x41, 0xce, 0xd3, 0x43, 0x02, 0x13, 0xfa, 0x80, 0x93, 0x65, 0xac, 0x4a, 0xf6, 0xaf, 0xe4,
	0x50, 0x40, 0xbb, 0xab, 0xab, 0x6e, 0x95, 0xb6, 0x18, 0x5a, 0xb4, 0x51, 0xbc, 0x92, 0xf0, 0xd9,
	0x70, 0xce, 0xca, 0x05, 0x8e, 0x6e, 0x97, 0x1c, 0xdf, 0x76, 0xce, 0xf7, 0x86, 0xba, 0x96, 0xa0,
	0xc6, 0xac, 0x84, 0xd3, 0xe9, 0xb8, 0x1b, 0xad, 0x0e, 0x87, 0xe4, 0x75, 0xd7, 0x51, 0xdd, 0xe5,
	0xd6, 0x4e, 0x59, 0xd7, 0xec, 0x6e, 0x8c, 0x8e, 0xcb, 0x42, 0xea, 0x6a, 0xad, 0xed, 0x75, 0x5b,
	0xfe, 0xe8, 0xce, 0x58, 0x1d, 0xa6, 0x29, 0xdc, 0xcb, 0x09, 0xe0, 0x08, 0x20, 0x82, 0x64, 0x24,
	0xed, 0xf7, 0x7e, 0x5a, 0xa5, 0x35, 0xb9, 0x84, 0x45, 0xb4, 0xcd, 0x7b, 0x97, 0x52, 0x95, 0xf4,
	0x71, 0xbb, 0x72, 0x7a, 0x39, 0x6b, 0xa7, 0x53, 0xe5, 0x95, 0x54, 0x3e, 0x31, 0x6f, 0x8d, 0x9c,
	0xf1, 0x50, 0x5e, 0xaf, 0x02, 0x43, 0x76, 0x41, 0xc1, 0x90, 0x92, 0x1a, 0x39, 0x9a, 0x98, 0x44,
	0xcc, 0xcc, 0x7b, 0x9d, 0x8c, 0xaa, 0x49, 0x1e, 0x98, 0x2f, 0x56, 0xec, 0x4c, 0x6e, 0x61, 0x21,
	0x97, 0x5e, 0xc9, 0x57, 0x4e, 0xdb, 0xcb, 0xa9, 0x72, 0x39, 0x77, 0x32, 0x9b, 0xd8, 0x63, 0x6d,
	0x27, 0x46, 0x80, 0x79, 0x5c, 0x71, 0x71, 0x71, 0x3e, 0xda, 0x03, 0x44, 0x5b, 0xcd, 0x41, 0xc9,
	0x6b, 0x3a, 0x3a, 0x37, 0x9c, 0x0b, 0x28, 0x9e, 0x80, 0x85, 0x40, 0x36, 0x74, 0x3b, 0xb0, 0xab,
	0x63, 0x04, 0x76, 0xc0, 0x1a, 0x21, 0xb0, 0x06, 0xd4, 0x75, 0xd1, 0x5c, 0x19, 0xbd, 0x32, 0x28,
	0x6f, 0x01, 0xb6, 0xdc, 0x55, 0xb7, 0xed, 0x36, 0xab, 0x52, 0x4b, 0xdd, 0x60, 0x6d, 0xe7, 0xd4,
	0xe2, 0x83, 0x02, 0xdc, 0x76, 0xf3, 0xce, 0x10, 0x1d, 0x08, 0xe6, 0x01, 0x1e, 0xf4, 0x40, 0xe5,
	0xda, 0x6b, 0xdd, 0x7a, 0xa3, 0x86, 0x73, 0x3a, 0x24, 0x59, 0x93, 0x1b, 0x50, 0xbc, 0xc2, 0x07,
	0xf5, 0xb8, 0xed, 0x12, 0xe4, 0xfe, 0xf5, 0x52, 0xaf, 0xc2, 0xd4, 0x05, 0xeb, 0xde, 0xa0, 0x8a,
	0x60, 0x5d, 0xbc, 0xe8, 0x01, 0x62, 0xd9, 0xfb, 0x1c, 0x4e, 0x7a, 0xd0, 0x12, 0x49, 0x98, 0xcc,
	0x0d, 0x1f, 0x74, 0xe8, 0x36, 0xd8, 0x97, 0xed, 0x93, 0xd9, 0x2c, 0xfe, 0x46, 0x65, 0x4b, 0x13,
	0x04, 0x4d, 0x6d, 0xff, 0x35, 0x48, 0x0f, 0x18, 0xed, 0x6f, 0xba, 0xa0, 0x8c, 0x7c, 0x52, 0xa9,
	0xc3, 0x89, 0x5b, 0xac, 0x5d, 0x3e, 0x8a, 0xe0, 0x7a, 0xf3, 0x5c, 0x1d, 0x91, 0x75, 0x4b, 0xcc,
	0x5a, 0x73, 0x54, 0x87, 0xa0, 0x20, 0xb4, 0xcf, 0x29, 0xd0, 0x89, 0xde, 0xa0, 0x11, 0xd1, 0x74,
	0x2b, 0x71, 0xef, 0x61, 0x6b, 0x90, 0xd8, 0x27, 0x31, 0x64, 0x01, 0x03, 0xb1, 0xcb, 0x60, 0x5d,
	0xbb, 0x17, 0x72, 0x85, 0x4c, 0xae, 0xb0, 0x68, 0x13, 0xcd, 0x31, 0xb4, 0x03, 0x87, 0x73, 0x05,
	0xf1, 0xab, 0x7f, 0xfc, 0x35, 0xfd, 0xa6, 0xcc, 0x12, 0xfd, 0x03, 0xd7, 0x13, 0xc9, 0xc7, 0x70,
	0x3d, 0xac, 0xc6, 0xe0, 0x7a, 0x60, 0x11, 0x51, 0xd4, 0x04, 0x2c, 0x91, 0x79, 0xb9, 0x23, 0x71,
	0x38, 0xd8, 0xdc, 0x01, 0x5a, 0xc5, 0x35, 0x31, 0xab, 0x98, 0xd4, 0x37, 0x5a, 0x23, 0xde, 0x41,
	0xc2, 0x3f, 0xe8, 0x1b, 0x63, 0x2f, 0x51, 0x64, 0x74, 0x7d, 0x92, 0x19, 0xc3, 0x28, 0x1a, 0x1d,
	0x29, 0x1a, 0xb7, 0x53, 0x09, 0x08, 0x1a, 0x8e, 0x37, 0x7b, 0x0d, 0xba, 0x18, 0xa6, 0xa9, 0x81,
	0x91, 0x0b, 0xb2, 0xbe, 0xde, 0x74, 0x47, 0x77, 0x60, 0x97, 0x63, 0xc7, 0xac, 0x9d, 0xfa, 0x90,
	0x60, 0x11, 0xd3, 0x94, 0xfb, 0x68, 0xca, 0xd0, 0xa5, 0x2f, 0x67, 0xc0, 0x57, 0xa6, 0xcb, 0x5f,
	0x94, 0x5c, 0xc3, 0xe3, 0xcf, 0x0e, 0xb0, 0x95, 0xf7, 0xce, 0x9c, 0xf9, 0xdf, 0x8f, 0x2d, 0x6d,
	0x94, 0x49, 0xfa, 0x5b, 0x4c, 0x1d, 0x98, 0xaa, 0xda, 0xf5, 0x3b, 0x1e, 0xd7, 0x7a, 0x12, 0x69,
	0x03, 0x21, 0x2c, 0x0c, 0xd1, 0x90, 0xa0, 0xaf, 0x74, 0xd8, 0x6a, 0xbb, 0x4a, 0x28, 0x1b, 0x22,
	0xb3, 0x55, 0xab, 0x08, 0x8c, 0x28, 0xc4, 0xde, 0xf6, 0xb1, 0xdb, 0xad, 0x9d, 0xfa, 0x90, 0x17,
	0xc1, 0xd6, 0xf8, 0xfb, 0xfb, 0xc0, 0x2d, 0xc1, 0x39, 0x73, 0x4f, 0xe4, 0xb8, 0xd3, 0xae, 0x9d,
	0x77, 0xda, 0x6e, 0xb9, 0xe5, 0x56, 0x7d, 0x14, 0xbc, 0x0d, 0x6f, 0x0d, 0x4c, 0x8d, 0x06, 0x6c,
	0xa8, 0x57, 0x05, 0x87, 0xc6, 0x83, 0xc5, 0xf6, 0x29, 0xeb, 0xb9, 0xd5, 0xb5, 0xab, 0x9b, 0xd5,
	0x06, 0xea, 0x6f, 0x40, 0x0d, 0xb7, 0xc8, 0x05, 0xc6, 0xa0, 0xba, 0x03, 0xbe, 0x13, 0x34, 0x5c,
	0xdf, 0xf4, 0xa9, 0x07, 0xc0, 0x95, 0xd7, 0xde, 0x24, 0xdc, 0x0d, 0xa1, 0x1b, 0x02, 0x9b, 0x74,
	0xf7, 0x5d, 0xa8, 0xc7, 0x6c, 0x8f, 0xab, 0x98, 0x61, 0x1c, 0xaf, 0xdb, 0x6a, 0x78, 0x0e, 0x68,
	0x02, 0x17, 0x0c, 0x09, 0x90, 0x00, 0x30, 0x25, 0x81, 0x23, 0xd4, 0xdf, 0x24, 0x8c, 0xd0, 0xfe,
	0xb1, 0xd7, 0x3d, 0xbf, 0xc3, 0x89, 0x6a, 0xfc, 0x33, 0xdb, 0xac, 0xdd, 0xb4, 0x82, 0x32, 0x58,
	0xfa, 0xe8, 0x5a, 0xe1, 0x2a, 0xb9, 0x74, 0x54, 0x08, 0xc6, 0x2d, 0x75, 0xce, 0x71, 0x64, 0xd1,
	0x04, 0x51, 0x9d, 0x6d, 0x27, 0xa3, 0xa3, 0xcd, 0x75, 0xde, 0xce, 0xa3, 0xfb, 0x27, 0x8d, 0x5e,
	0x26, 0x97, 0xa9, 0x16, 0x0c, 0xb9, 0x11, 0x6a, 0x0a, 0x4e, 0x58, 0xc7, 0x01, 0x39, 0x28, 0x37,
	0xfb, 0xca, 0x10, 0x38, 0xfe, 0x91, 0x13, 0x30, 0x63, 0xa7, 0xad, 0x21, 0xd5, 0x7c, 0x00, 0x11,
	0x2e, 0xcc, 0x87, 0xdd, 0xa4, 0x17, 0xec, 0xc5, 0xb4, 0x5d, 0xc9, 0xa6, 0x96, 0x92, 0x07, 0xf4,
	0x5f, 0xf6, 0x62, 0xb1, 0x98, 0xb1, 0x17, 0x57, 0x4e, 0x97, 0xd5, 0xa6, 0xf5, 0xd3, 0xa6, 0xc1,
	0x2f, 0xb4, 0x82, 0x38, 0xd5, 0x8d, 0x7d, 0xab, 0xcf, 0xda, 0xa5, 0x8f, 0x85, 0x6b, 0x53, 0x84,
	0x20, 0xd6, 0x06, 0xe4, 0x8a, 0x83, 0x1e, 0xb1, 0xfd, 0xaa, 0xd7, 0x76, 0x85, 0xef, 0x28, 0x0a,
	0x8f, 0x8a, 0x42, 0xae, 0xd4, 0xb3, 0xdc, 0x8c, 0x42, 0x0f, 0xc9, 0xf3, 0xeb, 0xdc, 0xa2, 0x1c,
	0xa4, 0xf5, 0xdd, 0xba, 0xc5, 0xfa, 0x04, 0x6e, 0x96, 0x65, 0x13, 0x14, 0x03, 0x1c, 0x49, 0x9c,
	0x7a, 0x77, 0x9b, 0x08, 0x27, 0x5d, 0x3f, 0x76, 0x93, 0xb5, 0x27, 0xdc, 0x6c, 0x87, 0xd5, 0x77,
	0x81, 0x30, 0xd3, 0x8f, 0x7f, 0x6e, 0xd2, 0xec, 0xfb, 0xc7, 0xbf, 0xd8, 0x67, 0xed, 0x49, 0x2f,
	0xf9, 0x6b, 0x79, 0x72, 0xdd, 0xb8, 0x64, 0x84, 0xc9, 0x37, 0x90, 0xaa, 0x85, 0x5b, 0xc1, 0x49,
	0x70, 0x4e, 0x58, 0x29, 0xbc, 0xac, 0x9f, 0x30, 0xbc, 0x47, 0x60, 0x18, 0xca, 0xb9, 0x49, 0x72,
	0x90, 0xff, 0x4e, 0x2d, 0x65, 0x4b, 0x2b, 0xf9, 0x6c, 0xd9, 0x2e, 0x57, 0x52, 0x95, 0xac, 0x9d,
	0x2b, 0xe4, 0x2a, 0x48, 0x52, 0xc2, 0x3d, 0xac, 0x81, 0x0f, 0x58, 0x05, 0x0b, 0x84, 0x50, 0x35,
	0x8c, 0xa6, 0xfd, 0x6a, 0xbd, 0x0d, 0x4e, 0xe6, 0x99, 0x86, 0xe7, 0xd5, 0xec, 0x75, 0xa7, 0x05,
	0xba, 0x02, 0x6a, 0x07, 0x84, 0x39, 0xb7, 0x1f, 0xd4, 0x6e, 0x15, 0x38, 0x85, 0x1b, 0x2c, 0xa0,
	0x3b, 0x7c, 0xd0, 0xf0, 0x3e, 0xd1, 0x1a, 0x99, 0xe2, 0x60, 0x99, 0xf9, 0xa8, 0x9a, 0x81, 0x1f,
	0x9a, 0xd0, 0xaf, 0x20, 0xd4, 0xa7, 0x0e, 0x59, 0x2c, 0xad, 0xc4, 0x83, 0xe0, 0x4f, 0x66, 0xf5,
	0x0b, 0xf1, 0x33, 0x24, 0xc4, 0x0f, 0xe0, 0x52, 0xba, 0x77, 0xfd, 0xc2, 0x95, 0xe0, 0x24, 0xb4,
	0xed, 0xff, 0x09, 0x09, 0x0d, 0x49, 0x12, 0xf2, 0x1b, 0x5e, 0x47, 0x58, 0x5d, 0x4c, 0x33, 0x0e,
	0x77, 0x49, 0x01, 0xb4, 0xe1, 0x76, 0x1c, 0x5b, 0x0f, 0x20, 0xec, 0x41, 0xf1, 0x06, 0x65, 0x17,
	0x5a, 0x22, 0x74, 0x80, 0x0b, 0xe3, 0x05, 0xb6, 0x03, 0x32, 0xa2, 0x06, 0x08, 0xe1, 0xd1, 0x83,
	0xff, 0x62, 0xed, 0x16, 0x78, 0x14, 0xd2, 0x9e, 0x09, 0x0b, 0x91, 0x16, 0xab, 0x76, 0xb1, 0xeb,
	0xdb, 0x9d, 0x24, 0xa3, 0xf9, 0xe6, 0xb3, 0xa9, 0x93, 0xd2, 0x5e, 0x06, 0xa1, 0x28, 0x5a, 0xa3,
	0xe2, 0x46, 0x02, 0xbc, 0x4a, 0x8e, 0x0f, 0x76, 0x3f, 0x20, 0xb0, 0x31, 0xba, 0x57, 0x59, 0xf0,
	0xed, 0xfa, 0xdf, 0x82, 0x87, 0xef, 0xae, 0x02, 0x3b, 0xd6, 0xdc, 0x0b, 0x22, 0xf8, 0x00, 0xbe,
	0x80, 0xb2, 0x83, 0x24, 0xea, 0xf6, 0x91, 0x65, 0xd1, 0xcb, 0xb1, 0xdd, 0x7f, 0xa9, 0xc6, 0x3c,
	0x8c, 0xe9, 0x36, 0xcd, 0x9e, 0x0f, 0x50, 0xcf, 0x33, 0x96, 0x45, 0x2a, 0x86, 0x9c, 0x18, 0x32,
	0xdc, 0x2e, 0x79, 0x6b, 0x60, 0xba, 0x4d, 0xf7, 0x02, 0xda, 0xf3, 0x55, 0xfb, 0x0c, 0x98, 0x5d,
	0x20, 0xd0, 0x84, 0x59, 0x07, 0xf2, 0x2f, 0x54, 0x83, 0x5b, 0x78, 0x90, 0xb6, 0xf0, 0x41, 0x96,
	0x05, 0x88, 0x3f, 0xe3, 0x35, 0xbb, 0x3e, 0x19, 0x69, 0xc8, 0xa3, 0xb7, 0x4c, 0x86, 0xe9, 0x29,
	0x52, 0xf0, 0x90, 0xe5, 0x79, 0x6c, 0x82, 0x0c, 0x84, 0xde, 0x29, 0xba, 0x52, 0x60, 0x04, 0x52,
	0xf0, 0x62, 0x2f, 0x72, 0x69, 0x15, 0x46, 0x68, 0x3b, 0x1b, 0x4e, 0x93, 0x4c, 0xb4, 0x61, 0xf2,
	0xe1, 0x34, 0xed, 0x02, 0x62, 0xbf, 0xd6, 0xad, 0x76, 0xc8, 0x35, 0x20, 0x63, 0x6d, 0x6c, 0xc9,
	0xba, 0xa2, 0xd7, 0x18, 0x40, 0x65, 0xca, 0x55, 0x22, 0x2a, 0x93, 0x13, 0xe6, 0x8c, 0x8d, 0x54,
	0xe6, 0x7b, 0xdd, 0x76, 0xd5, 0xb5, 0xcf, 0xba, 0x5c, 0x11, 0x0c, 0x8c, 0x7f, 0xab, 0xdf, 0xda,
	0x9b, 0xa6, 0xbe, 0x2a, 0x80, 0xc8, 0x0c, 0xd0, 0x57, 0xbd, 0xe1, 0xe3, 0xc4, 0x48, 0x4d, 0x99,
	0xaa, 0x8b, 0x8a, 0x3a, 0xce, 0x9a, 0xd0, 0xbf, 0x9a, 0xed, 0x31, 0x20, 0x85, 0x0e, 0x15, 0x80,
	0xce, 0xf2, 0x84, 0xe0, 0x07, 0xe2, 0xa2, 0xa2, 0x33, 0x18, 0x35, 0xa1, 0xf2, 0x21, 0x2a, 0x87,
	0x3d, 0x10, 0xe5, 0x4d, 0x24, 0x0e, 0xaa, 0xd9, 0x4e, 0x35, 0x60, 0xa3, 0x51, 0x8d, 0x0c, 0x0d,
	0x91, 0x5a, 0x25, 0x43, 0x85, 0x1b, 0xb3, 0x34, 0xa5, 0x1d, 0x34, 0x01, 0x94, 0xbc, 0x54, 0x86,
	0x73, 0xb2, 0xe4, 0x2c, 0x95, 0xcd, 0xbb, 0x53, 0x06, 0x8d, 0x78, 0x09, 0x8d, 0xb1, 0x4b, 0xea,
	0x32, 0x5e, 0x16, 0x4c, 0x6b, 0x37, 0x55, 0x1c, 0xb4, 0xf6, 0xca, 0x8a, 0x60, 0x5e, 0x23, 0x54,
	0x05, 0xc8, 0xa5, 0xf0, 0xc2, 0x1e, 0x29, 0xcc, 0xf5, 0xed, 0x64, 0xb4, 0x9d, 0x5c, 0xa9, 0xae,
	0x7b, 0x1b, 0xdc, 0xb5, 0x26, 0xb6, 0x19, 0x1e, 0x7f, 0x14, 0x6a, 0x78, 0x8e, 0x61, 0x10, 0xc6,
	0xb5, 0x92, 0x8b, 0xbc, 0x2b, 0x11, 0x0d, 0xf8, 0x01, 0xb3, 0x63, 0x43, 0x63, 0xa9, 0x7e, 0xc9,
	0x6b, 0xd0, 0x95, 0xdf, 0x6d, 0xb5, 0x1a, 0xe0, 0xf6, 0xb7, 0x51, 0xbe, 0x72, 0xd1, 0x88, 0x61,
	0x45, 0x9f, 0xc4, 0x7a, 0xcd, 0xae, 0xb5, 0xbd, 0x96, 0x90, 0x89, 0x09, 0x23, 0x80, 0x39, 0x28,
	0x83, 0x95, 0x60, 0x03, 0x82, 0x21, 0x27, 0x9c, 0xd4, 0xb6, 0x35, 0xc6, 0xe7, 0x31, 0xdf, 0x06,
	0x15, 0x5f, 0x75, 0xfc, 0x4e, 0x9a, 0xf3, 0x77, 0xae, 0xb9, 0xea, 0x61, 0x0f, 0x82, 0xdd, 0x55,
	0x08, 0x14, 0x17, 0x44, 0x7d, 0xb6, 0x37, 0xc9, 0x69, 0x16, 0xfa, 0x10, 0xd6, 0x0e, 0x5e, 0x69,
	0xb5, 0x5d, 0x6f, 0xa1, 0xb8, 0x10, 0xc4, 0x00, 0xf3, 0x92, 0x2e, 0x0c, 0x87, 0xc5, 0x79, 0xed,
	0x18, 0x7f, 0xcf, 0x3e, 0xe5, 0x18, 0xd3, 0xd0, 0x68, 0xf4, 0x71, 0x45, 0x12, 0x32, 0xfa, 0xc6,
	0x03, 0x63, 0xae, 0x9f, 0x78, 0x6b, 0x6f, 0x84, 0x95, 0x12, 0x37, 0x61, 0xec, 0x74, 0xb5, 0x63,
	0x4b, 0xc0, 0xed, 0xbd, 0x00, 0x0d, 0x2f, 0x7b, 0xa7, 0x30, 0x78, 0xc0, 0xa8, 0x6c, 0x9f, 0xe3,
	0x45, 0x64, 0xe1, 0x25, 0xfb, 0x0e, 0x2b, 0xdd, 0x8d, 0x7e, 0xb6, 0x50, 0xd3, 0x28, 0xe5, 0xc0,
	0xd4, 0x44, 0x9f, 0x4d, 0x7a, 0x14, 0x16, 0xf9, 0xe4, 0xca, 0xff, 0x1e, 0x30, 0xfd, 0x6f, 0x1a,
	0x58, 0xf3, 0xbf, 0x51, 0x6e, 0x0a, 0xbd, 0x33, 0x48, 0xa8, 0xb9, 0xcb, 0xb2, 0xf8, 0x92, 0x89,
	0x39, 0x77, 0x51, 0xeb, 0x2b, 0xcc, 0xd6, 0x9c, 0x3c, 0x50, 0xfc, 0x6d, 0xcf, 0x15, 0x4e, 0xa6,
	0xf2, 0xb9, 0x0c, 0xe2, 0xde, 0x69, 0xa0, 0x29, 0x5f, 0x5d, 0x77, 0x1d, 0x50, 0x6e, 0xbb, 0x69,
	0x9f, 0x81, 0x5e, 0x56, 0xeb, 0x8d, 0x86, 0x7d, 0xbe, 0xde, 0x59, 0x07, 0xde, 0x86, 0xf2, 0x91,
	0xc0, 0x8e, 0xef, 0x80, 0x80, 0xa4, 0x95, 0xec, 0xa1, 0x32, 0xb9, 0x38, 0xe2, 0x18, 0x46, 0x53,
	0xb9, 0xd9, 0xda, 0x45, 0xcc, 0x55, 0xe3, 0xe4, 0x07, 0x14, 0x8a, 0x18, 0x4c, 0x4c, 0x46, 0x25,
	0x00, 0xa0, 0xa1, 0xd3, 0xed, 0x00, 0xfd, 0x80, 0xe5, 0xd8, 0x40, 0xc3, 0xb3, 0x29, 0x84, 0x3d,
	0xf2, 0x27, 0x08, 0x11, 0xec, 0x54, 0x77, 0xde, 0x41, 0x74, 0x6a, 0xc5, 0xd2, 0xbc, 0xde, 0x27,
	0xf4, 0xc3, 0x6e, 0x81, 0x7b, 0x1e, 0x48, 0xe1, 0xb1, 0x66, 0xc4, 0xbf, 0x69, 0x41, 0x1c, 0xf8,
	0x8b, 0x2d, 0x08, 0x40, 0x47, 0xb3, 0xbb, 0x61, 0xfb, 0x60, 0x2d, 0x03, 0x28, 0x1a, 0xc7, 0x57,
	0x48, 0xa6, 0x0f, 0x02, 0x10, 0xc2, 0x21, 0x9f, 0x84, 0x7d, 0xd9, 0xb0, 0x5b, 0xf5, 0xea, 0x59,
	0x52, 0x70, 0x4a, 0x5d, 0xa4, 0x97, 0xec, 0xe5, 0x5c, 0xfa, 0x44, 0x72, 0x44, 0xfe, 0x2a, 0xa5,
	0x0a, 0x99, 0xe2, 0x92, 0x61, 0xc5, 0x1e, 0x22, 0x11, 0x70, 0xc8, 0x62, 0x7c, 0x4b, 0xc4, 0x78,
	0x32, 0xc0, 0x3c, 0x9c, 0x1c, 0xe8, 0xb4, 0xbb, 0x2e, 0x68, 0xbb, 0x70, 0x34, 0xe2, 0x86, 0x9e,
	0xd1, 0x88, 0xcb, 0x43, 0xd1, 0x88, 0xe3, 0xa9, 0x52, 0x06, 0x14, 0xf9, 0x2e, 0x42, 0x07, 0xa0,
	0xca, 0x47, 0x3c, 0x3d, 0x80, 0x9a, 0xb3, 0x49, 0x79, 0x68, 0x71, 0x92, 0x97, 0x27, 0xf7, 0x21,
	0x32, 0x6c, 0xd0, 0xe0, 0xe5, 0x5c, 0xb1, 0x60, 0xa7, 0x57, 0x4a, 0xa5, 0x6c, 0xa1, 0x92, 0x98,
	0xb2, 0xf6, 0x71, 0xb9, 0xd0, 0x26, 0x11, 0xa3, 0x36, 0xf9, 0x46, 0xda, 0xe4, 0x83, 0x93, 0x3d,
	0x85, 0x10, 0xd9, 0x23, 0x60, 0x31, 0xa1, 0x56, 0xb8, 0x89, 0xe8, 0xe4, 0x0e, 0xeb, 0x72, 0x5c,
	0x09, 0xda, 0x2c, 0xfa, 0x72, 0x6e, 0x21, 0x27, 0x3e, 0x66, 0x39, 0xd8, 0x05, 0x0f, 0x7e, 0x02,
	0xb2, 0x26, 0xc4, 0x49, 0xc2, 0x7e, 0x19, 0xf4, 0x27, 0xab, 0xc6, 0x6e, 0x3b, 0xb5, 0xba, 0x03,
	0xee, 0xc4, 0xad, 0x72, 0xf3, 0xaf, 0xb6, 0x12, 0x26, 0x44, 0xad, 0xde, 0xe6, 0x31, 0x6f, 0xaa,
	0xc6, 0x93, 0x12, 0x74, 0x45, 0x24, 0x2d, 0xdd, 0x2e, 0x05, 0x2f, 0xd0, 0x52, 0x1d, 0x5c, 0x1e,
	0xe2, 0xa6, 0x49, 0xe9, 0xf4, 0x8a, 0xde, 0x6d, 0x51, 0x49, 0x67, 0x36, 0x77, 0x04, 0xd6, 0x49,
	0xdb, 0x35, 0x6a, 0x0e, 0xcb, 0x18, 0x0b, 0xd8, 0x97, 0x40, 0xad, 0x60, 0x5c, 0xa2, 0x88, 0xad,
	0x89, 0x38, 0x36, 0x8d, 0x0c, 0xe5, 0xd2, 0xca, 0x3a, 0x2a, 0xa0, 0xb7, 0xc3, 0xee, 0xe3, 0xc1,
	0x0a, 0x45, 0xb2, 0x87, 0x93, 0x83, 0xab, 0x4e, 0xc3, 0x77, 0x13, 0xd3, 0xd6, 0x6e, 0x3a, 0xa5,
	0xea, 0x9c, 0x03, 0x8c, 0x83, 0x81, 0x3d, 0xfa, 0x40, 0xda, 0xb5, 0xbd, 0x9c, 0xa9, 0x33, 0x50,
	0x55, 0x39, 0x99, 0xc1, 0x8a, 0xe4, 0x88, 0x56, 0x62, 0x1f, 0x39, 0x4c, 0x91, 0x74, 0x4d, 0xd7,
	0x13, 0xeb, 0xde, 0x4d, 0xf8, 0x0f, 0x9c, 0x4f, 0x0c, 0x02, 0x11, 0x03, 0x4f, 0x51, 0x05, 0x28,
	0x28, 0x51, 0xa1, 0x6d, 0xcb, 0x34, 0xcd, 0x6f, 0xa7, 0xb5, 0x0d, 0x24, 0xb0, 0x08, 0x3b, 0xcf,
	0x5a, 0x07, 0xce, 0x48, 0x29, 0x6f, 0x2b, 0xb9, 0x0e, 0x72, 0x7e, 0x34, 0x29, 0xbd, 0xa7, 0xde,
	0xaa, 0xe0, 0x90, 0x75, 0x80, 0x9b, 0xdf, 0xca, 0x2e, 0x24, 0x2d, 0x00, 0x7b, 0x30, 0xab, 0x9c,
	0x0b, 0x8e, 0xcc, 0xba, 0x8c, 0x64, 0x13, 0xca, 0x82, 0xb0, 0x03, 0x05, 0xae, 0x87, 0x81, 0x8c,
	0x46, 0xdc, 0x0b, 0x9d, 0xb6, 0x63, 0xcb, 0xb3, 0xb8, 0xd1, 0x39, 0x1a, 0x3d, 0x24, 0xfd, 0xd2,
	0x59, 0x04, 0x02, 0x8f, 0x23, 0x71, 0x9d, 0x70, 0x5b, 0x10, 0x1f, 0x14, 0xc8, 0xdf, 0x79, 0x74,
	0xc4, 0xf4, 0x83, 0x7a, 0xfa, 0x06, 0x29, 0x1a, 0x71, 0xce, 0xda, 0xcd, 0x99, 0xd6, 0xeb, 0x76,
	0xc0, 0x82, 0x70, 0x29, 0xc6, 0x3c, 0x02, 0x9d, 0x64, 0x29, 0x8e, 0x58, 0xe4, 0xa5, 0xc9, 0x2b,
	0xce, 0xda, 0x46, 0x81, 0xbd, 0xd2, 0x3c, 0xdb, 0xf4, 0xce, 0x37, 0xe3, 0x9c, 0x87, 0xb4, 0x14,
	0xbc, 0xa1, 0xd0, 0x41, 0x86, 0x64, 0x42, 0xaf, 0x78, 0x57, 0xd6, 0x8c, 0x77, 0x81, 0x78, 0x94,
	0x1b, 0x5a, 0x6f, 0xda, 0xd2, 0xf1, 0x5d, 0x94, 0xa2, 0x53, 0x6d, 0xf6, 0x05, 0x55, 0x77, 0x9c,
	0xea, 0xc2, 0x51, 0xf0, 0xdc, 0xa5, 0x1a, 0xce, 0x37, 0x5a, 0x87, 0x80, 0x1a, 0xc8, 0x4f, 0x17,
	0x61, 0x6d, 0xcf, 0x36, 0x85, 0xf0, 0x83, 0x69, 0x80, 0x8c, 0x65, 0x9d, 0xab, 0xfb, 0xf5, 0x33,
	0xf5, 0x06, 0x6e, 0xdb, 0x09, 0xea, 0x7e, 0xdf, 0xa4, 0xda, 0x9b, 0x93, 0xaa, 0x2e, 0x39, 0x16,
	0x53, 0x68, 0x2f, 0x77, 0xcf, 0x34, 0xea, 0xd5, 0xb8, 0x60, 0x49, 0x9e, 0xd4, 0x2e, 0x4c, 0x43,
	0xaf, 0x70, 0x40, 0xa5, 0x40, 0xad, 0x8b, 0xcc, 0x66, 0x93, 0x52, 0x1c, 0x5d, 0x22, 0xf4, 0x02,
	0x2b, 0x88, 0xc3, 0x93, 0x80, 0xb2, 0x0a, 0x8a, 0x49, 0x79, 0x8d, 0x44, 0x7c, 0x51, 0xc5, 0x3f,
	0x62, 0xc3, 0x30, 0xcb, 0x18, 0x86, 0x41, 0x3b, 0x1a, 0x8f, 0x3a, 0xeb, 0x1e, 0x78, 0x3d, 0xa2,
	0x4b, 0x22, 0x0c, 0xa0, 0xc1, 0x7b, 0x60, 0x6b, 0x06, 0x0c, 0x00, 0x41, 0x32, 0x80, 0x9c, 0x76,
	0x1d, 0x78, 0xb0, 0x84, 0x3b, 0x3b, 0x76, 0x8b, 0xb5, 0x23, 0x20, 0x4c, 0x4b, 0xb9, 0x89, 0x64,
	0x58, 0x03, 0x6d, 0x74, 0x68, 0x9b, 0xd1, 0x22, 0xda, 0x35, 0x5e, 0x0b, 0x07, 0x10, 0x77, 0x5a,
	0xdb, 0x4b, 0xd9, 0x54, 0xe6, 0xf4, 0xca, 0x32, 0x1b, 0x00, 0x83, 0x60, 0x67, 0x39, 0x5b, 0x42,
	0x69, 0x9d, 0xad, 0x40, 0x41, 0x5f, 0x62, 0xbb, 0xb5, 0xad, 0xb4, 0x52, 0x60, 0xfd, 0x18, 0x54,
	0x5c, 0x2e, 0x96, 0x2b, 0x28, 0xcd, 0xd9, 0x36, 0xfc, 0x55, 0x28, 0x56, 0xa8, 0x1d, 0x1b, 0x84,
	0x51, 0x76, 0xf1, 0x56, 0x18, 0xa6, 0x5e, 0x2c, 0xb0, 0xa1, 0xf1, 0xfb, 0xfb, 0xac, 0x1d, 0xca,
	0x50, 0x00, 0x8e, 0x93, 0xa6, 0x02, 0xfb, 0xb3, 0xfc, 0x5f, 0x1f, 0xb6, 0xe2, 0xa1, 0x71, 0x11,
	0xaa, 0xbc, 0x8c, 0xc6, 0x28, 0xa5, 0xd2, 0x95, 0x5c, 0x3a, 0x0b, 0x43, 0x8f, 0x58, 0x56, 0xa5,
	0xb8, 0x52, 0x2a, 0xc0, 0x88, 0x85, 0x0a, 0x43, 0x97, 0x60, 0x24, 0x5d, 0x2c, 0x2e, 0xdb, 0xa8,
	0x8d, 0x78, 0x0b, 0xb4, 0xc0, 0xf7, 0xe6, 0xb3, 0x8b, 0xa9, 0xf4, 0x69, 0xee, 0x38, 0xf1, 0xe2,
	0x41, 0x10, 0xb2, 0x57, 0x88, 0xe2, 0x72, 0x31, 0x5f, 0xb4, 0xef, 0x59, 0xc9, 0xae, 0x64, 0x45,
	0xe5, 0x10, 0xb6, 0x49, 0x17, 0x97, 0x96, 0xb3, 0x95, 0x5c, 0x25, 0x77, 0x52, 0x16, 0x6f, 0x87,
	0x49, 0x32, 0x31, 0x9d, 0x23, 0x27, 0x8f, 0x88, 0xd2, 0x61, 0x90, 0xe1, 0x7b, 0x4e, 0x65, 0xb3,
	0x27, 0xb2, 0x85, 0x8c, 0x4d, 0x93, 0xc9, 0x9e, 0x66, 0x68, 0x55, 0xee, 0xc9, 0x17, 0xd3, 0x00,
	0x19, 0x4c, 0xc5, 0x1a, 0xff, 0x7c, 0xbf, 0xb5, 0x8f, 0x42, 0x11, 0xb8, 0x6c, 0xe2, 0xa4, 0x65,
	0x3a, 0x6a, 0xc2, 0x3d, 0xe0, 0xe7, 0xd8, 0x6a, 0x57, 0x66, 0xad, 0x11, 0x69, 0x01, 0x8b, 0xe3,
	0x28, 0x6e, 0x47, 0x5e, 0x3f, 0x19, 0xd7, 0xc1, 0xa4, 0xe0, 0x1c, 0xfe, 0x6b, 0xec, 0x87, 0x7d,
	0xd6, 0x6e, 0xa3, 0x24, 0x64, 0x50, 0xf7, 0x49, 0xd3, 0xa7, 0xe9, 0xb5, 0x37, 0x30, 0xa8, 0x26,
	0x47, 0x10, 0x14, 0x0a, 0x94, 0xb4, 0x51, 0x07, 0x43, 0x44, 0x94, 0x6f, 0x93, 0x09, 0x01, 0x20,
	0x52, 0x54, 0xd8, 0x02, 0x5a, 0xaf, 0x3a, 0xe7, 0x50, 0x3c, 0x0a, 0xf7, 0x40, 0x05, 0x6c, 0x8d,
	0x62, 0x11, 0x03, 0x18, 0x92, 0xda, 0x8e, 0x77, 0x09, 0xde, 0x6f, 0xa3, 0x26, 0xc2, 0x07, 0xd0,
	0xc2, 0x1c, 0x8f, 0x57, 0x0e, 0xcb, 0x03, 0x7c, 0xb3, 0xbb, 0x55, 0xaf, 0xde, 0x10, 0x7d, 0x52,
	0x38, 0x77, 0xfc, 0x56, 0x6b, 0x3f, 0x62, 0x84, 0x6c, 0x0a, 0x54, 0x7c, 0xf5, 0x6a, 0x89, 0xe2,
	0x27, 0xb0, 0xe4, 0xed, 0x2e, 0x0f, 0xa5, 0xf0, 0xf5, 0x26, 0xfb, 0x8e, 0x8e, 0x1f, 0xb6, 0xae,
	0x96, 0xc0, 0x4a, 0x55, 0x14, 0xb4, 0xf3, 0x4f, 0x1e, 0xa5, 0x20, 0xe1, 0xce, 0xfd, 0xc4, 0xf1,
	0x7b, 0xac, 0x83, 0xb2, 0xc5, 0x72, 0x7a, 0x1e, 0x5c, 0x02, 0xcd, 0xe0, 0x40, 0xe8, 0x16, 0x08,
	0x37, 0xaf, 0xe9, 0x08, 0xaf, 0x12, 0x0a, 0xd0, 0xff, 0x01, 0xf7, 0x47, 0x20, 0x13, 0xf0, 0xde,
	0xaa, 0xa2, 0xef, 0x1d, 0x04, 0x7a, 0xc7, 0xc7, 0x81, 0xb8, 0x52, 0x9d, 0x4e, 0xbb, 0x7e, 0xa6,
	0x0b, 0xab, 0x2a, 0xc3, 0x1f, 0xcd, 0x35, 0xc4, 0xee, 0x39, 0xa7, 0xd1, 0x95, 0xc3, 0xfe, 0xa4,
	0xcf, 0x7a, 0x80, 0x06, 0x94, 0x83, 0x4e, 0x33, 0x9b, 0xd0, 0x07, 0xae, 0xae, 0x5a, 0x6f, 0xb9,
	0x69, 0x70, 0x27, 0xbd, 0x26, 0x8a, 0x62, 0x8c, 0x4f, 0x0b, 0x97, 0x2b, 0x70, 0x73, 0xa8, 0xe4,
	0x6f, 0xba, 0x0e, 0x49, 0x41, 0x35, 0x13, 0x2a, 0xe5, 0x27, 0x05, 0xdb, 0xe4, 0x01, 0xb1, 0x23,
	0xc7, 0xf0, 0x31, 0x5d, 0x01, 0x4d, 0x40, 0xf2, 0x74, 0x14, 0x38, 0x3f, 0xd7, 0x1f, 0x54, 0x5e,
	0x1c, 0x94, 0xf9, 0xf6, 0x6a, 0xb7, 0x81, 0x66, 0xbb, 0x5b, 0x0b, 0xf6, 0x95, 0x80, 0xdb, 0x0e,
	0x69, 0x4b, 0x15, 0x16, 0x42, 0xb3, 0xa3, 0x51, 0xf7, 0x3b, 0xb4, 0x99, 0xa4, 0xed, 0x55, 0x4b,
	0x9b, 0x1a, 0x00, 0x2d, 0xee, 0x20, 0xbf, 0xfd, 0x9d, 0x7d, 0xc0, 0x19, 0xcb, 0x98, 0xd9, 0x82,
	0x4b, 0x3d, 0xee, 0xb6, 0x3d, 0x0a, 0xf1, 0xb8, 0x7a, 0xf8, 0xaa, 0x4f, 0x92, 0x0b, 0x0f, 0x0b,
	0xd9, 0xfc, 0x58, 0xd0, 0xf0, 0x33, 0xf7, 0xa3, 0x69, 0xfe, 0x37, 0x5d, 0x3c, 0x60, 0xd2, 0x43,
	0xeb, 0x80, 0x5c, 0x0a, 0x2c, 0xd3, 0xda, 0xfa, 0x71, 0x66, 0xe7, 0x5d, 0xa7, 0x8d, 0x71, 0x18,
	0x7e, 0x30, 0x4a, 0x0b, 0x68, 0x06, 0x3e, 0xe0, 0x90, 0x6c, 0xe5, 0x77, 0x36, 0x1b, 0x2e, 0x39,
	0x66, 0xb4, 0x7a, 0xcd, 0x25, 0x20, 0x67, 0x95, 0x7c, 0xf9, 0xf1, 0x17, 0xf7, 0x59, 0x07, 0x82,
	0xb9, 0xa3, 0xd7, 0x51, 0x16, 0x89, 0x15, 0xff, 0xff, 0x99, 0xfd, 0xf8, 0x9b, 0xfb, 0x40, 0x76,
	0xa9, 0x49, 0x96, 0xbd, 0xea, 0x59, 0xb7, 0x23, 0xc9, 0x55, 0x39, 0xaf, 0xc8, 0xfb, 0x48, 0x10,
	0x11, 0xff, 0x1d, 0x66, 0x86, 0x27, 0x5a, 0x60, 0x77, 0xd6, 0xb8, 0xe2, 0xde, 0x16, 0x29, 0xa6,
	0x98, 0xf2, 0x80, 0x74, 0x9e, 0xd7, 0x8c, 0x20, 0xc0, 0xa0, 0xa4, 0x4b, 0x8c, 0xb5, 0x83, 0x0a,
	0xaa, 0xd1, 0xe4, 0x87, 0x64, 0x90, 0x5e, 0xf5, 0x41, 0x93, 0x51, 0x91, 0xc5, 0x1d, 0xe3, 0xb3,
	0x3a, 0x62, 0xf9, 0x9c, 0xed, 0xec, 0x46, 0x0b, 0x0c, 0xf4, 0xeb, 0xac, 0x21, 0x9f, 0x7e, 0xd3,
	0xc4, 0xc9, 0x6b, 0x0e, 0x01, 0x8e, 0xe7, 0xad, 0x2b, 0xa2, 0x8d, 0x09, 0xe9, 0x97, 0xd0, 0x9a,
	0x4e, 0x8d, 0x08, 0x98, 0x63, 0x60, 0xdc, 0x8d, 0x99, 0x4a, 0xda, 0x6b, 0x78, 0xed, 0x4b, 0xe9,
	0x0c, 0x6c, 0x59, 0x58, 0x9e, 0xc0, 0x25, 0x6c, 0xcc, 0x5a, 0xdb, 0x75, 0x9b, 0x02, 0x87, 0xbb,
	0xac, 0x81, 0x33, 0xc8, 0xf7, 0x14, 0x73, 0x1a, 0xff, 0x6b, 0x6b, 0x34, 0x32, 0x0c, 0x48, 0x08,
	0x8c, 0xca, 0x5c, 0xca, 0x40, 0x80, 0x62, 0x9f, 0x43, 0xf3, 0x6d, 0x0a, 0xe8, 0x4a, 0x94, 0x72,
	0x19, 0x43, 0x23, 0x8f, 0x3f, 0xa5, 0xcf, 0x1a, 0x8b, 0x0e, 0x26, 0x7d, 0xcf, 0x4b, 0x1c, 0x8e,
	0x1f, 0xae, 0x9e, 0xab, 0xbb, 0xe7, 0xd5, 0x02, 0xd1, 0xb6, 0xf4, 0xda, 0x2d, 0x4f, 0xe4, 0xa6,
	0xd4, 0x6b, 0x62, 0xa5, 0x3c, 0x8c, 0x81, 0xa6, 0x8f, 0x0a, 0xb1, 0x85, 0xcf, 0xfb, 0xc6, 0x1f,
	0x6a, 0x1d, 0x8a, 0x4c, 0x29, 0xe5, 0xfb, 0x6e, 0x67, 0xc9, 0x03, 0x0f, 0xa1, 0xee, 0x5e, 0xd2,
	0xb4, 0x90, 0x8a, 0xb1, 0x0d, 0xba, 0x20, 0xd4, 0x48, 0xec, 0xe1, 0x2b, 0xfa, 0xac, 0xd9, 0xad,
	0x7b, 0xb7, 0x33, 0x59, 0xb0, 0x52, 0x72, 0x60, 0x86, 0xfc, 0xd7, 0xac, 0xbd, 0x50, 0x2a, 0x2e,
	0x81, 0x77, 0x5e, 0xc2, 0x73, 0xd3, 0x62, 0x21, 0x7f, 0xfa, 0x7f, 0x61, 0x68, 0x3a, 0xaa, 0x6d,
	0xd6, 0x37, 0x82, 0xe2, 0x6d, 0x12, 0x55, 0x8e, 0x30, 0x3d, 0x05, 0xb5, 0x71, 0x32, 0x78, 0x58,
	0xdc, 0xd6, 0xa4, 0xc0, 0xda, 0x5c, 0x6b, 0x3b, 0xad, 0xf5, 0x4b, 0x99, 0x08, 0x20, 0xdb, 0x91,
	0xf0, 0x22, 0xd0, 0x85, 0x21, 0x18, 0x59, 0x14, 0xec, 0x0a, 0x88, 0xb5, 0xa0, 0x54, 0x3b, 0xcb,
	0x19, 0x4f, 0xc7, 0x6c, 0x05, 0x0a, 0xe5, 0x7a, 0x15, 0x0c, 0x66, 0x50, 0x2d, 0xfe, 0xa5, 0x30,
	0xe1, 0x2c, 0xac, 0x83, 0x3c, 0x13, 0x7e, 0x56, 0x93, 0xe2, 0x8b, 0x5d, 0x69, 0xc1, 0x70, 0x35,
	0x12, 0x8f, 0x62, 0xf9, 0x42, 0x3c, 0x62, 0xc8, 0x57, 0x9d, 0x3b, 0x8d, 0xa7, 0x50, 0x5b, 0x63,
	0xe3, 0x54, 0xad, 0x46, 0x47, 0x3c, 0x4e, 0x63, 0xa5, 0x59, 0xef, 0xe4, 0x9a, 0x68, 0xf8, 0x78,
	0xed, 0x4d, 0x5c, 0x64, 0x17, 0x0a, 0xf4, 0xb8, 0x2e, 0x70, 0x17, 0xe9, 0x28, 0x32, 0x97, 0x76,
	0x8f, 0x2f, 0xa2, 0x75, 0x80, 0x5d, 0x90, 0x4a, 0x71, 0x1b, 0x80, 0x62, 0xee, 0xc1, 0xa0, 0xe8,
	0xf3, 0x79, 0xf8, 0xa4, 0x8f, 0xe4, 0xd0, 0x2e, 0x71, 0x2c, 0xd2, 0x2f, 0x09, 0x53, 0x0a, 0x6e,
	0xce, 0x2c, 0x8f, 0xef, 0xb3, 0x6e, 0x50, 0x86, 0x00, 0x3f, 0xbc, 0x5c, 0x00, 0x07, 0xdd, 0xf1,
	0x37, 0xcb, 0x60, 0x85, 0xd7, 0xba, 0xa0, 0xd2, 0x78, 0xc7, 0x30, 0x01, 0x32, 0xe5, 0xc4, 0x8a,
	0x30, 0x88, 0xac, 0x6c, 0xf9, 0x7e, 0xa9, 0x75, 0x57, 0x79, 0x53, 0x3b, 0xe0, 0x07, 0x95, 0x90,
	0xe9, 0xbb, 0x0e, 0x46, 0xa7, 0x06, 0x24, 0x7d, 0xa8, 0x8c, 0x09, 0x4c, 0xd8, 0x70, 0x04, 0x9b,
	0xcc, 0x72, 0x3b, 0x12, 0x27, 0x73, 0xdc, 0xf1, 0x11, 0xdf, 0xf7, 0x74, 0x5d, 0x40, 0x48, 0x9c,
	0x99, 0xa7, 0x09, 0xf9, 0x7e, 0xd2, 0xb5, 0xb7, 0x82, 0x60, 0x34, 0x1b, 0x83, 0xc5, 0x04, 0xd6,
	0x84, 0x4f, 0x47, 0x9d, 0x98, 0x16, 0x86, 0xf0, 0x1c, 0x2d, 0x40, 0x05, 0xa3, 0x21, 0xe0, 0x8c,
	0xbb, 0xea, 0xf7, 0x1e, 0x4d, 0x98, 0x02, 0x24, 0xfb, 0x6b, 0x72, 0x17, 0x0e, 0x5b, 0x57, 0xc6,
	0x74, 0xa2, 0x46, 0x05, 0x1c, 0xc9, 0x51, 0x7d, 0x31, 0xec, 0xff, 0x69, 0x5d, 0x25, 0x5b, 0xa4,
	0x01, 0xa6, 0xbb, 0xe1, 0x0a, 0x6c, 0x57, 0xea, 0x44, 0xde, 0x97, 0xb2, 0xd0, 0x2d, 0x10, 0x0d,
	0xe2, 0xfc, 0xfa, 0xad, 0xfa, 0x5f, 0x70, 0xea, 0x8d, 0x6e, 0xdb, 0xfd, 0x5f, 0x1e, 0x66, 0xc1,
	0xba, 0x06, 0x87, 0x59, 0x4c, 0x57, 0xbc, 0xc5, 0xb4, 0xa4, 0x17, 0x10, 0x37, 0x48, 0x91, 0x79,
	0x82, 0x35, 0xe2, 0x72, 0x7d, 0xf2, 0x74, 0x39, 0xe8, 0x87, 0x73, 0x82, 0x03, 0x5b, 0xc6, 0x43,
	0x0c, 0x4b, 0x4e, 0x2b, 0xef, 0x71, 0x63, 0x95, 0xfb, 0x68, 0xbd, 0x73, 0x7d, 0x0f, 0xe2, 0x21,
	0x67, 0x55, 0x09, 0x61, 0xec, 0x69, 0x30, 0xc8, 0x49, 0x50, 0xb9, 0xaa, 0x3c, 0x12, 0x3f, 0x7e,
	0x0a, 0x14, 0x1c, 0x4c, 0xb5, 0x80, 0x07, 0x46, 0xc2, 0x1d, 0x5f, 0x69, 0xd5, 0xc4, 0x61, 0xa9,
	0xb0, 0x89, 0xb5, 0xe3, 0x18, 0x8c, 0x9b, 0x02, 0x5d, 0x07, 0x59, 0x35, 0xfd, 0xc1, 0x99, 0x89,
	0xc8, 0xc7, 0x14, 0x1d, 0x5f, 0x0f, 0x86, 0x07, 0x74, 0xbc, 0xe4, 0x9c, 0x75, 0x8b, 0x20, 0xe3,
	0xc8, 0xda, 0x0d, 0x1b, 0x1e, 0xe3, 0x07, 0x38, 0x41, 0x97, 0x78, 0xda, 0x8c, 0x84, 0xf3, 0xc7,
	0x5f, 0xdb, 0xc7, 0x09, 0x21, 0x5c, 0xa1, 0x68, 0x27, 0x65, 0xed, 0xf0, 0x64, 0x21, 0xf4, 0x85,
	0x2e, 0xd2, 0xe4, 0xe4, 0x56, 0x2d, 0x26, 0x0b, 0xee, 0xf9, 0xd3, 0x60, 0x3f, 0xf9, 0x6a, 0x32,
	0x06, 0x32, 0x28, 0xc5, 0x6e, 0xec, 0x6e, 0x8b, 0xc5, 0x81, 0x05, 0x16, 0x4d, 0x0f, 0xd6, 0x9a,
	0xb0, 0x2e, 0x17, 0x47, 0xcd, 0xb0, 0x7d, 0x29, 0xcc, 0x9b, 0xcc, 0x83, 0xf9, 0x4b, 0x59, 0x65,
	0x6a, 0x8f, 0xf8, 0x34, 0x77, 0x8f, 0xdf, 0x6d, 0x5d, 0x87, 0xb0, 0xcb, 0x6e, 0x1b, 0x05, 0xff,
	0x29, 0xaf, 0xdd, 0xa8, 0xad, 0x80, 0x6b, 0x9f, 0xf7, 0xbc, 0xb3, 0xdd, 0x96, 0x98, 0x3d, 0x49,
	0x38, 0x5f, 0xe6, 0x89, 0x70, 0xd7, 0xe0, 0x63, 0xfd, 0xd6, 0xf8, 0x56, 0x0d, 0x05, 0x62, 0x1e,
	0x6a, 0xed, 0xe4, 0xde, 0x0f, 0x3f, 0xbf, 0xe0, 0x09, 0x03, 0x77, 0x4c, 0x5e, 0xbc, 0xe5, 0x64,
	0x96, 0x3b, 0x50, 0x69, 0x68, 0x96, 0xdc, 0x5f, 0x5e, 0x49, 0xa7, 0xb3, 0xe5, 0xb2, 0x9d, 0x4a,
	0xa7, 0x8b, 0x2b, 0x85, 0x8a, 0xbd, 0x00, 0xff, 0xcd, 0x84, 0xf8, 0x82, 0xd3, 0xe8, 0x1b, 0xfb,
	0xac, 0x9d, 0x5a, 0x53, 0x20, 0xbf, 0xf8, 0xc6, 0x3c, 0x21, 0x29, 0x5b, 0x2a, 0x15, 0x4b, 0xf6,
	0x4a, 0xe1, 0x44, 0xa1, 0x78, 0xaa, 0x00, 0x9e, 0xfc, 0xb5, 0xd6, 0x55, 0xa2, 0xa8, 0x8c, 0x31,
	0x1f, 0x0c, 0x08, 0x9f, 0x2a, 0x15, 0x41, 0xf3, 0x2e, 0x14, 0x4b, 0xe0, 0x3e, 0x83, 0x6f, 0x7f,
	0xb3, 0x75, 0x03, 0x87, 0x28, 0x14, 0xed, 0xe5, 0x6c, 0x69, 0x21, 0x9b, 0xae, 0xd8, 0xa7, 0x8a,
	0xa5, 0x7c, 0x26, 0xd4, 0xfd, 0xb6, 0xc4, 0x4d, 0xd6, 0xf5, 0x0a, 0x32, 0x9f, 0x2b, 0x9c, 0xc8,
	0x66, 0x40, 0x8d, 0xa3, 0xef, 0x6f, 0x02, 0x0e, 0x8c, 0xdf, 0x8b, 0x6a, 0x16, 0x5d, 0x29, 0x3c,
	0x21, 0xe9, 0x6e, 0x54, 0xa4, 0xa0, 0x76, 0x6b, 0x19, 0x90, 0xb5, 0x66, 0x2a, 0x44, 0x9f, 0x8c,
	0x4a, 0xae, 0xb5, 0xa4, 0x92, 0x80, 0x1f, 0x17, 0x5a, 0x1b, 0x81, 0x7b, 0x8c, 0x79, 0xf1, 0x32,
	0xbd, 0x11, 0x24, 0x79, 0xcd, 0x75, 0x3a, 0xeb, 0xbe, 0x30, 0x7e, 0xe5, 0xc9, 0x58, 0xab, 0xdb,
	0xae, 0x82, 0xb0, 0x73, 0x31, 0x87, 0x09, 0xa9, 0xa0, 0x04, 0x9c, 0x1d, 0xcc, 0x00, 0x43, 0x82,
	0x38, 0x8b, 0x46, 0xbd, 0x89, 0x99, 0x60, 0x03, 0x24, 0xf2, 0xfb, 0x64, 0x88, 0xb3, 0xf7, 0x4c,
	0x51, 0x79, 0xa1, 0x5b, 0x87, 0xe2, 0x76, 0xc7, 0xf8, 0x1c, 0x50, 0xa1, 0xd9, 0x27, 0x51, 0xe1,
	0x4d, 0x60, 0x78, 0xa2, 0xb5, 0x26, 0x3a, 0x1c, 0x9d, 0xec, 0x31, 0x30, 0x58, 0xce, 0xfb, 0xd2,
	0x81, 0xca, 0xcd, 0x82, 0x71, 0xde, 0x2a, 0x83, 0x51, 0x4e, 0x91, 0xa2, 0x06, 0x86, 0x13, 0x75,
	0x59, 0x48, 0x41, 0x75, 0x95, 0x5c, 0x60, 0x30, 0x09, 0x97, 0x81, 0xc7, 0xac, 0x84, 0x14, 0xb5,
	0x25, 0xb7, 0xe6, 0xba, 0x1b, 0x28, 0xff, 0x91, 0x25, 0x30, 0x29, 0x17, 0x14, 0x5b, 0x70, 0x76,
	0x86, 0x16, 0x8a, 0xc4, 0x8f, 0xad, 0x7c, 0xe8, 0xf1, 0xab, 0xd0, 0x86, 0x08, 0x77, 0x20, 0xa9,
	0x75, 0xfc, 0xfe, 0xed, 0x5c, 0x70, 0x71, 0x51, 0xbe, 0x71, 0xc6, 0xe9, 0xe4, 0xbd, 0xb5, 0x2c,
	0x1e, 0xf2, 0x25, 0x92, 0xda, 0x01, 0xf2, 0xc8, 0xd1, 0xfd, 0xe2, 0x7c, 0xa4, 0xb8, 0x34, 0x9f,
	0xaa, 0xe4, 0x8b, 0x8b, 0x94, 0x79, 0x59, 0x4e, 0xee, 0x0f, 0x95, 0x66, 0x52, 0x4b, 0xa9, 0xc5,
	0x2c, 0xa5, 0xb7, 0x38, 0x6d, 0x10, 0x79, 0xb6, 0x4a, 0x9d, 0xe1, 0xa7, 0x42, 0xbc, 0x50, 0x1c,
	0x3c, 0x2b, 0x2f, 0x8d, 0x5b, 0x78, 0x9d, 0x8e, 0x03, 0xda, 0x43, 0x70, 0xeb, 0x80, 0x6c, 0x52,
	0x73, 0x36, 0xf0, 0x18, 0x51, 0x6f, 0x12, 0xd0, 0x44, 0x73, 0xb5, 0x51, 0xaf, 0x82, 0x31, 0x63,
	0xab, 0xf4, 0x0a, 0x4a, 0x05, 0x07, 0xdb, 0x44, 0xf5, 0x06, 0x54, 0xd5, 0xa5, 0xf3, 0x93, 0xed,
	0x32, 0xb6, 0xa8, 0xd7, 0x92, 0xdf, 0x35, 0x2c, 0x5d, 0x29, 0x3c, 0x4c, 0xe5, 0x33, 0x54, 0xad,
	0x76, 0xc8, 0x80, 0x6f, 0x50, 0x47, 0x6d, 0x2c, 0xad, 0x0d, 0xc5, 0x4c, 0x1b, 0xae, 0x3a, 0xd4,
	0xd8, 0xa9, 0x65, 0x81, 0xcb, 0x3a, 0x3a, 0xce, 0xd8, 0x45, 0x15, 0x2a, 0x58, 0xb1, 0x5b, 0xd2,
	0xfa, 0xba, 0xeb, 0x34, 0x3a, 0xeb, 0x74, 0x7a, 0x37, 0x68, 0xda, 0x3c, 0x7b, 0xc8, 0x69, 0x25,
	0x17, 0xa4, 0xdb, 0xb4, 0x6b, 0x5d, 0xee, 0x15, 0xd0, 0x01, 0x1e, 0x2f, 0xc6, 0x40, 0xbb, 0x2a,
	0xde, 0x4b, 0xc5, 0x02, 0x01, 0xc2, 0x32, 0x06, 0xe3, 0x74, 0x0d, 0xc6, 0x17, 0x47, 0x76, 0x94,
	0x30, 0x13, 0x53, 0xbb, 0xba, 0x4a, 0x47, 0x77, 0x14, 0x98, 0x92, 0x75, 0x3c, 0x4e, 0xb4, 0x4f,
	0xdd, 0xb6, 0x90, 0xda, 0xf0, 0x02, 0x1d, 0xd9, 0xf5, 0x1b, 0x65, 0x3c, 0xd7, 0xb6, 0x1f, 0x37,
	0x7e, 0xcd, 0x6b, 0xe0, 0xa9, 0x13, 0xd9, 0x61, 0x57, 0xe8, 0xda, 0x8e, 0x56, 0x04, 0x48, 0x3a,
	0x4f, 0x09, 0x16, 0xfd, 0xa8, 0xf9, 0xa5, 0x41, 0x1f, 0x2c, 0xe1, 0x20, 0x55, 0x01, 0x0e, 0x2e,
	0xb4, 0x64, 0x27, 0x63, 0xca, 0xff, 0xc1, 0xf3, 0x8b, 0xf5, 0x7a, 0x47, 0xa6, 0xc5, 0xea, 0x44,
	0x43, 0xd6, 0xe7, 0x55, 0x2a, 0xb7, 0x8a, 0xef, 0x14, 0x15, 0x5e, 0x2d, 0x0f, 0x7e, 0xbc, 0x33,
	0xbe, 0x8d, 0x81, 0x27, 0x4a, 0x70, 0xaf, 0xba, 0x32, 0x0f, 0x96, 0x3b, 0x1d, 0x75, 0x0c, 0x8d,
	0x93, 0x95, 0x7d, 0x58, 0xdc, 0x13, 0x09, 0x97, 0x1f, 0x11, 0x09, 0xd0, 0xe1, 0xf2, 0xa3, 0x22,
	0xf9, 0x39, 0x5c, 0x7e, 0x67, 0x90, 0xff, 0xec, 0xe3, 0x24, 0x45, 0x30, 0xe8, 0x7a, 0xe9, 0x37,
	0xac, 0xd7, 0x6b, 0x35, 0xb7, 0x19, 0xf8, 0x34, 0x37, 0x44, 0xa9, 0xf0, 0x0c, 0xa6, 0x1f, 0xa0,
	0x79, 0xf0, 0x00, 0xaa, 0x03, 0x84, 0x35, 0xdd, 0x2e, 0xf8, 0xa2, 0x0d, 0xbb, 0x8a, 0xa8, 0x24,
	0xf6, 0xbc, 0x51, 0x62, 0xa7, 0xdd, 0x6d, 0x0a, 0xbf, 0xf5, 0xa6, 0xd8, 0xf9, 0x60, 0x36, 0x2d,
	0xca, 0xcc, 0x5f, 0x0d, 0x71, 0x35, 0x2b, 0x6c, 0xf1, 0xd5, 0x7a, 0xc3, 0x4d, 0x63, 0x38, 0x2e,
	0xce, 0x5a, 0x03, 0x52, 0x3a, 0x03, 0x53, 0xc7, 0x93, 0xd3, 0x66, 0x2d, 0x12, 0xd7, 0xb8, 0xd9,
	0x1a, 0x44, 0xf9, 0x25, 0x73, 0xf6, 0x0e, 0x4e, 0xc6, 0x74, 0x3b, 0x49, 0xb2, 0x0f, 0x44, 0xd3,
	0x19, 0xa7, 0xb6, 0xa6, 0x2e, 0x07, 0x0c, 0xc8, 0x90, 0x06, 0x8f, 0xdb, 0x8a, 0xd2, 0x41, 0x19,
	0xf9, 0x52, 0xd1, 0x5c, 0xe2, 0xe8, 0xb1, 0xd7, 0x0d, 0x58, 0x03, 0xd4, 0x8d, 0x26, 0x30, 0xf9,
	0xfc, 0x0e, 0x5b, 0x43, 0x9d, 0xb6, 0xd7, 0x5a, 0xe7, 0x61, 0xba, 0x9d, 0x47, 0xaf, 0xed, 0x39,
	0x85, 0xc9, 0x0a, 0xc1, 0x25, 0x6e, 0xb3, 0x06, 0x30, 0x84, 0x44, 0x62, 0x67, 0xe7, 0xd1, 0x43,
	0xbd, 0xe1, 0xd1, 0x3e, 0x44, 0x68, 0xb2, 0xe6, 0x07, 0x2e, 0x06, 0x4d, 0x52, 0xf9, 0x36, 0x91,
	0x1b, 0x38, 0x78, 0x31, 0x68, 0x74, 0xa7, 0x12, 0x77, 0xc1, 0x3a, 0x37, 0x3c, 0x70, 0x08, 0x45,
	0xd0, 0x69, 0xe7, 0xd1, 0xf1, 0xde, 0x2d, 0xb2, 0x02, 0x72, 0xec, 0x88, 0x35, 0x24, 0x56, 0x82,
	0x72, 0x82, 0xfe, 0x32, 0x52, 0x34, 0x44, 0x11, 0x77, 0x45, 0x69, 0x9b, 0xc6, 0x1e, 0x0a, 0xd8,
	0xc3, 0xc5, 0x1c, 0x03, 0xec, 0xc1, 0xbf, 0x12, 0x7c, 0xe4, 0xe8, 0x55, 0xb1, 0xe3, 0x65, 0x11,
	0x38, 0x97, 0x49, 0xb2, 0xb3, 0x36, 0x9d, 0xb9, 0xdb, 0x65, 0xaf, 0xe1, 0x95, 0x9c, 0xe6, 0x59,
	0x4a, 0x19, 0xc2, 0x02, 0xbd, 0xf3, 0xc3, 0xd6, 0x00, 0xad, 0x1d, 0x08, 0x1a, 0x4f, 0x56, 0x9c,
	0x46, 0xfd, 0x6f, 0x45, 0x28, 0x8a, 0x06, 0xd9, 0x15, 0xb1, 0xf2, 0xc6, 0x8e, 0x59, 0x03, 0xb4,
	0xfe, 0x48, 0x74, 0x0f, 0x1d, 0x19, 0x2c, 0xa0, 0x43, 0x59, 0x95, 0x3b, 0x49, 0x45, 0xe2, 0x9e,
	0x1d, 0xe9, 0x8a, 0xb1, 0x6b, 0xac, 0x61, 0x89, 0x0e, 0x04, 0x90, 0x48, 0x54, 0x1d, 0x8d, 0xff,
	0x7d, 0x9f, 0xb5, 0x5d, 0xac, 0x02, 0x0f, 0x1d, 0xc2, 0xeb, 0x00, 0x7b, 0x69, 0xbf, 0xb5, 0x57,
	0x96, 0x52, 0x36, 0x33, 0x15, 0x63, 0x70, 0x70, 0x97, 0x2c, 0x3e, 0x05, 0x93, 0x00, 0x63, 0x48,
	0x6b, 0x0e, 0xea, 0x71, 0x03, 0xd4, 0xbd, 0xcf, 0x30, 0x65, 0xe8, 0x72, 0x59, 0x8a, 0xaa, 0xdf,
	0x27, 0xf7, 0xbc, 0xc6, 0x06, 0x81, 0x7b, 0x0f, 0xc8, 0x8a, 0x05, 0x3c, 0x97, 0x24, 0x57, 0x05,
	0x6c, 0x0c, 0x97, 0x0d, 0x8d, 0xbf, 0xa0, 0x8f, 0x7b, 0x4d, 0xe8, 0xce, 0xf0, 0xfc, 0x5e, 0x30,
	0x92, 0xe7, 0x1b, 0x9e, 0x87, 0xf6, 0x08, 0x30, 0x39, 0xf7, 0x17, 0x6a, 0x88, 0x06, 0x14, 0xd0,
	0x74, 0x8e, 0x28, 0xbc, 0x6b, 0x60, 0xc3, 0x26, 0x5e, 0xe4, 0xc3, 0x30, 0x14, 0x4f, 0xd7, 0xd4,
	0x13, 0x4c, 0x91, 0xb9, 0x30, 0xb1, 0xcb, 0x76, 0x36, 0x48, 0xc2, 0x6c, 0x53, 0x37, 0xd4, 0x3a,
	0x4e, 0xb3, 0x76, 0x66, 0x33, 0x10, 0xae, 0x03, 0x52, 0xf6, 0x84, 0x3b, 0xe2, 0x7e, 0xf1, 0xdb,
	0xfb, 0xc1, 0x18, 0x10, 0x29, 0xe6, 0x24, 0x32, 0xd2, 0xf2, 0xaa, 0xcf, 0x16, 0x7e, 0xd2, 0x01,
	0x8d, 0x5d, 0xfb, 0xb5, 0xf2, 0xfd, 0x01, 0xaf, 0x6e, 0x33, 0xc0, 0x47, 0x82, 0x0b, 0x44, 0x24,
	0xad, 0x06, 0x94, 0xe7, 0x8b, 0x92, 0xc0, 0x69, 0x3b, 0x1b, 0xf6, 0x61, 0x21, 0x0a, 0x8c, 0xc2,
	0x23, 0x42, 0xbf, 0x63, 0x1e, 0x92, 0x38, 0x34, 0xd4, 0x2e, 0xaf, 0x18, 0x6e, 0xc8, 0x70, 0x90,
	0x1d, 0x20, 0x02, 0xc2, 0x22, 0x54, 0xbe, 0x3b, 0x34, 0x3e, 0xca, 0x5d, 0x4b, 0x1a, 0xa0, 0x3c,
	0xb6, 0x4f, 0x89, 0x62, 0xe3, 0xb7, 0x59, 0x43, 0xd9, 0x05, 0xfc, 0x9d, 0x18, 0xb7, 0x0e, 0xb9,
	0xf8, 0x97, 0xcd, 0xf3, 0x6d, 0x3b, 0x25, 0xa0, 0xc7, 0x46, 0x63, 0xa5, 0xa9, 0x46, 0x63, 0x7d,
	0x60, 0xf2, 0xd1, 0xce, 0xf2, 0x5d, 0x45, 0x67, 0x95, 0x03, 0x85, 0x91, 0x18, 0x3d, 0xa7, 0x0a,
	0x4d, 0x91, 0x9b, 0x7c, 0xf7, 0x2b, 0x42, 0x89, 0xed, 0x46, 0xf9, 0x28, 0x4b, 0xd6, 0x90, 0x76,
	0x42, 0x33, 0x72, 0xf4, 0xb6, 0xc9, 0x4b, 0x68, 0x25, 0xfd, 0x93, 0xe4, 0x1e, 0x97, 0xff, 0x61,
	0x97, 0xbb, 0x55, 0x8c, 0xc7, 0x8c, 0xff, 0x2d, 0x30, 0x8d, 0x38, 0xfc, 0xb9, 0xdc, 0x0a, 0xd7,
	0x82, 0xdb, 0xa1, 0x15, 0x66, 0x40, 0xc8, 0xb4, 0x70, 0xe5, 0xc8, 0x1f, 0xb2, 0xb0, 0xe0, 0x75,
	0x16, 0x50, 0x4d, 0x00, 0x1f, 0x1d, 0xb0, 0x12, 0xb2, 0x34, 0xad, 0x50, 0x06, 0xdc, 0x04, 0x7c,
	0xa3, 0xfa, 0xa5, 0xe3, 0xe7, 0x6c, 0xbb, 0xed, 0xb5, 0xc1, 0x95, 0xb8, 0x8b, 0xc7, 0x49, 0x90,
	0x35, 0x5a, 0x69, 0x3a, 0xc8, 0x25, 0xbe, 0x22, 0xc3, 0x1b, 0xb3, 0x03, 0xbd, 0x96, 0xad, 0x9d,
	0xef, 0x72, 0x1b, 0x7c, 0x60, 0xfc, 0xad, 0x63, 0xc1, 0xf1, 0x52, 0x09, 0x4d, 0x28, 0x20, 0x07,
	0x99, 0x29, 0xe4, 0x27, 0xee, 0xb6, 0x06, 0x29, 0x34, 0x20, 0xc2, 0x6b, 0x37, 0x4d, 0xf6, 0x04,
	0xe5, 0xd7, 0x8a, 0x64, 0x02, 0xcc, 0x03, 0xad, 0x41, 0xb4, 0x1b, 0xe4, 0x91, 0xe1, 0x8d, 0x5b,
	0xb4, 0xd3, 0x73, 0xa4, 0x1e, 0x64, 0xed, 0x90, 0xea, 0x5a, 0x2a, 0xc4, 0x89, 0x2d, 0x9a, 0xce,
	0x0b, 0x58, 0xd9, 0x7c, 0xda, 0xb2, 0x78, 0x10, 0x91, 0x9c, 0x16, 0xae, 0x6f, 0x6e, 0xd8, 0xa2,
	0xfd, 0x22, 0x02, 0x93, 0xf7, 0x42, 0x19, 0x78, 0x8d, 0x8e, 0x63, 0xaf, 0xb6, 0xa5, 0x71, 0x3c,
	0x3c, 0xf6, 0x11, 0x70, 0x27, 0xf5, 0xd9, 0x89, 0x7c, 0x73, 0xbc, 0x96, 0x75, 0x06, 0x68, 0xbe,
	0x2f, 0x1c, 0x3f, 0xee, 0x37, 0x72, 0x36, 0xb5, 0xe3, 0x13, 0x23, 0x8d, 0x73, 0x80, 0x8e, 0xf1,
	0xf1, 0x6c, 0x84, 0x34, 0x00, 0x67, 0xd2, 0x99, 0x20, 0x77, 0x7f, 0x88, 0x96, 0x7d, 0xf3, 0x16,
	0xd3, 0xe6, 0x54, 0xa9, 0x65, 0x96, 0x7a, 0xcd, 0xc6, 0x26, 0xb7, 0xd3, 0xb8, 0x7d, 0x0e, 0xd6,
	0x70, 0x75, 0xdd, 0xc5, 0xce, 0x88, 0x89, 0xc7, 0x4e, 0x59, 0x3b, 0x79, 0xc4, 0x8b, 0xb7, 0xd0,
	0x8f, 0xde, 0x23, 0x89, 0xf9, 0x24, 0x0e, 0xb6, 0x91, 0x11, 0x8d, 0x39, 0xd6, 0x60, 0x87, 0x06,
	0x09, 0x91, 0x64, 0x82, 0x69, 0xc7, 0x71, 0x63, 0x8e, 0x35, 0x22, 0xe2, 0xa9, 0x17, 0xef, 0x5b,
	0xdd, 0xe6, 0xde, 0x16, 0x9c, 0xf9, 0x43, 0xef, 0xde, 0xf9, 0xa6, 0x38, 0x55, 0xa2, 0xdc, 0x48,
	0x5e, 0x82, 0x79, 0x1b, 0x34, 0x44, 0xff, 0x58, 0xda, 0xda, 0x83, 0x9a, 0xae, 0xe2, 0xc9, 0x13,
	0x39, 0x3a, 0xaa, 0x3e, 0x07, 0x1e, 0x0b, 0x08, 0x7c, 0x39, 0x92, 0xf2, 0x7c, 0x55, 0xe8, 0x94,
	0x5b, 0x6d, 0x52, 0xdb, 0x1d, 0xb4, 0x76, 0x8a, 0x79, 0x12, 0x37, 0xc8, 0x49, 0x62, 0xf6, 0xef,
	0x77, 0x77, 0x58, 0xbb, 0x23, 0x08, 0x0d, 0xf2, 0x73, 0x54, 0x82, 0x02, 0xdf, 0x1e, 0xb5, 0xcb,
	0x72, 0x6d, 0xdb, 0x14, 0xde, 0x10, 0xfd, 0x03, 0x81, 0x33, 0xd2, 0xf6, 0x54, 0xda, 0x28, 0x2c,
	0x8c, 0x3b, 0x27, 0xc2, 0x44, 0x1b, 0x52, 0xc9, 0xe7, 0xce, 0x05, 0xa3, 0x62, 0xbb, 0x32, 0x6b,
	0xa9, 0xb4, 0xed, 0xae, 0xb9, 0x4d, 0xca, 0x54, 0x1d, 0x96, 0xbe, 0xc2, 0x86, 0xd3, 0x74, 0x04,
	0xf0, 0x0e, 0x69, 0xbe, 0x43, 0x2f, 0x5a, 0xb1, 0x15, 0x14, 0x37, 0x9d, 0xa0, 0x87, 0x9d, 0xd2,
	0xd9, 0xa1, 0x04, 0x5d, 0xbc, 0x16, 0xde, 0x5c, 0x03, 0x6f, 0x69, 0x97, 0x52, 0x7e, 0x58, 0xec,
	0xac, 0xf1, 0x48, 0xf8, 0x6e, 0x19, 0x24, 0xa6, 0x52, 0xe8, 0xd6, 0x6d, 0x34, 0xea, 0x6b, 0x74,
	0x67, 0x6e, 0x44, 0x7a, 0x32, 0xbc, 0x41, 0x7b, 0xc3, 0x6b, 0x93, 0x7f, 0x35, 0x88, 0x4a, 0x81,
	0xca, 0x36, 0xbc, 0x73, 0x20, 0x26, 0x5d, 0xd0, 0x20, 0x4c, 0x8a, 0x67, 0x2a, 0xe7, 0x3e, 0xa8,
	0xc8, 0x7c, 0xa7, 0x6b, 0x3b, 0x62, 0x0e, 0x09, 0xb5, 0x67, 0x62, 0xf8, 0xcb, 0xd5, 0x19, 0xb2,
	0x3e, 0xf2, 0x3e, 0xb9, 0xd3, 0x7c, 0xd0, 0xfd, 0xd2, 0xcf, 0x0b, 0xc6, 0x3b, 0xa0, 0xc2, 0x1e,
	0x7c, 0xa8, 0x2b, 0x0c, 0xf3, 0x47, 0x14, 0x8e, 0x2a, 0x23, 0xcf, 0x3b, 0x8f, 0x3e, 0x13, 0x2f,
	0x3d, 0x28, 0xd2, 0xfe, 0x77, 0x70, 0xbf, 0xad, 0x4e, 0xb7, 0x09, 0x45, 0x42, 0x7a, 0x4f, 0x3e,
	0x0c, 0x91, 0xbe, 0x22, 0xf0, 0x2b, 0x25, 0x8e, 0x90, 0x26, 0x85, 0xc7, 0xa2, 0xbc, 0x2a, 0x0a,
	0xc9, 0x88, 0xc2, 0xab, 0x95, 0x07, 0xc6, 0xa9, 0x55, 0x14, 0x1f, 0x92, 0x53, 0x04, 0xd7, 0xa6,
	0xee, 0xca, 0xd2, 0x6b, 0xd4, 0x91, 0xb6, 0x6c, 0x7e, 0x6d, 0x40, 0x5d, 0xb0, 0x3e, 0xa4, 0x19,
	0x74, 0x73, 0xae, 0x93, 0xa5, 0xe4, 0x43, 0xe2, 0x35, 0x26, 0xbc, 0x3b, 0x3d, 0x2e, 0xe7, 0x04,
	0x2e, 0xa1, 0x2c, 0xbb, 0x5e, 0xf6, 0xd8, 0x04, 0x37, 0x09, 0xa1, 0xc5, 0x25, 0x44, 0xa0, 0x66,
	0xfa, 0xc5, 0xef, 0x1f, 0xd2, 0x95, 0x96, 0x1b, 0x83, 0x2b, 0x2d, 0x37, 0x49, 0x66, 0x05, 0xbd,
	0xd9, 0x72, 0xce, 0x0b, 0xe3, 0xe7, 0x66, 0xda, 0x0e, 0x20, 0x99, 0x2e, 0x22, 0x09, 0x28, 0xce,
	0x56, 0xdc, 0x7d, 0x8b, 0xda, 0x06, 0xc7, 0x07, 0x6f, 0x6c, 0x13, 0x9d, 0x21, 0x4a, 0x69, 0x1c,
	0x46, 0x35, 0xc1, 0x43, 0xee, 0xb7, 0x5e, 0x54, 0x4d, 0xe8, 0x02, 0x2c, 0x49, 0xa2, 0xc8, 0x5f,
	0xe7, 0x6d, 0x6f, 0xfb, 0x8b, 0xda, 0xfe, 0x95, 0xc5, 0xa8, 0xd9, 0x3a, 0x68, 0x5f, 0x40, 0x17,
	0xe5, 0x06, 0xdc, 0xfe, 0x17, 0xf5, 0x30, 0x6b, 0xed, 0xa4, 0x7d, 0x16, 0x0c, 0x37, 0x79, 0xd1,
	0xc6, 0xba, 0xe8, 0x59, 0xb0, 0x12, 0xb4, 0x5b, 0x1d, 0x8f, 0x5f, 0xbf, 0x40, 0x5f, 0x00, 0xf3,
	0x2a, 0x2f, 0xa6, 0xea, 0xc2, 0x32, 0x10, 0x77, 0x1d, 0xd0, 0x29, 0xb1, 0x4d, 0xf9, 0x97, 0xe4,
	0xdc, 0xea, 0xa5, 0x36, 0xca, 0x00, 0x4a, 0xc1, 0x1c, 0x1e, 0xbb, 0xaf, 0xcf, 0xda, 0x13, 0xd6,
	0x97, 0x31, 0x07, 0x4e, 0x0e, 0xb9, 0xca, 0xdb, 0x68, 0x8f, 0xa1, 0xba, 0xe1, 0x34, 0xa5, 0x71,
	0x49, 0xba, 0x01, 0xd4, 0xde, 0xa0, 0xfa, 0x85, 0x86, 0xe7, 0x50, 0x40, 0x23, 0xdb, 0x03, 0x1a,
	0x19, 0x96, 0x01, 0x88, 0x9a, 0x0b, 0x6c, 0xee, 0xe1, 0x45, 0x78, 0x8a, 0x01, 0x8d, 0x15, 0xac,
	0x9d, 0x27, 0x80, 0x29, 0x34, 0x51, 0x2b, 0x2e, 0x6b, 0x29, 0x51, 0x0b, 0x24, 0xca, 0x59, 0x44,
	0x19, 0xe7, 0x83, 0x68, 0xbd, 0x20, 0x2b, 0xe1, 0x9d, 0x2e, 0x05, 0xcd, 0x05, 0xfb, 0x49, 0x2b,
	0xa1, 0xb2, 0x68, 0x0c, 0x09, 0x1e, 0xee, 0x96, 0x12, 0x1b, 0x1a, 0x74, 0x25, 0x8a, 0xc7, 0x9e,
	0xd4, 0x41, 0xb1, 0x2a, 0xe6, 0x07, 0x95, 0xbc, 0xdf, 0xdb, 0xac, 0x91, 0xe5, 0x7a, 0xf5, 0xec,
	0xbc, 0xd3, 0xd4, 0x70, 0x45, 0xed, 0x82, 0x53, 0x42, 0x85, 0xb9, 0xb1, 0x3f, 0x6d, 0xb3, 0x76,
	0x19, 0xe6, 0x0f, 0x77, 0xe4, 0xf8, 0xfd, 0x21, 0x61, 0x1c, 0xd0, 0x85, 0x28, 0x4a, 0xee, 0x41,
	0x40, 0x75, 0x72, 0x63, 0x04, 0xaa, 0x82, 0x6b, 0x6d, 0x78, 0xa5, 0xdf, 0x5b, 0x05, 0xe9, 0xb4,
	0x29, 0x94, 0x23, 0x8f, 0x38, 0x35, 0xeb, 0x6b, 0xeb, 0x1d, 0x80, 0x6d, 0x50, 0x88, 0x0f, 0x7f,
	0x88, 0x2b, 0x5a, 0x46, 0x9c, 0x78, 0x48, 0xca, 0x63, 0x1c, 0xbb, 0x5e, 0x53, 0x21, 0xb5, 0x61,
	0xfd, 0xd6, 0x1c, 0x94, 0x53, 0x38, 0x8d, 0xab, 0x91, 0x69, 0x6b, 0x10, 0x0f, 0x22, 0x79, 0x66,
	0xfe, 0xd6, 0x52, 0x2f, 0x84, 0x97, 0x29, 0x6b, 0xe0, 0x0c, 0xf8, 0x41, 0xa0, 0x60, 0xfe, 0xc2,
	0x86, 0x0f, 0x94, 0x3a, 0x7b, 0xd7, 0x45, 0x19, 0x48, 0x27, 0x99, 0x34, 0xe8, 0xaa, 0x60, 0xc7,
	0x31, 0x8b, 0x1f, 0x5b, 0xdf, 0xbe, 0x95, 0x95, 0x18, 0x4b, 0x20, 0x41, 0x82, 0xf0, 0x48, 0x34,
	0x35, 0x40, 0x5d, 0x49, 0xf1, 0x51, 0x44, 0x88, 0xec, 0x32, 0x46, 0x98, 0xc6, 0xa8, 0x31, 0xd9,
	0x56, 0x20, 0x46, 0x9d, 0xb3, 0x5c, 0x9d, 0x8d, 0xfd, 0x6c, 0x9b, 0xb5, 0x23, 0x30, 0x26, 0x13,
	0xd2, 0x0c, 0x25, 0x29, 0x8a, 0x66, 0xc6, 0x20, 0x5d, 0xa3, 0xa1, 0xb2, 0x0b, 0x2d, 0xb2, 0x89,
	0x07, 0x03, 0x28, 0x7a, 0xcb, 0x66, 0x1b, 0x95, 0x61, 0xe4, 0x8f, 0xca, 0x48, 0x39, 0xd1, 0xbd,
	0x4c, 0xd2, 0x71, 0xbc, 0xb0, 0x4d, 0x46, 0x11, 0x16, 0x15, 0xc4, 0x25, 0xa0, 0x86, 0x57, 0x15,
	0x12, 0x84, 0x5b, 0x8d, 0x77, 0x5f, 0x8a, 0xb1, 0x4b, 0x16, 0xb7, 0x7e, 0x82, 0xe7, 0x8f, 0x1d,
	0xb2, 0x76, 0x1b, 0x05, 0x3c, 0x75, 0x07, 0xfb, 0xa5, 0xd9, 0x8f, 0xfd, 0x57, 0x6b, 0x6f, 0xa4,
	0x51, 0x22, 0x0b, 0x18, 0x53, 0xe3, 0xf3, 0x80, 0xfe, 0xd1, 0x4b, 0x1a, 0xdf, 0xe8, 0x66, 0xfc,
	0xa1, 0xd6, 0x20, 0x41, 0xa0, 0x6f, 0x94, 0x6e, 0xbb, 0x6e, 0x6b, 0x11, 0xb0, 0x96, 0x75, 0xda,
	0x4d, 0xf0, 0x8d, 0x2e, 0xc3, 0x74, 0x4a, 0xdc, 0x7d, 0xad, 0xac, 0x0f, 0xf3, 0x26, 0x33, 0x28,
	0x22, 0x52, 0xcd, 0xda, 0x3c, 0x57, 0x27, 0x58, 0x9d, 0xf7, 0xfc, 0x0e, 0xcf, 0x00, 0x7d, 0xc8,
	0xb2, 0x00, 0xdd, 0x36, 0x7e, 0xca, 0xda, 0xe1, 0xca, 0xe1, 0x30, 0x87, 0x74, 0xde, 0xeb, 0xe4,
	0x41, 0xa4, 0xf1, 0x84, 0xd2, 0xa5, 0x7a, 0x8d, 0x7e, 0xf4, 0xe1, 0x0f, 0x70, 0x9a, 0xe8, 0x47,
	0x3f, 0xec, 0xcb, 0xd0, 0x83, 0xbb, 0xb8, 0xed, 0x3c, 0x83, 0x34, 0xd5, 0xac, 0xa2, 0x47, 0x8a,
	0x21, 0x8b, 0x1d, 0xd6, 0x60, 0xb1, 0x03, 0x52, 0x80, 0x0d, 0x8e, 0xbf, 0x61, 0xd8, 0x3a, 0xd4,
	0x73, 0xad, 0x15, 0x20, 0x0f, 0x17, 0xf4, 0x84, 0xe1, 0x3b, 0xdd, 0x36, 0xb9, 0x35, 0xbc, 0xe9,
	0x40, 0x25, 0x4d, 0x07, 0xea, 0xd6, 0x8b, 0x35, 0xd6, 0xfd, 0x94, 0xf9, 0xa8, 0x17, 0x75, 0xc7,
	0xc5, 0xda, 0x87, 0x55, 0xc3, 0x83, 0x62, 0x5c, 0xa9, 0x5b, 0x2e, 0xd6, 0xc9, 0x45, 0xfc, 0xa9,
	0x57, 0xfe, 0x7f, 0xe7, 0x4f, 0xcd, 0x85, 0xfd, 0xa9, 0xdb, 0x2f, 0x36, 0x77, 0xc3, 0x07, 0x18,
	0xfb, 0x43, 0xdf, 0xff, 0x76, 0xaf, 0x40, 0x99, 0x8b, 0x43, 0x31, 0xe6, 0xe2, 0xf6, 0x38, 0x73,
	0x71, 0x38, 0xde, 0x5c, 0xdc, 0x11, 0x6b, 0x2e, 0x5a, 0x11, 0x73, 0x71, 0xa7, 0x61, 0xdc, 0xed,
	0x0a, 0x14, 0xf7, 0xee, 0x40, 0x71, 0x8f, 0x90, 0xcf, 0xb5, 0x95, 0xad, 0xd0, 0x17, 0xb6, 0x15,
	0xfa, 0xa5, 0xad, 0xa0, 0x65, 0xe5, 0x6d, 0x65, 0x39, 0xd0, 0x90, 0x43, 0xc1, 0x90, 0xdb, 0xa3,
	0xb6, 0x02, 0x9d, 0x25, 0x8d, 0xbd, 0xa6, 0xef, 0xff, 0x4d, 0xad, 0x6a, 0x68, 0xc8, 0x01, 0xd2,
	0x90, 0xf8, 0x58, 0x10, 0xbf, 0x33, 0x19, 0x68, 0x08, 0x5b, 0x3f, 0x25, 0xa7, 0xf3, 0x51, 0x53,
	0x59, 0x6c, 0x8f, 0x2a, 0x8b, 0x61, 0x11, 0x50, 0xdd, 0x5a, 0x03, 0x4c, 0x3c, 0xeb, 0x1d, 0x7d,
	0x96, 0x95, 0xa5, 0x24, 0x61, 0x24, 0x45, 0xd8, 0x47, 0x86, 0x77, 0x26, 0x30, 0x60, 0x43, 0xc9,
	0xc0, 0xe0, 0x23, 0xb1, 0xaf, 0xdc, 0x9d, 0xb8, 0xca, 0xba, 0x42, 0x16, 0x53, 0x32, 0xb1, 0xd3,
	0x90, 0x51, 0x27, 0xf6, 0xd5, 0xbb, 0xc1, 0x0c, 0x18, 0x55, 0xb5, 0x30, 0x27, 0x42, 0x4f, 0xb9,
	0xbe, 0xd6, 0x2c, 0x76, 0x3b, 0xec, 0xeb, 0x77, 0xc3, 0x8a, 0xae, 0xed, 0x55, 0xad, 0x7a, 0xf9,
	0x86, 0x31, 0xc6, 0x83, 0xc1, 0x88, 0x4d, 0xaf, 0x3b, 0xf2, 0xb6, 0x0a, 0xfb, 0xf6, 0xdd, 0x89,
	0x1b, 0xac, 0x6b, 0x7a, 0xd4, 0xaa, 0x3e, 0xfe, 0xed, 0xee, 0xc4, 0x35, 0xd6, 0x98, 0x84, 0x22,
	0x99, 0x88, 0xa0, 0x6e, 0x4d, 0x76, 0xf3, 0x5d, 0x63, 0xaa, 0x04, 0x90, 0x77, 0x57, 0xd5, 0x28,
	0xdf, 0x33, 0xaa, 0x79, 0x76, 0x14, 0x50, 0xb4, 0xd7, 0x26, 0x23, 0x99, 0xfd, 0xf0, 0xee, 0xc4,
	0xb8, 0x75, 0x35, 0xaf, 0xe6, 0x31, 0x2e, 0x1e, 0x0f, 0xa4, 0x84, 0x04, 0x7e, 0xf1, 0x9a, 0xfd,
	0xdc, 0x44, 0x86, 0x0b, 0x0b, 0xac, 0x82, 0x98, 0x5e, 0xe2, 0x57, 0x12, 0xd8, 0x2f, 0xb4, 0x2e,
	0xb0, 0xa9, 0x56, 0xa7, 0x56, 0xf1, 0xcb, 0xbb, 0x13, 0x87, 0xac, 0x83, 0x12, 0xa6, 0x8c, 0x0f,
	0xf1, 0x2c, 0xd4, 0xe9, 0xa2, 0x22, 0x41, 0xb2, 0xdf, 0x19, 0x43, 0xa4, 0xf9, 0xed, 0x15, 0xb7,
	0xc6, 0xe5, 0x82, 0xcf, 0x7e, 0x6f, 0x20, 0x21, 0xc5, 0xdf, 0x6c, 0x4b, 0xd3, 0x89, 0x72, 0x07,
	0xb1, 0xcf, 0xfe, 0x60, 0xb4, 0x2f, 0x77, 0xbc, 0x96, 0xd1, 0xfd, 0x1f, 0xef, 0x4e, 0x5c, 0x6b,
	0x5d, 0x29, 0xab, 0x97, 0xdb, 0x18, 0xad, 0xae, 0xba, 0x94, 0x57, 0x9f, 0xa6, 0xd8, 0x2c, 0xfb,
	0x93, 0x31, 0x82, 0x01, 0x41, 0x97, 0xd0, 0xd9, 0xbd, 0x53, 0x3d, 0xbb, 0xc8, 0x3b, 0xdd, 0x26,
	0x0c, 0xf2, 0xb0, 0x29, 0x7d, 0x8d, 0x26, 0x04, 0xa2, 0xfa, 0xe1, 0x53, 0x89, 0x1b, 0xad, 0xeb,
	0x7a, 0xd6, 0x2b, 0x5c, 0xdd, 0xd7, 0xbb, 0x1f, 0xdc, 0x79, 0xf6, 0x88, 0x29, 0x9d, 0x6e, 0x8c,
	0xfa, 0xb2, 0xdb, 0x11, 0x1c, 0xcc, 0x1e, 0x35, 0xa5, 0x93, 0x68, 0x18, 0x8a, 0xf2, 0x96, 0x1b,
	0x5e, 0x87, 0x3d, 0x7a, 0x2a, 0x71, 0x8b, 0x75, 0x83, 0x04, 0xcb, 0xf1, 0x47, 0xff, 0xee, 0xc1,
	0xcd, 0x07, 0x35, 0xde, 0x74, 0xc0, 0x6c, 0x55, 0xf3, 0x7a, 0xac, 0x31, 0xaf, 0x8a, 0xca, 0x8e,
	0x16, 0xc4, 0xc2, 0x1e, 0x3f, 0xa5, 0xa3, 0x50, 0xaf, 0x17, 0x1d, 0x3c, 0x61, 0x4a, 0x27, 0x14,
	0x63, 0x4a, 0x0a, 0xe6, 0x49, 0x06, 0x4c, 0x6c, 0xda, 0x3e, 0x7b, 0xf2, 0x54, 0xe2, 0x3a, 0xeb,
	0x2a, 0x09, 0x93, 0xaf, 0x9f, 0x73, 0xcb, 0xa8, 0x8f, 0xce, 0x78, 0x4e, 0xbb, 0xc6, 0x4f, 0x25,
	0xd8, 0x53, 0xa6, 0x12, 0xd7, 0x5b, 0x87, 0x02, 0x9a, 0xa4, 0x19, 0x6a, 0xec, 0x45, 0x1b, 0xf2,
	0xb4, 0xa9, 0xc4, 0xad, 0xd6, 0x8d, 0x5b, 0x03, 0xa9, 0x89, 0x3d, 0x7d, 0x0a, 0x8c, 0xa1, 0x03,
	0x21, 0x60, 0xc9, 0x02, 0xcf, 0x8a, 0x1b, 0x2e, 0xcc, 0x03, 0xcf, 0x8e, 0x03, 0xe2, 0x14, 0x0e,
	0x30, 0x94, 0x2f, 0xe0, 0xb3, 0xe7, 0xc6, 0xcd, 0x29, 0x04, 0xa4, 0x7a, 0x7c, 0xde, 0x14, 0xe8,
	0xa2, 0x3d, 0x01, 0xb0, 0x53, 0xdb, 0x5c, 0x69, 0xb1, 0xe7, 0x4f, 0x25, 0x6e, 0xb2, 0xc6, 0x65,
	0xe9, 0x09, 0x4c, 0x71, 0xab, 0x2d, 0xb4, 0xbd, 0x8d, 0xa5, 0xe0, 0x45, 0x27, 0xd8, 0xe0, 0xae,
	0xcb, 0x5e, 0x60, 0x2c, 0x89, 0xbf, 0xb5, 0x90, 0x11, 0x8f, 0x59, 0xb0, 0x17, 0x1a, 0xbb, 0x29,
	0x12, 0x85, 0xdd, 0x05, 0x7a, 0xae, 0x90, 0x58, 0xee, 0x45, 0xc6, 0x30, 0x51, 0x00, 0x35, 0xcb,
	0x17, 0x4f, 0x25, 0xc6, 0xac, 0xfd, 0x6a, 0xdb, 0xc5, 0x5a, 0x5a, 0x5e, 0x1b, 0x0c, 0xbd, 0x97,
	0x18, 0xb4, 0x2c, 0x4a, 0x4b, 0x32, 0xcd, 0x4c, 0x52, 0xd6, 0x4b, 0x0d, 0x5a, 0x8e, 0x42, 0x89,
	0x81, 0x5e, 0x66, 0x4e, 0xb9, 0x7b, 0x66, 0xa3, 0xde, 0xd1, 0x87, 0x63, 0x2f, 0x37, 0xa7, 0x1c,
	0x01, 0x50, 0x3d, 0xbd, 0x62, 0x0a, 0x1c, 0xe1, 0xcb, 0x75, 0xf9, 0x8e, 0x64, 0x91, 0xf7, 0xd6,
	0xd8, 0x2b, 0x7b, 0x33, 0x27, 0x62, 0x9a, 0xbd, 0xca, 0x10, 0x13, 0xbc, 0xdb, 0x34, 0x6a, 0x39,
	0x5f, 0x2e, 0xe6, 0xd5, 0x06, 0xf5, 0x9a, 0x10, 0x62, 0xf8, 0xd7, 0x4c, 0xe9, 0xd2, 0x4c, 0x0a,
	0x63, 0x71, 0x89, 0xd0, 0x67, 0xaf, 0x8d, 0x23, 0x24, 0x55, 0xcd, 0xa5, 0x38, 0x7b, 0x5d, 0x08,
	0x67, 0x26, 0x90, 0x1a, 0xea, 0xf5, 0x46, 0x5f, 0x26, 0x0d, 0x28, 0xa0, 0x37, 0x98, 0x8c, 0x4b,
	0x18, 0x5b, 0xa0, 0xa7, 0xe4, 0x2a, 0x9e, 0x90, 0xd5, 0xec, 0x8d, 0xc6, 0x9c, 0x91, 0xff, 0x4b,
	0x78, 0x6f, 0x54, 0x56, 0xbf, 0xc9, 0x98, 0x4e, 0xb8, 0xba, 0x2d, 0x47, 0x7a, 0xf3, 0x14, 0x38,
	0xd3, 0x7b, 0x25, 0xd8, 0x29, 0xa4, 0x58, 0x22, 0xb6, 0xb7, 0x18, 0x68, 0x57, 0xe5, 0x6a, 0x86,
	0x6f, 0x35, 0x46, 0x07, 0xd7, 0x97, 0xab, 0x2e, 0x89, 0xf3, 0xb7, 0x19, 0xcd, 0xb5, 0x6a, 0xd1,
	0xfc, 0xed, 0xc6, 0xae, 0xe9, 0x96, 0x90, 0xec, 0xe1, 0x1d, 0xc6, 0xae, 0x99, 0x10, 0xa2, 0x93,
	0x7f, 0x9c, 0xd2, 0xb5, 0x7d, 0x1a, 0xdf, 0xba, 0x69, 0x04, 0x2b, 0x78, 0xa7, 0xc1, 0x6c, 0xe2,
	0x00, 0x5b, 0xf6, 0xfe, 0x2e, 0xa3, 0xa9, 0xaa, 0x14, 0x1d, 0xbf, 0x7b, 0x0a, 0xac, 0x9c, 0xdd,
	0xaa, 0xd6, 0x6b, 0x75, 0x5b, 0xec, 0x7d, 0x53, 0x89, 0xdb, 0xac, 0x9b, 0x74, 0xab, 0x26, 0x0d,
	0x66, 0x52, 0x9b, 0xe4, 0xe4, 0xa6, 0x38, 0x04, 0x5b, 0xed, 0x36, 0x04, 0xe1, 0x7f, 0xc0, 0x60,
	0x41, 0xe3, 0xe6, 0x14, 0xfb, 0xb0, 0x21, 0x71, 0x38, 0xff, 0xc6, 0x28, 0x27, 0x3e, 0xd1, 0x8f,
	0x1a, 0xc3, 0xf6, 0x04, 0x16, 0x13, 0xff, 0x58, 0x6f, 0x8d, 0x87, 0x9a, 0x4c, 0xc1, 0x7d, 0x5c,
	0x23, 0x0e, 0x7e, 0x28, 0x99, 0xad, 0x7a, 0x4d, 0x5d, 0xe6, 0xdb, 0x0f, 0xf6, 0xce, 0xb0, 0x4f,
	0x4c, 0x81, 0x5d, 0x9a, 0x50, 0x08, 0x26, 0xc5, 0x8d, 0x8a, 0x8c, 0x7d, 0xd2, 0x60, 0xfc, 0xa0,
	0x42, 0x0d, 0xf0, 0x29, 0x83, 0x9f, 0x33, 0x75, 0x1f, 0x2d, 0x08, 0x6a, 0xfa, 0x69, 0x63, 0xe7,
	0xb5, 0x1a, 0xd5, 0xf6, 0x33, 0xc6, 0xde, 0x08, 0x44, 0x90, 0x6f, 0x05, 0xe6, 0x27, 0xfb, 0x6c,
	0x48, 0x80, 0x19, 0xb5, 0xaa, 0x8f, 0xcf, 0x4d, 0xe9, 0x36, 0xa8, 0x6a, 0xfc, 0x79, 0x83, 0xf9,
	0xb0, 0x98, 0xbf, 0xfb, 0x65, 0xf3, 0x7f, 0xc8, 0x14, 0x63, 0xff, 0x3c, 0x95, 0xb8, 0xcb, 0xba,
	0x23, 0x06, 0x08, 0xd4, 0xf5, 0xc6, 0x86, 0x5b, 0xab, 0xc3, 0x62, 0xe5, 0x40, 0x15, 0x4f, 0xb4,
	0x64, 0x5f, 0x98, 0x4a, 0x4c, 0x58, 0x0f, 0x88, 0x6d, 0x25, 0x27, 0x29, 0x60, 0x5d, 0xf6, 0x2f,
	0x06, 0x05, 0x44, 0xa6, 0xa1, 0xf5, 0x0e, 0xd3, 0xf9, 0x62, 0x2f, 0x60, 0xec, 0x38, 0x3c, 0x8b,
	0x2f, 0x5d, 0x3a, 0xb0, 0xcb, 0xbe, 0x6c, 0x70, 0x08, 0x4a, 0x53, 0x6c, 0xc0, 0x5f, 0xc5, 0x60,
	0x5f, 0x31, 0x50, 0x65, 0x56, 0x06, 0x56, 0xbb, 0x21, 0x3d, 0x48, 0x98, 0xd1, 0x26, 0x7f, 0xcd,
	0x60, 0x7f, 0x55, 0xae, 0xda, 0xfd, 0xab, 0xd1, 0x79, 0xb9, 0xbb, 0xb6, 0x26, 0x36, 0x51, 0x53,
	0x99, 0xec, 0xeb, 0xa6, 0x41, 0x45, 0x42, 0x10, 0x83, 0xc4, 0xae, 0xbf, 0x20, 0xee, 0x2c, 0xfa,
	0xa9, 0x5a, 0x8d, 0x7d, 0x63, 0x2a, 0x71, 0xb3, 0x75, 0xfd, 0x96, 0x60, 0xa0, 0xb9, 0x3c, 0xb0,
	0x28, 0xbf, 0x39, 0x95, 0x38, 0x68, 0xed, 0x93, 0x90, 0xd9, 0x5a, 0xbd, 0xc3, 0x03, 0x3f, 0x6b,
	0x1e, 0xfb, 0x77, 0x43, 0xda, 0xe8, 0x55, 0x6a, 0xce, 0xdf, 0x31, 0xc8, 0x12, 0x4c, 0x3a, 0x79,
	0x0d, 0x0d, 0x07, 0x63, 0xdf, 0x35, 0x26, 0x9b, 0xc2, 0x97, 0x58, 0xb0, 0x87, 0x8a, 0x67, 0x30,
	0x21, 0xfb, 0x5e, 0x9c, 0xb5, 0x91, 0x6b, 0xc2, 0xd6, 0x35, 0xf1, 0x85, 0x08, 0xa7, 0xc1, 0x13,
	0xe4, 0xb3, 0xa0, 0x69, 0x1b, 0xec, 0xfb, 0xa6, 0xfd, 0x87, 0x29, 0x19, 0xab, 0x40, 0xa3, 0xd0,
	0x2d, 0xe5, 0x3e, 0xb3, 0x1f, 0x18, 0xac, 0x44, 0xe2, 0x28, 0x30, 0x02, 0x49, 0x06, 0xfe, 0x50,
	0x9b, 0xb3, 0x18, 0x8c, 0x27, 0x4f, 0xe3, 0xcd, 0x7d, 0xf6, 0x63, 0x4d, 0x86, 0xcb, 0x65, 0x6a,
	0xd5, 0xff, 0x31, 0x95, 0x98, 0xb4, 0x6e, 0xe9, 0x29, 0x4c, 0xc2, 0x8f, 0x01, 0xb0, 0x9f, 0x18,
	0x38, 0xb4, 0x83, 0xa9, 0xe0, 0x01, 0x03, 0xdd, 0xde, 0x60, 0x3f, 0x35, 0x8c, 0xdf, 0x38, 0x10,
	0x85, 0xee, 0x9f, 0x69, 0x12, 0x24, 0xed, 0x08, 0xe3, 0xee, 0xa4, 0x07, 0xa6, 0xe6, 0xfd, 0xda,
	0xb2, 0x8d, 0x1a, 0xd5, 0xf6, 0x7f, 0x1a, 0xcb, 0xee, 0x80, 0xd0, 0x3c, 0xe7, 0x06, 0xed, 0x7f,
	0xae, 0x49, 0x90, 0x48, 0xad, 0xea, 0xe3, 0x17, 0x1a, 0x69, 0x23, 0xca, 0x17, 0x9c, 0xe6, 0xaa,
	0xd3, 0x06, 0xc7, 0x4a, 0xdb, 0x14, 0xc5, 0x52, 0x5a, 0xfd, 0xaf, 0x0c, 0x11, 0xcc, 0x1f, 0x26,
	0x21, 0x03, 0x61, 0x85, 0xde, 0xca, 0x93, 0x06, 0x01, 0xfb, 0x75, 0x2f, 0x38, 0x09, 0x21, 0xb4,
	0xc5, 0x6f, 0x0c, 0x56, 0xd1, 0xe0, 0xc0, 0x2d, 0xcc, 0x43, 0x87, 0xd4, 0xd9, 0x6f, 0x4d, 0xbc,
	0xc6, 0x02, 0x89, 0xfe, 0x7e, 0x67, 0x3a, 0x0d, 0x30, 0xf3, 0x90, 0x6a, 0xfc, 0xa3, 0x41, 0x55,
	0x06, 0x80, 0x40, 0xcd, 0x7f, 0x1a, 0x9c, 0x20, 0x99, 0x45, 0xfa, 0x41, 0x7f, 0x32, 0x04, 0x74,
	0xa8, 0x56, 0xf5, 0xf1, 0xe7, 0x29, 0xd3, 0xfd, 0xf3, 0x88, 0xdf, 0x34, 0xc5, 0x77, 0xef, 0xb4,
	0xe9, 0xfe, 0x69, 0x00, 0xa2, 0x8b, 0x87, 0x4d, 0xeb, 0x3a, 0x56, 0x18, 0xe3, 0xc2, 0x83, 0x7e,
	0xf8, 0xb4, 0xae, 0xb9, 0x8e, 0x3b, 0x8d, 0x46, 0x71, 0x75, 0x01, 0x31, 0x75, 0xdf, 0xb4, 0xce,
	0x53, 0x41, 0x85, 0x1c, 0xf6, 0x11, 0xd3, 0xfa, 0xbc, 0xf4, 0x7a, 0x31, 0xea, 0x23, 0xa7, 0xf5,
	0x7d, 0x5b, 0x14, 0x8f, 0x81, 0x64, 0xc0, 0x6f, 0xeb, 0xd4, 0x6b, 0xee, 0x32, 0x3e, 0x79, 0x46,
	0xbe, 0xce, 0xa3, 0xa6, 0x4d, 0xab, 0x93, 0x9e, 0x50, 0xd1, 0xa1, 0x7c, 0xf6, 0x98, 0x69, 0x5d,
	0x18, 0x98, 0x95, 0xbc, 0x81, 0x66, 0x12, 0x3e, 0xd6, 0x18, 0xf7, 0x38, 0x3d, 0x2d, 0xe3, 0xba,
	0xcd, 0xe3, 0xf5, 0xb5, 0x75, 0x72, 0xc6, 0xe4, 0x02, 0x1e, 0x37, 0xad, 0x9b, 0xdc, 0x71, 0x70,
	0xa2, 0xc3, 0xc7, 0x4f, 0xeb, 0xec, 0xdd, 0x73, 0x21, 0x81, 0x33, 0x39, 0x6d, 0xc8, 0xec, 0x0e,
	0xf4, 0x05, 0xbb, 0xb2, 0xe1, 0x2d, 0xe3, 0x53, 0x1d, 0x72, 0xf4, 0x27, 0x4e, 0xeb, 0x9b, 0x1f,
	0x01, 0x92, 0x3e, 0xe7, 0xb4, 0x11, 0x3c, 0xc0, 0x93, 0xd6, 0xbc, 0xe7, 0x75, 0x16, 0xdb, 0xae,
	0x7b, 0x0e, 0xe4, 0xde, 0x93, 0x8d, 0x3d, 0x00, 0x13, 0x61, 0xa3, 0xee, 0xfb, 0x3a, 0xc0, 0x53,
	0xa6, 0x4d, 0xc7, 0x57, 0xd8, 0x87, 0x69, 0x95, 0x71, 0xf5, 0x54, 0x03, 0x09, 0xd1, 0x1e, 0xd4,
	0x4c, 0xfe, 0xde, 0xd8, 0xa5, 0x79, 0xa7, 0x81, 0x46, 0x64, 0xad, 0xbc, 0xde, 0x5d, 0x5d, 0x6d,
	0x08, 0x91, 0xfd, 0x34, 0x03, 0xf1, 0x38, 0x58, 0x7a, 0xdd, 0xad, 0x9e, 0xe5, 0x82, 0x72, 0x19,
	0x6f, 0xe3, 0xf8, 0x98, 0x08, 0xce, 0x9e, 0x6e, 0xe0, 0xb3, 0x27, 0x9c, 0x1a, 0xfa, 0x19, 0xd3,
	0xba, 0x8d, 0xcf, 0xc1, 0xe4, 0x65, 0x37, 0x89, 0xce, 0x67, 0x4e, 0x87, 0x9c, 0x05, 0x03, 0x46,
	0x74, 0xf4, 0x2c, 0x03, 0x1b, 0x26, 0x10, 0xb2, 0x1f, 0x7b, 0xb6, 0x81, 0x8d, 0x28, 0x80, 0xea,
	0xe9, 0x39, 0x31, 0x53, 0xf2, 0x73, 0xcd, 0x25, 0xaf, 0xd9, 0x59, 0x97, 0x53, 0xfa, 0x87, 0x98,
	0x29, 0x05, 0x30, 0xa2, 0xa3, 0xe7, 0x1a, 0x64, 0xa0, 0x29, 0x75, 0x0a, 0x4a, 0xcb, 0xae, 0x9e,
	0x37, 0xad, 0xeb, 0xcc, 0x28, 0x94, 0xe8, 0xec, 0xf9, 0x06, 0x9f, 0xcf, 0x7b, 0xa4, 0xda, 0x44,
	0x14, 0xe9, 0x05, 0xc6, 0x8c, 0xe5, 0xdd, 0x2f, 0x11, 0x6f, 0x4b, 0xf1, 0xcc, 0xb4, 0x17, 0x4e,
	0xeb, 0x96, 0x59, 0x2c, 0x8c, 0x1a, 0xeb, 0x45, 0xd3, 0x81, 0x68, 0x13, 0xd7, 0x28, 0x85, 0x46,
	0x04, 0x05, 0xc5, 0x5e, 0xa2, 0x2d, 0x2b, 0x52, 0xab, 0xfa, 0x78, 0xa9, 0xb1, 0xac, 0xc0, 0x6a,
	0x0a, 0xc9, 0xd9, 0x97, 0x19, 0x53, 0x27, 0xbf, 0x25, 0x83, 0x4f, 0xee, 0x83, 0xb8, 0x46, 0xb6,
	0xc7, 0xe8, 0x3b, 0x7b, 0xb9, 0x21, 0x04, 0x69, 0xea, 0xe6, 0xfd, 0x34, 0xf6, 0x8a, 0x69, 0xdd,
	0xfa, 0x89, 0x81, 0x50, 0xd3, 0x7a, 0xa5, 0x21, 0xf9, 0xa0, 0xd8, 0x80, 0xf5, 0xd9, 0xab, 0x0c,
	0x3a, 0x8f, 0xd4, 0xab, 0x7e, 0x5e, 0x6d, 0x6c, 0x07, 0x2e, 0xaf, 0xd8, 0x14, 0x4b, 0x63, 0xaf,
	0x31, 0x19, 0xdb, 0xed, 0x2c, 0xc0, 0x2e, 0x75, 0xdb, 0x6e, 0x0d, 0x11, 0x04, 0x7e, 0xb4, 0xd1,
	0xd4, 0xac, 0x7b, 0xc3, 0xb4, 0xae, 0x95, 0x57, 0xc1, 0x41, 0x5d, 0x37, 0x9f, 0xad, 0xc9, 0xd7,
	0x9b, 0x67, 0xd9, 0x1b, 0x35, 0x28, 0xee, 0xb8, 0xc0, 0xc4, 0xfe, 0xda, 0x8c, 0xe4, 0xfa, 0xec,
	0x4d, 0x06, 0xda, 0x90, 0x15, 0x41, 0x0f, 0xe2, 0x55, 0x2c, 0x84, 0x22, 0xdb, 0xe6, 0xcd, 0x06,
	0xda, 0x62, 0x20, 0xd4, 0x72, 0xdf, 0x62, 0xee, 0xa6, 0x27, 0xcc, 0xd9, 0x54, 0xa3, 0x61, 0x0c,
	0xf9, 0xd6, 0x08, 0x18, 0x0f, 0x8c, 0xc9, 0x2f, 0x87, 0x00, 0x2c, 0x78, 0xc1, 0xec, 0x6d, 0x06,
	0xaf, 0x2e, 0xe2, 0x39, 0x04, 0xa7, 0x64, 0x49, 0x15, 0x6f, 0x37, 0xa6, 0x6e, 0x00, 0x88, 0x09,
	0xbd, 0xc3, 0xe0, 0x66, 0x82, 0x00, 0x44, 0x8b, 0x71, 0x4a, 0x5e, 0x40, 0x60, 0xff, 0x68, 0xac,
	0x31, 0x16, 0x50, 0x74, 0xf9, 0xce, 0xe9, 0x98, 0xf0, 0x07, 0x35, 0x20, 0xaf, 0xe9, 0x5d, 0xd3,
	0xba, 0x95, 0x1f, 0x94, 0xbf, 0xdb, 0x54, 0x85, 0x58, 0xce, 0x5d, 0x0b, 0x39, 0x86, 0x98, 0xc8,
	0x7b, 0xa2, 0x33, 0x0e, 0xc1, 0x89, 0x79, 0xbc, 0xd7, 0x40, 0x22, 0x5f, 0x3c, 0x79, 0xf5, 0x1c,
	0x5c, 0xf6, 0xf7, 0xbe, 0xe8, 0xb8, 0x26, 0x98, 0xe8, 0xee, 0xfd, 0x51, 0x38, 0xbe, 0x29, 0xa1,
	0x50, 0xc3, 0x07, 0xa2, 0xf3, 0x0b, 0xc1, 0x89, 0x0e, 0x3f, 0x38, 0x6d, 0x06, 0x64, 0x29, 0xe8,
	0xc0, 0x07, 0x45, 0xda, 0x61, 0x1f, 0x8a, 0xaa, 0x0a, 0xbd, 0x5e, 0xf5, 0xf3, 0x4f, 0xd3, 0xba,
	0x01, 0xa5, 0x51, 0x1f, 0xa5, 0x99, 0x7f, 0xd8, 0x10, 0x9e, 0xa1, 0x5a, 0xd5, 0xc7, 0x7f, 0x8f,
	0xd0, 0x38, 0x9f, 0x33, 0x05, 0x9a, 0x51, 0x7e, 0xb2, 0x8f, 0xc5, 0x8d, 0x42, 0x6e, 0x18, 0x8e,
	0xf2, 0xf1, 0xb8, 0x51, 0x64, 0xad, 0x1a, 0xe5, 0x13, 0xd3, 0x61, 0x63, 0x30, 0x97, 0x99, 0xdf,
	0x2c, 0x68, 0x06, 0xd3, 0xa7, 0x0d, 0x0d, 0x6a, 0x42, 0x48, 0x87, 0x7e, 0x5a, 0x77, 0xc6, 0xa5,
	0x45, 0xc8, 0x3e, 0x6b, 0x5a, 0x78, 0x8e, 0xef, 0x63, 0xe8, 0x84, 0xbb, 0xf1, 0xbc, 0xef, 0xcf,
	0x19, 0x7d, 0x9b, 0x10, 0xa2, 0xef, 0xcf, 0x4f, 0xeb, 0x3e, 0x6c, 0xc1, 0x03, 0xe6, 0x0d, 0x08,
	0xf4, 0x0b, 0x06, 0x06, 0x34, 0xc2, 0xa3, 0xda, 0x2f, 0x45, 0xac, 0x08, 0xb4, 0x96, 0x83, 0xbb,
	0xa5, 0xec, 0xcb, 0x06, 0x5d, 0x44, 0x01, 0xd4, 0x24, 0xbe, 0x32, 0x1d, 0x13, 0x1f, 0x14, 0x8a,
	0x1f, 0xed, 0xa8, 0x65, 0xcf, 0x6b, 0xb0, 0xaf, 0x4d, 0xc7, 0xb8, 0x7e, 0x21, 0xa0, 0xc0, 0x41,
	0x9e, 0xd6, 0xc3, 0x3e, 0xc1, 0xee, 0x16, 0x5b, 0x2e, 0x5f, 0x1f, 0xbf, 0x95, 0x20, 0xf0, 0xf4,
	0x8d, 0xe9, 0xc4, 0xed, 0xd6, 0xcd, 0x17, 0x87, 0x16, 0x9d, 0x7f, 0x33, 0x02, 0x9e, 0xe1, 0xc7,
	0x93, 0xf1, 0xbd, 0x7f, 0x2b, 0x62, 0xd8, 0xf4, 0x00, 0x17, 0xdd, 0xff, 0x8f, 0xa8, 0x8c, 0xe3,
	0xd3, 0x59, 0xe2, 0xd7, 0x9c, 0xd9, 0xb7, 0x0d, 0x36, 0xa7, 0xc6, 0x20, 0x98, 0x54, 0x6f, 0x72,
	0xdc, 0x7f, 0x33, 0xb8, 0x29, 0x06, 0x4c, 0x8c, 0xf7, 0xef, 0x86, 0x22, 0xa5, 0x3a, 0x04, 0x12,
	0x93, 0x22, 0x4d, 0xc2, 0xbe, 0x63, 0xf4, 0x85, 0xee, 0x6b, 0xfc, 0x5a, 0xbf, 0x6b, 0x6c, 0x79,
	0x1c, 0x9c, 0x18, 0xf4, 0x7b, 0x86, 0xc8, 0x24, 0x95, 0xa0, 0x1f, 0x35, 0xfe, 0x60, 0x5a, 0x8f,
	0x7f, 0x61, 0x8d, 0x5c, 0xfc, 0x0f, 0xa7, 0x43, 0x67, 0x7b, 0x22, 0xef, 0x8d, 0x0e, 0xcf, 0x7c,
	0xf6, 0x23, 0x53, 0x04, 0x86, 0xaa, 0xd5, 0xf0, 0x3f, 0x36, 0x38, 0x83, 0xe6, 0x87, 0x7c, 0xc5,
	0x03, 0x16, 0x7c, 0x29, 0x3f, 0x8b, 0xa2, 0x25, 0x00, 0x11, 0xdd, 0xdc, 0x6f, 0xfa, 0x00, 0x08,
	0x83, 0xb9, 0x75, 0x3d, 0xa3, 0x91, 0xff, 0x73, 0x3a, 0x71, 0x87, 0x35, 0x71, 0x29, 0xf0, 0x62,
	0x80, 0x9f, 0x1b, 0xb6, 0x17, 0x79, 0xf9, 0x30, 0x07, 0x0f, 0x45, 0x21, 0xf8, 0xa7, 0xd2, 0xb2,
	0xe0, 0x9d, 0xff, 0xc2, 0x60, 0x90, 0x5e, 0xb0, 0xf2, 0x7c, 0xd3, 0xc0, 0x53, 0x18, 0xd8, 0x15,
	0x8f, 0x20, 0xb0, 0x5f, 0x19, 0xa4, 0xde, 0x0b, 0x4c, 0xf5, 0xfa, 0xeb, 0x69, 0xe3, 0x70, 0x4e,
	0x03, 0x6f, 0xb8, 0x8e, 0xef, 0x6a, 0x33, 0x61, 0xbf, 0x99, 0x4e, 0x1c, 0xb1, 0x6e, 0xbb, 0x14,
	0x50, 0xd5, 0xfb, 0x6f, 0x63, 0x5c, 0xc2, 0x8a, 0x78, 0x36, 0x55, 0xb8, 0x84, 0xbf, 0x33, 0xf0,
	0x95, 0x77, 0xfc, 0xce, 0xf1, 0x7a, 0x47, 0xdd, 0xd1, 0x50, 0x4e, 0xdc, 0x32, 0xe6, 0x03, 0xfd,
	0xde, 0x58, 0x5b, 0x4f, 0x58, 0x89, 0xde, 0x3f, 0x18, 0x7b, 0xbd, 0x05, 0xb8, 0x98, 0xed, 0x1f,
	0x0d, 0x56, 0xe0, 0x46, 0x88, 0x78, 0x63, 0x81, 0x4b, 0x2d, 0xd9, 0xf1, 0x7f, 0x1a, 0x76, 0x46,
	0x2c, 0xa0, 0xe8, 0xf2, 0x4f, 0xc6, 0xa6, 0x19, 0x30, 0xdc, 0xe6, 0xe2, 0x1d, 0x3e, 0x6c, 0x46,
	0x67, 0xd6, 0x18, 0x30, 0xd1, 0xdd, 0xc3, 0x67, 0x74, 0x75, 0x1c, 0x81, 0x63, 0xf7, 0xcd, 0xe8,
	0xc3, 0x19, 0x13, 0xe3, 0xd1, 0x48, 0xe1, 0xf2, 0x1b, 0xc3, 0xc5, 0x80, 0x49, 0xcf, 0x7f, 0x46,
	0x97, 0xf2, 0xb8, 0xdb, 0x31, 0x9d, 0x3d, 0x6a, 0x26, 0x1c, 0xfd, 0x88, 0xeb, 0xea, 0xd1, 0x33,
	0x7a, 0x88, 0x59, 0x83, 0xd0, 0xd0, 0x30, 0xbf, 0x69, 0xae, 0x28, 0xc3, 0x1e, 0x33, 0x93, 0xb8,
	0xd3, 0x9a, 0xbc, 0x58, 0xab, 0xe2, 0xf9, 0xc0, 0x66, 0x86, 0x46, 0x8f, 0x35, 0x26, 0x14, 0x69,
	0x24, 0x26, 0xf4, 0xb8, 0x19, 0x5d, 0x53, 0x86, 0xa0, 0xd8, 0xe3, 0x8d, 0x95, 0xcb, 0x69, 0xd5,
	0xcf, 0xb9, 0x3c, 0xda, 0xca, 0xcd, 0x8d, 0x27, 0xc4, 0x0d, 0xb4, 0x80, 0x31, 0x4d, 0x1d, 0xea,
	0xef, 0x66, 0xf4, 0x18, 0xac, 0x80, 0xe2, 0x39, 0x03, 0x4f, 0x9c, 0x09, 0xeb, 0x63, 0xe0, 0x25,
	0xf0, 0x86, 0xc4, 0x3b, 0xb6, 0x3e, 0x7b, 0x52, 0xaf, 0xa5, 0x18, 0x74, 0xfe, 0xe4, 0x99, 0x18,
	0x22, 0xd3, 0xa0, 0xc4, 0x8a, 0x9f, 0x32, 0xa3, 0x53, 0xad, 0x0e, 0x16, 0x08, 0x5b, 0xde, 0xe1,
	0x53, 0x67, 0x74, 0xa1, 0x10, 0x0f, 0x29, 0xc3, 0x09, 0x71, 0x94, 0x2b, 0x96, 0xaf, 0xcf, 0xf1,
	0x69, 0x33, 0x3a, 0x6f, 0xc5, 0xc1, 0xc9, 0x43, 0xf0, 0x19, 0x5d, 0x1e, 0x98, 0x80, 0xe1, 0x79,
	0x3e, 0x63, 0xc6, 0x38, 0x57, 0xea, 0x01, 0x2b, 0x3a, 0x7e, 0xe6, 0x8c, 0x6e, 0x37, 0x2d, 0x34,
	0xea, 0x2d, 0xf5, 0xa8, 0xb3, 0xcf, 0x9e, 0x35, 0x63, 0x24, 0x87, 0xa8, 0xfb, 0x56, 0xc2, 0xe9,
	0x7e, 0x76, 0x1c, 0x86, 0xf9, 0x40, 0x3a, 0x1b, 0x3f, 0xa7, 0x37, 0x32, 0x0c, 0xda, 0xfb, 0x87,
	0x99, 0xb0, 0x39, 0x22, 0x5e, 0x00, 0xd2, 0x4f, 0x8a, 0x17, 0xbc, 0x76, 0x85, 0xee, 0x3c, 0xb3,
	0xe7, 0xce, 0x84, 0x3d, 0x2d, 0x01, 0xce, 0x01, 0xe5, 0x7d, 0xb4, 0xe7, 0x19, 0x60, 0xfc, 0x98,
	0x4e, 0x70, 0x05, 0xdd, 0xdb, 0x4b, 0xd3, 0x5b, 0xec, 0xec, 0xf9, 0x86, 0x0c, 0x01, 0xfb, 0x42,
	0xb8, 0xb2, 0x20, 0x8f, 0xcf, 0x39, 0xd5, 0x4d, 0xf6, 0x02, 0x63, 0x11, 0x91, 0x7a, 0xb5, 0x88,
	0x17, 0xce, 0x18, 0x9e, 0x7a, 0x27, 0x1a, 0x57, 0x7d, 0x91, 0x41, 0x70, 0x31, 0x10, 0xc1, 0xf9,
	0x7d, 0xdc, 0x46, 0x72, 0x29, 0xc0, 0x77, 0x40, 0xc7, 0xf2, 0x4b, 0x66, 0x8c, 0x03, 0xc2, 0x5e,
	0xc0, 0x32, 0x36, 0xd1, 0xbb, 0x6b, 0x6e, 0x19, 0xeb, 0x5d, 0xbf, 0xac, 0x77, 0xd7, 0x3a, 0xb0,
	0xe8, 0xfa, 0xe5, 0x06, 0x26, 0xb9, 0x73, 0x9e, 0x5b, 0x6b, 0x02, 0x35, 0xd3, 0x2b, 0x28, 0xec,
	0x15, 0x71, 0x34, 0xaf, 0x4f, 0x54, 0x0e, 0xfb, 0xca, 0x38, 0xce, 0x34, 0x01, 0xc5, 0x90, 0xaf,
	0xea, 0xc5, 0xea, 0x66, 0x87, 0xaf, 0x8e, 0x23, 0x44, 0x1d, 0x4c, 0x66, 0x01, 0xcc, 0xe8, 0xd6,
	0x8d, 0x31, 0x30, 0x3f, 0x78, 0x45, 0x7b, 0x50, 0x37, 0x87, 0x5e, 0x3b, 0x93, 0x38, 0x6c, 0xdd,
	0x7a, 0x49, 0x0d, 0xc4, 0x10, 0xaf, 0x33, 0xe4, 0x2c, 0x47, 0x52, 0xb9, 0xeb, 0xe3, 0x33, 0x21,
	0x6e, 0x8d, 0xbd, 0x7e, 0xc6, 0xf4, 0x88, 0xd4, 0x67, 0x94, 0x80, 0xee, 0xd2, 0xf8, 0xfd, 0x0a,
	0xf6, 0x86, 0xde, 0x5b, 0x82, 0xba, 0x86, 0x6f, 0x8b, 0x92, 0x08, 0x6f, 0x34, 0x38, 0xab, 0x37,
	0xb4, 0x98, 0xdc, 0x9b, 0x66, 0x7a, 0xa6, 0x0b, 0xa9, 0x09, 0xbc, 0x39, 0x4e, 0x18, 0xea, 0x5d,
	0x06, 0xe4, 0xf3, 0x96, 0x38, 0xd9, 0x15, 0x06, 0x95, 0xe9, 0x04, 0xbd, 0xd7, 0x95, 0x69, 0x3b,
	0xab, 0x9d, 0x50, 0x76, 0xc1, 0x4c, 0x4f, 0x3b, 0x42, 0x83, 0x66, 0x6f, 0xbf, 0x48, 0xa7, 0x52,
	0xbe, 0x88, 0x84, 0x83, 0xde, 0xc8, 0x32, 0xa0, 0x65, 0xf2, 0x41, 0x6f, 0x44, 0x90, 0x3a, 0xeb,
	0xb6, 0xd4, 0x74, 0xdf, 0xd9, 0x1b, 0x11, 0x01, 0xa8, 0xe8, 0xf6, 0x5d, 0xbd, 0x94, 0x4d, 0xc9,
	0xc3, 0x14, 0xce, 0xf2, 0x79, 0x47, 0x3e, 0x5e, 0xc4, 0xde, 0x1d, 0xd7, 0x6d, 0x18, 0x54, 0x74,
	0xfb, 0x9e, 0x5e, 0x9c, 0xc2, 0x61, 0x65, 0x97, 0xef, 0xed, 0xc5, 0x29, 0x12, 0x4c, 0x74, 0xf7,
	0x3e, 0x43, 0x55, 0x47, 0x1f, 0xb5, 0x62, 0xef, 0x37, 0xe6, 0xa6, 0xcb, 0x74, 0x7a, 0xe5, 0x95,
	0xdb, 0xbe, 0xfc, 0xf1, 0x5c, 0xf6, 0x81, 0xb8, 0x6d, 0x0a, 0x06, 0x4d, 0xd5, 0x6a, 0x78, 0x9d,
	0x58, 0x4e, 0xf1, 0x83, 0x71, 0xdb, 0x14, 0x03, 0x2d, 0x66, 0xfa, 0x21, 0x6d, 0x45, 0xcb, 0xe0,
	0x0a, 0x02, 0xbf, 0xb9, 0x35, 0x71, 0x0f, 0x5b, 0xbe, 0xa4, 0x95, 0x69, 0xac, 0xb1, 0x7f, 0x8a,
	0xe3, 0x7d, 0x71, 0x98, 0x5c, 0xf7, 0xc1, 0x44, 0xaf, 0x3a, 0x0d, 0x23, 0x78, 0xfd, 0xe1, 0x38,
	0xde, 0x8f, 0x6f, 0x20, 0x23, 0x36, 0xc6, 0x1e, 0x44, 0x9e, 0xbb, 0x95, 0x0e, 0xe2, 0x47, 0x0c,
	0x74, 0x10, 0xf7, 0x71, 0xa4, 0xc6, 0xbd, 0xbe, 0xce, 0x3e, 0xda, 0x6b, 0x63, 0x2b, 0x18, 0x9d,
	0x56, 0xb3, 0xfd, 0x58, 0xaf, 0x8d, 0x95, 0x60, 0x32, 0x31, 0xa4, 0x17, 0x4d, 0x11, 0x1c, 0x8f,
	0xb2, 0xc9, 0x3e, 0x3f, 0x11, 0xa7, 0x4b, 0x22, 0xb0, 0xa2, 0xe3, 0x4f, 0xce, 0x44, 0xc2, 0x4d,
	0x6d, 0x07, 0xef, 0xc2, 0xeb, 0x27, 0xc0, 0xec, 0x53, 0x06, 0xf5, 0x6f, 0xf5, 0x10, 0x20, 0xfb,
	0xf4, 0x4c, 0x38, 0xd6, 0x46, 0x1d, 0xea, 0xf4, 0x45, 0x5d, 0x7e, 0xc6, 0xe8, 0x92, 0xc7, 0x46,
	0x28, 0x72, 0x5f, 0x39, 0x5f, 0xc7, 0x33, 0x5f, 0x7c, 0x5a, 0xb3, 0xcd, 0x43, 0xd0, 0x9f, 0x9d,
	0x89, 0x8b, 0xf7, 0xd4, 0xc5, 0xe9, 0x70, 0x6a, 0x15, 0x74, 0x35, 0xe6, 0x7e, 0xf8, 0xec, 0x73,
	0x06, 0xb1, 0xf4, 0x06, 0x0c, 0xa2, 0x54, 0x11, 0x76, 0xe0, 0x5b, 0x2a, 0x3e, 0xb1, 0xe5, 0x36,
	0x9b, 0x30, 0x75, 0x9e, 0x93, 0xc6, 0xfe, 0x39, 0x6e, 0x16, 0x71, 0x80, 0x5f, 0x88, 0x9b, 0x45,
	0x0c, 0xa0, 0x9a, 0xc5, 0xbf, 0xcc, 0x18, 0xde, 0x7e, 0x28, 0x89, 0x5a, 0x3f, 0xa2, 0xe2, 0x1b,
	0xfc, 0x45, 0x63, 0x80, 0xad, 0xe0, 0xc5, 0x00, 0x5f, 0xd2, 0xf6, 0x84, 0x32, 0xa4, 0x82, 0x88,
	0x08, 0xd7, 0x63, 0x42, 0x3a, 0x7c, 0x59, 0x13, 0x1f, 0x08, 0x97, 0xc2, 0xdd, 0xd2, 0xde, 0xdb,
	0x66, 0x5f, 0x09, 0x01, 0xf0, 0x87, 0xa9, 0x38, 0x04, 0x3a, 0xca, 0xec, 0xab, 0x1a, 0x92, 0xe2,
	0x00, 0xd4, 0x94, 0xbe, 0xa6, 0x99, 0xb2, 0xfc, 0x11, 0xeb, 0x8e, 0x3e, 0xd0, 0xbf, 0x6a, 0xec,
	0x13, 0xad, 0x56, 0xbd, 0x7c, 0x7d, 0x26, 0x7c, 0x5c, 0x80, 0x48, 0xf0, 0xba, 0x9d, 0xc8, 0xcc,
	0xbf, 0x39, 0x13, 0xf8, 0xf8, 0xf4, 0x25, 0x02, 0xd0, 0xec, 0xdc, 0x16, 0x28, 0xf1, 0x6f, 0x05,
	0xfb, 0xec, 0xdb, 0x1a, 0x2b, 0x20, 0x88, 0x59, 0xad, 0xa2, 0x5f, 0xa1, 0x99, 0x85, 0xa1, 0x64,
	0xf0, 0x4b, 0xdb, 0xa3, 0x08, 0x98, 0x8a, 0xb2, 0xbb, 0xad, 0x4e, 0xc6, 0xad, 0xe2, 0xeb, 0x63,
	0xec, 0x3b, 0x06, 0x79, 0x91, 0x8d, 0x91, 0xa7, 0xaf, 0xdf, 0xa8, 0xcc, 0x39, 0x3c, 0xb0, 0x6d,
	0x75, 0xd8, 0x77, 0x35, 0xa7, 0x8f, 0xf7, 0x0c, 0x02, 0xb6, 0x7e, 0xae, 0xeb, 0xa3, 0xcc, 0xca,
	0x36, 0x9c, 0x96, 0x0f, 0x16, 0xcb, 0xf7, 0x0c, 0xcf, 0x50, 0x71, 0x21, 0xbf, 0xa3, 0x94, 0x07,
	0xeb, 0x01, 0xe7, 0xf8, 0xfd, 0x50, 0x4f, 0xc8, 0x29, 0x5c, 0xfd, 0xe1, 0x70, 0x82, 0x26, 0x7e,
	0xa4, 0x99, 0x8f, 0x92, 0x76, 0x44, 0xdc, 0x9b, 0xce, 0xd3, 0x7f, 0x1c, 0x43, 0x5b, 0x5a, 0xbd,
	0x42, 0xc8, 0x7f, 0x18, 0x33, 0x0a, 0x9e, 0x60, 0xc3, 0x84, 0x1d, 0xba, 0x0d, 0x89, 0xc1, 0x9b,
	0x9f, 0x18, 0x96, 0x4e, 0x00, 0xa4, 0x07, 0x9f, 0x7f, 0xda, 0xa3, 0x23, 0x23, 0xfc, 0xfc, 0xb3,
	0xd0, 0x5e, 0x2a, 0x0e, 0xd4, 0xcf, 0x18, 0xd9, 0xfd, 0x9a, 0x48, 0xef, 0x09, 0x15, 0x64, 0xaf,
	0x44, 0x44, 0xa5, 0x76, 0x34, 0x0a, 0xfa, 0x8d, 0xf6, 0x8c, 0xfd, 0x3c, 0x22, 0x26, 0x34, 0x28,
	0x9e, 0xf0, 0xc4, 0x01, 0x7f, 0x31, 0x13, 0x0e, 0x25, 0x47, 0x00, 0x53, 0x8d, 0x06, 0xc2, 0xd6,
	0x41, 0xb4, 0xfd, 0x32, 0x22, 0x56, 0x35, 0x68, 0xfa, 0x93, 0xbf, 0xe1, 0xf1, 0x2b, 0x43, 0xf8,
	0x07, 0x12, 0x8d, 0x40, 0x96, 0x9c, 0x26, 0x68, 0x32, 0x94, 0xea, 0xdc, 0xe9, 0xff, 0x75, 0x64,
	0xae, 0x1a, 0xb0, 0x76, 0xe4, 0xcb, 0x7e, 0x33, 0x63, 0x1e, 0x6a, 0xf0, 0x24, 0x96, 0x65, 0x2d,
	0x33, 0xf9, 0xb7, 0x33, 0xc6, 0x71, 0x83, 0x01, 0x21, 0xf0, 0xf7, 0xbb, 0x10, 0x4d, 0x72, 0x10,
	0x7c, 0x87, 0xd4, 0x6b, 0xe0, 0xcb, 0xee, 0x1b, 0xe0, 0x0b, 0xb3, 0xdf, 0xc7, 0xa8, 0x05, 0x9c,
	0x92, 0x49, 0x9b, 0xa4, 0x62, 0xff, 0x68, 0x84, 0x2c, 0xf4, 0x87, 0x36, 0xd9, 0x9f, 0x67, 0x62,
	0x0e, 0xce, 0xd4, 0x9b, 0x98, 0xec, 0xde, 0x64, 0x4c, 0x4a, 0x70, 0xe4, 0xc9, 0x4c, 0xf6, 0xb0,
	0x64, 0x98, 0x89, 0x84, 0xe6, 0x93, 0x0f, 0x99, 0x62, 0x7a, 0xf1, 0xc3, 0x93, 0xfa, 0xc2, 0xf5,
	0x54, 0x4d, 0x25, 0x32, 0xee, 0x4b, 0xea, 0x54, 0x1d, 0x02, 0x11, 0x63, 0x3d, 0x22, 0x32, 0x16,
	0x3d, 0xce, 0xbc, 0x69, 0xe4, 0xfb, 0x3f, 0x32, 0x19, 0xa6, 0x40, 0xe0, 0x9e, 0x82, 0x7b, 0xde,
	0xe8, 0x92, 0x3d, 0x2a, 0x69, 0x6e, 0x05, 0x41, 0xe5, 0x7c, 0xfd, 0x04, 0xe5, 0xd1, 0xc9, 0x50,
	0x94, 0x5c, 0xd6, 0xf0, 0xc3, 0xeb, 0xc7, 0x24, 0xc3, 0xae, 0x3c, 0x8a, 0xcb, 0x08, 0xd8, 0x63,
	0x93, 0xba, 0xd3, 0x14, 0x7a, 0xfd, 0x93, 0x3d, 0x2e, 0xa9, 0xef, 0xa4, 0x31, 0xc5, 0x25, 0xa7,
	0x7d, 0x16, 0xf3, 0x82, 0xd4, 0x85, 0x89, 0x64, 0x4c, 0xc0, 0x50, 0xd8, 0x5d, 0x98, 0x4a, 0xf8,
	0x84, 0x64, 0x4c, 0x9c, 0x4b, 0xd4, 0x2b, 0x2c, 0xff, 0x5d, 0x32, 0x26, 0x0a, 0x15, 0x00, 0x09,
	0x3c, 0x3f, 0x31, 0x19, 0x63, 0x1c, 0x29, 0x13, 0x46, 0xdd, 0x54, 0xe0, 0x5d, 0x3e, 0x29, 0x19,
	0x63, 0x01, 0x47, 0x81, 0x45, 0xd7, 0x4f, 0x36, 0xb6, 0x59, 0xc9, 0x5c, 0x81, 0x17, 0x1e, 0xfd,
	0x78, 0x8a, 0x81, 0x32, 0x52, 0x50, 0x5a, 0x00, 0xe7, 0xef, 0x93, 0xba, 0x39, 0xb2, 0xe5, 0x13,
	0xa9, 0xec, 0x69, 0xc6, 0x42, 0xb6, 0x7e, 0xdb, 0x94, 0x3d, 0x3d, 0x19, 0xd6, 0x93, 0xb9, 0x66,
	0x95, 0x7f, 0x18, 0xb6, 0x14, 0x7c, 0x2a, 0xbf, 0x9c, 0x29, 0xb2, 0x67, 0x24, 0xc3, 0x16, 0x51,
	0x1c, 0x64, 0x1e, 0x2f, 0x11, 0xb2, 0x67, 0x26, 0x75, 0x6f, 0x43, 0xa0, 0x87, 0x4b, 0x2e, 0x0a,
	0x76, 0xb2, 0x67, 0x25, 0x63, 0x42, 0x0b, 0x1a, 0x40, 0x70, 0x23, 0xc4, 0x98, 0x9f, 0x0c, 0x99,
	0x06, 0x0f, 0x68, 0x07, 0xd7, 0x42, 0x9e, 0x93, 0xd4, 0xcd, 0xfb, 0x2d, 0x20, 0x83, 0x30, 0x56,
	0x64, 0x5b, 0x90, 0x98, 0x85, 0x54, 0xe1, 0x69, 0x32, 0xec, 0xb9, 0x06, 0x32, 0xe3, 0x95, 0x53,
	0x70, 0xd9, 0xc4, 0xa0, 0xd6, 0x68, 0x7c, 0xed, 0xf9, 0x49, 0x3d, 0xc7, 0x2d, 0xa8, 0x67, 0x2f,
	0x30, 0xb8, 0x2e, 0xa8, 0xe0, 0xf7, 0x2f, 0xd8, 0x0b, 0x93, 0xd1, 0xbc, 0xda, 0xa0, 0x3a, 0x48,
	0x85, 0x49, 0xc6, 0x24, 0x51, 0xc8, 0x5c, 0x0c, 0xda, 0x97, 0x17, 0x27, 0x63, 0x92, 0x28, 0x74,
	0x08, 0xd5, 0xd7, 0x4b, 0xa2, 0x24, 0xab, 0x20, 0x85, 0xe3, 0xc8, 0x5e, 0x1a, 0xa1, 0x88, 0x08,
	0x4c, 0x70, 0xf1, 0x64, 0xab, 0xfe, 0x44, 0x2e, 0xca, 0xcb, 0xb7, 0xea, 0x2f, 0x94, 0xd1, 0xf8,
	0x0a, 0x6d, 0x25, 0x42, 0x41, 0x9f, 0x72, 0xdd, 0xb3, 0xb0, 0x39, 0xe4, 0xa0, 0xb8, 0x8a, 0x19,
	0xd9, 0x2b, 0x93, 0xa6, 0x59, 0xd6, 0x03, 0xec, 0x55, 0xc6, 0x46, 0x63, 0x18, 0x08, 0xbf, 0xc9,
	0x10, 0x44, 0x52, 0x97, 0x3c, 0xcd, 0x39, 0x7b, 0xb5, 0xc1, 0xfe, 0x3d, 0x81, 0x65, 0x94, 0xca,
	0x90, 0x77, 0x26, 0x34, 0x7a, 0x8b, 0xf5, 0xa0, 0xe3, 0xd7, 0x1a, 0x28, 0xe8, 0x01, 0x2a, 0x23,
	0x53, 0x86, 0x34, 0xbf, 0xa7, 0x5b, 0xaf, 0x9e, 0xa5, 0x1b, 0x92, 0x0a, 0x78, 0x93, 0xbd, 0xde,
	0x18, 0x39, 0x0e, 0x24, 0xb8, 0xc0, 0x92, 0x8c, 0xf5, 0xce, 0x02, 0x4b, 0x39, 0xc5, 0x0d, 0xb1,
	0x37, 0x6a, 0xac, 0xad, 0x32, 0x56, 0x75, 0x7b, 0xfa, 0x4d, 0x1a, 0x6b, 0xc7, 0x01, 0xa8, 0x11,
	0xdf, 0xac, 0x8d, 0x28, 0x00, 0x71, 0xc4, 0x72, 0x17, 0xfe, 0xdc, 0xd4, 0xd2, 0xf4, 0xde, 0x92,
	0x0c, 0x9c, 0xa0, 0x2d, 0xe0, 0x82, 0xc8, 0x54, 0x32, 0x9c, 0x71, 0x04, 0xc4, 0x73, 0xae, 0x5e,
	0x73, 0x79, 0x0b, 0x91, 0x55, 0xfb, 0xb6, 0x64, 0xd8, 0xc2, 0xa1, 0x88, 0x59, 0xc0, 0xdf, 0xd2,
	0xf2, 0x7c, 0x7b, 0x44, 0xff, 0x8a, 0xb4, 0x8d, 0xdc, 0x5d, 0x78, 0xd2, 0x7b, 0x0f, 0xcf, 0xdc,
	0x49, 0xf6, 0x36, 0x4f, 0x79, 0xdc, 0xba, 0xc6, 0xde, 0x99, 0x34, 0x3d, 0x20, 0x33, 0xfa, 0x58,
	0x6f, 0x2a, 0xa5, 0xf7, 0xae, 0x10, 0x6d, 0xc7, 0x00, 0xca, 0x6b, 0x2f, 0x49, 0xdd, 0xd0, 0xd1,
	0x5f, 0xbe, 0x67, 0xef, 0x31, 0xf4, 0x49, 0xe8, 0x5d, 0x7b, 0xf6, 0x5e, 0x83, 0x76, 0xe2, 0x5e,
	0x7c, 0x67, 0xef, 0x33, 0x64, 0xc5, 0x16, 0x8f, 0xc2, 0xb3, 0xf7, 0x27, 0xc3, 0x96, 0x59, 0x2c,
	0xe9, 0x40, 0x2d, 0xfb, 0x80, 0xb6, 0xe7, 0xc1, 0xdb, 0x7a, 0x95, 0xb6, 0x53, 0x3d, 0x9b, 0xa9,
	0x3b, 0x0d, 0x6f, 0x4d, 0xec, 0xce, 0x07, 0x93, 0xf1, 0x07, 0x8a, 0xd2, 0xd4, 0x93, 0xa8, 0xfa,
	0x50, 0x32, 0x3e, 0x44, 0x1d, 0xc0, 0xc9, 0x04, 0x9e, 0x38, 0xc9, 0x17, 0xb3, 0xdd, 0x3e, 0xfb,
	0xb0, 0xa1, 0x47, 0xb6, 0x80, 0x0c, 0xc2, 0x44, 0xda, 0xfa, 0x83, 0x0b, 0xc2, 0x22, 0xc1, 0x95,
	0x2e, 0x6f, 0xc9, 0xe7, 0x25, 0xd8, 0x47, 0x42, 0x54, 0x27, 0x71, 0xa0, 0xc7, 0x54, 0x30, 0x1a,
	0xc6, 0x3e, 0xaa, 0x11, 0x71, 0xf9, 0x9e, 0x3c, 0x7d, 0x60, 0xd0, 0xad, 0x69, 0x66, 0x03, 0x41,
	0x7d, 0x2c, 0xca, 0x6b, 0x82, 0x3a, 0xd5, 0x67, 0x4b, 0x28, 0xa2, 0xc0, 0x3e, 0x9e, 0x0c, 0x62,
	0x70, 0xe4, 0xe4, 0xe2, 0xf5, 0xe2, 0x0c, 0xec, 0xdf, 0x26, 0xd2, 0xb0, 0xf6, 0xa4, 0xa0, 0x08,
	0x14, 0x25, 0x63, 0x42, 0x76, 0xda, 0x69, 0x57, 0x28, 0x1d, 0xeb, 0x93, 0x49, 0x3d, 0x4c, 0xb1,
	0x05, 0xb8, 0xbc, 0x6b, 0x94, 0x0c, 0x9f, 0x1b, 0xca, 0xd7, 0x3f, 0x57, 0x9a, 0x0d, 0xaf, 0x7a,
	0x96, 0x7d, 0x3a, 0x19, 0x9c, 0x75, 0x89, 0xe0, 0x05, 0x45, 0x74, 0x49, 0x59, 0x7e, 0x46, 0xdb,
	0xca, 0x80, 0x86, 0x64, 0x0f, 0xba, 0x43, 0xf8, 0xd9, 0x90, 0xbd, 0x2b, 0x2e, 0x4e, 0x69, 0x90,
	0xec, 0x73, 0xc9, 0xc4, 0x31, 0x2b, 0x19, 0x1b, 0x41, 0xaf, 0xd0, 0x43, 0xca, 0xe1, 0x18, 0x5e,
	0x5a, 0x7e, 0xd0, 0x59, 0x84, 0xac, 0x3f, 0x9f, 0x0c, 0x3b, 0x6b, 0xdc, 0x64, 0x33, 0xd5, 0x8c,
	0x9c, 0xd1, 0x3f, 0x27, 0xc3, 0x27, 0x67, 0xf1, 0xd0, 0x02, 0x51, 0x5f, 0x88, 0x68, 0x44, 0x0e,
	0x2e, 0xae, 0xa7, 0xd1, 0xd9, 0x9f, 0xec, 0xfa, 0x4b, 0xc9, 0xb0, 0x7f, 0x17, 0x07, 0x2b, 0x3a,
	0xfe, 0xb2, 0xa6, 0x14, 0x81, 0xbc, 0xf8, 0xf5, 0xec, 0x62, 0x33, 0x34, 0x0f, 0xf6, 0x95, 0x58,
	0x54, 0x63, 0x4e, 0xa2, 0xf9, 0x1a, 0xba, 0xcf, 0xbe, 0x1a, 0x0b, 0xb9, 0x18, 0x03, 0xf9, 0x35,
	0x8d, 0xbf, 0xb6, 0x84, 0x0c, 0x52, 0xab, 0xb4, 0xbe, 0x03, 0xfe, 0x8a, 0xeb, 0xfb, 0xeb, 0x5a,
	0xdf, 0x5b, 0x42, 0x06, 0xef, 0x0f, 0x68, 0x12, 0xd4, 0x7c, 0x50, 0x9d, 0x7d, 0x33, 0x69, 0x06,
	0x86, 0xa2, 0x6f, 0xad, 0xb3, 0x6f, 0xe9, 0x33, 0xbb, 0x27, 0xaf, 0x09, 0x3f, 0x70, 0xd0, 0x91,
	0xb3, 0x40, 0xf3, 0xac, 0xb5, 0xd1, 0xbc, 0xff, 0x1f, 0x1a, 0xa7, 0x9a, 0xab, 0x0e, 0x01, 0x7e,
	0x3b, 0x19, 0x84, 0x87, 0xb6, 0x02, 0x0c, 0x5e, 0x3f, 0x88, 0xe8, 0xa7, 0x45, 0xb4, 0x4d, 0x71,
	0xf1, 0x0b, 0xc0, 0xfe, 0xd4, 0x05, 0xfb, 0xf7, 0x08, 0x71, 0x44, 0x81, 0x82, 0x7b, 0x53, 0x1a,
	0xd5, 0xc1, 0xaa, 0x84, 0x6b, 0x6b, 0x5e, 0x54, 0x12, 0x1f, 0xd6, 0x64, 0xdf, 0xd5, 0x14, 0x1f,
	0x62, 0x80, 0x42, 0xc4, 0xf4, 0x60, 0x71, 0xc5, 0x13, 0xa6, 0x1b, 0xfb, 0x9e, 0x06, 0x63, 0x2c,
	0x89, 0x03, 0x92, 0x4f, 0xf8, 0x7d, 0x6d, 0xcc, 0x1e, 0x30, 0x6a, 0x7e, 0x3f, 0x08, 0xd9, 0x92,
	0x02, 0x9e, 0x00, 0x53, 0xfc, 0x12, 0x06, 0xfb, 0xa1, 0x61, 0x0b, 0xe3, 0x8c, 0xe7, 0xbd, 0x8e,
	0xf1, 0x40, 0xc5, 0x8f, 0x92, 0x7a, 0x3a, 0x50, 0x0c, 0x44, 0x34, 0xbc, 0xfa, 0x63, 0x8d, 0x58,
	0x04, 0xd0, 0xbc, 0xc7, 0x85, 0xd2, 0x7f, 0xf4, 0xb0, 0x12, 0xb4, 0x67, 0x98, 0x7d, 0xf6, 0x13,
	0x0d, 0xc8, 0x58, 0xa4, 0x06, 0xc5, 0x7e, 0xaa, 0x6d, 0x55, 0x2f, 0xa0, 0x20, 0x9a, 0xa5, 0xf5,
	0x68, 0x10, 0xbc, 0xde, 0xe3, 0xfd, 0x5a, 0x8f, 0xbd, 0x80, 0x82, 0x58, 0x56, 0x2f, 0x96, 0xd7,
	0x80, 0xf1, 0x59, 0x04, 0x9f, 0xfd, 0x3c, 0x56, 0x97, 0x69, 0x60, 0xe2, 0xf9, 0x63, 0xf6, 0x8b,
	0x88, 0x96, 0xc2, 0x2e, 0x4f, 0xd2, 0x33, 0xff, 0x9b, 0xcb, 0x6d, 0xb7, 0x56, 0x17, 0xaa, 0xf7,
	0x97, 0x9a, 0x74, 0x0c, 0xc6, 0xc6, 0x98, 0x80, 0x1e, 0x24, 0xe0, 0xb4, 0xe0, 0xd4, 0xd8, 0xaf,
	0x43, 0x76, 0x87, 0x7a, 0x82, 0x59, 0x87, 0x06, 0xce, 0x87, 0x29, 0xfc, 0x26, 0x76, 0x0a, 0x78,
	0x8e, 0x5b, 0xaf, 0xe2, 0x27, 0x42, 0xd1, 0x42, 0x39, 0x57, 0xef, 0x6c, 0xb2, 0xdf, 0xea, 0x46,
	0x29, 0xdf, 0x62, 0x0c, 0x40, 0x75, 0x9b, 0xa2, 0xbb, 0x72, 0x77, 0x63, 0xc3, 0x01, 0xf3, 0xea,
	0x77, 0xb1, 0x38, 0x35, 0x1e, 0x05, 0xb1, 0x15, 0x4e, 0x7f, 0x9f, 0x0c, 0x5f, 0xde, 0x0d, 0xc4,
	0x73, 0xf0, 0x69, 0x3f, 0xf6, 0x87, 0x10, 0x93, 0x72, 0xd0, 0x00, 0x40, 0x1d, 0x7e, 0xa3, 0x85,
	0xf4, 0x47, 0xc3, 0x42, 0x42, 0xf0, 0x7c, 0xaa, 0xc0, 0x67, 0x62, 0xdc, 0x2a, 0xff, 0xcf, 0xe8,
	0x82, 0x52, 0xbe, 0x8f, 0x6f, 0xf6, 0x34, 0x97, 0xea, 0xcd, 0xba, 0x8a, 0x99, 0xfd, 0x29, 0x16,
	0x43, 0x40, 0x24, 0x39, 0xfa, 0xee, 0x2d, 0x19, 0x73, 0xa4, 0x31, 0xff, 0x9c, 0x0c, 0x1f, 0x62,
	0xf0, 0x7d, 0x0e, 0xc1, 0x29, 0xbd, 0xc9, 0xee, 0x9d, 0x35, 0x75, 0x1e, 0xef, 0x3d, 0x04, 0x6e,
	0x17, 0x41, 0xf5, 0x36, 0xdc, 0xe5, 0x14, 0x7b, 0xd8, 0x6c, 0x9c, 0xb4, 0xe7, 0xa9, 0x22, 0xf8,
	0xf8, 0x16, 0xdf, 0x01, 0x8c, 0x7c, 0x3e, 0x7c, 0x36, 0x1c, 0xf4, 0x8a, 0x83, 0xba, 0x6f, 0x36,
	0x3e, 0x94, 0xa9, 0x63, 0x01, 0xa7, 0xc2, 0x1e, 0x31, 0x1b, 0xf6, 0x80, 0x62, 0x3f, 0x50, 0xc4,
	0x1e, 0x39, 0x1b, 0x27, 0xaa, 0x4a, 0x2e, 0x58, 0x3a, 0x35, 0xcd, 0x4e, 0x24, 0x7b, 0xef, 0x51,
	0xb3, 0xba, 0xd9, 0xa9, 0xe7, 0x1c, 0x86, 0xaf, 0x76, 0x3e, 0x7a, 0x36, 0x3e, 0x91, 0x31, 0x26,
	0x8b, 0xee, 0x31, 0xb3, 0x61, 0x5b, 0xd6, 0x38, 0x9b, 0xd2, 0x18, 0xea, 0xb1, 0xb3, 0x66, 0xb8,
	0x4e, 0xc4, 0x5e, 0x15, 0x84, 0xa0, 0xa5, 0xc7, 0xcd, 0xc6, 0xa9, 0x4d, 0xfd, 0xc0, 0x24, 0xd0,
	0x9f, 0x68, 0x77, 0xfa, 0xec, 0xf1, 0xb3, 0x61, 0xab, 0x67, 0x2b, 0xe8, 0x27, 0xcc, 0xc6, 0x49,
	0x0a, 0xda, 0x7b, 0xce, 0x2a, 0xd2, 0x45, 0xfa, 0xbb, 0x59, 0x3d, 0x0e, 0x12, 0xfe, 0xbe, 0x16,
	0x7b, 0xe2, 0xac, 0x2e, 0xd4, 0x63, 0xbe, 0x9c, 0xc5, 0x9e, 0x14, 0x99, 0x17, 0xbf, 0x97, 0xb3,
	0xe4, 0x35, 0x11, 0x99, 0x27, 0x9d, 0x46, 0xbd, 0x46, 0x3c, 0x44, 0x97, 0x75, 0x9e, 0x32, 0x1b,
	0x27, 0x6f, 0xb2, 0x17, 0xaa, 0x34, 0x1d, 0x3a, 0x62, 0x04, 0xed, 0xa8, 0x62, 0xc7, 0x4f, 0x9d,
	0x4d, 0x3c, 0xd0, 0x3a, 0x7c, 0xa9, 0xe0, 0x41, 0x8a, 0xd9, 0x6c, 0x60, 0xcc, 0x86, 0xbf, 0x53,
	0xcb, 0x9e, 0x36, 0x1b, 0x0e, 0xa8, 0xa2, 0xb7, 0xa1, 0x02, 0x09, 0xdc, 0xd1, 0xf2, 0xd9, 0xd3,
	0x67, 0xc3, 0x76, 0x63, 0x1c, 0x58, 0x70, 0x53, 0x6d, 0xd6, 0xb4, 0x1b, 0xb7, 0x78, 0x9c, 0x9e,
	0x3d, 0x73, 0x36, 0x1c, 0x14, 0x0e, 0xfa, 0x15, 0xaf, 0xe0, 0x3f, 0x2b, 0xc2, 0x42, 0x21, 0x07,
	0x0f, 0x8c, 0x03, 0xca, 0x18, 0x7a, 0xf6, 0x6c, 0xd8, 0x13, 0x2c, 0x0b, 0xdf, 0x7f, 0x69, 0x69,
	0xd9, 0x01, 0x19, 0xba, 0xd0, 0xe8, 0xfa, 0xeb, 0x78, 0x1c, 0xc5, 0x9e, 0xa3, 0xef, 0x25, 0xbe,
	0xb7, 0xc1, 0x63, 0xfe, 0x6d, 0xc7, 0x5f, 0x17, 0x2f, 0x32, 0xfc, 0x83, 0x4e, 0xe6, 0x71, 0x10,
	0xc1, 0xe5, 0xb5, 0x10, 0x43, 0x88, 0x2c, 0x9d, 0x8e, 0x78, 0x44, 0x60, 0x0d, 0xec, 0x75, 0xe1,
	0xd4, 0x3e, 0x6f, 0x36, 0xf6, 0x50, 0x9b, 0xa6, 0x48, 0x81, 0x47, 0x7f, 0xbd, 0xde, 0x62, 0xcf,
	0x8f, 0x30, 0x18, 0x06, 0x06, 0x85, 0x39, 0xe3, 0xeb, 0xdb, 0xf7, 0x82, 0x1e, 0xb2, 0x20, 0xe6,
	0xb9, 0x76, 0xf6, 0x42, 0x0d, 0x56, 0x17, 0x6c, 0x71, 0xb0, 0x2f, 0x32, 0x36, 0x70, 0xcb, 0xe7,
	0xdf, 0xd9, 0x8b, 0xb5, 0xdd, 0x11, 0x12, 0x5e, 0x97, 0x07, 0x41, 0xa7, 0x2f, 0x99, 0x8d, 0x33,
	0x3f, 0x50, 0xb5, 0x07, 0x67, 0x8a, 0xec, 0xa5, 0xb3, 0x71, 0x86, 0x2a, 0xcf, 0x0d, 0x20, 0x38,
	0x91, 0x83, 0xc4, 0x5e, 0x36, 0x1b, 0x3d, 0xf4, 0xe2, 0x29, 0x27, 0x98, 0x02, 0x2a, 0x6d, 0xbf,
	0x97, 0x6b, 0x42, 0xd5, 0xb4, 0x90, 0xe7, 0xc1, 0xe7, 0x6f, 0xc1, 0xff, 0xb9, 0x31, 0xf1, 0x0a,
	0x8d, 0xc0, 0xa5, 0x1d, 0xa9, 0x25, 0xdc, 0x54, 0x3c, 0xbe, 0x81, 0xc7, 0xbd, 0x46, 0x0d, 0x5f,
	0xbb, 0x7a, 0xe5, 0x6c, 0x9c, 0x13, 0x51, 0xde, 0xc2, 0xd0, 0x7f, 0x55, 0x84, 0x34, 0x4d, 0x9f,
	0xb3, 0xe0, 0x95, 0x00, 0xc7, 0xf8, 0x7c, 0x23, 0x7b, 0x75, 0x2c, 0x4f, 0x2a, 0xc9, 0x2e, 0xef,
	0x8d, 0xbf, 0x46, 0x43, 0x40, 0xb0, 0x9f, 0x38, 0x43, 0x9d, 0x42, 0x5e, 0xab, 0xab, 0x33, 0xf9,
	0xf8, 0x19, 0x25, 0x9c, 0x07, 0x50, 0xd8, 0xc6, 0x67, 0xaf, 0x9b, 0x0d, 0x9b, 0x90, 0x78, 0x62,
	0x0a, 0x4c, 0x8b, 0xac, 0x55, 0x76, 0x79, 0x30, 0xec, 0xf5, 0xb3, 0xe1, 0xe0, 0x96, 0x71, 0xcb,
	0xa5, 0x4c, 0x9f, 0x42, 0x67, 0x6f, 0xd0, 0xc4, 0x60, 0x4f, 0x28, 0x85, 0x9a, 0x37, 0xce, 0x06,
	0x1a, 0x5d, 0xed, 0x91, 0x90, 0xe7, 0x7a, 0x34, 0x5c, 0xc5, 0x4a, 0xdf, 0x14, 0x12, 0x2f, 0xf2,
	0xba, 0x7c, 0x28, 0xe7, 0x05, 0xdf, 0x25, 0x65, 0x6f, 0x9e, 0x8d, 0xb3, 0x7d, 0xe8, 0xb9, 0x85,
	0x45, 0x77, 0x03, 0x3f, 0x50, 0x55, 0xc7, 0x58, 0xf2, 0x5b, 0xe2, 0xc9, 0x8e, 0x2c, 0x1e, 0xfe,
	0x91, 0x4d, 0xfe, 0x9d, 0x67, 0xf6, 0xd6, 0xd9, 0x38, 0xff, 0x28, 0x0a, 0xa8, 0x56, 0xf7, 0xb6,
	0x5e, 0x18, 0x13, 0x0e, 0x55, 0xb1, 0x8d, 0x64, 0xff, 0xf6, 0x5e, 0x18, 0xd3, 0xa1, 0x82, 0x1b,
	0x7d, 0xb3, 0x46, 0x74, 0xc6, 0xa0, 0xea, 0xda, 0x9a, 0x2b, 0xb6, 0xfe, 0x1f, 0x23, 0x06, 0x45,
	0x10, 0xcf, 0xe6, 0x8e, 0x06, 0x0f, 0x21, 0xbc, 0x73, 0x36, 0x7c, 0x5d, 0x27, 0x16, 0x2e, 0xc8,
	0x38, 0x33, 0xb4, 0x64, 0xc6, 0x3d, 0x67, 0xd3, 0xd0, 0xa7, 0x9c, 0x36, 0x5a, 0x3e, 0xec, 0x83,
	0x73, 0xbd, 0x51, 0xa9, 0x7f, 0x8c, 0x99, 0x7d, 0x68, 0xce, 0x54, 0x2a, 0x32, 0xc9, 0x2a, 0x00,
	0x31, 0x2c, 0xce, 0x7f, 0x9a, 0xd3, 0x62, 0x06, 0x8a, 0xde, 0xf3, 0xc0, 0x3b, 0x40, 0xa7, 0x6d,
	0xca, 0x21, 0x42, 0x2d, 0xf9, 0xe1, 0x39, 0x33, 0xde, 0x9e, 0x2e, 0x9c, 0x3e, 0x7a, 0xf8, 0xc8,
	0x03, 0x03, 0x6a, 0x5f, 0xa1, 0xa4, 0xa9, 0xff, 0x1e, 0x3b, 0x4b, 0x2d, 0xf1, 0x5c, 0x3a, 0x5d,
	0x1f, 0x99, 0x8b, 0x13, 0xee, 0x06, 0xa0, 0xc0, 0xcb, 0x47, 0xe7, 0x8c, 0xf3, 0x7f, 0x7c, 0x5d,
	0xc3, 0x0c, 0xe8, 0xe0, 0x1d, 0xb6, 0x8f, 0xcd, 0x05, 0x72, 0x20, 0x18, 0x17, 0xa3, 0xaa, 0x15,
	0xaf, 0x55, 0xa6, 0x13, 0xa2, 0xca, 0x49, 0xfe, 0x88, 0xd4, 0xc7, 0xe7, 0x74, 0x0f, 0x51, 0x8e,
	0x1c, 0x07, 0x1a, 0xdc, 0xbe, 0x9b, 0x33, 0x9e, 0x57, 0x51, 0x0f, 0xdb, 0x7d, 0x72, 0xce, 0x78,
	0x5e, 0x25, 0x72, 0xeb, 0xe6, 0x53, 0x73, 0xc6, 0x83, 0x75, 0xc1, 0xe2, 0x0c, 0x97, 0xf5, 0xd3,
	0xda, 0x84, 0xb4, 0x9d, 0x35, 0xd5, 0x35, 0x8f, 0xf8, 0x49, 0xec, 0x7d, 0x66, 0x2e, 0x71, 0xd4,
	0xba, 0x3d, 0xbc, 0x86, 0x1e, 0x4d, 0xc4, 0x64, 0x3e, 0x1b, 0x3b, 0x4c, 0xd9, 0xab, 0xd6, 0x9d,
	0xc6, 0x82, 0xeb, 0xd6, 0xf0, 0x2e, 0x0b, 0xff, 0x74, 0x8e, 0x1a, 0xe6, 0x73, 0xb1, 0xc3, 0xf4,
	0x68, 0x22, 0x53, 0xac, 0xe6, 0x82, 0x2b, 0x15, 0x71, 0xab, 0xf1, 0x79, 0x66, 0x8c, 0xf8, 0x14,
	0x8f, 0x8a, 0xa0, 0xcd, 0x05, 0x46, 0x58, 0xdc, 0x82, 0xc2, 0xad, 0x64, 0x24, 0x6d, 0x2e, 0xb8,
	0x89, 0xa1, 0x6d, 0xbb, 0x0e, 0x1b, 0xf4, 0x21, 0xc7, 0xfa, 0x97, 0x39, 0xe3, 0x5d, 0x21, 0x49,
	0x00, 0xbd, 0x1a, 0x89, 0xa1, 0xbe, 0x38, 0x17, 0x67, 0x13, 0xc8, 0xbb, 0xd3, 0xfc, 0xa1, 0x1b,
	0x15, 0xb4, 0x9b, 0x8b, 0x73, 0xf9, 0xc2, 0xb0, 0x32, 0x68, 0x37, 0x67, 0x86, 0x4d, 0xc3, 0xdf,
	0x55, 0x61, 0x5f, 0xd1, 0x76, 0x21, 0xbc, 0x71, 0xfc, 0xa3, 0xc3, 0xd1, 0x9d, 0xfb, 0xea, 0x9c,
	0x7e, 0x45, 0xc5, 0xdc, 0xb9, 0x68, 0x1b, 0x99, 0xa3, 0x35, 0x17, 0x48, 0xac, 0xd8, 0x81, 0x42,
	0x01, 0xe2, 0x7f, 0x9d, 0x33, 0x7d, 0xc6, 0xc8, 0x20, 0xe1, 0x08, 0xf1, 0xd7, 0xe7, 0x02, 0xa3,
	0x34, 0x6a, 0xaa, 0xe0, 0x0d, 0x3f, 0xf6, 0x8d, 0xb9, 0x38, 0xc5, 0xb2, 0xe4, 0xb6, 0xd7, 0x5c,
	0xcd, 0x4e, 0x61, 0xdf, 0x9c, 0x8b, 0x33, 0x85, 0x09, 0x6c, 0xb1, 0xed, 0x75, 0x5b, 0xf2, 0x06,
	0x32, 0xe8, 0x23, 0xf6, 0xad, 0x58, 0x99, 0x14, 0x74, 0x19, 0x5c, 0x98, 0x9c, 0x33, 0xdd, 0x0c,
	0xad, 0x53, 0x03, 0x90, 0x77, 0xfb, 0xed, 0xb9, 0x1e, 0xb1, 0x51, 0x3d, 0xa4, 0x42, 0xee, 0xe2,
	0xbf, 0xcd, 0xf5, 0x88, 0x8d, 0x86, 0x21, 0x83, 0x6c, 0xb2, 0xb9, 0x38, 0xbd, 0x85, 0xcf, 0x47,
	0x07, 0xc6, 0x53, 0x40, 0x6e, 0xdf, 0xe9, 0x05, 0xcd, 0x69, 0x3a, 0x04, 0xfd, 0xdd, 0xd8, 0x55,
	0x86, 0xa7, 0x22, 0xfd, 0x88, 0x1f, 0xcc, 0xc5, 0x3f, 0x93, 0xca, 0xdf, 0x37, 0xe6, 0xeb, 0xfb,
	0x61, 0x88, 0xdc, 0x65, 0xbc, 0x42, 0x83, 0xa1, 0x93, 0x09, 0x7c, 0x9d, 0x94, 0xfd, 0x68, 0x2e,
	0xc6, 0x0c, 0xe3, 0x2d, 0x7c, 0x15, 0xb4, 0xf4, 0xd9, 0x4f, 0xe6, 0x62, 0x5c, 0xa3, 0x08, 0x98,
	0x42, 0xd8, 0x4f, 0xe7, 0x7a, 0x3e, 0xb8, 0x86, 0x4f, 0x66, 0xe1, 0x2b, 0x90, 0xa4, 0x27, 0x7e,
	0x36, 0x67, 0x46, 0x7f, 0x45, 0xf6, 0x1a, 0xcf, 0x8a, 0xe4, 0x87, 0x2a, 0xf7, 0x6b, 0xaa, 0x24,
	0x1e, 0x24, 0x88, 0xaa, 0x5d, 0x82, 0x48, 0x15, 0x19, 0x29, 0x12, 0xfb, 0x3f, 0xbf, 0x04, 0x91,
	0xaa, 0x9a, 0xc8, 0x27, 0x90, 0x34, 0x3e, 0x0b, 0x84, 0x03, 0xca, 0x06, 0xb7, 0x29, 0xde, 0x2a,
	0x42, 0xf4, 0xba, 0x35, 0x7c, 0x62, 0x08, 0x95, 0xf5, 0x2f, 0x75, 0x59, 0x15, 0xdc, 0x1a, 0x92,
	0x8a, 0xae, 0xee, 0xaf, 0x07, 0xb0, 0xbf, 0x32, 0x98, 0xd8, 0x7c, 0x21, 0xb6, 0xe1, 0xf9, 0x91,
	0x93, 0x12, 0xf6, 0x6b, 0x03, 0xd5, 0x91, 0x17, 0x6d, 0xd5, 0xac, 0x7f, 0xa3, 0xa1, 0x5a, 0x59,
	0x53, 0x9c, 0xac, 0x50, 0x02, 0x2e, 0x2d, 0x95, 0xd8, 0x6f, 0xe7, 0x7a, 0x19, 0x5c, 0xda, 0x0d,
	0x21, 0xf6, 0xbb, 0xb9, 0xde, 0x09, 0x10, 0x74, 0x85, 0x88, 0xfd, 0x7e, 0xae, 0x77, 0x02, 0x04,
	0x41, 0xa8, 0x49, 0xfd, 0x61, 0x2e, 0x38, 0x3f, 0x15, 0xfa, 0xf7, 0x14, 0xa0, 0x5a, 0x5c, 0x8a,
	0xfb, 0x63, 0xbc, 0xe9, 0x14, 0x61, 0x3b, 0xf9, 0xfe, 0x52, 0x2f, 0xf0, 0x10, 0xdf, 0xc9, 0x5b,
	0x97, 0xb1, 0x1a, 0x44, 0x40, 0x61, 0xbc, 0x6a, 0xc3, 0x51, 0x39, 0xdd, 0x7f, 0x9e, 0x8b, 0x0b,
	0x17, 0x87, 0x61, 0x45, 0xc7, 0xf7, 0x1e, 0x8b, 0xb1, 0x48, 0x05, 0x43, 0xeb, 0x96, 0xeb, 0xc3,
	0x8e, 0xc5, 0x58, 0xa4, 0x51, 0xb8, 0xe0, 0x5e, 0xe7, 0xb1, 0xb8, 0x00, 0x0f, 0xf2, 0x43, 0xc9,
	0x5d, 0xc3, 0x48, 0x54, 0x96, 0xf2, 0x18, 0x6a, 0xec, 0xbe, 0x63, 0x81, 0xe9, 0xaa, 0x59, 0x7d,
	0xf8, 0xb2, 0x37, 0xc6, 0x16, 0x1f, 0x71, 0x2c, 0x2e, 0xf6, 0x17, 0xa7, 0x51, 0x1e, 0x79, 0xcc,
	0x74, 0xe7, 0x38, 0x74, 0xac, 0x2e, 0x79, 0xd4, 0xb1, 0xb0, 0x1c, 0xc9, 0x36, 0x7d, 0x50, 0xaf,
	0xf2, 0xc6, 0x25, 0xbf, 0x77, 0xce, 0x1e, 0x7d, 0x2c, 0x2c, 0x47, 0xe2, 0xc0, 0x82, 0x20, 0xdc,
	0xb1, 0xb8, 0x93, 0xec, 0x00, 0x4d, 0x32, 0x72, 0xf3, 0xd8, 0x63, 0x71, 0xaa, 0x32, 0x02, 0x17,
	0xdc, 0xeb, 0x3c, 0x36, 0xb1, 0x62, 0xed, 0xcd, 0xe2, 0xf9, 0x2d, 0x5e, 0x32, 0x06, 0xcc, 0x9c,
	0xc4, 0x2f, 0xcb, 0x0a, 0xcd, 0x1f, 0x2e, 0xb6, 0x0b, 0x1e, 0x21, 0xee, 0x4f, 0xff, 0xad, 0x17,
	0x00, 0x7f, 0x84, 0x94, 0xfd, 0xf9, 0xbf, 0x4d, 0x7c, 0x60, 0xc0, 0xda, 0x4d, 0xdf, 0xf6, 0x95,
	0x19, 0x2a, 0xf8, 0x51, 0x37, 0x5e, 0x90, 0x5a, 0xca, 0x2e, 0x15, 0x33, 0x59, 0xbb, 0x50, 0x2c,
	0x64, 0xd9, 0x65, 0xf8, 0x09, 0x38, 0xb3, 0x3c, 0xb5, 0xcc, 0x3f, 0x0c, 0x67, 0x96, 0xa6, 0x97,
	0x58, 0x7f, 0xb4, 0xb4, 0x94, 0xe1, 0x1f, 0x59, 0x34, 0x4b, 0xcb, 0x19, 0x36, 0x10, 0xd3, 0x6f,
	0x89, 0x0d, 0xe2, 0x27, 0xe4, 0xcc, 0xd2, 0x5c, 0xa1, 0x52, 0x2a, 0xb2, 0xa1, 0x28, 0xf8, 0xf1,
	0x53, 0x6c, 0x3b, 0x70, 0xe5, 0x68, 0x68, 0xc0, 0xec, 0xc9, 0x6c, 0xa9, 0x4c, 0xd3, 0x19, 0x8e,
	0x2e, 0xe9, 0x21, 0x4b, 0xa9, 0x32, 0xdb, 0x81, 0x9f, 0x71, 0x34, 0xcb, 0x2b, 0x2b, 0x95, 0x62,
	0x29, 0x97, 0xca, 0x33, 0x2b, 0x3a, 0xce, 0x52, 0x91, 0xed, 0x8c, 0x96, 0xe6, 0x97, 0xd9, 0xae,
	0xe8, 0x64, 0x97, 0x8b, 0xc5, 0xfc, 0x11, 0xb6, 0x3b, 0x0a, 0xbe, 0x70, 0x9c, 0x8d, 0x24, 0x46,
	0xad, 0x7d, 0x21, 0x9c, 0xad, 0x94, 0x2b, 0xc5, 0x25, 0xb6, 0x27, 0x06, 0x9b, 0x19, 0xc6, 0xa2,
	0xa5, 0xf3, 0x19, 0xb6, 0x17, 0xb6, 0xf6, 0xca, 0x10, 0xde, 0xe6, 0x73, 0xf9, 0x5c, 0xe5, 0xb4,
	0x9d, 0x29, 0xa5, 0x16, 0x2a, 0x2c, 0x11, 0x9d, 0x15, 0xa0, 0xa4, 0x50, 0x61, 0x97, 0x47, 0xd1,
	0x91, 0x2a, 0x65, 0x96, 0xd8, 0xbe, 0xe8, 0xbc, 0x8e, 0x9c, 0x3c, 0xb2, 0x94, 0xcb, 0xb0, 0xfd,
	0xf4, 0x39, 0x0b, 0xb3, 0x45, 0x3e, 0x2f, 0xc6, 0x39, 0x30, 0xf1, 0xde, 0x6d, 0xd6, 0x88, 0x22,
	0x21, 0xfe, 0xb9, 0xfd, 0xab, 0xad, 0x83, 0x0a, 0xbe, 0xb4, 0x92, 0xcf, 0x96, 0xed, 0x72, 0x25,
	0x55, 0xc1, 0x4d, 0xcc, 0x55, 0x80, 0x94, 0x8e, 0x58, 0xb7, 0xc7, 0x56, 0x9f, 0x4a, 0xe5, 0xf0,
	0xb3, 0xe3, 0x25, 0x7b, 0x39, 0x9f, 0x3a, 0x0d, 0xdb, 0x67, 0x57, 0x8a, 0x76, 0xbe, 0x98, 0xca,
	0x00, 0x9d, 0xdd, 0x64, 0x5d, 0x1f, 0xdb, 0xe4, 0x78, 0xb6, 0x54, 0xb4, 0xcb, 0xd9, 0x7c, 0x36,
	0x5d, 0xc9, 0x15, 0x0b, 0x40, 0x7a, 0x37, 0x5a, 0xe3, 0xb1, 0x80, 0xe5, 0x4a, 0x09, 0xfe, 0x59,
	0x3c, 0x6d, 0x57, 0x72, 0x4b, 0x59, 0x20, 0xc6, 0xeb, 0xac, 0xab, 0x63, 0xe1, 0x96, 0x4b, 0x59,
	0x2a, 0x03, 0xca, 0xbc, 0xc5, 0x7a, 0x40, 0x2c, 0x08, 0xfe, 0x86, 0xa5, 0x00, 0x68, 0x71, 0xb1,
	0x94, 0x2d, 0x97, 0x81, 0x5c, 0xc7, 0xad, 0x43, 0xf1, 0xbd, 0x15, 0xcb, 0x15, 0xde, 0xdd, 0x10,
	0xb8, 0xa1, 0xd7, 0xc4, 0xc2, 0x64, 0x72, 0xe5, 0x74, 0xb1, 0x50, 0x80, 0x15, 0x00, 0x21, 0xf7,
	0x9a, 0x3e, 0x7d, 0x99, 0xbd, 0x7c, 0xbc, 0x78, 0x2a, 0x9d, 0x2a, 0x67, 0x81, 0xa4, 0x27, 0xac,
	0x1b, 0x63, 0xe1, 0x38, 0x29, 0xf1, 0x29, 0x96, 0xb3, 0x95, 0x95, 0x65, 0x20, 0xf3, 0x5e, 0xbb,
	0x91, 0x4f, 0x95, 0x2b, 0xcc, 0x9a, 0x78, 0x7b, 0x9f, 0xb5, 0x8b, 0xd7, 0xa7, 0x69, 0x98, 0x80,
	0x2d, 0xf8, 0x6f, 0x7b, 0xb1, 0x58, 0xcc, 0xd8, 0x8b, 0x2b, 0xa7, 0xcb, 0xb0, 0x75, 0x07, 0xad,
	0xfd, 0x46, 0xdd, 0x7c, 0x4a, 0x54, 0xf5, 0x05, 0x3c, 0x28, 0xab, 0x4a, 0xb0, 0x75, 0x30, 0xdd,
	0x4a, 0xb6, 0x04, 0xfb, 0x12, 0xee, 0xb4, 0xbc, 0x0c, 0x0b, 0x4e, 0x01, 0xbb, 0xc1, 0x5e, 0x84,
	0x5b, 0xf2, 0xed, 0x27, 0x2e, 0xe2, 0x5f, 0x61, 0x35, 0x6a, 0x0b, 0x45, 0xfc, 0x87, 0x0d, 0x4e,
	0x14, 0xc5, 0xbc, 0xd3, 0xd0, 0x22, 0x97, 0x3e, 0x81, 0x1f, 0x62, 0x91, 0xbf, 0x4b, 0xa9, 0x42,
	0x06, 0x38, 0xea, 0x32, 0xfc, 0x02, 0xac, 0x2c, 0x0b, 0x96, 0x11, 0x88, 0xad, 0xb4, 0xb6, 0x82,
	0xfe, 0x89, 0xe7, 0xf7, 0xf3, 0xd5, 0x99, 0x09, 0x3a, 0xae, 0xdd, 0x51, 0xd4, 0x22, 0x36, 0x0a,
	0x48, 0x4d, 0xe0, 0x50, 0x7e, 0x9b, 0xff, 0x32, 0x50, 0xb8, 0x37, 0xc5, 0x83, 0xc0, 0x7c, 0xed,
	0xd3, 0xd9, 0x8a, 0xac, 0xc8, 0x22, 0x39, 0x4b, 0x5a, 0x88, 0x00, 0x07, 0x40, 0x01, 0x29, 0x47,
	0x80, 0x02, 0x8a, 0xc9, 0xa2, 0x5c, 0xed, 0xd9, 0x59, 0x6a, 0x1e, 0xd1, 0x50, 0xc8, 0xa2, 0x98,
	0xed, 0xb9, 0x02, 0x64, 0xb0, 0x5c, 0x61, 0x11, 0x88, 0xf8, 0x5a, 0xeb, 0xaa, 0x78, 0x90, 0x85,
	0x54, 0x2e, 0x0f, 0x9d, 0x0c, 0x4d, 0xbc, 0xb2, 0x9f, 0x8b, 0x0e, 0x9e, 0xcc, 0x2e, 0x4e, 0x34,
	0x3b, 0x0a, 0x9b, 0xf9, 0x6c, 0x0a, 0xa4, 0xae, 0x54, 0x18, 0x72, 0x57, 0x45, 0xa9, 0x31, 0xe9,
	0x3e, 0xd0, 0xbe, 0xd7, 0xf5, 0xaa, 0x05, 0xb6, 0x47, 0xbe, 0x87, 0x39, 0xf5, 0x2b, 0x7a, 0x13,
	0x60, 0xc1, 0x8a, 0xb6, 0xe1, 0xc7, 0x78, 0x8c, 0xaa, 0x85, 0x13, 0xb0, 0x4c, 0x29, 0x15, 0xe5,
	0x54, 0x50, 0x0d, 0x68, 0x48, 0x1d, 0x04, 0x53, 0xe2, 0x86, 0x2d, 0x00, 0x82, 0xa1, 0x87, 0x14,
	0x4f, 0x0b, 0x48, 0x8e, 0x04, 0x14, 0x49, 0xa5, 0x6c, 0x2a, 0x73, 0xda, 0x06, 0xd6, 0xda, 0xae,
	0x44, 0xa6, 0x5c, 0x45, 0x36, 0x9d, 0xcf, 0xe1, 0xec, 0x86, 0x27, 0x1e, 0xdf, 0xc7, 0x09, 0x3e,
	0xef, 0x9d, 0x5f, 0x6e, 0xd7, 0xf1, 0x01, 0xdb, 0xcd, 0x79, 0xa7, 0x59, 0xd9, 0x6c, 0xb9, 0x6a,
	0x2b, 0xf2, 0xc5, 0x53, 0x20, 0x43, 0x72, 0xa0, 0x71, 0x40, 0x6a, 0xc3, 0xc2, 0xe4, 0xea, 0x00,
	0x77, 0x3d, 0x41, 0x4a, 0xd9, 0xe5, 0x62, 0xa9, 0x82, 0x24, 0x2c, 0xe9, 0x2d, 0x02, 0x52, 0xce,
	0xc2, 0x72, 0x32, 0xa9, 0xd2, 0x69, 0xd5, 0x5f, 0xff, 0xc4, 0xff, 0xc5, 0x79, 0x48, 0x64, 0x77,
	0x3a, 0xb5, 0x4d, 0x2e, 0xa7, 0xc5, 0x12, 0x43, 0xc5, 0x40, 0xd4, 0xb8, 0x90, 0x54, 0x09, 0x16,
	0x72, 0x99, 0xa4, 0x8a, 0x30, 0x4c, 0x2a, 0x9d, 0xce, 0x2e, 0xf3, 0xad, 0xec, 0x01, 0xa1, 0x90,
	0xd1, 0x3f, 0x91, 0xe1, 0x5b, 0x85, 0x0a, 0x42, 0x3c, 0x03, 0x81, 0x98, 0x23, 0x21, 0x85, 0x6a,
	0x1a, 0x29, 0x2d, 0xbd, 0x52, 0x2a, 0xa1, 0x7a, 0xba, 0x0c, 0xf9, 0xdd, 0xa8, 0x01, 0x1a, 0x9c,
	0xcf, 0x67, 0x59, 0xdf, 0xc4, 0x5b, 0xb7, 0xf1, 0x55, 0xd0, 0x75, 0x6c, 0x91, 0xa7, 0x8a, 0x9f,
	0xb1, 0x95, 0x84, 0xf6, 0xe0, 0x62, 0x0e, 0x11, 0x54, 0x5e, 0xc9, 0x57, 0xec, 0xf2, 0x0a, 0xcc,
	0xaf, 0x8c, 0x12, 0xeb, 0x06, 0xeb, 0xda, 0x48, 0x6d, 0x2a, 0xcf, 0xf7, 0x10, 0x4a, 0x48, 0x38,
	0xf7, 0xa9, 0xcd, 0xd6, 0xa1, 0x72, 0x85, 0x93, 0xa9, 0x7c, 0x2e, 0x03, 0x18, 0x9e, 0x9f, 0x3f,
	0x0d, 0xb4, 0x28, 0x75, 0x90, 0x09, 0x93, 0x2e, 0xc2, 0xc4, 0xd3, 0x15, 0x7b, 0x39, 0x55, 0x2e,
	0x9f, 0x2a, 0x92, 0xa1, 0x13, 0xd7, 0x59, 0x8a, 0xe6, 0x03, 0x48, 0x29, 0xe4, 0x88, 0x1f, 0xe3,
	0x60, 0x16, 0xb3, 0x85, 0x6c, 0x29, 0x97, 0xb6, 0xb3, 0xa5, 0x52, 0x11, 0x8d, 0x20, 0x29, 0x00,
	0xe2, 0x07, 0x14, 0xf8, 0xd1, 0x28, 0xd5, 0x84, 0x13, 0xb2, 0x34, 0x55, 0xaa, 0x9c, 0x06, 0x4a,
	0x95, 0x42, 0x42, 0x87, 0x29, 0x14, 0xf9, 0xda, 0x40, 0xe7, 0xc2, 0x96, 0x83, 0x56, 0x91, 0xdc,
	0xa3, 0x03, 0x09, 0x88, 0x95, 0x7c, 0x1e, 0x54, 0xc9, 0x51, 0x6b, 0x32, 0x02, 0xa0, 0xab, 0x9c,
	0xe8, 0xec, 0xac, 0x89, 0x33, 0xdc, 0xc2, 0x54, 0x6f, 0xf3, 0x4a, 0x9e, 0x56, 0x05, 0x12, 0xd1,
	0xb0, 0x59, 0x42, 0x4b, 0x04, 0x55, 0xa0, 0x40, 0x73, 0x95, 0xdc, 0x49, 0xdc, 0xa2, 0x48, 0x5d,
	0x21, 0xbb, 0x98, 0xa2, 0xba, 0xfe, 0x89, 0xfb, 0xfa, 0x85, 0x85, 0x42, 0x74, 0xc1, 0x9d, 0xed,
	0x87, 0x2c, 0xcf, 0xe3, 0xe7, 0xb2, 0xd5, 0xca, 0xa3, 0x55, 0xb0, 0x1b, 0x0b, 0x29, 0x58, 0x02,
	0x0c, 0x2c, 0xf5, 0x69, 0x0c, 0xd0, 0x7c, 0xaa, 0x52, 0xc9, 0x83, 0xd1, 0x55, 0x2c, 0x92, 0x2a,
	0x0b, 0x6c, 0x91, 0x18, 0xd8, 0xf2, 0x71, 0xe0, 0x1a, 0x00, 0x2d, 0xac, 0x80, 0x3e, 0x09, 0xb8,
	0x38, 0x0a, 0xc8, 0xb7, 0x65, 0xdb, 0x56, 0x7d, 0x01, 0x1a, 0x4b, 0x2b, 0xb9, 0xca, 0x12, 0x72,
	0x45, 0x40, 0x2f, 0x71, 0x7d, 0xa5, 0x81, 0xcf, 0x41, 0x80, 0x4f, 0x5c, 0xd0, 0xb8, 0xfc, 0x64,
	0xdd, 0xaf, 0xf3, 0x8f, 0x3a, 0x26, 0x0e, 0x59, 0x63, 0x31, 0xc5, 0xf6, 0x72, 0xf7, 0x4c, 0xa3,
	0x5e, 0x85, 0xb5, 0x8b, 0x5d, 0x0f, 0xd7, 0x8b, 0x90, 0x66, 0x88, 0xc1, 0x35, 0x80, 0x95, 0x26,
	0x7e, 0x9a, 0x12, 0xfc, 0x08, 0xc2, 0x7f, 0x22, 0x1b, 0x7c, 0x50, 0x1c, 0xbc, 0x73, 0x92, 0x74,
	0xd7, 0x92, 0x07, 0x1f, 0x29, 0xc7, 0x07, 0xd2, 0xf1, 0xd0, 0x1d, 0xc6, 0xbe, 0x91, 0x3c, 0xc4,
	0x28, 0x84, 0xf8, 0xb0, 0xd0, 0xf1, 0x7a, 0xad, 0xe6, 0x36, 0xb9, 0xc2, 0x8c, 0x85, 0xc3, 0x8f,
	0xbd, 0x0b, 0xa0, 0x7e, 0x14, 0x89, 0x5b, 0x75, 0x46, 0xa7, 0x75, 0x9d, 0x3a, 0x7e, 0x70, 0x1d,
	0x30, 0x7f, 0x33, 0x79, 0x8a, 0xf1, 0x3d, 0xea, 0x90, 0x03, 0xb8, 0x47, 0xb1, 0x90, 0x47, 0xce,
	0x1d, 0xd1, 0x01, 0x07, 0x27, 0xbe, 0xdf, 0x67, 0xed, 0xe0, 0x27, 0x93, 0xb8, 0x78, 0x30, 0x3d,
	0x96, 0x52, 0x95, 0xf4, 0x71, 0xbb, 0x72, 0x7a, 0x19, 0x14, 0x7b, 0xaa, 0xbc, 0x02, 0x8e, 0xc5,
	0x65, 0x28, 0xf8, 0xf4, 0xe2, 0x62, 0x71, 0x19, 0xe8, 0x85, 0x24, 0x3a, 0x10, 0xb8, 0x56, 0x43,
	0xdc, 0x0b, 0x76, 0xcc, 0x09, 0xb2, 0x05, 0x00, 0x93, 0x5a, 0x5d, 0x1e, 0x28, 0x3f, 0x7d, 0xda,
	0x2e, 0x17, 0xf3, 0x45, 0xfb, 0x9e, 0x95, 0xec, 0x0a, 0x1a, 0xb4, 0x66, 0xeb, 0x74, 0x71, 0x69,
	0x39, 0x5b, 0xe1, 0xac, 0x33, 0x80, 0x14, 0xa0, 0xd5, 0x9d, 0xca, 0x66, 0x4f, 0x64, 0x0b, 0xa8,
	0xca, 0x56, 0x4a, 0x85, 0xec, 0x69, 0x86, 0x1f, 0x45, 0xdd, 0x1f, 0x99, 0x2a, 0x5a, 0xff, 0xdc,
	0xdf, 0xd2, 0xaa, 0xb8, 0x0b, 0xb1, 0x7d, 0xe2, 0x11, 0xfd, 0xdc, 0xae, 0x9a, 0xf7, 0x3a, 0x99,
	0xfa, 0xea, 0x6a, 0xbd, 0x0a, 0x72, 0x78, 0x13, 0xa7, 0x00, 0x4b, 0x01, 0x5d, 0xbe, 0xb0, 0x90,
	0x4b, 0x03, 0x5f, 0x9d, 0x26, 0xa1, 0x88, 0x53, 0x20, 0xa9, 0x1e, 0xaa, 0xcb, 0xa6, 0xca, 0xa7,
	0x61, 0xd5, 0x30, 0x76, 0xa8, 0x62, 0x29, 0x9b, 0xc9, 0xad, 0xa0, 0x1b, 0x19, 0x6d, 0x03, 0xec,
	0x85, 0x02, 0x36, 0xda, 0x66, 0xa5, 0x00, 0xfa, 0xb9, 0x04, 0x4b, 0x8d, 0xce, 0x41, 0x4a, 0x97,
	0xc1, 0x98, 0x66, 0xd9, 0x87, 0x80, 0x5b, 0x80, 0xcb, 0xec, 0x51, 0x75, 0x14, 0x24, 0x67, 0x8f,
	0xaa, 0x3b, 0x41, 0xc9, 0xff, 0xa2, 0xcf, 0x1a, 0xe1, 0x59, 0x40, 0x4e, 0x73, 0xad, 0x8b, 0x37,
	0xc7, 0x82, 0x6d, 0xc8, 0x03, 0x4f, 0xae, 0xa4, 0x16, 0xb3, 0xa6, 0x74, 0x0b, 0xd5, 0x65, 0x0b,
	0x8b, 0xf9, 0x5c, 0xf9, 0xb8, 0xbe, 0xf9, 0xaa, 0xae, 0xb4, 0x02, 0xb8, 0x4b, 0x15, 0xb8, 0xed,
	0x1c, 0xaa, 0x4b, 0x1f, 0x07, 0xcd, 0x5a, 0xce, 0x72, 0x54, 0x84, 0xea, 0x4e, 0x14, 0x41, 0xb9,
	0x15, 0x38, 0x2a, 0x42, 0x55, 0xe5, 0xe5, 0x54, 0x01, 0x87, 0x1b, 0x44, 0x9f, 0x20, 0x54, 0x87,
	0x76, 0xc5, 0xca, 0xe2, 0x0a, 0xf6, 0x3a, 0x84, 0x0e, 0x5f, 0xfc, 0x4c, 0x01, 0x21, 0x20, 0xd0,
	0x2f, 0xcf, 0x06, 0x89, 0x9f, 0x15, 0x77, 0xa3, 0xd5, 0x40, 0x63, 0xe2, 0x10, 0xc5, 0x1a, 0xa2,
	0x15, 0x76, 0xc1, 0xa3, 0xcf, 0x19, 0x72, 0xee, 0x8c, 0xa9, 0x2f, 0xd3, 0x17, 0x2c, 0xb3, 0x8d,
	0x3a, 0xbd, 0xe3, 0x80, 0x07, 0xda, 0x7d, 0x13, 0x27, 0xad, 0x3d, 0x3a, 0x28, 0xf2, 0xd3, 0xd5,
	0x74, 0x56, 0x66, 0x16, 0x82, 0x0c, 0x3a, 0xdb, 0xf4, 0xce, 0x37, 0xb9, 0x9e, 0x8f, 0x56, 0x63,
	0xea, 0x72, 0x63, 0x33, 0x53, 0x3f, 0x57, 0xf7, 0x79, 0xbf, 0xbf, 0xea, 0xb7, 0x86, 0xb2, 0x74,
	0xec, 0x98, 0xd8, 0x6b, 0xed, 0x26, 0x72, 0xb6, 0x41, 0xc5, 0x0b, 0x93, 0x15, 0x58, 0x56, 0x15,
	0x65, 0x72, 0x25, 0x60, 0xa0, 0x4c, 0x96, 0x7b, 0x36, 0xaa, 0xb8, 0x0c, 0xb6, 0x56, 0x61, 0xd1,
	0x5e, 0xc8, 0x96, 0x81, 0xb7, 0x80, 0xa1, 0xfb, 0x11, 0x57, 0xaa, 0x76, 0xa1, 0x54, 0xc4, 0xf2,
	0x95, 0xb2, 0x7d, 0xf4, 0xf0, 0x91, 0x3b, 0xb9, 0x6b, 0xa3, 0x2a, 0x89, 0x27, 0x0b, 0x48, 0xdb,
	0x58, 0x7b, 0x17, 0xdf, 0xa1, 0x60, 0x0a, 0xd9, 0x87, 0x80, 0xb1, 0xb3, 0x9c, 0xb6, 0xb9, 0x30,
	0x37, 0xea, 0x96, 0x4f, 0x95, 0x60, 0x42, 0xa9, 0x34, 0xb6, 0x7b, 0x20, 0xdf, 0x1e, 0xad, 0xdd,
	0x29, 0x7b, 0x3e, 0x5f, 0x2c, 0x2e, 0xf1, 0xca, 0xed, 0x28, 0xce, 0x55, 0x65, 0xae, 0x00, 0x2a,
	0xab, 0x90, 0x42, 0x5b, 0x1e, 0x38, 0x9a, 0x00, 0x86, 0x8d, 0x39, 0x2d, 0xa0, 0x27, 0xbf, 0x94,
	0x7a, 0x30, 0x38, 0xdd, 0x54, 0xbb, 0x03, 0xa3, 0x03, 0xaa, 0xb6, 0x58, 0x4a, 0xa5, 0x41, 0xf5,
	0x2d, 0xa7, 0x98, 0x85, 0xf8, 0xed, 0x31, 0x26, 0xfa, 0xcc, 0xf3, 0x59, 0x74, 0x26, 0x77, 0x1a,
	0xad, 0x15, 0x32, 0xd8, 0xae, 0x89, 0x65, 0x8b, 0x91, 0xfa, 0xc8, 0x78, 0x1d, 0xa7, 0x72, 0x92,
	0x6e, 0x2e, 0xa0, 0xbf, 0xa6, 0x95, 0xd9, 0x47, 0x0e, 0xc3, 0x0e, 0x80, 0x51, 0x6f, 0x94, 0x1d,
	0x3d, 0x0c, 0xf8, 0x0f, 0x15, 0xde, 0x79, 0xf8, 0x30, 0xa8, 0x9c, 0x17, 0xf4, 0xc3, 0xfe, 0x11,
	0xf3, 0x89, 0xb4, 0x63, 0xc4, 0x0a, 0x86, 0xd4, 0xb4, 0x22, 0x8d, 0x3c, 0x38, 0x75, 0x1a, 0x95,
	0x25, 0xa7, 0x26, 0xf2, 0x4d, 0x61, 0x17, 0xaf, 0xe1, 0x31, 0x62, 0xbd, 0x1e, 0x1f, 0x51, 0x97,
	0x00, 0xdb, 0x12, 0x77, 0xf2, 0x43, 0x3f, 0x1d, 0xa0, 0xe0, 0x75, 0xe8, 0x2a, 0x43, 0xcd, 0x5e,
	0xf6, 0xbc, 0x76, 0xc1, 0xed, 0x9c, 0xf7, 0xda, 0x67, 0xc1, 0x79, 0xe4, 0xd9, 0x26, 0x3e, 0xfb,
	0x2b, 0x41, 0x94, 0x3d, 0x1a, 0x89, 0x2b, 0xc1, 0x29, 0x0c, 0x34, 0xf4, 0x86, 0x2a, 0x07, 0x19,
	0x4e, 0x6c, 0x1e, 0xed, 0x94, 0xde, 0xa0, 0x05, 0x37, 0x08, 0xe6, 0xb3, 0xf4, 0xc4, 0xf3, 0x07,
	0x84, 0x52, 0xc6, 0x43, 0x32, 0xca, 0x14, 0x29, 0xb8, 0x6e, 0x4d, 0x53, 0xca, 0x46, 0xb9, 0x86,
	0xab, 0xdb, 0x28, 0xe4, 0x19, 0x03, 0xe1, 0xbb, 0xed, 0x82, 0xa7, 0x95, 0xc0, 0x30, 0x35, 0x31,
	0xfb, 0x78, 0xe8, 0x5c, 0xb3, 0xd8, 0xc4, 0xf7, 0x0a, 0xe8, 0xf3, 0x06, 0xae, 0xa6, 0x73, 0xe3,
	0x40, 0xf1, 0x91, 0xea, 0x06, 0x41, 0xae, 0x26, 0x6e, 0xa7, 0xf0, 0x68, 0x2f, 0xc8, 0x95, 0xdc,
	0x29, 0xc7, 0x57, 0x5f, 0xbb, 0x63, 0x6b, 0x89, 0x3b, 0xe8, 0x80, 0xac, 0x37, 0x38, 0x61, 0x26,
	0x68, 0xb0, 0xae, 0xd9, 0x1d, 0xd1, 0x06, 0xf2, 0x31, 0x47, 0x9f, 0xd5, 0x45, 0xc8, 0x3d, 0x0a,
	0x17, 0x7c, 0x9b, 0x81, 0x2f, 0x90, 0x7d, 0xac, 0x4f, 0xc4, 0x9e, 0xb7, 0x82, 0xa5, 0x15, 0xb2,
	0x8f, 0xf7, 0x89, 0x80, 0xf6, 0x56, 0xa0, 0xb9, 0x5a, 0xc3, 0x65, 0x9f, 0xb8, 0x94, 0x4e, 0x29,
	0xb3, 0x97, 0x7d, 0xb2, 0x4f, 0x1c, 0xc4, 0x5c, 0x74, 0x7c, 0xfe, 0x05, 0x0b, 0xf6, 0xa9, 0xbe,
	0x89, 0xff, 0xc3, 0xda, 0x2d, 0xb2, 0x59, 0x6d, 0x7c, 0x48, 0x9a, 0x94, 0xd7, 0x42, 0xaa, 0x50,
	0x01, 0xc5, 0x6c, 0x97, 0x8a, 0xf9, 0x2c, 0x39, 0x82, 0x0b, 0xe4, 0xc3, 0x91, 0x6c, 0x34, 0xea,
	0xc0, 0xd0, 0x47, 0xd9, 0x08, 0xe6, 0x8c, 0x51, 0x5c, 0x5e, 0x59, 0x46, 0x4d, 0x02, 0x0c, 0xfa,
	0xb8, 0x3e, 0x2b, 0x21, 0xbb, 0xc7, 0xd3, 0x33, 0x9b, 0x92, 0xba, 0xf4, 0x7e, 0xca, 0xf9, 0x62,
	0x45, 0x13, 0xbd, 0x46, 0x71, 0xb4, 0x7b, 0x2a, 0x56, 0xdd, 0xa3, 0x61, 0x62, 0xd4, 0xa4, 0x0a,
	0x68, 0x4f, 0x83, 0xfc, 0x31, 0x4a, 0xe7, 0xb3, 0x85, 0xf4, 0x71, 0x36, 0x30, 0xf1, 0xee, 0x7e,
	0x58, 0x9a, 0x98, 0x8c, 0xba, 0xad, 0x65, 0x53, 0xc0, 0x1b, 0xf4, 0x8a, 0x6a, 0x22, 0x03, 0x89,
	0x9a, 0xd2, 0x06, 0x69, 0x19, 0xad, 0xce, 0x17, 0xd3, 0x27, 0xc8, 0xf7, 0x8d, 0x6d, 0x5c, 0x3e,
	0xbe, 0xb2, 0xb0, 0x00, 0x2e, 0x2b, 0x49, 0x95, 0x68, 0xf5, 0x42, 0x29, 0x9b, 0xa5, 0x88, 0x15,
	0xcc, 0x17, 0x64, 0x56, 0x14, 0x00, 0x94, 0x04, 0xf9, 0x88, 0xc0, 0xa9, 0xd1, 0x4a, 0x0c, 0x50,
	0x96, 0x41, 0xda, 0x82, 0x6f, 0x35, 0x18, 0xdf, 0x3f, 0x42, 0xf0, 0xe0, 0xec, 0x10, 0x8a, 0xbd,
	0x28, 0x00, 0x55, 0x62, 0xcc, 0x67, 0x3b, 0x0a, 0xa8, 0x68, 0x7d, 0x29, 0xbb, 0xb8, 0x02, 0xee,
	0xbf, 0x1c, 0x66, 0x78, 0xe2, 0xd7, 0x7d, 0x22, 0x0c, 0x13, 0xa8, 0x57, 0xd2, 0xa1, 0x3e, 0xca,
	0x70, 0x0c, 0x10, 0xe5, 0x4a, 0xe5, 0x0a, 0x69, 0x04, 0xc4, 0xd8, 0x1e, 0x6b, 0xa7, 0x8c, 0x92,
	0xc2, 0x4a, 0x00, 0x49, 0xa0, 0x69, 0xa1, 0x60, 0x09, 0x6c, 0xa7, 0x9c, 0x7d, 0x22, 0x97, 0x47,
	0xa5, 0xc9, 0xac, 0x5d, 0x32, 0x7a, 0x0b, 0x2e, 0x31, 0xee, 0x1c, 0x07, 0x4a, 0x65, 0x17, 0x73,
	0x65, 0x5e, 0x34, 0x80, 0x72, 0x5f, 0x15, 0x81, 0x8f, 0x99, 0xcf, 0xe2, 0x92, 0x47, 0x2c, 0x0b,
	0x7b, 0x2f, 0x66, 0xf2, 0xb9, 0x13, 0x68, 0xaa, 0x70, 0xa0, 0x34, 0xd8, 0xb2, 0xb9, 0x6c, 0x89,
	0x77, 0xbf, 0x5d, 0x4c, 0x21, 0x9b, 0x3e, 0x5e, 0x2c, 0xe7, 0x53, 0x78, 0x04, 0xb0, 0xdb, 0xda,
	0x01, 0x05, 0xa5, 0xd4, 0x32, 0x00, 0x81, 0x92, 0xe3, 0x8d, 0xb2, 0xa9, 0x52, 0x1e, 0xc9, 0x16,
	0xbc, 0x36, 0x70, 0x54, 0xc5, 0x0c, 0xe6, 0xf3, 0xa9, 0xf4, 0x09, 0xfb, 0x38, 0x8c, 0xc6, 0x76,
	0x4e, 0xbc, 0x63, 0x50, 0x04, 0x78, 0x40, 0x77, 0x83, 0x1f, 0x98, 0x2f, 0x2e, 0x92, 0x1d, 0x5c,
	0x56, 0x71, 0xa9, 0xa0, 0x3c, 0x93, 0x5a, 0x02, 0x3b, 0x89, 0x5b, 0xba, 0xa1, 0xaa, 0xe3, 0x59,
	0x30, 0x14, 0xfa, 0x94, 0x77, 0x1d, 0x54, 0x2c, 0x15, 0xc1, 0xaa, 0xc4, 0x69, 0xa7, 0x32, 0x68,
	0xe4, 0x4b, 0x1f, 0x2f, 0x06, 0xa0, 0x94, 0x5d, 0x2a, 0x9e, 0x44, 0x7b, 0x6f, 0x34, 0x32, 0xa1,
	0x4c, 0x36, 0x55, 0x39, 0xce, 0x8d, 0x89, 0x50, 0x8d, 0x38, 0x11, 0xd0, 0x8e, 0x53, 0x82, 0xba,
	0x5c, 0x25, 0xbb, 0xc4, 0x2d, 0x89, 0x50, 0x05, 0x90, 0x36, 0xd9, 0x0b, 0x80, 0xc5, 0x68, 0xab,
	0xc5, 0x62, 0x1e, 0xe3, 0x04, 0x32, 0xa2, 0xac, 0x55, 0x50, 0xc0, 0x19, 0xa3, 0x85, 0x80, 0x5d,
	0x15, 0x74, 0x55, 0xd5, 0x0f, 0x59, 0x06, 0xfc, 0x46, 0xc7, 0x5a, 0x5e, 0x29, 0xa5, 0x8f, 0x63,
	0x40, 0x7b, 0x67, 0xcc, 0xec, 0xe7, 0x57, 0x4e, 0xcf, 0xc3, 0x56, 0xb0, 0x5d, 0x31, 0x78, 0x91,
	0x67, 0x1d, 0x95, 0x52, 0x6e, 0x71, 0x11, 0x76, 0x74, 0xb7, 0x74, 0x72, 0xf5, 0xce, 0xf9, 0x21,
	0x02, 0xcc, 0xa9, 0xcc, 0x46, 0x54, 0x90, 0x48, 0xc3, 0x2d, 0xd2, 0x23, 0xd1, 0xcb, 0x9e, 0x98,
	0x05, 0x61, 0x45, 0xb9, 0x02, 0x96, 0xf4, 0x09, 0xc6, 0x54, 0xb0, 0x52, 0xa3, 0x02, 0x8a, 0x70,
	0xaf, 0xe4, 0xf2, 0x18, 0x3b, 0xe5, 0x54, 0xb7, 0x37, 0x66, 0x0e, 0x3a, 0x63, 0x24, 0xb4, 0x40,
	0x6d, 0xcc, 0xfe, 0x82, 0x54, 0x00, 0xcb, 0xfc, 0xf2, 0x98, 0xb1, 0x0a, 0xd9, 0x15, 0xf0, 0x37,
	0xf2, 0xe0, 0x97, 0x2d, 0x2d, 0x23, 0x8e, 0x01, 0x27, 0xfb, 0xe2, 0xd6, 0x0b, 0x12, 0x65, 0x65,
	0x19, 0xdc, 0x06, 0x90, 0xa7, 0xfb, 0x27, 0x1e, 0x39, 0x20, 0x62, 0xd9, 0xc1, 0xe3, 0x4d, 0x64,
	0x11, 0xab, 0x70, 0x99, 0x5e, 0xc8, 0x0f, 0x64, 0x41, 0x35, 0xa9, 0x08, 0x8c, 0x5e, 0xcb, 0x73,
	0x00, 0xb8, 0xab, 0x16, 0xae, 0xe3, 0xc7, 0xa4, 0xfd, 0x71, 0x55, 0xfc, 0xb6, 0xb9, 0xa2, 0x58,
	0xbd, 0x8a, 0x92, 0x29, 0x06, 0xe2, 0x1a, 0xd1, 0x63, 0xd4, 0x40, 0xb0, 0x82, 0x56, 0xf4, 0x2a,
	0x21, 0xbe, 0x03, 0xa2, 0xd5, 0x2b, 0x4f, 0xad, 0xd7, 0xfd, 0x16, 0x18, 0x53, 0xdb, 0xe3, 0x2a,
	0xc5, 0xa3, 0x31, 0x40, 0xb8, 0x82, 0xa2, 0x8d, 0xb9, 0x38, 0x67, 0x80, 0x64, 0x63, 0x5a, 0xc9,
	0x20, 0x85, 0x15, 0x57, 0x89, 0x3a, 0x35, 0xd5, 0x68, 0x00, 0xe1, 0x8a, 0x8d, 0x88, 0xa9, 0xc4,
	0xa4, 0xdb, 0x5d, 0x32, 0x08, 0x14, 0xae, 0x57, 0x77, 0x71, 0x81, 0x76, 0x45, 0x7c, 0x25, 0x0c,
	0x42, 0x4f, 0x35, 0x62, 0x92, 0xc5, 0x48, 0x1c, 0x0e, 0xd3, 0xce, 0xaa, 0x0b, 0x94, 0x1b, 0x33,
	0x7c, 0x90, 0xb3, 0xc1, 0xd8, 0xfc, 0xe0, 0xf1, 0xbe, 0x7b, 0xfb, 0x2e, 0xfb, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x3e, 0xce, 0x29, 0x55, 0xc7, 0x00, 0x00,
}
