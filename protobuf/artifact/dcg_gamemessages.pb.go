// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: artifact/dcg_gamemessages.proto

package artifact

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDCGGameMessages int32

const (
	EDCGGameMessages_k_EMsgGameBoardGameCommand                EDCGGameMessages = 1
	EDCGGameMessages_k_EMsgGameBoardGameState                  EDCGGameMessages = 2
	EDCGGameMessages_k_EMsgGameBoardGameButton                 EDCGGameMessages = 3
	EDCGGameMessages_k_EMsgGamePlayerRequestHandoff            EDCGGameMessages = 4
	EDCGGameMessages_k_EMsgGameHandoff                         EDCGGameMessages = 5
	EDCGGameMessages_k_EMsgGameReplayActionMarker              EDCGGameMessages = 6
	EDCGGameMessages_k_EMsgGameClientToServerChatMsg           EDCGGameMessages = 7
	EDCGGameMessages_k_EMsgGameServerToClientChatMsg           EDCGGameMessages = 8
	EDCGGameMessages_k_EMsgGameClientToServerPauseTimer        EDCGGameMessages = 9
	EDCGGameMessages_k_EMsgGameServerToClientConnectionStatus  EDCGGameMessages = 10
	EDCGGameMessages_k_EMsgGameClientToServerGiveOpponentTime  EDCGGameMessages = 11
	EDCGGameMessages_k_EMsgGameServerToClientInitialGameState  EDCGGameMessages = 12
	EDCGGameMessages_k_EMsgGameServerToClientGameCompleted     EDCGGameMessages = 13
	EDCGGameMessages_k_EMsgGameClientToServerBoardGameStateAck EDCGGameMessages = 14
	EDCGGameMessages_k_EMsgGameServerToClientGoodbye           EDCGGameMessages = 15
	EDCGGameMessages_k_EMsgTutorialEvent                       EDCGGameMessages = 1000
	EDCGGameMessages_k_EMsgVenchatoquistEvent                  EDCGGameMessages = 1001
)

// Enum value maps for EDCGGameMessages.
var (
	EDCGGameMessages_name = map[int32]string{
		1:    "k_EMsgGameBoardGameCommand",
		2:    "k_EMsgGameBoardGameState",
		3:    "k_EMsgGameBoardGameButton",
		4:    "k_EMsgGamePlayerRequestHandoff",
		5:    "k_EMsgGameHandoff",
		6:    "k_EMsgGameReplayActionMarker",
		7:    "k_EMsgGameClientToServerChatMsg",
		8:    "k_EMsgGameServerToClientChatMsg",
		9:    "k_EMsgGameClientToServerPauseTimer",
		10:   "k_EMsgGameServerToClientConnectionStatus",
		11:   "k_EMsgGameClientToServerGiveOpponentTime",
		12:   "k_EMsgGameServerToClientInitialGameState",
		13:   "k_EMsgGameServerToClientGameCompleted",
		14:   "k_EMsgGameClientToServerBoardGameStateAck",
		15:   "k_EMsgGameServerToClientGoodbye",
		1000: "k_EMsgTutorialEvent",
		1001: "k_EMsgVenchatoquistEvent",
	}
	EDCGGameMessages_value = map[string]int32{
		"k_EMsgGameBoardGameCommand":                1,
		"k_EMsgGameBoardGameState":                  2,
		"k_EMsgGameBoardGameButton":                 3,
		"k_EMsgGamePlayerRequestHandoff":            4,
		"k_EMsgGameHandoff":                         5,
		"k_EMsgGameReplayActionMarker":              6,
		"k_EMsgGameClientToServerChatMsg":           7,
		"k_EMsgGameServerToClientChatMsg":           8,
		"k_EMsgGameClientToServerPauseTimer":        9,
		"k_EMsgGameServerToClientConnectionStatus":  10,
		"k_EMsgGameClientToServerGiveOpponentTime":  11,
		"k_EMsgGameServerToClientInitialGameState":  12,
		"k_EMsgGameServerToClientGameCompleted":     13,
		"k_EMsgGameClientToServerBoardGameStateAck": 14,
		"k_EMsgGameServerToClientGoodbye":           15,
		"k_EMsgTutorialEvent":                       1000,
		"k_EMsgVenchatoquistEvent":                  1001,
	}
)

func (x EDCGGameMessages) Enum() *EDCGGameMessages {
	p := new(EDCGGameMessages)
	*p = x
	return p
}

func (x EDCGGameMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDCGGameMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[0].Descriptor()
}

func (EDCGGameMessages) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[0]
}

func (x EDCGGameMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDCGGameMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDCGGameMessages(num)
	return nil
}

// Deprecated: Use EDCGGameMessages.Descriptor instead.
func (EDCGGameMessages) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{0}
}

type EScriptBlockType int32

const (
	EScriptBlockType_INVALID_SCRIPT_TYPE                EScriptBlockType = 0
	EScriptBlockType_CARD_PLAY_SCRIPT                   EScriptBlockType = 1
	EScriptBlockType_GENERIC_TRIGGER_SCRIPT             EScriptBlockType = 2
	EScriptBlockType_SBE_UPDATE_SCRIPT                  EScriptBlockType = 3
	EScriptBlockType_DEATH_CHECK_SCRIPT                 EScriptBlockType = 4
	EScriptBlockType_COMBAT                             EScriptBlockType = 5
	EScriptBlockType_CARD_DRAW_PHASE                    EScriptBlockType = 6
	EScriptBlockType_END_OF_TURN_PHASE                  EScriptBlockType = 7
	EScriptBlockType_COLLAPSE_LANE                      EScriptBlockType = 8
	EScriptBlockType_CE_ADDED                           EScriptBlockType = 9
	EScriptBlockType_CE_REMOVED                         EScriptBlockType = 10
	EScriptBlockType_SURVIVED_DEATH                     EScriptBlockType = 11
	EScriptBlockType_DEV_COMMAND                        EScriptBlockType = 12
	EScriptBlockType_AFTER_COMBAT_PHASE                 EScriptBlockType = 13
	EScriptBlockType_UPDATE_COMBAT_PREVIEW              EScriptBlockType = 14
	EScriptBlockType_UPDATE_OBJECT_ATTRIBUTES           EScriptBlockType = 15
	EScriptBlockType_TRIGGER_BLOCK                      EScriptBlockType = 16
	EScriptBlockType_POST_SHOP_ITEM_PURCHASE            EScriptBlockType = 17
	EScriptBlockType_FLOP_DEPLOYMENT_TO_COMBAT          EScriptBlockType = 18
	EScriptBlockType_BEGINNING_OF_SPELLCASTING          EScriptBlockType = 19
	EScriptBlockType_PREGAME                            EScriptBlockType = 20
	EScriptBlockType_RAPID_DEPLOYMENT                   EScriptBlockType = 21
	EScriptBlockType_INITIAL_FLOP                       EScriptBlockType = 23
	EScriptBlockType_CREEP_DEPLOYMENT                   EScriptBlockType = 24
	EScriptBlockType_PREPARE_HEROES_FOR_LANE_ASSIGNMENT EScriptBlockType = 25
	EScriptBlockType_SHOPPING_START                     EScriptBlockType = 26
	EScriptBlockType_SHOPPING_UPDATE                    EScriptBlockType = 27
	EScriptBlockType_SHOPPING_FINISHED                  EScriptBlockType = 28
	EScriptBlockType_HERO_LANE_ASSIGNMENT               EScriptBlockType = 29
	EScriptBlockType_HERO_VS                            EScriptBlockType = 30
	EScriptBlockType_PATHING_CARD_DEPLOYMENT            EScriptBlockType = 31
	EScriptBlockType_HACKED_EFFECT                      EScriptBlockType = 32
	EScriptBlockType_EXPORT_CARD_SET_TO_IMAGES          EScriptBlockType = 33
	EScriptBlockType_GAME_OVER                          EScriptBlockType = 34
	EScriptBlockType_TOKEN_DEPLOYED                     EScriptBlockType = 35
)

// Enum value maps for EScriptBlockType.
var (
	EScriptBlockType_name = map[int32]string{
		0:  "INVALID_SCRIPT_TYPE",
		1:  "CARD_PLAY_SCRIPT",
		2:  "GENERIC_TRIGGER_SCRIPT",
		3:  "SBE_UPDATE_SCRIPT",
		4:  "DEATH_CHECK_SCRIPT",
		5:  "COMBAT",
		6:  "CARD_DRAW_PHASE",
		7:  "END_OF_TURN_PHASE",
		8:  "COLLAPSE_LANE",
		9:  "CE_ADDED",
		10: "CE_REMOVED",
		11: "SURVIVED_DEATH",
		12: "DEV_COMMAND",
		13: "AFTER_COMBAT_PHASE",
		14: "UPDATE_COMBAT_PREVIEW",
		15: "UPDATE_OBJECT_ATTRIBUTES",
		16: "TRIGGER_BLOCK",
		17: "POST_SHOP_ITEM_PURCHASE",
		18: "FLOP_DEPLOYMENT_TO_COMBAT",
		19: "BEGINNING_OF_SPELLCASTING",
		20: "PREGAME",
		21: "RAPID_DEPLOYMENT",
		23: "INITIAL_FLOP",
		24: "CREEP_DEPLOYMENT",
		25: "PREPARE_HEROES_FOR_LANE_ASSIGNMENT",
		26: "SHOPPING_START",
		27: "SHOPPING_UPDATE",
		28: "SHOPPING_FINISHED",
		29: "HERO_LANE_ASSIGNMENT",
		30: "HERO_VS",
		31: "PATHING_CARD_DEPLOYMENT",
		32: "HACKED_EFFECT",
		33: "EXPORT_CARD_SET_TO_IMAGES",
		34: "GAME_OVER",
		35: "TOKEN_DEPLOYED",
	}
	EScriptBlockType_value = map[string]int32{
		"INVALID_SCRIPT_TYPE":                0,
		"CARD_PLAY_SCRIPT":                   1,
		"GENERIC_TRIGGER_SCRIPT":             2,
		"SBE_UPDATE_SCRIPT":                  3,
		"DEATH_CHECK_SCRIPT":                 4,
		"COMBAT":                             5,
		"CARD_DRAW_PHASE":                    6,
		"END_OF_TURN_PHASE":                  7,
		"COLLAPSE_LANE":                      8,
		"CE_ADDED":                           9,
		"CE_REMOVED":                         10,
		"SURVIVED_DEATH":                     11,
		"DEV_COMMAND":                        12,
		"AFTER_COMBAT_PHASE":                 13,
		"UPDATE_COMBAT_PREVIEW":              14,
		"UPDATE_OBJECT_ATTRIBUTES":           15,
		"TRIGGER_BLOCK":                      16,
		"POST_SHOP_ITEM_PURCHASE":            17,
		"FLOP_DEPLOYMENT_TO_COMBAT":          18,
		"BEGINNING_OF_SPELLCASTING":          19,
		"PREGAME":                            20,
		"RAPID_DEPLOYMENT":                   21,
		"INITIAL_FLOP":                       23,
		"CREEP_DEPLOYMENT":                   24,
		"PREPARE_HEROES_FOR_LANE_ASSIGNMENT": 25,
		"SHOPPING_START":                     26,
		"SHOPPING_UPDATE":                    27,
		"SHOPPING_FINISHED":                  28,
		"HERO_LANE_ASSIGNMENT":               29,
		"HERO_VS":                            30,
		"PATHING_CARD_DEPLOYMENT":            31,
		"HACKED_EFFECT":                      32,
		"EXPORT_CARD_SET_TO_IMAGES":          33,
		"GAME_OVER":                          34,
		"TOKEN_DEPLOYED":                     35,
	}
)

func (x EScriptBlockType) Enum() *EScriptBlockType {
	p := new(EScriptBlockType)
	*p = x
	return p
}

func (x EScriptBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EScriptBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[1].Descriptor()
}

func (EScriptBlockType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[1]
}

func (x EScriptBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EScriptBlockType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EScriptBlockType(num)
	return nil
}

// Deprecated: Use EScriptBlockType.Descriptor instead.
func (EScriptBlockType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{1}
}

type EShoppingSlot int32

const (
	EShoppingSlot_eInvalidSlot    EShoppingSlot = 0
	EShoppingSlot_eMiddleShop     EShoppingSlot = 1
	EShoppingSlot_eSecretShop     EShoppingSlot = 2
	EShoppingSlot_eConsumableShop EShoppingSlot = 3
)

// Enum value maps for EShoppingSlot.
var (
	EShoppingSlot_name = map[int32]string{
		0: "eInvalidSlot",
		1: "eMiddleShop",
		2: "eSecretShop",
		3: "eConsumableShop",
	}
	EShoppingSlot_value = map[string]int32{
		"eInvalidSlot":    0,
		"eMiddleShop":     1,
		"eSecretShop":     2,
		"eConsumableShop": 3,
	}
)

func (x EShoppingSlot) Enum() *EShoppingSlot {
	p := new(EShoppingSlot)
	*p = x
	return p
}

func (x EShoppingSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EShoppingSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[2].Descriptor()
}

func (EShoppingSlot) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[2]
}

func (x EShoppingSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EShoppingSlot) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EShoppingSlot(num)
	return nil
}

// Deprecated: Use EShoppingSlot.Descriptor instead.
func (EShoppingSlot) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{2}
}

type EDCGDisconnectReason int32

const (
	EDCGDisconnectReason_k_EDCGDisconnectReason_UserLeaveMatch            EDCGDisconnectReason = 1001
	EDCGDisconnectReason_k_EDCGDisconnectReason_UserQuitApp               EDCGDisconnectReason = 1002
	EDCGDisconnectReason_k_EDCGDisconnectReason_UserCancel                EDCGDisconnectReason = 1003
	EDCGDisconnectReason_k_EDCGDisconnectReason_Goodbye                   EDCGDisconnectReason = 1004
	EDCGDisconnectReason_k_EDCGDisconnectReason_BadMessage                EDCGDisconnectReason = 2001
	EDCGDisconnectReason_k_EDCGDisconnectReason_GameDestroyedUnexpectedly EDCGDisconnectReason = 2002
	EDCGDisconnectReason_k_EDCGDisconnectReason_ChangingServer            EDCGDisconnectReason = 2003
	EDCGDisconnectReason_k_EDCGDisconnectReason_OldConnection             EDCGDisconnectReason = 2004
	EDCGDisconnectReason_k_EDCGDisconnectReason_GoodbyeUnrecognizedGame   EDCGDisconnectReason = 2005
)

// Enum value maps for EDCGDisconnectReason.
var (
	EDCGDisconnectReason_name = map[int32]string{
		1001: "k_EDCGDisconnectReason_UserLeaveMatch",
		1002: "k_EDCGDisconnectReason_UserQuitApp",
		1003: "k_EDCGDisconnectReason_UserCancel",
		1004: "k_EDCGDisconnectReason_Goodbye",
		2001: "k_EDCGDisconnectReason_BadMessage",
		2002: "k_EDCGDisconnectReason_GameDestroyedUnexpectedly",
		2003: "k_EDCGDisconnectReason_ChangingServer",
		2004: "k_EDCGDisconnectReason_OldConnection",
		2005: "k_EDCGDisconnectReason_GoodbyeUnrecognizedGame",
	}
	EDCGDisconnectReason_value = map[string]int32{
		"k_EDCGDisconnectReason_UserLeaveMatch":            1001,
		"k_EDCGDisconnectReason_UserQuitApp":               1002,
		"k_EDCGDisconnectReason_UserCancel":                1003,
		"k_EDCGDisconnectReason_Goodbye":                   1004,
		"k_EDCGDisconnectReason_BadMessage":                2001,
		"k_EDCGDisconnectReason_GameDestroyedUnexpectedly": 2002,
		"k_EDCGDisconnectReason_ChangingServer":            2003,
		"k_EDCGDisconnectReason_OldConnection":             2004,
		"k_EDCGDisconnectReason_GoodbyeUnrecognizedGame":   2005,
	}
)

func (x EDCGDisconnectReason) Enum() *EDCGDisconnectReason {
	p := new(EDCGDisconnectReason)
	*p = x
	return p
}

func (x EDCGDisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDCGDisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[3].Descriptor()
}

func (EDCGDisconnectReason) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[3]
}

func (x EDCGDisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDCGDisconnectReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDCGDisconnectReason(num)
	return nil
}

// Deprecated: Use EDCGDisconnectReason.Descriptor instead.
func (EDCGDisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{3}
}

type CMsgGameReplayActionMarker_EActionType int32

const (
	CMsgGameReplayActionMarker_k_eActionType_TurnStart          CMsgGameReplayActionMarker_EActionType = 1
	CMsgGameReplayActionMarker_k_eActionType_TurnEnd            CMsgGameReplayActionMarker_EActionType = 2
	CMsgGameReplayActionMarker_k_eActionType_ShoppingStart      CMsgGameReplayActionMarker_EActionType = 3
	CMsgGameReplayActionMarker_k_eActionType_ShoppingEnd        CMsgGameReplayActionMarker_EActionType = 4
	CMsgGameReplayActionMarker_k_eActionType_HeroPlacementStart CMsgGameReplayActionMarker_EActionType = 5
	CMsgGameReplayActionMarker_k_eActionType_HeroPlacementEnd   CMsgGameReplayActionMarker_EActionType = 6
	CMsgGameReplayActionMarker_k_eActionType_MatchComplete      CMsgGameReplayActionMarker_EActionType = 7
	CMsgGameReplayActionMarker_k_eActionType_LaneStart          CMsgGameReplayActionMarker_EActionType = 8
	CMsgGameReplayActionMarker_k_eActionType_LaneEnd            CMsgGameReplayActionMarker_EActionType = 9
	CMsgGameReplayActionMarker_k_eActionType_LaneCombat         CMsgGameReplayActionMarker_EActionType = 10
	CMsgGameReplayActionMarker_k_eActionType_PlayerAction       CMsgGameReplayActionMarker_EActionType = 11
)

// Enum value maps for CMsgGameReplayActionMarker_EActionType.
var (
	CMsgGameReplayActionMarker_EActionType_name = map[int32]string{
		1:  "k_eActionType_TurnStart",
		2:  "k_eActionType_TurnEnd",
		3:  "k_eActionType_ShoppingStart",
		4:  "k_eActionType_ShoppingEnd",
		5:  "k_eActionType_HeroPlacementStart",
		6:  "k_eActionType_HeroPlacementEnd",
		7:  "k_eActionType_MatchComplete",
		8:  "k_eActionType_LaneStart",
		9:  "k_eActionType_LaneEnd",
		10: "k_eActionType_LaneCombat",
		11: "k_eActionType_PlayerAction",
	}
	CMsgGameReplayActionMarker_EActionType_value = map[string]int32{
		"k_eActionType_TurnStart":          1,
		"k_eActionType_TurnEnd":            2,
		"k_eActionType_ShoppingStart":      3,
		"k_eActionType_ShoppingEnd":        4,
		"k_eActionType_HeroPlacementStart": 5,
		"k_eActionType_HeroPlacementEnd":   6,
		"k_eActionType_MatchComplete":      7,
		"k_eActionType_LaneStart":          8,
		"k_eActionType_LaneEnd":            9,
		"k_eActionType_LaneCombat":         10,
		"k_eActionType_PlayerAction":       11,
	}
)

func (x CMsgGameReplayActionMarker_EActionType) Enum() *CMsgGameReplayActionMarker_EActionType {
	p := new(CMsgGameReplayActionMarker_EActionType)
	*p = x
	return p
}

func (x CMsgGameReplayActionMarker_EActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameReplayActionMarker_EActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[4].Descriptor()
}

func (CMsgGameReplayActionMarker_EActionType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[4]
}

func (x CMsgGameReplayActionMarker_EActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameReplayActionMarker_EActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameReplayActionMarker_EActionType(num)
	return nil
}

// Deprecated: Use CMsgGameReplayActionMarker_EActionType.Descriptor instead.
func (CMsgGameReplayActionMarker_EActionType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{7, 0}
}

type CMsgVenchatoquistEvent_EChatSource int32

const (
	CMsgVenchatoquistEvent_eObjectID CMsgVenchatoquistEvent_EChatSource = 1
	CMsgVenchatoquistEvent_ePlayer   CMsgVenchatoquistEvent_EChatSource = 2
	CMsgVenchatoquistEvent_eDeckImp  CMsgVenchatoquistEvent_EChatSource = 3
)

// Enum value maps for CMsgVenchatoquistEvent_EChatSource.
var (
	CMsgVenchatoquistEvent_EChatSource_name = map[int32]string{
		1: "eObjectID",
		2: "ePlayer",
		3: "eDeckImp",
	}
	CMsgVenchatoquistEvent_EChatSource_value = map[string]int32{
		"eObjectID": 1,
		"ePlayer":   2,
		"eDeckImp":  3,
	}
)

func (x CMsgVenchatoquistEvent_EChatSource) Enum() *CMsgVenchatoquistEvent_EChatSource {
	p := new(CMsgVenchatoquistEvent_EChatSource)
	*p = x
	return p
}

func (x CMsgVenchatoquistEvent_EChatSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgVenchatoquistEvent_EChatSource) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[5].Descriptor()
}

func (CMsgVenchatoquistEvent_EChatSource) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[5]
}

func (x CMsgVenchatoquistEvent_EChatSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgVenchatoquistEvent_EChatSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgVenchatoquistEvent_EChatSource(num)
	return nil
}

// Deprecated: Use CMsgVenchatoquistEvent_EChatSource.Descriptor instead.
func (CMsgVenchatoquistEvent_EChatSource) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{9, 0}
}

type CMsgGameServerToClientConnectionStatus_EStatus int32

const (
	CMsgGameServerToClientConnectionStatus_k_EConnected    CMsgGameServerToClientConnectionStatus_EStatus = 1
	CMsgGameServerToClientConnectionStatus_k_EDisconnected CMsgGameServerToClientConnectionStatus_EStatus = 2
)

// Enum value maps for CMsgGameServerToClientConnectionStatus_EStatus.
var (
	CMsgGameServerToClientConnectionStatus_EStatus_name = map[int32]string{
		1: "k_EConnected",
		2: "k_EDisconnected",
	}
	CMsgGameServerToClientConnectionStatus_EStatus_value = map[string]int32{
		"k_EConnected":    1,
		"k_EDisconnected": 2,
	}
)

func (x CMsgGameServerToClientConnectionStatus_EStatus) Enum() *CMsgGameServerToClientConnectionStatus_EStatus {
	p := new(CMsgGameServerToClientConnectionStatus_EStatus)
	*p = x
	return p
}

func (x CMsgGameServerToClientConnectionStatus_EStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerToClientConnectionStatus_EStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[6].Descriptor()
}

func (CMsgGameServerToClientConnectionStatus_EStatus) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[6]
}

func (x CMsgGameServerToClientConnectionStatus_EStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerToClientConnectionStatus_EStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerToClientConnectionStatus_EStatus(num)
	return nil
}

// Deprecated: Use CMsgGameServerToClientConnectionStatus_EStatus.Descriptor instead.
func (CMsgGameServerToClientConnectionStatus_EStatus) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{16, 0}
}

type CTraceMsg_CardDrawn_ECardDrawnSource int32

const (
	CTraceMsg_CardDrawn_k_eCardDrawnSource_Deck     CTraceMsg_CardDrawn_ECardDrawnSource = 1
	CTraceMsg_CardDrawn_k_eCardDrawnSource_ItemDeck CTraceMsg_CardDrawn_ECardDrawnSource = 2
	CTraceMsg_CardDrawn_k_eCardDrawnSource_Nowhere  CTraceMsg_CardDrawn_ECardDrawnSource = 3
)

// Enum value maps for CTraceMsg_CardDrawn_ECardDrawnSource.
var (
	CTraceMsg_CardDrawn_ECardDrawnSource_name = map[int32]string{
		1: "k_eCardDrawnSource_Deck",
		2: "k_eCardDrawnSource_ItemDeck",
		3: "k_eCardDrawnSource_Nowhere",
	}
	CTraceMsg_CardDrawn_ECardDrawnSource_value = map[string]int32{
		"k_eCardDrawnSource_Deck":     1,
		"k_eCardDrawnSource_ItemDeck": 2,
		"k_eCardDrawnSource_Nowhere":  3,
	}
)

func (x CTraceMsg_CardDrawn_ECardDrawnSource) Enum() *CTraceMsg_CardDrawn_ECardDrawnSource {
	p := new(CTraceMsg_CardDrawn_ECardDrawnSource)
	*p = x
	return p
}

func (x CTraceMsg_CardDrawn_ECardDrawnSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CTraceMsg_CardDrawn_ECardDrawnSource) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gamemessages_proto_enumTypes[7].Descriptor()
}

func (CTraceMsg_CardDrawn_ECardDrawnSource) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gamemessages_proto_enumTypes[7]
}

func (x CTraceMsg_CardDrawn_ECardDrawnSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CTraceMsg_CardDrawn_ECardDrawnSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CTraceMsg_CardDrawn_ECardDrawnSource(num)
	return nil
}

// Deprecated: Use CTraceMsg_CardDrawn_ECardDrawnSource.Descriptor instead.
func (CTraceMsg_CardDrawn_ECardDrawnSource) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{49, 0}
}

type CMsgClientServerHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameInstanceId   *uint64           `protobuf:"varint,1,opt,name=game_instance_id,json=gameInstanceId" json:"game_instance_id,omitempty"`
	LocalPlayerIndex *uint32           `protobuf:"varint,2,opt,name=local_player_index,json=localPlayerIndex" json:"local_player_index,omitempty"`
	Payload          []byte            `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	MsgId            *EDCGGameMessages `protobuf:"varint,4,opt,name=msg_id,json=msgId,enum=artifact.EDCGGameMessages,def=1" json:"msg_id,omitempty"`
}

// Default values for CMsgClientServerHeader fields.
const (
	Default_CMsgClientServerHeader_MsgId = EDCGGameMessages_k_EMsgGameBoardGameCommand
)

func (x *CMsgClientServerHeader) Reset() {
	*x = CMsgClientServerHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServerHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerHeader) ProtoMessage() {}

func (x *CMsgClientServerHeader) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerHeader.ProtoReflect.Descriptor instead.
func (*CMsgClientServerHeader) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientServerHeader) GetGameInstanceId() uint64 {
	if x != nil && x.GameInstanceId != nil {
		return *x.GameInstanceId
	}
	return 0
}

func (x *CMsgClientServerHeader) GetLocalPlayerIndex() uint32 {
	if x != nil && x.LocalPlayerIndex != nil {
		return *x.LocalPlayerIndex
	}
	return 0
}

func (x *CMsgClientServerHeader) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CMsgClientServerHeader) GetMsgId() EDCGGameMessages {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return Default_CMsgClientServerHeader_MsgId
}

type CMsgGameBoardGameCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId *uint32 `protobuf:"varint,1,opt,name=command_id,json=commandId" json:"command_id,omitempty"`
	ObjectId  *uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
}

func (x *CMsgGameBoardGameCommand) Reset() {
	*x = CMsgGameBoardGameCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameBoardGameCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameBoardGameCommand) ProtoMessage() {}

func (x *CMsgGameBoardGameCommand) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameBoardGameCommand.ProtoReflect.Descriptor instead.
func (*CMsgGameBoardGameCommand) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgGameBoardGameCommand) GetCommandId() uint32 {
	if x != nil && x.CommandId != nil {
		return *x.CommandId
	}
	return 0
}

func (x *CMsgGameBoardGameCommand) GetObjectId() uint32 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

type CMsgGameBoardGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDiff            *bool   `protobuf:"varint,1,opt,name=is_diff,json=isDiff" json:"is_diff,omitempty"`
	IsLast            *bool   `protobuf:"varint,2,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	Payload           []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	UnpackedStateSize *uint32 `protobuf:"varint,4,opt,name=unpacked_state_size,json=unpackedStateSize" json:"unpacked_state_size,omitempty"`
	NetworkGroup      *uint32 `protobuf:"varint,5,opt,name=network_group,json=networkGroup" json:"network_group,omitempty"`
	ServerTimeMs      *uint32 `protobuf:"varint,6,opt,name=server_time_ms,json=serverTimeMs" json:"server_time_ms,omitempty"`
}

func (x *CMsgGameBoardGameState) Reset() {
	*x = CMsgGameBoardGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameBoardGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameBoardGameState) ProtoMessage() {}

func (x *CMsgGameBoardGameState) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameBoardGameState.ProtoReflect.Descriptor instead.
func (*CMsgGameBoardGameState) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGameBoardGameState) GetIsDiff() bool {
	if x != nil && x.IsDiff != nil {
		return *x.IsDiff
	}
	return false
}

func (x *CMsgGameBoardGameState) GetIsLast() bool {
	if x != nil && x.IsLast != nil {
		return *x.IsLast
	}
	return false
}

func (x *CMsgGameBoardGameState) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CMsgGameBoardGameState) GetUnpackedStateSize() uint32 {
	if x != nil && x.UnpackedStateSize != nil {
		return *x.UnpackedStateSize
	}
	return 0
}

func (x *CMsgGameBoardGameState) GetNetworkGroup() uint32 {
	if x != nil && x.NetworkGroup != nil {
		return *x.NetworkGroup
	}
	return 0
}

func (x *CMsgGameBoardGameState) GetServerTimeMs() uint32 {
	if x != nil && x.ServerTimeMs != nil {
		return *x.ServerTimeMs
	}
	return 0
}

type CMsgGameBoardGameButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ButtonId *uint32 `protobuf:"varint,1,opt,name=button_id,json=buttonId" json:"button_id,omitempty"`
}

func (x *CMsgGameBoardGameButton) Reset() {
	*x = CMsgGameBoardGameButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameBoardGameButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameBoardGameButton) ProtoMessage() {}

func (x *CMsgGameBoardGameButton) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameBoardGameButton.ProtoReflect.Descriptor instead.
func (*CMsgGameBoardGameButton) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGameBoardGameButton) GetButtonId() uint32 {
	if x != nil && x.ButtonId != nil {
		return *x.ButtonId
	}
	return 0
}

type CMsgGamePlayerRequestHandoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGamePlayerRequestHandoff) Reset() {
	*x = CMsgGamePlayerRequestHandoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGamePlayerRequestHandoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGamePlayerRequestHandoff) ProtoMessage() {}

func (x *CMsgGamePlayerRequestHandoff) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGamePlayerRequestHandoff.ProtoReflect.Descriptor instead.
func (*CMsgGamePlayerRequestHandoff) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{4}
}

type CMsgGameHandoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCount *uint32        `protobuf:"varint,1,opt,name=player_count,json=playerCount" json:"player_count,omitempty"`
	IsSpectator *bool          `protobuf:"varint,3,opt,name=is_spectator,json=isSpectator" json:"is_spectator,omitempty"`
	GameMode    *EDCGMatchMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=artifact.EDCGMatchMode,def=2" json:"game_mode,omitempty"`
}

// Default values for CMsgGameHandoff fields.
const (
	Default_CMsgGameHandoff_GameMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgGameHandoff) Reset() {
	*x = CMsgGameHandoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameHandoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameHandoff) ProtoMessage() {}

func (x *CMsgGameHandoff) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameHandoff.ProtoReflect.Descriptor instead.
func (*CMsgGameHandoff) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgGameHandoff) GetPlayerCount() uint32 {
	if x != nil && x.PlayerCount != nil {
		return *x.PlayerCount
	}
	return 0
}

func (x *CMsgGameHandoff) GetIsSpectator() bool {
	if x != nil && x.IsSpectator != nil {
		return *x.IsSpectator
	}
	return false
}

func (x *CMsgGameHandoff) GetGameMode() EDCGMatchMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgGameHandoff_GameMode
}

type CMsgGameServerToClientInitialGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decklist       []*CMsgGameServerToClientInitialGameState_CMsgDeckList       `protobuf:"bytes,1,rep,name=decklist" json:"decklist,omitempty"`
	CombatLogEntry []*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry `protobuf:"bytes,2,rep,name=combat_log_entry,json=combatLogEntry" json:"combat_log_entry,omitempty"`
}

func (x *CMsgGameServerToClientInitialGameState) Reset() {
	*x = CMsgGameServerToClientInitialGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientInitialGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientInitialGameState) ProtoMessage() {}

func (x *CMsgGameServerToClientInitialGameState) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientInitialGameState.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientInitialGameState) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgGameServerToClientInitialGameState) GetDecklist() []*CMsgGameServerToClientInitialGameState_CMsgDeckList {
	if x != nil {
		return x.Decklist
	}
	return nil
}

func (x *CMsgGameServerToClientInitialGameState) GetCombatLogEntry() []*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry {
	if x != nil {
		return x.CombatLogEntry
	}
	return nil
}

type CMsgGameReplayActionMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *CMsgGameReplayActionMarker_EActionType `protobuf:"varint,1,opt,name=action,enum=artifact.CMsgGameReplayActionMarker_EActionType,def=1" json:"action,omitempty"`
}

// Default values for CMsgGameReplayActionMarker fields.
const (
	Default_CMsgGameReplayActionMarker_Action = CMsgGameReplayActionMarker_k_eActionType_TurnStart
)

func (x *CMsgGameReplayActionMarker) Reset() {
	*x = CMsgGameReplayActionMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameReplayActionMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameReplayActionMarker) ProtoMessage() {}

func (x *CMsgGameReplayActionMarker) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameReplayActionMarker.ProtoReflect.Descriptor instead.
func (*CMsgGameReplayActionMarker) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGameReplayActionMarker) GetAction() CMsgGameReplayActionMarker_EActionType {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CMsgGameReplayActionMarker_Action
}

type CMsgTutorialEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	ObjectId *uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	Param1   *string `protobuf:"bytes,3,opt,name=param1" json:"param1,omitempty"`
	Param2   *string `protobuf:"bytes,4,opt,name=param2" json:"param2,omitempty"`
	Param3   *string `protobuf:"bytes,5,opt,name=param3" json:"param3,omitempty"`
}

func (x *CMsgTutorialEvent) Reset() {
	*x = CMsgTutorialEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTutorialEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTutorialEvent) ProtoMessage() {}

func (x *CMsgTutorialEvent) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTutorialEvent.ProtoReflect.Descriptor instead.
func (*CMsgTutorialEvent) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgTutorialEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CMsgTutorialEvent) GetObjectId() uint32 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *CMsgTutorialEvent) GetParam1() string {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return ""
}

func (x *CMsgTutorialEvent) GetParam2() string {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return ""
}

func (x *CMsgTutorialEvent) GetParam3() string {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return ""
}

type CMsgVenchatoquistEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        *string                             `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	ObjectId    *uint32                             `protobuf:"varint,2,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	ChatSource  *CMsgVenchatoquistEvent_EChatSource `protobuf:"varint,3,opt,name=chat_source,json=chatSource,enum=artifact.CMsgVenchatoquistEvent_EChatSource,def=1" json:"chat_source,omitempty"`
	PersonaName *string                             `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	UserId      *uint32                             `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LineId      *uint32                             `protobuf:"varint,6,opt,name=line_id,json=lineId" json:"line_id,omitempty"`
	ToggleMute  *bool                               `protobuf:"varint,7,opt,name=toggle_mute,json=toggleMute" json:"toggle_mute,omitempty"`
}

// Default values for CMsgVenchatoquistEvent fields.
const (
	Default_CMsgVenchatoquistEvent_ChatSource = CMsgVenchatoquistEvent_eObjectID
)

func (x *CMsgVenchatoquistEvent) Reset() {
	*x = CMsgVenchatoquistEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgVenchatoquistEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgVenchatoquistEvent) ProtoMessage() {}

func (x *CMsgVenchatoquistEvent) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgVenchatoquistEvent.ProtoReflect.Descriptor instead.
func (*CMsgVenchatoquistEvent) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgVenchatoquistEvent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgVenchatoquistEvent) GetObjectId() uint32 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *CMsgVenchatoquistEvent) GetChatSource() CMsgVenchatoquistEvent_EChatSource {
	if x != nil && x.ChatSource != nil {
		return *x.ChatSource
	}
	return Default_CMsgVenchatoquistEvent_ChatSource
}

func (x *CMsgVenchatoquistEvent) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgVenchatoquistEvent) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CMsgVenchatoquistEvent) GetLineId() uint32 {
	if x != nil && x.LineId != nil {
		return *x.LineId
	}
	return 0
}

func (x *CMsgVenchatoquistEvent) GetToggleMute() bool {
	if x != nil && x.ToggleMute != nil {
		return *x.ToggleMute
	}
	return false
}

type CMsgGameClientToServerChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcChatMsg *CExtraMsgBlock `protobuf:"bytes,1,opt,name=gc_chat_msg,json=gcChatMsg" json:"gc_chat_msg,omitempty"`
}

func (x *CMsgGameClientToServerChatMsg) Reset() {
	*x = CMsgGameClientToServerChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameClientToServerChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameClientToServerChatMsg) ProtoMessage() {}

func (x *CMsgGameClientToServerChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameClientToServerChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgGameClientToServerChatMsg) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgGameClientToServerChatMsg) GetGcChatMsg() *CExtraMsgBlock {
	if x != nil {
		return x.GcChatMsg
	}
	return nil
}

type CMsgGameServerToClientChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcChatResponse *CExtraMsgBlock `protobuf:"bytes,1,opt,name=gc_chat_response,json=gcChatResponse" json:"gc_chat_response,omitempty"`
}

func (x *CMsgGameServerToClientChatMsg) Reset() {
	*x = CMsgGameServerToClientChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientChatMsg) ProtoMessage() {}

func (x *CMsgGameServerToClientChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientChatMsg) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgGameServerToClientChatMsg) GetGcChatResponse() *CExtraMsgBlock {
	if x != nil {
		return x.GcChatResponse
	}
	return nil
}

type CMsgGameServerToClientGameCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameServerToClientGameCompleted) Reset() {
	*x = CMsgGameServerToClientGameCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientGameCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientGameCompleted) ProtoMessage() {}

func (x *CMsgGameServerToClientGameCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientGameCompleted.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientGameCompleted) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{12}
}

type CMsgGameClientToServerBoardGameStateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTimeMs *uint32 `protobuf:"varint,1,opt,name=server_time_ms,json=serverTimeMs" json:"server_time_ms,omitempty"`
}

func (x *CMsgGameClientToServerBoardGameStateAck) Reset() {
	*x = CMsgGameClientToServerBoardGameStateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameClientToServerBoardGameStateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameClientToServerBoardGameStateAck) ProtoMessage() {}

func (x *CMsgGameClientToServerBoardGameStateAck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameClientToServerBoardGameStateAck.ProtoReflect.Descriptor instead.
func (*CMsgGameClientToServerBoardGameStateAck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgGameClientToServerBoardGameStateAck) GetServerTimeMs() uint32 {
	if x != nil && x.ServerTimeMs != nil {
		return *x.ServerTimeMs
	}
	return 0
}

type CMsgGameServerToClientGoodbye struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameServerToClientGoodbye) Reset() {
	*x = CMsgGameServerToClientGoodbye{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientGoodbye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientGoodbye) ProtoMessage() {}

func (x *CMsgGameServerToClientGoodbye) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientGoodbye.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientGoodbye) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{14}
}

type CMsgGameClientToServerPauseTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pause *bool `protobuf:"varint,1,opt,name=pause" json:"pause,omitempty"`
}

func (x *CMsgGameClientToServerPauseTimer) Reset() {
	*x = CMsgGameClientToServerPauseTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameClientToServerPauseTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameClientToServerPauseTimer) ProtoMessage() {}

func (x *CMsgGameClientToServerPauseTimer) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameClientToServerPauseTimer.ProtoReflect.Descriptor instead.
func (*CMsgGameClientToServerPauseTimer) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGameClientToServerPauseTimer) GetPause() bool {
	if x != nil && x.Pause != nil {
		return *x.Pause
	}
	return false
}

type CMsgGameServerToClientConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgGameServerToClientConnectionStatus_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgGameServerToClientConnectionStatus) Reset() {
	*x = CMsgGameServerToClientConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientConnectionStatus) ProtoMessage() {}

func (x *CMsgGameServerToClientConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientConnectionStatus.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientConnectionStatus) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgGameServerToClientConnectionStatus) GetPlayers() []*CMsgGameServerToClientConnectionStatus_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameClientToServerGiveOpponentTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameClientToServerGiveOpponentTime) Reset() {
	*x = CMsgGameClientToServerGiveOpponentTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameClientToServerGiveOpponentTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameClientToServerGiveOpponentTime) ProtoMessage() {}

func (x *CMsgGameClientToServerGiveOpponentTime) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameClientToServerGiveOpponentTime.ProtoReflect.Descriptor instead.
func (*CMsgGameClientToServerGiveOpponentTime) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{17}
}

type CClientReconnectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId *uint64 `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	MatchId       *uint64 `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TimeUpdated   *uint32 `protobuf:"varint,3,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
}

func (x *CClientReconnectInfo) Reset() {
	*x = CClientReconnectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientReconnectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientReconnectInfo) ProtoMessage() {}

func (x *CClientReconnectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientReconnectInfo.ProtoReflect.Descriptor instead.
func (*CClientReconnectInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{18}
}

func (x *CClientReconnectInfo) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CClientReconnectInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CClientReconnectInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

type CMsgPostMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lanes []*CMsgPostMatchStats_CLane `protobuf:"bytes,1,rep,name=lanes" json:"lanes,omitempty"`
}

func (x *CMsgPostMatchStats) Reset() {
	*x = CMsgPostMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPostMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPostMatchStats) ProtoMessage() {}

func (x *CMsgPostMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPostMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgPostMatchStats) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgPostMatchStats) GetLanes() []*CMsgPostMatchStats_CLane {
	if x != nil {
		return x.Lanes
	}
	return nil
}

type CMsgPostMatchCardAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId []uint32 `protobuf:"varint,1,rep,packed,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	BaseValues    []uint32 `protobuf:"varint,2,rep,packed,name=base_values,json=baseValues" json:"base_values,omitempty"`
	Progress      []uint32 `protobuf:"varint,3,rep,packed,name=progress" json:"progress,omitempty"`
}

func (x *CMsgPostMatchCardAchievements) Reset() {
	*x = CMsgPostMatchCardAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPostMatchCardAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPostMatchCardAchievements) ProtoMessage() {}

func (x *CMsgPostMatchCardAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPostMatchCardAchievements.ProtoReflect.Descriptor instead.
func (*CMsgPostMatchCardAchievements) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgPostMatchCardAchievements) GetAchievementId() []uint32 {
	if x != nil {
		return x.AchievementId
	}
	return nil
}

func (x *CMsgPostMatchCardAchievements) GetBaseValues() []uint32 {
	if x != nil {
		return x.BaseValues
	}
	return nil
}

func (x *CMsgPostMatchCardAchievements) GetProgress() []uint32 {
	if x != nil {
		return x.Progress
	}
	return nil
}

type CMsgSerializeQuestProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      *uint32                                   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	QuestId      *uint32                                   `protobuf:"varint,2,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	AccountId    *uint32                                   `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ProgressMsg  []byte                                    `protobuf:"bytes,4,opt,name=progress_msg,json=progressMsg" json:"progress_msg,omitempty"`
	LocalUnlocks []*CMsgSerializeQuestProgress_LocalUnlock `protobuf:"bytes,5,rep,name=local_unlocks,json=localUnlocks" json:"local_unlocks,omitempty"`
}

func (x *CMsgSerializeQuestProgress) Reset() {
	*x = CMsgSerializeQuestProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSerializeQuestProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSerializeQuestProgress) ProtoMessage() {}

func (x *CMsgSerializeQuestProgress) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSerializeQuestProgress.ProtoReflect.Descriptor instead.
func (*CMsgSerializeQuestProgress) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSerializeQuestProgress) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgSerializeQuestProgress) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgSerializeQuestProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSerializeQuestProgress) GetProgressMsg() []byte {
	if x != nil {
		return x.ProgressMsg
	}
	return nil
}

func (x *CMsgSerializeQuestProgress) GetLocalUnlocks() []*CMsgSerializeQuestProgress_LocalUnlock {
	if x != nil {
		return x.LocalUnlocks
	}
	return nil
}

type CMsg_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId             *uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	SourceEffectCardId *uint32 `protobuf:"varint,2,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
	Color              *string `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
}

func (x *CMsg_Card) Reset() {
	*x = CMsg_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsg_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsg_Card) ProtoMessage() {}

func (x *CMsg_Card) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsg_Card.ProtoReflect.Descriptor instead.
func (*CMsg_Card) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsg_Card) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CMsg_Card) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

func (x *CMsg_Card) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

type CTraceMsg_PathingCardChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCardId         *uint32 `protobuf:"varint,1,opt,name=new_card_id,json=newCardId" json:"new_card_id,omitempty"`
	IsBoundaryPath    *bool   `protobuf:"varint,2,opt,name=is_boundary_path,json=isBoundaryPath" json:"is_boundary_path,omitempty"`
	IsValidPathTarget *bool   `protobuf:"varint,3,opt,name=is_valid_path_target,json=isValidPathTarget" json:"is_valid_path_target,omitempty"`
}

func (x *CTraceMsg_PathingCardChanged) Reset() {
	*x = CTraceMsg_PathingCardChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PathingCardChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PathingCardChanged) ProtoMessage() {}

func (x *CTraceMsg_PathingCardChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PathingCardChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PathingCardChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{23}
}

func (x *CTraceMsg_PathingCardChanged) GetNewCardId() uint32 {
	if x != nil && x.NewCardId != nil {
		return *x.NewCardId
	}
	return 0
}

func (x *CTraceMsg_PathingCardChanged) GetIsBoundaryPath() bool {
	if x != nil && x.IsBoundaryPath != nil {
		return *x.IsBoundaryPath
	}
	return false
}

func (x *CTraceMsg_PathingCardChanged) GetIsValidPathTarget() bool {
	if x != nil && x.IsValidPathTarget != nil {
		return *x.IsValidPathTarget
	}
	return false
}

type CTraceMsg_CardBought struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnCardEnteredHand  *int32 `protobuf:"varint,1,opt,name=turn_card_entered_hand,json=turnCardEnteredHand" json:"turn_card_entered_hand,omitempty"`
	OrderCardEnteredHand *int32 `protobuf:"varint,2,opt,name=order_card_entered_hand,json=orderCardEnteredHand" json:"order_card_entered_hand,omitempty"`
}

func (x *CTraceMsg_CardBought) Reset() {
	*x = CTraceMsg_CardBought{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardBought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardBought) ProtoMessage() {}

func (x *CTraceMsg_CardBought) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardBought.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardBought) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{24}
}

func (x *CTraceMsg_CardBought) GetTurnCardEnteredHand() int32 {
	if x != nil && x.TurnCardEnteredHand != nil {
		return *x.TurnCardEnteredHand
	}
	return 0
}

func (x *CTraceMsg_CardBought) GetOrderCardEnteredHand() int32 {
	if x != nil && x.OrderCardEnteredHand != nil {
		return *x.OrderCardEnteredHand
	}
	return 0
}

type CTraceMsg_ChargesChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeDelta *int32  `protobuf:"varint,1,opt,name=charge_delta,json=chargeDelta" json:"charge_delta,omitempty"`
	NewCharges  *uint32 `protobuf:"varint,2,opt,name=new_charges,json=newCharges" json:"new_charges,omitempty"`
}

func (x *CTraceMsg_ChargesChanged) Reset() {
	*x = CTraceMsg_ChargesChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ChargesChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ChargesChanged) ProtoMessage() {}

func (x *CTraceMsg_ChargesChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ChargesChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ChargesChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{25}
}

func (x *CTraceMsg_ChargesChanged) GetChargeDelta() int32 {
	if x != nil && x.ChargeDelta != nil {
		return *x.ChargeDelta
	}
	return 0
}

func (x *CTraceMsg_ChargesChanged) GetNewCharges() uint32 {
	if x != nil && x.NewCharges != nil {
		return *x.NewCharges
	}
	return 0
}

type CTraceMsg_ShoppingCardAppeared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *EShoppingSlot `protobuf:"varint,1,opt,name=slot,enum=artifact.EShoppingSlot,def=0" json:"slot,omitempty"`
}

// Default values for CTraceMsg_ShoppingCardAppeared fields.
const (
	Default_CTraceMsg_ShoppingCardAppeared_Slot = EShoppingSlot_eInvalidSlot
)

func (x *CTraceMsg_ShoppingCardAppeared) Reset() {
	*x = CTraceMsg_ShoppingCardAppeared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShoppingCardAppeared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShoppingCardAppeared) ProtoMessage() {}

func (x *CTraceMsg_ShoppingCardAppeared) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShoppingCardAppeared.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShoppingCardAppeared) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{26}
}

func (x *CTraceMsg_ShoppingCardAppeared) GetSlot() EShoppingSlot {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return Default_CTraceMsg_ShoppingCardAppeared_Slot
}

type CTraceMsg_ShopAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_ShopAction) Reset() {
	*x = CTraceMsg_ShopAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShopAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShopAction) ProtoMessage() {}

func (x *CTraceMsg_ShopAction) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShopAction.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShopAction) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{27}
}

type CTraceMsg_ShopHoldItemAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId     *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	IsAvailable *bool   `protobuf:"varint,2,opt,name=is_available,json=isAvailable" json:"is_available,omitempty"`
}

func (x *CTraceMsg_ShopHoldItemAvailable) Reset() {
	*x = CTraceMsg_ShopHoldItemAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShopHoldItemAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShopHoldItemAvailable) ProtoMessage() {}

func (x *CTraceMsg_ShopHoldItemAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShopHoldItemAvailable.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShopHoldItemAvailable) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{28}
}

func (x *CTraceMsg_ShopHoldItemAvailable) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_ShopHoldItemAvailable) GetIsAvailable() bool {
	if x != nil && x.IsAvailable != nil {
		return *x.IsAvailable
	}
	return false
}

type CTraceMsg_ShopCardRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_ShopCardRemoved) Reset() {
	*x = CTraceMsg_ShopCardRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShopCardRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShopCardRemoved) ProtoMessage() {}

func (x *CTraceMsg_ShopCardRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShopCardRemoved.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShopCardRemoved) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{29}
}

type CTraceMsg_ShopEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CTraceMsg_ShopEnded) Reset() {
	*x = CTraceMsg_ShopEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShopEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShopEnded) ProtoMessage() {}

func (x *CTraceMsg_ShopEnded) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShopEnded.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShopEnded) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{30}
}

func (x *CTraceMsg_ShopEnded) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type CTraceMsg_ShoppingCardShuffled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopOrder *uint32 `protobuf:"varint,1,opt,name=shop_order,json=shopOrder" json:"shop_order,omitempty"`
}

func (x *CTraceMsg_ShoppingCardShuffled) Reset() {
	*x = CTraceMsg_ShoppingCardShuffled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ShoppingCardShuffled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ShoppingCardShuffled) ProtoMessage() {}

func (x *CTraceMsg_ShoppingCardShuffled) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ShoppingCardShuffled.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ShoppingCardShuffled) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{31}
}

func (x *CTraceMsg_ShoppingCardShuffled) GetShopOrder() uint32 {
	if x != nil && x.ShopOrder != nil {
		return *x.ShopOrder
	}
	return 0
}

type CTraceMsg_UnitEnteringCombat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLaneId         *uint32 `protobuf:"varint,1,opt,name=new_lane_id,json=newLaneId" json:"new_lane_id,omitempty"`
	NewCombatPosition *uint32 `protobuf:"varint,2,opt,name=new_combat_position,json=newCombatPosition" json:"new_combat_position,omitempty"`
	OwnerId           *uint32 `protobuf:"varint,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	IsValidPathTarget *bool   `protobuf:"varint,5,opt,name=is_valid_path_target,json=isValidPathTarget" json:"is_valid_path_target,omitempty"`
	IsBoundaryPath    *bool   `protobuf:"varint,6,opt,name=is_boundary_path,json=isBoundaryPath" json:"is_boundary_path,omitempty"`
}

func (x *CTraceMsg_UnitEnteringCombat) Reset() {
	*x = CTraceMsg_UnitEnteringCombat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitEnteringCombat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitEnteringCombat) ProtoMessage() {}

func (x *CTraceMsg_UnitEnteringCombat) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitEnteringCombat.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitEnteringCombat) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{32}
}

func (x *CTraceMsg_UnitEnteringCombat) GetNewLaneId() uint32 {
	if x != nil && x.NewLaneId != nil {
		return *x.NewLaneId
	}
	return 0
}

func (x *CTraceMsg_UnitEnteringCombat) GetNewCombatPosition() uint32 {
	if x != nil && x.NewCombatPosition != nil {
		return *x.NewCombatPosition
	}
	return 0
}

func (x *CTraceMsg_UnitEnteringCombat) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_UnitEnteringCombat) GetIsValidPathTarget() bool {
	if x != nil && x.IsValidPathTarget != nil {
		return *x.IsValidPathTarget
	}
	return false
}

func (x *CTraceMsg_UnitEnteringCombat) GetIsBoundaryPath() bool {
	if x != nil && x.IsBoundaryPath != nil {
		return *x.IsBoundaryPath
	}
	return false
}

type CTraceMsg_ImprovementEnteringPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLaneId              *uint32    `protobuf:"varint,1,opt,name=new_lane_id,json=newLaneId" json:"new_lane_id,omitempty"`
	NewImprovementPosition *uint32    `protobuf:"varint,2,opt,name=new_improvement_position,json=newImprovementPosition" json:"new_improvement_position,omitempty"`
	Card                   *CMsg_Card `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	OwnerId                *uint32    `protobuf:"varint,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CTraceMsg_ImprovementEnteringPlay) Reset() {
	*x = CTraceMsg_ImprovementEnteringPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ImprovementEnteringPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ImprovementEnteringPlay) ProtoMessage() {}

func (x *CTraceMsg_ImprovementEnteringPlay) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ImprovementEnteringPlay.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ImprovementEnteringPlay) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{33}
}

func (x *CTraceMsg_ImprovementEnteringPlay) GetNewLaneId() uint32 {
	if x != nil && x.NewLaneId != nil {
		return *x.NewLaneId
	}
	return 0
}

func (x *CTraceMsg_ImprovementEnteringPlay) GetNewImprovementPosition() uint32 {
	if x != nil && x.NewImprovementPosition != nil {
		return *x.NewImprovementPosition
	}
	return 0
}

func (x *CTraceMsg_ImprovementEnteringPlay) GetCard() *CMsg_Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CTraceMsg_ImprovementEnteringPlay) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type CTraceMsg_UnitLeavingCombat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneId    *uint32 `protobuf:"varint,1,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	NewZoneId *uint32 `protobuf:"varint,2,opt,name=new_zone_id,json=newZoneId" json:"new_zone_id,omitempty"`
}

func (x *CTraceMsg_UnitLeavingCombat) Reset() {
	*x = CTraceMsg_UnitLeavingCombat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitLeavingCombat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitLeavingCombat) ProtoMessage() {}

func (x *CTraceMsg_UnitLeavingCombat) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitLeavingCombat.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitLeavingCombat) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{34}
}

func (x *CTraceMsg_UnitLeavingCombat) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CTraceMsg_UnitLeavingCombat) GetNewZoneId() uint32 {
	if x != nil && x.NewZoneId != nil {
		return *x.NewZoneId
	}
	return 0
}

type CTraceMsg_DeathShieldUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_DeathShieldUsed) Reset() {
	*x = CTraceMsg_DeathShieldUsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_DeathShieldUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_DeathShieldUsed) ProtoMessage() {}

func (x *CTraceMsg_DeathShieldUsed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_DeathShieldUsed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_DeathShieldUsed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{35}
}

type CTraceMsg_CardSurvivedDeath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurvivalChance *uint32 `protobuf:"varint,1,opt,name=survival_chance,json=survivalChance" json:"survival_chance,omitempty"`
	SourceCardId   *uint32 `protobuf:"varint,2,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	SourceObjectId *uint32 `protobuf:"varint,3,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
}

func (x *CTraceMsg_CardSurvivedDeath) Reset() {
	*x = CTraceMsg_CardSurvivedDeath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardSurvivedDeath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardSurvivedDeath) ProtoMessage() {}

func (x *CTraceMsg_CardSurvivedDeath) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardSurvivedDeath.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardSurvivedDeath) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{36}
}

func (x *CTraceMsg_CardSurvivedDeath) GetSurvivalChance() uint32 {
	if x != nil && x.SurvivalChance != nil {
		return *x.SurvivalChance
	}
	return 0
}

func (x *CTraceMsg_CardSurvivedDeath) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CTraceMsg_CardSurvivedDeath) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

type CTraceMsg_TowerKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId          *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	IsCombat         *bool   `protobuf:"varint,2,opt,name=is_combat,json=isCombat" json:"is_combat,omitempty"`
	IsDefeatForOwner *bool   `protobuf:"varint,3,opt,name=is_defeat_for_owner,json=isDefeatForOwner" json:"is_defeat_for_owner,omitempty"`
}

func (x *CTraceMsg_TowerKilled) Reset() {
	*x = CTraceMsg_TowerKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TowerKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TowerKilled) ProtoMessage() {}

func (x *CTraceMsg_TowerKilled) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TowerKilled.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TowerKilled) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{37}
}

func (x *CTraceMsg_TowerKilled) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_TowerKilled) GetIsCombat() bool {
	if x != nil && x.IsCombat != nil {
		return *x.IsCombat
	}
	return false
}

func (x *CTraceMsg_TowerKilled) GetIsDefeatForOwner() bool {
	if x != nil && x.IsDefeatForOwner != nil {
		return *x.IsDefeatForOwner
	}
	return false
}

type CTraceMsg_CardKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	IsCreep  *bool   `protobuf:"varint,2,opt,name=is_creep,json=isCreep" json:"is_creep,omitempty"`
	IsHero   *bool   `protobuf:"varint,3,opt,name=is_hero,json=isHero" json:"is_hero,omitempty"`
	IsCombat *bool   `protobuf:"varint,4,opt,name=is_combat,json=isCombat" json:"is_combat,omitempty"`
}

func (x *CTraceMsg_CardKilled) Reset() {
	*x = CTraceMsg_CardKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardKilled) ProtoMessage() {}

func (x *CTraceMsg_CardKilled) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardKilled.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardKilled) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{38}
}

func (x *CTraceMsg_CardKilled) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_CardKilled) GetIsCreep() bool {
	if x != nil && x.IsCreep != nil {
		return *x.IsCreep
	}
	return false
}

func (x *CTraceMsg_CardKilled) GetIsHero() bool {
	if x != nil && x.IsHero != nil {
		return *x.IsHero
	}
	return false
}

func (x *CTraceMsg_CardKilled) GetIsCombat() bool {
	if x != nil && x.IsCombat != nil {
		return *x.IsCombat
	}
	return false
}

type CTraceMsg_ImprovementDestroyed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CTraceMsg_ImprovementDestroyed) Reset() {
	*x = CTraceMsg_ImprovementDestroyed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ImprovementDestroyed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ImprovementDestroyed) ProtoMessage() {}

func (x *CTraceMsg_ImprovementDestroyed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ImprovementDestroyed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ImprovementDestroyed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{39}
}

func (x *CTraceMsg_ImprovementDestroyed) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type CTraceMsg_CardReturnedToFountain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardReturnedToFountain) Reset() {
	*x = CTraceMsg_CardReturnedToFountain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardReturnedToFountain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardReturnedToFountain) ProtoMessage() {}

func (x *CTraceMsg_CardReturnedToFountain) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardReturnedToFountain.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardReturnedToFountain) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{40}
}

type CTraceMsg_CardMovedToDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousZoneId *uint32 `protobuf:"varint,1,opt,name=previous_zone_id,json=previousZoneId" json:"previous_zone_id,omitempty"`
	OwnerId        *uint32 `protobuf:"varint,2,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CTraceMsg_CardMovedToDeck) Reset() {
	*x = CTraceMsg_CardMovedToDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToDeck) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToDeck.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{41}
}

func (x *CTraceMsg_CardMovedToDeck) GetPreviousZoneId() uint32 {
	if x != nil && x.PreviousZoneId != nil {
		return *x.PreviousZoneId
	}
	return 0
}

func (x *CTraceMsg_CardMovedToDeck) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type CTraceMsg_CardMovedToHand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousZoneId *uint32 `protobuf:"varint,1,opt,name=previous_zone_id,json=previousZoneId" json:"previous_zone_id,omitempty"`
}

func (x *CTraceMsg_CardMovedToHand) Reset() {
	*x = CTraceMsg_CardMovedToHand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToHand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToHand) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToHand) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToHand.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToHand) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{42}
}

func (x *CTraceMsg_CardMovedToHand) GetPreviousZoneId() uint32 {
	if x != nil && x.PreviousZoneId != nil {
		return *x.PreviousZoneId
	}
	return 0
}

type CTraceMsg_CardMovedToDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneId                      *uint32 `protobuf:"varint,1,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	ThisTurnHeroDeploymentOrder *uint32 `protobuf:"varint,2,opt,name=this_turn_hero_deployment_order,json=thisTurnHeroDeploymentOrder" json:"this_turn_hero_deployment_order,omitempty"`
}

func (x *CTraceMsg_CardMovedToDeployment) Reset() {
	*x = CTraceMsg_CardMovedToDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToDeployment) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToDeployment.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToDeployment) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{43}
}

func (x *CTraceMsg_CardMovedToDeployment) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CTraceMsg_CardMovedToDeployment) GetThisTurnHeroDeploymentOrder() uint32 {
	if x != nil && x.ThisTurnHeroDeploymentOrder != nil {
		return *x.ThisTurnHeroDeploymentOrder
	}
	return 0
}

type CTraceMsg_CardMovedToEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardMovedToEffects) Reset() {
	*x = CTraceMsg_CardMovedToEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToEffects) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToEffects) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToEffects.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToEffects) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{44}
}

type CTraceMsg_CardMovedToSpellStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardMovedToSpellStack) Reset() {
	*x = CTraceMsg_CardMovedToSpellStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToSpellStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToSpellStack) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToSpellStack) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToSpellStack.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToSpellStack) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{45}
}

type CTraceMsg_CardReturnedToGuardDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardReturnedToGuardDeck) Reset() {
	*x = CTraceMsg_CardReturnedToGuardDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardReturnedToGuardDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardReturnedToGuardDeck) ProtoMessage() {}

func (x *CTraceMsg_CardReturnedToGuardDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardReturnedToGuardDeck.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardReturnedToGuardDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{46}
}

type CTraceMsg_CardMovedToGraveyard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardMovedToGraveyard) Reset() {
	*x = CTraceMsg_CardMovedToGraveyard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardMovedToGraveyard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardMovedToGraveyard) ProtoMessage() {}

func (x *CTraceMsg_CardMovedToGraveyard) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardMovedToGraveyard.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardMovedToGraveyard) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{47}
}

type CTraceMsg_CardDuplicated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	CopiedCardObjectId *uint32 `protobuf:"varint,2,opt,name=copied_card_object_id,json=copiedCardObjectId" json:"copied_card_object_id,omitempty"`
	SourceEffectCardId *uint32 `protobuf:"varint,3,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
	LaneId             *uint32 `protobuf:"varint,4,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	ZoneId             *uint32 `protobuf:"varint,5,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
}

func (x *CTraceMsg_CardDuplicated) Reset() {
	*x = CTraceMsg_CardDuplicated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardDuplicated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardDuplicated) ProtoMessage() {}

func (x *CTraceMsg_CardDuplicated) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardDuplicated.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardDuplicated) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{48}
}

func (x *CTraceMsg_CardDuplicated) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_CardDuplicated) GetCopiedCardObjectId() uint32 {
	if x != nil && x.CopiedCardObjectId != nil {
		return *x.CopiedCardObjectId
	}
	return 0
}

func (x *CTraceMsg_CardDuplicated) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

func (x *CTraceMsg_CardDuplicated) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CTraceMsg_CardDuplicated) GetZoneId() uint32 {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return 0
}

type CTraceMsg_CardDrawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId              *uint32                               `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	TurnCardEnteredHand  *int32                                `protobuf:"varint,2,opt,name=turn_card_entered_hand,json=turnCardEnteredHand" json:"turn_card_entered_hand,omitempty"`
	OrderCardEnteredHand *int32                                `protobuf:"varint,3,opt,name=order_card_entered_hand,json=orderCardEnteredHand" json:"order_card_entered_hand,omitempty"`
	DrawnSource          *CTraceMsg_CardDrawn_ECardDrawnSource `protobuf:"varint,4,opt,name=drawn_source,json=drawnSource,enum=artifact.CTraceMsg_CardDrawn_ECardDrawnSource,def=1" json:"drawn_source,omitempty"`
}

// Default values for CTraceMsg_CardDrawn fields.
const (
	Default_CTraceMsg_CardDrawn_DrawnSource = CTraceMsg_CardDrawn_k_eCardDrawnSource_Deck
)

func (x *CTraceMsg_CardDrawn) Reset() {
	*x = CTraceMsg_CardDrawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardDrawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardDrawn) ProtoMessage() {}

func (x *CTraceMsg_CardDrawn) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardDrawn.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardDrawn) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{49}
}

func (x *CTraceMsg_CardDrawn) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_CardDrawn) GetTurnCardEnteredHand() int32 {
	if x != nil && x.TurnCardEnteredHand != nil {
		return *x.TurnCardEnteredHand
	}
	return 0
}

func (x *CTraceMsg_CardDrawn) GetOrderCardEnteredHand() int32 {
	if x != nil && x.OrderCardEnteredHand != nil {
		return *x.OrderCardEnteredHand
	}
	return 0
}

func (x *CTraceMsg_CardDrawn) GetDrawnSource() CTraceMsg_CardDrawn_ECardDrawnSource {
	if x != nil && x.DrawnSource != nil {
		return *x.DrawnSource
	}
	return Default_CTraceMsg_CardDrawn_DrawnSource
}

type CTraceMsg_CardPlayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_CardPlayed) Reset() {
	*x = CTraceMsg_CardPlayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardPlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardPlayed) ProtoMessage() {}

func (x *CTraceMsg_CardPlayed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardPlayed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardPlayed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{50}
}

type CTraceMsg_UnitCondemned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
}

func (x *CTraceMsg_UnitCondemned) Reset() {
	*x = CTraceMsg_UnitCondemned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitCondemned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitCondemned) ProtoMessage() {}

func (x *CTraceMsg_UnitCondemned) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitCondemned.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitCondemned) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{51}
}

func (x *CTraceMsg_UnitCondemned) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

type CTraceMsg_TriggerTriggered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceEffectCardId *uint32 `protobuf:"varint,2,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
	EventName          *int32  `protobuf:"varint,3,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	RelatedObjectId    *uint32 `protobuf:"varint,4,opt,name=related_object_id,json=relatedObjectId" json:"related_object_id,omitempty"`
}

func (x *CTraceMsg_TriggerTriggered) Reset() {
	*x = CTraceMsg_TriggerTriggered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TriggerTriggered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TriggerTriggered) ProtoMessage() {}

func (x *CTraceMsg_TriggerTriggered) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TriggerTriggered.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TriggerTriggered) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{52}
}

func (x *CTraceMsg_TriggerTriggered) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_TriggerTriggered) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

func (x *CTraceMsg_TriggerTriggered) GetEventName() int32 {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return 0
}

func (x *CTraceMsg_TriggerTriggered) GetRelatedObjectId() uint32 {
	if x != nil && x.RelatedObjectId != nil {
		return *x.RelatedObjectId
	}
	return 0
}

type CTraceMsg_EffectProcced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
}

func (x *CTraceMsg_EffectProcced) Reset() {
	*x = CTraceMsg_EffectProcced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_EffectProcced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_EffectProcced) ProtoMessage() {}

func (x *CTraceMsg_EffectProcced) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_EffectProcced.ProtoReflect.Descriptor instead.
func (*CTraceMsg_EffectProcced) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{53}
}

func (x *CTraceMsg_EffectProcced) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

type CTraceMsg_UnitTargeted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId    *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	TargetGroup       *uint32 `protobuf:"varint,2,opt,name=target_group,json=targetGroup" json:"target_group,omitempty"`
	TargetGroupNumber *uint32 `protobuf:"varint,3,opt,name=target_group_number,json=targetGroupNumber" json:"target_group_number,omitempty"`
}

func (x *CTraceMsg_UnitTargeted) Reset() {
	*x = CTraceMsg_UnitTargeted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitTargeted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitTargeted) ProtoMessage() {}

func (x *CTraceMsg_UnitTargeted) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitTargeted.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitTargeted) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{54}
}

func (x *CTraceMsg_UnitTargeted) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_UnitTargeted) GetTargetGroup() uint32 {
	if x != nil && x.TargetGroup != nil {
		return *x.TargetGroup
	}
	return 0
}

func (x *CTraceMsg_UnitTargeted) GetTargetGroupNumber() uint32 {
	if x != nil && x.TargetGroupNumber != nil {
		return *x.TargetGroupNumber
	}
	return 0
}

type CTraceMsg_PlayerPassed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	PassToCombat *bool   `protobuf:"varint,2,opt,name=pass_to_combat,json=passToCombat" json:"pass_to_combat,omitempty"`
}

func (x *CTraceMsg_PlayerPassed) Reset() {
	*x = CTraceMsg_PlayerPassed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PlayerPassed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PlayerPassed) ProtoMessage() {}

func (x *CTraceMsg_PlayerPassed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PlayerPassed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PlayerPassed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{55}
}

func (x *CTraceMsg_PlayerPassed) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CTraceMsg_PlayerPassed) GetPassToCombat() bool {
	if x != nil && x.PassToCombat != nil {
		return *x.PassToCombat
	}
	return false
}

type CTraceMsg_UnitUserTargeted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_UnitUserTargeted) Reset() {
	*x = CTraceMsg_UnitUserTargeted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitUserTargeted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitUserTargeted) ProtoMessage() {}

func (x *CTraceMsg_UnitUserTargeted) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitUserTargeted.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitUserTargeted) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{56}
}

type CTraceMsg_UnitLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turns          *uint32 `protobuf:"varint,1,opt,name=turns" json:"turns,omitempty"`
	SourceObjectId *uint32 `protobuf:"varint,2,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
}

func (x *CTraceMsg_UnitLocked) Reset() {
	*x = CTraceMsg_UnitLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitLocked) ProtoMessage() {}

func (x *CTraceMsg_UnitLocked) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitLocked.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitLocked) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{57}
}

func (x *CTraceMsg_UnitLocked) GetTurns() uint32 {
	if x != nil && x.Turns != nil {
		return *x.Turns
	}
	return 0
}

func (x *CTraceMsg_UnitLocked) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

type CTraceMsg_UnitReadiedForDeploymentUponDeath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCardId *uint32 `protobuf:"varint,1,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
}

func (x *CTraceMsg_UnitReadiedForDeploymentUponDeath) Reset() {
	*x = CTraceMsg_UnitReadiedForDeploymentUponDeath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitReadiedForDeploymentUponDeath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitReadiedForDeploymentUponDeath) ProtoMessage() {}

func (x *CTraceMsg_UnitReadiedForDeploymentUponDeath) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitReadiedForDeploymentUponDeath.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitReadiedForDeploymentUponDeath) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{58}
}

func (x *CTraceMsg_UnitReadiedForDeploymentUponDeath) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

type CTraceMsg_DamageAttempted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32    `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	DamageAttempted    *uint32    `protobuf:"varint,2,opt,name=damage_attempted,json=damageAttempted" json:"damage_attempted,omitempty"`
	DamageDealt        *uint32    `protobuf:"varint,3,opt,name=damage_dealt,json=damageDealt" json:"damage_dealt,omitempty"`
	SourceEffectCardId *uint32    `protobuf:"varint,4,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
	Card               *CMsg_Card `protobuf:"bytes,5,opt,name=card" json:"card,omitempty"`
	DamageType         *int32     `protobuf:"varint,6,opt,name=damage_type,json=damageType" json:"damage_type,omitempty"`
	RemainingHealth    *int32     `protobuf:"varint,7,opt,name=remaining_health,json=remainingHealth" json:"remaining_health,omitempty"`
	IsTower            *bool      `protobuf:"varint,8,opt,name=is_tower,json=isTower" json:"is_tower,omitempty"`
	IsCombat           *bool      `protobuf:"varint,9,opt,name=is_combat,json=isCombat" json:"is_combat,omitempty"`
	DamagePrevented    *uint32    `protobuf:"varint,10,opt,name=damage_prevented,json=damagePrevented" json:"damage_prevented,omitempty"`
}

func (x *CTraceMsg_DamageAttempted) Reset() {
	*x = CTraceMsg_DamageAttempted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_DamageAttempted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_DamageAttempted) ProtoMessage() {}

func (x *CTraceMsg_DamageAttempted) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_DamageAttempted.ProtoReflect.Descriptor instead.
func (*CTraceMsg_DamageAttempted) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{59}
}

func (x *CTraceMsg_DamageAttempted) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetDamageAttempted() uint32 {
	if x != nil && x.DamageAttempted != nil {
		return *x.DamageAttempted
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetDamageDealt() uint32 {
	if x != nil && x.DamageDealt != nil {
		return *x.DamageDealt
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetCard() *CMsg_Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CTraceMsg_DamageAttempted) GetDamageType() int32 {
	if x != nil && x.DamageType != nil {
		return *x.DamageType
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetRemainingHealth() int32 {
	if x != nil && x.RemainingHealth != nil {
		return *x.RemainingHealth
	}
	return 0
}

func (x *CTraceMsg_DamageAttempted) GetIsTower() bool {
	if x != nil && x.IsTower != nil {
		return *x.IsTower
	}
	return false
}

func (x *CTraceMsg_DamageAttempted) GetIsCombat() bool {
	if x != nil && x.IsCombat != nil {
		return *x.IsCombat
	}
	return false
}

func (x *CTraceMsg_DamageAttempted) GetDamagePrevented() uint32 {
	if x != nil && x.DamagePrevented != nil {
		return *x.DamagePrevented
	}
	return 0
}

type CTraceMsg_UnitHealed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	Heal               *uint32 `protobuf:"varint,2,opt,name=heal" json:"heal,omitempty"`
	SourceEffectCardId *uint32 `protobuf:"varint,3,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
}

func (x *CTraceMsg_UnitHealed) Reset() {
	*x = CTraceMsg_UnitHealed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitHealed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitHealed) ProtoMessage() {}

func (x *CTraceMsg_UnitHealed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitHealed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitHealed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{60}
}

func (x *CTraceMsg_UnitHealed) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_UnitHealed) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *CTraceMsg_UnitHealed) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

type CTraceMsg_UnitChangedCombatPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCombatPosition *uint32 `protobuf:"varint,1,opt,name=new_combat_position,json=newCombatPosition" json:"new_combat_position,omitempty"`
	OldCombatPosition *int32  `protobuf:"varint,2,opt,name=old_combat_position,json=oldCombatPosition" json:"old_combat_position,omitempty"`
	OwnerId           *uint32 `protobuf:"varint,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	LaneId            *uint32 `protobuf:"varint,4,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
}

func (x *CTraceMsg_UnitChangedCombatPosition) Reset() {
	*x = CTraceMsg_UnitChangedCombatPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitChangedCombatPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitChangedCombatPosition) ProtoMessage() {}

func (x *CTraceMsg_UnitChangedCombatPosition) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitChangedCombatPosition.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitChangedCombatPosition) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{61}
}

func (x *CTraceMsg_UnitChangedCombatPosition) GetNewCombatPosition() uint32 {
	if x != nil && x.NewCombatPosition != nil {
		return *x.NewCombatPosition
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatPosition) GetOldCombatPosition() int32 {
	if x != nil && x.OldCombatPosition != nil {
		return *x.OldCombatPosition
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatPosition) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatPosition) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

type CTraceMsg_UnitChangedCombatTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCombatTarget   *uint32 `protobuf:"varint,1,opt,name=new_combat_target,json=newCombatTarget" json:"new_combat_target,omitempty"`
	LaneId            *uint32 `protobuf:"varint,2,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	OldArrowDirection *uint32 `protobuf:"varint,3,opt,name=old_arrow_direction,json=oldArrowDirection" json:"old_arrow_direction,omitempty"`
	ArrowDirection    *uint32 `protobuf:"varint,4,opt,name=arrow_direction,json=arrowDirection" json:"arrow_direction,omitempty"`
	OldCombatTarget   *uint32 `protobuf:"varint,5,opt,name=old_combat_target,json=oldCombatTarget" json:"old_combat_target,omitempty"`
}

func (x *CTraceMsg_UnitChangedCombatTarget) Reset() {
	*x = CTraceMsg_UnitChangedCombatTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_UnitChangedCombatTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_UnitChangedCombatTarget) ProtoMessage() {}

func (x *CTraceMsg_UnitChangedCombatTarget) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_UnitChangedCombatTarget.ProtoReflect.Descriptor instead.
func (*CTraceMsg_UnitChangedCombatTarget) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{62}
}

func (x *CTraceMsg_UnitChangedCombatTarget) GetNewCombatTarget() uint32 {
	if x != nil && x.NewCombatTarget != nil {
		return *x.NewCombatTarget
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatTarget) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatTarget) GetOldArrowDirection() uint32 {
	if x != nil && x.OldArrowDirection != nil {
		return *x.OldArrowDirection
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatTarget) GetArrowDirection() uint32 {
	if x != nil && x.ArrowDirection != nil {
		return *x.ArrowDirection
	}
	return 0
}

func (x *CTraceMsg_UnitChangedCombatTarget) GetOldCombatTarget() uint32 {
	if x != nil && x.OldCombatTarget != nil {
		return *x.OldCombatTarget
	}
	return 0
}

type CTraceMsg_RandomlySelectedSecondaryTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_RandomlySelectedSecondaryTarget) Reset() {
	*x = CTraceMsg_RandomlySelectedSecondaryTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_RandomlySelectedSecondaryTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_RandomlySelectedSecondaryTarget) ProtoMessage() {}

func (x *CTraceMsg_RandomlySelectedSecondaryTarget) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_RandomlySelectedSecondaryTarget.ProtoReflect.Descriptor instead.
func (*CTraceMsg_RandomlySelectedSecondaryTarget) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{63}
}

type ContinuousEffectSingleProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrToken *uint32 `protobuf:"varint,1,opt,name=attr_token,json=attrToken" json:"attr_token,omitempty"`
	ValueDiff *int32  `protobuf:"varint,2,opt,name=value_diff,json=valueDiff" json:"value_diff,omitempty"`
}

func (x *ContinuousEffectSingleProperty) Reset() {
	*x = ContinuousEffectSingleProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousEffectSingleProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousEffectSingleProperty) ProtoMessage() {}

func (x *ContinuousEffectSingleProperty) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousEffectSingleProperty.ProtoReflect.Descriptor instead.
func (*ContinuousEffectSingleProperty) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{64}
}

func (x *ContinuousEffectSingleProperty) GetAttrToken() uint32 {
	if x != nil && x.AttrToken != nil {
		return *x.AttrToken
	}
	return 0
}

func (x *ContinuousEffectSingleProperty) GetValueDiff() int32 {
	if x != nil && x.ValueDiff != nil {
		return *x.ValueDiff
	}
	return 0
}

type CTraceMsg_GainedAppliedEffectEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32                           `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceCardId       *uint32                           `protobuf:"varint,2,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	EffectSourceCardId *uint32                           `protobuf:"varint,3,opt,name=effect_source_card_id,json=effectSourceCardId" json:"effect_source_card_id,omitempty"`
	Properties         []*ContinuousEffectSingleProperty `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
}

func (x *CTraceMsg_GainedAppliedEffectEx) Reset() {
	*x = CTraceMsg_GainedAppliedEffectEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_GainedAppliedEffectEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_GainedAppliedEffectEx) ProtoMessage() {}

func (x *CTraceMsg_GainedAppliedEffectEx) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_GainedAppliedEffectEx.ProtoReflect.Descriptor instead.
func (*CTraceMsg_GainedAppliedEffectEx) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{65}
}

func (x *CTraceMsg_GainedAppliedEffectEx) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_GainedAppliedEffectEx) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CTraceMsg_GainedAppliedEffectEx) GetEffectSourceCardId() uint32 {
	if x != nil && x.EffectSourceCardId != nil {
		return *x.EffectSourceCardId
	}
	return 0
}

func (x *CTraceMsg_GainedAppliedEffectEx) GetProperties() []*ContinuousEffectSingleProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CTraceMsg_LostAppliedEffectEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32                           `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceCardId       *uint32                           `protobuf:"varint,2,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	EffectSourceCardId *uint32                           `protobuf:"varint,3,opt,name=effect_source_card_id,json=effectSourceCardId" json:"effect_source_card_id,omitempty"`
	Properties         []*ContinuousEffectSingleProperty `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
}

func (x *CTraceMsg_LostAppliedEffectEx) Reset() {
	*x = CTraceMsg_LostAppliedEffectEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_LostAppliedEffectEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_LostAppliedEffectEx) ProtoMessage() {}

func (x *CTraceMsg_LostAppliedEffectEx) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_LostAppliedEffectEx.ProtoReflect.Descriptor instead.
func (*CTraceMsg_LostAppliedEffectEx) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{66}
}

func (x *CTraceMsg_LostAppliedEffectEx) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_LostAppliedEffectEx) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CTraceMsg_LostAppliedEffectEx) GetEffectSourceCardId() uint32 {
	if x != nil && x.EffectSourceCardId != nil {
		return *x.EffectSourceCardId
	}
	return 0
}

func (x *CTraceMsg_LostAppliedEffectEx) GetProperties() []*ContinuousEffectSingleProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CTraceMsg_ContinuousAppliedEffectChangedEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32                           `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceCardId       *uint32                           `protobuf:"varint,2,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	EffectSourceCardId *uint32                           `protobuf:"varint,3,opt,name=effect_source_card_id,json=effectSourceCardId" json:"effect_source_card_id,omitempty"`
	Properties         []*ContinuousEffectSingleProperty `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) Reset() {
	*x = CTraceMsg_ContinuousAppliedEffectChangedEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ContinuousAppliedEffectChangedEx) ProtoMessage() {}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ContinuousAppliedEffectChangedEx.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ContinuousAppliedEffectChangedEx) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{67}
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) GetEffectSourceCardId() uint32 {
	if x != nil && x.EffectSourceCardId != nil {
		return *x.EffectSourceCardId
	}
	return 0
}

func (x *CTraceMsg_ContinuousAppliedEffectChangedEx) GetProperties() []*ContinuousEffectSingleProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CTraceMsg_AttributeValueChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrToken  *uint32 `protobuf:"varint,1,opt,name=attr_token,json=attrToken" json:"attr_token,omitempty"`
	ValueFinal *int32  `protobuf:"varint,2,opt,name=value_final,json=valueFinal" json:"value_final,omitempty"`
}

func (x *CTraceMsg_AttributeValueChanged) Reset() {
	*x = CTraceMsg_AttributeValueChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_AttributeValueChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_AttributeValueChanged) ProtoMessage() {}

func (x *CTraceMsg_AttributeValueChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_AttributeValueChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_AttributeValueChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{68}
}

func (x *CTraceMsg_AttributeValueChanged) GetAttrToken() uint32 {
	if x != nil && x.AttrToken != nil {
		return *x.AttrToken
	}
	return 0
}

func (x *CTraceMsg_AttributeValueChanged) GetValueFinal() int32 {
	if x != nil && x.ValueFinal != nil {
		return *x.ValueFinal
	}
	return 0
}

type CTraceMsg_GoldEarned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId        *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	SourceObjectId *uint32 `protobuf:"varint,2,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	Amount         *int32  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Available      *int32  `protobuf:"varint,4,opt,name=available" json:"available,omitempty"`
}

func (x *CTraceMsg_GoldEarned) Reset() {
	*x = CTraceMsg_GoldEarned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_GoldEarned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_GoldEarned) ProtoMessage() {}

func (x *CTraceMsg_GoldEarned) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_GoldEarned.ProtoReflect.Descriptor instead.
func (*CTraceMsg_GoldEarned) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{69}
}

func (x *CTraceMsg_GoldEarned) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_GoldEarned) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_GoldEarned) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CTraceMsg_GoldEarned) GetAvailable() int32 {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return 0
}

type CTraceMsg_TowerHealed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId     *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	Heal               *uint32 `protobuf:"varint,2,opt,name=heal" json:"heal,omitempty"`
	SourceEffectCardId *uint32 `protobuf:"varint,3,opt,name=source_effect_card_id,json=sourceEffectCardId" json:"source_effect_card_id,omitempty"`
}

func (x *CTraceMsg_TowerHealed) Reset() {
	*x = CTraceMsg_TowerHealed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TowerHealed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TowerHealed) ProtoMessage() {}

func (x *CTraceMsg_TowerHealed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TowerHealed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TowerHealed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{70}
}

func (x *CTraceMsg_TowerHealed) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_TowerHealed) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *CTraceMsg_TowerHealed) GetSourceEffectCardId() uint32 {
	if x != nil && x.SourceEffectCardId != nil {
		return *x.SourceEffectCardId
	}
	return 0
}

type CTraceMsg_TargetSelected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_TargetSelected) Reset() {
	*x = CTraceMsg_TargetSelected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TargetSelected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TargetSelected) ProtoMessage() {}

func (x *CTraceMsg_TargetSelected) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TargetSelected.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TargetSelected) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{71}
}

type CTraceMsg_CardDiscarded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCardObjectId     *uint32 `protobuf:"varint,1,opt,name=source_card_object_id,json=sourceCardObjectId" json:"source_card_object_id,omitempty"`
	TemplateCardId         *uint32 `protobuf:"varint,2,opt,name=template_card_id,json=templateCardId" json:"template_card_id,omitempty"`
	CardInstanceAttributes []byte  `protobuf:"bytes,3,opt,name=card_instance_attributes,json=cardInstanceAttributes" json:"card_instance_attributes,omitempty"`
	CardCalculatedEffects  []byte  `protobuf:"bytes,4,opt,name=card_calculated_effects,json=cardCalculatedEffects" json:"card_calculated_effects,omitempty"`
}

func (x *CTraceMsg_CardDiscarded) Reset() {
	*x = CTraceMsg_CardDiscarded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardDiscarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardDiscarded) ProtoMessage() {}

func (x *CTraceMsg_CardDiscarded) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardDiscarded.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardDiscarded) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{72}
}

func (x *CTraceMsg_CardDiscarded) GetSourceCardObjectId() uint32 {
	if x != nil && x.SourceCardObjectId != nil {
		return *x.SourceCardObjectId
	}
	return 0
}

func (x *CTraceMsg_CardDiscarded) GetTemplateCardId() uint32 {
	if x != nil && x.TemplateCardId != nil {
		return *x.TemplateCardId
	}
	return 0
}

func (x *CTraceMsg_CardDiscarded) GetCardInstanceAttributes() []byte {
	if x != nil {
		return x.CardInstanceAttributes
	}
	return nil
}

func (x *CTraceMsg_CardDiscarded) GetCardCalculatedEffects() []byte {
	if x != nil {
		return x.CardCalculatedEffects
	}
	return nil
}

type CTraceMsg_CardCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId                *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	TemplateCardId         *uint32 `protobuf:"varint,2,opt,name=template_card_id,json=templateCardId" json:"template_card_id,omitempty"`
	CardInstanceAttributes []byte  `protobuf:"bytes,3,opt,name=card_instance_attributes,json=cardInstanceAttributes" json:"card_instance_attributes,omitempty"`
	CardCalculatedEffects  []byte  `protobuf:"bytes,4,opt,name=card_calculated_effects,json=cardCalculatedEffects" json:"card_calculated_effects,omitempty"`
	IsItem                 *bool   `protobuf:"varint,5,opt,name=is_item,json=isItem" json:"is_item,omitempty"`
	WasSpawnedAsDire       *bool   `protobuf:"varint,6,opt,name=was_spawned_as_dire,json=wasSpawnedAsDire" json:"was_spawned_as_dire,omitempty"`
	SpawnDuplicateIndex    *uint32 `protobuf:"varint,7,opt,name=spawn_duplicate_index,json=spawnDuplicateIndex" json:"spawn_duplicate_index,omitempty"`
	IsDuplicate            *bool   `protobuf:"varint,8,opt,name=is_duplicate,json=isDuplicate" json:"is_duplicate,omitempty"`
}

func (x *CTraceMsg_CardCreated) Reset() {
	*x = CTraceMsg_CardCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardCreated) ProtoMessage() {}

func (x *CTraceMsg_CardCreated) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardCreated.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardCreated) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{73}
}

func (x *CTraceMsg_CardCreated) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_CardCreated) GetTemplateCardId() uint32 {
	if x != nil && x.TemplateCardId != nil {
		return *x.TemplateCardId
	}
	return 0
}

func (x *CTraceMsg_CardCreated) GetCardInstanceAttributes() []byte {
	if x != nil {
		return x.CardInstanceAttributes
	}
	return nil
}

func (x *CTraceMsg_CardCreated) GetCardCalculatedEffects() []byte {
	if x != nil {
		return x.CardCalculatedEffects
	}
	return nil
}

func (x *CTraceMsg_CardCreated) GetIsItem() bool {
	if x != nil && x.IsItem != nil {
		return *x.IsItem
	}
	return false
}

func (x *CTraceMsg_CardCreated) GetWasSpawnedAsDire() bool {
	if x != nil && x.WasSpawnedAsDire != nil {
		return *x.WasSpawnedAsDire
	}
	return false
}

func (x *CTraceMsg_CardCreated) GetSpawnDuplicateIndex() uint32 {
	if x != nil && x.SpawnDuplicateIndex != nil {
		return *x.SpawnDuplicateIndex
	}
	return 0
}

func (x *CTraceMsg_CardCreated) GetIsDuplicate() bool {
	if x != nil && x.IsDuplicate != nil {
		return *x.IsDuplicate
	}
	return false
}

type CTraceMsg_CardRevealed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId                *uint32 `protobuf:"varint,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	TemplateCardId         *uint32 `protobuf:"varint,4,opt,name=template_card_id,json=templateCardId" json:"template_card_id,omitempty"`
	CardInstanceAttributes []byte  `protobuf:"bytes,5,opt,name=card_instance_attributes,json=cardInstanceAttributes" json:"card_instance_attributes,omitempty"`
	CardCalculatedEffects  []byte  `protobuf:"bytes,6,opt,name=card_calculated_effects,json=cardCalculatedEffects" json:"card_calculated_effects,omitempty"`
}

func (x *CTraceMsg_CardRevealed) Reset() {
	*x = CTraceMsg_CardRevealed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardRevealed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardRevealed) ProtoMessage() {}

func (x *CTraceMsg_CardRevealed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardRevealed.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardRevealed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{74}
}

func (x *CTraceMsg_CardRevealed) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_CardRevealed) GetTemplateCardId() uint32 {
	if x != nil && x.TemplateCardId != nil {
		return *x.TemplateCardId
	}
	return 0
}

func (x *CTraceMsg_CardRevealed) GetCardInstanceAttributes() []byte {
	if x != nil {
		return x.CardInstanceAttributes
	}
	return nil
}

func (x *CTraceMsg_CardRevealed) GetCardCalculatedEffects() []byte {
	if x != nil {
		return x.CardCalculatedEffects
	}
	return nil
}

type CTraceMsg_TowerManaRestored struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManaAmountRestored       *uint32 `protobuf:"varint,1,opt,name=mana_amount_restored,json=manaAmountRestored" json:"mana_amount_restored,omitempty"`
	ManaAmountRestoreAttempt *uint32 `protobuf:"varint,2,opt,name=mana_amount_restore_attempt,json=manaAmountRestoreAttempt" json:"mana_amount_restore_attempt,omitempty"`
}

func (x *CTraceMsg_TowerManaRestored) Reset() {
	*x = CTraceMsg_TowerManaRestored{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TowerManaRestored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TowerManaRestored) ProtoMessage() {}

func (x *CTraceMsg_TowerManaRestored) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TowerManaRestored.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TowerManaRestored) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{75}
}

func (x *CTraceMsg_TowerManaRestored) GetManaAmountRestored() uint32 {
	if x != nil && x.ManaAmountRestored != nil {
		return *x.ManaAmountRestored
	}
	return 0
}

func (x *CTraceMsg_TowerManaRestored) GetManaAmountRestoreAttempt() uint32 {
	if x != nil && x.ManaAmountRestoreAttempt != nil {
		return *x.ManaAmountRestoreAttempt
	}
	return 0
}

type CTraceMsg_InnerBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId    *uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	CardId     *uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	ScriptType *uint32 `protobuf:"varint,3,opt,name=script_type,json=scriptType" json:"script_type,omitempty"`
	ObjectId   *uint32 `protobuf:"varint,4,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
}

func (x *CTraceMsg_InnerBlock) Reset() {
	*x = CTraceMsg_InnerBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_InnerBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_InnerBlock) ProtoMessage() {}

func (x *CTraceMsg_InnerBlock) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_InnerBlock.ProtoReflect.Descriptor instead.
func (*CTraceMsg_InnerBlock) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{76}
}

func (x *CTraceMsg_InnerBlock) GetBlockId() uint32 {
	if x != nil && x.BlockId != nil {
		return *x.BlockId
	}
	return 0
}

func (x *CTraceMsg_InnerBlock) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CTraceMsg_InnerBlock) GetScriptType() uint32 {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return 0
}

func (x *CTraceMsg_InnerBlock) GetObjectId() uint32 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

type CTraceMsg_PreviewDeathResultChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPreviewDeathResult *uint32 `protobuf:"varint,1,opt,name=old_preview_death_result,json=oldPreviewDeathResult" json:"old_preview_death_result,omitempty"`
	NewPreviewDeathResult *uint32 `protobuf:"varint,2,opt,name=new_preview_death_result,json=newPreviewDeathResult" json:"new_preview_death_result,omitempty"`
	OwnerId               *uint32 `protobuf:"varint,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	IsCreep               *bool   `protobuf:"varint,4,opt,name=is_creep,json=isCreep" json:"is_creep,omitempty"`
	IsHero                *bool   `protobuf:"varint,5,opt,name=is_hero,json=isHero" json:"is_hero,omitempty"`
	IsTower               *bool   `protobuf:"varint,6,opt,name=is_tower,json=isTower" json:"is_tower,omitempty"`
}

func (x *CTraceMsg_PreviewDeathResultChanged) Reset() {
	*x = CTraceMsg_PreviewDeathResultChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PreviewDeathResultChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PreviewDeathResultChanged) ProtoMessage() {}

func (x *CTraceMsg_PreviewDeathResultChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PreviewDeathResultChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PreviewDeathResultChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{77}
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetOldPreviewDeathResult() uint32 {
	if x != nil && x.OldPreviewDeathResult != nil {
		return *x.OldPreviewDeathResult
	}
	return 0
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetNewPreviewDeathResult() uint32 {
	if x != nil && x.NewPreviewDeathResult != nil {
		return *x.NewPreviewDeathResult
	}
	return 0
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetIsCreep() bool {
	if x != nil && x.IsCreep != nil {
		return *x.IsCreep
	}
	return false
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetIsHero() bool {
	if x != nil && x.IsHero != nil {
		return *x.IsHero
	}
	return false
}

func (x *CTraceMsg_PreviewDeathResultChanged) GetIsTower() bool {
	if x != nil && x.IsTower != nil {
		return *x.IsTower
	}
	return false
}

type CTraceMsg_PreviewDamageChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPreviewDamage *uint32 `protobuf:"varint,1,opt,name=old_preview_damage,json=oldPreviewDamage" json:"old_preview_damage,omitempty"`
	NewPreviewDamage *uint32 `protobuf:"varint,2,opt,name=new_preview_damage,json=newPreviewDamage" json:"new_preview_damage,omitempty"`
	OwnerId          *uint32 `protobuf:"varint,3,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CTraceMsg_PreviewDamageChanged) Reset() {
	*x = CTraceMsg_PreviewDamageChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PreviewDamageChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PreviewDamageChanged) ProtoMessage() {}

func (x *CTraceMsg_PreviewDamageChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PreviewDamageChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PreviewDamageChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{78}
}

func (x *CTraceMsg_PreviewDamageChanged) GetOldPreviewDamage() uint32 {
	if x != nil && x.OldPreviewDamage != nil {
		return *x.OldPreviewDamage
	}
	return 0
}

func (x *CTraceMsg_PreviewDamageChanged) GetNewPreviewDamage() uint32 {
	if x != nil && x.NewPreviewDamage != nil {
		return *x.NewPreviewDamage
	}
	return 0
}

func (x *CTraceMsg_PreviewDamageChanged) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type CTraceMsg_ColorsPlayableChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId        *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	LaneId         *uint32 `protobuf:"varint,2,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	ColorFlags     *uint32 `protobuf:"varint,3,opt,name=color_flags,json=colorFlags" json:"color_flags,omitempty"`
	PrevColorFlags *uint32 `protobuf:"varint,4,opt,name=prev_color_flags,json=prevColorFlags" json:"prev_color_flags,omitempty"`
}

func (x *CTraceMsg_ColorsPlayableChanged) Reset() {
	*x = CTraceMsg_ColorsPlayableChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ColorsPlayableChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ColorsPlayableChanged) ProtoMessage() {}

func (x *CTraceMsg_ColorsPlayableChanged) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ColorsPlayableChanged.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ColorsPlayableChanged) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{79}
}

func (x *CTraceMsg_ColorsPlayableChanged) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_ColorsPlayableChanged) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CTraceMsg_ColorsPlayableChanged) GetColorFlags() uint32 {
	if x != nil && x.ColorFlags != nil {
		return *x.ColorFlags
	}
	return 0
}

func (x *CTraceMsg_ColorsPlayableChanged) GetPrevColorFlags() uint32 {
	if x != nil && x.PrevColorFlags != nil {
		return *x.PrevColorFlags
	}
	return 0
}

type CTraceMsg_ItemEquipped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroEquippedToId *uint32 `protobuf:"varint,1,opt,name=hero_equipped_to_id,json=heroEquippedToId" json:"hero_equipped_to_id,omitempty"`
}

func (x *CTraceMsg_ItemEquipped) Reset() {
	*x = CTraceMsg_ItemEquipped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ItemEquipped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ItemEquipped) ProtoMessage() {}

func (x *CTraceMsg_ItemEquipped) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ItemEquipped.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ItemEquipped) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{80}
}

func (x *CTraceMsg_ItemEquipped) GetHeroEquippedToId() uint32 {
	if x != nil && x.HeroEquippedToId != nil {
		return *x.HeroEquippedToId
	}
	return 0
}

type CTraceMsg_StateBasedEffectsUpdateStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_StateBasedEffectsUpdateStart) Reset() {
	*x = CTraceMsg_StateBasedEffectsUpdateStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_StateBasedEffectsUpdateStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_StateBasedEffectsUpdateStart) ProtoMessage() {}

func (x *CTraceMsg_StateBasedEffectsUpdateStart) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_StateBasedEffectsUpdateStart.ProtoReflect.Descriptor instead.
func (*CTraceMsg_StateBasedEffectsUpdateStart) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{81}
}

type CTraceMsg_StateBasedEffectsUpdateEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_StateBasedEffectsUpdateEnd) Reset() {
	*x = CTraceMsg_StateBasedEffectsUpdateEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_StateBasedEffectsUpdateEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_StateBasedEffectsUpdateEnd) ProtoMessage() {}

func (x *CTraceMsg_StateBasedEffectsUpdateEnd) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_StateBasedEffectsUpdateEnd.ProtoReflect.Descriptor instead.
func (*CTraceMsg_StateBasedEffectsUpdateEnd) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{82}
}

type CTraceMsg_TowerManaSpent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	ManaSpent      *uint32 `protobuf:"varint,2,opt,name=mana_spent,json=manaSpent" json:"mana_spent,omitempty"`
}

func (x *CTraceMsg_TowerManaSpent) Reset() {
	*x = CTraceMsg_TowerManaSpent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_TowerManaSpent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_TowerManaSpent) ProtoMessage() {}

func (x *CTraceMsg_TowerManaSpent) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_TowerManaSpent.ProtoReflect.Descriptor instead.
func (*CTraceMsg_TowerManaSpent) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{83}
}

func (x *CTraceMsg_TowerManaSpent) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_TowerManaSpent) GetManaSpent() uint32 {
	if x != nil && x.ManaSpent != nil {
		return *x.ManaSpent
	}
	return 0
}

type CTraceMsg_CardEffectCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceObjectId *uint32 `protobuf:"varint,1,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	Value          *int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CTraceMsg_CardEffectCalculation) Reset() {
	*x = CTraceMsg_CardEffectCalculation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_CardEffectCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_CardEffectCalculation) ProtoMessage() {}

func (x *CTraceMsg_CardEffectCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_CardEffectCalculation.ProtoReflect.Descriptor instead.
func (*CTraceMsg_CardEffectCalculation) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{84}
}

func (x *CTraceMsg_CardEffectCalculation) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CTraceMsg_CardEffectCalculation) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CTraceMsg_DeathSyncPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CTraceMsg_DeathSyncPoint) Reset() {
	*x = CTraceMsg_DeathSyncPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_DeathSyncPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_DeathSyncPoint) ProtoMessage() {}

func (x *CTraceMsg_DeathSyncPoint) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_DeathSyncPoint.ProtoReflect.Descriptor instead.
func (*CTraceMsg_DeathSyncPoint) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{85}
}

type CTraceMsg_ScriptBlockBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptType *uint32 `protobuf:"varint,1,opt,name=script_type,json=scriptType" json:"script_type,omitempty"`
	CardId     *uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	ObjectId   *uint32 `protobuf:"varint,3,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
}

func (x *CTraceMsg_ScriptBlockBegin) Reset() {
	*x = CTraceMsg_ScriptBlockBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ScriptBlockBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ScriptBlockBegin) ProtoMessage() {}

func (x *CTraceMsg_ScriptBlockBegin) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ScriptBlockBegin.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ScriptBlockBegin) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{86}
}

func (x *CTraceMsg_ScriptBlockBegin) GetScriptType() uint32 {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return 0
}

func (x *CTraceMsg_ScriptBlockBegin) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CTraceMsg_ScriptBlockBegin) GetObjectId() uint32 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

type CTraceMsg_ScriptBlockEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptType *uint32 `protobuf:"varint,1,opt,name=script_type,json=scriptType" json:"script_type,omitempty"`
}

func (x *CTraceMsg_ScriptBlockEnd) Reset() {
	*x = CTraceMsg_ScriptBlockEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_ScriptBlockEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_ScriptBlockEnd) ProtoMessage() {}

func (x *CTraceMsg_ScriptBlockEnd) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_ScriptBlockEnd.ProtoReflect.Descriptor instead.
func (*CTraceMsg_ScriptBlockEnd) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{87}
}

func (x *CTraceMsg_ScriptBlockEnd) GetScriptType() uint32 {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return 0
}

type CTraceMsg_PrepareHeroForLaneAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptType *uint32 `protobuf:"varint,1,opt,name=script_type,json=scriptType" json:"script_type,omitempty"`
	CardId     *uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
}

func (x *CTraceMsg_PrepareHeroForLaneAssignment) Reset() {
	*x = CTraceMsg_PrepareHeroForLaneAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PrepareHeroForLaneAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PrepareHeroForLaneAssignment) ProtoMessage() {}

func (x *CTraceMsg_PrepareHeroForLaneAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PrepareHeroForLaneAssignment.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PrepareHeroForLaneAssignment) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{88}
}

func (x *CTraceMsg_PrepareHeroForLaneAssignment) GetScriptType() uint32 {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return 0
}

func (x *CTraceMsg_PrepareHeroForLaneAssignment) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

type CTraceMsg_HeroVS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroIds []uint32 `protobuf:"varint,1,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
}

func (x *CTraceMsg_HeroVS) Reset() {
	*x = CTraceMsg_HeroVS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_HeroVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_HeroVS) ProtoMessage() {}

func (x *CTraceMsg_HeroVS) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_HeroVS.ProtoReflect.Descriptor instead.
func (*CTraceMsg_HeroVS) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{89}
}

func (x *CTraceMsg_HeroVS) GetHeroIds() []uint32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type CTraceMsg_PlayerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	HasWon  *bool   `protobuf:"varint,2,opt,name=has_won,json=hasWon" json:"has_won,omitempty"`
}

func (x *CTraceMsg_PlayerResult) Reset() {
	*x = CTraceMsg_PlayerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTraceMsg_PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTraceMsg_PlayerResult) ProtoMessage() {}

func (x *CTraceMsg_PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTraceMsg_PlayerResult.ProtoReflect.Descriptor instead.
func (*CTraceMsg_PlayerResult) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{90}
}

func (x *CTraceMsg_PlayerResult) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CTraceMsg_PlayerResult) GetHasWon() bool {
	if x != nil && x.HasWon != nil {
		return *x.HasWon
	}
	return false
}

type CMsgGameServerToClientInitialGameState_CMsgDeckList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	DeckData []byte  `protobuf:"bytes,2,opt,name=deck_data,json=deckData" json:"deck_data,omitempty"`
}

func (x *CMsgGameServerToClientInitialGameState_CMsgDeckList) Reset() {
	*x = CMsgGameServerToClientInitialGameState_CMsgDeckList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientInitialGameState_CMsgDeckList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientInitialGameState_CMsgDeckList) ProtoMessage() {}

func (x *CMsgGameServerToClientInitialGameState_CMsgDeckList) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientInitialGameState_CMsgDeckList.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientInitialGameState_CMsgDeckList) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgGameServerToClientInitialGameState_CMsgDeckList) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgDeckList) GetDeckData() []byte {
	if x != nil {
		return x.DeckData
	}
	return nil
}

type CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *uint32        `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	TargetObjectId    *uint32        `protobuf:"varint,2,opt,name=target_object_id,json=targetObjectId" json:"target_object_id,omitempty"`
	TargetCardId      *uint32        `protobuf:"varint,3,opt,name=target_card_id,json=targetCardId" json:"target_card_id,omitempty"`
	Value             *uint32        `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	SecondaryValue    *uint32        `protobuf:"varint,5,opt,name=secondary_value,json=secondaryValue" json:"secondary_value,omitempty"`
	SubType           *uint32        `protobuf:"varint,6,opt,name=sub_type,json=subType" json:"sub_type,omitempty"`
	SourceObjectId    *uint32        `protobuf:"varint,7,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceCardId      *uint32        `protobuf:"varint,8,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	OwnerId           *uint32        `protobuf:"varint,9,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	LaneId            *uint32        `protobuf:"varint,10,opt,name=lane_id,json=laneId" json:"lane_id,omitempty"`
	RemainingHealth   *uint32        `protobuf:"varint,11,opt,name=remaining_health,json=remainingHealth" json:"remaining_health,omitempty"`
	OldArrowDirection *uint32        `protobuf:"varint,12,opt,name=old_arrow_direction,json=oldArrowDirection" json:"old_arrow_direction,omitempty"`
	Slot              *EShoppingSlot `protobuf:"varint,14,opt,name=slot,enum=artifact.EShoppingSlot,def=0" json:"slot,omitempty"`
}

// Default values for CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry fields.
const (
	Default_CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry_Slot = EShoppingSlot_eInvalidSlot
)

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) Reset() {
	*x = CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) ProtoMessage() {}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetTargetObjectId() uint32 {
	if x != nil && x.TargetObjectId != nil {
		return *x.TargetObjectId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetTargetCardId() uint32 {
	if x != nil && x.TargetCardId != nil {
		return *x.TargetCardId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetSecondaryValue() uint32 {
	if x != nil && x.SecondaryValue != nil {
		return *x.SecondaryValue
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetSubType() uint32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetLaneId() uint32 {
	if x != nil && x.LaneId != nil {
		return *x.LaneId
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetRemainingHealth() uint32 {
	if x != nil && x.RemainingHealth != nil {
		return *x.RemainingHealth
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetOldArrowDirection() uint32 {
	if x != nil && x.OldArrowDirection != nil {
		return *x.OldArrowDirection
	}
	return 0
}

func (x *CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry) GetSlot() EShoppingSlot {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return Default_CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry_Slot
}

type CMsgGameServerToClientConnectionStatus_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId                  *uint32                                         `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Status                    *CMsgGameServerToClientConnectionStatus_EStatus `protobuf:"varint,2,opt,name=status,enum=artifact.CMsgGameServerToClientConnectionStatus_EStatus,def=1" json:"status,omitempty"`
	InactivityTicking         *bool                                           `protobuf:"varint,3,opt,name=inactivity_ticking,json=inactivityTicking" json:"inactivity_ticking,omitempty"`
	InactivityMsRemaining     *uint32                                         `protobuf:"varint,4,opt,name=inactivity_ms_remaining,json=inactivityMsRemaining" json:"inactivity_ms_remaining,omitempty"`
	InactivityAnimMsRemaining *uint32                                         `protobuf:"varint,5,opt,name=inactivity_anim_ms_remaining,json=inactivityAnimMsRemaining" json:"inactivity_anim_ms_remaining,omitempty"`
}

// Default values for CMsgGameServerToClientConnectionStatus_Player fields.
const (
	Default_CMsgGameServerToClientConnectionStatus_Player_Status = CMsgGameServerToClientConnectionStatus_k_EConnected
)

func (x *CMsgGameServerToClientConnectionStatus_Player) Reset() {
	*x = CMsgGameServerToClientConnectionStatus_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerToClientConnectionStatus_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerToClientConnectionStatus_Player) ProtoMessage() {}

func (x *CMsgGameServerToClientConnectionStatus_Player) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerToClientConnectionStatus_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerToClientConnectionStatus_Player) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgGameServerToClientConnectionStatus_Player) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgGameServerToClientConnectionStatus_Player) GetStatus() CMsgGameServerToClientConnectionStatus_EStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgGameServerToClientConnectionStatus_Player_Status
}

func (x *CMsgGameServerToClientConnectionStatus_Player) GetInactivityTicking() bool {
	if x != nil && x.InactivityTicking != nil {
		return *x.InactivityTicking
	}
	return false
}

func (x *CMsgGameServerToClientConnectionStatus_Player) GetInactivityMsRemaining() uint32 {
	if x != nil && x.InactivityMsRemaining != nil {
		return *x.InactivityMsRemaining
	}
	return 0
}

func (x *CMsgGameServerToClientConnectionStatus_Player) GetInactivityAnimMsRemaining() uint32 {
	if x != nil && x.InactivityAnimMsRemaining != nil {
		return *x.InactivityAnimMsRemaining
	}
	return 0
}

type CMsgPostMatchStats_CStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId *uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	StatId *uint32 `protobuf:"varint,2,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	Value  *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgPostMatchStats_CStat) Reset() {
	*x = CMsgPostMatchStats_CStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPostMatchStats_CStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPostMatchStats_CStat) ProtoMessage() {}

func (x *CMsgPostMatchStats_CStat) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPostMatchStats_CStat.ProtoReflect.Descriptor instead.
func (*CMsgPostMatchStats_CStat) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgPostMatchStats_CStat) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CMsgPostMatchStats_CStat) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgPostMatchStats_CStat) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgPostMatchStats_CLane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *uint32                     `protobuf:"varint,1,opt,name=player" json:"player,omitempty"`
	Turn   *uint32                     `protobuf:"varint,2,opt,name=turn" json:"turn,omitempty"`
	Lane   *uint32                     `protobuf:"varint,3,opt,name=lane" json:"lane,omitempty"`
	Stats  []*CMsgPostMatchStats_CStat `protobuf:"bytes,4,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgPostMatchStats_CLane) Reset() {
	*x = CMsgPostMatchStats_CLane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPostMatchStats_CLane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPostMatchStats_CLane) ProtoMessage() {}

func (x *CMsgPostMatchStats_CLane) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPostMatchStats_CLane.ProtoReflect.Descriptor instead.
func (*CMsgPostMatchStats_CLane) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{19, 1}
}

func (x *CMsgPostMatchStats_CLane) GetPlayer() uint32 {
	if x != nil && x.Player != nil {
		return *x.Player
	}
	return 0
}

func (x *CMsgPostMatchStats_CLane) GetTurn() uint32 {
	if x != nil && x.Turn != nil {
		return *x.Turn
	}
	return 0
}

func (x *CMsgPostMatchStats_CLane) GetLane() uint32 {
	if x != nil && x.Lane != nil {
		return *x.Lane
	}
	return 0
}

func (x *CMsgPostMatchStats_CLane) GetStats() []*CMsgPostMatchStats_CStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgSerializeQuestProgress_LocalUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId *uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (x *CMsgSerializeQuestProgress_LocalUnlock) Reset() {
	*x = CMsgSerializeQuestProgress_LocalUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gamemessages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSerializeQuestProgress_LocalUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSerializeQuestProgress_LocalUnlock) ProtoMessage() {}

func (x *CMsgSerializeQuestProgress_LocalUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gamemessages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSerializeQuestProgress_LocalUnlock.ProtoReflect.Descriptor instead.
func (*CMsgSerializeQuestProgress_LocalUnlock) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gamemessages_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CMsgSerializeQuestProgress_LocalUnlock) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

var File_artifact_dcg_gamemessages_proto protoreflect.FileDescriptor

var file_artifact_dcg_gamemessages_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x1a, 0x24, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x36, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x22,
	0xa7, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x06, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x46,
	0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xec, 0x03, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6c,
	0x64, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x3a, 0x0c, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x0b, 0x45, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x61, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x45, 0x6e, 0x64,
	0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4c, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b,
	0x22, 0x8c, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x22,
	0xd2, 0x02, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x6f,
	0x71, 0x75, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x09,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x49,
	0x6d, 0x70, 0x10, 0x03, 0x22, 0x59, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x67, 0x63, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x22,
	0x63, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x42, 0x0a, 0x10, 0x67, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x67, 0x63, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x1f, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x22, 0x38, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xad, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0c, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x69, 0x6d, 0x4d, 0x73, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x30, 0x0a, 0x07, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x7c, 0x0a, 0x14, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xa3, 0x02, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x43, 0x4c, 0x61, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x1a, 0x4f, 0x0a, 0x05, 0x43, 0x53, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x81, 0x01, 0x0a, 0x05, 0x43, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x55, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x26, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x09,
	0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x1c,
	0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x5e, 0x0a, 0x18,
	0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x1e,
	0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x6f, 0x74, 0x3a, 0x0c, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x1f, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53,
	0x68, 0x6f, 0x70, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22,
	0x30, 0x0a, 0x13, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x68, 0x6f,
	0x70, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x3f, 0x0a, 0x1e, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x1c, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x21, 0x43, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x12,
	0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x1b, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4c,
	0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73,
	0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x75, 0x72,
	0x76, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x15, 0x43,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x65, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x4b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x72, 0x65, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48,
	0x65, 0x72, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x22, 0x3b, 0x0a, 0x1e, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6d,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x22, 0x0a,
	0x20, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x22, 0x60, 0x0a, 0x19, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x19, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x48, 0x61, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x43,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1e, 0x0a,
	0x1c, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0x21, 0x0a,
	0x1f, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0x23, 0x0a, 0x21, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x63, 0x6b, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x72,
	0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x13, 0x43, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x2e, 0x45, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x70, 0x0a, 0x10, 0x45, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x44, 0x65, 0x63, 0x6b,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72, 0x61,
	0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x72,
	0x61, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x10, 0x03, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x43, 0x0a, 0x17, 0x43,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x65, 0x6d, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x17, 0x43, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x5f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x63,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a,
	0x16, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x16, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x56, 0x0a, 0x14, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x2b, 0x43, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6f,
	0x6e, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x9e, 0x03, 0x0a,
	0x19, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x14, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x23, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x6c, 0x64,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x5e, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x22, 0xee, 0x01, 0x0a, 0x1f, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x47,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x45, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f,
	0x4c, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x45, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0xf9, 0x01, 0x0a, 0x2a, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1f,
	0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22,
	0x91, 0x01, 0x0a, 0x14, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x6f,
	0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x1a,
	0x0a, 0x18, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x43,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x15, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x2d, 0x0a, 0x13, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x61,
	0x73, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x73, 0x44, 0x69, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x63, 0x61, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x6e,
	0x61, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6d, 0x61, 0x6e, 0x61, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x43, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x23, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f,
	0x6c, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63,
	0x72, 0x65, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x72,
	0x65, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x65, 0x72,
	0x6f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x26, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x22,
	0x63, 0x0a, 0x18, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x1f, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x73, 0x67,
	0x5f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x18, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x26, 0x43, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x46, 0x6f,
	0x72, 0x4c, 0x61, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x10, 0x43, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x56, 0x53, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x57, 0x6f, 0x6e, 0x2a, 0x80, 0x05, 0x0a, 0x10, 0x45, 0x44, 0x43, 0x47, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66,
	0x66, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x08, 0x12,
	0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x10, 0x09, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x0c, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x10, 0x0f,
	0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xe8, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x6f, 0x71, 0x75, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xe9, 0x07, 0x2a, 0xa5, 0x06, 0x0a, 0x10, 0x45, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x42, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x42,
	0x41, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44,
	0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x5f, 0x4c, 0x41, 0x4e,
	0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x44, 0x45,
	0x41, 0x54, 0x48, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4c, 0x4f, 0x50, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x42, 0x41, 0x54, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x4c, 0x4c, 0x43, 0x41, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x50, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52,
	0x45, 0x45, 0x50, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x18,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x48, 0x4f, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x1b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x56, 0x53, 0x10, 0x1e, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x41, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x20, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10, 0x21, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x22, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10,
	0x23, 0x2a, 0x58, 0x0a, 0x0d, 0x45, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x53,
	0x68, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x03, 0x2a, 0xa3, 0x03, 0x0a, 0x14,
	0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xe9, 0x07,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51,
	0x75, 0x69, 0x74, 0x41, 0x70, 0x70, 0x10, 0xea, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0xeb,
	0x07, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x62, 0x79, 0x65, 0x10, 0xec, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x42, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xd1, 0x0f, 0x12, 0x35,
	0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x6c, 0x79, 0x10, 0xd2, 0x0f, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xd3,
	0x0f, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd4, 0x0f, 0x12, 0x33, 0x0a, 0x2e,
	0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x55, 0x6e,
	0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xd5,
	0x0f, 0x42, 0x3a, 0x48, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x80, 0x01, 0x00,
}

var (
	file_artifact_dcg_gamemessages_proto_rawDescOnce sync.Once
	file_artifact_dcg_gamemessages_proto_rawDescData = file_artifact_dcg_gamemessages_proto_rawDesc
)

func file_artifact_dcg_gamemessages_proto_rawDescGZIP() []byte {
	file_artifact_dcg_gamemessages_proto_rawDescOnce.Do(func() {
		file_artifact_dcg_gamemessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_dcg_gamemessages_proto_rawDescData)
	})
	return file_artifact_dcg_gamemessages_proto_rawDescData
}

var file_artifact_dcg_gamemessages_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_artifact_dcg_gamemessages_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_artifact_dcg_gamemessages_proto_goTypes = []interface{}{
	(EDCGGameMessages)(0),                                             // 0: artifact.EDCGGameMessages
	(EScriptBlockType)(0),                                             // 1: artifact.EScriptBlockType
	(EShoppingSlot)(0),                                                // 2: artifact.EShoppingSlot
	(EDCGDisconnectReason)(0),                                         // 3: artifact.EDCGDisconnectReason
	(CMsgGameReplayActionMarker_EActionType)(0),                       // 4: artifact.CMsgGameReplayActionMarker.EActionType
	(CMsgVenchatoquistEvent_EChatSource)(0),                           // 5: artifact.CMsgVenchatoquistEvent.EChatSource
	(CMsgGameServerToClientConnectionStatus_EStatus)(0),               // 6: artifact.CMsgGameServerToClientConnectionStatus.EStatus
	(CTraceMsg_CardDrawn_ECardDrawnSource)(0),                         // 7: artifact.CTraceMsg_CardDrawn.ECardDrawnSource
	(*CMsgClientServerHeader)(nil),                                    // 8: artifact.CMsgClientServerHeader
	(*CMsgGameBoardGameCommand)(nil),                                  // 9: artifact.CMsgGameBoardGameCommand
	(*CMsgGameBoardGameState)(nil),                                    // 10: artifact.CMsgGameBoardGameState
	(*CMsgGameBoardGameButton)(nil),                                   // 11: artifact.CMsgGameBoardGameButton
	(*CMsgGamePlayerRequestHandoff)(nil),                              // 12: artifact.CMsgGamePlayerRequestHandoff
	(*CMsgGameHandoff)(nil),                                           // 13: artifact.CMsgGameHandoff
	(*CMsgGameServerToClientInitialGameState)(nil),                    // 14: artifact.CMsgGameServerToClientInitialGameState
	(*CMsgGameReplayActionMarker)(nil),                                // 15: artifact.CMsgGameReplayActionMarker
	(*CMsgTutorialEvent)(nil),                                         // 16: artifact.CMsgTutorialEvent
	(*CMsgVenchatoquistEvent)(nil),                                    // 17: artifact.CMsgVenchatoquistEvent
	(*CMsgGameClientToServerChatMsg)(nil),                             // 18: artifact.CMsgGameClientToServerChatMsg
	(*CMsgGameServerToClientChatMsg)(nil),                             // 19: artifact.CMsgGameServerToClientChatMsg
	(*CMsgGameServerToClientGameCompleted)(nil),                       // 20: artifact.CMsgGameServerToClientGameCompleted
	(*CMsgGameClientToServerBoardGameStateAck)(nil),                   // 21: artifact.CMsgGameClientToServerBoardGameStateAck
	(*CMsgGameServerToClientGoodbye)(nil),                             // 22: artifact.CMsgGameServerToClientGoodbye
	(*CMsgGameClientToServerPauseTimer)(nil),                          // 23: artifact.CMsgGameClientToServerPauseTimer
	(*CMsgGameServerToClientConnectionStatus)(nil),                    // 24: artifact.CMsgGameServerToClientConnectionStatus
	(*CMsgGameClientToServerGiveOpponentTime)(nil),                    // 25: artifact.CMsgGameClientToServerGiveOpponentTime
	(*CClientReconnectInfo)(nil),                                      // 26: artifact.CClientReconnectInfo
	(*CMsgPostMatchStats)(nil),                                        // 27: artifact.CMsgPostMatchStats
	(*CMsgPostMatchCardAchievements)(nil),                             // 28: artifact.CMsgPostMatchCardAchievements
	(*CMsgSerializeQuestProgress)(nil),                                // 29: artifact.CMsgSerializeQuestProgress
	(*CMsg_Card)(nil),                                                 // 30: artifact.CMsg_Card
	(*CTraceMsg_PathingCardChanged)(nil),                              // 31: artifact.CTraceMsg_PathingCardChanged
	(*CTraceMsg_CardBought)(nil),                                      // 32: artifact.CTraceMsg_CardBought
	(*CTraceMsg_ChargesChanged)(nil),                                  // 33: artifact.CTraceMsg_ChargesChanged
	(*CTraceMsg_ShoppingCardAppeared)(nil),                            // 34: artifact.CTraceMsg_ShoppingCardAppeared
	(*CTraceMsg_ShopAction)(nil),                                      // 35: artifact.CTraceMsg_ShopAction
	(*CTraceMsg_ShopHoldItemAvailable)(nil),                           // 36: artifact.CTraceMsg_ShopHoldItemAvailable
	(*CTraceMsg_ShopCardRemoved)(nil),                                 // 37: artifact.CTraceMsg_ShopCardRemoved
	(*CTraceMsg_ShopEnded)(nil),                                       // 38: artifact.CTraceMsg_ShopEnded
	(*CTraceMsg_ShoppingCardShuffled)(nil),                            // 39: artifact.CTraceMsg_ShoppingCardShuffled
	(*CTraceMsg_UnitEnteringCombat)(nil),                              // 40: artifact.CTraceMsg_UnitEnteringCombat
	(*CTraceMsg_ImprovementEnteringPlay)(nil),                         // 41: artifact.CTraceMsg_ImprovementEnteringPlay
	(*CTraceMsg_UnitLeavingCombat)(nil),                               // 42: artifact.CTraceMsg_UnitLeavingCombat
	(*CTraceMsg_DeathShieldUsed)(nil),                                 // 43: artifact.CTraceMsg_DeathShieldUsed
	(*CTraceMsg_CardSurvivedDeath)(nil),                               // 44: artifact.CTraceMsg_CardSurvivedDeath
	(*CTraceMsg_TowerKilled)(nil),                                     // 45: artifact.CTraceMsg_TowerKilled
	(*CTraceMsg_CardKilled)(nil),                                      // 46: artifact.CTraceMsg_CardKilled
	(*CTraceMsg_ImprovementDestroyed)(nil),                            // 47: artifact.CTraceMsg_ImprovementDestroyed
	(*CTraceMsg_CardReturnedToFountain)(nil),                          // 48: artifact.CTraceMsg_CardReturnedToFountain
	(*CTraceMsg_CardMovedToDeck)(nil),                                 // 49: artifact.CTraceMsg_CardMovedToDeck
	(*CTraceMsg_CardMovedToHand)(nil),                                 // 50: artifact.CTraceMsg_CardMovedToHand
	(*CTraceMsg_CardMovedToDeployment)(nil),                           // 51: artifact.CTraceMsg_CardMovedToDeployment
	(*CTraceMsg_CardMovedToEffects)(nil),                              // 52: artifact.CTraceMsg_CardMovedToEffects
	(*CTraceMsg_CardMovedToSpellStack)(nil),                           // 53: artifact.CTraceMsg_CardMovedToSpellStack
	(*CTraceMsg_CardReturnedToGuardDeck)(nil),                         // 54: artifact.CTraceMsg_CardReturnedToGuardDeck
	(*CTraceMsg_CardMovedToGraveyard)(nil),                            // 55: artifact.CTraceMsg_CardMovedToGraveyard
	(*CTraceMsg_CardDuplicated)(nil),                                  // 56: artifact.CTraceMsg_CardDuplicated
	(*CTraceMsg_CardDrawn)(nil),                                       // 57: artifact.CTraceMsg_CardDrawn
	(*CTraceMsg_CardPlayed)(nil),                                      // 58: artifact.CTraceMsg_CardPlayed
	(*CTraceMsg_UnitCondemned)(nil),                                   // 59: artifact.CTraceMsg_UnitCondemned
	(*CTraceMsg_TriggerTriggered)(nil),                                // 60: artifact.CTraceMsg_TriggerTriggered
	(*CTraceMsg_EffectProcced)(nil),                                   // 61: artifact.CTraceMsg_EffectProcced
	(*CTraceMsg_UnitTargeted)(nil),                                    // 62: artifact.CTraceMsg_UnitTargeted
	(*CTraceMsg_PlayerPassed)(nil),                                    // 63: artifact.CTraceMsg_PlayerPassed
	(*CTraceMsg_UnitUserTargeted)(nil),                                // 64: artifact.CTraceMsg_UnitUserTargeted
	(*CTraceMsg_UnitLocked)(nil),                                      // 65: artifact.CTraceMsg_UnitLocked
	(*CTraceMsg_UnitReadiedForDeploymentUponDeath)(nil),               // 66: artifact.CTraceMsg_UnitReadiedForDeploymentUponDeath
	(*CTraceMsg_DamageAttempted)(nil),                                 // 67: artifact.CTraceMsg_DamageAttempted
	(*CTraceMsg_UnitHealed)(nil),                                      // 68: artifact.CTraceMsg_UnitHealed
	(*CTraceMsg_UnitChangedCombatPosition)(nil),                       // 69: artifact.CTraceMsg_UnitChangedCombatPosition
	(*CTraceMsg_UnitChangedCombatTarget)(nil),                         // 70: artifact.CTraceMsg_UnitChangedCombatTarget
	(*CTraceMsg_RandomlySelectedSecondaryTarget)(nil),                 // 71: artifact.CTraceMsg_RandomlySelectedSecondaryTarget
	(*ContinuousEffectSingleProperty)(nil),                            // 72: artifact.ContinuousEffectSingleProperty
	(*CTraceMsg_GainedAppliedEffectEx)(nil),                           // 73: artifact.CTraceMsg_GainedAppliedEffectEx
	(*CTraceMsg_LostAppliedEffectEx)(nil),                             // 74: artifact.CTraceMsg_LostAppliedEffectEx
	(*CTraceMsg_ContinuousAppliedEffectChangedEx)(nil),                // 75: artifact.CTraceMsg_ContinuousAppliedEffectChangedEx
	(*CTraceMsg_AttributeValueChanged)(nil),                           // 76: artifact.CTraceMsg_AttributeValueChanged
	(*CTraceMsg_GoldEarned)(nil),                                      // 77: artifact.CTraceMsg_GoldEarned
	(*CTraceMsg_TowerHealed)(nil),                                     // 78: artifact.CTraceMsg_TowerHealed
	(*CTraceMsg_TargetSelected)(nil),                                  // 79: artifact.CTraceMsg_TargetSelected
	(*CTraceMsg_CardDiscarded)(nil),                                   // 80: artifact.CTraceMsg_CardDiscarded
	(*CTraceMsg_CardCreated)(nil),                                     // 81: artifact.CTraceMsg_CardCreated
	(*CTraceMsg_CardRevealed)(nil),                                    // 82: artifact.CTraceMsg_CardRevealed
	(*CTraceMsg_TowerManaRestored)(nil),                               // 83: artifact.CTraceMsg_TowerManaRestored
	(*CTraceMsg_InnerBlock)(nil),                                      // 84: artifact.CTraceMsg_InnerBlock
	(*CTraceMsg_PreviewDeathResultChanged)(nil),                       // 85: artifact.CTraceMsg_PreviewDeathResultChanged
	(*CTraceMsg_PreviewDamageChanged)(nil),                            // 86: artifact.CTraceMsg_PreviewDamageChanged
	(*CTraceMsg_ColorsPlayableChanged)(nil),                           // 87: artifact.CTraceMsg_ColorsPlayableChanged
	(*CTraceMsg_ItemEquipped)(nil),                                    // 88: artifact.CTraceMsg_ItemEquipped
	(*CTraceMsg_StateBasedEffectsUpdateStart)(nil),                    // 89: artifact.CTraceMsg_StateBasedEffectsUpdateStart
	(*CTraceMsg_StateBasedEffectsUpdateEnd)(nil),                      // 90: artifact.CTraceMsg_StateBasedEffectsUpdateEnd
	(*CTraceMsg_TowerManaSpent)(nil),                                  // 91: artifact.CTraceMsg_TowerManaSpent
	(*CTraceMsg_CardEffectCalculation)(nil),                           // 92: artifact.CTraceMsg_CardEffectCalculation
	(*CTraceMsg_DeathSyncPoint)(nil),                                  // 93: artifact.CTraceMsg_DeathSyncPoint
	(*CTraceMsg_ScriptBlockBegin)(nil),                                // 94: artifact.CTraceMsg_ScriptBlockBegin
	(*CTraceMsg_ScriptBlockEnd)(nil),                                  // 95: artifact.CTraceMsg_ScriptBlockEnd
	(*CTraceMsg_PrepareHeroForLaneAssignment)(nil),                    // 96: artifact.CTraceMsg_PrepareHeroForLaneAssignment
	(*CTraceMsg_HeroVS)(nil),                                          // 97: artifact.CTraceMsg_HeroVS
	(*CTraceMsg_PlayerResult)(nil),                                    // 98: artifact.CTraceMsg_PlayerResult
	(*CMsgGameServerToClientInitialGameState_CMsgDeckList)(nil),       // 99: artifact.CMsgGameServerToClientInitialGameState.CMsgDeckList
	(*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry)(nil), // 100: artifact.CMsgGameServerToClientInitialGameState.CMsgCombatLogEntry
	(*CMsgGameServerToClientConnectionStatus_Player)(nil),             // 101: artifact.CMsgGameServerToClientConnectionStatus.Player
	(*CMsgPostMatchStats_CStat)(nil),                                  // 102: artifact.CMsgPostMatchStats.CStat
	(*CMsgPostMatchStats_CLane)(nil),                                  // 103: artifact.CMsgPostMatchStats.CLane
	(*CMsgSerializeQuestProgress_LocalUnlock)(nil),                    // 104: artifact.CMsgSerializeQuestProgress.LocalUnlock
	(EDCGMatchMode)(0),                                                // 105: artifact.EDCGMatchMode
	(*CExtraMsgBlock)(nil),                                            // 106: artifact.CExtraMsgBlock
}
var file_artifact_dcg_gamemessages_proto_depIdxs = []int32{
	0,   // 0: artifact.CMsgClientServerHeader.msg_id:type_name -> artifact.EDCGGameMessages
	105, // 1: artifact.CMsgGameHandoff.game_mode:type_name -> artifact.EDCGMatchMode
	99,  // 2: artifact.CMsgGameServerToClientInitialGameState.decklist:type_name -> artifact.CMsgGameServerToClientInitialGameState.CMsgDeckList
	100, // 3: artifact.CMsgGameServerToClientInitialGameState.combat_log_entry:type_name -> artifact.CMsgGameServerToClientInitialGameState.CMsgCombatLogEntry
	4,   // 4: artifact.CMsgGameReplayActionMarker.action:type_name -> artifact.CMsgGameReplayActionMarker.EActionType
	5,   // 5: artifact.CMsgVenchatoquistEvent.chat_source:type_name -> artifact.CMsgVenchatoquistEvent.EChatSource
	106, // 6: artifact.CMsgGameClientToServerChatMsg.gc_chat_msg:type_name -> artifact.CExtraMsgBlock
	106, // 7: artifact.CMsgGameServerToClientChatMsg.gc_chat_response:type_name -> artifact.CExtraMsgBlock
	101, // 8: artifact.CMsgGameServerToClientConnectionStatus.players:type_name -> artifact.CMsgGameServerToClientConnectionStatus.Player
	103, // 9: artifact.CMsgPostMatchStats.lanes:type_name -> artifact.CMsgPostMatchStats.CLane
	104, // 10: artifact.CMsgSerializeQuestProgress.local_unlocks:type_name -> artifact.CMsgSerializeQuestProgress.LocalUnlock
	2,   // 11: artifact.CTraceMsg_ShoppingCardAppeared.slot:type_name -> artifact.EShoppingSlot
	30,  // 12: artifact.CTraceMsg_ImprovementEnteringPlay.card:type_name -> artifact.CMsg_Card
	7,   // 13: artifact.CTraceMsg_CardDrawn.drawn_source:type_name -> artifact.CTraceMsg_CardDrawn.ECardDrawnSource
	30,  // 14: artifact.CTraceMsg_DamageAttempted.card:type_name -> artifact.CMsg_Card
	72,  // 15: artifact.CTraceMsg_GainedAppliedEffectEx.properties:type_name -> artifact.ContinuousEffectSingleProperty
	72,  // 16: artifact.CTraceMsg_LostAppliedEffectEx.properties:type_name -> artifact.ContinuousEffectSingleProperty
	72,  // 17: artifact.CTraceMsg_ContinuousAppliedEffectChangedEx.properties:type_name -> artifact.ContinuousEffectSingleProperty
	2,   // 18: artifact.CMsgGameServerToClientInitialGameState.CMsgCombatLogEntry.slot:type_name -> artifact.EShoppingSlot
	6,   // 19: artifact.CMsgGameServerToClientConnectionStatus.Player.status:type_name -> artifact.CMsgGameServerToClientConnectionStatus.EStatus
	102, // 20: artifact.CMsgPostMatchStats.CLane.stats:type_name -> artifact.CMsgPostMatchStats.CStat
	21,  // [21:21] is the sub-list for method output_type
	21,  // [21:21] is the sub-list for method input_type
	21,  // [21:21] is the sub-list for extension type_name
	21,  // [21:21] is the sub-list for extension extendee
	0,   // [0:21] is the sub-list for field type_name
}

func init() { file_artifact_dcg_gamemessages_proto_init() }
func file_artifact_dcg_gamemessages_proto_init() {
	if File_artifact_dcg_gamemessages_proto != nil {
		return
	}
	file_artifact_dcg_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_artifact_dcg_gamemessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServerHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameBoardGameCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameBoardGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameBoardGameButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGamePlayerRequestHandoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameHandoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientInitialGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameReplayActionMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTutorialEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgVenchatoquistEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameClientToServerChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientGameCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameClientToServerBoardGameStateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientGoodbye); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameClientToServerPauseTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameClientToServerGiveOpponentTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientReconnectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPostMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPostMatchCardAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSerializeQuestProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsg_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PathingCardChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardBought); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ChargesChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShoppingCardAppeared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShopAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShopHoldItemAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShopCardRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShopEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ShoppingCardShuffled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitEnteringCombat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ImprovementEnteringPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitLeavingCombat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_DeathShieldUsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardSurvivedDeath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TowerKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ImprovementDestroyed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardReturnedToFountain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToHand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToSpellStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardReturnedToGuardDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardMovedToGraveyard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardDuplicated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardDrawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardPlayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitCondemned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TriggerTriggered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_EffectProcced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitTargeted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PlayerPassed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitUserTargeted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitReadiedForDeploymentUponDeath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_DamageAttempted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitHealed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitChangedCombatPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_UnitChangedCombatTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_RandomlySelectedSecondaryTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousEffectSingleProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_GainedAppliedEffectEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_LostAppliedEffectEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ContinuousAppliedEffectChangedEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_AttributeValueChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_GoldEarned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TowerHealed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TargetSelected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardDiscarded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardRevealed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TowerManaRestored); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_InnerBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PreviewDeathResultChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PreviewDamageChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ColorsPlayableChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ItemEquipped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_StateBasedEffectsUpdateStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_StateBasedEffectsUpdateEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_TowerManaSpent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_CardEffectCalculation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_DeathSyncPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ScriptBlockBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_ScriptBlockEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PrepareHeroForLaneAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_HeroVS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTraceMsg_PlayerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientInitialGameState_CMsgDeckList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientInitialGameState_CMsgCombatLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerToClientConnectionStatus_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPostMatchStats_CStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPostMatchStats_CLane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gamemessages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSerializeQuestProgress_LocalUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_dcg_gamemessages_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_dcg_gamemessages_proto_goTypes,
		DependencyIndexes: file_artifact_dcg_gamemessages_proto_depIdxs,
		EnumInfos:         file_artifact_dcg_gamemessages_proto_enumTypes,
		MessageInfos:      file_artifact_dcg_gamemessages_proto_msgTypes,
	}.Build()
	File_artifact_dcg_gamemessages_proto = out.File
	file_artifact_dcg_gamemessages_proto_rawDesc = nil
	file_artifact_dcg_gamemessages_proto_goTypes = nil
	file_artifact_dcg_gamemessages_proto_depIdxs = nil
}
