// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/steammessages_appoverview.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDisplayStatus int32

const (
	EDisplayStatus_k_EDisplayStatusInvalid          EDisplayStatus = 0
	EDisplayStatus_k_EDisplayStatusLaunching        EDisplayStatus = 1
	EDisplayStatus_k_EDisplayStatusUninstalling     EDisplayStatus = 2
	EDisplayStatus_k_EDisplayStatusInstalling       EDisplayStatus = 3
	EDisplayStatus_k_EDisplayStatusRunning          EDisplayStatus = 4
	EDisplayStatus_k_EDisplayStatusValidating       EDisplayStatus = 5
	EDisplayStatus_k_EDisplayStatusUpdating         EDisplayStatus = 6
	EDisplayStatus_k_EDisplayStatusDownloading      EDisplayStatus = 7
	EDisplayStatus_k_EDisplayStatusSynchronizing    EDisplayStatus = 8
	EDisplayStatus_k_EDisplayStatusReadyToInstall   EDisplayStatus = 9
	EDisplayStatus_k_EDisplayStatusReadyToPreload   EDisplayStatus = 10
	EDisplayStatus_k_EDisplayStatusReadyToLaunch    EDisplayStatus = 11
	EDisplayStatus_k_EDisplayStatusRegionRestricted EDisplayStatus = 12
	EDisplayStatus_k_EDisplayStatusPresaleOnly      EDisplayStatus = 13
	EDisplayStatus_k_EDisplayStatusInvalidPlatform  EDisplayStatus = 14
	EDisplayStatus_k_EDisplayStatusPreloadComplete  EDisplayStatus = 16
	EDisplayStatus_k_EDisplayStatusBorrowerLocked   EDisplayStatus = 17
	EDisplayStatus_k_EDisplayStatusUpdatePaused     EDisplayStatus = 18
	EDisplayStatus_k_EDisplayStatusUpdateQueued     EDisplayStatus = 19
	EDisplayStatus_k_EDisplayStatusUpdateRequired   EDisplayStatus = 20
	EDisplayStatus_k_EDisplayStatusUpdateDisabled   EDisplayStatus = 21
	EDisplayStatus_k_EDisplayStatusDownloadPaused   EDisplayStatus = 22
	EDisplayStatus_k_EDisplayStatusDownloadQueued   EDisplayStatus = 23
	EDisplayStatus_k_EDisplayStatusDownloadRequired EDisplayStatus = 24
	EDisplayStatus_k_EDisplayStatusDownloadDisabled EDisplayStatus = 25
	EDisplayStatus_k_EDisplayStatusLicensePending   EDisplayStatus = 26
	EDisplayStatus_k_EDisplayStatusLicenseExpired   EDisplayStatus = 27
	EDisplayStatus_k_EDisplayStatusAvailForFree     EDisplayStatus = 28
	EDisplayStatus_k_EDisplayStatusAvailToBorrow    EDisplayStatus = 29
	EDisplayStatus_k_EDisplayStatusAvailGuestPass   EDisplayStatus = 30
	EDisplayStatus_k_EDisplayStatusPurchase         EDisplayStatus = 31
)

// Enum value maps for EDisplayStatus.
var (
	EDisplayStatus_name = map[int32]string{
		0:  "k_EDisplayStatusInvalid",
		1:  "k_EDisplayStatusLaunching",
		2:  "k_EDisplayStatusUninstalling",
		3:  "k_EDisplayStatusInstalling",
		4:  "k_EDisplayStatusRunning",
		5:  "k_EDisplayStatusValidating",
		6:  "k_EDisplayStatusUpdating",
		7:  "k_EDisplayStatusDownloading",
		8:  "k_EDisplayStatusSynchronizing",
		9:  "k_EDisplayStatusReadyToInstall",
		10: "k_EDisplayStatusReadyToPreload",
		11: "k_EDisplayStatusReadyToLaunch",
		12: "k_EDisplayStatusRegionRestricted",
		13: "k_EDisplayStatusPresaleOnly",
		14: "k_EDisplayStatusInvalidPlatform",
		16: "k_EDisplayStatusPreloadComplete",
		17: "k_EDisplayStatusBorrowerLocked",
		18: "k_EDisplayStatusUpdatePaused",
		19: "k_EDisplayStatusUpdateQueued",
		20: "k_EDisplayStatusUpdateRequired",
		21: "k_EDisplayStatusUpdateDisabled",
		22: "k_EDisplayStatusDownloadPaused",
		23: "k_EDisplayStatusDownloadQueued",
		24: "k_EDisplayStatusDownloadRequired",
		25: "k_EDisplayStatusDownloadDisabled",
		26: "k_EDisplayStatusLicensePending",
		27: "k_EDisplayStatusLicenseExpired",
		28: "k_EDisplayStatusAvailForFree",
		29: "k_EDisplayStatusAvailToBorrow",
		30: "k_EDisplayStatusAvailGuestPass",
		31: "k_EDisplayStatusPurchase",
	}
	EDisplayStatus_value = map[string]int32{
		"k_EDisplayStatusInvalid":          0,
		"k_EDisplayStatusLaunching":        1,
		"k_EDisplayStatusUninstalling":     2,
		"k_EDisplayStatusInstalling":       3,
		"k_EDisplayStatusRunning":          4,
		"k_EDisplayStatusValidating":       5,
		"k_EDisplayStatusUpdating":         6,
		"k_EDisplayStatusDownloading":      7,
		"k_EDisplayStatusSynchronizing":    8,
		"k_EDisplayStatusReadyToInstall":   9,
		"k_EDisplayStatusReadyToPreload":   10,
		"k_EDisplayStatusReadyToLaunch":    11,
		"k_EDisplayStatusRegionRestricted": 12,
		"k_EDisplayStatusPresaleOnly":      13,
		"k_EDisplayStatusInvalidPlatform":  14,
		"k_EDisplayStatusPreloadComplete":  16,
		"k_EDisplayStatusBorrowerLocked":   17,
		"k_EDisplayStatusUpdatePaused":     18,
		"k_EDisplayStatusUpdateQueued":     19,
		"k_EDisplayStatusUpdateRequired":   20,
		"k_EDisplayStatusUpdateDisabled":   21,
		"k_EDisplayStatusDownloadPaused":   22,
		"k_EDisplayStatusDownloadQueued":   23,
		"k_EDisplayStatusDownloadRequired": 24,
		"k_EDisplayStatusDownloadDisabled": 25,
		"k_EDisplayStatusLicensePending":   26,
		"k_EDisplayStatusLicenseExpired":   27,
		"k_EDisplayStatusAvailForFree":     28,
		"k_EDisplayStatusAvailToBorrow":    29,
		"k_EDisplayStatusAvailGuestPass":   30,
		"k_EDisplayStatusPurchase":         31,
	}
)

func (x EDisplayStatus) Enum() *EDisplayStatus {
	p := new(EDisplayStatus)
	*p = x
	return p
}

func (x EDisplayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDisplayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_appoverview_proto_enumTypes[0].Descriptor()
}

func (EDisplayStatus) Type() protoreflect.EnumType {
	return &file_steam_steammessages_appoverview_proto_enumTypes[0]
}

func (x EDisplayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDisplayStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDisplayStatus(num)
	return nil
}

// Deprecated: Use EDisplayStatus.Descriptor instead.
func (EDisplayStatus) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{0}
}

type EProtoAppType int32

const (
	EProtoAppType_k_EAppTypeInvalid     EProtoAppType = 0
	EProtoAppType_k_EAppTypeGame        EProtoAppType = 1
	EProtoAppType_k_EAppTypeApplication EProtoAppType = 2
	EProtoAppType_k_EAppTypeTool        EProtoAppType = 4
	EProtoAppType_k_EAppTypeDemo        EProtoAppType = 8
	EProtoAppType_k_EAppTypeDeprected   EProtoAppType = 16
	EProtoAppType_k_EAppTypeDLC         EProtoAppType = 32
	EProtoAppType_k_EAppTypeGuide       EProtoAppType = 64
	EProtoAppType_k_EAppTypeDriver      EProtoAppType = 128
	EProtoAppType_k_EAppTypeConfig      EProtoAppType = 256
	EProtoAppType_k_EAppTypeHardware    EProtoAppType = 512
	EProtoAppType_k_EAppTypeFranchise   EProtoAppType = 1024
	EProtoAppType_k_EAppTypeVideo       EProtoAppType = 2048
	EProtoAppType_k_EAppTypePlugin      EProtoAppType = 4096
	EProtoAppType_k_EAppTypeMusicAlbum  EProtoAppType = 8192
	EProtoAppType_k_EAppTypeSeries      EProtoAppType = 16384
	EProtoAppType_k_EAppTypeComic       EProtoAppType = 32768
	EProtoAppType_k_EAppTypeBeta        EProtoAppType = 65536
	EProtoAppType_k_EAppTypeShortcut    EProtoAppType = 1073741824
	EProtoAppType_k_EAppTypeDepotOnly   EProtoAppType = -2147483648
)

// Enum value maps for EProtoAppType.
var (
	EProtoAppType_name = map[int32]string{
		0:           "k_EAppTypeInvalid",
		1:           "k_EAppTypeGame",
		2:           "k_EAppTypeApplication",
		4:           "k_EAppTypeTool",
		8:           "k_EAppTypeDemo",
		16:          "k_EAppTypeDeprected",
		32:          "k_EAppTypeDLC",
		64:          "k_EAppTypeGuide",
		128:         "k_EAppTypeDriver",
		256:         "k_EAppTypeConfig",
		512:         "k_EAppTypeHardware",
		1024:        "k_EAppTypeFranchise",
		2048:        "k_EAppTypeVideo",
		4096:        "k_EAppTypePlugin",
		8192:        "k_EAppTypeMusicAlbum",
		16384:       "k_EAppTypeSeries",
		32768:       "k_EAppTypeComic",
		65536:       "k_EAppTypeBeta",
		1073741824:  "k_EAppTypeShortcut",
		-2147483648: "k_EAppTypeDepotOnly",
	}
	EProtoAppType_value = map[string]int32{
		"k_EAppTypeInvalid":     0,
		"k_EAppTypeGame":        1,
		"k_EAppTypeApplication": 2,
		"k_EAppTypeTool":        4,
		"k_EAppTypeDemo":        8,
		"k_EAppTypeDeprected":   16,
		"k_EAppTypeDLC":         32,
		"k_EAppTypeGuide":       64,
		"k_EAppTypeDriver":      128,
		"k_EAppTypeConfig":      256,
		"k_EAppTypeHardware":    512,
		"k_EAppTypeFranchise":   1024,
		"k_EAppTypeVideo":       2048,
		"k_EAppTypePlugin":      4096,
		"k_EAppTypeMusicAlbum":  8192,
		"k_EAppTypeSeries":      16384,
		"k_EAppTypeComic":       32768,
		"k_EAppTypeBeta":        65536,
		"k_EAppTypeShortcut":    1073741824,
		"k_EAppTypeDepotOnly":   -2147483648,
	}
)

func (x EProtoAppType) Enum() *EProtoAppType {
	p := new(EProtoAppType)
	*p = x
	return p
}

func (x EProtoAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProtoAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_appoverview_proto_enumTypes[1].Descriptor()
}

func (EProtoAppType) Type() protoreflect.EnumType {
	return &file_steam_steammessages_appoverview_proto_enumTypes[1]
}

func (x EProtoAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProtoAppType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProtoAppType(num)
	return nil
}

// Deprecated: Use EProtoAppType.Descriptor instead.
func (EProtoAppType) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{1}
}

type EAppAssociationType int32

const (
	EAppAssociationType_k_EAppAssociationTypeInvalid   EAppAssociationType = 0
	EAppAssociationType_k_EAppAssociationTypePublisher EAppAssociationType = 1
	EAppAssociationType_k_EAppAssociationTypeDeveloper EAppAssociationType = 2
	EAppAssociationType_k_EAppAssociationTypeFranchise EAppAssociationType = 3
)

// Enum value maps for EAppAssociationType.
var (
	EAppAssociationType_name = map[int32]string{
		0: "k_EAppAssociationTypeInvalid",
		1: "k_EAppAssociationTypePublisher",
		2: "k_EAppAssociationTypeDeveloper",
		3: "k_EAppAssociationTypeFranchise",
	}
	EAppAssociationType_value = map[string]int32{
		"k_EAppAssociationTypeInvalid":   0,
		"k_EAppAssociationTypePublisher": 1,
		"k_EAppAssociationTypeDeveloper": 2,
		"k_EAppAssociationTypeFranchise": 3,
	}
)

func (x EAppAssociationType) Enum() *EAppAssociationType {
	p := new(EAppAssociationType)
	*p = x
	return p
}

func (x EAppAssociationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppAssociationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_appoverview_proto_enumTypes[2].Descriptor()
}

func (EAppAssociationType) Type() protoreflect.EnumType {
	return &file_steam_steammessages_appoverview_proto_enumTypes[2]
}

func (x EAppAssociationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppAssociationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppAssociationType(num)
	return nil
}

// Deprecated: Use EAppAssociationType.Descriptor instead.
func (EAppAssociationType) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{2}
}

type EAppControllerSupportLevel int32

const (
	EAppControllerSupportLevel_k_EAppControllerSupportLevelNone    EAppControllerSupportLevel = 0
	EAppControllerSupportLevel_k_EAppControllerSupportLevelPartial EAppControllerSupportLevel = 1
	EAppControllerSupportLevel_k_EAppControllerSupportLevelFull    EAppControllerSupportLevel = 2
)

// Enum value maps for EAppControllerSupportLevel.
var (
	EAppControllerSupportLevel_name = map[int32]string{
		0: "k_EAppControllerSupportLevelNone",
		1: "k_EAppControllerSupportLevelPartial",
		2: "k_EAppControllerSupportLevelFull",
	}
	EAppControllerSupportLevel_value = map[string]int32{
		"k_EAppControllerSupportLevelNone":    0,
		"k_EAppControllerSupportLevelPartial": 1,
		"k_EAppControllerSupportLevelFull":    2,
	}
)

func (x EAppControllerSupportLevel) Enum() *EAppControllerSupportLevel {
	p := new(EAppControllerSupportLevel)
	*p = x
	return p
}

func (x EAppControllerSupportLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppControllerSupportLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_appoverview_proto_enumTypes[3].Descriptor()
}

func (EAppControllerSupportLevel) Type() protoreflect.EnumType {
	return &file_steam_steammessages_appoverview_proto_enumTypes[3]
}

func (x EAppControllerSupportLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppControllerSupportLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppControllerSupportLevel(num)
	return nil
}

// Deprecated: Use EAppControllerSupportLevel.Descriptor instead.
func (EAppControllerSupportLevel) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{3}
}

type CAppOverview_AppAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *EAppAssociationType `protobuf:"varint,1,opt,name=type,enum=steam.EAppAssociationType,def=0" json:"type,omitempty"`
	Name *string              `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

// Default values for CAppOverview_AppAssociation fields.
const (
	Default_CAppOverview_AppAssociation_Type = EAppAssociationType_k_EAppAssociationTypeInvalid
)

func (x *CAppOverview_AppAssociation) Reset() {
	*x = CAppOverview_AppAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview_AppAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview_AppAssociation) ProtoMessage() {}

func (x *CAppOverview_AppAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview_AppAssociation.ProtoReflect.Descriptor instead.
func (*CAppOverview_AppAssociation) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{0}
}

func (x *CAppOverview_AppAssociation) GetType() EAppAssociationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CAppOverview_AppAssociation_Type
}

func (x *CAppOverview_AppAssociation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CAppOverview_PerClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clientid                     *uint64         `protobuf:"varint,1,opt,name=clientid" json:"clientid,omitempty"`
	ClientName                   *string         `protobuf:"bytes,2,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	DisplayStatus                *EDisplayStatus `protobuf:"varint,3,opt,name=display_status,json=displayStatus,enum=steam.EDisplayStatus,def=0" json:"display_status,omitempty"`
	StatusPercentage             *uint32         `protobuf:"varint,4,opt,name=status_percentage,json=statusPercentage,def=0" json:"status_percentage,omitempty"`
	ActiveBeta                   *string         `protobuf:"bytes,5,opt,name=active_beta,json=activeBeta" json:"active_beta,omitempty"`
	Installed                    *bool           `protobuf:"varint,6,opt,name=installed" json:"installed,omitempty"`
	BytesDownloaded              *uint64         `protobuf:"varint,7,opt,name=bytes_downloaded,json=bytesDownloaded,def=0" json:"bytes_downloaded,omitempty"`
	BytesTotal                   *uint64         `protobuf:"varint,8,opt,name=bytes_total,json=bytesTotal,def=0" json:"bytes_total,omitempty"`
	StreamingToLocalClient       *bool           `protobuf:"varint,9,opt,name=streaming_to_local_client,json=streamingToLocalClient" json:"streaming_to_local_client,omitempty"`
	IsAvailableOnCurrentPlatform *bool           `protobuf:"varint,10,opt,name=is_available_on_current_platform,json=isAvailableOnCurrentPlatform" json:"is_available_on_current_platform,omitempty"`
	IsInvalidOsType              *bool           `protobuf:"varint,11,opt,name=is_invalid_os_type,json=isInvalidOsType" json:"is_invalid_os_type,omitempty"`
}

// Default values for CAppOverview_PerClientData fields.
const (
	Default_CAppOverview_PerClientData_DisplayStatus    = EDisplayStatus_k_EDisplayStatusInvalid
	Default_CAppOverview_PerClientData_StatusPercentage = uint32(0)
	Default_CAppOverview_PerClientData_BytesDownloaded  = uint64(0)
	Default_CAppOverview_PerClientData_BytesTotal       = uint64(0)
)

func (x *CAppOverview_PerClientData) Reset() {
	*x = CAppOverview_PerClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview_PerClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview_PerClientData) ProtoMessage() {}

func (x *CAppOverview_PerClientData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview_PerClientData.ProtoReflect.Descriptor instead.
func (*CAppOverview_PerClientData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{1}
}

func (x *CAppOverview_PerClientData) GetClientid() uint64 {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return 0
}

func (x *CAppOverview_PerClientData) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *CAppOverview_PerClientData) GetDisplayStatus() EDisplayStatus {
	if x != nil && x.DisplayStatus != nil {
		return *x.DisplayStatus
	}
	return Default_CAppOverview_PerClientData_DisplayStatus
}

func (x *CAppOverview_PerClientData) GetStatusPercentage() uint32 {
	if x != nil && x.StatusPercentage != nil {
		return *x.StatusPercentage
	}
	return Default_CAppOverview_PerClientData_StatusPercentage
}

func (x *CAppOverview_PerClientData) GetActiveBeta() string {
	if x != nil && x.ActiveBeta != nil {
		return *x.ActiveBeta
	}
	return ""
}

func (x *CAppOverview_PerClientData) GetInstalled() bool {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return false
}

func (x *CAppOverview_PerClientData) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return Default_CAppOverview_PerClientData_BytesDownloaded
}

func (x *CAppOverview_PerClientData) GetBytesTotal() uint64 {
	if x != nil && x.BytesTotal != nil {
		return *x.BytesTotal
	}
	return Default_CAppOverview_PerClientData_BytesTotal
}

func (x *CAppOverview_PerClientData) GetStreamingToLocalClient() bool {
	if x != nil && x.StreamingToLocalClient != nil {
		return *x.StreamingToLocalClient
	}
	return false
}

func (x *CAppOverview_PerClientData) GetIsAvailableOnCurrentPlatform() bool {
	if x != nil && x.IsAvailableOnCurrentPlatform != nil {
		return *x.IsAvailableOnCurrentPlatform
	}
	return false
}

func (x *CAppOverview_PerClientData) GetIsInvalidOsType() bool {
	if x != nil && x.IsInvalidOsType != nil {
		return *x.IsInvalidOsType
	}
	return false
}

type CAppOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                        *uint32                        `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	DisplayName                  *string                        `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	VisibleInGameList            *bool                          `protobuf:"varint,4,opt,name=visible_in_game_list,json=visibleInGameList" json:"visible_in_game_list,omitempty"`
	SortAs                       *string                        `protobuf:"bytes,6,opt,name=sort_as,json=sortAs" json:"sort_as,omitempty"`
	AppType                      *EProtoAppType                 `protobuf:"varint,7,opt,name=app_type,json=appType,enum=steam.EProtoAppType,def=0" json:"app_type,omitempty"`
	MruIndex                     *uint32                        `protobuf:"varint,13,opt,name=mru_index,json=mruIndex" json:"mru_index,omitempty"`
	RtRecentActivityTime         *uint32                        `protobuf:"varint,14,opt,name=rt_recent_activity_time,json=rtRecentActivityTime,def=0" json:"rt_recent_activity_time,omitempty"`
	MinutesPlaytimeForever       *uint32                        `protobuf:"varint,16,opt,name=minutes_playtime_forever,json=minutesPlaytimeForever,def=0" json:"minutes_playtime_forever,omitempty"`
	MinutesPlaytimeLastTwoWeeks  *uint32                        `protobuf:"varint,17,opt,name=minutes_playtime_last_two_weeks,json=minutesPlaytimeLastTwoWeeks,def=0" json:"minutes_playtime_last_two_weeks,omitempty"`
	RtLastTimePlayed             *uint32                        `protobuf:"varint,18,opt,name=rt_last_time_played,json=rtLastTimePlayed,def=0" json:"rt_last_time_played,omitempty"`
	StoreTag                     []uint32                       `protobuf:"varint,19,rep,name=store_tag,json=storeTag" json:"store_tag,omitempty"`
	Association                  []*CAppOverview_AppAssociation `protobuf:"bytes,20,rep,name=association" json:"association,omitempty"`
	StoreCategory                []uint32                       `protobuf:"varint,23,rep,name=store_category,json=storeCategory" json:"store_category,omitempty"`
	RtOriginalReleaseDate        *uint32                        `protobuf:"varint,25,opt,name=rt_original_release_date,json=rtOriginalReleaseDate,def=0" json:"rt_original_release_date,omitempty"`
	RtSteamReleaseDate           *uint32                        `protobuf:"varint,26,opt,name=rt_steam_release_date,json=rtSteamReleaseDate,def=0" json:"rt_steam_release_date,omitempty"`
	IconHash                     *string                        `protobuf:"bytes,27,opt,name=icon_hash,json=iconHash" json:"icon_hash,omitempty"`
	LogoHash                     *string                        `protobuf:"bytes,30,opt,name=logo_hash,json=logoHash" json:"logo_hash,omitempty"`
	ControllerSupport            *EAppControllerSupportLevel    `protobuf:"varint,31,opt,name=controller_support,json=controllerSupport,enum=steam.EAppControllerSupportLevel,def=0" json:"controller_support,omitempty"`
	VrSupported                  *bool                          `protobuf:"varint,32,opt,name=vr_supported,json=vrSupported" json:"vr_supported,omitempty"`
	MetacriticScore              *uint32                        `protobuf:"varint,36,opt,name=metacritic_score,json=metacriticScore" json:"metacritic_score,omitempty"`
	SizeOnDisk                   *uint64                        `protobuf:"varint,37,opt,name=size_on_disk,json=sizeOnDisk" json:"size_on_disk,omitempty"`
	ThirdPartyMod                *bool                          `protobuf:"varint,38,opt,name=third_party_mod,json=thirdPartyMod" json:"third_party_mod,omitempty"`
	IconData                     *string                        `protobuf:"bytes,39,opt,name=icon_data,json=iconData" json:"icon_data,omitempty"`
	IconDataFormat               *string                        `protobuf:"bytes,40,opt,name=icon_data_format,json=iconDataFormat" json:"icon_data_format,omitempty"`
	Gameid                       *string                        `protobuf:"bytes,41,opt,name=gameid" json:"gameid,omitempty"`
	LibraryCapsuleFilename       *string                        `protobuf:"bytes,42,opt,name=library_capsule_filename,json=libraryCapsuleFilename" json:"library_capsule_filename,omitempty"`
	PerClientData                []*CAppOverview_PerClientData  `protobuf:"bytes,43,rep,name=per_client_data,json=perClientData" json:"per_client_data,omitempty"`
	MostAvailableClientid        *uint64                        `protobuf:"varint,44,opt,name=most_available_clientid,json=mostAvailableClientid" json:"most_available_clientid,omitempty"`
	SelectedClientid             *uint64                        `protobuf:"varint,45,opt,name=selected_clientid,json=selectedClientid" json:"selected_clientid,omitempty"`
	RtStoreAssetMtime            *uint32                        `protobuf:"varint,46,opt,name=rt_store_asset_mtime,json=rtStoreAssetMtime" json:"rt_store_asset_mtime,omitempty"`
	RtCustomImageMtime           *uint32                        `protobuf:"varint,47,opt,name=rt_custom_image_mtime,json=rtCustomImageMtime" json:"rt_custom_image_mtime,omitempty"`
	OptionalParentAppId          *uint32                        `protobuf:"varint,48,opt,name=optional_parent_app_id,json=optionalParentAppId" json:"optional_parent_app_id,omitempty"`
	OwnerAccountId               *uint32                        `protobuf:"varint,49,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	CompatMappingEnabled         *bool                          `protobuf:"varint,50,opt,name=compat_mapping_enabled,json=compatMappingEnabled" json:"compat_mapping_enabled,omitempty"`
	CompatMappingPriority        *uint32                        `protobuf:"varint,51,opt,name=compat_mapping_priority,json=compatMappingPriority" json:"compat_mapping_priority,omitempty"`
	CompatMappingToolName        *string                        `protobuf:"bytes,52,opt,name=compat_mapping_tool_name,json=compatMappingToolName" json:"compat_mapping_tool_name,omitempty"`
	ReviewScoreWithBombs         *uint32                        `protobuf:"varint,53,opt,name=review_score_with_bombs,json=reviewScoreWithBombs" json:"review_score_with_bombs,omitempty"`
	ReviewPercentageWithBombs    *uint32                        `protobuf:"varint,54,opt,name=review_percentage_with_bombs,json=reviewPercentageWithBombs" json:"review_percentage_with_bombs,omitempty"`
	ReviewScoreWithoutBombs      *uint32                        `protobuf:"varint,55,opt,name=review_score_without_bombs,json=reviewScoreWithoutBombs" json:"review_score_without_bombs,omitempty"`
	ReviewPercentageWithoutBombs *uint32                        `protobuf:"varint,56,opt,name=review_percentage_without_bombs,json=reviewPercentageWithoutBombs" json:"review_percentage_without_bombs,omitempty"`
	LibraryId                    *string                        `protobuf:"bytes,57,opt,name=library_id,json=libraryId" json:"library_id,omitempty"`
}

// Default values for CAppOverview fields.
const (
	Default_CAppOverview_AppType                     = EProtoAppType_k_EAppTypeInvalid
	Default_CAppOverview_RtRecentActivityTime        = uint32(0)
	Default_CAppOverview_MinutesPlaytimeForever      = uint32(0)
	Default_CAppOverview_MinutesPlaytimeLastTwoWeeks = uint32(0)
	Default_CAppOverview_RtLastTimePlayed            = uint32(0)
	Default_CAppOverview_RtOriginalReleaseDate       = uint32(0)
	Default_CAppOverview_RtSteamReleaseDate          = uint32(0)
	Default_CAppOverview_ControllerSupport           = EAppControllerSupportLevel_k_EAppControllerSupportLevelNone
)

func (x *CAppOverview) Reset() {
	*x = CAppOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview) ProtoMessage() {}

func (x *CAppOverview) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview.ProtoReflect.Descriptor instead.
func (*CAppOverview) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{2}
}

func (x *CAppOverview) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CAppOverview) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CAppOverview) GetVisibleInGameList() bool {
	if x != nil && x.VisibleInGameList != nil {
		return *x.VisibleInGameList
	}
	return false
}

func (x *CAppOverview) GetSortAs() string {
	if x != nil && x.SortAs != nil {
		return *x.SortAs
	}
	return ""
}

func (x *CAppOverview) GetAppType() EProtoAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return Default_CAppOverview_AppType
}

func (x *CAppOverview) GetMruIndex() uint32 {
	if x != nil && x.MruIndex != nil {
		return *x.MruIndex
	}
	return 0
}

func (x *CAppOverview) GetRtRecentActivityTime() uint32 {
	if x != nil && x.RtRecentActivityTime != nil {
		return *x.RtRecentActivityTime
	}
	return Default_CAppOverview_RtRecentActivityTime
}

func (x *CAppOverview) GetMinutesPlaytimeForever() uint32 {
	if x != nil && x.MinutesPlaytimeForever != nil {
		return *x.MinutesPlaytimeForever
	}
	return Default_CAppOverview_MinutesPlaytimeForever
}

func (x *CAppOverview) GetMinutesPlaytimeLastTwoWeeks() uint32 {
	if x != nil && x.MinutesPlaytimeLastTwoWeeks != nil {
		return *x.MinutesPlaytimeLastTwoWeeks
	}
	return Default_CAppOverview_MinutesPlaytimeLastTwoWeeks
}

func (x *CAppOverview) GetRtLastTimePlayed() uint32 {
	if x != nil && x.RtLastTimePlayed != nil {
		return *x.RtLastTimePlayed
	}
	return Default_CAppOverview_RtLastTimePlayed
}

func (x *CAppOverview) GetStoreTag() []uint32 {
	if x != nil {
		return x.StoreTag
	}
	return nil
}

func (x *CAppOverview) GetAssociation() []*CAppOverview_AppAssociation {
	if x != nil {
		return x.Association
	}
	return nil
}

func (x *CAppOverview) GetStoreCategory() []uint32 {
	if x != nil {
		return x.StoreCategory
	}
	return nil
}

func (x *CAppOverview) GetRtOriginalReleaseDate() uint32 {
	if x != nil && x.RtOriginalReleaseDate != nil {
		return *x.RtOriginalReleaseDate
	}
	return Default_CAppOverview_RtOriginalReleaseDate
}

func (x *CAppOverview) GetRtSteamReleaseDate() uint32 {
	if x != nil && x.RtSteamReleaseDate != nil {
		return *x.RtSteamReleaseDate
	}
	return Default_CAppOverview_RtSteamReleaseDate
}

func (x *CAppOverview) GetIconHash() string {
	if x != nil && x.IconHash != nil {
		return *x.IconHash
	}
	return ""
}

func (x *CAppOverview) GetLogoHash() string {
	if x != nil && x.LogoHash != nil {
		return *x.LogoHash
	}
	return ""
}

func (x *CAppOverview) GetControllerSupport() EAppControllerSupportLevel {
	if x != nil && x.ControllerSupport != nil {
		return *x.ControllerSupport
	}
	return Default_CAppOverview_ControllerSupport
}

func (x *CAppOverview) GetVrSupported() bool {
	if x != nil && x.VrSupported != nil {
		return *x.VrSupported
	}
	return false
}

func (x *CAppOverview) GetMetacriticScore() uint32 {
	if x != nil && x.MetacriticScore != nil {
		return *x.MetacriticScore
	}
	return 0
}

func (x *CAppOverview) GetSizeOnDisk() uint64 {
	if x != nil && x.SizeOnDisk != nil {
		return *x.SizeOnDisk
	}
	return 0
}

func (x *CAppOverview) GetThirdPartyMod() bool {
	if x != nil && x.ThirdPartyMod != nil {
		return *x.ThirdPartyMod
	}
	return false
}

func (x *CAppOverview) GetIconData() string {
	if x != nil && x.IconData != nil {
		return *x.IconData
	}
	return ""
}

func (x *CAppOverview) GetIconDataFormat() string {
	if x != nil && x.IconDataFormat != nil {
		return *x.IconDataFormat
	}
	return ""
}

func (x *CAppOverview) GetGameid() string {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return ""
}

func (x *CAppOverview) GetLibraryCapsuleFilename() string {
	if x != nil && x.LibraryCapsuleFilename != nil {
		return *x.LibraryCapsuleFilename
	}
	return ""
}

func (x *CAppOverview) GetPerClientData() []*CAppOverview_PerClientData {
	if x != nil {
		return x.PerClientData
	}
	return nil
}

func (x *CAppOverview) GetMostAvailableClientid() uint64 {
	if x != nil && x.MostAvailableClientid != nil {
		return *x.MostAvailableClientid
	}
	return 0
}

func (x *CAppOverview) GetSelectedClientid() uint64 {
	if x != nil && x.SelectedClientid != nil {
		return *x.SelectedClientid
	}
	return 0
}

func (x *CAppOverview) GetRtStoreAssetMtime() uint32 {
	if x != nil && x.RtStoreAssetMtime != nil {
		return *x.RtStoreAssetMtime
	}
	return 0
}

func (x *CAppOverview) GetRtCustomImageMtime() uint32 {
	if x != nil && x.RtCustomImageMtime != nil {
		return *x.RtCustomImageMtime
	}
	return 0
}

func (x *CAppOverview) GetOptionalParentAppId() uint32 {
	if x != nil && x.OptionalParentAppId != nil {
		return *x.OptionalParentAppId
	}
	return 0
}

func (x *CAppOverview) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CAppOverview) GetCompatMappingEnabled() bool {
	if x != nil && x.CompatMappingEnabled != nil {
		return *x.CompatMappingEnabled
	}
	return false
}

func (x *CAppOverview) GetCompatMappingPriority() uint32 {
	if x != nil && x.CompatMappingPriority != nil {
		return *x.CompatMappingPriority
	}
	return 0
}

func (x *CAppOverview) GetCompatMappingToolName() string {
	if x != nil && x.CompatMappingToolName != nil {
		return *x.CompatMappingToolName
	}
	return ""
}

func (x *CAppOverview) GetReviewScoreWithBombs() uint32 {
	if x != nil && x.ReviewScoreWithBombs != nil {
		return *x.ReviewScoreWithBombs
	}
	return 0
}

func (x *CAppOverview) GetReviewPercentageWithBombs() uint32 {
	if x != nil && x.ReviewPercentageWithBombs != nil {
		return *x.ReviewPercentageWithBombs
	}
	return 0
}

func (x *CAppOverview) GetReviewScoreWithoutBombs() uint32 {
	if x != nil && x.ReviewScoreWithoutBombs != nil {
		return *x.ReviewScoreWithoutBombs
	}
	return 0
}

func (x *CAppOverview) GetReviewPercentageWithoutBombs() uint32 {
	if x != nil && x.ReviewPercentageWithoutBombs != nil {
		return *x.ReviewPercentageWithoutBombs
	}
	return 0
}

func (x *CAppOverview) GetLibraryId() string {
	if x != nil && x.LibraryId != nil {
		return *x.LibraryId
	}
	return ""
}

type CAppOverview_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppOverview  []*CAppOverview `protobuf:"bytes,1,rep,name=app_overview,json=appOverview" json:"app_overview,omitempty"`
	RemovedAppid []uint32        `protobuf:"varint,2,rep,name=removed_appid,json=removedAppid" json:"removed_appid,omitempty"`
}

func (x *CAppOverview_Change) Reset() {
	*x = CAppOverview_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppOverview_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppOverview_Change) ProtoMessage() {}

func (x *CAppOverview_Change) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppOverview_Change.ProtoReflect.Descriptor instead.
func (*CAppOverview_Change) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{3}
}

func (x *CAppOverview_Change) GetAppOverview() []*CAppOverview {
	if x != nil {
		return x.AppOverview
	}
	return nil
}

func (x *CAppOverview_Change) GetRemovedAppid() []uint32 {
	if x != nil {
		return x.RemovedAppid
	}
	return nil
}

type CAppBootstrapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Hidden  *bool    `protobuf:"varint,2,opt,name=hidden" json:"hidden,omitempty"`
	UserTag []string `protobuf:"bytes,3,rep,name=user_tag,json=userTag" json:"user_tag,omitempty"`
}

func (x *CAppBootstrapData) Reset() {
	*x = CAppBootstrapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAppBootstrapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppBootstrapData) ProtoMessage() {}

func (x *CAppBootstrapData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppBootstrapData.ProtoReflect.Descriptor instead.
func (*CAppBootstrapData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{4}
}

func (x *CAppBootstrapData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CAppBootstrapData) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CAppBootstrapData) GetUserTag() []string {
	if x != nil {
		return x.UserTag
	}
	return nil
}

type CLibraryBootstrapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppData []*CAppBootstrapData `protobuf:"bytes,1,rep,name=app_data,json=appData" json:"app_data,omitempty"`
}

func (x *CLibraryBootstrapData) Reset() {
	*x = CLibraryBootstrapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_appoverview_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLibraryBootstrapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLibraryBootstrapData) ProtoMessage() {}

func (x *CLibraryBootstrapData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_appoverview_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLibraryBootstrapData.ProtoReflect.Descriptor instead.
func (*CLibraryBootstrapData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_appoverview_proto_rawDescGZIP(), []int{5}
}

func (x *CLibraryBootstrapData) GetAppData() []*CAppBootstrapData {
	if x != nil {
		return x.AppData
	}
	return nil
}

var File_steam_steammessages_appoverview_proto protoreflect.FileDescriptor

var file_steam_steammessages_appoverview_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x7f,
	0x0a, 0x1b, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x41,
	0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x45, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa1, 0x04, 0x0a, 0x1a, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x46,
	0x0a, 0x20, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xf4, 0x0f, 0x0a, 0x0c, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x11, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x72, 0x75, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x72, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x72, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x1b, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x74, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x72, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x15, 0x72, 0x74, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x12, 0x72, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x72, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a,
	0x20, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x50, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x17, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x6d, 0x6f, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42,
	0x6f, 0x6d, 0x62, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x13, 0x43, 0x41,
	0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x41, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x11, 0x43, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x22, 0x4c, 0x0a, 0x15,
	0x43, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xbc, 0x08, 0x0a, 0x0e, 0x45,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x10, 0x09, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x10,
	0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x10, 0x13, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x16, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x10, 0x17, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x1a, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x46, 0x72,
	0x65, 0x65, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0x1f, 0x2a, 0xea, 0x03, 0x0a, 0x0d, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x6f, 0x6c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x4c, 0x43, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f,
	0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x10, 0x80,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x80, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x10, 0x80,
	0x04, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x10, 0x80, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x6b,
	0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x80,
	0x10, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x80, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x10, 0x80, 0x40, 0x12, 0x16, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x80, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x6b,
	0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x10, 0x80,
	0x80, 0x02, 0x12, 0x14, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x65, 0x74, 0x61, 0x10, 0x80, 0x80, 0x04, 0x12, 0x1a, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x04, 0x12, 0x20, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x80, 0x80, 0x80, 0x80,
	0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xa3, 0x01, 0x0a, 0x13, 0x45, 0x41, 0x70, 0x70, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x41,
	0x70, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x10, 0x03, 0x2a, 0x91, 0x01, 0x0a,
	0x1a, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02,
	0x42, 0x37, 0x48, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steam_steammessages_appoverview_proto_rawDescOnce sync.Once
	file_steam_steammessages_appoverview_proto_rawDescData = file_steam_steammessages_appoverview_proto_rawDesc
)

func file_steam_steammessages_appoverview_proto_rawDescGZIP() []byte {
	file_steam_steammessages_appoverview_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_appoverview_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_appoverview_proto_rawDescData)
	})
	return file_steam_steammessages_appoverview_proto_rawDescData
}

var file_steam_steammessages_appoverview_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steam_steammessages_appoverview_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_steam_steammessages_appoverview_proto_goTypes = []interface{}{
	(EDisplayStatus)(0),                 // 0: steam.EDisplayStatus
	(EProtoAppType)(0),                  // 1: steam.EProtoAppType
	(EAppAssociationType)(0),            // 2: steam.EAppAssociationType
	(EAppControllerSupportLevel)(0),     // 3: steam.EAppControllerSupportLevel
	(*CAppOverview_AppAssociation)(nil), // 4: steam.CAppOverview_AppAssociation
	(*CAppOverview_PerClientData)(nil),  // 5: steam.CAppOverview_PerClientData
	(*CAppOverview)(nil),                // 6: steam.CAppOverview
	(*CAppOverview_Change)(nil),         // 7: steam.CAppOverview_Change
	(*CAppBootstrapData)(nil),           // 8: steam.CAppBootstrapData
	(*CLibraryBootstrapData)(nil),       // 9: steam.CLibraryBootstrapData
}
var file_steam_steammessages_appoverview_proto_depIdxs = []int32{
	2, // 0: steam.CAppOverview_AppAssociation.type:type_name -> steam.EAppAssociationType
	0, // 1: steam.CAppOverview_PerClientData.display_status:type_name -> steam.EDisplayStatus
	1, // 2: steam.CAppOverview.app_type:type_name -> steam.EProtoAppType
	4, // 3: steam.CAppOverview.association:type_name -> steam.CAppOverview_AppAssociation
	3, // 4: steam.CAppOverview.controller_support:type_name -> steam.EAppControllerSupportLevel
	5, // 5: steam.CAppOverview.per_client_data:type_name -> steam.CAppOverview_PerClientData
	6, // 6: steam.CAppOverview_Change.app_overview:type_name -> steam.CAppOverview
	8, // 7: steam.CLibraryBootstrapData.app_data:type_name -> steam.CAppBootstrapData
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_steam_steammessages_appoverview_proto_init() }
func file_steam_steammessages_appoverview_proto_init() {
	if File_steam_steammessages_appoverview_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_appoverview_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppOverview_AppAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_appoverview_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppOverview_PerClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_appoverview_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_appoverview_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppOverview_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_appoverview_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAppBootstrapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_appoverview_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLibraryBootstrapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_appoverview_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_appoverview_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_appoverview_proto_depIdxs,
		EnumInfos:         file_steam_steammessages_appoverview_proto_enumTypes,
		MessageInfos:      file_steam_steammessages_appoverview_proto_msgTypes,
	}.Build()
	File_steam_steammessages_appoverview_proto = out.File
	file_steam_steammessages_appoverview_proto_rawDesc = nil
	file_steam_steammessages_appoverview_proto_goTypes = nil
	file_steam_steammessages_appoverview_proto_depIdxs = nil
}
