// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/steammessages_clientserver_login.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgClientHeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientHeartBeat) Reset() {
	*x = CMsgClientHeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientHeartBeat) ProtoMessage() {}

func (x *CMsgClientHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientHeartBeat.ProtoReflect.Descriptor instead.
func (*CMsgClientHeartBeat) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{0}
}

type CMsgClientServerTimestampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientRequestTimestamp *uint64 `protobuf:"varint,1,opt,name=client_request_timestamp,json=clientRequestTimestamp" json:"client_request_timestamp,omitempty"`
}

func (x *CMsgClientServerTimestampRequest) Reset() {
	*x = CMsgClientServerTimestampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServerTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerTimestampRequest) ProtoMessage() {}

func (x *CMsgClientServerTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerTimestampRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientServerTimestampRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientServerTimestampRequest) GetClientRequestTimestamp() uint64 {
	if x != nil && x.ClientRequestTimestamp != nil {
		return *x.ClientRequestTimestamp
	}
	return 0
}

type CMsgClientServerTimestampResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientRequestTimestamp *uint64 `protobuf:"varint,1,opt,name=client_request_timestamp,json=clientRequestTimestamp" json:"client_request_timestamp,omitempty"`
	ServerTimestampMs      *uint64 `protobuf:"varint,2,opt,name=server_timestamp_ms,json=serverTimestampMs" json:"server_timestamp_ms,omitempty"`
}

func (x *CMsgClientServerTimestampResponse) Reset() {
	*x = CMsgClientServerTimestampResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServerTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerTimestampResponse) ProtoMessage() {}

func (x *CMsgClientServerTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerTimestampResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientServerTimestampResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientServerTimestampResponse) GetClientRequestTimestamp() uint64 {
	if x != nil && x.ClientRequestTimestamp != nil {
		return *x.ClientRequestTimestamp
	}
	return 0
}

func (x *CMsgClientServerTimestampResponse) GetServerTimestampMs() uint64 {
	if x != nil && x.ServerTimestampMs != nil {
		return *x.ServerTimestampMs
	}
	return 0
}

type CMsgClientSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Appid    *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Deviceid *uint32 `protobuf:"varint,3,opt,name=deviceid" json:"deviceid,omitempty"`
	Nonce    *uint64 `protobuf:"fixed64,4,opt,name=nonce" json:"nonce,omitempty"`
	Hmac     []byte  `protobuf:"bytes,5,opt,name=hmac" json:"hmac,omitempty"`
}

func (x *CMsgClientSecret) Reset() {
	*x = CMsgClientSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSecret) ProtoMessage() {}

func (x *CMsgClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSecret.ProtoReflect.Descriptor instead.
func (*CMsgClientSecret) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientSecret) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientSecret) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientSecret) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

func (x *CMsgClientSecret) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CMsgClientSecret) GetHmac() []byte {
	if x != nil {
		return x.Hmac
	}
	return nil
}

type CMsgClientLogon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion                   *uint32           `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	DeprecatedObfustucatedPrivateIp   *uint32           `protobuf:"varint,2,opt,name=deprecated_obfustucated_private_ip,json=deprecatedObfustucatedPrivateIp" json:"deprecated_obfustucated_private_ip,omitempty"`
	CellId                            *uint32           `protobuf:"varint,3,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	LastSessionId                     *uint32           `protobuf:"varint,4,opt,name=last_session_id,json=lastSessionId" json:"last_session_id,omitempty"`
	ClientPackageVersion              *uint32           `protobuf:"varint,5,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	ClientLanguage                    *string           `protobuf:"bytes,6,opt,name=client_language,json=clientLanguage" json:"client_language,omitempty"`
	ClientOsType                      *uint32           `protobuf:"varint,7,opt,name=client_os_type,json=clientOsType" json:"client_os_type,omitempty"`
	ShouldRememberPassword            *bool             `protobuf:"varint,8,opt,name=should_remember_password,json=shouldRememberPassword,def=0" json:"should_remember_password,omitempty"`
	WineVersion                       *string           `protobuf:"bytes,9,opt,name=wine_version,json=wineVersion" json:"wine_version,omitempty"`
	Deprecated_10                     *uint32           `protobuf:"varint,10,opt,name=deprecated_10,json=deprecated10" json:"deprecated_10,omitempty"`
	ObfuscatedPrivateIp               *CMsgIPAddress    `protobuf:"bytes,11,opt,name=obfuscated_private_ip,json=obfuscatedPrivateIp" json:"obfuscated_private_ip,omitempty"`
	DeprecatedPublicIp                *uint32           `protobuf:"varint,20,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	QosLevel                          *uint32           `protobuf:"varint,21,opt,name=qos_level,json=qosLevel" json:"qos_level,omitempty"`
	ClientSuppliedSteamId             *uint64           `protobuf:"fixed64,22,opt,name=client_supplied_steam_id,json=clientSuppliedSteamId" json:"client_supplied_steam_id,omitempty"`
	PublicIp                          *CMsgIPAddress    `protobuf:"bytes,23,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	MachineId                         []byte            `protobuf:"bytes,30,opt,name=machine_id,json=machineId" json:"machine_id,omitempty"`
	LauncherType                      *uint32           `protobuf:"varint,31,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	UiMode                            *uint32           `protobuf:"varint,32,opt,name=ui_mode,json=uiMode,def=0" json:"ui_mode,omitempty"`
	ChatMode                          *uint32           `protobuf:"varint,33,opt,name=chat_mode,json=chatMode,def=0" json:"chat_mode,omitempty"`
	Steam2AuthTicket                  []byte            `protobuf:"bytes,41,opt,name=steam2_auth_ticket,json=steam2AuthTicket" json:"steam2_auth_ticket,omitempty"`
	EmailAddress                      *string           `protobuf:"bytes,42,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	Rtime32AccountCreation            *uint32           `protobuf:"fixed32,43,opt,name=rtime32_account_creation,json=rtime32AccountCreation" json:"rtime32_account_creation,omitempty"`
	AccountName                       *string           `protobuf:"bytes,50,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	Password                          *string           `protobuf:"bytes,51,opt,name=password" json:"password,omitempty"`
	GameServerToken                   *string           `protobuf:"bytes,52,opt,name=game_server_token,json=gameServerToken" json:"game_server_token,omitempty"`
	LoginKey                          *string           `protobuf:"bytes,60,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
	WasConvertedDeprecatedMsg         *bool             `protobuf:"varint,70,opt,name=was_converted_deprecated_msg,json=wasConvertedDeprecatedMsg,def=0" json:"was_converted_deprecated_msg,omitempty"`
	AnonUserTargetAccountName         *string           `protobuf:"bytes,80,opt,name=anon_user_target_account_name,json=anonUserTargetAccountName" json:"anon_user_target_account_name,omitempty"`
	ResolvedUserSteamId               *uint64           `protobuf:"fixed64,81,opt,name=resolved_user_steam_id,json=resolvedUserSteamId" json:"resolved_user_steam_id,omitempty"`
	EresultSentryfile                 *int32            `protobuf:"varint,82,opt,name=eresult_sentryfile,json=eresultSentryfile" json:"eresult_sentryfile,omitempty"`
	ShaSentryfile                     []byte            `protobuf:"bytes,83,opt,name=sha_sentryfile,json=shaSentryfile" json:"sha_sentryfile,omitempty"`
	AuthCode                          *string           `protobuf:"bytes,84,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	OtpType                           *int32            `protobuf:"varint,85,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpValue                          *uint32           `protobuf:"varint,86,opt,name=otp_value,json=otpValue" json:"otp_value,omitempty"`
	OtpIdentifier                     *string           `protobuf:"bytes,87,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
	Steam2TicketRequest               *bool             `protobuf:"varint,88,opt,name=steam2_ticket_request,json=steam2TicketRequest" json:"steam2_ticket_request,omitempty"`
	SonyPsnTicket                     []byte            `protobuf:"bytes,90,opt,name=sony_psn_ticket,json=sonyPsnTicket" json:"sony_psn_ticket,omitempty"`
	SonyPsnServiceId                  *string           `protobuf:"bytes,91,opt,name=sony_psn_service_id,json=sonyPsnServiceId" json:"sony_psn_service_id,omitempty"`
	CreateNewPsnLinkedAccountIfNeeded *bool             `protobuf:"varint,92,opt,name=create_new_psn_linked_account_if_needed,json=createNewPsnLinkedAccountIfNeeded,def=0" json:"create_new_psn_linked_account_if_needed,omitempty"`
	SonyPsnName                       *string           `protobuf:"bytes,93,opt,name=sony_psn_name,json=sonyPsnName" json:"sony_psn_name,omitempty"`
	GameServerAppId                   *int32            `protobuf:"varint,94,opt,name=game_server_app_id,json=gameServerAppId" json:"game_server_app_id,omitempty"`
	SteamguardDontRememberComputer    *bool             `protobuf:"varint,95,opt,name=steamguard_dont_remember_computer,json=steamguardDontRememberComputer" json:"steamguard_dont_remember_computer,omitempty"`
	MachineName                       *string           `protobuf:"bytes,96,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	MachineNameUserchosen             *string           `protobuf:"bytes,97,opt,name=machine_name_userchosen,json=machineNameUserchosen" json:"machine_name_userchosen,omitempty"`
	CountryOverride                   *string           `protobuf:"bytes,98,opt,name=country_override,json=countryOverride" json:"country_override,omitempty"`
	IsSteamBox                        *bool             `protobuf:"varint,99,opt,name=is_steam_box,json=isSteamBox" json:"is_steam_box,omitempty"`
	ClientInstanceId                  *uint64           `protobuf:"varint,100,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	TwoFactorCode                     *string           `protobuf:"bytes,101,opt,name=two_factor_code,json=twoFactorCode" json:"two_factor_code,omitempty"`
	SupportsRateLimitResponse         *bool             `protobuf:"varint,102,opt,name=supports_rate_limit_response,json=supportsRateLimitResponse" json:"supports_rate_limit_response,omitempty"`
	WebLogonNonce                     *string           `protobuf:"bytes,103,opt,name=web_logon_nonce,json=webLogonNonce" json:"web_logon_nonce,omitempty"`
	PriorityReason                    *int32            `protobuf:"varint,104,opt,name=priority_reason,json=priorityReason" json:"priority_reason,omitempty"`
	EmbeddedClientSecret              *CMsgClientSecret `protobuf:"bytes,105,opt,name=embedded_client_secret,json=embeddedClientSecret" json:"embedded_client_secret,omitempty"`
}

// Default values for CMsgClientLogon fields.
const (
	Default_CMsgClientLogon_ShouldRememberPassword            = bool(false)
	Default_CMsgClientLogon_LauncherType                      = uint32(0)
	Default_CMsgClientLogon_UiMode                            = uint32(0)
	Default_CMsgClientLogon_ChatMode                          = uint32(0)
	Default_CMsgClientLogon_WasConvertedDeprecatedMsg         = bool(false)
	Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded = bool(false)
)

func (x *CMsgClientLogon) Reset() {
	*x = CMsgClientLogon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogon) ProtoMessage() {}

func (x *CMsgClientLogon) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogon.ProtoReflect.Descriptor instead.
func (*CMsgClientLogon) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientLogon) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientLogon) GetDeprecatedObfustucatedPrivateIp() uint32 {
	if x != nil && x.DeprecatedObfustucatedPrivateIp != nil {
		return *x.DeprecatedObfustucatedPrivateIp
	}
	return 0
}

func (x *CMsgClientLogon) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientLogon) GetLastSessionId() uint32 {
	if x != nil && x.LastSessionId != nil {
		return *x.LastSessionId
	}
	return 0
}

func (x *CMsgClientLogon) GetClientPackageVersion() uint32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

func (x *CMsgClientLogon) GetClientLanguage() string {
	if x != nil && x.ClientLanguage != nil {
		return *x.ClientLanguage
	}
	return ""
}

func (x *CMsgClientLogon) GetClientOsType() uint32 {
	if x != nil && x.ClientOsType != nil {
		return *x.ClientOsType
	}
	return 0
}

func (x *CMsgClientLogon) GetShouldRememberPassword() bool {
	if x != nil && x.ShouldRememberPassword != nil {
		return *x.ShouldRememberPassword
	}
	return Default_CMsgClientLogon_ShouldRememberPassword
}

func (x *CMsgClientLogon) GetWineVersion() string {
	if x != nil && x.WineVersion != nil {
		return *x.WineVersion
	}
	return ""
}

func (x *CMsgClientLogon) GetDeprecated_10() uint32 {
	if x != nil && x.Deprecated_10 != nil {
		return *x.Deprecated_10
	}
	return 0
}

func (x *CMsgClientLogon) GetObfuscatedPrivateIp() *CMsgIPAddress {
	if x != nil {
		return x.ObfuscatedPrivateIp
	}
	return nil
}

func (x *CMsgClientLogon) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientLogon) GetQosLevel() uint32 {
	if x != nil && x.QosLevel != nil {
		return *x.QosLevel
	}
	return 0
}

func (x *CMsgClientLogon) GetClientSuppliedSteamId() uint64 {
	if x != nil && x.ClientSuppliedSteamId != nil {
		return *x.ClientSuppliedSteamId
	}
	return 0
}

func (x *CMsgClientLogon) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *CMsgClientLogon) GetMachineId() []byte {
	if x != nil {
		return x.MachineId
	}
	return nil
}

func (x *CMsgClientLogon) GetLauncherType() uint32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return Default_CMsgClientLogon_LauncherType
}

func (x *CMsgClientLogon) GetUiMode() uint32 {
	if x != nil && x.UiMode != nil {
		return *x.UiMode
	}
	return Default_CMsgClientLogon_UiMode
}

func (x *CMsgClientLogon) GetChatMode() uint32 {
	if x != nil && x.ChatMode != nil {
		return *x.ChatMode
	}
	return Default_CMsgClientLogon_ChatMode
}

func (x *CMsgClientLogon) GetSteam2AuthTicket() []byte {
	if x != nil {
		return x.Steam2AuthTicket
	}
	return nil
}

func (x *CMsgClientLogon) GetEmailAddress() string {
	if x != nil && x.EmailAddress != nil {
		return *x.EmailAddress
	}
	return ""
}

func (x *CMsgClientLogon) GetRtime32AccountCreation() uint32 {
	if x != nil && x.Rtime32AccountCreation != nil {
		return *x.Rtime32AccountCreation
	}
	return 0
}

func (x *CMsgClientLogon) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CMsgClientLogon) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgClientLogon) GetGameServerToken() string {
	if x != nil && x.GameServerToken != nil {
		return *x.GameServerToken
	}
	return ""
}

func (x *CMsgClientLogon) GetLoginKey() string {
	if x != nil && x.LoginKey != nil {
		return *x.LoginKey
	}
	return ""
}

func (x *CMsgClientLogon) GetWasConvertedDeprecatedMsg() bool {
	if x != nil && x.WasConvertedDeprecatedMsg != nil {
		return *x.WasConvertedDeprecatedMsg
	}
	return Default_CMsgClientLogon_WasConvertedDeprecatedMsg
}

func (x *CMsgClientLogon) GetAnonUserTargetAccountName() string {
	if x != nil && x.AnonUserTargetAccountName != nil {
		return *x.AnonUserTargetAccountName
	}
	return ""
}

func (x *CMsgClientLogon) GetResolvedUserSteamId() uint64 {
	if x != nil && x.ResolvedUserSteamId != nil {
		return *x.ResolvedUserSteamId
	}
	return 0
}

func (x *CMsgClientLogon) GetEresultSentryfile() int32 {
	if x != nil && x.EresultSentryfile != nil {
		return *x.EresultSentryfile
	}
	return 0
}

func (x *CMsgClientLogon) GetShaSentryfile() []byte {
	if x != nil {
		return x.ShaSentryfile
	}
	return nil
}

func (x *CMsgClientLogon) GetAuthCode() string {
	if x != nil && x.AuthCode != nil {
		return *x.AuthCode
	}
	return ""
}

func (x *CMsgClientLogon) GetOtpType() int32 {
	if x != nil && x.OtpType != nil {
		return *x.OtpType
	}
	return 0
}

func (x *CMsgClientLogon) GetOtpValue() uint32 {
	if x != nil && x.OtpValue != nil {
		return *x.OtpValue
	}
	return 0
}

func (x *CMsgClientLogon) GetOtpIdentifier() string {
	if x != nil && x.OtpIdentifier != nil {
		return *x.OtpIdentifier
	}
	return ""
}

func (x *CMsgClientLogon) GetSteam2TicketRequest() bool {
	if x != nil && x.Steam2TicketRequest != nil {
		return *x.Steam2TicketRequest
	}
	return false
}

func (x *CMsgClientLogon) GetSonyPsnTicket() []byte {
	if x != nil {
		return x.SonyPsnTicket
	}
	return nil
}

func (x *CMsgClientLogon) GetSonyPsnServiceId() string {
	if x != nil && x.SonyPsnServiceId != nil {
		return *x.SonyPsnServiceId
	}
	return ""
}

func (x *CMsgClientLogon) GetCreateNewPsnLinkedAccountIfNeeded() bool {
	if x != nil && x.CreateNewPsnLinkedAccountIfNeeded != nil {
		return *x.CreateNewPsnLinkedAccountIfNeeded
	}
	return Default_CMsgClientLogon_CreateNewPsnLinkedAccountIfNeeded
}

func (x *CMsgClientLogon) GetSonyPsnName() string {
	if x != nil && x.SonyPsnName != nil {
		return *x.SonyPsnName
	}
	return ""
}

func (x *CMsgClientLogon) GetGameServerAppId() int32 {
	if x != nil && x.GameServerAppId != nil {
		return *x.GameServerAppId
	}
	return 0
}

func (x *CMsgClientLogon) GetSteamguardDontRememberComputer() bool {
	if x != nil && x.SteamguardDontRememberComputer != nil {
		return *x.SteamguardDontRememberComputer
	}
	return false
}

func (x *CMsgClientLogon) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CMsgClientLogon) GetMachineNameUserchosen() string {
	if x != nil && x.MachineNameUserchosen != nil {
		return *x.MachineNameUserchosen
	}
	return ""
}

func (x *CMsgClientLogon) GetCountryOverride() string {
	if x != nil && x.CountryOverride != nil {
		return *x.CountryOverride
	}
	return ""
}

func (x *CMsgClientLogon) GetIsSteamBox() bool {
	if x != nil && x.IsSteamBox != nil {
		return *x.IsSteamBox
	}
	return false
}

func (x *CMsgClientLogon) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

func (x *CMsgClientLogon) GetTwoFactorCode() string {
	if x != nil && x.TwoFactorCode != nil {
		return *x.TwoFactorCode
	}
	return ""
}

func (x *CMsgClientLogon) GetSupportsRateLimitResponse() bool {
	if x != nil && x.SupportsRateLimitResponse != nil {
		return *x.SupportsRateLimitResponse
	}
	return false
}

func (x *CMsgClientLogon) GetWebLogonNonce() string {
	if x != nil && x.WebLogonNonce != nil {
		return *x.WebLogonNonce
	}
	return ""
}

func (x *CMsgClientLogon) GetPriorityReason() int32 {
	if x != nil && x.PriorityReason != nil {
		return *x.PriorityReason
	}
	return 0
}

func (x *CMsgClientLogon) GetEmbeddedClientSecret() *CMsgClientSecret {
	if x != nil {
		return x.EmbeddedClientSecret
	}
	return nil
}

type CMsgClientLogonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                     *int32         `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	OutOfGameHeartbeatSeconds   *int32         `protobuf:"varint,2,opt,name=out_of_game_heartbeat_seconds,json=outOfGameHeartbeatSeconds" json:"out_of_game_heartbeat_seconds,omitempty"`
	InGameHeartbeatSeconds      *int32         `protobuf:"varint,3,opt,name=in_game_heartbeat_seconds,json=inGameHeartbeatSeconds" json:"in_game_heartbeat_seconds,omitempty"`
	DeprecatedPublicIp          *uint32        `protobuf:"varint,4,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Rtime32ServerTime           *uint32        `protobuf:"fixed32,5,opt,name=rtime32_server_time,json=rtime32ServerTime" json:"rtime32_server_time,omitempty"`
	AccountFlags                *uint32        `protobuf:"varint,6,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	CellId                      *uint32        `protobuf:"varint,7,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	EmailDomain                 *string        `protobuf:"bytes,8,opt,name=email_domain,json=emailDomain" json:"email_domain,omitempty"`
	Steam2Ticket                []byte         `protobuf:"bytes,9,opt,name=steam2_ticket,json=steam2Ticket" json:"steam2_ticket,omitempty"`
	EresultExtended             *int32         `protobuf:"varint,10,opt,name=eresult_extended,json=eresultExtended" json:"eresult_extended,omitempty"`
	WebapiAuthenticateUserNonce *string        `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	CellIdPingThreshold         *uint32        `protobuf:"varint,12,opt,name=cell_id_ping_threshold,json=cellIdPingThreshold" json:"cell_id_ping_threshold,omitempty"`
	UsePics                     *bool          `protobuf:"varint,13,opt,name=use_pics,json=usePics" json:"use_pics,omitempty"`
	VanityUrl                   *string        `protobuf:"bytes,14,opt,name=vanity_url,json=vanityUrl" json:"vanity_url,omitempty"`
	PublicIp                    *CMsgIPAddress `protobuf:"bytes,15,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	ClientSuppliedSteamid       *uint64        `protobuf:"fixed64,20,opt,name=client_supplied_steamid,json=clientSuppliedSteamid" json:"client_supplied_steamid,omitempty"`
	IpCountryCode               *string        `protobuf:"bytes,21,opt,name=ip_country_code,json=ipCountryCode" json:"ip_country_code,omitempty"`
	ParentalSettings            []byte         `protobuf:"bytes,22,opt,name=parental_settings,json=parentalSettings" json:"parental_settings,omitempty"`
	ParentalSettingSignature    []byte         `protobuf:"bytes,23,opt,name=parental_setting_signature,json=parentalSettingSignature" json:"parental_setting_signature,omitempty"`
	CountLoginfailuresToMigrate *int32         `protobuf:"varint,24,opt,name=count_loginfailures_to_migrate,json=countLoginfailuresToMigrate" json:"count_loginfailures_to_migrate,omitempty"`
	CountDisconnectsToMigrate   *int32         `protobuf:"varint,25,opt,name=count_disconnects_to_migrate,json=countDisconnectsToMigrate" json:"count_disconnects_to_migrate,omitempty"`
	OgsDataReportTimeWindow     *int32         `protobuf:"varint,26,opt,name=ogs_data_report_time_window,json=ogsDataReportTimeWindow" json:"ogs_data_report_time_window,omitempty"`
	ClientInstanceId            *uint64        `protobuf:"varint,27,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	ForceClientUpdateCheck      *bool          `protobuf:"varint,28,opt,name=force_client_update_check,json=forceClientUpdateCheck" json:"force_client_update_check,omitempty"`
}

// Default values for CMsgClientLogonResponse fields.
const (
	Default_CMsgClientLogonResponse_Eresult = int32(2)
)

func (x *CMsgClientLogonResponse) Reset() {
	*x = CMsgClientLogonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLogonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogonResponse) ProtoMessage() {}

func (x *CMsgClientLogonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogonResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLogonResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientLogonResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLogonResponse_Eresult
}

func (x *CMsgClientLogonResponse) GetOutOfGameHeartbeatSeconds() int32 {
	if x != nil && x.OutOfGameHeartbeatSeconds != nil {
		return *x.OutOfGameHeartbeatSeconds
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetInGameHeartbeatSeconds() int32 {
	if x != nil && x.InGameHeartbeatSeconds != nil {
		return *x.InGameHeartbeatSeconds
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetRtime32ServerTime() uint32 {
	if x != nil && x.Rtime32ServerTime != nil {
		return *x.Rtime32ServerTime
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetEmailDomain() string {
	if x != nil && x.EmailDomain != nil {
		return *x.EmailDomain
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetSteam2Ticket() []byte {
	if x != nil {
		return x.Steam2Ticket
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetEresultExtended() int32 {
	if x != nil && x.EresultExtended != nil {
		return *x.EresultExtended
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetWebapiAuthenticateUserNonce() string {
	if x != nil && x.WebapiAuthenticateUserNonce != nil {
		return *x.WebapiAuthenticateUserNonce
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetCellIdPingThreshold() uint32 {
	if x != nil && x.CellIdPingThreshold != nil {
		return *x.CellIdPingThreshold
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetUsePics() bool {
	if x != nil && x.UsePics != nil {
		return *x.UsePics
	}
	return false
}

func (x *CMsgClientLogonResponse) GetVanityUrl() string {
	if x != nil && x.VanityUrl != nil {
		return *x.VanityUrl
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetClientSuppliedSteamid() uint64 {
	if x != nil && x.ClientSuppliedSteamid != nil {
		return *x.ClientSuppliedSteamid
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetIpCountryCode() string {
	if x != nil && x.IpCountryCode != nil {
		return *x.IpCountryCode
	}
	return ""
}

func (x *CMsgClientLogonResponse) GetParentalSettings() []byte {
	if x != nil {
		return x.ParentalSettings
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetParentalSettingSignature() []byte {
	if x != nil {
		return x.ParentalSettingSignature
	}
	return nil
}

func (x *CMsgClientLogonResponse) GetCountLoginfailuresToMigrate() int32 {
	if x != nil && x.CountLoginfailuresToMigrate != nil {
		return *x.CountLoginfailuresToMigrate
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetCountDisconnectsToMigrate() int32 {
	if x != nil && x.CountDisconnectsToMigrate != nil {
		return *x.CountDisconnectsToMigrate
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetOgsDataReportTimeWindow() int32 {
	if x != nil && x.OgsDataReportTimeWindow != nil {
		return *x.OgsDataReportTimeWindow
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

func (x *CMsgClientLogonResponse) GetForceClientUpdateCheck() bool {
	if x != nil && x.ForceClientUpdateCheck != nil {
		return *x.ForceClientUpdateCheck
	}
	return false
}

type CMsgClientRequestWebAPIAuthenticateUserNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenType *int32 `protobuf:"varint,1,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
}

// Default values for CMsgClientRequestWebAPIAuthenticateUserNonce fields.
const (
	Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType = int32(-1)
)

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) Reset() {
	*x = CMsgClientRequestWebAPIAuthenticateUserNonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestWebAPIAuthenticateUserNonce) ProtoMessage() {}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestWebAPIAuthenticateUserNonce.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestWebAPIAuthenticateUserNonce) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonce) GetTokenType() int32 {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonce_TokenType
}

type CMsgClientRequestWebAPIAuthenticateUserNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                     *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	WebapiAuthenticateUserNonce *string `protobuf:"bytes,11,opt,name=webapi_authenticate_user_nonce,json=webapiAuthenticateUserNonce" json:"webapi_authenticate_user_nonce,omitempty"`
	TokenType                   *int32  `protobuf:"varint,3,opt,name=token_type,json=tokenType,def=-1" json:"token_type,omitempty"`
}

// Default values for CMsgClientRequestWebAPIAuthenticateUserNonceResponse fields.
const (
	Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult   = int32(2)
	Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType = int32(-1)
)

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Reset() {
	*x = CMsgClientRequestWebAPIAuthenticateUserNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) ProtoMessage() {}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestWebAPIAuthenticateUserNonceResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestWebAPIAuthenticateUserNonceResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_Eresult
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetWebapiAuthenticateUserNonce() string {
	if x != nil && x.WebapiAuthenticateUserNonce != nil {
		return *x.WebapiAuthenticateUserNonce
	}
	return ""
}

func (x *CMsgClientRequestWebAPIAuthenticateUserNonceResponse) GetTokenType() int32 {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return Default_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_TokenType
}

type CMsgClientLogOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientLogOff) Reset() {
	*x = CMsgClientLogOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLogOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLogOff) ProtoMessage() {}

func (x *CMsgClientLogOff) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLogOff.ProtoReflect.Descriptor instead.
func (*CMsgClientLogOff) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{8}
}

type CMsgClientLoggedOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientLoggedOff fields.
const (
	Default_CMsgClientLoggedOff_Eresult = int32(2)
)

func (x *CMsgClientLoggedOff) Reset() {
	*x = CMsgClientLoggedOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLoggedOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLoggedOff) ProtoMessage() {}

func (x *CMsgClientLoggedOff) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLoggedOff.ProtoReflect.Descriptor instead.
func (*CMsgClientLoggedOff) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientLoggedOff) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLoggedOff_Eresult
}

type CMsgClientNewLoginKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId *uint32 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	LoginKey *string `protobuf:"bytes,2,opt,name=login_key,json=loginKey" json:"login_key,omitempty"`
}

func (x *CMsgClientNewLoginKey) Reset() {
	*x = CMsgClientNewLoginKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNewLoginKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNewLoginKey) ProtoMessage() {}

func (x *CMsgClientNewLoginKey) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNewLoginKey.ProtoReflect.Descriptor instead.
func (*CMsgClientNewLoginKey) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientNewLoginKey) GetUniqueId() uint32 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

func (x *CMsgClientNewLoginKey) GetLoginKey() string {
	if x != nil && x.LoginKey != nil {
		return *x.LoginKey
	}
	return ""
}

type CMsgClientNewLoginKeyAccepted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId *uint32 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
}

func (x *CMsgClientNewLoginKeyAccepted) Reset() {
	*x = CMsgClientNewLoginKeyAccepted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNewLoginKeyAccepted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNewLoginKeyAccepted) ProtoMessage() {}

func (x *CMsgClientNewLoginKeyAccepted) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNewLoginKeyAccepted.ProtoReflect.Descriptor instead.
func (*CMsgClientNewLoginKeyAccepted) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientNewLoginKeyAccepted) GetUniqueId() uint32 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

type CMsgClientAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaName                     *string `protobuf:"bytes,1,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	IpCountry                       *string `protobuf:"bytes,2,opt,name=ip_country,json=ipCountry" json:"ip_country,omitempty"`
	CountAuthedComputers            *int32  `protobuf:"varint,5,opt,name=count_authed_computers,json=countAuthedComputers" json:"count_authed_computers,omitempty"`
	AccountFlags                    *uint32 `protobuf:"varint,7,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	FacebookId                      *uint64 `protobuf:"varint,8,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
	FacebookName                    *string `protobuf:"bytes,9,opt,name=facebook_name,json=facebookName" json:"facebook_name,omitempty"`
	SteamguardNotifyNewmachines     *bool   `protobuf:"varint,14,opt,name=steamguard_notify_newmachines,json=steamguardNotifyNewmachines" json:"steamguard_notify_newmachines,omitempty"`
	SteamguardMachineNameUserChosen *string `protobuf:"bytes,15,opt,name=steamguard_machine_name_user_chosen,json=steamguardMachineNameUserChosen" json:"steamguard_machine_name_user_chosen,omitempty"`
	IsPhoneVerified                 *bool   `protobuf:"varint,16,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	TwoFactorState                  *uint32 `protobuf:"varint,17,opt,name=two_factor_state,json=twoFactorState" json:"two_factor_state,omitempty"`
	IsPhoneIdentifying              *bool   `protobuf:"varint,18,opt,name=is_phone_identifying,json=isPhoneIdentifying" json:"is_phone_identifying,omitempty"`
	IsPhoneNeedingReverify          *bool   `protobuf:"varint,19,opt,name=is_phone_needing_reverify,json=isPhoneNeedingReverify" json:"is_phone_needing_reverify,omitempty"`
}

func (x *CMsgClientAccountInfo) Reset() {
	*x = CMsgClientAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAccountInfo) ProtoMessage() {}

func (x *CMsgClientAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAccountInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientAccountInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientAccountInfo) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetIpCountry() string {
	if x != nil && x.IpCountry != nil {
		return *x.IpCountry
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetCountAuthedComputers() int32 {
	if x != nil && x.CountAuthedComputers != nil {
		return *x.CountAuthedComputers
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetFacebookId() uint64 {
	if x != nil && x.FacebookId != nil {
		return *x.FacebookId
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetFacebookName() string {
	if x != nil && x.FacebookName != nil {
		return *x.FacebookName
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetSteamguardNotifyNewmachines() bool {
	if x != nil && x.SteamguardNotifyNewmachines != nil {
		return *x.SteamguardNotifyNewmachines
	}
	return false
}

func (x *CMsgClientAccountInfo) GetSteamguardMachineNameUserChosen() string {
	if x != nil && x.SteamguardMachineNameUserChosen != nil {
		return *x.SteamguardMachineNameUserChosen
	}
	return ""
}

func (x *CMsgClientAccountInfo) GetIsPhoneVerified() bool {
	if x != nil && x.IsPhoneVerified != nil {
		return *x.IsPhoneVerified
	}
	return false
}

func (x *CMsgClientAccountInfo) GetTwoFactorState() uint32 {
	if x != nil && x.TwoFactorState != nil {
		return *x.TwoFactorState
	}
	return 0
}

func (x *CMsgClientAccountInfo) GetIsPhoneIdentifying() bool {
	if x != nil && x.IsPhoneIdentifying != nil {
		return *x.IsPhoneIdentifying
	}
	return false
}

func (x *CMsgClientAccountInfo) GetIsPhoneNeedingReverify() bool {
	if x != nil && x.IsPhoneNeedingReverify != nil {
		return *x.IsPhoneNeedingReverify
	}
	return false
}

type CMsgClientChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CMsgClientChallengeRequest) Reset() {
	*x = CMsgClientChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChallengeRequest) ProtoMessage() {}

func (x *CMsgClientChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChallengeRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientChallengeRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientChallengeRequest) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgClientChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *uint64 `protobuf:"fixed64,1,opt,name=challenge" json:"challenge,omitempty"`
}

func (x *CMsgClientChallengeResponse) Reset() {
	*x = CMsgClientChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChallengeResponse) ProtoMessage() {}

func (x *CMsgClientChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_login_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientChallengeResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_login_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientChallengeResponse) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

var File_steam_steammessages_clientserver_login_proto protoreflect.FileDescriptor

var file_steam_steammessages_clientserver_login_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0x1e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x22, 0x5c, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x6d, 0x61, 0x63, 0x22, 0xe7, 0x12, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x74, 0x75, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x66, 0x75,
	0x73, 0x74, 0x75, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x31, 0x30,
	0x12, 0x48, 0x0a, 0x15, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x71, 0x6f, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x75, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x16, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x1c, 0x77, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x77, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6e,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x74, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x70, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x74, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x32, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x6e, 0x79, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x6f, 0x6e,
	0x79, 0x50, 0x73, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6f,
	0x6e, 0x79, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x6e, 0x79, 0x50, 0x73, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x27, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x73, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x73, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x66, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x6e, 0x79, 0x5f, 0x70, 0x73, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x6e,
	0x79, 0x50, 0x73, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x6f, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x4c, 0x6f, 0x67,
	0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x16, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x14, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0xa5, 0x09, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x33, 0x32, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x77, 0x65, 0x62, 0x61,
	0x70, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63,
	0x65, 0x6c, 0x6c, 0x49, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x50, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x67, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x34, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x1e, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x4f, 0x66, 0x66, 0x22, 0x32, 0x0a, 0x13,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x51, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65,
	0x77, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x22, 0xcf, 0x04, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x1d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4e, 0x65, 0x77, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x22, 0x36, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x37, 0x48, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01,
	0x00,
}

var (
	file_steam_steammessages_clientserver_login_proto_rawDescOnce sync.Once
	file_steam_steammessages_clientserver_login_proto_rawDescData = file_steam_steammessages_clientserver_login_proto_rawDesc
)

func file_steam_steammessages_clientserver_login_proto_rawDescGZIP() []byte {
	file_steam_steammessages_clientserver_login_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_clientserver_login_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_clientserver_login_proto_rawDescData)
	})
	return file_steam_steammessages_clientserver_login_proto_rawDescData
}

var file_steam_steammessages_clientserver_login_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_steam_steammessages_clientserver_login_proto_goTypes = []interface{}{
	(*CMsgClientHeartBeat)(nil),                                  // 0: steam.CMsgClientHeartBeat
	(*CMsgClientServerTimestampRequest)(nil),                     // 1: steam.CMsgClientServerTimestampRequest
	(*CMsgClientServerTimestampResponse)(nil),                    // 2: steam.CMsgClientServerTimestampResponse
	(*CMsgClientSecret)(nil),                                     // 3: steam.CMsgClientSecret
	(*CMsgClientLogon)(nil),                                      // 4: steam.CMsgClientLogon
	(*CMsgClientLogonResponse)(nil),                              // 5: steam.CMsgClientLogonResponse
	(*CMsgClientRequestWebAPIAuthenticateUserNonce)(nil),         // 6: steam.CMsgClientRequestWebAPIAuthenticateUserNonce
	(*CMsgClientRequestWebAPIAuthenticateUserNonceResponse)(nil), // 7: steam.CMsgClientRequestWebAPIAuthenticateUserNonceResponse
	(*CMsgClientLogOff)(nil),                                     // 8: steam.CMsgClientLogOff
	(*CMsgClientLoggedOff)(nil),                                  // 9: steam.CMsgClientLoggedOff
	(*CMsgClientNewLoginKey)(nil),                                // 10: steam.CMsgClientNewLoginKey
	(*CMsgClientNewLoginKeyAccepted)(nil),                        // 11: steam.CMsgClientNewLoginKeyAccepted
	(*CMsgClientAccountInfo)(nil),                                // 12: steam.CMsgClientAccountInfo
	(*CMsgClientChallengeRequest)(nil),                           // 13: steam.CMsgClientChallengeRequest
	(*CMsgClientChallengeResponse)(nil),                          // 14: steam.CMsgClientChallengeResponse
	(*CMsgIPAddress)(nil),                                        // 15: steam.CMsgIPAddress
}
var file_steam_steammessages_clientserver_login_proto_depIdxs = []int32{
	15, // 0: steam.CMsgClientLogon.obfuscated_private_ip:type_name -> steam.CMsgIPAddress
	15, // 1: steam.CMsgClientLogon.public_ip:type_name -> steam.CMsgIPAddress
	3,  // 2: steam.CMsgClientLogon.embedded_client_secret:type_name -> steam.CMsgClientSecret
	15, // 3: steam.CMsgClientLogonResponse.public_ip:type_name -> steam.CMsgIPAddress
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_steam_steammessages_clientserver_login_proto_init() }
func file_steam_steammessages_clientserver_login_proto_init() {
	if File_steam_steammessages_clientserver_login_proto != nil {
		return
	}
	file_steam_steammessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_clientserver_login_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientHeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServerTimestampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServerTimestampResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLogon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLogonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestWebAPIAuthenticateUserNonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestWebAPIAuthenticateUserNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLogOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLoggedOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNewLoginKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNewLoginKeyAccepted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_login_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_clientserver_login_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_clientserver_login_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_clientserver_login_proto_depIdxs,
		MessageInfos:      file_steam_steammessages_clientserver_login_proto_msgTypes,
	}.Build()
	File_steam_steammessages_clientserver_login_proto = out.File
	file_steam_steammessages_clientserver_login_proto_rawDesc = nil
	file_steam_steammessages_clientserver_login_proto_goTypes = nil
	file_steam_steammessages_clientserver_login_proto_depIdxs = nil
}
