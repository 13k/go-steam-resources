// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_deviceauth.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CDeviceAuth_GetOwnAuthorizedDevices_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool   `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

type CDeviceAuth_GetOwnAuthorizedDevices_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response) GetDevices() []*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CDeviceAuth_AcceptAuthorizationRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64 `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	AuthCode        *uint64 `protobuf:"fixed64,3,opt,name=auth_code,json=authCode" json:"auth_code,omitempty"`
	FromSteamid     *uint64 `protobuf:"fixed64,4,opt,name=from_steamid,json=fromSteamid" json:"from_steamid,omitempty"`
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) Reset() {
	*x = CDeviceAuth_AcceptAuthorizationRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AcceptAuthorizationRequest_Request) ProtoMessage() {}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AcceptAuthorizationRequest_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AcceptAuthorizationRequest_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetAuthCode() uint64 {
	if x != nil && x.AuthCode != nil {
		return *x.AuthCode
	}
	return 0
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Request) GetFromSteamid() uint64 {
	if x != nil && x.FromSteamid != nil {
		return *x.FromSteamid
	}
	return 0
}

type CDeviceAuth_AcceptAuthorizationRequest_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) Reset() {
	*x = CDeviceAuth_AcceptAuthorizationRequest_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AcceptAuthorizationRequest_Response) ProtoMessage() {}

func (x *CDeviceAuth_AcceptAuthorizationRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AcceptAuthorizationRequest_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AcceptAuthorizationRequest_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{3}
}

type CDeviceAuth_AuthorizeRemoteDevice_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64 `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) Reset() {
	*x = CDeviceAuth_AuthorizeRemoteDevice_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AuthorizeRemoteDevice_Request) ProtoMessage() {}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AuthorizeRemoteDevice_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AuthorizeRemoteDevice_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

type CDeviceAuth_AuthorizeRemoteDevice_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) Reset() {
	*x = CDeviceAuth_AuthorizeRemoteDevice_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AuthorizeRemoteDevice_Response) ProtoMessage() {}

func (x *CDeviceAuth_AuthorizeRemoteDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AuthorizeRemoteDevice_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AuthorizeRemoteDevice_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{5}
}

type CDeviceAuth_DeauthorizeRemoteDevice_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthDeviceToken *uint64 `protobuf:"fixed64,2,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) Reset() {
	*x = CDeviceAuth_DeauthorizeRemoteDevice_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_DeauthorizeRemoteDevice_Request) ProtoMessage() {}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_DeauthorizeRemoteDevice_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_DeauthorizeRemoteDevice_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Request) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

type CDeviceAuth_DeauthorizeRemoteDevice_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) Reset() {
	*x = CDeviceAuth_DeauthorizeRemoteDevice_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_DeauthorizeRemoteDevice_Response) ProtoMessage() {}

func (x *CDeviceAuth_DeauthorizeRemoteDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_DeauthorizeRemoteDevice_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_DeauthorizeRemoteDevice_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{7}
}

type CDeviceAuth_GetUsedAuthorizedDevices_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CDeviceAuth_GetUsedAuthorizedDevices_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response) GetDevices() []*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CDeviceAuth_GetAuthorizedBorrowers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool   `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
	IncludePending  *bool   `protobuf:"varint,3,opt,name=include_pending,json=includePending" json:"include_pending,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Request) GetIncludePending() bool {
	if x != nil && x.IncludePending != nil {
		return *x.IncludePending
	}
	return false
}

type CDeviceAuth_GetAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Borrowers []*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower `protobuf:"bytes,1,rep,name=borrowers" json:"borrowers,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response) GetBorrowers() []*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower {
	if x != nil {
		return x.Borrowers
	}
	return nil
}

type CDeviceAuth_AddAuthorizedBorrowers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SteamidBorrower []uint64 `protobuf:"fixed64,2,rep,name=steamid_borrower,json=steamidBorrower" json:"steamid_borrower,omitempty"`
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_AddAuthorizedBorrowers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AddAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AddAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AddAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Request) GetSteamidBorrower() []uint64 {
	if x != nil {
		return x.SteamidBorrower
	}
	return nil
}

type CDeviceAuth_AddAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsToWait *int32 `protobuf:"varint,1,opt,name=seconds_to_wait,json=secondsToWait" json:"seconds_to_wait,omitempty"`
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_AddAuthorizedBorrowers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_AddAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_AddAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_AddAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CDeviceAuth_AddAuthorizedBorrowers_Response) GetSecondsToWait() int32 {
	if x != nil && x.SecondsToWait != nil {
		return *x.SecondsToWait
	}
	return 0
}

type CDeviceAuth_RemoveAuthorizedBorrowers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SteamidBorrower []uint64 `protobuf:"fixed64,2,rep,name=steamid_borrower,json=steamidBorrower" json:"steamid_borrower,omitempty"`
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) Reset() {
	*x = CDeviceAuth_RemoveAuthorizedBorrowers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_RemoveAuthorizedBorrowers_Request) ProtoMessage() {}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_RemoveAuthorizedBorrowers_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_RemoveAuthorizedBorrowers_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Request) GetSteamidBorrower() []uint64 {
	if x != nil {
		return x.SteamidBorrower
	}
	return nil
}

type CDeviceAuth_RemoveAuthorizedBorrowers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) Reset() {
	*x = CDeviceAuth_RemoveAuthorizedBorrowers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_RemoveAuthorizedBorrowers_Response) ProtoMessage() {}

func (x *CDeviceAuth_RemoveAuthorizedBorrowers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_RemoveAuthorizedBorrowers_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_RemoveAuthorizedBorrowers_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{15}
}

type CDeviceAuth_GetAuthorizedAsBorrower_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IncludeCanceled *bool   `protobuf:"varint,2,opt,name=include_canceled,json=includeCanceled" json:"include_canceled,omitempty"`
	IncludePending  *bool   `protobuf:"varint,3,opt,name=include_pending,json=includePending" json:"include_pending,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetIncludeCanceled() bool {
	if x != nil && x.IncludeCanceled != nil {
		return *x.IncludeCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Request) GetIncludePending() bool {
	if x != nil && x.IncludePending != nil {
		return *x.IncludePending
	}
	return false
}

type CDeviceAuth_GetAuthorizedAsBorrower_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lenders []*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender `protobuf:"bytes,1,rep,name=lenders" json:"lenders,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response) GetLenders() []*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender {
	if x != nil {
		return x.Lenders
	}
	return nil
}

type CDeviceAuth_GetExcludedGamesInLibrary_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CDeviceAuth_GetExcludedGamesInLibrary_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludedGames []*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame `protobuf:"bytes,1,rep,name=excluded_games,json=excludedGames" json:"excluded_games,omitempty"`
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response) GetExcludedGames() []*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame {
	if x != nil {
		return x.ExcludedGames
	}
	return nil
}

type CDeviceAuth_GetBorrowerPlayHistory_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Request) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Request.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CDeviceAuth_GetBorrowerPlayHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LenderHistory []*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory `protobuf:"bytes,1,rep,name=lender_history,json=lenderHistory" json:"lender_history,omitempty"`
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response) GetLenderHistory() []*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory {
	if x != nil {
		return x.LenderHistory
	}
	return nil
}

type CDeviceAuth_GetOwnAuthorizedDevices_Response_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthDeviceToken *uint64 `protobuf:"fixed64,1,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	DeviceName      *string `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	IsPending       *bool   `protobuf:"varint,3,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled      *bool   `protobuf:"varint,4,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	LastTimeUsed    *uint32 `protobuf:"varint,5,opt,name=last_time_used,json=lastTimeUsed" json:"last_time_used,omitempty"`
	LastBorrowerId  *uint64 `protobuf:"fixed64,6,opt,name=last_borrower_id,json=lastBorrowerId" json:"last_borrower_id,omitempty"`
	LastAppPlayed   *uint32 `protobuf:"varint,7,opt,name=last_app_played,json=lastAppPlayed" json:"last_app_played,omitempty"`
	IsLimited       *bool   `protobuf:"varint,8,opt,name=is_limited,json=isLimited" json:"is_limited,omitempty"`
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) Reset() {
	*x = CDeviceAuth_GetOwnAuthorizedDevices_Response_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) ProtoMessage() {}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetOwnAuthorizedDevices_Response_Device.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastTimeUsed() uint32 {
	if x != nil && x.LastTimeUsed != nil {
		return *x.LastTimeUsed
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastBorrowerId() uint64 {
	if x != nil && x.LastBorrowerId != nil {
		return *x.LastBorrowerId
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetLastAppPlayed() uint32 {
	if x != nil && x.LastAppPlayed != nil {
		return *x.LastAppPlayed
	}
	return 0
}

func (x *CDeviceAuth_GetOwnAuthorizedDevices_Response_Device) GetIsLimited() bool {
	if x != nil && x.IsLimited != nil {
		return *x.IsLimited
	}
	return false
}

type CDeviceAuth_GetUsedAuthorizedDevices_Response_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthDeviceToken *uint64 `protobuf:"fixed64,1,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	DeviceName      *string `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	OwnerSteamid    *uint64 `protobuf:"fixed64,3,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	LastTimeUsed    *uint32 `protobuf:"varint,4,opt,name=last_time_used,json=lastTimeUsed" json:"last_time_used,omitempty"`
	LastAppPlayed   *uint32 `protobuf:"varint,5,opt,name=last_app_played,json=lastAppPlayed" json:"last_app_played,omitempty"`
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) Reset() {
	*x = CDeviceAuth_GetUsedAuthorizedDevices_Response_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) ProtoMessage() {}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetUsedAuthorizedDevices_Response_Device.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetLastTimeUsed() uint32 {
	if x != nil && x.LastTimeUsed != nil {
		return *x.LastTimeUsed
	}
	return 0
}

func (x *CDeviceAuth_GetUsedAuthorizedDevices_Response_Device) GetLastAppPlayed() uint32 {
	if x != nil && x.LastAppPlayed != nil {
		return *x.LastAppPlayed
	}
	return 0
}

type CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	IsPending   *bool   `protobuf:"varint,2,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled  *bool   `protobuf:"varint,3,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	TimeCreated *uint32 `protobuf:"varint,4,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) Reset() {
	*x = CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

type CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	TimeCreated *uint32 `protobuf:"varint,2,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	IsPending   *bool   `protobuf:"varint,3,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	IsCanceled  *bool   `protobuf:"varint,4,opt,name=is_canceled,json=isCanceled" json:"is_canceled,omitempty"`
	IsUsed      *bool   `protobuf:"varint,5,opt,name=is_used,json=isUsed" json:"is_used,omitempty"`
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) Reset() {
	*x = CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) ProtoMessage() {}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsCanceled() bool {
	if x != nil && x.IsCanceled != nil {
		return *x.IsCanceled
	}
	return false
}

func (x *CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender) GetIsUsed() bool {
	if x != nil && x.IsUsed != nil {
		return *x.IsUsed
	}
	return false
}

type CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GameName        *string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	VacBanned       *bool   `protobuf:"varint,3,opt,name=vac_banned,json=vacBanned" json:"vac_banned,omitempty"`
	PackageExcluded *bool   `protobuf:"varint,4,opt,name=package_excluded,json=packageExcluded" json:"package_excluded,omitempty"`
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) Reset() {
	*x = CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) ProtoMessage() {}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetVacBanned() bool {
	if x != nil && x.VacBanned != nil {
		return *x.VacBanned
	}
	return false
}

func (x *CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame) GetPackageExcluded() bool {
	if x != nil && x.PackageExcluded != nil {
		return *x.PackageExcluded
	}
	return false
}

type CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TimeLast  *uint32 `protobuf:"varint,2,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	TimeTotal *uint32 `protobuf:"varint,3,opt,name=time_total,json=timeTotal" json:"time_total,omitempty"`
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetTimeLast() uint32 {
	if x != nil && x.TimeLast != nil {
		return *x.TimeLast
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory) GetTimeTotal() uint32 {
	if x != nil && x.TimeTotal != nil {
		return *x.TimeTotal
	}
	return 0
}

type CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64                                                    `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	GameHistory []*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory `protobuf:"bytes,2,rep,name=game_history,json=gameHistory" json:"game_history,omitempty"`
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) Reset() {
	*x = CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) ProtoMessage() {}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory.ProtoReflect.Descriptor instead.
func (*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP(), []int{21, 1}
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory) GetGameHistory() []*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory {
	if x != nil {
		return x.GameHistory
	}
	return nil
}

var File_steam_client_steammessages_deviceauth_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_deviceauth_steamclient_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x72, 0x0a, 0x2b, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x22, 0xba, 0x03, 0x0a, 0x2c, 0x43, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x2f,
	0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x71, 0x0a, 0x29, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x2b, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f,
	0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x5f, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x2c, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22,
	0xd8, 0x02, 0x0a, 0x2d, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0xc8, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x2a, 0x43,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x02, 0x0a, 0x2b, 0x43, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x1a, 0x87, 0x01, 0x0a, 0x08, 0x42, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x2a, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x42, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x2b, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x74, 0x0a,
	0x2d, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x2b, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xac, 0x02, 0x0a, 0x2c, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x73,
	0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x07, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x22, 0x49, 0x0a, 0x2d, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xb0, 0x02,
	0x0a, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x63, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x63, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x22, 0x46, 0x0a, 0x2a, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x2b, 0x43, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6c, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x5f, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x93, 0x01, 0x0a, 0x0d, 0x4c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x32,
	0xe0, 0x11, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0xb4,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x5f, 0x47, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x20, 0x61, 0x6e,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb5,
	0x01, 0x0a, 0x17, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x5f, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x20, 0x6f, 0x77,
	0x6e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd5, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xb5,
	0x18, 0x3c, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x62, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x12, 0xcc,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0x82, 0xb5, 0x18, 0x39, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0xca, 0x01,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x41, 0x64,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xb5, 0x18, 0x37, 0x41, 0x64, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x73, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x47, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x73,
	0x20, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12, 0xc9, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x49, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x49, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x47, 0x65, 0x74, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x20, 0x61, 0x73, 0x20, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x24, 0x82, 0xb5,
	0x18, 0x20, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x3c, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescData = file_steam_client_steammessages_deviceauth_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_deviceauth_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_steam_client_steammessages_deviceauth_steamclient_proto_goTypes = []interface{}{
	(*CDeviceAuth_GetOwnAuthorizedDevices_Request)(nil),                 // 0: steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Request
	(*CDeviceAuth_GetOwnAuthorizedDevices_Response)(nil),                // 1: steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Response
	(*CDeviceAuth_AcceptAuthorizationRequest_Request)(nil),              // 2: steam.client.CDeviceAuth_AcceptAuthorizationRequest_Request
	(*CDeviceAuth_AcceptAuthorizationRequest_Response)(nil),             // 3: steam.client.CDeviceAuth_AcceptAuthorizationRequest_Response
	(*CDeviceAuth_AuthorizeRemoteDevice_Request)(nil),                   // 4: steam.client.CDeviceAuth_AuthorizeRemoteDevice_Request
	(*CDeviceAuth_AuthorizeRemoteDevice_Response)(nil),                  // 5: steam.client.CDeviceAuth_AuthorizeRemoteDevice_Response
	(*CDeviceAuth_DeauthorizeRemoteDevice_Request)(nil),                 // 6: steam.client.CDeviceAuth_DeauthorizeRemoteDevice_Request
	(*CDeviceAuth_DeauthorizeRemoteDevice_Response)(nil),                // 7: steam.client.CDeviceAuth_DeauthorizeRemoteDevice_Response
	(*CDeviceAuth_GetUsedAuthorizedDevices_Request)(nil),                // 8: steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Request
	(*CDeviceAuth_GetUsedAuthorizedDevices_Response)(nil),               // 9: steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Response
	(*CDeviceAuth_GetAuthorizedBorrowers_Request)(nil),                  // 10: steam.client.CDeviceAuth_GetAuthorizedBorrowers_Request
	(*CDeviceAuth_GetAuthorizedBorrowers_Response)(nil),                 // 11: steam.client.CDeviceAuth_GetAuthorizedBorrowers_Response
	(*CDeviceAuth_AddAuthorizedBorrowers_Request)(nil),                  // 12: steam.client.CDeviceAuth_AddAuthorizedBorrowers_Request
	(*CDeviceAuth_AddAuthorizedBorrowers_Response)(nil),                 // 13: steam.client.CDeviceAuth_AddAuthorizedBorrowers_Response
	(*CDeviceAuth_RemoveAuthorizedBorrowers_Request)(nil),               // 14: steam.client.CDeviceAuth_RemoveAuthorizedBorrowers_Request
	(*CDeviceAuth_RemoveAuthorizedBorrowers_Response)(nil),              // 15: steam.client.CDeviceAuth_RemoveAuthorizedBorrowers_Response
	(*CDeviceAuth_GetAuthorizedAsBorrower_Request)(nil),                 // 16: steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Request
	(*CDeviceAuth_GetAuthorizedAsBorrower_Response)(nil),                // 17: steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Response
	(*CDeviceAuth_GetExcludedGamesInLibrary_Request)(nil),               // 18: steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Request
	(*CDeviceAuth_GetExcludedGamesInLibrary_Response)(nil),              // 19: steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Response
	(*CDeviceAuth_GetBorrowerPlayHistory_Request)(nil),                  // 20: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Request
	(*CDeviceAuth_GetBorrowerPlayHistory_Response)(nil),                 // 21: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response
	(*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device)(nil),         // 22: steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device
	(*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device)(nil),        // 23: steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device
	(*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower)(nil),        // 24: steam.client.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower
	(*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender)(nil),         // 25: steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender
	(*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame)(nil), // 26: steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame
	(*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory)(nil),     // 27: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory
	(*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory)(nil),   // 28: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory
}
var file_steam_client_steammessages_deviceauth_steamclient_proto_depIdxs = []int32{
	22, // 0: steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices:type_name -> steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device
	23, // 1: steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices:type_name -> steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device
	24, // 2: steam.client.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers:type_name -> steam.client.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower
	25, // 3: steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders:type_name -> steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender
	26, // 4: steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games:type_name -> steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame
	28, // 5: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history:type_name -> steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory
	27, // 6: steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history:type_name -> steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory
	0,  // 7: steam.client.DeviceAuth.GetOwnAuthorizedDevices:input_type -> steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Request
	2,  // 8: steam.client.DeviceAuth.AcceptAuthorizationRequest:input_type -> steam.client.CDeviceAuth_AcceptAuthorizationRequest_Request
	4,  // 9: steam.client.DeviceAuth.AuthorizeRemoteDevice:input_type -> steam.client.CDeviceAuth_AuthorizeRemoteDevice_Request
	6,  // 10: steam.client.DeviceAuth.DeauthorizeRemoteDevice:input_type -> steam.client.CDeviceAuth_DeauthorizeRemoteDevice_Request
	8,  // 11: steam.client.DeviceAuth.GetUsedAuthorizedDevices:input_type -> steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Request
	10, // 12: steam.client.DeviceAuth.GetAuthorizedBorrowers:input_type -> steam.client.CDeviceAuth_GetAuthorizedBorrowers_Request
	12, // 13: steam.client.DeviceAuth.AddAuthorizedBorrowers:input_type -> steam.client.CDeviceAuth_AddAuthorizedBorrowers_Request
	14, // 14: steam.client.DeviceAuth.RemoveAuthorizedBorrowers:input_type -> steam.client.CDeviceAuth_RemoveAuthorizedBorrowers_Request
	16, // 15: steam.client.DeviceAuth.GetAuthorizedAsBorrower:input_type -> steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Request
	18, // 16: steam.client.DeviceAuth.GetExcludedGamesInLibrary:input_type -> steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Request
	20, // 17: steam.client.DeviceAuth.GetBorrowerPlayHistory:input_type -> steam.client.CDeviceAuth_GetBorrowerPlayHistory_Request
	1,  // 18: steam.client.DeviceAuth.GetOwnAuthorizedDevices:output_type -> steam.client.CDeviceAuth_GetOwnAuthorizedDevices_Response
	3,  // 19: steam.client.DeviceAuth.AcceptAuthorizationRequest:output_type -> steam.client.CDeviceAuth_AcceptAuthorizationRequest_Response
	5,  // 20: steam.client.DeviceAuth.AuthorizeRemoteDevice:output_type -> steam.client.CDeviceAuth_AuthorizeRemoteDevice_Response
	7,  // 21: steam.client.DeviceAuth.DeauthorizeRemoteDevice:output_type -> steam.client.CDeviceAuth_DeauthorizeRemoteDevice_Response
	9,  // 22: steam.client.DeviceAuth.GetUsedAuthorizedDevices:output_type -> steam.client.CDeviceAuth_GetUsedAuthorizedDevices_Response
	11, // 23: steam.client.DeviceAuth.GetAuthorizedBorrowers:output_type -> steam.client.CDeviceAuth_GetAuthorizedBorrowers_Response
	13, // 24: steam.client.DeviceAuth.AddAuthorizedBorrowers:output_type -> steam.client.CDeviceAuth_AddAuthorizedBorrowers_Response
	15, // 25: steam.client.DeviceAuth.RemoveAuthorizedBorrowers:output_type -> steam.client.CDeviceAuth_RemoveAuthorizedBorrowers_Response
	17, // 26: steam.client.DeviceAuth.GetAuthorizedAsBorrower:output_type -> steam.client.CDeviceAuth_GetAuthorizedAsBorrower_Response
	19, // 27: steam.client.DeviceAuth.GetExcludedGamesInLibrary:output_type -> steam.client.CDeviceAuth_GetExcludedGamesInLibrary_Response
	21, // 28: steam.client.DeviceAuth.GetBorrowerPlayHistory:output_type -> steam.client.CDeviceAuth_GetBorrowerPlayHistory_Response
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_deviceauth_steamclient_proto_init() }
func file_steam_client_steammessages_deviceauth_steamclient_proto_init() {
	if File_steam_client_steammessages_deviceauth_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetOwnAuthorizedDevices_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetOwnAuthorizedDevices_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AcceptAuthorizationRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AcceptAuthorizationRequest_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AuthorizeRemoteDevice_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AuthorizeRemoteDevice_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_DeauthorizeRemoteDevice_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_DeauthorizeRemoteDevice_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetUsedAuthorizedDevices_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetUsedAuthorizedDevices_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedBorrowers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedBorrowers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AddAuthorizedBorrowers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_AddAuthorizedBorrowers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_RemoveAuthorizedBorrowers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_RemoveAuthorizedBorrowers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedAsBorrower_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedAsBorrower_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetExcludedGamesInLibrary_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetExcludedGamesInLibrary_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetBorrowerPlayHistory_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetBorrowerPlayHistory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetOwnAuthorizedDevices_Response_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetUsedAuthorizedDevices_Response_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_deviceauth_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_deviceauth_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_deviceauth_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_deviceauth_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_deviceauth_steamclient_proto = out.File
	file_steam_client_steammessages_deviceauth_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_deviceauth_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_deviceauth_steamclient_proto_depIdxs = nil
}
