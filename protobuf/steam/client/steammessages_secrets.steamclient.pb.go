// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_secrets.steamclient.proto

package client // import "github.com/13k/go-steam-resources/protobuf/steam/client"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EKeyEscrowUsage int32

const (
	EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice EKeyEscrowUsage = 0
)

var EKeyEscrowUsage_name = map[int32]string{
	0: "k_EKeyEscrowUsageStreamingDevice",
}
var EKeyEscrowUsage_value = map[string]int32{
	"k_EKeyEscrowUsageStreamingDevice": 0,
}

func (x EKeyEscrowUsage) Enum() *EKeyEscrowUsage {
	p := new(EKeyEscrowUsage)
	*p = x
	return p
}
func (x EKeyEscrowUsage) String() string {
	return proto.EnumName(EKeyEscrowUsage_name, int32(x))
}
func (x *EKeyEscrowUsage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EKeyEscrowUsage_value, data, "EKeyEscrowUsage")
	if err != nil {
		return err
	}
	*x = EKeyEscrowUsage(value)
	return nil
}
func (EKeyEscrowUsage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4, []int{0}
}

type CKeyEscrow_Request struct {
	RsaOaepShaTicket     []byte           `protobuf:"bytes,1,opt,name=rsa_oaep_sha_ticket,json=rsaOaepShaTicket" json:"rsa_oaep_sha_ticket,omitempty"`
	Password             []byte           `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Usage                *EKeyEscrowUsage `protobuf:"varint,3,opt,name=usage,enum=EKeyEscrowUsage,def=0" json:"usage,omitempty"`
	DeviceName           *string          `protobuf:"bytes,4,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CKeyEscrow_Request) Reset()         { *m = CKeyEscrow_Request{} }
func (m *CKeyEscrow_Request) String() string { return proto.CompactTextString(m) }
func (*CKeyEscrow_Request) ProtoMessage()    {}
func (*CKeyEscrow_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4, []int{0}
}
func (m *CKeyEscrow_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CKeyEscrow_Request.Unmarshal(m, b)
}
func (m *CKeyEscrow_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CKeyEscrow_Request.Marshal(b, m, deterministic)
}
func (dst *CKeyEscrow_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CKeyEscrow_Request.Merge(dst, src)
}
func (m *CKeyEscrow_Request) XXX_Size() int {
	return xxx_messageInfo_CKeyEscrow_Request.Size(m)
}
func (m *CKeyEscrow_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CKeyEscrow_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CKeyEscrow_Request proto.InternalMessageInfo

const Default_CKeyEscrow_Request_Usage EKeyEscrowUsage = EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice

func (m *CKeyEscrow_Request) GetRsaOaepShaTicket() []byte {
	if m != nil {
		return m.RsaOaepShaTicket
	}
	return nil
}

func (m *CKeyEscrow_Request) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CKeyEscrow_Request) GetUsage() EKeyEscrowUsage {
	if m != nil && m.Usage != nil {
		return *m.Usage
	}
	return Default_CKeyEscrow_Request_Usage
}

func (m *CKeyEscrow_Request) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

type CKeyEscrow_Ticket struct {
	Password             []byte           `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Identifier           *uint64          `protobuf:"varint,2,opt,name=identifier" json:"identifier,omitempty"`
	Payload              []byte           `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Timestamp            *uint32          `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Usage                *EKeyEscrowUsage `protobuf:"varint,5,opt,name=usage,enum=EKeyEscrowUsage,def=0" json:"usage,omitempty"`
	DeviceName           *string          `protobuf:"bytes,6,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	DeviceModel          *string          `protobuf:"bytes,7,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	DeviceSerial         *string          `protobuf:"bytes,8,opt,name=device_serial,json=deviceSerial" json:"device_serial,omitempty"`
	DeviceProvisioningId *uint32          `protobuf:"varint,9,opt,name=device_provisioning_id,json=deviceProvisioningId" json:"device_provisioning_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CKeyEscrow_Ticket) Reset()         { *m = CKeyEscrow_Ticket{} }
func (m *CKeyEscrow_Ticket) String() string { return proto.CompactTextString(m) }
func (*CKeyEscrow_Ticket) ProtoMessage()    {}
func (*CKeyEscrow_Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4, []int{1}
}
func (m *CKeyEscrow_Ticket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CKeyEscrow_Ticket.Unmarshal(m, b)
}
func (m *CKeyEscrow_Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CKeyEscrow_Ticket.Marshal(b, m, deterministic)
}
func (dst *CKeyEscrow_Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CKeyEscrow_Ticket.Merge(dst, src)
}
func (m *CKeyEscrow_Ticket) XXX_Size() int {
	return xxx_messageInfo_CKeyEscrow_Ticket.Size(m)
}
func (m *CKeyEscrow_Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_CKeyEscrow_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_CKeyEscrow_Ticket proto.InternalMessageInfo

const Default_CKeyEscrow_Ticket_Usage EKeyEscrowUsage = EKeyEscrowUsage_k_EKeyEscrowUsageStreamingDevice

func (m *CKeyEscrow_Ticket) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CKeyEscrow_Ticket) GetIdentifier() uint64 {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return 0
}

func (m *CKeyEscrow_Ticket) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CKeyEscrow_Ticket) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CKeyEscrow_Ticket) GetUsage() EKeyEscrowUsage {
	if m != nil && m.Usage != nil {
		return *m.Usage
	}
	return Default_CKeyEscrow_Ticket_Usage
}

func (m *CKeyEscrow_Ticket) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceSerial() string {
	if m != nil && m.DeviceSerial != nil {
		return *m.DeviceSerial
	}
	return ""
}

func (m *CKeyEscrow_Ticket) GetDeviceProvisioningId() uint32 {
	if m != nil && m.DeviceProvisioningId != nil {
		return *m.DeviceProvisioningId
	}
	return 0
}

type CKeyEscrow_Response struct {
	Ticket               *CKeyEscrow_Ticket `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CKeyEscrow_Response) Reset()         { *m = CKeyEscrow_Response{} }
func (m *CKeyEscrow_Response) String() string { return proto.CompactTextString(m) }
func (*CKeyEscrow_Response) ProtoMessage()    {}
func (*CKeyEscrow_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4, []int{2}
}
func (m *CKeyEscrow_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CKeyEscrow_Response.Unmarshal(m, b)
}
func (m *CKeyEscrow_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CKeyEscrow_Response.Marshal(b, m, deterministic)
}
func (dst *CKeyEscrow_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CKeyEscrow_Response.Merge(dst, src)
}
func (m *CKeyEscrow_Response) XXX_Size() int {
	return xxx_messageInfo_CKeyEscrow_Response.Size(m)
}
func (m *CKeyEscrow_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CKeyEscrow_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CKeyEscrow_Response proto.InternalMessageInfo

func (m *CKeyEscrow_Response) GetTicket() *CKeyEscrow_Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func init() {
	proto.RegisterType((*CKeyEscrow_Request)(nil), "CKeyEscrow_Request")
	proto.RegisterType((*CKeyEscrow_Ticket)(nil), "CKeyEscrow_Ticket")
	proto.RegisterType((*CKeyEscrow_Response)(nil), "CKeyEscrow_Response")
	proto.RegisterEnum("EKeyEscrowUsage", EKeyEscrowUsage_name, EKeyEscrowUsage_value)
}

func init() {
	proto.RegisterFile("steammessages_secrets.steamclient.proto", fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4)
}

var fileDescriptor_steammessages_secrets_steamclient_74d49dbda1b97ef4 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x4e, 0x13, 0x41,
	0x14, 0xc6, 0x5d, 0xe4, 0x5f, 0x07, 0x50, 0x1c, 0x88, 0xd9, 0x34, 0x46, 0xc7, 0x6a, 0x22, 0x21,
	0x76, 0x1b, 0xd1, 0x48, 0x42, 0xbc, 0x51, 0x20, 0xc1, 0x18, 0xff, 0x64, 0xab, 0x37, 0xde, 0x6c,
	0x0e, 0xb3, 0xa7, 0xdb, 0x49, 0xbb, 0x33, 0xeb, 0x9c, 0xd9, 0x22, 0x77, 0x84, 0x77, 0xe2, 0x1d,
	0x8c, 0x4f, 0xe3, 0x23, 0x98, 0x9d, 0x2e, 0x50, 0x0a, 0x89, 0x37, 0x5e, 0xce, 0x77, 0x7e, 0x33,
	0xfb, 0x9d, 0xb3, 0xe7, 0x63, 0xcf, 0xc8, 0x21, 0xe4, 0x39, 0x12, 0x41, 0x86, 0x94, 0x10, 0x4a,
	0x8b, 0x8e, 0x22, 0xaf, 0xca, 0xa1, 0x42, 0xed, 0xa2, 0xc2, 0x1a, 0x67, 0x9a, 0xcf, 0xaf, 0x82,
	0xa5, 0x56, 0x3d, 0x85, 0x69, 0x72, 0x08, 0x84, 0xd7, 0xe9, 0xd6, 0xef, 0x80, 0xf1, 0xdd, 0x0f,
	0x78, 0xbc, 0x4f, 0xd2, 0x9a, 0xa3, 0x24, 0xc6, 0x1f, 0x25, 0x92, 0xe3, 0x6d, 0xb6, 0x66, 0x09,
	0x12, 0x03, 0x58, 0x24, 0xd4, 0x87, 0xc4, 0x29, 0x39, 0x40, 0x17, 0x06, 0x22, 0xd8, 0x58, 0x8e,
	0x57, 0x2d, 0xc1, 0x67, 0xc0, 0xa2, 0xdb, 0x87, 0xaf, 0x5e, 0xe7, 0x4d, 0xb6, 0x58, 0x00, 0xd1,
	0x91, 0xb1, 0x69, 0x38, 0xe3, 0x99, 0x8b, 0x33, 0x3f, 0x60, 0x73, 0x65, 0x65, 0x25, 0xbc, 0x2d,
	0x82, 0x8d, 0x3b, 0x5b, 0xab, 0xd1, 0xfe, 0xc5, 0xe7, 0xbe, 0x55, 0xfa, 0x8e, 0x18, 0x24, 0x53,
	0x52, 0xd7, 0x59, 0x84, 0x5c, 0xe9, 0x6c, 0x0f, 0x47, 0x4a, 0x62, 0x3c, 0x7e, 0x80, 0x3f, 0x62,
	0x4b, 0xa9, 0x17, 0x12, 0x0d, 0x39, 0x86, 0xb3, 0x22, 0xd8, 0x68, 0xc4, 0x6c, 0x2c, 0x7d, 0x82,
	0x1c, 0x5b, 0x7f, 0x66, 0xd8, 0xbd, 0x89, 0x66, 0x6e, 0x30, 0x17, 0x4c, 0x99, 0x7b, 0xc8, 0x98,
	0x4a, 0x51, 0xbb, 0x6a, 0x46, 0xd6, 0x5b, 0x9f, 0x8d, 0x27, 0x14, 0x1e, 0xb2, 0x85, 0x02, 0x8e,
	0x87, 0x06, 0x52, 0x6f, 0x7f, 0x39, 0x3e, 0x3f, 0xf2, 0x07, 0xac, 0xe1, 0x54, 0x8e, 0xe4, 0x20,
	0x2f, 0xbc, 0x95, 0x95, 0xf8, 0x52, 0xb8, 0x6c, 0x7a, 0xee, 0x3f, 0x37, 0x3d, 0x3f, 0xdd, 0x34,
	0x7f, 0xcc, 0x96, 0x6b, 0x20, 0x37, 0x29, 0x0e, 0xc3, 0x05, 0x4f, 0xd4, 0x97, 0x3e, 0x56, 0x12,
	0x7f, 0xc2, 0x56, 0x6a, 0x84, 0xd0, 0x2a, 0x18, 0x86, 0x8b, 0x9e, 0xa9, 0xef, 0x75, 0xbd, 0xc6,
	0x5f, 0xb1, 0xfb, 0x35, 0x54, 0x58, 0x33, 0x52, 0xa4, 0x8c, 0x56, 0x3a, 0x4b, 0x54, 0x1a, 0x36,
	0x7c, 0x77, 0xeb, 0xe3, 0xea, 0x97, 0x89, 0xe2, 0xfb, 0xb4, 0xf5, 0x96, 0xad, 0x5d, 0x59, 0x1f,
	0x2a, 0x8c, 0x26, 0xe4, 0x9b, 0x6c, 0x7e, 0x62, 0x65, 0x96, 0xb6, 0x78, 0x74, 0xed, 0xbf, 0xc4,
	0x35, 0xb1, 0xb9, 0xcd, 0xee, 0x4e, 0x8d, 0x82, 0x3f, 0x65, 0xff, 0x9c, 0xcf, 0xea, 0xad, 0xad,
	0x5f, 0x01, 0x5b, 0xe8, 0x8e, 0x73, 0xc0, 0x4f, 0x02, 0xd6, 0xb8, 0xe0, 0xf9, 0x5a, 0x74, 0x7d,
	0xa7, 0x9b, 0xeb, 0xd1, 0x0d, 0x4e, 0x5b, 0x07, 0xa7, 0x67, 0xe1, 0x5e, 0x17, 0x6d, 0xf5, 0xa6,
	0x70, 0x46, 0x14, 0x68, 0x7b, 0xc6, 0xe6, 0x02, 0x4a, 0xd7, 0xaf, 0xd6, 0x40, 0x82, 0xc3, 0x54,
	0x0c, 0xf0, 0xb8, 0x8d, 0x3f, 0x65, 0x1f, 0x74, 0x86, 0x42, 0xe9, 0x91, 0x19, 0x8e, 0x94, 0xce,
	0x44, 0xb7, 0xca, 0x93, 0xd8, 0xf5, 0x81, 0x6a, 0xee, 0x9c, 0x9e, 0x85, 0xaf, 0xcf, 0x5f, 0xea,
	0x19, 0x2b, 0x40, 0x4a, 0x24, 0xaa, 0x38, 0x69, 0xd1, 0xef, 0x14, 0x0c, 0x49, 0x80, 0x4e, 0x45,
	0x56, 0x82, 0x4d, 0xab, 0x42, 0x1d, 0xe3, 0x77, 0x6f, 0xbe, 0x6f, 0x67, 0xca, 0xf5, 0xcb, 0xc3,
	0x48, 0x9a, 0xbc, 0xf3, 0xe2, 0xe5, 0xa0, 0x93, 0x99, 0xb6, 0x4f, 0x6b, 0xdb, 0x22, 0x99, 0xd2,
	0x4a, 0xa4, 0x8e, 0x4f, 0xec, 0x61, 0xd9, 0xeb, 0xf8, 0x42, 0x67, 0x9c, 0xe3, 0x93, 0x20, 0xf8,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x19, 0x97, 0xa4, 0x78, 0x1c, 0x04, 0x00, 0x00,
}
