// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_datapublisher.steamclient.proto

package client // import "github.com/13k/go-steam-resources/protobuf/steam/client"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CDataPublisher_ClientContentCorruptionReport_Notification struct {
	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid              *uint32  `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	DownloadSource       *string  `protobuf:"bytes,3,opt,name=download_source,json=downloadSource" json:"download_source,omitempty"`
	Objectid             *string  `protobuf:"bytes,4,opt,name=objectid" json:"objectid,omitempty"`
	Cellid               *uint32  `protobuf:"varint,5,opt,name=cellid" json:"cellid,omitempty"`
	IsManifest           *bool    `protobuf:"varint,6,opt,name=is_manifest,json=isManifest" json:"is_manifest,omitempty"`
	ObjectSize           *uint64  `protobuf:"varint,7,opt,name=object_size,json=objectSize" json:"object_size,omitempty"`
	CorruptionType       *uint32  `protobuf:"varint,8,opt,name=corruption_type,json=corruptionType" json:"corruption_type,omitempty"`
	UsedHttps            *bool    `protobuf:"varint,9,opt,name=used_https,json=usedHttps" json:"used_https,omitempty"`
	OcProxyDetected      *bool    `protobuf:"varint,10,opt,name=oc_proxy_detected,json=ocProxyDetected" json:"oc_proxy_detected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) Reset() {
	*m = CDataPublisher_ClientContentCorruptionReport_Notification{}
}
func (m *CDataPublisher_ClientContentCorruptionReport_Notification) String() string {
	return proto.CompactTextString(m)
}
func (*CDataPublisher_ClientContentCorruptionReport_Notification) ProtoMessage() {}
func (*CDataPublisher_ClientContentCorruptionReport_Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_datapublisher_steamclient_20b048ffccfdf9b5, []int{0}
}
func (m *CDataPublisher_ClientContentCorruptionReport_Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification.Unmarshal(m, b)
}
func (m *CDataPublisher_ClientContentCorruptionReport_Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification.Marshal(b, m, deterministic)
}
func (dst *CDataPublisher_ClientContentCorruptionReport_Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification.Merge(dst, src)
}
func (m *CDataPublisher_ClientContentCorruptionReport_Notification) XXX_Size() int {
	return xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification.Size(m)
}
func (m *CDataPublisher_ClientContentCorruptionReport_Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_CDataPublisher_ClientContentCorruptionReport_Notification proto.InternalMessageInfo

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetDepotid() uint32 {
	if m != nil && m.Depotid != nil {
		return *m.Depotid
	}
	return 0
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetDownloadSource() string {
	if m != nil && m.DownloadSource != nil {
		return *m.DownloadSource
	}
	return ""
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetObjectid() string {
	if m != nil && m.Objectid != nil {
		return *m.Objectid
	}
	return ""
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetCellid() uint32 {
	if m != nil && m.Cellid != nil {
		return *m.Cellid
	}
	return 0
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetIsManifest() bool {
	if m != nil && m.IsManifest != nil {
		return *m.IsManifest
	}
	return false
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetObjectSize() uint64 {
	if m != nil && m.ObjectSize != nil {
		return *m.ObjectSize
	}
	return 0
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetCorruptionType() uint32 {
	if m != nil && m.CorruptionType != nil {
		return *m.CorruptionType
	}
	return 0
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetUsedHttps() bool {
	if m != nil && m.UsedHttps != nil {
		return *m.UsedHttps
	}
	return false
}

func (m *CDataPublisher_ClientContentCorruptionReport_Notification) GetOcProxyDetected() bool {
	if m != nil && m.OcProxyDetected != nil {
		return *m.OcProxyDetected
	}
	return false
}

type CValveHWSurvey_GetSurveySchedule_Request struct {
	Surveydatetoken        *string  `protobuf:"bytes,1,opt,name=surveydatetoken" json:"surveydatetoken,omitempty"`
	Surveydatetokenversion *uint64  `protobuf:"fixed64,2,opt,name=surveydatetokenversion" json:"surveydatetokenversion,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CValveHWSurvey_GetSurveySchedule_Request) Reset() {
	*m = CValveHWSurvey_GetSurveySchedule_Request{}
}
func (m *CValveHWSurvey_GetSurveySchedule_Request) String() string { return proto.CompactTextString(m) }
func (*CValveHWSurvey_GetSurveySchedule_Request) ProtoMessage()    {}
func (*CValveHWSurvey_GetSurveySchedule_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_datapublisher_steamclient_20b048ffccfdf9b5, []int{1}
}
func (m *CValveHWSurvey_GetSurveySchedule_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request.Unmarshal(m, b)
}
func (m *CValveHWSurvey_GetSurveySchedule_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request.Marshal(b, m, deterministic)
}
func (dst *CValveHWSurvey_GetSurveySchedule_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request.Merge(dst, src)
}
func (m *CValveHWSurvey_GetSurveySchedule_Request) XXX_Size() int {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request.Size(m)
}
func (m *CValveHWSurvey_GetSurveySchedule_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Request proto.InternalMessageInfo

func (m *CValveHWSurvey_GetSurveySchedule_Request) GetSurveydatetoken() string {
	if m != nil && m.Surveydatetoken != nil {
		return *m.Surveydatetoken
	}
	return ""
}

func (m *CValveHWSurvey_GetSurveySchedule_Request) GetSurveydatetokenversion() uint64 {
	if m != nil && m.Surveydatetokenversion != nil {
		return *m.Surveydatetokenversion
	}
	return 0
}

type CValveHWSurvey_GetSurveySchedule_Response struct {
	Surveydatetoken        *uint32  `protobuf:"varint,1,opt,name=surveydatetoken" json:"surveydatetoken,omitempty"`
	Surveydatetokenversion *uint64  `protobuf:"fixed64,2,opt,name=surveydatetokenversion" json:"surveydatetokenversion,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CValveHWSurvey_GetSurveySchedule_Response) Reset() {
	*m = CValveHWSurvey_GetSurveySchedule_Response{}
}
func (m *CValveHWSurvey_GetSurveySchedule_Response) String() string { return proto.CompactTextString(m) }
func (*CValveHWSurvey_GetSurveySchedule_Response) ProtoMessage()    {}
func (*CValveHWSurvey_GetSurveySchedule_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_datapublisher_steamclient_20b048ffccfdf9b5, []int{2}
}
func (m *CValveHWSurvey_GetSurveySchedule_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response.Unmarshal(m, b)
}
func (m *CValveHWSurvey_GetSurveySchedule_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response.Marshal(b, m, deterministic)
}
func (dst *CValveHWSurvey_GetSurveySchedule_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response.Merge(dst, src)
}
func (m *CValveHWSurvey_GetSurveySchedule_Response) XXX_Size() int {
	return xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response.Size(m)
}
func (m *CValveHWSurvey_GetSurveySchedule_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CValveHWSurvey_GetSurveySchedule_Response proto.InternalMessageInfo

func (m *CValveHWSurvey_GetSurveySchedule_Response) GetSurveydatetoken() uint32 {
	if m != nil && m.Surveydatetoken != nil {
		return *m.Surveydatetoken
	}
	return 0
}

func (m *CValveHWSurvey_GetSurveySchedule_Response) GetSurveydatetokenversion() uint64 {
	if m != nil && m.Surveydatetokenversion != nil {
		return *m.Surveydatetokenversion
	}
	return 0
}

func init() {
	proto.RegisterType((*CDataPublisher_ClientContentCorruptionReport_Notification)(nil), "CDataPublisher_ClientContentCorruptionReport_Notification")
	proto.RegisterType((*CValveHWSurvey_GetSurveySchedule_Request)(nil), "CValveHWSurvey_GetSurveySchedule_Request")
	proto.RegisterType((*CValveHWSurvey_GetSurveySchedule_Response)(nil), "CValveHWSurvey_GetSurveySchedule_Response")
}

func init() {
	proto.RegisterFile("steammessages_datapublisher.steamclient.proto", fileDescriptor_steammessages_datapublisher_steamclient_20b048ffccfdf9b5)
}

var fileDescriptor_steammessages_datapublisher_steamclient_20b048ffccfdf9b5 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x96, 0xa1, 0xdb, 0x6d, 0xa6, 0x4a, 0xa3, 0x8e, 0x16, 0x18, 0xb2, 0x0b, 0x3c, 0x05, 0x21,
	0x92, 0xd5, 0x36, 0x11, 0x45, 0x82, 0x16, 0x71, 0x21, 0x09, 0x6a, 0x0a, 0xa2, 0x44, 0x76, 0x04,
	0x12, 0x17, 0x6b, 0x62, 0xbf, 0xd4, 0x43, 0x9d, 0x19, 0xe3, 0x19, 0xa7, 0xa4, 0x27, 0xe4, 0x0b,
	0x17, 0xf8, 0x13, 0x9c, 0xb9, 0xfa, 0x97, 0xf1, 0x07, 0x90, 0xc7, 0x71, 0xa5, 0xb4, 0x2a, 0xaa,
	0xd0, 0x9e, 0x66, 0xde, 0xf7, 0x3e, 0x7f, 0xfe, 0xe6, 0xbd, 0x99, 0x47, 0x8e, 0xb4, 0x41, 0xbe,
	0x5c, 0xa2, 0xd6, 0xfc, 0x12, 0xb5, 0x1f, 0x72, 0xc3, 0x93, 0x6c, 0x1e, 0x0b, 0x1d, 0x61, 0xda,
	0xb7, 0xb9, 0x20, 0x16, 0x28, 0x4d, 0x3f, 0x49, 0x95, 0x51, 0xed, 0x57, 0xdb, 0xf4, 0x4c, 0x8a,
	0x85, 0xc0, 0xd0, 0x9f, 0x73, 0x8d, 0xf7, 0xd9, 0x9d, 0x7f, 0x76, 0xc8, 0xe9, 0x68, 0xcc, 0x0d,
	0x9f, 0xd6, 0x92, 0xfe, 0xc8, 0xe6, 0x47, 0x4a, 0x1a, 0xbb, 0xa4, 0x69, 0x96, 0x18, 0xa1, 0xa4,
	0x8b, 0x89, 0x4a, 0x8d, 0x7f, 0xa1, 0x8c, 0x58, 0x88, 0x80, 0x97, 0x10, 0x7d, 0x46, 0x9e, 0xf0,
	0x24, 0x11, 0x21, 0x73, 0xc0, 0xe9, 0x36, 0xdd, 0x2a, 0xa0, 0x8c, 0x3c, 0x0d, 0x31, 0x51, 0x46,
	0x84, 0xec, 0x0d, 0x8b, 0xd7, 0x21, 0x3d, 0x27, 0xad, 0x50, 0x5d, 0xcb, 0x58, 0xf1, 0xd0, 0xd7,
	0x2a, 0x4b, 0x03, 0x64, 0x6f, 0x82, 0xd3, 0x6d, 0x0c, 0x21, 0x2f, 0xd8, 0x8b, 0x48, 0x69, 0x03,
	0x92, 0x2f, 0x11, 0xd4, 0x02, 0x6a, 0x1e, 0x54, 0x3c, 0xf7, 0xa0, 0x06, 0x3c, 0x1b, 0xd3, 0x13,
	0xb2, 0xa7, 0xe6, 0x3f, 0x63, 0x50, 0xfe, 0x65, 0xc7, 0x6a, 0xbc, 0xc8, 0x0b, 0xc6, 0x46, 0x51,
	0x26, 0xaf, 0xc0, 0x9b, 0x7c, 0x05, 0x2a, 0x85, 0xef, 0xb8, 0x14, 0x0b, 0xd4, 0x06, 0xce, 0xc7,
	0xee, 0x2d, 0x9b, 0xbe, 0x24, 0xbb, 0x01, 0xc6, 0xb1, 0x08, 0xd9, 0x93, 0xd2, 0xdd, 0x90, 0xe6,
	0x05, 0x3b, 0xa8, 0x0e, 0x0d, 0x23, 0x8c, 0xe3, 0x92, 0xbd, 0x61, 0xd0, 0x6f, 0xc8, 0xbe, 0xd0,
	0xfe, 0x72, 0xa3, 0xc3, 0x76, 0xc1, 0xe9, 0xee, 0x0d, 0x7b, 0x79, 0xc1, 0x3e, 0x9a, 0x45, 0x08,
	0x95, 0x24, 0x08, 0x0d, 0x1c, 0x6a, 0xce, 0x2b, 0x90, 0xca, 0x00, 0x87, 0xa0, 0x34, 0xe2, 0x12,
	0xa1, 0x6b, 0x13, 0xf4, 0x94, 0xec, 0x57, 0x1f, 0xf8, 0x5a, 0xdc, 0x20, 0x7b, 0x0a, 0x4e, 0x77,
	0x67, 0xc8, 0xf2, 0x82, 0x3d, 0xdb, 0xe8, 0x94, 0x30, 0x08, 0x09, 0xf3, 0xb5, 0x41, 0xed, 0x92,
	0x0a, 0xf5, 0xc4, 0x0d, 0xd2, 0x33, 0xd2, 0x0a, 0x6e, 0x1b, 0xe1, 0x9b, 0x75, 0x82, 0x6c, 0xcf,
	0x7a, 0x7f, 0x3f, 0x2f, 0x58, 0xdb, 0x43, 0x84, 0xaf, 0xef, 0xf5, 0x6b, 0xb6, 0x4e, 0xd0, 0x3d,
	0x08, 0xb6, 0x62, 0x7a, 0x42, 0x48, 0xa6, 0x31, 0xf4, 0x23, 0x63, 0x12, 0xcd, 0x1a, 0xf6, 0x38,
	0xef, 0xe6, 0x05, 0x7b, 0xcb, 0x44, 0x08, 0x29, 0xfe, 0x92, 0x95, 0xd5, 0xba, 0xe6, 0x1a, 0x26,
	0xb3, 0xd9, 0xd4, 0x73, 0x1b, 0x25, 0x79, 0x52, 0x72, 0xe9, 0xb7, 0xe4, 0x50, 0x05, 0x7e, 0x92,
	0xaa, 0x5f, 0xd7, 0x7e, 0x88, 0x06, 0x03, 0x83, 0x21, 0x23, 0x56, 0xe0, 0x83, 0xbc, 0x60, 0xcf,
	0x6b, 0x0c, 0xb8, 0x84, 0xef, 0x13, 0x94, 0x23, 0x1e, 0x44, 0x08, 0x96, 0xef, 0xb6, 0x54, 0x30,
	0x2d, 0x37, 0xe3, 0x0d, 0xa7, 0xf3, 0x87, 0x43, 0xba, 0xa3, 0x1f, 0x78, 0xbc, 0xc2, 0xc9, 0x8f,
	0x5e, 0x96, 0xae, 0x70, 0xed, 0x9f, 0xa1, 0xa9, 0x76, 0x5e, 0x10, 0x61, 0x98, 0xc5, 0xe8, 0xbb,
	0x95, 0x1d, 0xda, 0x25, 0x2d, 0x6d, 0x33, 0x21, 0x37, 0x68, 0xd4, 0x15, 0x4a, 0x7b, 0xdd, 0x1a,
	0xee, 0x5d, 0x98, 0x7e, 0x46, 0xde, 0xbe, 0x03, 0xad, 0x30, 0xd5, 0x42, 0x49, 0x7b, 0x0f, 0x77,
	0xdd, 0x07, 0xb2, 0x9d, 0x3f, 0x1d, 0xd2, 0x7b, 0x84, 0x1d, 0x9d, 0x28, 0xa9, 0xf1, 0x21, 0x3f,
	0xcd, 0xd7, 0xe6, 0xe7, 0xf8, 0x2f, 0x87, 0x34, 0xb7, 0xde, 0x24, 0x8d, 0xc8, 0x7b, 0xff, 0xf9,
	0x2c, 0xe9, 0x17, 0xfd, 0xff, 0xfd, 0x8a, 0xdb, 0xfb, 0xfd, 0x0b, 0x55, 0x9f, 0xae, 0xfd, 0x71,
	0x5e, 0xb0, 0x0f, 0x4b, 0x29, 0xb8, 0xd5, 0x82, 0xee, 0x78, 0xda, 0x03, 0x8d, 0xe9, 0x0a, 0x53,
	0xbb, 0x88, 0x00, 0xf5, 0xf1, 0xdf, 0x0e, 0x69, 0x6e, 0xd5, 0x8c, 0xfe, 0xee, 0x90, 0xc3, 0x7b,
	0x75, 0xa3, 0xbd, 0xfe, 0x63, 0x3b, 0xdd, 0x7e, 0xd9, 0x7f, 0x74, 0x17, 0x3a, 0xcf, 0xf3, 0x82,
	0xbd, 0xe3, 0x45, 0x2a, 0x8b, 0x43, 0x38, 0x87, 0x34, 0x93, 0x50, 0x5e, 0xe1, 0xaa, 0xa0, 0xed,
	0xc3, 0xbc, 0x60, 0xdb, 0xe6, 0x86, 0x5f, 0xfe, 0xf4, 0xf9, 0xa5, 0x30, 0x51, 0x36, 0xef, 0x07,
	0x6a, 0x39, 0xf8, 0xe4, 0xd3, 0xab, 0xc1, 0xa5, 0xaa, 0x26, 0xeb, 0x51, 0x8a, 0xd5, 0x8c, 0xd1,
	0x03, 0x3b, 0x13, 0xe7, 0xd9, 0x62, 0x60, 0x13, 0x83, 0x6a, 0x52, 0xfe, 0xe6, 0x38, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x10, 0xe9, 0xfc, 0xa5, 0x84, 0x05, 0x00, 0x00,
}
