// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_parental.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ParentalApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	IsAllowed *bool   `protobuf:"varint,2,opt,name=is_allowed,json=isAllowed" json:"is_allowed,omitempty"`
}

func (x *ParentalApp) Reset() {
	*x = ParentalApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentalApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentalApp) ProtoMessage() {}

func (x *ParentalApp) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentalApp.ProtoReflect.Descriptor instead.
func (*ParentalApp) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *ParentalApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *ParentalApp) GetIsAllowed() bool {
	if x != nil && x.IsAllowed != nil {
		return *x.IsAllowed
	}
	return false
}

type ParentalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                *uint64        `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ApplistBaseId          *uint32        `protobuf:"varint,2,opt,name=applist_base_id,json=applistBaseId" json:"applist_base_id,omitempty"`
	ApplistBaseDescription *string        `protobuf:"bytes,3,opt,name=applist_base_description,json=applistBaseDescription" json:"applist_base_description,omitempty"`
	ApplistBase            []*ParentalApp `protobuf:"bytes,4,rep,name=applist_base,json=applistBase" json:"applist_base,omitempty"`
	ApplistCustom          []*ParentalApp `protobuf:"bytes,5,rep,name=applist_custom,json=applistCustom" json:"applist_custom,omitempty"`
	Passwordhashtype       *uint32        `protobuf:"varint,6,opt,name=passwordhashtype" json:"passwordhashtype,omitempty"`
	Salt                   []byte         `protobuf:"bytes,7,opt,name=salt" json:"salt,omitempty"`
	Passwordhash           []byte         `protobuf:"bytes,8,opt,name=passwordhash" json:"passwordhash,omitempty"`
	IsEnabled              *bool          `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	EnabledFeatures        *uint32        `protobuf:"varint,10,opt,name=enabled_features,json=enabledFeatures" json:"enabled_features,omitempty"`
	RecoveryEmail          *string        `protobuf:"bytes,11,opt,name=recovery_email,json=recoveryEmail" json:"recovery_email,omitempty"`
	IsSiteLicenseLock      *bool          `protobuf:"varint,12,opt,name=is_site_license_lock,json=isSiteLicenseLock" json:"is_site_license_lock,omitempty"`
}

func (x *ParentalSettings) Reset() {
	*x = ParentalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentalSettings) ProtoMessage() {}

func (x *ParentalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentalSettings.ProtoReflect.Descriptor instead.
func (*ParentalSettings) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *ParentalSettings) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *ParentalSettings) GetApplistBaseId() uint32 {
	if x != nil && x.ApplistBaseId != nil {
		return *x.ApplistBaseId
	}
	return 0
}

func (x *ParentalSettings) GetApplistBaseDescription() string {
	if x != nil && x.ApplistBaseDescription != nil {
		return *x.ApplistBaseDescription
	}
	return ""
}

func (x *ParentalSettings) GetApplistBase() []*ParentalApp {
	if x != nil {
		return x.ApplistBase
	}
	return nil
}

func (x *ParentalSettings) GetApplistCustom() []*ParentalApp {
	if x != nil {
		return x.ApplistCustom
	}
	return nil
}

func (x *ParentalSettings) GetPasswordhashtype() uint32 {
	if x != nil && x.Passwordhashtype != nil {
		return *x.Passwordhashtype
	}
	return 0
}

func (x *ParentalSettings) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ParentalSettings) GetPasswordhash() []byte {
	if x != nil {
		return x.Passwordhash
	}
	return nil
}

func (x *ParentalSettings) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *ParentalSettings) GetEnabledFeatures() uint32 {
	if x != nil && x.EnabledFeatures != nil {
		return *x.EnabledFeatures
	}
	return 0
}

func (x *ParentalSettings) GetRecoveryEmail() string {
	if x != nil && x.RecoveryEmail != nil {
		return *x.RecoveryEmail
	}
	return ""
}

func (x *ParentalSettings) GetIsSiteLicenseLock() bool {
	if x != nil && x.IsSiteLicenseLock != nil {
		return *x.IsSiteLicenseLock
	}
	return false
}

type CParental_EnableParentalSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password   *string           `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Settings   *ParentalSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	Sessionid  *string           `protobuf:"bytes,3,opt,name=sessionid" json:"sessionid,omitempty"`
	Enablecode *uint32           `protobuf:"varint,4,opt,name=enablecode" json:"enablecode,omitempty"`
	Steamid    *uint64           `protobuf:"fixed64,10,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParental_EnableParentalSettings_Request) Reset() {
	*x = CParental_EnableParentalSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_EnableParentalSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_EnableParentalSettings_Request) ProtoMessage() {}

func (x *CParental_EnableParentalSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_EnableParentalSettings_Request.ProtoReflect.Descriptor instead.
func (*CParental_EnableParentalSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CParental_EnableParentalSettings_Request) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_EnableParentalSettings_Request) GetSettings() *ParentalSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CParental_EnableParentalSettings_Request) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

func (x *CParental_EnableParentalSettings_Request) GetEnablecode() uint32 {
	if x != nil && x.Enablecode != nil {
		return *x.Enablecode
	}
	return 0
}

func (x *CParental_EnableParentalSettings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParental_EnableParentalSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_EnableParentalSettings_Response) Reset() {
	*x = CParental_EnableParentalSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_EnableParentalSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_EnableParentalSettings_Response) ProtoMessage() {}

func (x *CParental_EnableParentalSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_EnableParentalSettings_Response.ProtoReflect.Descriptor instead.
func (*CParental_EnableParentalSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{3}
}

type CParental_DisableParentalSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Steamid  *uint64 `protobuf:"fixed64,10,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParental_DisableParentalSettings_Request) Reset() {
	*x = CParental_DisableParentalSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_DisableParentalSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_DisableParentalSettings_Request) ProtoMessage() {}

func (x *CParental_DisableParentalSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_DisableParentalSettings_Request.ProtoReflect.Descriptor instead.
func (*CParental_DisableParentalSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CParental_DisableParentalSettings_Request) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_DisableParentalSettings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParental_DisableParentalSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_DisableParentalSettings_Response) Reset() {
	*x = CParental_DisableParentalSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_DisableParentalSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_DisableParentalSettings_Response) ProtoMessage() {}

func (x *CParental_DisableParentalSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_DisableParentalSettings_Response.ProtoReflect.Descriptor instead.
func (*CParental_DisableParentalSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{5}
}

type CParental_GetParentalSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,10,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParental_GetParentalSettings_Request) Reset() {
	*x = CParental_GetParentalSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_GetParentalSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_GetParentalSettings_Request) ProtoMessage() {}

func (x *CParental_GetParentalSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_GetParentalSettings_Request.ProtoReflect.Descriptor instead.
func (*CParental_GetParentalSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CParental_GetParentalSettings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParental_GetParentalSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *ParentalSettings `protobuf:"bytes,1,opt,name=settings" json:"settings,omitempty"`
}

func (x *CParental_GetParentalSettings_Response) Reset() {
	*x = CParental_GetParentalSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_GetParentalSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_GetParentalSettings_Response) ProtoMessage() {}

func (x *CParental_GetParentalSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_GetParentalSettings_Response.ProtoReflect.Descriptor instead.
func (*CParental_GetParentalSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CParental_GetParentalSettings_Response) GetSettings() *ParentalSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CParental_GetSignedParentalSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *uint32 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
}

func (x *CParental_GetSignedParentalSettings_Request) Reset() {
	*x = CParental_GetSignedParentalSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_GetSignedParentalSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_GetSignedParentalSettings_Request) ProtoMessage() {}

func (x *CParental_GetSignedParentalSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_GetSignedParentalSettings_Request.ProtoReflect.Descriptor instead.
func (*CParental_GetSignedParentalSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CParental_GetSignedParentalSettings_Request) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CParental_GetSignedParentalSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedSettings []byte `protobuf:"bytes,1,opt,name=serialized_settings,json=serializedSettings" json:"serialized_settings,omitempty"`
	Signature          []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *CParental_GetSignedParentalSettings_Response) Reset() {
	*x = CParental_GetSignedParentalSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_GetSignedParentalSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_GetSignedParentalSettings_Response) ProtoMessage() {}

func (x *CParental_GetSignedParentalSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_GetSignedParentalSettings_Response.ProtoReflect.Descriptor instead.
func (*CParental_GetSignedParentalSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CParental_GetSignedParentalSettings_Response) GetSerializedSettings() []byte {
	if x != nil {
		return x.SerializedSettings
	}
	return nil
}

func (x *CParental_GetSignedParentalSettings_Response) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CParental_SetParentalSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password    *string           `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Settings    *ParentalSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	NewPassword *string           `protobuf:"bytes,3,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
	Sessionid   *string           `protobuf:"bytes,4,opt,name=sessionid" json:"sessionid,omitempty"`
	Steamid     *uint64           `protobuf:"fixed64,10,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParental_SetParentalSettings_Request) Reset() {
	*x = CParental_SetParentalSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_SetParentalSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_SetParentalSettings_Request) ProtoMessage() {}

func (x *CParental_SetParentalSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_SetParentalSettings_Request.ProtoReflect.Descriptor instead.
func (*CParental_SetParentalSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CParental_SetParentalSettings_Request) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_SetParentalSettings_Request) GetSettings() *ParentalSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CParental_SetParentalSettings_Request) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

func (x *CParental_SetParentalSettings_Request) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

func (x *CParental_SetParentalSettings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParental_SetParentalSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_SetParentalSettings_Response) Reset() {
	*x = CParental_SetParentalSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_SetParentalSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_SetParentalSettings_Response) ProtoMessage() {}

func (x *CParental_SetParentalSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_SetParentalSettings_Response.ProtoReflect.Descriptor instead.
func (*CParental_SetParentalSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{11}
}

type CParental_ValidateToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlockToken *string `protobuf:"bytes,1,opt,name=unlock_token,json=unlockToken" json:"unlock_token,omitempty"`
}

func (x *CParental_ValidateToken_Request) Reset() {
	*x = CParental_ValidateToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ValidateToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ValidateToken_Request) ProtoMessage() {}

func (x *CParental_ValidateToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ValidateToken_Request.ProtoReflect.Descriptor instead.
func (*CParental_ValidateToken_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CParental_ValidateToken_Request) GetUnlockToken() string {
	if x != nil && x.UnlockToken != nil {
		return *x.UnlockToken
	}
	return ""
}

type CParental_ValidateToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_ValidateToken_Response) Reset() {
	*x = CParental_ValidateToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ValidateToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ValidateToken_Response) ProtoMessage() {}

func (x *CParental_ValidateToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ValidateToken_Response.ProtoReflect.Descriptor instead.
func (*CParental_ValidateToken_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{13}
}

type CParental_ValidatePassword_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password            *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Session             *string `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	SendUnlockOnSuccess *bool   `protobuf:"varint,3,opt,name=send_unlock_on_success,json=sendUnlockOnSuccess" json:"send_unlock_on_success,omitempty"`
}

func (x *CParental_ValidatePassword_Request) Reset() {
	*x = CParental_ValidatePassword_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ValidatePassword_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ValidatePassword_Request) ProtoMessage() {}

func (x *CParental_ValidatePassword_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ValidatePassword_Request.ProtoReflect.Descriptor instead.
func (*CParental_ValidatePassword_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CParental_ValidatePassword_Request) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_ValidatePassword_Request) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

func (x *CParental_ValidatePassword_Request) GetSendUnlockOnSuccess() bool {
	if x != nil && x.SendUnlockOnSuccess != nil {
		return *x.SendUnlockOnSuccess
	}
	return false
}

type CParental_ValidatePassword_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (x *CParental_ValidatePassword_Response) Reset() {
	*x = CParental_ValidatePassword_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ValidatePassword_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ValidatePassword_Response) ProtoMessage() {}

func (x *CParental_ValidatePassword_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ValidatePassword_Response.ProtoReflect.Descriptor instead.
func (*CParental_ValidatePassword_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CParental_ValidatePassword_Response) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type CParental_LockClient_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (x *CParental_LockClient_Request) Reset() {
	*x = CParental_LockClient_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_LockClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_LockClient_Request) ProtoMessage() {}

func (x *CParental_LockClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_LockClient_Request.ProtoReflect.Descriptor instead.
func (*CParental_LockClient_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CParental_LockClient_Request) GetSession() string {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return ""
}

type CParental_LockClient_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_LockClient_Response) Reset() {
	*x = CParental_LockClient_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_LockClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_LockClient_Response) ProtoMessage() {}

func (x *CParental_LockClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_LockClient_Response.ProtoReflect.Descriptor instead.
func (*CParental_LockClient_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{17}
}

type CParental_RequestRecoveryCode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_RequestRecoveryCode_Request) Reset() {
	*x = CParental_RequestRecoveryCode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_RequestRecoveryCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_RequestRecoveryCode_Request) ProtoMessage() {}

func (x *CParental_RequestRecoveryCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_RequestRecoveryCode_Request.ProtoReflect.Descriptor instead.
func (*CParental_RequestRecoveryCode_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{18}
}

type CParental_RequestRecoveryCode_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_RequestRecoveryCode_Response) Reset() {
	*x = CParental_RequestRecoveryCode_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_RequestRecoveryCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_RequestRecoveryCode_Response) ProtoMessage() {}

func (x *CParental_RequestRecoveryCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_RequestRecoveryCode_Response.ProtoReflect.Descriptor instead.
func (*CParental_RequestRecoveryCode_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{19}
}

type CParental_DisableWithRecoveryCode_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryCode *uint32 `protobuf:"varint,1,opt,name=recovery_code,json=recoveryCode" json:"recovery_code,omitempty"`
	Steamid      *uint64 `protobuf:"fixed64,10,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CParental_DisableWithRecoveryCode_Request) Reset() {
	*x = CParental_DisableWithRecoveryCode_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_DisableWithRecoveryCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_DisableWithRecoveryCode_Request) ProtoMessage() {}

func (x *CParental_DisableWithRecoveryCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_DisableWithRecoveryCode_Request.ProtoReflect.Descriptor instead.
func (*CParental_DisableWithRecoveryCode_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CParental_DisableWithRecoveryCode_Request) GetRecoveryCode() uint32 {
	if x != nil && x.RecoveryCode != nil {
		return *x.RecoveryCode
	}
	return 0
}

func (x *CParental_DisableWithRecoveryCode_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CParental_DisableWithRecoveryCode_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CParental_DisableWithRecoveryCode_Response) Reset() {
	*x = CParental_DisableWithRecoveryCode_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_DisableWithRecoveryCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_DisableWithRecoveryCode_Response) ProtoMessage() {}

func (x *CParental_DisableWithRecoveryCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_DisableWithRecoveryCode_Response.ProtoReflect.Descriptor instead.
func (*CParental_DisableWithRecoveryCode_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{21}
}

type CParental_ParentalSettingsChange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedSettings []byte  `protobuf:"bytes,1,opt,name=serialized_settings,json=serializedSettings" json:"serialized_settings,omitempty"`
	Signature          []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Password           *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Sessionid          *string `protobuf:"bytes,4,opt,name=sessionid" json:"sessionid,omitempty"`
}

func (x *CParental_ParentalSettingsChange_Notification) Reset() {
	*x = CParental_ParentalSettingsChange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ParentalSettingsChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ParentalSettingsChange_Notification) ProtoMessage() {}

func (x *CParental_ParentalSettingsChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ParentalSettingsChange_Notification.ProtoReflect.Descriptor instead.
func (*CParental_ParentalSettingsChange_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CParental_ParentalSettingsChange_Notification) GetSerializedSettings() []byte {
	if x != nil {
		return x.SerializedSettings
	}
	return nil
}

func (x *CParental_ParentalSettingsChange_Notification) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CParental_ParentalSettingsChange_Notification) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_ParentalSettingsChange_Notification) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

type CParental_ParentalUnlock_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password  *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Sessionid *string `protobuf:"bytes,2,opt,name=sessionid" json:"sessionid,omitempty"`
}

func (x *CParental_ParentalUnlock_Notification) Reset() {
	*x = CParental_ParentalUnlock_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ParentalUnlock_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ParentalUnlock_Notification) ProtoMessage() {}

func (x *CParental_ParentalUnlock_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ParentalUnlock_Notification.ProtoReflect.Descriptor instead.
func (*CParental_ParentalUnlock_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CParental_ParentalUnlock_Notification) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CParental_ParentalUnlock_Notification) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

type CParental_ParentalLock_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionid *string `protobuf:"bytes,1,opt,name=sessionid" json:"sessionid,omitempty"`
}

func (x *CParental_ParentalLock_Notification) Reset() {
	*x = CParental_ParentalLock_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParental_ParentalLock_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParental_ParentalLock_Notification) ProtoMessage() {}

func (x *CParental_ParentalLock_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_parental_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParental_ParentalLock_Notification.ProtoReflect.Descriptor instead.
func (*CParental_ParentalLock_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CParental_ParentalLock_Notification) GetSessionid() string {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return ""
}

var File_steam_client_steammessages_parental_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_parental_steamclient_proto_rawDesc = []byte{
	0x0a, 0x35, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x22, 0x94, 0x04, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x68, 0x61, 0x73, 0x68, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x68, 0x61, 0x73, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0xda, 0x01, 0x0a, 0x28,
	0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x29, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x25, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x26, 0x43, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x49, 0x0a, 0x2b, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x7d, 0x0a, 0x2c, 0x43, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x25, 0x43, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x44, 0x0a, 0x1f, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x43,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x23,
	0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x38, 0x0a, 0x1c, 0x43, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a,
	0x26, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x29, 0x43, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x2d, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x25,
	0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x23, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x32, 0xd6, 0x10, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0xea, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82,
	0xb5, 0x18, 0x5b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
	0x79, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xc5,
	0x01, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82,
	0xb5, 0x18, 0x33, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x47,
	0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x82, 0x02, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x82, 0xb5, 0x18, 0x6a, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0xc1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xb5, 0x18, 0x4d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x58, 0x82, 0xb5, 0x18, 0x54, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x0a,
	0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x68, 0x61,
	0x73, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0xdd, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xb5, 0x18, 0x57,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1d,
	0x82, 0xb5, 0x18, 0x19, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0xd4, 0x04,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0xb6, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x33, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xb5, 0x18, 0x4b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xb5, 0x18, 0x48, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x1a, 0x2e, 0x82, 0xb5, 0x18, 0x26, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0xc0, 0xb5, 0x18, 0x02, 0x42, 0x3c, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80,
	0x01, 0x01,
}

var (
	file_steam_client_steammessages_parental_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_parental_steamclient_proto_rawDescData = file_steam_client_steammessages_parental_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_parental_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_parental_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_parental_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_parental_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_parental_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_parental_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_steam_client_steammessages_parental_steamclient_proto_goTypes = []interface{}{
	(*ParentalApp)(nil),                                   // 0: steam.client.ParentalApp
	(*ParentalSettings)(nil),                              // 1: steam.client.ParentalSettings
	(*CParental_EnableParentalSettings_Request)(nil),      // 2: steam.client.CParental_EnableParentalSettings_Request
	(*CParental_EnableParentalSettings_Response)(nil),     // 3: steam.client.CParental_EnableParentalSettings_Response
	(*CParental_DisableParentalSettings_Request)(nil),     // 4: steam.client.CParental_DisableParentalSettings_Request
	(*CParental_DisableParentalSettings_Response)(nil),    // 5: steam.client.CParental_DisableParentalSettings_Response
	(*CParental_GetParentalSettings_Request)(nil),         // 6: steam.client.CParental_GetParentalSettings_Request
	(*CParental_GetParentalSettings_Response)(nil),        // 7: steam.client.CParental_GetParentalSettings_Response
	(*CParental_GetSignedParentalSettings_Request)(nil),   // 8: steam.client.CParental_GetSignedParentalSettings_Request
	(*CParental_GetSignedParentalSettings_Response)(nil),  // 9: steam.client.CParental_GetSignedParentalSettings_Response
	(*CParental_SetParentalSettings_Request)(nil),         // 10: steam.client.CParental_SetParentalSettings_Request
	(*CParental_SetParentalSettings_Response)(nil),        // 11: steam.client.CParental_SetParentalSettings_Response
	(*CParental_ValidateToken_Request)(nil),               // 12: steam.client.CParental_ValidateToken_Request
	(*CParental_ValidateToken_Response)(nil),              // 13: steam.client.CParental_ValidateToken_Response
	(*CParental_ValidatePassword_Request)(nil),            // 14: steam.client.CParental_ValidatePassword_Request
	(*CParental_ValidatePassword_Response)(nil),           // 15: steam.client.CParental_ValidatePassword_Response
	(*CParental_LockClient_Request)(nil),                  // 16: steam.client.CParental_LockClient_Request
	(*CParental_LockClient_Response)(nil),                 // 17: steam.client.CParental_LockClient_Response
	(*CParental_RequestRecoveryCode_Request)(nil),         // 18: steam.client.CParental_RequestRecoveryCode_Request
	(*CParental_RequestRecoveryCode_Response)(nil),        // 19: steam.client.CParental_RequestRecoveryCode_Response
	(*CParental_DisableWithRecoveryCode_Request)(nil),     // 20: steam.client.CParental_DisableWithRecoveryCode_Request
	(*CParental_DisableWithRecoveryCode_Response)(nil),    // 21: steam.client.CParental_DisableWithRecoveryCode_Response
	(*CParental_ParentalSettingsChange_Notification)(nil), // 22: steam.client.CParental_ParentalSettingsChange_Notification
	(*CParental_ParentalUnlock_Notification)(nil),         // 23: steam.client.CParental_ParentalUnlock_Notification
	(*CParental_ParentalLock_Notification)(nil),           // 24: steam.client.CParental_ParentalLock_Notification
	(*NoResponse)(nil),                                    // 25: steam.client.NoResponse
}
var file_steam_client_steammessages_parental_steamclient_proto_depIdxs = []int32{
	0,  // 0: steam.client.ParentalSettings.applist_base:type_name -> steam.client.ParentalApp
	0,  // 1: steam.client.ParentalSettings.applist_custom:type_name -> steam.client.ParentalApp
	1,  // 2: steam.client.CParental_EnableParentalSettings_Request.settings:type_name -> steam.client.ParentalSettings
	1,  // 3: steam.client.CParental_GetParentalSettings_Response.settings:type_name -> steam.client.ParentalSettings
	1,  // 4: steam.client.CParental_SetParentalSettings_Request.settings:type_name -> steam.client.ParentalSettings
	2,  // 5: steam.client.Parental.EnableParentalSettings:input_type -> steam.client.CParental_EnableParentalSettings_Request
	4,  // 6: steam.client.Parental.DisableParentalSettings:input_type -> steam.client.CParental_DisableParentalSettings_Request
	6,  // 7: steam.client.Parental.GetParentalSettings:input_type -> steam.client.CParental_GetParentalSettings_Request
	8,  // 8: steam.client.Parental.GetSignedParentalSettings:input_type -> steam.client.CParental_GetSignedParentalSettings_Request
	10, // 9: steam.client.Parental.SetParentalSettings:input_type -> steam.client.CParental_SetParentalSettings_Request
	12, // 10: steam.client.Parental.ValidateToken:input_type -> steam.client.CParental_ValidateToken_Request
	14, // 11: steam.client.Parental.ValidatePassword:input_type -> steam.client.CParental_ValidatePassword_Request
	16, // 12: steam.client.Parental.LockClient:input_type -> steam.client.CParental_LockClient_Request
	18, // 13: steam.client.Parental.RequestRecoveryCode:input_type -> steam.client.CParental_RequestRecoveryCode_Request
	20, // 14: steam.client.Parental.DisableWithRecoveryCode:input_type -> steam.client.CParental_DisableWithRecoveryCode_Request
	22, // 15: steam.client.ParentalClient.NotifySettingsChange:input_type -> steam.client.CParental_ParentalSettingsChange_Notification
	23, // 16: steam.client.ParentalClient.NotifyUnlock:input_type -> steam.client.CParental_ParentalUnlock_Notification
	24, // 17: steam.client.ParentalClient.NotifyLock:input_type -> steam.client.CParental_ParentalLock_Notification
	3,  // 18: steam.client.Parental.EnableParentalSettings:output_type -> steam.client.CParental_EnableParentalSettings_Response
	5,  // 19: steam.client.Parental.DisableParentalSettings:output_type -> steam.client.CParental_DisableParentalSettings_Response
	7,  // 20: steam.client.Parental.GetParentalSettings:output_type -> steam.client.CParental_GetParentalSettings_Response
	9,  // 21: steam.client.Parental.GetSignedParentalSettings:output_type -> steam.client.CParental_GetSignedParentalSettings_Response
	11, // 22: steam.client.Parental.SetParentalSettings:output_type -> steam.client.CParental_SetParentalSettings_Response
	13, // 23: steam.client.Parental.ValidateToken:output_type -> steam.client.CParental_ValidateToken_Response
	15, // 24: steam.client.Parental.ValidatePassword:output_type -> steam.client.CParental_ValidatePassword_Response
	17, // 25: steam.client.Parental.LockClient:output_type -> steam.client.CParental_LockClient_Response
	19, // 26: steam.client.Parental.RequestRecoveryCode:output_type -> steam.client.CParental_RequestRecoveryCode_Response
	21, // 27: steam.client.Parental.DisableWithRecoveryCode:output_type -> steam.client.CParental_DisableWithRecoveryCode_Response
	25, // 28: steam.client.ParentalClient.NotifySettingsChange:output_type -> steam.client.NoResponse
	25, // 29: steam.client.ParentalClient.NotifyUnlock:output_type -> steam.client.NoResponse
	25, // 30: steam.client.ParentalClient.NotifyLock:output_type -> steam.client.NoResponse
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_parental_steamclient_proto_init() }
func file_steam_client_steammessages_parental_steamclient_proto_init() {
	if File_steam_client_steammessages_parental_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentalApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_EnableParentalSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_EnableParentalSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_DisableParentalSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_DisableParentalSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_GetParentalSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_GetParentalSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_GetSignedParentalSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_GetSignedParentalSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_SetParentalSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_SetParentalSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ValidateToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ValidateToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ValidatePassword_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ValidatePassword_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_LockClient_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_LockClient_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_RequestRecoveryCode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_RequestRecoveryCode_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_DisableWithRecoveryCode_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_DisableWithRecoveryCode_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ParentalSettingsChange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ParentalUnlock_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_parental_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParental_ParentalLock_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_parental_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_parental_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_parental_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_parental_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_parental_steamclient_proto = out.File
	file_steam_client_steammessages_parental_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_parental_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_parental_steamclient_proto_depIdxs = nil
}
