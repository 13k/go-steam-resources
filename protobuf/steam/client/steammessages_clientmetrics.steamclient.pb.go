// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_clientmetrics.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ESteamPipeWorkType int32

const (
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid              ESteamPipeWorkType = 0
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_StageFromChunkStores ESteamPipeWorkType = 1
)

// Enum value maps for ESteamPipeWorkType.
var (
	ESteamPipeWorkType_name = map[int32]string{
		0: "k_ESteamPipeClientWorkType_Invalid",
		1: "k_ESteamPipeClientWorkType_StageFromChunkStores",
	}
	ESteamPipeWorkType_value = map[string]int32{
		"k_ESteamPipeClientWorkType_Invalid":              0,
		"k_ESteamPipeClientWorkType_StageFromChunkStores": 1,
	}
)

func (x ESteamPipeWorkType) Enum() *ESteamPipeWorkType {
	p := new(ESteamPipeWorkType)
	*p = x
	return p
}

func (x ESteamPipeWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes[0].Descriptor()
}

func (ESteamPipeWorkType) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes[0]
}

func (x ESteamPipeWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeWorkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeWorkType(num)
	return nil
}

// Deprecated: Use ESteamPipeWorkType.Descriptor instead.
func (ESteamPipeWorkType) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

type ESteamPipeOperationType int32

const (
	ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid    ESteamPipeOperationType = 0
	ESteamPipeOperationType_k_ESteamPipeOperationType_DecryptCPU ESteamPipeOperationType = 1
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskRead   ESteamPipeOperationType = 2
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskWrite  ESteamPipeOperationType = 3
)

// Enum value maps for ESteamPipeOperationType.
var (
	ESteamPipeOperationType_name = map[int32]string{
		0: "k_ESteamPipeOperationType_Invalid",
		1: "k_ESteamPipeOperationType_DecryptCPU",
		2: "k_ESteamPipeOperationType_DiskRead",
		3: "k_ESteamPipeOperationType_DiskWrite",
	}
	ESteamPipeOperationType_value = map[string]int32{
		"k_ESteamPipeOperationType_Invalid":    0,
		"k_ESteamPipeOperationType_DecryptCPU": 1,
		"k_ESteamPipeOperationType_DiskRead":   2,
		"k_ESteamPipeOperationType_DiskWrite":  3,
	}
)

func (x ESteamPipeOperationType) Enum() *ESteamPipeOperationType {
	p := new(ESteamPipeOperationType)
	*p = x
	return p
}

func (x ESteamPipeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes[1].Descriptor()
}

func (ESteamPipeOperationType) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes[1]
}

func (x ESteamPipeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeOperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeOperationType(num)
	return nil
}

// Deprecated: Use ESteamPipeOperationType.Descriptor instead.
func (ESteamPipeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

type CClientMetrics_AppInterfaceCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawVersion             *string `protobuf:"bytes,1,opt,name=raw_version,json=rawVersion" json:"raw_version,omitempty"`
	RequestedInterfaceType *string `protobuf:"bytes,2,opt,name=requested_interface_type,json=requestedInterfaceType" json:"requested_interface_type,omitempty"`
}

func (x *CClientMetrics_AppInterfaceCreation) Reset() {
	*x = CClientMetrics_AppInterfaceCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceCreation) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceCreation) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceCreation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceCreation) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CClientMetrics_AppInterfaceCreation) GetRawVersion() string {
	if x != nil && x.RawVersion != nil {
		return *x.RawVersion
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceCreation) GetRequestedInterfaceType() string {
	if x != nil && x.RequestedInterfaceType != nil {
		return *x.RequestedInterfaceType
	}
	return ""
}

type CClientMetrics_AppInterfaceMethodCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName *string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	MethodName    *string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	CallCount     *uint32 `protobuf:"varint,3,opt,name=call_count,json=callCount" json:"call_count,omitempty"`
}

func (x *CClientMetrics_AppInterfaceMethodCounts) Reset() {
	*x = CClientMetrics_AppInterfaceMethodCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceMethodCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceMethodCounts) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceMethodCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceMethodCounts.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceMethodCounts) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetInterfaceName() string {
	if x != nil && x.InterfaceName != nil {
		return *x.InterfaceName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetCallCount() uint32 {
	if x != nil && x.CallCount != nil {
		return *x.CallCount
	}
	return 0
}

type CClientMetrics_AppInterfaceStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId               *uint64                                    `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	InterfacesCreated    []*CClientMetrics_AppInterfaceCreation     `protobuf:"bytes,2,rep,name=interfaces_created,json=interfacesCreated" json:"interfaces_created,omitempty"`
	MethodsCalled        []*CClientMetrics_AppInterfaceMethodCounts `protobuf:"bytes,3,rep,name=methods_called,json=methodsCalled" json:"methods_called,omitempty"`
	SessionLengthSeconds *uint32                                    `protobuf:"varint,4,opt,name=session_length_seconds,json=sessionLengthSeconds" json:"session_length_seconds,omitempty"`
}

func (x *CClientMetrics_AppInterfaceStats_Notification) Reset() {
	*x = CClientMetrics_AppInterfaceStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_AppInterfaceStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceStats_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetInterfacesCreated() []*CClientMetrics_AppInterfaceCreation {
	if x != nil {
		return x.InterfacesCreated
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetMethodsCalled() []*CClientMetrics_AppInterfaceMethodCounts {
	if x != nil {
		return x.MethodsCalled
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetSessionLengthSeconds() uint32 {
	if x != nil && x.SessionLengthSeconds != nil {
		return *x.SessionLengthSeconds
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolTested    *uint32 `protobuf:"varint,1,opt,name=protocol_tested,json=protocolTested" json:"protocol_tested,omitempty"`
	ConnectivityState *uint32 `protobuf:"varint,2,opt,name=connectivity_state,json=connectivityState" json:"connectivity_state,omitempty"`
}

func (x *CClientMetrics_IPv6Connectivity_Result) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_IPv6Connectivity_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Result) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Result) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Result.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Result) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetProtocolTested() uint32 {
	if x != nil && x.ProtocolTested != nil {
		return *x.ProtocolTested
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetConnectivityState() uint32 {
	if x != nil && x.ConnectivityState != nil {
		return *x.ConnectivityState
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId             *uint32                                   `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Results            []*CClientMetrics_IPv6Connectivity_Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PrivateIpIsRfc6598 *bool                                     `protobuf:"varint,3,opt,name=private_ip_is_rfc6598,json=privateIpIsRfc6598" json:"private_ip_is_rfc6598,omitempty"`
}

func (x *CClientMetrics_IPv6Connectivity_Notification) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_IPv6Connectivity_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Notification) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetResults() []*CClientMetrics_IPv6Connectivity_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetPrivateIpIsRfc6598() bool {
	if x != nil && x.PrivateIpIsRfc6598 != nil {
		return *x.PrivateIpIsRfc6598
	}
	return false
}

type CClientMetrics_SteamPipeWorkStats_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *ESteamPipeOperationType `protobuf:"varint,1,opt,name=type,enum=steam.client.ESteamPipeOperationType,def=0" json:"type,omitempty"`
	NumOps        *uint32                  `protobuf:"varint,2,opt,name=num_ops,json=numOps" json:"num_ops,omitempty"`
	NumBytes      *uint64                  `protobuf:"varint,3,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	BusyTimeMs    *uint64                  `protobuf:"varint,4,opt,name=busy_time_ms,json=busyTimeMs" json:"busy_time_ms,omitempty"`
	IdleTimeMs    *uint64                  `protobuf:"varint,5,opt,name=idle_time_ms,json=idleTimeMs" json:"idle_time_ms,omitempty"`
	SumRunTimeMs  *uint64                  `protobuf:"varint,6,opt,name=sum_run_time_ms,json=sumRunTimeMs" json:"sum_run_time_ms,omitempty"`
	SumWaitTimeMs *uint64                  `protobuf:"varint,7,opt,name=sum_wait_time_ms,json=sumWaitTimeMs" json:"sum_wait_time_ms,omitempty"`
}

// Default values for CClientMetrics_SteamPipeWorkStats_Operation fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Operation_Type = ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Operation) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Operation) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Operation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Operation) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetType() ESteamPipeOperationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Operation_Type
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumOps() uint32 {
	if x != nil && x.NumOps != nil {
		return *x.NumOps
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumBytes() uint64 {
	if x != nil && x.NumBytes != nil {
		return *x.NumBytes
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetBusyTimeMs() uint64 {
	if x != nil && x.BusyTimeMs != nil {
		return *x.BusyTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetIdleTimeMs() uint64 {
	if x != nil && x.IdleTimeMs != nil {
		return *x.IdleTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumRunTimeMs() uint64 {
	if x != nil && x.SumRunTimeMs != nil {
		return *x.SumRunTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumWaitTimeMs() uint64 {
	if x != nil && x.SumWaitTimeMs != nil {
		return *x.SumWaitTimeMs
	}
	return 0
}

type CClientMetrics_SteamPipeWorkStats_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32                                        `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid    *uint32                                        `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	WorkType   *ESteamPipeWorkType                            `protobuf:"varint,3,opt,name=work_type,json=workType,enum=steam.client.ESteamPipeWorkType,def=0" json:"work_type,omitempty"`
	Operations []*CClientMetrics_SteamPipeWorkStats_Operation `protobuf:"bytes,4,rep,name=operations" json:"operations,omitempty"`
}

// Default values for CClientMetrics_SteamPipeWorkStats_Notification fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType = ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Notification) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetWorkType() ESteamPipeWorkType {
	if x != nil && x.WorkType != nil {
		return *x.WorkType
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetOperations() []*CClientMetrics_SteamPipeWorkStats_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type CClientMetrics_ReportClientError_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *string                                                `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version *string                                                `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Errors  []*CClientMetrics_ReportClientError_Notification_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification) Reset() {
	*x = CClientMetrics_ReportClientError_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CClientMetrics_ReportClientError_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetErrors() []*CClientMetrics_ReportClientError_Notification_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CClientMetrics_ReportClientError_Notification_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Message    *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Count      *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *CClientMetrics_ReportClientError_Notification_Error) Reset() {
	*x = CClientMetrics_ReportClientError_Notification_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification_Error) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification_Error) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification_Error.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification_Error) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

var File_steam_client_steammessages_clientmetrics_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x23, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x27, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x2d,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x26, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x66, 0x63, 0x36, 0x35,
	0x39, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x49, 0x73, 0x52, 0x66, 0x63, 0x36, 0x35, 0x39, 0x38, 0x22, 0xd5, 0x02, 0x0a,
	0x2b, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x4f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x75, 0x6d, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x73,
	0x75, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x2d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a,
	0x71, 0x0a, 0x12, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x33, 0x0a,
	0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x10, 0x01, 0x2a, 0xbb, 0x01, 0x0a, 0x17, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x61, 0x64, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x03,
	0x32, 0x88, 0x04, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x76, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x49, 0x50, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x18, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x69, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x3c, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescData = file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_steam_client_steammessages_clientmetrics_steamclient_proto_goTypes = []interface{}{
	(ESteamPipeWorkType)(0),                                     // 0: steam.client.ESteamPipeWorkType
	(ESteamPipeOperationType)(0),                                // 1: steam.client.ESteamPipeOperationType
	(*CClientMetrics_AppInterfaceCreation)(nil),                 // 2: steam.client.CClientMetrics_AppInterfaceCreation
	(*CClientMetrics_AppInterfaceMethodCounts)(nil),             // 3: steam.client.CClientMetrics_AppInterfaceMethodCounts
	(*CClientMetrics_AppInterfaceStats_Notification)(nil),       // 4: steam.client.CClientMetrics_AppInterfaceStats_Notification
	(*CClientMetrics_IPv6Connectivity_Result)(nil),              // 5: steam.client.CClientMetrics_IPv6Connectivity_Result
	(*CClientMetrics_IPv6Connectivity_Notification)(nil),        // 6: steam.client.CClientMetrics_IPv6Connectivity_Notification
	(*CClientMetrics_SteamPipeWorkStats_Operation)(nil),         // 7: steam.client.CClientMetrics_SteamPipeWorkStats_Operation
	(*CClientMetrics_SteamPipeWorkStats_Notification)(nil),      // 8: steam.client.CClientMetrics_SteamPipeWorkStats_Notification
	(*CClientMetrics_ReportClientError_Notification)(nil),       // 9: steam.client.CClientMetrics_ReportClientError_Notification
	(*CClientMetrics_ReportClientError_Notification_Error)(nil), // 10: steam.client.CClientMetrics_ReportClientError_Notification.Error
	(*NoResponse)(nil),                                          // 11: steam.client.NoResponse
}
var file_steam_client_steammessages_clientmetrics_steamclient_proto_depIdxs = []int32{
	2,  // 0: steam.client.CClientMetrics_AppInterfaceStats_Notification.interfaces_created:type_name -> steam.client.CClientMetrics_AppInterfaceCreation
	3,  // 1: steam.client.CClientMetrics_AppInterfaceStats_Notification.methods_called:type_name -> steam.client.CClientMetrics_AppInterfaceMethodCounts
	5,  // 2: steam.client.CClientMetrics_IPv6Connectivity_Notification.results:type_name -> steam.client.CClientMetrics_IPv6Connectivity_Result
	1,  // 3: steam.client.CClientMetrics_SteamPipeWorkStats_Operation.type:type_name -> steam.client.ESteamPipeOperationType
	0,  // 4: steam.client.CClientMetrics_SteamPipeWorkStats_Notification.work_type:type_name -> steam.client.ESteamPipeWorkType
	7,  // 5: steam.client.CClientMetrics_SteamPipeWorkStats_Notification.operations:type_name -> steam.client.CClientMetrics_SteamPipeWorkStats_Operation
	10, // 6: steam.client.CClientMetrics_ReportClientError_Notification.errors:type_name -> steam.client.CClientMetrics_ReportClientError_Notification.Error
	4,  // 7: steam.client.ClientMetrics.ClientAppInterfaceStatsReport:input_type -> steam.client.CClientMetrics_AppInterfaceStats_Notification
	6,  // 8: steam.client.ClientMetrics.ClientIPv6ConnectivityReport:input_type -> steam.client.CClientMetrics_IPv6Connectivity_Notification
	8,  // 9: steam.client.ClientMetrics.SteamPipeWorkStatsReport:input_type -> steam.client.CClientMetrics_SteamPipeWorkStats_Notification
	9,  // 10: steam.client.ClientMetrics.ReportClientError:input_type -> steam.client.CClientMetrics_ReportClientError_Notification
	11, // 11: steam.client.ClientMetrics.ClientAppInterfaceStatsReport:output_type -> steam.client.NoResponse
	11, // 12: steam.client.ClientMetrics.ClientIPv6ConnectivityReport:output_type -> steam.client.NoResponse
	11, // 13: steam.client.ClientMetrics.SteamPipeWorkStatsReport:output_type -> steam.client.NoResponse
	11, // 14: steam.client.ClientMetrics.ReportClientError:output_type -> steam.client.NoResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_clientmetrics_steamclient_proto_init() }
func file_steam_client_steammessages_clientmetrics_steamclient_proto_init() {
	if File_steam_client_steammessages_clientmetrics_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_AppInterfaceCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_AppInterfaceMethodCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_AppInterfaceStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_IPv6Connectivity_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_IPv6Connectivity_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_SteamPipeWorkStats_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_SteamPipeWorkStats_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_ReportClientError_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientMetrics_ReportClientError_Notification_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_clientmetrics_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_clientmetrics_steamclient_proto_depIdxs,
		EnumInfos:         file_steam_client_steammessages_clientmetrics_steamclient_proto_enumTypes,
		MessageInfos:      file_steam_client_steammessages_clientmetrics_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_clientmetrics_steamclient_proto = out.File
	file_steam_client_steammessages_clientmetrics_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_clientmetrics_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_clientmetrics_steamclient_proto_depIdxs = nil
}
