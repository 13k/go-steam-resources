// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_store.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EUserReviewScorePreference int32

const (
	EUserReviewScorePreference_k_EUserReviewScorePreference_Unset        EUserReviewScorePreference = 0
	EUserReviewScorePreference_k_EUserReviewScorePreference_IncludeAll   EUserReviewScorePreference = 1
	EUserReviewScorePreference_k_EUserReviewScorePreference_ExcludeBombs EUserReviewScorePreference = 2
)

// Enum value maps for EUserReviewScorePreference.
var (
	EUserReviewScorePreference_name = map[int32]string{
		0: "k_EUserReviewScorePreference_Unset",
		1: "k_EUserReviewScorePreference_IncludeAll",
		2: "k_EUserReviewScorePreference_ExcludeBombs",
	}
	EUserReviewScorePreference_value = map[string]int32{
		"k_EUserReviewScorePreference_Unset":        0,
		"k_EUserReviewScorePreference_IncludeAll":   1,
		"k_EUserReviewScorePreference_ExcludeBombs": 2,
	}
)

func (x EUserReviewScorePreference) Enum() *EUserReviewScorePreference {
	p := new(EUserReviewScorePreference)
	*p = x
	return p
}

func (x EUserReviewScorePreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserReviewScorePreference) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_store_steamclient_proto_enumTypes[0].Descriptor()
}

func (EUserReviewScorePreference) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_store_steamclient_proto_enumTypes[0]
}

func (x EUserReviewScorePreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserReviewScorePreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserReviewScorePreference(num)
	return nil
}

// Deprecated: Use EUserReviewScorePreference.Descriptor instead.
func (EUserReviewScorePreference) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{0}
}

type CStore_GetLocalizedNameForTags_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string  `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tagids   []uint32 `protobuf:"varint,2,rep,name=tagids" json:"tagids,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Request) Reset() {
	*x = CStore_GetLocalizedNameForTags_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Request) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CStore_GetLocalizedNameForTags_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CStore_GetLocalizedNameForTags_Request) GetTagids() []uint32 {
	if x != nil {
		return x.Tagids
	}
	return nil
}

type CStore_GetLocalizedNameForTags_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*CStore_GetLocalizedNameForTags_Response_Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Response) Reset() {
	*x = CStore_GetLocalizedNameForTags_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Response) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CStore_GetLocalizedNameForTags_Response) GetTags() []*CStore_GetLocalizedNameForTags_Response_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CStore_GetStorePreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStore_GetStorePreferences_Request) Reset() {
	*x = CStore_GetStorePreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetStorePreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetStorePreferences_Request) ProtoMessage() {}

func (x *CStore_GetStorePreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetStorePreferences_Request.ProtoReflect.Descriptor instead.
func (*CStore_GetStorePreferences_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{2}
}

type CStore_UserPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryLanguage                              *uint32                     `protobuf:"varint,1,opt,name=primary_language,json=primaryLanguage" json:"primary_language,omitempty"`
	SecondaryLanguages                           *uint32                     `protobuf:"varint,2,opt,name=secondary_languages,json=secondaryLanguages" json:"secondary_languages,omitempty"`
	PlatformWindows                              *bool                       `protobuf:"varint,3,opt,name=platform_windows,json=platformWindows" json:"platform_windows,omitempty"`
	PlatformMac                                  *bool                       `protobuf:"varint,4,opt,name=platform_mac,json=platformMac" json:"platform_mac,omitempty"`
	PlatformLinux                                *bool                       `protobuf:"varint,5,opt,name=platform_linux,json=platformLinux" json:"platform_linux,omitempty"`
	HideAdultContentViolence                     *bool                       `protobuf:"varint,6,opt,name=hide_adult_content_violence,json=hideAdultContentViolence" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex                          *bool                       `protobuf:"varint,7,opt,name=hide_adult_content_sex,json=hideAdultContentSex" json:"hide_adult_content_sex,omitempty"`
	TimestampUpdated                             *uint32                     `protobuf:"varint,8,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	HideStoreBroadcast                           *bool                       `protobuf:"varint,9,opt,name=hide_store_broadcast,json=hideStoreBroadcast" json:"hide_store_broadcast,omitempty"`
	ReviewScorePreference                        *EUserReviewScorePreference `protobuf:"varint,10,opt,name=review_score_preference,json=reviewScorePreference,enum=steam.client.EUserReviewScorePreference,def=0" json:"review_score_preference,omitempty"`
	TimestampContentDescriptorPreferencesUpdated *int32                      `protobuf:"varint,11,opt,name=timestamp_content_descriptor_preferences_updated,json=timestampContentDescriptorPreferencesUpdated" json:"timestamp_content_descriptor_preferences_updated,omitempty"`
}

// Default values for CStore_UserPreferences fields.
const (
	Default_CStore_UserPreferences_ReviewScorePreference = EUserReviewScorePreference_k_EUserReviewScorePreference_Unset
)

func (x *CStore_UserPreferences) Reset() {
	*x = CStore_UserPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserPreferences) ProtoMessage() {}

func (x *CStore_UserPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserPreferences) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CStore_UserPreferences) GetPrimaryLanguage() uint32 {
	if x != nil && x.PrimaryLanguage != nil {
		return *x.PrimaryLanguage
	}
	return 0
}

func (x *CStore_UserPreferences) GetSecondaryLanguages() uint32 {
	if x != nil && x.SecondaryLanguages != nil {
		return *x.SecondaryLanguages
	}
	return 0
}

func (x *CStore_UserPreferences) GetPlatformWindows() bool {
	if x != nil && x.PlatformWindows != nil {
		return *x.PlatformWindows
	}
	return false
}

func (x *CStore_UserPreferences) GetPlatformMac() bool {
	if x != nil && x.PlatformMac != nil {
		return *x.PlatformMac
	}
	return false
}

func (x *CStore_UserPreferences) GetPlatformLinux() bool {
	if x != nil && x.PlatformLinux != nil {
		return *x.PlatformLinux
	}
	return false
}

func (x *CStore_UserPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return false
}

func (x *CStore_UserPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return false
}

func (x *CStore_UserPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

func (x *CStore_UserPreferences) GetHideStoreBroadcast() bool {
	if x != nil && x.HideStoreBroadcast != nil {
		return *x.HideStoreBroadcast
	}
	return false
}

func (x *CStore_UserPreferences) GetReviewScorePreference() EUserReviewScorePreference {
	if x != nil && x.ReviewScorePreference != nil {
		return *x.ReviewScorePreference
	}
	return Default_CStore_UserPreferences_ReviewScorePreference
}

func (x *CStore_UserPreferences) GetTimestampContentDescriptorPreferencesUpdated() int32 {
	if x != nil && x.TimestampContentDescriptorPreferencesUpdated != nil {
		return *x.TimestampContentDescriptorPreferencesUpdated
	}
	return 0
}

type CStore_UserTagPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagsToExclude []*CStore_UserTagPreferences_Tag `protobuf:"bytes,1,rep,name=tags_to_exclude,json=tagsToExclude" json:"tags_to_exclude,omitempty"`
}

func (x *CStore_UserTagPreferences) Reset() {
	*x = CStore_UserTagPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserTagPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserTagPreferences) ProtoMessage() {}

func (x *CStore_UserTagPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserTagPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserTagPreferences) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CStore_UserTagPreferences) GetTagsToExclude() []*CStore_UserTagPreferences_Tag {
	if x != nil {
		return x.TagsToExclude
	}
	return nil
}

type CStore_UserContentDescriptorPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentDescriptorsToExclude []*CStore_UserContentDescriptorPreferences_ContentDescriptor `protobuf:"bytes,1,rep,name=content_descriptors_to_exclude,json=contentDescriptorsToExclude" json:"content_descriptors_to_exclude,omitempty"`
}

func (x *CStore_UserContentDescriptorPreferences) Reset() {
	*x = CStore_UserContentDescriptorPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserContentDescriptorPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserContentDescriptorPreferences) ProtoMessage() {}

func (x *CStore_UserContentDescriptorPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserContentDescriptorPreferences.ProtoReflect.Descriptor instead.
func (*CStore_UserContentDescriptorPreferences) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CStore_UserContentDescriptorPreferences) GetContentDescriptorsToExclude() []*CStore_UserContentDescriptorPreferences_ContentDescriptor {
	if x != nil {
		return x.ContentDescriptorsToExclude
	}
	return nil
}

type CStore_GetStorePreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences                  *CStore_UserPreferences                  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	TagPreferences               *CStore_UserTagPreferences               `protobuf:"bytes,2,opt,name=tag_preferences,json=tagPreferences" json:"tag_preferences,omitempty"`
	ContentDescriptorPreferences *CStore_UserContentDescriptorPreferences `protobuf:"bytes,3,opt,name=content_descriptor_preferences,json=contentDescriptorPreferences" json:"content_descriptor_preferences,omitempty"`
}

func (x *CStore_GetStorePreferences_Response) Reset() {
	*x = CStore_GetStorePreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetStorePreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetStorePreferences_Response) ProtoMessage() {}

func (x *CStore_GetStorePreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetStorePreferences_Response.ProtoReflect.Descriptor instead.
func (*CStore_GetStorePreferences_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CStore_GetStorePreferences_Response) GetPreferences() *CStore_UserPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *CStore_GetStorePreferences_Response) GetTagPreferences() *CStore_UserTagPreferences {
	if x != nil {
		return x.TagPreferences
	}
	return nil
}

func (x *CStore_GetStorePreferences_Response) GetContentDescriptorPreferences() *CStore_UserContentDescriptorPreferences {
	if x != nil {
		return x.ContentDescriptorPreferences
	}
	return nil
}

type CStore_StorePreferencesChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences                  *CStore_UserPreferences                  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	TagPreferences               *CStore_UserTagPreferences               `protobuf:"bytes,2,opt,name=tag_preferences,json=tagPreferences" json:"tag_preferences,omitempty"`
	ContentDescriptorPreferences *CStore_UserContentDescriptorPreferences `protobuf:"bytes,3,opt,name=content_descriptor_preferences,json=contentDescriptorPreferences" json:"content_descriptor_preferences,omitempty"`
}

func (x *CStore_StorePreferencesChanged_Notification) Reset() {
	*x = CStore_StorePreferencesChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_StorePreferencesChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_StorePreferencesChanged_Notification) ProtoMessage() {}

func (x *CStore_StorePreferencesChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_StorePreferencesChanged_Notification.ProtoReflect.Descriptor instead.
func (*CStore_StorePreferencesChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CStore_StorePreferencesChanged_Notification) GetPreferences() *CStore_UserPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *CStore_StorePreferencesChanged_Notification) GetTagPreferences() *CStore_UserTagPreferences {
	if x != nil {
		return x.TagPreferences
	}
	return nil
}

func (x *CStore_StorePreferencesChanged_Notification) GetContentDescriptorPreferences() *CStore_UserContentDescriptorPreferences {
	if x != nil {
		return x.ContentDescriptorPreferences
	}
	return nil
}

type CStore_GetLocalizedNameForTags_Response_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid       *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	EnglishName *string `protobuf:"bytes,2,opt,name=english_name,json=englishName" json:"english_name,omitempty"`
	Name        *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) Reset() {
	*x = CStore_GetLocalizedNameForTags_Response_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_GetLocalizedNameForTags_Response_Tag) ProtoMessage() {}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_GetLocalizedNameForTags_Response_Tag.ProtoReflect.Descriptor instead.
func (*CStore_GetLocalizedNameForTags_Response_Tag) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetEnglishName() string {
	if x != nil && x.EnglishName != nil {
		return *x.EnglishName
	}
	return ""
}

func (x *CStore_GetLocalizedNameForTags_Response_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CStore_UserTagPreferences_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid          *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	TimestampAdded *uint32 `protobuf:"varint,3,opt,name=timestamp_added,json=timestampAdded" json:"timestamp_added,omitempty"`
}

func (x *CStore_UserTagPreferences_Tag) Reset() {
	*x = CStore_UserTagPreferences_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserTagPreferences_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserTagPreferences_Tag) ProtoMessage() {}

func (x *CStore_UserTagPreferences_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserTagPreferences_Tag.ProtoReflect.Descriptor instead.
func (*CStore_UserTagPreferences_Tag) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CStore_UserTagPreferences_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *CStore_UserTagPreferences_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CStore_UserTagPreferences_Tag) GetTimestampAdded() uint32 {
	if x != nil && x.TimestampAdded != nil {
		return *x.TimestampAdded
	}
	return 0
}

type CStore_UserContentDescriptorPreferences_ContentDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentDescriptorid *uint32 `protobuf:"varint,1,opt,name=content_descriptorid,json=contentDescriptorid" json:"content_descriptorid,omitempty"`
	TimestampAdded      *uint32 `protobuf:"varint,2,opt,name=timestamp_added,json=timestampAdded" json:"timestamp_added,omitempty"`
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) Reset() {
	*x = CStore_UserContentDescriptorPreferences_ContentDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStore_UserContentDescriptorPreferences_ContentDescriptor) ProtoMessage() {}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_store_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStore_UserContentDescriptorPreferences_ContentDescriptor.ProtoReflect.Descriptor instead.
func (*CStore_UserContentDescriptorPreferences_ContentDescriptor) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) GetContentDescriptorid() uint32 {
	if x != nil && x.ContentDescriptorid != nil {
		return *x.ContentDescriptorid
	}
	return 0
}

func (x *CStore_UserContentDescriptorPreferences_ContentDescriptor) GetTimestampAdded() uint32 {
	if x != nil && x.TimestampAdded != nil {
		return *x.TimestampAdded
	}
	return 0
}

var File_steam_client_steammessages_store_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_store_steamclient_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a,
	0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x27,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x52, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xab, 0x05, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d,
	0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4d, 0x61, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x3d, 0x0a, 0x1b,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x68, 0x69, 0x64, 0x65, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x69, 0x64,
	0x65, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x78,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x84, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x22, 0x6b, 0x5f, 0x45,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52,
	0x15, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x30, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xca,
	0x01, 0x0a, 0x19, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0f,
	0x74, 0x61, 0x67, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x1a, 0x58, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x65, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x27,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x6f, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x6f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x41, 0x64, 0x64, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0e, 0x74, 0x61, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x1e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0e, 0x74, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x7b, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2a, 0xa0, 0x01,
	0x0a, 0x1a, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x6f, 0x6d, 0x62, 0x73, 0x10, 0x02,
	0x32, 0xad, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x61,
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0xc9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xb5,
	0x18, 0x49, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x23, 0x82, 0xb5, 0x18,
	0x1f, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x32, 0x88, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0xcb, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x2b,
	0x82, 0xb5, 0x18, 0x23, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xc0, 0xb5, 0x18, 0x02, 0x42, 0x3c, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_store_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_store_steamclient_proto_rawDescData = file_steam_client_steammessages_store_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_store_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_store_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_store_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_store_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_store_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_store_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steam_client_steammessages_store_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_steam_client_steammessages_store_steamclient_proto_goTypes = []interface{}{
	(EUserReviewScorePreference)(0),                                   // 0: steam.client.EUserReviewScorePreference
	(*CStore_GetLocalizedNameForTags_Request)(nil),                    // 1: steam.client.CStore_GetLocalizedNameForTags_Request
	(*CStore_GetLocalizedNameForTags_Response)(nil),                   // 2: steam.client.CStore_GetLocalizedNameForTags_Response
	(*CStore_GetStorePreferences_Request)(nil),                        // 3: steam.client.CStore_GetStorePreferences_Request
	(*CStore_UserPreferences)(nil),                                    // 4: steam.client.CStore_UserPreferences
	(*CStore_UserTagPreferences)(nil),                                 // 5: steam.client.CStore_UserTagPreferences
	(*CStore_UserContentDescriptorPreferences)(nil),                   // 6: steam.client.CStore_UserContentDescriptorPreferences
	(*CStore_GetStorePreferences_Response)(nil),                       // 7: steam.client.CStore_GetStorePreferences_Response
	(*CStore_StorePreferencesChanged_Notification)(nil),               // 8: steam.client.CStore_StorePreferencesChanged_Notification
	(*CStore_GetLocalizedNameForTags_Response_Tag)(nil),               // 9: steam.client.CStore_GetLocalizedNameForTags_Response.Tag
	(*CStore_UserTagPreferences_Tag)(nil),                             // 10: steam.client.CStore_UserTagPreferences.Tag
	(*CStore_UserContentDescriptorPreferences_ContentDescriptor)(nil), // 11: steam.client.CStore_UserContentDescriptorPreferences.ContentDescriptor
	(*NoResponse)(nil),                                                // 12: steam.client.NoResponse
}
var file_steam_client_steammessages_store_steamclient_proto_depIdxs = []int32{
	9,  // 0: steam.client.CStore_GetLocalizedNameForTags_Response.tags:type_name -> steam.client.CStore_GetLocalizedNameForTags_Response.Tag
	0,  // 1: steam.client.CStore_UserPreferences.review_score_preference:type_name -> steam.client.EUserReviewScorePreference
	10, // 2: steam.client.CStore_UserTagPreferences.tags_to_exclude:type_name -> steam.client.CStore_UserTagPreferences.Tag
	11, // 3: steam.client.CStore_UserContentDescriptorPreferences.content_descriptors_to_exclude:type_name -> steam.client.CStore_UserContentDescriptorPreferences.ContentDescriptor
	4,  // 4: steam.client.CStore_GetStorePreferences_Response.preferences:type_name -> steam.client.CStore_UserPreferences
	5,  // 5: steam.client.CStore_GetStorePreferences_Response.tag_preferences:type_name -> steam.client.CStore_UserTagPreferences
	6,  // 6: steam.client.CStore_GetStorePreferences_Response.content_descriptor_preferences:type_name -> steam.client.CStore_UserContentDescriptorPreferences
	4,  // 7: steam.client.CStore_StorePreferencesChanged_Notification.preferences:type_name -> steam.client.CStore_UserPreferences
	5,  // 8: steam.client.CStore_StorePreferencesChanged_Notification.tag_preferences:type_name -> steam.client.CStore_UserTagPreferences
	6,  // 9: steam.client.CStore_StorePreferencesChanged_Notification.content_descriptor_preferences:type_name -> steam.client.CStore_UserContentDescriptorPreferences
	1,  // 10: steam.client.Store.GetLocalizedNameForTags:input_type -> steam.client.CStore_GetLocalizedNameForTags_Request
	3,  // 11: steam.client.Store.GetStorePreferences:input_type -> steam.client.CStore_GetStorePreferences_Request
	8,  // 12: steam.client.StoreClient.NotifyStorePreferencesChanged:input_type -> steam.client.CStore_StorePreferencesChanged_Notification
	2,  // 13: steam.client.Store.GetLocalizedNameForTags:output_type -> steam.client.CStore_GetLocalizedNameForTags_Response
	7,  // 14: steam.client.Store.GetStorePreferences:output_type -> steam.client.CStore_GetStorePreferences_Response
	12, // 15: steam.client.StoreClient.NotifyStorePreferencesChanged:output_type -> steam.client.NoResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_store_steamclient_proto_init() }
func file_steam_client_steammessages_store_steamclient_proto_init() {
	if File_steam_client_steammessages_store_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetStorePreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserTagPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserContentDescriptorPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetStorePreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_StorePreferencesChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_GetLocalizedNameForTags_Response_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserTagPreferences_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_store_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStore_UserContentDescriptorPreferences_ContentDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_store_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_store_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_store_steamclient_proto_depIdxs,
		EnumInfos:         file_steam_client_steammessages_store_steamclient_proto_enumTypes,
		MessageInfos:      file_steam_client_steammessages_store_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_store_steamclient_proto = out.File
	file_steam_client_steammessages_store_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_store_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_store_steamclient_proto_depIdxs = nil
}
