// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_gameservers.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CGameServers_GetServerList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Limit  *uint32 `protobuf:"varint,2,opt,name=limit,def=100" json:"limit,omitempty"`
}

// Default values for CGameServers_GetServerList_Request fields.
const (
	Default_CGameServers_GetServerList_Request_Limit = uint32(100)
)

func (x *CGameServers_GetServerList_Request) Reset() {
	*x = CGameServers_GetServerList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Request) ProtoMessage() {}

func (x *CGameServers_GetServerList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CGameServers_GetServerList_Request) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *CGameServers_GetServerList_Request) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_CGameServers_GetServerList_Request_Limit
}

type CGameServers_GetServerList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CGameServers_GetServerList_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CGameServers_GetServerList_Response) Reset() {
	*x = CGameServers_GetServerList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Response) ProtoMessage() {}

func (x *CGameServers_GetServerList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CGameServers_GetServerList_Response) GetServers() []*CGameServers_GetServerList_Response_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CGameServers_GetServerSteamIDsByIP_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIps []string `protobuf:"bytes,1,rep,name=server_ips,json=serverIps" json:"server_ips,omitempty"`
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) Reset() {
	*x = CGameServers_GetServerSteamIDsByIP_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerSteamIDsByIP_Request) ProtoMessage() {}

func (x *CGameServers_GetServerSteamIDsByIP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerSteamIDsByIP_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerSteamIDsByIP_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) GetServerIps() []string {
	if x != nil {
		return x.ServerIps
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CGameServers_IPsWithSteamIDs_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CGameServers_IPsWithSteamIDs_Response) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_IPsWithSteamIDs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CGameServers_IPsWithSteamIDs_Response) GetServers() []*CGameServers_IPsWithSteamIDs_Response_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CGameServers_GetServerIPsBySteamID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamids []uint64 `protobuf:"fixed64,1,rep,name=server_steamids,json=serverSteamids" json:"server_steamids,omitempty"`
}

func (x *CGameServers_GetServerIPsBySteamID_Request) Reset() {
	*x = CGameServers_GetServerIPsBySteamID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerIPsBySteamID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerIPsBySteamID_Request) ProtoMessage() {}

func (x *CGameServers_GetServerIPsBySteamID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerIPsBySteamID_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerIPsBySteamID_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CGameServers_GetServerIPsBySteamID_Request) GetServerSteamids() []uint64 {
	if x != nil {
		return x.ServerSteamids
	}
	return nil
}

type CGameServers_GetServerList_Response_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr       *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Gameport   *uint32 `protobuf:"varint,2,opt,name=gameport" json:"gameport,omitempty"`
	Specport   *uint32 `protobuf:"varint,3,opt,name=specport" json:"specport,omitempty"`
	Steamid    *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Name       *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Appid      *uint32 `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
	Gamedir    *string `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version    *string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product    *string `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region     *int32  `protobuf:"varint,10,opt,name=region" json:"region,omitempty"`
	Players    *int32  `protobuf:"varint,11,opt,name=players" json:"players,omitempty"`
	MaxPlayers *int32  `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots       *int32  `protobuf:"varint,13,opt,name=bots" json:"bots,omitempty"`
	Map        *string `protobuf:"bytes,14,opt,name=map" json:"map,omitempty"`
	Secure     *bool   `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated  *bool   `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os         *string `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	Gametype   *string `protobuf:"bytes,18,opt,name=gametype" json:"gametype,omitempty"`
}

func (x *CGameServers_GetServerList_Response_Server) Reset() {
	*x = CGameServers_GetServerList_Response_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Response_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Response_Server) ProtoMessage() {}

func (x *CGameServers_GetServerList_Response_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Response_Server.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Response_Server) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CGameServers_GetServerList_Response_Server) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetGameport() uint32 {
	if x != nil && x.Gameport != nil {
		return *x.Gameport
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetSpecport() uint32 {
	if x != nil && x.Specport != nil {
		return *x.Specport
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetRegion() int32 {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetPlayers() int32 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetMaxPlayers() int32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetBots() int32 {
	if x != nil && x.Bots != nil {
		return *x.Bots
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CGameServers_GetServerList_Response_Server) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CGameServers_GetServerList_Response_Server) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetGametype() string {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return ""
}

type CGameServers_IPsWithSteamIDs_Response_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response_Server) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response_Server.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response_Server) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

var File_steam_client_steammessages_gameservers_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_gameservers_steamclient_proto_rawDesc = []byte{
	0x0a, 0x38, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x22, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31, 0x30, 0x30,
	0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a, 0x05, 0x0a, 0x23, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xe5, 0x03, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x49, 0x50, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x64,
	0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x4b, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x73, 0x42, 0x79, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x25, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x36,
	0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x50, 0x73, 0x42, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x32, 0xf9, 0x04,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x42, 0x79, 0x49, 0x50,
	0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x42, 0x79,
	0x49, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0x82, 0xb5, 0x18, 0x32, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x49, 0x50, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x73, 0x42, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x73, 0x42, 0x79, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x49, 0x50, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x73, 0x1a, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x3c, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_gameservers_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_gameservers_steamclient_proto_rawDescData = file_steam_client_steammessages_gameservers_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_gameservers_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_gameservers_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_gameservers_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_gameservers_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_gameservers_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_steam_client_steammessages_gameservers_steamclient_proto_goTypes = []interface{}{
	(*CGameServers_GetServerList_Request)(nil),           // 0: steam.client.CGameServers_GetServerList_Request
	(*CGameServers_GetServerList_Response)(nil),          // 1: steam.client.CGameServers_GetServerList_Response
	(*CGameServers_GetServerSteamIDsByIP_Request)(nil),   // 2: steam.client.CGameServers_GetServerSteamIDsByIP_Request
	(*CGameServers_IPsWithSteamIDs_Response)(nil),        // 3: steam.client.CGameServers_IPsWithSteamIDs_Response
	(*CGameServers_GetServerIPsBySteamID_Request)(nil),   // 4: steam.client.CGameServers_GetServerIPsBySteamID_Request
	(*CGameServers_GetServerList_Response_Server)(nil),   // 5: steam.client.CGameServers_GetServerList_Response.Server
	(*CGameServers_IPsWithSteamIDs_Response_Server)(nil), // 6: steam.client.CGameServers_IPsWithSteamIDs_Response.Server
}
var file_steam_client_steammessages_gameservers_steamclient_proto_depIdxs = []int32{
	5, // 0: steam.client.CGameServers_GetServerList_Response.servers:type_name -> steam.client.CGameServers_GetServerList_Response.Server
	6, // 1: steam.client.CGameServers_IPsWithSteamIDs_Response.servers:type_name -> steam.client.CGameServers_IPsWithSteamIDs_Response.Server
	0, // 2: steam.client.GameServers.GetServerList:input_type -> steam.client.CGameServers_GetServerList_Request
	2, // 3: steam.client.GameServers.GetServerSteamIDsByIP:input_type -> steam.client.CGameServers_GetServerSteamIDsByIP_Request
	4, // 4: steam.client.GameServers.GetServerIPsBySteamID:input_type -> steam.client.CGameServers_GetServerIPsBySteamID_Request
	1, // 5: steam.client.GameServers.GetServerList:output_type -> steam.client.CGameServers_GetServerList_Response
	3, // 6: steam.client.GameServers.GetServerSteamIDsByIP:output_type -> steam.client.CGameServers_IPsWithSteamIDs_Response
	3, // 7: steam.client.GameServers.GetServerIPsBySteamID:output_type -> steam.client.CGameServers_IPsWithSteamIDs_Response
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_gameservers_steamclient_proto_init() }
func file_steam_client_steammessages_gameservers_steamclient_proto_init() {
	if File_steam_client_steammessages_gameservers_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerSteamIDsByIP_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_IPsWithSteamIDs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerIPsBySteamID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Response_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_IPsWithSteamIDs_Response_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_gameservers_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_gameservers_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_gameservers_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_gameservers_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_gameservers_steamclient_proto = out.File
	file_steam_client_steammessages_gameservers_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_gameservers_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_gameservers_steamclient_proto_depIdxs = nil
}
