// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_gameservers.steamclient.proto

package client // import "github.com/13k/go-steam-resources/protobuf/steam/client"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CGameServers_GetServerList_Request struct {
	Filter               *string  `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Limit                *uint32  `protobuf:"varint,2,opt,name=limit,def=100" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGameServers_GetServerList_Request) Reset()         { *m = CGameServers_GetServerList_Request{} }
func (m *CGameServers_GetServerList_Request) String() string { return proto.CompactTextString(m) }
func (*CGameServers_GetServerList_Request) ProtoMessage()    {}
func (*CGameServers_GetServerList_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{0}
}
func (m *CGameServers_GetServerList_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_GetServerList_Request.Unmarshal(m, b)
}
func (m *CGameServers_GetServerList_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_GetServerList_Request.Marshal(b, m, deterministic)
}
func (dst *CGameServers_GetServerList_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_GetServerList_Request.Merge(dst, src)
}
func (m *CGameServers_GetServerList_Request) XXX_Size() int {
	return xxx_messageInfo_CGameServers_GetServerList_Request.Size(m)
}
func (m *CGameServers_GetServerList_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_GetServerList_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_GetServerList_Request proto.InternalMessageInfo

const Default_CGameServers_GetServerList_Request_Limit uint32 = 100

func (m *CGameServers_GetServerList_Request) GetFilter() string {
	if m != nil && m.Filter != nil {
		return *m.Filter
	}
	return ""
}

func (m *CGameServers_GetServerList_Request) GetLimit() uint32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return Default_CGameServers_GetServerList_Request_Limit
}

type CGameServers_GetServerList_Response struct {
	Servers              []*CGameServers_GetServerList_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *CGameServers_GetServerList_Response) Reset()         { *m = CGameServers_GetServerList_Response{} }
func (m *CGameServers_GetServerList_Response) String() string { return proto.CompactTextString(m) }
func (*CGameServers_GetServerList_Response) ProtoMessage()    {}
func (*CGameServers_GetServerList_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{1}
}
func (m *CGameServers_GetServerList_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_GetServerList_Response.Unmarshal(m, b)
}
func (m *CGameServers_GetServerList_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_GetServerList_Response.Marshal(b, m, deterministic)
}
func (dst *CGameServers_GetServerList_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_GetServerList_Response.Merge(dst, src)
}
func (m *CGameServers_GetServerList_Response) XXX_Size() int {
	return xxx_messageInfo_CGameServers_GetServerList_Response.Size(m)
}
func (m *CGameServers_GetServerList_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_GetServerList_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_GetServerList_Response proto.InternalMessageInfo

func (m *CGameServers_GetServerList_Response) GetServers() []*CGameServers_GetServerList_Response_Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type CGameServers_GetServerList_Response_Server struct {
	Addr                 *string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Gameport             *uint32  `protobuf:"varint,2,opt,name=gameport" json:"gameport,omitempty"`
	Specport             *uint32  `protobuf:"varint,3,opt,name=specport" json:"specport,omitempty"`
	Steamid              *uint64  `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Appid                *uint32  `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
	Gamedir              *string  `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version              *string  `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product              *string  `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region               *int32   `protobuf:"varint,10,opt,name=region" json:"region,omitempty"`
	Players              *int32   `protobuf:"varint,11,opt,name=players" json:"players,omitempty"`
	MaxPlayers           *int32   `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots                 *int32   `protobuf:"varint,13,opt,name=bots" json:"bots,omitempty"`
	Map                  *string  `protobuf:"bytes,14,opt,name=map" json:"map,omitempty"`
	Secure               *bool    `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated            *bool    `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os                   *string  `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	Gametype             *string  `protobuf:"bytes,18,opt,name=gametype" json:"gametype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGameServers_GetServerList_Response_Server) Reset() {
	*m = CGameServers_GetServerList_Response_Server{}
}
func (m *CGameServers_GetServerList_Response_Server) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerList_Response_Server) ProtoMessage() {}
func (*CGameServers_GetServerList_Response_Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{1, 0}
}
func (m *CGameServers_GetServerList_Response_Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_GetServerList_Response_Server.Unmarshal(m, b)
}
func (m *CGameServers_GetServerList_Response_Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_GetServerList_Response_Server.Marshal(b, m, deterministic)
}
func (dst *CGameServers_GetServerList_Response_Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_GetServerList_Response_Server.Merge(dst, src)
}
func (m *CGameServers_GetServerList_Response_Server) XXX_Size() int {
	return xxx_messageInfo_CGameServers_GetServerList_Response_Server.Size(m)
}
func (m *CGameServers_GetServerList_Response_Server) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_GetServerList_Response_Server.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_GetServerList_Response_Server proto.InternalMessageInfo

func (m *CGameServers_GetServerList_Response_Server) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetGameport() uint32 {
	if m != nil && m.Gameport != nil {
		return *m.Gameport
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetSpecport() uint32 {
	if m != nil && m.Specport != nil {
		return *m.Specport
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetGamedir() string {
	if m != nil && m.Gamedir != nil {
		return *m.Gamedir
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetProduct() string {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetRegion() int32 {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetPlayers() int32 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetMaxPlayers() int32 {
	if m != nil && m.MaxPlayers != nil {
		return *m.MaxPlayers
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetBots() int32 {
	if m != nil && m.Bots != nil {
		return *m.Bots
	}
	return 0
}

func (m *CGameServers_GetServerList_Response_Server) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetSecure() bool {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return false
}

func (m *CGameServers_GetServerList_Response_Server) GetDedicated() bool {
	if m != nil && m.Dedicated != nil {
		return *m.Dedicated
	}
	return false
}

func (m *CGameServers_GetServerList_Response_Server) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *CGameServers_GetServerList_Response_Server) GetGametype() string {
	if m != nil && m.Gametype != nil {
		return *m.Gametype
	}
	return ""
}

type CGameServers_GetServerSteamIDsByIP_Request struct {
	ServerIps            []string `protobuf:"bytes,1,rep,name=server_ips,json=serverIps" json:"server_ips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGameServers_GetServerSteamIDsByIP_Request) Reset() {
	*m = CGameServers_GetServerSteamIDsByIP_Request{}
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerSteamIDsByIP_Request) ProtoMessage() {}
func (*CGameServers_GetServerSteamIDsByIP_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{2}
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request.Unmarshal(m, b)
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request.Marshal(b, m, deterministic)
}
func (dst *CGameServers_GetServerSteamIDsByIP_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request.Merge(dst, src)
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) XXX_Size() int {
	return xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request.Size(m)
}
func (m *CGameServers_GetServerSteamIDsByIP_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_GetServerSteamIDsByIP_Request proto.InternalMessageInfo

func (m *CGameServers_GetServerSteamIDsByIP_Request) GetServerIps() []string {
	if m != nil {
		return m.ServerIps
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response struct {
	Servers              []*CGameServers_IPsWithSteamIDs_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *CGameServers_IPsWithSteamIDs_Response) Reset()         { *m = CGameServers_IPsWithSteamIDs_Response{} }
func (m *CGameServers_IPsWithSteamIDs_Response) String() string { return proto.CompactTextString(m) }
func (*CGameServers_IPsWithSteamIDs_Response) ProtoMessage()    {}
func (*CGameServers_IPsWithSteamIDs_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{3}
}
func (m *CGameServers_IPsWithSteamIDs_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response.Unmarshal(m, b)
}
func (m *CGameServers_IPsWithSteamIDs_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response.Marshal(b, m, deterministic)
}
func (dst *CGameServers_IPsWithSteamIDs_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response.Merge(dst, src)
}
func (m *CGameServers_IPsWithSteamIDs_Response) XXX_Size() int {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response.Size(m)
}
func (m *CGameServers_IPsWithSteamIDs_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response proto.InternalMessageInfo

func (m *CGameServers_IPsWithSteamIDs_Response) GetServers() []*CGameServers_IPsWithSteamIDs_Response_Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response_Server struct {
	Addr                 *string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Steamid              *uint64  `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGameServers_IPsWithSteamIDs_Response_Server) Reset() {
	*m = CGameServers_IPsWithSteamIDs_Response_Server{}
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_IPsWithSteamIDs_Response_Server) ProtoMessage() {}
func (*CGameServers_IPsWithSteamIDs_Response_Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{3, 0}
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server.Unmarshal(m, b)
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server.Marshal(b, m, deterministic)
}
func (dst *CGameServers_IPsWithSteamIDs_Response_Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server.Merge(dst, src)
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) XXX_Size() int {
	return xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server.Size(m)
}
func (m *CGameServers_IPsWithSteamIDs_Response_Server) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_IPsWithSteamIDs_Response_Server proto.InternalMessageInfo

func (m *CGameServers_IPsWithSteamIDs_Response_Server) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *CGameServers_IPsWithSteamIDs_Response_Server) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

type CGameServers_GetServerIPsBySteamID_Request struct {
	ServerSteamids       []uint64 `protobuf:"fixed64,1,rep,name=server_steamids,json=serverSteamids" json:"server_steamids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGameServers_GetServerIPsBySteamID_Request) Reset() {
	*m = CGameServers_GetServerIPsBySteamID_Request{}
}
func (m *CGameServers_GetServerIPsBySteamID_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CGameServers_GetServerIPsBySteamID_Request) ProtoMessage() {}
func (*CGameServers_GetServerIPsBySteamID_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde, []int{4}
}
func (m *CGameServers_GetServerIPsBySteamID_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request.Unmarshal(m, b)
}
func (m *CGameServers_GetServerIPsBySteamID_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request.Marshal(b, m, deterministic)
}
func (dst *CGameServers_GetServerIPsBySteamID_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request.Merge(dst, src)
}
func (m *CGameServers_GetServerIPsBySteamID_Request) XXX_Size() int {
	return xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request.Size(m)
}
func (m *CGameServers_GetServerIPsBySteamID_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CGameServers_GetServerIPsBySteamID_Request proto.InternalMessageInfo

func (m *CGameServers_GetServerIPsBySteamID_Request) GetServerSteamids() []uint64 {
	if m != nil {
		return m.ServerSteamids
	}
	return nil
}

func init() {
	proto.RegisterType((*CGameServers_GetServerList_Request)(nil), "CGameServers_GetServerList_Request")
	proto.RegisterType((*CGameServers_GetServerList_Response)(nil), "CGameServers_GetServerList_Response")
	proto.RegisterType((*CGameServers_GetServerList_Response_Server)(nil), "CGameServers_GetServerList_Response.Server")
	proto.RegisterType((*CGameServers_GetServerSteamIDsByIP_Request)(nil), "CGameServers_GetServerSteamIDsByIP_Request")
	proto.RegisterType((*CGameServers_IPsWithSteamIDs_Response)(nil), "CGameServers_IPsWithSteamIDs_Response")
	proto.RegisterType((*CGameServers_IPsWithSteamIDs_Response_Server)(nil), "CGameServers_IPsWithSteamIDs_Response.Server")
	proto.RegisterType((*CGameServers_GetServerIPsBySteamID_Request)(nil), "CGameServers_GetServerIPsBySteamID_Request")
}

func init() {
	proto.RegisterFile("steammessages_gameservers.steamclient.proto", fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde)
}

var fileDescriptor_steammessages_gameservers_steamclient_6dfc5e602bae9dde = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x8f, 0xe3, 0x34,
	0x14, 0x55, 0xa6, 0x9d, 0xce, 0xd4, 0x65, 0x66, 0x17, 0x6b, 0x41, 0x56, 0xc5, 0x87, 0x95, 0x01,
	0xa6, 0x62, 0x77, 0xd2, 0xee, 0x20, 0xcd, 0x4a, 0x2c, 0x12, 0xa2, 0x20, 0x55, 0x15, 0x3c, 0x94,
	0x2c, 0x1f, 0x12, 0x2f, 0x95, 0x9b, 0xdc, 0xa6, 0x16, 0x75, 0x92, 0xb5, 0x9d, 0xd5, 0xf4, 0x0d,
	0xf5, 0x99, 0x9f, 0xc1, 0x03, 0x12, 0x82, 0xb7, 0xfe, 0x24, 0x7e, 0x06, 0x12, 0xb2, 0x9d, 0xf4,
	0x63, 0xa7, 0x03, 0x7d, 0xcb, 0xf1, 0xb9, 0xf7, 0xfa, 0x5c, 0xdf, 0x63, 0x07, 0x3d, 0x56, 0x1a,
	0x98, 0x10, 0xa0, 0x14, 0x4b, 0x40, 0x8d, 0x13, 0x26, 0x40, 0x81, 0x7c, 0x05, 0x52, 0x05, 0x96,
	0x89, 0xe6, 0x1c, 0x52, 0x1d, 0xe4, 0x32, 0xd3, 0x59, 0xfb, 0xc9, 0x6e, 0x70, 0x91, 0xf2, 0x29,
	0x87, 0x78, 0x3c, 0x61, 0x0a, 0xee, 0x46, 0xfb, 0x7f, 0x79, 0xc8, 0xff, 0x72, 0xc0, 0x04, 0xbc,
	0x70, 0x05, 0xc7, 0x03, 0xd0, 0xee, 0xf3, 0x1b, 0xae, 0xf4, 0x38, 0x84, 0x97, 0x05, 0x28, 0x8d,
	0x7b, 0xa8, 0x31, 0xe5, 0x73, 0x0d, 0x92, 0x78, 0xd4, 0xeb, 0x34, 0xfb, 0x64, 0xb9, 0x22, 0x8f,
	0xbe, 0x2d, 0x40, 0x2e, 0xa8, 0x5b, 0xa7, 0x4a, 0x4b, 0x9e, 0x26, 0x41, 0x58, 0xc6, 0xe1, 0x1f,
	0xd0, 0xf1, 0x9c, 0x0b, 0xae, 0xc9, 0x11, 0xf5, 0x3a, 0x67, 0x9f, 0xd6, 0x9e, 0xf6, 0x7a, 0xfd,
	0xe7, 0xcb, 0x15, 0x79, 0xf6, 0xdd, 0x0c, 0xa8, 0x60, 0xb7, 0x5c, 0x14, 0x82, 0xa6, 0x85, 0x98,
	0x80, 0xa4, 0xd9, 0x94, 0x96, 0xfd, 0x50, 0x9d, 0x51, 0x09, 0xba, 0x90, 0x29, 0xe5, 0x29, 0xd5,
	0x33, 0xa0, 0x12, 0x54, 0x9e, 0xa5, 0x0a, 0x42, 0x57, 0xce, 0xff, 0xa7, 0x8e, 0x2e, 0xfe, 0x53,
	0xb0, 0x0b, 0xc7, 0x29, 0x3a, 0x29, 0x6b, 0x12, 0x8f, 0xd6, 0x3a, 0xad, 0xeb, 0xc7, 0xc1, 0x01,
	0x69, 0x81, 0x5b, 0xeb, 0x5f, 0x2e, 0x57, 0xe4, 0xc2, 0x30, 0xdb, 0xda, 0x04, 0xd3, 0xd1, 0x8c,
	0xa7, 0x89, 0xd5, 0xe5, 0xda, 0x0c, 0xab, 0x4d, 0xda, 0x7f, 0xd7, 0x50, 0xc3, 0x25, 0xe3, 0x1b,
	0x54, 0x67, 0x71, 0x5c, 0x1d, 0x95, 0xbf, 0x5c, 0x91, 0xf7, 0x4c, 0xd3, 0x2e, 0xf2, 0x52, 0xd1,
	0xe1, 0x88, 0xb2, 0x34, 0xa6, 0x2f, 0xed, 0xf1, 0xe5, 0x99, 0xd4, 0xa1, 0x8d, 0xc7, 0x6d, 0x74,
	0x6a, 0x46, 0x6b, 0x56, 0xdc, 0xa9, 0x85, 0x6b, 0x6c, 0x38, 0x95, 0x43, 0x64, 0xb9, 0x9a, 0xe3,
	0x2a, 0x8c, 0x09, 0x3a, 0xb1, 0x83, 0xe5, 0x31, 0xa9, 0x53, 0xaf, 0xd3, 0x08, 0x2b, 0x88, 0x31,
	0xaa, 0xa7, 0x4c, 0x00, 0x39, 0x36, 0x4a, 0x42, 0xfb, 0x8d, 0x1f, 0xa1, 0x63, 0x96, 0xe7, 0x3c,
	0x26, 0x0d, 0x5b, 0xc6, 0x01, 0x53, 0xc3, 0xec, 0x15, 0x73, 0x49, 0x4e, 0x6c, 0x70, 0x05, 0x0d,
	0x63, 0x1a, 0xe4, 0x59, 0x4a, 0x4e, 0x1d, 0x53, 0x42, 0xc3, 0xe4, 0x32, 0x8b, 0x8b, 0x48, 0x93,
	0xa6, 0x63, 0x4a, 0x88, 0xdf, 0x46, 0x0d, 0x09, 0x89, 0x49, 0x41, 0xd4, 0xeb, 0x1c, 0x87, 0x25,
	0xb2, 0x19, 0x73, 0xb6, 0x30, 0x43, 0x69, 0x59, 0xa2, 0x82, 0xf8, 0x7d, 0xd4, 0x12, 0xec, 0x76,
	0x5c, 0xb1, 0x6f, 0x58, 0x16, 0x09, 0x76, 0x3b, 0x2a, 0x03, 0x30, 0xaa, 0x4f, 0x32, 0xad, 0xc8,
	0x99, 0x65, 0xec, 0x37, 0x7e, 0x88, 0x6a, 0x82, 0xe5, 0xe4, 0xdc, 0x6e, 0x6e, 0x3e, 0xcd, 0xc6,
	0x0a, 0xa2, 0x42, 0x02, 0x79, 0x40, 0xbd, 0xce, 0x69, 0x58, 0x22, 0xfc, 0x0e, 0x6a, 0xc6, 0x10,
	0xf3, 0x88, 0x69, 0x88, 0xc9, 0x43, 0x4b, 0x6d, 0x16, 0xf0, 0x39, 0x3a, 0xca, 0x14, 0x79, 0xd3,
	0x96, 0x39, 0xca, 0x54, 0x35, 0x08, 0xbd, 0xc8, 0x81, 0x60, 0xbb, 0xba, 0xc6, 0xfe, 0xd7, 0xe8,
	0xe3, 0xfd, 0x3e, 0x7a, 0x61, 0xce, 0x7c, 0xf8, 0x95, 0xea, 0x2f, 0x86, 0xa3, 0xf5, 0xbd, 0x79,
	0x17, 0x21, 0x37, 0xf6, 0x31, 0xcf, 0x9d, 0x11, 0x9b, 0x61, 0xd3, 0xad, 0x0c, 0x73, 0xe5, 0xff,
	0xee, 0xa1, 0x0f, 0x77, 0xaa, 0x0d, 0x47, 0xea, 0x47, 0xae, 0x67, 0x55, 0xad, 0x8d, 0x9d, 0x07,
	0xaf, 0xdb, 0xf9, 0x2a, 0x38, 0x28, 0xb1, 0x34, 0xf4, 0xc6, 0xa7, 0x37, 0x6b, 0x9b, 0xe2, 0x6d,
	0x9b, 0x96, 0x16, 0xdc, 0xb2, 0xd2, 0xd1, 0x8e, 0x95, 0xfc, 0xef, 0xef, 0xeb, 0x7b, 0x38, 0x52,
	0xfd, 0x45, 0xb9, 0xef, 0xba, 0xef, 0x4b, 0xf4, 0xa0, 0xec, 0xbb, 0xcc, 0x77, 0xb2, 0x1b, 0xe1,
	0xb9, 0xda, 0x1c, 0x16, 0x8f, 0xd5, 0xf5, 0x1f, 0x75, 0xd4, 0xda, 0x2a, 0x8b, 0x7f, 0xf5, 0xd0,
	0xd9, 0xce, 0xd5, 0xc4, 0x17, 0xc1, 0xff, 0xbf, 0x4f, 0xed, 0x0f, 0x0e, 0xb9, 0xdc, 0x7e, 0x6f,
	0xb9, 0x22, 0x4f, 0x06, 0xa0, 0x15, 0x65, 0x74, 0xfe, 0xda, 0xe5, 0x4e, 0xf8, 0x2b, 0x48, 0x29,
	0xdb, 0x7d, 0xce, 0xf0, 0x6f, 0x1e, 0x7a, 0x6b, 0xef, 0x84, 0xf1, 0x7d, 0xcf, 0xc9, 0x3e, 0x1b,
	0xb4, 0x3f, 0x3a, 0x6c, 0x58, 0xfe, 0xcd, 0x72, 0x45, 0xae, 0xf7, 0x0a, 0xa4, 0x55, 0xf0, 0x5a,
	0x68, 0xc5, 0x0f, 0x47, 0x0a, 0xff, 0xb9, 0x2d, 0x73, 0x7b, 0x20, 0xf7, 0xca, 0xdc, 0x37, 0xb5,
	0x83, 0x65, 0x7e, 0xbe, 0x5c, 0x91, 0xe7, 0xfb, 0x65, 0x9a, 0xb7, 0x2d, 0x8e, 0x25, 0x28, 0x05,
	0x77, 0xa5, 0x56, 0x95, 0xda, 0xb6, 0xcf, 0x2f, 0x6c, 0x0e, 0x8f, 0x80, 0x4e, 0x33, 0x49, 0x15,
	0x30, 0xe9, 0x5e, 0x57, 0xf3, 0x36, 0x0a, 0x96, 0xb2, 0xc4, 0x00, 0x73, 0xef, 0xaa, 0x19, 0x05,
	0xfd, 0xcf, 0x7e, 0x7a, 0x96, 0x70, 0x3d, 0x2b, 0x26, 0x41, 0x94, 0x89, 0xee, 0xd3, 0x4f, 0x7e,
	0xee, 0x26, 0xd9, 0x95, 0x75, 0xd8, 0x95, 0x04, 0x95, 0x15, 0x32, 0x02, 0xd5, 0xb5, 0x3f, 0xb6,
	0x49, 0x31, 0xed, 0x5a, 0xa2, 0xeb, 0x7e, 0x77, 0xbf, 0x78, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0xb0, 0x56, 0x4d, 0x47, 0x07, 0x00, 0x00,
}
