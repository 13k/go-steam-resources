// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_friendmessages.steamclient.proto

package client // import "github.com/13k/go-steam-resources/protobuf/steam/client"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CFriendMessages_GetRecentMessages_Request struct {
	Steamid1               *uint64  `protobuf:"fixed64,1,opt,name=steamid1" json:"steamid1,omitempty"`
	Steamid2               *uint64  `protobuf:"fixed64,2,opt,name=steamid2" json:"steamid2,omitempty"`
	Count                  *uint32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	MostRecentConversation *bool    `protobuf:"varint,4,opt,name=most_recent_conversation,json=mostRecentConversation" json:"most_recent_conversation,omitempty"`
	Rtime32StartTime       *uint32  `protobuf:"fixed32,5,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	BbcodeFormat           *bool    `protobuf:"varint,6,opt,name=bbcode_format,json=bbcodeFormat" json:"bbcode_format,omitempty"`
	StartOrdinal           *uint32  `protobuf:"varint,7,opt,name=start_ordinal,json=startOrdinal" json:"start_ordinal,omitempty"`
	TimeLast               *uint32  `protobuf:"varint,8,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	OrdinalLast            *uint32  `protobuf:"varint,9,opt,name=ordinal_last,json=ordinalLast" json:"ordinal_last,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CFriendMessages_GetRecentMessages_Request) Reset() {
	*m = CFriendMessages_GetRecentMessages_Request{}
}
func (m *CFriendMessages_GetRecentMessages_Request) String() string { return proto.CompactTextString(m) }
func (*CFriendMessages_GetRecentMessages_Request) ProtoMessage()    {}
func (*CFriendMessages_GetRecentMessages_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{0}
}
func (m *CFriendMessages_GetRecentMessages_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Request.Unmarshal(m, b)
}
func (m *CFriendMessages_GetRecentMessages_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Request.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_GetRecentMessages_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Request.Merge(dst, src)
}
func (m *CFriendMessages_GetRecentMessages_Request) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Request.Size(m)
}
func (m *CFriendMessages_GetRecentMessages_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_GetRecentMessages_Request proto.InternalMessageInfo

func (m *CFriendMessages_GetRecentMessages_Request) GetSteamid1() uint64 {
	if m != nil && m.Steamid1 != nil {
		return *m.Steamid1
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetSteamid2() uint64 {
	if m != nil && m.Steamid2 != nil {
		return *m.Steamid2
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetMostRecentConversation() bool {
	if m != nil && m.MostRecentConversation != nil {
		return *m.MostRecentConversation
	}
	return false
}

func (m *CFriendMessages_GetRecentMessages_Request) GetRtime32StartTime() uint32 {
	if m != nil && m.Rtime32StartTime != nil {
		return *m.Rtime32StartTime
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetBbcodeFormat() bool {
	if m != nil && m.BbcodeFormat != nil {
		return *m.BbcodeFormat
	}
	return false
}

func (m *CFriendMessages_GetRecentMessages_Request) GetStartOrdinal() uint32 {
	if m != nil && m.StartOrdinal != nil {
		return *m.StartOrdinal
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetTimeLast() uint32 {
	if m != nil && m.TimeLast != nil {
		return *m.TimeLast
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Request) GetOrdinalLast() uint32 {
	if m != nil && m.OrdinalLast != nil {
		return *m.OrdinalLast
	}
	return 0
}

type CFriendMessages_GetRecentMessages_Response struct {
	Messages             []*CFriendMessages_GetRecentMessages_Response_FriendMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	MoreAvailable        *bool                                                       `protobuf:"varint,4,opt,name=more_available,json=moreAvailable" json:"more_available,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *CFriendMessages_GetRecentMessages_Response) Reset() {
	*m = CFriendMessages_GetRecentMessages_Response{}
}
func (m *CFriendMessages_GetRecentMessages_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendMessages_GetRecentMessages_Response) ProtoMessage() {}
func (*CFriendMessages_GetRecentMessages_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{1}
}
func (m *CFriendMessages_GetRecentMessages_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response.Unmarshal(m, b)
}
func (m *CFriendMessages_GetRecentMessages_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_GetRecentMessages_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Response.Merge(dst, src)
}
func (m *CFriendMessages_GetRecentMessages_Response) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response.Size(m)
}
func (m *CFriendMessages_GetRecentMessages_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_GetRecentMessages_Response proto.InternalMessageInfo

func (m *CFriendMessages_GetRecentMessages_Response) GetMessages() []*CFriendMessages_GetRecentMessages_Response_FriendMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *CFriendMessages_GetRecentMessages_Response) GetMoreAvailable() bool {
	if m != nil && m.MoreAvailable != nil {
		return *m.MoreAvailable
	}
	return false
}

type CFriendMessages_GetRecentMessages_Response_FriendMessage struct {
	Accountid            *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message              *string  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Ordinal              *uint32  `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) Reset() {
	*m = CFriendMessages_GetRecentMessages_Response_FriendMessage{}
}
func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) ProtoMessage() {}
func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{1, 0}
}
func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage.Unmarshal(m, b)
}
func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_GetRecentMessages_Response_FriendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage.Merge(dst, src)
}
func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage.Size(m)
}
func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_GetRecentMessages_Response_FriendMessage proto.InternalMessageInfo

func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetOrdinal() uint32 {
	if m != nil && m.Ordinal != nil {
		return *m.Ordinal
	}
	return 0
}

type CFriendsMessages_GetActiveMessageSessions_Request struct {
	LastmessageSince     *uint32  `protobuf:"varint,1,opt,name=lastmessage_since,json=lastmessageSince" json:"lastmessage_since,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendsMessages_GetActiveMessageSessions_Request) Reset() {
	*m = CFriendsMessages_GetActiveMessageSessions_Request{}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendsMessages_GetActiveMessageSessions_Request) ProtoMessage() {}
func (*CFriendsMessages_GetActiveMessageSessions_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{2}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request.Unmarshal(m, b)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request.Marshal(b, m, deterministic)
}
func (dst *CFriendsMessages_GetActiveMessageSessions_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request.Merge(dst, src)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Request) XXX_Size() int {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request.Size(m)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Request proto.InternalMessageInfo

func (m *CFriendsMessages_GetActiveMessageSessions_Request) GetLastmessageSince() uint32 {
	if m != nil && m.LastmessageSince != nil {
		return *m.LastmessageSince
	}
	return 0
}

type CFriendsMessages_GetActiveMessageSessions_Response struct {
	MessageSessions      []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession `protobuf:"bytes,1,rep,name=message_sessions,json=messageSessions" json:"message_sessions,omitempty"`
	Timestamp            *uint32                                                                    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                     `json:"-"`
	XXX_sizecache        int32                                                                      `json:"-"`
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response) Reset() {
	*m = CFriendsMessages_GetActiveMessageSessions_Response{}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendsMessages_GetActiveMessageSessions_Response) ProtoMessage() {}
func (*CFriendsMessages_GetActiveMessageSessions_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{3}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response.Unmarshal(m, b)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response.Marshal(b, m, deterministic)
}
func (dst *CFriendsMessages_GetActiveMessageSessions_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response.Merge(dst, src)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response) XXX_Size() int {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response.Size(m)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response proto.InternalMessageInfo

func (m *CFriendsMessages_GetActiveMessageSessions_Response) GetMessageSessions() []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	if m != nil {
		return m.MessageSessions
	}
	return nil
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession struct {
	AccountidFriend      *uint32  `protobuf:"varint,1,opt,name=accountid_friend,json=accountidFriend" json:"accountid_friend,omitempty"`
	LastMessage          *uint32  `protobuf:"varint,2,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	LastView             *uint32  `protobuf:"varint,3,opt,name=last_view,json=lastView" json:"last_view,omitempty"`
	UnreadMessageCount   *uint32  `protobuf:"varint,4,opt,name=unread_message_count,json=unreadMessageCount" json:"unread_message_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Reset() {
	*m = CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession{}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ProtoMessage() {}
func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{3, 0}
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.Unmarshal(m, b)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.Marshal(b, m, deterministic)
}
func (dst *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.Merge(dst, src)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) XXX_Size() int {
	return xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.Size(m)
}
func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession proto.InternalMessageInfo

func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetAccountidFriend() uint32 {
	if m != nil && m.AccountidFriend != nil {
		return *m.AccountidFriend
	}
	return 0
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastMessage() uint32 {
	if m != nil && m.LastMessage != nil {
		return *m.LastMessage
	}
	return 0
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastView() uint32 {
	if m != nil && m.LastView != nil {
		return *m.LastView
	}
	return 0
}

func (m *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetUnreadMessageCount() uint32 {
	if m != nil && m.UnreadMessageCount != nil {
		return *m.UnreadMessageCount
	}
	return 0
}

type CFriendMessages_SendMessage_Request struct {
	Steamid              *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ChatEntryType        *int32   `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	Message              *string  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ContainsBbcode       *bool    `protobuf:"varint,4,opt,name=contains_bbcode,json=containsBbcode" json:"contains_bbcode,omitempty"`
	EchoToSender         *bool    `protobuf:"varint,5,opt,name=echo_to_sender,json=echoToSender" json:"echo_to_sender,omitempty"`
	LowPriority          *bool    `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_SendMessage_Request) Reset()         { *m = CFriendMessages_SendMessage_Request{} }
func (m *CFriendMessages_SendMessage_Request) String() string { return proto.CompactTextString(m) }
func (*CFriendMessages_SendMessage_Request) ProtoMessage()    {}
func (*CFriendMessages_SendMessage_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{4}
}
func (m *CFriendMessages_SendMessage_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_SendMessage_Request.Unmarshal(m, b)
}
func (m *CFriendMessages_SendMessage_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_SendMessage_Request.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_SendMessage_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_SendMessage_Request.Merge(dst, src)
}
func (m *CFriendMessages_SendMessage_Request) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_SendMessage_Request.Size(m)
}
func (m *CFriendMessages_SendMessage_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_SendMessage_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_SendMessage_Request proto.InternalMessageInfo

func (m *CFriendMessages_SendMessage_Request) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CFriendMessages_SendMessage_Request) GetChatEntryType() int32 {
	if m != nil && m.ChatEntryType != nil {
		return *m.ChatEntryType
	}
	return 0
}

func (m *CFriendMessages_SendMessage_Request) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CFriendMessages_SendMessage_Request) GetContainsBbcode() bool {
	if m != nil && m.ContainsBbcode != nil {
		return *m.ContainsBbcode
	}
	return false
}

func (m *CFriendMessages_SendMessage_Request) GetEchoToSender() bool {
	if m != nil && m.EchoToSender != nil {
		return *m.EchoToSender
	}
	return false
}

func (m *CFriendMessages_SendMessage_Request) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

type CFriendMessages_SendMessage_Response struct {
	ModifiedMessage      *string  `protobuf:"bytes,1,opt,name=modified_message,json=modifiedMessage" json:"modified_message,omitempty"`
	ServerTimestamp      *uint32  `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal              *uint32  `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_SendMessage_Response) Reset()         { *m = CFriendMessages_SendMessage_Response{} }
func (m *CFriendMessages_SendMessage_Response) String() string { return proto.CompactTextString(m) }
func (*CFriendMessages_SendMessage_Response) ProtoMessage()    {}
func (*CFriendMessages_SendMessage_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{5}
}
func (m *CFriendMessages_SendMessage_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_SendMessage_Response.Unmarshal(m, b)
}
func (m *CFriendMessages_SendMessage_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_SendMessage_Response.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_SendMessage_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_SendMessage_Response.Merge(dst, src)
}
func (m *CFriendMessages_SendMessage_Response) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_SendMessage_Response.Size(m)
}
func (m *CFriendMessages_SendMessage_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_SendMessage_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_SendMessage_Response proto.InternalMessageInfo

func (m *CFriendMessages_SendMessage_Response) GetModifiedMessage() string {
	if m != nil && m.ModifiedMessage != nil {
		return *m.ModifiedMessage
	}
	return ""
}

func (m *CFriendMessages_SendMessage_Response) GetServerTimestamp() uint32 {
	if m != nil && m.ServerTimestamp != nil {
		return *m.ServerTimestamp
	}
	return 0
}

func (m *CFriendMessages_SendMessage_Response) GetOrdinal() uint32 {
	if m != nil && m.Ordinal != nil {
		return *m.Ordinal
	}
	return 0
}

type CFriendMessages_AckMessage_Notification struct {
	SteamidPartner       *uint64  `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_AckMessage_Notification) Reset() {
	*m = CFriendMessages_AckMessage_Notification{}
}
func (m *CFriendMessages_AckMessage_Notification) String() string { return proto.CompactTextString(m) }
func (*CFriendMessages_AckMessage_Notification) ProtoMessage()    {}
func (*CFriendMessages_AckMessage_Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{6}
}
func (m *CFriendMessages_AckMessage_Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_AckMessage_Notification.Unmarshal(m, b)
}
func (m *CFriendMessages_AckMessage_Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_AckMessage_Notification.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_AckMessage_Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_AckMessage_Notification.Merge(dst, src)
}
func (m *CFriendMessages_AckMessage_Notification) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_AckMessage_Notification.Size(m)
}
func (m *CFriendMessages_AckMessage_Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_AckMessage_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_AckMessage_Notification proto.InternalMessageInfo

func (m *CFriendMessages_AckMessage_Notification) GetSteamidPartner() uint64 {
	if m != nil && m.SteamidPartner != nil {
		return *m.SteamidPartner
	}
	return 0
}

func (m *CFriendMessages_AckMessage_Notification) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CFriendMessages_IsInFriendsUIBeta_Request struct {
	Steamid              *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_IsInFriendsUIBeta_Request) Reset() {
	*m = CFriendMessages_IsInFriendsUIBeta_Request{}
}
func (m *CFriendMessages_IsInFriendsUIBeta_Request) String() string { return proto.CompactTextString(m) }
func (*CFriendMessages_IsInFriendsUIBeta_Request) ProtoMessage()    {}
func (*CFriendMessages_IsInFriendsUIBeta_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{7}
}
func (m *CFriendMessages_IsInFriendsUIBeta_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request.Unmarshal(m, b)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_IsInFriendsUIBeta_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request.Merge(dst, src)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Request) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request.Size(m)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Request proto.InternalMessageInfo

func (m *CFriendMessages_IsInFriendsUIBeta_Request) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

type CFriendMessages_IsInFriendsUIBeta_Response struct {
	OnlineInFriendsui    *bool    `protobuf:"varint,1,opt,name=online_in_friendsui,json=onlineInFriendsui" json:"online_in_friendsui,omitempty"`
	HasUsedFriendsui     *bool    `protobuf:"varint,2,opt,name=has_used_friendsui,json=hasUsedFriendsui" json:"has_used_friendsui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFriendMessages_IsInFriendsUIBeta_Response) Reset() {
	*m = CFriendMessages_IsInFriendsUIBeta_Response{}
}
func (m *CFriendMessages_IsInFriendsUIBeta_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendMessages_IsInFriendsUIBeta_Response) ProtoMessage() {}
func (*CFriendMessages_IsInFriendsUIBeta_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{8}
}
func (m *CFriendMessages_IsInFriendsUIBeta_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response.Unmarshal(m, b)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_IsInFriendsUIBeta_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response.Merge(dst, src)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Response) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response.Size(m)
}
func (m *CFriendMessages_IsInFriendsUIBeta_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_IsInFriendsUIBeta_Response proto.InternalMessageInfo

func (m *CFriendMessages_IsInFriendsUIBeta_Response) GetOnlineInFriendsui() bool {
	if m != nil && m.OnlineInFriendsui != nil {
		return *m.OnlineInFriendsui
	}
	return false
}

func (m *CFriendMessages_IsInFriendsUIBeta_Response) GetHasUsedFriendsui() bool {
	if m != nil && m.HasUsedFriendsui != nil {
		return *m.HasUsedFriendsui
	}
	return false
}

type CFriendMessages_IncomingMessage_Notification struct {
	SteamidFriend          *uint64  `protobuf:"fixed64,1,opt,name=steamid_friend,json=steamidFriend" json:"steamid_friend,omitempty"`
	ChatEntryType          *int32   `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	FromLimitedAccount     *bool    `protobuf:"varint,3,opt,name=from_limited_account,json=fromLimitedAccount" json:"from_limited_account,omitempty"`
	Message                *string  `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Rtime32ServerTimestamp *uint32  `protobuf:"fixed32,5,opt,name=rtime32_server_timestamp,json=rtime32ServerTimestamp" json:"rtime32_server_timestamp,omitempty"`
	Ordinal                *uint32  `protobuf:"varint,6,opt,name=ordinal" json:"ordinal,omitempty"`
	LocalEcho              *bool    `protobuf:"varint,7,opt,name=local_echo,json=localEcho" json:"local_echo,omitempty"`
	MessageNoBbcode        *string  `protobuf:"bytes,8,opt,name=message_no_bbcode,json=messageNoBbcode" json:"message_no_bbcode,omitempty"`
	LowPriority            *bool    `protobuf:"varint,9,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CFriendMessages_IncomingMessage_Notification) Reset() {
	*m = CFriendMessages_IncomingMessage_Notification{}
}
func (m *CFriendMessages_IncomingMessage_Notification) String() string {
	return proto.CompactTextString(m)
}
func (*CFriendMessages_IncomingMessage_Notification) ProtoMessage() {}
func (*CFriendMessages_IncomingMessage_Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5, []int{9}
}
func (m *CFriendMessages_IncomingMessage_Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFriendMessages_IncomingMessage_Notification.Unmarshal(m, b)
}
func (m *CFriendMessages_IncomingMessage_Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFriendMessages_IncomingMessage_Notification.Marshal(b, m, deterministic)
}
func (dst *CFriendMessages_IncomingMessage_Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFriendMessages_IncomingMessage_Notification.Merge(dst, src)
}
func (m *CFriendMessages_IncomingMessage_Notification) XXX_Size() int {
	return xxx_messageInfo_CFriendMessages_IncomingMessage_Notification.Size(m)
}
func (m *CFriendMessages_IncomingMessage_Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_CFriendMessages_IncomingMessage_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_CFriendMessages_IncomingMessage_Notification proto.InternalMessageInfo

func (m *CFriendMessages_IncomingMessage_Notification) GetSteamidFriend() uint64 {
	if m != nil && m.SteamidFriend != nil {
		return *m.SteamidFriend
	}
	return 0
}

func (m *CFriendMessages_IncomingMessage_Notification) GetChatEntryType() int32 {
	if m != nil && m.ChatEntryType != nil {
		return *m.ChatEntryType
	}
	return 0
}

func (m *CFriendMessages_IncomingMessage_Notification) GetFromLimitedAccount() bool {
	if m != nil && m.FromLimitedAccount != nil {
		return *m.FromLimitedAccount
	}
	return false
}

func (m *CFriendMessages_IncomingMessage_Notification) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CFriendMessages_IncomingMessage_Notification) GetRtime32ServerTimestamp() uint32 {
	if m != nil && m.Rtime32ServerTimestamp != nil {
		return *m.Rtime32ServerTimestamp
	}
	return 0
}

func (m *CFriendMessages_IncomingMessage_Notification) GetOrdinal() uint32 {
	if m != nil && m.Ordinal != nil {
		return *m.Ordinal
	}
	return 0
}

func (m *CFriendMessages_IncomingMessage_Notification) GetLocalEcho() bool {
	if m != nil && m.LocalEcho != nil {
		return *m.LocalEcho
	}
	return false
}

func (m *CFriendMessages_IncomingMessage_Notification) GetMessageNoBbcode() string {
	if m != nil && m.MessageNoBbcode != nil {
		return *m.MessageNoBbcode
	}
	return ""
}

func (m *CFriendMessages_IncomingMessage_Notification) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func init() {
	proto.RegisterType((*CFriendMessages_GetRecentMessages_Request)(nil), "CFriendMessages_GetRecentMessages_Request")
	proto.RegisterType((*CFriendMessages_GetRecentMessages_Response)(nil), "CFriendMessages_GetRecentMessages_Response")
	proto.RegisterType((*CFriendMessages_GetRecentMessages_Response_FriendMessage)(nil), "CFriendMessages_GetRecentMessages_Response.FriendMessage")
	proto.RegisterType((*CFriendsMessages_GetActiveMessageSessions_Request)(nil), "CFriendsMessages_GetActiveMessageSessions_Request")
	proto.RegisterType((*CFriendsMessages_GetActiveMessageSessions_Response)(nil), "CFriendsMessages_GetActiveMessageSessions_Response")
	proto.RegisterType((*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession)(nil), "CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession")
	proto.RegisterType((*CFriendMessages_SendMessage_Request)(nil), "CFriendMessages_SendMessage_Request")
	proto.RegisterType((*CFriendMessages_SendMessage_Response)(nil), "CFriendMessages_SendMessage_Response")
	proto.RegisterType((*CFriendMessages_AckMessage_Notification)(nil), "CFriendMessages_AckMessage_Notification")
	proto.RegisterType((*CFriendMessages_IsInFriendsUIBeta_Request)(nil), "CFriendMessages_IsInFriendsUIBeta_Request")
	proto.RegisterType((*CFriendMessages_IsInFriendsUIBeta_Response)(nil), "CFriendMessages_IsInFriendsUIBeta_Response")
	proto.RegisterType((*CFriendMessages_IncomingMessage_Notification)(nil), "CFriendMessages_IncomingMessage_Notification")
}

func init() {
	proto.RegisterFile("steammessages_friendmessages.steamclient.proto", fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5)
}

var fileDescriptor_steammessages_friendmessages_steamclient_b63510f73dfa38b5 = []byte{
	// 1776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6f, 0x24, 0x47,
	0x15, 0x57, 0xdb, 0x1b, 0x7b, 0x5c, 0xde, 0xf1, 0x47, 0xb3, 0x8a, 0x5a, 0x03, 0x88, 0x62, 0xb2,
	0xcb, 0x8e, 0x17, 0xbb, 0x9d, 0xf5, 0x0a, 0x96, 0x84, 0x0f, 0xc9, 0x63, 0x6d, 0x16, 0x4b, 0xc9,
	0x12, 0xda, 0x4e, 0x90, 0x90, 0x50, 0x53, 0xd3, 0xfd, 0x7a, 0xa6, 0xe4, 0xee, 0xaa, 0x49, 0x55,
	0xb5, 0x07, 0x73, 0x20, 0x68, 0x2e, 0x20, 0xb2, 0x1c, 0xe0, 0xc0, 0x85, 0x0b, 0x17, 0xfe, 0x02,
	0x34, 0x27, 0x2e, 0xb9, 0xf1, 0x17, 0x70, 0xe6, 0xce, 0x95, 0x7f, 0x00, 0xd5, 0x47, 0xf7, 0x7c,
	0x79, 0x37, 0x76, 0x4e, 0x76, 0xbd, 0xf7, 0xea, 0x57, 0xaf, 0xea, 0xfd, 0xde, 0x47, 0x0f, 0x0a,
	0xa5, 0x02, 0x52, 0x14, 0x20, 0x25, 0xe9, 0x83, 0x8c, 0x33, 0x41, 0x81, 0xa5, 0xd5, 0xd2, 0x2a,
	0x93, 0x9c, 0x02, 0x53, 0xe1, 0x50, 0x70, 0xc5, 0x5b, 0xfb, 0xf3, 0xf6, 0x25, 0xa3, 0x19, 0x85,
	0x34, 0xee, 0x11, 0x09, 0xcb, 0xd6, 0xed, 0xff, 0xae, 0xa1, 0xbd, 0x93, 0xf7, 0x0c, 0xe6, 0x07,
	0xd5, 0x96, 0xe7, 0xa0, 0x22, 0x48, 0x80, 0xa9, 0x5a, 0x12, 0xc1, 0x27, 0x25, 0x48, 0xe5, 0xb7,
	0x50, 0xc3, 0x40, 0xd0, 0xf4, 0x71, 0xe0, 0x61, 0xaf, 0xb3, 0x16, 0xd5, 0xeb, 0x19, 0xdd, 0x51,
	0xb0, 0x32, 0xa7, 0x3b, 0xf2, 0xcf, 0xd0, 0x1b, 0x09, 0x2f, 0x99, 0x0a, 0x56, 0xb1, 0xd7, 0x69,
	0x76, 0x7f, 0x38, 0x9e, 0x04, 0xef, 0x9c, 0x66, 0x98, 0x71, 0x76, 0xf0, 0x6b, 0x10, 0x7c, 0x1f,
	0x27, 0x64, 0x88, 0xd5, 0x00, 0x30, 0x2b, 0x8b, 0x1e, 0x08, 0xcc, 0x33, 0x2c, 0x8c, 0x07, 0xb8,
	0xba, 0x07, 0x56, 0x1c, 0x0b, 0x50, 0xa5, 0x60, 0x61, 0x64, 0xb1, 0xfc, 0xcf, 0x3c, 0x14, 0x14,
	0x5c, 0xaa, 0xd8, 0x9a, 0xc6, 0x09, 0x67, 0x97, 0x20, 0x24, 0x51, 0x94, 0xb3, 0xe0, 0x0e, 0xf6,
	0x3a, 0x8d, 0xee, 0x4f, 0xc7, 0x93, 0xe0, 0x83, 0xe7, 0x82, 0xf4, 0x0c, 0x78, 0x2f, 0xe7, 0xc9,
	0x85, 0xc6, 0x4e, 0x06, 0x44, 0xe1, 0x4c, 0xf0, 0xc2, 0x88, 0x35, 0x46, 0x75, 0xdc, 0x2c, 0x06,
	0xee, 0x10, 0xfc, 0x9b, 0xef, 0xe0, 0x82, 0xb2, 0x52, 0x01, 0x1e, 0x82, 0xa0, 0x3c, 0xdd, 0x8b,
	0xde, 0xd4, 0xe6, 0xf6, 0x79, 0x4e, 0x66, 0x8c, 0xfd, 0x7f, 0x7a, 0xc8, 0x17, 0x8a, 0x16, 0xf0,
	0xe4, 0x28, 0x96, 0x8a, 0x08, 0x15, 0xeb, 0x45, 0xf0, 0x06, 0xf6, 0x3a, 0xeb, 0xdd, 0x97, 0xde,
	0x78, 0x12, 0xfc, 0xce, 0x9b, 0xbb, 0xb2, 0xbd, 0x0d, 0xe6, 0x2c, 0xbf, 0x9a, 0xde, 0x72, 0x44,
	0xd5, 0x00, 0xeb, 0x8d, 0x52, 0x91, 0x62, 0x28, 0x71, 0x5f, 0x00, 0x51, 0xfa, 0x41, 0x04, 0x86,
	0x4f, 0x4a, 0x92, 0xeb, 0x67, 0x50, 0x03, 0x2a, 0x43, 0x7c, 0x9a, 0x61, 0x8b, 0x33, 0x02, 0x8b,
	0xe1, 0xf0, 0x6a, 0x28, 0x73, 0x3f, 0x52, 0x5d, 0x4c, 0x63, 0xe2, 0xa4, 0x54, 0x3c, 0xcb, 0xc2,
	0x68, 0xc7, 0x39, 0x7a, 0xa6, 0xfd, 0x3c, 0xa7, 0x05, 0xf8, 0x67, 0xa8, 0xd9, 0xeb, 0x25, 0x3c,
	0x85, 0x38, 0xe3, 0xa2, 0x20, 0x2a, 0x58, 0x33, 0xef, 0x17, 0x8e, 0x27, 0xc1, 0xa3, 0xc8, 0x02,
	0xeb, 0xa7, 0x12, 0x20, 0xcb, 0x5c, 0x39, 0x37, 0xed, 0x06, 0x6c, 0x37, 0x28, 0xca, 0xfa, 0x61,
	0x74, 0xd7, 0xca, 0xde, 0x33, 0x22, 0xff, 0xcf, 0x1e, 0x6a, 0xda, 0xa7, 0xe0, 0x22, 0xa5, 0x8c,
	0xe4, 0xc1, 0xba, 0x09, 0x7f, 0x31, 0x9e, 0x04, 0xf4, 0x84, 0x17, 0x3d, 0xca, 0x20, 0xb5, 0x58,
	0xc6, 0xcc, 0x38, 0xb9, 0xbf, 0xf0, 0x22, 0x24, 0xd3, 0xf7, 0xd7, 0x77, 0xc6, 0x0e, 0x05, 0x13,
	0x01, 0xee, 0xb6, 0x90, 0xe2, 0x4e, 0x0a, 0x69, 0x39, 0x04, 0x39, 0xdd, 0x41, 0x19, 0x96, 0xa4,
	0x00, 0x2c, 0x21, 0xe1, 0x2c, 0xdd, 0x8b, 0xee, 0x1a, 0xf0, 0x9f, 0xd8, 0xcd, 0xfe, 0xcf, 0xd0,
	0x86, 0x3e, 0x26, 0xce, 0x89, 0x54, 0x41, 0xc3, 0xf8, 0xf3, 0xee, 0x78, 0x12, 0x7c, 0x97, 0x66,
	0x78, 0x28, 0x40, 0x02, 0x53, 0x87, 0x5f, 0x10, 0xa3, 0x1e, 0x64, 0x5c, 0x80, 0x0d, 0x43, 0xd4,
	0xd0, 0x60, 0xef, 0x13, 0xa9, 0xfc, 0x6f, 0xa2, 0xbb, 0xce, 0x41, 0x8b, 0xbd, 0xa1, 0xb1, 0xa3,
	0x4d, 0x27, 0xd3, 0x26, 0xed, 0xff, 0xac, 0xa0, 0x47, 0x37, 0x49, 0x36, 0x39, 0xe4, 0x4c, 0x82,
	0xff, 0x7b, 0x0f, 0x35, 0xaa, 0x53, 0x03, 0x0f, 0xaf, 0x76, 0x36, 0x8f, 0xde, 0x09, 0x6f, 0xbe,
	0x3f, 0x9c, 0xb3, 0xec, 0x3e, 0x1e, 0x4f, 0x82, 0x83, 0x63, 0x21, 0xc8, 0x95, 0x4e, 0x81, 0x0a,
	0x77, 0x7f, 0xfa, 0x92, 0x0c, 0x46, 0x20, 0x95, 0x66, 0x18, 0xcf, 0x53, 0x90, 0x2a, 0x8c, 0xea,
	0xd3, 0xfd, 0x07, 0x68, 0xab, 0xe0, 0x02, 0x62, 0x72, 0x49, 0x68, 0x4e, 0x7a, 0x39, 0xd8, 0x04,
	0x8b, 0x9a, 0x5a, 0x7a, 0x5c, 0x09, 0x5b, 0x9f, 0xa2, 0xe6, 0xdc, 0xa1, 0xfe, 0xd7, 0xd0, 0x06,
	0x49, 0x4c, 0xba, 0xd2, 0xd4, 0x54, 0x8c, 0x66, 0x34, 0x15, 0x68, 0x6d, 0xcd, 0x75, 0x53, 0x33,
	0x9a, 0xd1, 0x54, 0xe0, 0x07, 0x68, 0xdd, 0x9d, 0x6f, 0xca, 0xc6, 0x46, 0x54, 0x2d, 0xb5, 0xa6,
	0x62, 0xd4, 0x1d, 0xb3, 0xab, 0x5a, 0xb6, 0xff, 0xe5, 0xa1, 0xc7, 0xee, 0x85, 0xe4, 0xec, 0x13,
	0x1d, 0x27, 0x8a, 0x5e, 0x82, 0x93, 0x9c, 0x81, 0x94, 0x94, 0xb3, 0x69, 0x59, 0xfb, 0x93, 0x87,
	0x76, 0x75, 0xcc, 0x1c, 0x7e, 0x2c, 0x29, 0x4b, 0xc0, 0xba, 0xdb, 0x4d, 0xc7, 0x93, 0xe0, 0x97,
	0xb3, 0x3c, 0x90, 0x76, 0x37, 0xa6, 0xcc, 0x32, 0x5f, 0xff, 0x3f, 0x1a, 0x80, 0x00, 0x4c, 0x6c,
	0x61, 0x71, 0x28, 0x78, 0x40, 0x34, 0x57, 0x80, 0x61, 0x4d, 0x2a, 0x6c, 0x30, 0x2d, 0x8f, 0x4d,
	0x2e, 0x76, 0x32, 0x2e, 0xf0, 0x90, 0xe7, 0x39, 0x65, 0xfd, 0xbd, 0x68, 0x67, 0xe6, 0xf8, 0x33,
	0x6d, 0xd9, 0xfe, 0xf7, 0x2a, 0x3a, 0xba, 0xcd, 0x4d, 0x1c, 0x67, 0x24, 0xda, 0xa9, 0x6f, 0xe1,
	0x94, 0x8e, 0x3a, 0x3f, 0x0e, 0x6f, 0x0f, 0x37, 0x4f, 0x21, 0xa7, 0x8e, 0xb6, 0x8b, 0x79, 0x73,
	0x5f, 0x2d, 0xc5, 0xb1, 0xfb, 0xf1, 0x78, 0x12, 0x44, 0xe7, 0xfa, 0xb6, 0x72, 0xc0, 0xcb, 0x3c,
	0xc5, 0x3d, 0xc0, 0x43, 0x22, 0x25, 0xa4, 0x3a, 0x3f, 0x4d, 0xa9, 0x87, 0x5f, 0xe9, 0xb2, 0x6b,
	0x22, 0x80, 0x89, 0xc4, 0x4b, 0x01, 0xd0, 0x4c, 0xd4, 0x0f, 0xa4, 0x2b, 0x0c, 0x2e, 0x87, 0x29,
	0x51, 0x20, 0x67, 0xf8, 0xd1, 0xfa, 0x87, 0x87, 0xee, 0x5d, 0xe7, 0x9f, 0xbf, 0x87, 0x76, 0x6a,
	0x8e, 0xb9, 0x7e, 0xe9, 0xb8, 0xb7, 0x5d, 0xcb, 0xed, 0x46, 0x9d, 0xb4, 0xfa, 0xdc, 0xb8, 0x22,
	0x9a, 0x25, 0xe1, 0xa6, 0x96, 0x55, 0x14, 0xfe, 0x2a, 0xda, 0x30, 0x26, 0x97, 0x14, 0x46, 0xb6,
	0x7f, 0x45, 0x0d, 0x2d, 0xf8, 0x98, 0xc2, 0xc8, 0x7f, 0x1b, 0xdd, 0x2b, 0x99, 0x00, 0x92, 0x56,
	0x08, 0xb1, 0xed, 0x73, 0x96, 0x96, 0xbe, 0xd5, 0x39, 0xa4, 0x13, 0xad, 0x69, 0xff, 0xcf, 0x43,
	0x6f, 0x2d, 0xe6, 0xf0, 0xd9, 0x74, 0x51, 0x73, 0x32, 0x40, 0xeb, 0xae, 0x7d, 0xba, 0x4e, 0x5b,
	0x2d, 0xfd, 0x6f, 0xa1, 0x6d, 0xcd, 0xb3, 0x18, 0x98, 0x12, 0x57, 0xb1, 0xba, 0x1a, 0x5a, 0xb7,
	0xdf, 0x88, 0x9a, 0x5a, 0xfc, 0x4c, 0x4b, 0xcf, 0xaf, 0x86, 0xf0, 0x9a, 0xfc, 0x79, 0x88, 0xb6,
	0x13, 0xce, 0x14, 0xa1, 0x4c, 0xc6, 0xb6, 0x62, 0xbb, 0x74, 0xde, 0xaa, 0xc4, 0x5d, 0x23, 0xf5,
	0xef, 0xa3, 0x2d, 0x48, 0x06, 0x3c, 0x56, 0x3c, 0x96, 0xc0, 0x52, 0x10, 0xa6, 0x9f, 0x35, 0xa2,
	0xbb, 0x5a, 0x7a, 0xce, 0xcf, 0x8c, 0xcc, 0x3c, 0x22, 0x1f, 0xc5, 0x43, 0x41, 0xb9, 0xa0, 0xea,
	0xca, 0xf6, 0x8e, 0x68, 0x33, 0xe7, 0xa3, 0x0f, 0x9d, 0xa8, 0xfd, 0x17, 0x0f, 0xdd, 0x7f, 0xfd,
	0xad, 0x1d, 0x7f, 0xf7, 0xd0, 0x4e, 0xc1, 0x53, 0x3b, 0xb2, 0x54, 0xde, 0x7b, 0xc6, 0xfb, 0xed,
	0x4a, 0x5e, 0x05, 0x66, 0x0f, 0xed, 0x48, 0x10, 0x97, 0x20, 0xe2, 0xc5, 0x22, 0xb2, 0x6d, 0xe5,
	0xe7, 0xb3, 0xa5, 0xa4, 0x2a, 0x18, 0xab, 0xf3, 0x05, 0x63, 0x88, 0x1e, 0x2e, 0xfa, 0x75, 0x9c,
	0x5c, 0x54, 0x6e, 0xbd, 0xe0, 0x8a, 0x66, 0x34, 0xb1, 0x1d, 0xfe, 0x21, 0xda, 0x76, 0x21, 0x88,
	0x87, 0x44, 0x28, 0x06, 0xc2, 0x45, 0x66, 0xcb, 0x89, 0x3f, 0xb4, 0xd2, 0xd7, 0x97, 0xb5, 0xf6,
	0xb3, 0xe5, 0x81, 0xeb, 0x54, 0x9e, 0x32, 0x97, 0x9b, 0x1f, 0x9d, 0x76, 0x41, 0x91, 0x2f, 0x66,
	0x41, 0xfb, 0x0f, 0xde, 0x72, 0x2f, 0xb9, 0x0e, 0xc7, 0xbd, 0x6b, 0x88, 0xbe, 0xc2, 0x59, 0x4e,
	0x19, 0xc4, 0x94, 0xb9, 0x9c, 0x90, 0x25, 0x35, 0xa0, 0x8d, 0x68, 0xd7, 0xaa, 0xea, 0xcd, 0x25,
	0xf5, 0xf7, 0x91, 0x3f, 0x20, 0x32, 0x2e, 0x25, 0xa4, 0x33, 0xe6, 0x2b, 0xc6, 0x7c, 0x67, 0x40,
	0xe4, 0x47, 0x12, 0xd2, 0xda, 0xba, 0xfd, 0xd9, 0x2a, 0xda, 0x5f, 0x72, 0x86, 0x25, 0xbc, 0xa0,
	0xac, 0x7f, 0xed, 0x5b, 0x3e, 0x40, 0xd5, 0xa3, 0xcd, 0x26, 0xe8, 0x5a, 0xd4, 0x74, 0x52, 0x97,
	0x9e, 0x37, 0xa5, 0xfa, 0xdb, 0xe8, 0x9e, 0x1e, 0x77, 0xe2, 0x9c, 0x16, 0x54, 0x41, 0x1a, 0xbb,
	0x34, 0x37, 0xc1, 0x6e, 0x44, 0xbe, 0xd6, 0xbd, 0x6f, 0x55, 0xc7, 0x56, 0x33, 0x9b, 0x1c, 0x77,
	0xe6, 0x93, 0xe3, 0x7b, 0x28, 0xa8, 0xe7, 0xb8, 0x45, 0x7a, 0x99, 0x69, 0x2e, 0x7a, 0xb3, 0x1a,
	0x9f, 0x5e, 0xcd, 0xb2, 0xb5, 0x39, 0x96, 0xf9, 0x5f, 0x47, 0x28, 0xe7, 0x09, 0xc9, 0x63, 0x9d,
	0x37, 0x66, 0x0a, 0x6a, 0x44, 0x1b, 0x46, 0xf2, 0x2c, 0x19, 0x70, 0xff, 0x11, 0xda, 0xad, 0xca,
	0x07, 0xe3, 0x55, 0x46, 0x36, 0x1c, 0xeb, 0xad, 0xe2, 0x05, 0x77, 0x29, 0xb9, 0x98, 0x6c, 0x1b,
	0x4b, 0xc9, 0x76, 0xf4, 0x72, 0x1d, 0x6d, 0xcd, 0x07, 0xc3, 0xff, 0xbb, 0x87, 0x76, 0x97, 0x26,
	0x05, 0xff, 0x51, 0x78, 0xe3, 0xd1, 0xbf, 0xf5, 0xed, 0x5b, 0x4c, 0x1e, 0xed, 0xa7, 0xe3, 0x49,
	0xf0, 0xe4, 0x39, 0x28, 0x4c, 0x70, 0xce, 0xfb, 0x33, 0xe3, 0xfc, 0x6c, 0x83, 0xd4, 0xdd, 0x51,
	0x8d, 0x74, 0x83, 0x54, 0x23, 0x8e, 0x4b, 0x09, 0x42, 0xfa, 0x9f, 0x7b, 0x28, 0x78, 0x55, 0x57,
	0xf2, 0x8f, 0xc2, 0x5b, 0xb7, 0xf6, 0xd6, 0x93, 0x2f, 0xd1, 0xf5, 0xda, 0xdf, 0x1f, 0x4f, 0x82,
	0xa7, 0xda, 0xfd, 0xd9, 0x1e, 0x4f, 0x7a, 0xbc, 0xac, 0xbf, 0x13, 0x78, 0x96, 0xe9, 0x8c, 0x99,
	0x19, 0x53, 0x59, 0x6a, 0x2e, 0x27, 0xfd, 0x4f, 0xd1, 0xe6, 0x4c, 0x65, 0xf3, 0xef, 0x87, 0x37,
	0xa8, 0xf6, 0xad, 0x07, 0xe1, 0x4d, 0xaa, 0x63, 0xfb, 0xad, 0xf1, 0x24, 0xf8, 0x86, 0xd6, 0x2c,
	0xce, 0x1a, 0x8a, 0x63, 0x82, 0x6d, 0x26, 0xf9, 0x2f, 0x3d, 0x84, 0xa6, 0x35, 0xcc, 0xef, 0x84,
	0x37, 0x2c, 0x70, 0xad, 0xcd, 0xf0, 0x05, 0xaf, 0x8f, 0x7a, 0x3e, 0x9e, 0x04, 0x27, 0xc7, 0xc9,
	0x05, 0xe3, 0xa3, 0x1c, 0x52, 0x7d, 0x84, 0x3e, 0x6f, 0xa4, 0xc7, 0x9a, 0x4b, 0x3d, 0x5b, 0x03,
	0x5b, 0xfa, 0x78, 0xaa, 0x9c, 0x71, 0x5f, 0x1e, 0xce, 0x9d, 0xbf, 0x7a, 0x68, 0x77, 0xa9, 0x30,
	0x5d, 0x43, 0xbd, 0x57, 0x16, 0xc1, 0x6b, 0xa8, 0xf7, 0xea, 0x42, 0xd7, 0x3e, 0x18, 0x4f, 0x82,
	0xbd, 0x33, 0x00, 0x4c, 0xb3, 0xda, 0x07, 0x4c, 0x65, 0x35, 0x75, 0xd4, 0xb5, 0x4c, 0x93, 0x8f,
	0x84, 0x2d, 0x32, 0x9e, 0x04, 0xbf, 0x38, 0xc6, 0x3a, 0xd3, 0x69, 0x62, 0x3e, 0x66, 0xb0, 0x80,
	0x9c, 0x5c, 0x51, 0xd6, 0x37, 0x31, 0xcd, 0x79, 0xbf, 0xaf, 0xff, 0x77, 0x40, 0x75, 0xbc, 0x3b,
	0x9a, 0xaf, 0x07, 0x8a, 0x1f, 0xe8, 0xbf, 0x36, 0xf2, 0xc6, 0x7e, 0x9e, 0x18, 0x7a, 0xb6, 0x3b,
	0xfa, 0xdb, 0xca, 0xc2, 0x9c, 0x22, 0x4f, 0xcc, 0x17, 0xb8, 0x2f, 0xd0, 0xf6, 0x42, 0x91, 0xf4,
	0x0f, 0xc2, 0xdb, 0x94, 0xd1, 0xf9, 0x88, 0x19, 0x72, 0xbc, 0x80, 0xd1, 0x3c, 0x33, 0xe6, 0x82,
	0x11, 0xfa, 0x7f, 0xf4, 0xd0, 0x3d, 0x03, 0x71, 0x35, 0x65, 0x81, 0xa9, 0x41, 0x5f, 0x92, 0x26,
	0x3f, 0x1a, 0x4f, 0x82, 0x77, 0x8f, 0xeb, 0xa1, 0x98, 0x24, 0x17, 0x90, 0x62, 0xc2, 0xb0, 0x9d,
	0x7c, 0x2a, 0x2f, 0xf6, 0xb1, 0x2e, 0x7c, 0xe6, 0xd3, 0x42, 0x0d, 0x40, 0x54, 0xe6, 0x32, 0x6c,
	0xdd, 0xf9, 0x7c, 0x12, 0xac, 0x74, 0x7f, 0xf0, 0xf3, 0xa7, 0x7d, 0xaa, 0x06, 0x65, 0x2f, 0x4c,
	0x78, 0x71, 0xf8, 0xf8, 0xc9, 0xc5, 0x61, 0x9f, 0x1f, 0x98, 0x56, 0x70, 0x20, 0x40, 0xf2, 0x52,
	0x24, 0x20, 0x0f, 0xcd, 0x0f, 0x16, 0xbd, 0x32, 0x3b, 0x34, 0x8a, 0x43, 0xfb, 0x33, 0xc6, 0x6f,
	0x3d, 0xef, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xca, 0x2e, 0x9e, 0x22, 0x11, 0x00, 0x00,
}
