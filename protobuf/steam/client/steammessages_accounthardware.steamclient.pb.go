// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_accounthardware.steamclient.proto

package client // import "github.com/13k/go-steam-resources/protobuf/steam/client"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CAccountHardware_RegisterSteamController_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string  `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_RegisterSteamController_Request) Reset() {
	*m = CAccountHardware_RegisterSteamController_Request{}
}
func (m *CAccountHardware_RegisterSteamController_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_RegisterSteamController_Request) ProtoMessage() {}
func (*CAccountHardware_RegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{0}
}
func (m *CAccountHardware_RegisterSteamController_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_RegisterSteamController_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_RegisterSteamController_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_RegisterSteamController_Request.Merge(dst, src)
}
func (m *CAccountHardware_RegisterSteamController_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Request.Size(m)
}
func (m *CAccountHardware_RegisterSteamController_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_RegisterSteamController_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_RegisterSteamController_Request proto.InternalMessageInfo

func (m *CAccountHardware_RegisterSteamController_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_RegisterSteamController_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

type CAccountHardware_RegisterSteamController_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_RegisterSteamController_Response) Reset() {
	*m = CAccountHardware_RegisterSteamController_Response{}
}
func (m *CAccountHardware_RegisterSteamController_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_RegisterSteamController_Response) ProtoMessage() {}
func (*CAccountHardware_RegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{1}
}
func (m *CAccountHardware_RegisterSteamController_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_RegisterSteamController_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_RegisterSteamController_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_RegisterSteamController_Response.Merge(dst, src)
}
func (m *CAccountHardware_RegisterSteamController_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_RegisterSteamController_Response.Size(m)
}
func (m *CAccountHardware_RegisterSteamController_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_RegisterSteamController_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_RegisterSteamController_Response proto.InternalMessageInfo

type CAccountHardware_CompleteSteamControllerRegistration_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string  `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) Reset() {
	*m = CAccountHardware_CompleteSteamControllerRegistration_Request{}
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_CompleteSteamControllerRegistration_Request) ProtoMessage() {}
func (*CAccountHardware_CompleteSteamControllerRegistration_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{2}
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_CompleteSteamControllerRegistration_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request.Merge(dst, src)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request.Size(m)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Request proto.InternalMessageInfo

func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_CompleteSteamControllerRegistration_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

type CAccountHardware_CompleteSteamControllerRegistration_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) Reset() {
	*m = CAccountHardware_CompleteSteamControllerRegistration_Response{}
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_CompleteSteamControllerRegistration_Response) ProtoMessage() {}
func (*CAccountHardware_CompleteSteamControllerRegistration_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{3}
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_CompleteSteamControllerRegistration_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response.Merge(dst, src)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response.Size(m)
}
func (m *CAccountHardware_CompleteSteamControllerRegistration_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_CompleteSteamControllerRegistration_Response proto.InternalMessageInfo

type CAccountHardware_QueryAccountsRegisteredToSerial_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string  `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) Reset() {
	*m = CAccountHardware_QueryAccountsRegisteredToSerial_Request{}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) ProtoMessage() {}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{4}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_QueryAccountsRegisteredToSerial_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request.Merge(dst, src)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request.Size(m)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Request proto.InternalMessageInfo

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Accounts struct {
	Accountid            *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	RegistrationComplete *bool    `protobuf:"varint,2,opt,name=registration_complete,json=registrationComplete" json:"registration_complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Reset() {
	*m = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts{}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) ProtoMessage() {}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{5}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.Unmarshal(m, b)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.Merge(dst, src)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.Size(m)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Accounts proto.InternalMessageInfo

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetRegistrationComplete() bool {
	if m != nil && m.RegistrationComplete != nil {
		return *m.RegistrationComplete
	}
	return false
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Response struct {
	Accounts             []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) Reset() {
	*m = CAccountHardware_QueryAccountsRegisteredToSerial_Response{}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) ProtoMessage() {}
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{6}
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_QueryAccountsRegisteredToSerial_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response.Merge(dst, src)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response.Size(m)
}
func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_QueryAccountsRegisteredToSerial_Response proto.InternalMessageInfo

func (m *CAccountHardware_QueryAccountsRegisteredToSerial_Response) GetAccounts() []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type CAccountHardware_SteamControllerSetConfig_ControllerConfig struct {
	Appidorname          *string  `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid      *uint64  `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename         *string  `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) Reset() {
	*m = CAccountHardware_SteamControllerSetConfig_ControllerConfig{}
}
func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) ProtoMessage() {}
func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{7}
}
func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerSetConfig_ControllerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig.Size(m)
}
func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_ControllerConfig proto.InternalMessageInfo

func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetAppidorname() string {
	if m != nil && m.Appidorname != nil {
		return *m.Appidorname
	}
	return ""
}

func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if m != nil && m.Publishedfileid != nil {
		return *m.Publishedfileid
	}
	return 0
}

func (m *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetTemplatename() string {
	if m != nil && m.Templatename != nil {
		return *m.Templatename
	}
	return ""
}

type CAccountHardware_SteamControllerSetConfig_Request struct {
	SerialNumber         *string                                                       `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string                                                       `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid            *uint32                                                       `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Configurations       []*CAccountHardware_SteamControllerSetConfig_ControllerConfig `protobuf:"bytes,4,rep,name=configurations" json:"configurations,omitempty"`
	ControllerType       *int32                                                        `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial    *bool                                                         `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) Reset() {
	*m = CAccountHardware_SteamControllerSetConfig_Request{}
}
func (m *CAccountHardware_SteamControllerSetConfig_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerSetConfig_Request) ProtoMessage() {}
func (*CAccountHardware_SteamControllerSetConfig_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{8}
}
func (m *CAccountHardware_SteamControllerSetConfig_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerSetConfig_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerSetConfig_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerSetConfig_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request.Size(m)
}
func (m *CAccountHardware_SteamControllerSetConfig_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Request proto.InternalMessageInfo

const Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType int32 = 2
const Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial bool = false

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetConfigurations() []*CAccountHardware_SteamControllerSetConfig_ControllerConfig {
	if m != nil {
		return m.Configurations
	}
	return nil
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetControllerType() int32 {
	if m != nil && m.ControllerType != nil {
		return *m.ControllerType
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType
}

func (m *CAccountHardware_SteamControllerSetConfig_Request) GetOnlyForThisSerial() bool {
	if m != nil && m.OnlyForThisSerial != nil {
		return *m.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerSetConfig_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SteamControllerSetConfig_Response) Reset() {
	*m = CAccountHardware_SteamControllerSetConfig_Response{}
}
func (m *CAccountHardware_SteamControllerSetConfig_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerSetConfig_Response) ProtoMessage() {}
func (*CAccountHardware_SteamControllerSetConfig_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{9}
}
func (m *CAccountHardware_SteamControllerSetConfig_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerSetConfig_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerSetConfig_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerSetConfig_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response.Size(m)
}
func (m *CAccountHardware_SteamControllerSetConfig_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerSetConfig_Response proto.InternalMessageInfo

type CAccountHardware_SteamControllerGetConfig_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string  `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid            *uint32  `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Appidorname          *string  `protobuf:"bytes,4,opt,name=appidorname" json:"appidorname,omitempty"`
	ControllerType       *int32   `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial    *bool    `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) Reset() {
	*m = CAccountHardware_SteamControllerGetConfig_Request{}
}
func (m *CAccountHardware_SteamControllerGetConfig_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerGetConfig_Request) ProtoMessage() {}
func (*CAccountHardware_SteamControllerGetConfig_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{10}
}
func (m *CAccountHardware_SteamControllerGetConfig_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerGetConfig_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerGetConfig_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerGetConfig_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request.Size(m)
}
func (m *CAccountHardware_SteamControllerGetConfig_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Request proto.InternalMessageInfo

const Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType int32 = 2
const Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial bool = false

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetAppidorname() string {
	if m != nil && m.Appidorname != nil {
		return *m.Appidorname
	}
	return ""
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetControllerType() int32 {
	if m != nil && m.ControllerType != nil {
		return *m.ControllerType
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType
}

func (m *CAccountHardware_SteamControllerGetConfig_Request) GetOnlyForThisSerial() bool {
	if m != nil && m.OnlyForThisSerial != nil {
		return *m.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerGetConfig_ControllerConfig struct {
	Appidorname          *string  `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid      *uint64  `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename         *string  `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	SerialNumber         *string  `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) Reset() {
	*m = CAccountHardware_SteamControllerGetConfig_ControllerConfig{}
}
func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) ProtoMessage() {}
func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{11}
}
func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerGetConfig_ControllerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig.Size(m)
}
func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_ControllerConfig proto.InternalMessageInfo

func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetAppidorname() string {
	if m != nil && m.Appidorname != nil {
		return *m.Appidorname
	}
	return ""
}

func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if m != nil && m.Publishedfileid != nil {
		return *m.Publishedfileid
	}
	return 0
}

func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetTemplatename() string {
	if m != nil && m.Templatename != nil {
		return *m.Templatename
	}
	return ""
}

func (m *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

type CAccountHardware_SteamControllerGetConfig_Response struct {
	Configurations       []*CAccountHardware_SteamControllerGetConfig_ControllerConfig `protobuf:"bytes,1,rep,name=configurations" json:"configurations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *CAccountHardware_SteamControllerGetConfig_Response) Reset() {
	*m = CAccountHardware_SteamControllerGetConfig_Response{}
}
func (m *CAccountHardware_SteamControllerGetConfig_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SteamControllerGetConfig_Response) ProtoMessage() {}
func (*CAccountHardware_SteamControllerGetConfig_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{12}
}
func (m *CAccountHardware_SteamControllerGetConfig_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_SteamControllerGetConfig_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SteamControllerGetConfig_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response.Merge(dst, src)
}
func (m *CAccountHardware_SteamControllerGetConfig_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response.Size(m)
}
func (m *CAccountHardware_SteamControllerGetConfig_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SteamControllerGetConfig_Response proto.InternalMessageInfo

func (m *CAccountHardware_SteamControllerGetConfig_Response) GetConfigurations() []*CAccountHardware_SteamControllerGetConfig_ControllerConfig {
	if m != nil {
		return m.Configurations
	}
	return nil
}

type CAccountHardware_DeRegisterSteamController_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode       *string  `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid            *uint32  `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_DeRegisterSteamController_Request) Reset() {
	*m = CAccountHardware_DeRegisterSteamController_Request{}
}
func (m *CAccountHardware_DeRegisterSteamController_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_DeRegisterSteamController_Request) ProtoMessage() {}
func (*CAccountHardware_DeRegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{13}
}
func (m *CAccountHardware_DeRegisterSteamController_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_DeRegisterSteamController_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_DeRegisterSteamController_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request.Merge(dst, src)
}
func (m *CAccountHardware_DeRegisterSteamController_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request.Size(m)
}
func (m *CAccountHardware_DeRegisterSteamController_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Request proto.InternalMessageInfo

func (m *CAccountHardware_DeRegisterSteamController_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_DeRegisterSteamController_Request) GetControllerCode() string {
	if m != nil && m.ControllerCode != nil {
		return *m.ControllerCode
	}
	return ""
}

func (m *CAccountHardware_DeRegisterSteamController_Request) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

type CAccountHardware_DeRegisterSteamController_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_DeRegisterSteamController_Response) Reset() {
	*m = CAccountHardware_DeRegisterSteamController_Response{}
}
func (m *CAccountHardware_DeRegisterSteamController_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_DeRegisterSteamController_Response) ProtoMessage() {}
func (*CAccountHardware_DeRegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{14}
}
func (m *CAccountHardware_DeRegisterSteamController_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_DeRegisterSteamController_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_DeRegisterSteamController_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response.Merge(dst, src)
}
func (m *CAccountHardware_DeRegisterSteamController_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response.Size(m)
}
func (m *CAccountHardware_DeRegisterSteamController_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_DeRegisterSteamController_Response proto.InternalMessageInfo

type CAccountHardware_SetPersonalizationFile_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Publishedfileid      *uint64  `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Accountid            *uint32  `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SetPersonalizationFile_Request) Reset() {
	*m = CAccountHardware_SetPersonalizationFile_Request{}
}
func (m *CAccountHardware_SetPersonalizationFile_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SetPersonalizationFile_Request) ProtoMessage() {}
func (*CAccountHardware_SetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{15}
}
func (m *CAccountHardware_SetPersonalizationFile_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_SetPersonalizationFile_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SetPersonalizationFile_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request.Merge(dst, src)
}
func (m *CAccountHardware_SetPersonalizationFile_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request.Size(m)
}
func (m *CAccountHardware_SetPersonalizationFile_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Request proto.InternalMessageInfo

func (m *CAccountHardware_SetPersonalizationFile_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_SetPersonalizationFile_Request) GetPublishedfileid() uint64 {
	if m != nil && m.Publishedfileid != nil {
		return *m.Publishedfileid
	}
	return 0
}

func (m *CAccountHardware_SetPersonalizationFile_Request) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

type CAccountHardware_SetPersonalizationFile_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_SetPersonalizationFile_Response) Reset() {
	*m = CAccountHardware_SetPersonalizationFile_Response{}
}
func (m *CAccountHardware_SetPersonalizationFile_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_SetPersonalizationFile_Response) ProtoMessage() {}
func (*CAccountHardware_SetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{16}
}
func (m *CAccountHardware_SetPersonalizationFile_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_SetPersonalizationFile_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_SetPersonalizationFile_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response.Merge(dst, src)
}
func (m *CAccountHardware_SetPersonalizationFile_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response.Size(m)
}
func (m *CAccountHardware_SetPersonalizationFile_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_SetPersonalizationFile_Response proto.InternalMessageInfo

type CAccountHardware_GetPersonalizationFile_Request struct {
	SerialNumber         *string  `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Accountid            *uint32  `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_GetPersonalizationFile_Request) Reset() {
	*m = CAccountHardware_GetPersonalizationFile_Request{}
}
func (m *CAccountHardware_GetPersonalizationFile_Request) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_GetPersonalizationFile_Request) ProtoMessage() {}
func (*CAccountHardware_GetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{17}
}
func (m *CAccountHardware_GetPersonalizationFile_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request.Unmarshal(m, b)
}
func (m *CAccountHardware_GetPersonalizationFile_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_GetPersonalizationFile_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request.Merge(dst, src)
}
func (m *CAccountHardware_GetPersonalizationFile_Request) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request.Size(m)
}
func (m *CAccountHardware_GetPersonalizationFile_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Request proto.InternalMessageInfo

func (m *CAccountHardware_GetPersonalizationFile_Request) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *CAccountHardware_GetPersonalizationFile_Request) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

type CAccountHardware_GetPersonalizationFile_Response struct {
	Publishedfileid      *uint64  `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAccountHardware_GetPersonalizationFile_Response) Reset() {
	*m = CAccountHardware_GetPersonalizationFile_Response{}
}
func (m *CAccountHardware_GetPersonalizationFile_Response) String() string {
	return proto.CompactTextString(m)
}
func (*CAccountHardware_GetPersonalizationFile_Response) ProtoMessage() {}
func (*CAccountHardware_GetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d, []int{18}
}
func (m *CAccountHardware_GetPersonalizationFile_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response.Unmarshal(m, b)
}
func (m *CAccountHardware_GetPersonalizationFile_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response.Marshal(b, m, deterministic)
}
func (dst *CAccountHardware_GetPersonalizationFile_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response.Merge(dst, src)
}
func (m *CAccountHardware_GetPersonalizationFile_Response) XXX_Size() int {
	return xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response.Size(m)
}
func (m *CAccountHardware_GetPersonalizationFile_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CAccountHardware_GetPersonalizationFile_Response proto.InternalMessageInfo

func (m *CAccountHardware_GetPersonalizationFile_Response) GetPublishedfileid() uint64 {
	if m != nil && m.Publishedfileid != nil {
		return *m.Publishedfileid
	}
	return 0
}

func init() {
	proto.RegisterType((*CAccountHardware_RegisterSteamController_Request)(nil), "CAccountHardware_RegisterSteamController_Request")
	proto.RegisterType((*CAccountHardware_RegisterSteamController_Response)(nil), "CAccountHardware_RegisterSteamController_Response")
	proto.RegisterType((*CAccountHardware_CompleteSteamControllerRegistration_Request)(nil), "CAccountHardware_CompleteSteamControllerRegistration_Request")
	proto.RegisterType((*CAccountHardware_CompleteSteamControllerRegistration_Response)(nil), "CAccountHardware_CompleteSteamControllerRegistration_Response")
	proto.RegisterType((*CAccountHardware_QueryAccountsRegisteredToSerial_Request)(nil), "CAccountHardware_QueryAccountsRegisteredToSerial_Request")
	proto.RegisterType((*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)(nil), "CAccountHardware_QueryAccountsRegisteredToSerial_Accounts")
	proto.RegisterType((*CAccountHardware_QueryAccountsRegisteredToSerial_Response)(nil), "CAccountHardware_QueryAccountsRegisteredToSerial_Response")
	proto.RegisterType((*CAccountHardware_SteamControllerSetConfig_ControllerConfig)(nil), "CAccountHardware_SteamControllerSetConfig_ControllerConfig")
	proto.RegisterType((*CAccountHardware_SteamControllerSetConfig_Request)(nil), "CAccountHardware_SteamControllerSetConfig_Request")
	proto.RegisterType((*CAccountHardware_SteamControllerSetConfig_Response)(nil), "CAccountHardware_SteamControllerSetConfig_Response")
	proto.RegisterType((*CAccountHardware_SteamControllerGetConfig_Request)(nil), "CAccountHardware_SteamControllerGetConfig_Request")
	proto.RegisterType((*CAccountHardware_SteamControllerGetConfig_ControllerConfig)(nil), "CAccountHardware_SteamControllerGetConfig_ControllerConfig")
	proto.RegisterType((*CAccountHardware_SteamControllerGetConfig_Response)(nil), "CAccountHardware_SteamControllerGetConfig_Response")
	proto.RegisterType((*CAccountHardware_DeRegisterSteamController_Request)(nil), "CAccountHardware_DeRegisterSteamController_Request")
	proto.RegisterType((*CAccountHardware_DeRegisterSteamController_Response)(nil), "CAccountHardware_DeRegisterSteamController_Response")
	proto.RegisterType((*CAccountHardware_SetPersonalizationFile_Request)(nil), "CAccountHardware_SetPersonalizationFile_Request")
	proto.RegisterType((*CAccountHardware_SetPersonalizationFile_Response)(nil), "CAccountHardware_SetPersonalizationFile_Response")
	proto.RegisterType((*CAccountHardware_GetPersonalizationFile_Request)(nil), "CAccountHardware_GetPersonalizationFile_Request")
	proto.RegisterType((*CAccountHardware_GetPersonalizationFile_Response)(nil), "CAccountHardware_GetPersonalizationFile_Response")
}

func init() {
	proto.RegisterFile("steammessages_accounthardware.steamclient.proto", fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d)
}

var fileDescriptor_steammessages_accounthardware_steamclient_2d4fe46d974a545d = []byte{
	// 1069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x56, 0x6f, 0x12, 0xb4, 0xdb, 0x9b, 0x25, 0xa2, 0xb5, 0x88, 0x59, 0x0b, 0xa4, 0xd6, 0xe4,
	0x90, 0x08, 0x36, 0xe3, 0xd8, 0xd9, 0x05, 0x12, 0x36, 0xa0, 0xe0, 0x28, 0x03, 0x07, 0x10, 0x8c,
	0xa3, 0x3d, 0x20, 0x24, 0xab, 0x3d, 0x53, 0x63, 0xb7, 0x32, 0x9e, 0x1e, 0xba, 0x7b, 0x58, 0x85,
	0xd3, 0xca, 0x27, 0x0e, 0x88, 0x0b, 0x27, 0x2e, 0x88, 0xcb, 0xde, 0xb8, 0xfa, 0x80, 0xe0, 0x25,
	0x38, 0x81, 0xc4, 0x0b, 0xf0, 0x0e, 0x5c, 0xd0, 0xfc, 0x38, 0xf1, 0xcf, 0x38, 0xf1, 0x38, 0x64,
	0xe1, 0xe8, 0x9a, 0xae, 0xf2, 0x57, 0x5f, 0x7d, 0x55, 0x5d, 0x6a, 0x5c, 0x55, 0x1a, 0x58, 0xaf,
	0x07, 0x4a, 0xb1, 0x0e, 0xa8, 0x16, 0x73, 0x5d, 0x11, 0x87, 0xba, 0xcb, 0xa4, 0xf7, 0x84, 0x49,
	0xb0, 0xd2, 0xaf, 0x6e, 0xc0, 0x21, 0xd4, 0x56, 0x24, 0x85, 0x16, 0x95, 0xfb, 0xe3, 0x0e, 0x71,
	0xc8, 0x7d, 0x0e, 0x5e, 0xab, 0xcd, 0x54, 0xc1, 0x69, 0xf3, 0x29, 0xc2, 0xdb, 0x8d, 0x83, 0x2c,
	0xe8, 0x07, 0x79, 0xd0, 0x96, 0x03, 0x1d, 0xae, 0x34, 0xc8, 0x66, 0x72, 0xbc, 0x21, 0x42, 0x2d,
	0x45, 0x10, 0x80, 0x6c, 0x39, 0xf0, 0x45, 0x0c, 0x4a, 0x93, 0x75, 0x7c, 0x47, 0x81, 0xe4, 0x2c,
	0x68, 0x85, 0x71, 0xaf, 0x0d, 0xd2, 0x40, 0x14, 0x6d, 0xde, 0x72, 0x56, 0x33, 0xe3, 0xc7, 0xa9,
	0x8d, 0x6c, 0xe0, 0x35, 0xf7, 0xdc, 0xd5, 0x15, 0x1e, 0x18, 0x37, 0xd2, 0x63, 0x2f, 0x9e, 0x9b,
	0x1b, 0xc2, 0x03, 0x73, 0x07, 0xd7, 0x4a, 0x20, 0x50, 0x91, 0x08, 0x15, 0x98, 0xdf, 0x20, 0xfc,
	0x68, 0xca, 0xab, 0x21, 0x7a, 0x51, 0x00, 0x1a, 0x26, 0xbc, 0xb2, 0x60, 0x92, 0x69, 0x2e, 0xc2,
	0x6b, 0xca, 0xe1, 0x3d, 0xbc, 0xbf, 0x20, 0x9a, 0x3c, 0x9f, 0xaf, 0x11, 0x7e, 0x7b, 0x2a, 0xc2,
	0xa7, 0x31, 0xc8, 0xd3, 0xdc, 0xa8, 0x86, 0x94, 0x80, 0x77, 0x2c, 0x9a, 0x19, 0xf2, 0xeb, 0xc9,
	0xe5, 0x5b, 0x84, 0x77, 0x4b, 0x43, 0x19, 0x7e, 0x22, 0xaf, 0xe2, 0x5b, 0xb9, 0x46, 0xb9, 0x97,
	0xe2, 0xb8, 0xe3, 0x9c, 0x1b, 0xc8, 0x0e, 0x7e, 0x59, 0x8e, 0xe6, 0xef, 0xe6, 0x1c, 0xa5, 0x50,
	0x6e, 0x3a, 0x77, 0x47, 0x3f, 0x0e, 0xf9, 0x33, 0xbf, 0x5b, 0x04, 0xd0, 0x90, 0x59, 0xf2, 0x18,
	0xdf, 0xcc, 0xff, 0x5f, 0x19, 0x88, 0x2e, 0x6d, 0xde, 0xae, 0xef, 0x59, 0x0b, 0xa7, 0xe7, 0x9c,
	0xc5, 0x32, 0x7f, 0x42, 0x78, 0x6f, 0x2a, 0xce, 0x44, 0xad, 0x9b, 0xa0, 0x1b, 0x22, 0xf4, 0x79,
	0xa7, 0xd5, 0x18, 0xe1, 0x38, 0x31, 0x10, 0x8a, 0x6f, 0xb3, 0x28, 0xe2, 0x9e, 0x90, 0x21, 0xeb,
	0x41, 0x5e, 0xb1, 0x51, 0x13, 0xd9, 0xc4, 0x6b, 0x51, 0xdc, 0x0e, 0xb8, 0xea, 0x82, 0xe7, 0xf3,
	0x00, 0xb8, 0x97, 0xb2, 0xb4, 0xec, 0x4c, 0x9a, 0x89, 0x89, 0x57, 0x35, 0xf4, 0xa2, 0x80, 0x69,
	0x48, 0x83, 0x2d, 0x65, 0xe5, 0x1f, 0xb5, 0x99, 0x7f, 0xdd, 0x28, 0x68, 0xb3, 0x99, 0x70, 0xaf,
	0x45, 0x59, 0xe3, 0xda, 0x58, 0x9a, 0xd4, 0x86, 0x8b, 0x93, 0xf3, 0x3e, 0xef, 0xc4, 0x59, 0xfd,
	0x95, 0xb1, 0x9c, 0x96, 0xeb, 0x1d, 0x6b, 0x71, 0x9a, 0x9d, 0x89, 0x90, 0xe4, 0xf5, 0x31, 0xac,
	0xfa, 0x34, 0x02, 0x63, 0x85, 0xa2, 0xcd, 0x95, 0x3d, 0x54, 0x1f, 0x85, 0x7b, 0x7c, 0x1a, 0x01,
	0x79, 0x13, 0xdf, 0x15, 0x61, 0x70, 0xda, 0xf2, 0x85, 0x6c, 0xe9, 0x2e, 0x57, 0xad, 0x2c, 0x6b,
	0xe3, 0x85, 0x44, 0xab, 0x7b, 0x2b, 0x3e, 0x0b, 0x14, 0x38, 0x2f, 0x25, 0x47, 0x8e, 0x84, 0x3c,
	0xee, 0x72, 0x95, 0x89, 0xc5, 0x7c, 0x80, 0xeb, 0x65, 0x98, 0xce, 0x27, 0xc0, 0xb3, 0x39, 0x0a,
	0x64, 0xff, 0xa7, 0x05, 0x9a, 0x90, 0xec, 0xf2, 0xb4, 0x64, 0x9f, 0x07, 0xbb, 0xbf, 0xcd, 0xd1,
	0x77, 0xf6, 0xff, 0xa6, 0xef, 0xa6, 0x0b, 0xb4, 0x3c, 0x5d, 0x20, 0xf3, 0x7b, 0x74, 0xb9, 0x64,
	0xec, 0x29, 0xc9, 0x14, 0x74, 0x0c, 0x9a, 0xb3, 0x63, 0xec, 0xb9, 0x3b, 0xc6, 0xfc, 0xb1, 0x08,
	0xdb, 0x21, 0x3c, 0xd7, 0x1d, 0xe1, 0x62, 0x61, 0x9a, 0x0f, 0xf1, 0x4e, 0x29, 0x84, 0x79, 0xc7,
	0xfd, 0x80, 0x70, 0x75, 0x9a, 0x28, 0xd0, 0x9f, 0x80, 0x54, 0x22, 0x64, 0x01, 0xff, 0x2a, 0xa5,
	0xe0, 0x88, 0x07, 0x50, 0x2e, 0xad, 0xf9, 0x15, 0x74, 0x71, 0x5e, 0xf5, 0x82, 0xdd, 0x6c, 0x26,
	0xbe, 0x3c, 0x29, 0x5d, 0x90, 0x93, 0xfd, 0x2f, 0xe4, 0x34, 0x86, 0xf4, 0xc6, 0x24, 0xd2, 0xcf,
	0x0b, 0x90, 0xda, 0x17, 0x23, 0x2d, 0x62, 0x09, 0x15, 0xb2, 0x54, 0xff, 0x7b, 0x15, 0xaf, 0x4d,
	0x44, 0x27, 0x7f, 0x20, 0xfc, 0xca, 0x8c, 0x0a, 0x93, 0x9a, 0x55, 0x76, 0xa5, 0xad, 0xd4, 0xad,
	0xf2, 0x3b, 0xe8, 0xe3, 0xfe, 0xc0, 0x70, 0x1c, 0x70, 0x85, 0xf4, 0x14, 0x65, 0x34, 0xa3, 0x8b,
	0x66, 0x1c, 0x52, 0x16, 0x7a, 0x54, 0x77, 0x81, 0xba, 0x2c, 0x08, 0x78, 0xd8, 0xa1, 0xb1, 0x02,
	0xb9, 0xa1, 0x68, 0x4e, 0x19, 0xe5, 0xa1, 0x2f, 0xa8, 0x2f, 0x24, 0x7d, 0xc2, 0xa4, 0x64, 0xa1,
	0x3e, 0xa5, 0x51, 0x2c, 0x23, 0xa1, 0x40, 0x59, 0xe4, 0x77, 0x84, 0xd7, 0xe7, 0x58, 0x1e, 0xc9,
	0xbe, 0x75, 0x95, 0x0d, 0xb8, 0xf2, 0xae, 0x75, 0xb5, 0x95, 0xb5, 0xd6, 0x1f, 0x18, 0x5b, 0x1f,
	0x31, 0x79, 0x92, 0x24, 0x7f, 0xde, 0xaf, 0x1b, 0x8a, 0x8e, 0x6e, 0x71, 0x94, 0x29, 0x3a, 0xdc,
	0xf2, 0xc8, 0x9f, 0x08, 0xaf, 0xcf, 0x5c, 0xb5, 0x46, 0x0a, 0xb8, 0x6b, 0x2d, 0xba, 0x0b, 0x57,
	0xf6, 0xac, 0x85, 0x57, 0x45, 0x73, 0xbf, 0x3f, 0x30, 0x76, 0x9b, 0x10, 0x7a, 0x8a, 0xb6, 0x99,
	0x7b, 0x42, 0x19, 0x0d, 0xb8, 0xd2, 0x54, 0xf8, 0xc3, 0xb2, 0x0d, 0x53, 0x4b, 0xdc, 0xa9, 0x16,
	0x63, 0x79, 0x5b, 0xe4, 0x57, 0x84, 0x69, 0x13, 0xf4, 0x21, 0x28, 0x2e, 0xc1, 0x9b, 0x1c, 0xac,
	0x47, 0x42, 0x1e, 0x44, 0x11, 0xa9, 0x5b, 0xa5, 0xb7, 0xb0, 0xca, 0x8e, 0xb5, 0xc0, 0x3e, 0x51,
	0xed, 0x0f, 0x8c, 0x37, 0x9a, 0xa0, 0x93, 0xea, 0x78, 0x19, 0xa4, 0x11, 0xb4, 0x34, 0x9b, 0xf2,
	0xa9, 0x04, 0x59, 0x48, 0x59, 0x14, 0xa5, 0xf0, 0xed, 0xab, 0xc3, 0xb7, 0x17, 0x80, 0x6f, 0xcf,
	0x80, 0x6f, 0x97, 0x80, 0xff, 0x0c, 0xe1, 0x7b, 0x33, 0x87, 0x3e, 0x29, 0xc0, 0x70, 0xe9, 0x1d,
	0x56, 0x79, 0x60, 0x2d, 0x72, 0xad, 0xbc, 0xd6, 0x1f, 0x18, 0xf7, 0x0e, 0xe1, 0x4c, 0x2a, 0xe3,
	0xed, 0x41, 0x7e, 0xc9, 0x54, 0x72, 0xee, 0x59, 0x30, 0x24, 0xc9, 0xb6, 0x55, 0xf2, 0x62, 0xaa,
	0xd4, 0xac, 0xd2, 0x57, 0x45, 0xbd, 0x3f, 0x30, 0xac, 0xa6, 0x16, 0x12, 0x54, 0x3a, 0xaa, 0x92,
	0x69, 0x4b, 0x3f, 0x3c, 0x4c, 0xf4, 0x9e, 0xfc, 0x8c, 0xc6, 0x7d, 0xd3, 0xcf, 0xe4, 0xe7, 0x4c,
	0x24, 0xa5, 0xd1, 0xdb, 0xa5, 0xd1, 0x5f, 0x72, 0x7d, 0x98, 0xdb, 0xfd, 0x81, 0x71, 0x3f, 0x15,
	0xc8, 0x9c, 0xd8, 0x2b, 0x0f, 0xfb, 0x03, 0xa3, 0x76, 0x90, 0xcc, 0xe9, 0x2f, 0xb9, 0x0b, 0x49,
	0xff, 0xc6, 0x0a, 0xce, 0x26, 0xf2, 0xf0, 0x49, 0x85, 0x4a, 0x48, 0x96, 0x37, 0x8f, 0xf6, 0x40,
	0x77, 0x85, 0xa7, 0xde, 0x7f, 0xf4, 0xd9, 0x5b, 0x1d, 0xae, 0xbb, 0x71, 0xdb, 0x72, 0x45, 0xaf,
	0x5a, 0xdb, 0x39, 0xa9, 0x76, 0xc4, 0x56, 0xfa, 0x92, 0xb2, 0x25, 0x41, 0x89, 0x58, 0xba, 0xa0,
	0xaa, 0xe9, 0x6b, 0x4a, 0x3b, 0xf6, 0xb3, 0xe7, 0x9a, 0x6a, 0xf6, 0xc6, 0xf2, 0x14, 0xa1, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xc3, 0xa0, 0x12, 0xc0, 0x11, 0x00, 0x00,
}
