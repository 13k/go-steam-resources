// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/client/steammessages_accounthardware.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EValveIndexComponent int32

const (
	EValveIndexComponent_k_EValveIndexComponentUnknown      EValveIndexComponent = 0
	EValveIndexComponent_k_EValveIndexComponentHMD          EValveIndexComponent = 1
	EValveIndexComponent_k_EValveIndexComponentLeftKnuckle  EValveIndexComponent = 2
	EValveIndexComponent_k_EValveIndexComponentRightKnuckle EValveIndexComponent = 3
)

// Enum value maps for EValveIndexComponent.
var (
	EValveIndexComponent_name = map[int32]string{
		0: "k_EValveIndexComponentUnknown",
		1: "k_EValveIndexComponentHMD",
		2: "k_EValveIndexComponentLeftKnuckle",
		3: "k_EValveIndexComponentRightKnuckle",
	}
	EValveIndexComponent_value = map[string]int32{
		"k_EValveIndexComponentUnknown":      0,
		"k_EValveIndexComponentHMD":          1,
		"k_EValveIndexComponentLeftKnuckle":  2,
		"k_EValveIndexComponentRightKnuckle": 3,
	}
)

func (x EValveIndexComponent) Enum() *EValveIndexComponent {
	p := new(EValveIndexComponent)
	*p = x
	return p
}

func (x EValveIndexComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EValveIndexComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_enumTypes[0].Descriptor()
}

func (EValveIndexComponent) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_accounthardware_steamclient_proto_enumTypes[0]
}

func (x EValveIndexComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EValveIndexComponent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EValveIndexComponent(num)
	return nil
}

// Deprecated: Use EValveIndexComponent.Descriptor instead.
func (EValveIndexComponent) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{0}
}

type CAccountHardware_RegisterSteamController_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CAccountHardware_RegisterSteamController_Request) Reset() {
	*x = CAccountHardware_RegisterSteamController_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_RegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterSteamController_Request) ProtoMessage() {}

func (x *CAccountHardware_RegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CAccountHardware_RegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_RegisterSteamController_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_RegisterSteamController_Response) Reset() {
	*x = CAccountHardware_RegisterSteamController_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_RegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterSteamController_Response) ProtoMessage() {}

func (x *CAccountHardware_RegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{1}
}

type CAccountHardware_CompleteSteamControllerRegistration_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) Reset() {
	*x = CAccountHardware_CompleteSteamControllerRegistration_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_CompleteSteamControllerRegistration_Request) ProtoMessage() {}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_CompleteSteamControllerRegistration_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_CompleteSteamControllerRegistration_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_CompleteSteamControllerRegistration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) Reset() {
	*x = CAccountHardware_CompleteSteamControllerRegistration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_CompleteSteamControllerRegistration_Response) ProtoMessage() {}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_CompleteSteamControllerRegistration_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_CompleteSteamControllerRegistration_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{3}
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Accounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid            *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	RegistrationComplete *bool   `protobuf:"varint,2,opt,name=registration_complete,json=registrationComplete" json:"registration_complete,omitempty"`
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetRegistrationComplete() bool {
	if x != nil && x.RegistrationComplete != nil {
		return *x.RegistrationComplete
	}
	return false
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) GetAccounts() []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CAccountHardware_SteamControllerSetConfig_ControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appidorname     *string `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_ControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

type CAccountHardware_SteamControllerSetConfig_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber      *string                                                       `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string                                                       `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32                                                       `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Configurations    []*CAccountHardware_SteamControllerSetConfig_ControllerConfig `protobuf:"bytes,4,rep,name=configurations" json:"configurations,omitempty"`
	ControllerType    *int32                                                        `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool                                                         `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
}

// Default values for CAccountHardware_SteamControllerSetConfig_Request fields.
const (
	Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType    = int32(2)
	Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CAccountHardware_SteamControllerSetConfig_Request) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_Request) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetConfigurations() []*CAccountHardware_SteamControllerSetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerSetConfig_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_SteamControllerSetConfig_Response) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerSetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_Response) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{9}
}

type CAccountHardware_SteamControllerGetConfig_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber      *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Appidorname       *string `protobuf:"bytes,4,opt,name=appidorname" json:"appidorname,omitempty"`
	ControllerType    *int32  `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool   `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
}

// Default values for CAccountHardware_SteamControllerGetConfig_Request fields.
const (
	Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType    = int32(2)
	Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CAccountHardware_SteamControllerGetConfig_Request) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_Request) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerGetConfig_ControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appidorname     *string `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	SerialNumber    *string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_ControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

type CAccountHardware_SteamControllerGetConfig_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*CAccountHardware_SteamControllerGetConfig_ControllerConfig `protobuf:"bytes,1,rep,name=configurations" json:"configurations,omitempty"`
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_Response) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) GetConfigurations() []*CAccountHardware_SteamControllerGetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type CAccountHardware_DeRegisterSteamController_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber   *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid      *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CAccountHardware_DeRegisterSteamController_Request) Reset() {
	*x = CAccountHardware_DeRegisterSteamController_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_DeRegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_DeRegisterSteamController_Request) ProtoMessage() {}

func (x *CAccountHardware_DeRegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_DeRegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_DeRegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_DeRegisterSteamController_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_DeRegisterSteamController_Response) Reset() {
	*x = CAccountHardware_DeRegisterSteamController_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_DeRegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_DeRegisterSteamController_Response) ProtoMessage() {}

func (x *CAccountHardware_DeRegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_DeRegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_DeRegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{14}
}

type CAccountHardware_SetPersonalizationFile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber    *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Publishedfileid *uint64 `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Accountid       *uint32 `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CAccountHardware_SetPersonalizationFile_Request) Reset() {
	*x = CAccountHardware_SetPersonalizationFile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SetPersonalizationFile_Request) ProtoMessage() {}

func (x *CAccountHardware_SetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_SetPersonalizationFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_SetPersonalizationFile_Response) Reset() {
	*x = CAccountHardware_SetPersonalizationFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_SetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SetPersonalizationFile_Response) ProtoMessage() {}

func (x *CAccountHardware_SetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{16}
}

type CAccountHardware_GetPersonalizationFile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Accountid    *uint32 `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CAccountHardware_GetPersonalizationFile_Request) Reset() {
	*x = CAccountHardware_GetPersonalizationFile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_GetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetPersonalizationFile_Request) ProtoMessage() {}

func (x *CAccountHardware_GetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CAccountHardware_GetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_GetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_GetPersonalizationFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
}

func (x *CAccountHardware_GetPersonalizationFile_Response) Reset() {
	*x = CAccountHardware_GetPersonalizationFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_GetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetPersonalizationFile_Response) ProtoMessage() {}

func (x *CAccountHardware_GetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CAccountHardware_GetPersonalizationFile_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CAccountHardware_VRCompatibilityCheck_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName *string                                               `protobuf:"bytes,1,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	Values      []*CAccountHardware_VRCompatibilityCheck_Request_Pair `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Request) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) GetValues() []*CAccountHardware_VRCompatibilityCheck_Request_Pair {
	if x != nil {
		return x.Values
	}
	return nil
}

type CAccountHardware_VRCompatibilityCheck_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values     []*CAccountHardware_VRCompatibilityCheck_Response_Pair             `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	Components []*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay `protobuf:"bytes,2,rep,name=components" json:"components,omitempty"`
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) GetValues() []*CAccountHardware_VRCompatibilityCheck_Response_Pair {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) GetComponents() []*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay {
	if x != nil {
		return x.Components
	}
	return nil
}

type CAccountHardware_RegisterValveIndexComponent_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber             *string               `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ManufacturerSerialNumber *string               `protobuf:"bytes,2,opt,name=manufacturer_serial_number,json=manufacturerSerialNumber" json:"manufacturer_serial_number,omitempty"`
	ComponentCode            *string               `protobuf:"bytes,3,opt,name=component_code,json=componentCode" json:"component_code,omitempty"`
	ComponentType            *EValveIndexComponent `protobuf:"varint,4,opt,name=component_type,json=componentType,enum=steam.client.EValveIndexComponent,def=0" json:"component_type,omitempty"`
	EstimatedTimeRegistered  *int32                `protobuf:"varint,5,opt,name=estimated_time_registered,json=estimatedTimeRegistered" json:"estimated_time_registered,omitempty"`
}

// Default values for CAccountHardware_RegisterValveIndexComponent_Request fields.
const (
	Default_CAccountHardware_RegisterValveIndexComponent_Request_ComponentType = EValveIndexComponent_k_EValveIndexComponentUnknown
)

func (x *CAccountHardware_RegisterValveIndexComponent_Request) Reset() {
	*x = CAccountHardware_RegisterValveIndexComponent_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterValveIndexComponent_Request) ProtoMessage() {}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterValveIndexComponent_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterValveIndexComponent_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetManufacturerSerialNumber() string {
	if x != nil && x.ManufacturerSerialNumber != nil {
		return *x.ManufacturerSerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetComponentCode() string {
	if x != nil && x.ComponentCode != nil {
		return *x.ComponentCode
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetComponentType() EValveIndexComponent {
	if x != nil && x.ComponentType != nil {
		return *x.ComponentType
	}
	return Default_CAccountHardware_RegisterValveIndexComponent_Request_ComponentType
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetEstimatedTimeRegistered() int32 {
	if x != nil && x.EstimatedTimeRegistered != nil {
		return *x.EstimatedTimeRegistered
	}
	return 0
}

type CAccountHardware_RegisterValveIndexComponent_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) Reset() {
	*x = CAccountHardware_RegisterValveIndexComponent_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterValveIndexComponent_Response) ProtoMessage() {}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterValveIndexComponent_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterValveIndexComponent_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{22}
}

type CAccountHardware_VRCompatibilityCheck_Request_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Request_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Request_Pair) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Request_Pair.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Request_Pair) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CAccountHardware_VRCompatibilityCheck_Response_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response_Pair) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response_Pair.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response_Pair) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image *string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{20, 1}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_steam_client_steammessages_accounthardware_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_accounthardware_steamclient_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x30, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x31, 0x43, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x3c, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3f,
	0x0a, 0x3d, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x38, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x39, 0x43,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x39,
	0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xac,
	0x01, 0x0a, 0x3a, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x02,
	0x0a, 0x31, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12,
	0x70, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x14, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x32, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x31,
	0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x3a, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x69, 0x64, 0x6f, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x32, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x32, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x33, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x2f, 0x43,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x30, 0x43,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x74, 0x0a, 0x2f, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x30, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x2d, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x82, 0xb5, 0x18,
	0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x20, 0x77, 0x65, 0x27, 0x72, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x52, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x23,
	0x82, 0xb5, 0x18, 0x1f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x2e, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x2e,
	0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x54, 0x6f, 0x70, 0x2d, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x2e, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x4f,
	0x53, 0x2c, 0x20, 0x52, 0x41, 0x4d, 0x2c, 0x20, 0x47, 0x50, 0x55, 0x2c, 0x20, 0x65, 0x74, 0x63,
	0x2e, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x4e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x34, 0x43, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x56, 0x61, 0x6c,
	0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x22, 0x37, 0x0a, 0x35, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xa7, 0x01, 0x0a, 0x14,
	0x45, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x48, 0x4d, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x56, 0x61, 0x6c,
	0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x66, 0x74, 0x4b, 0x6e, 0x75, 0x63, 0x6b, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x6e, 0x75, 0x63,
	0x6b, 0x6c, 0x65, 0x10, 0x03, 0x32, 0xee, 0x11, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0xf2, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x72, 0x72,
	0x61, 0x6e, 0x74, 0x79, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x2e, 0x12, 0xf1,
	0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xb5, 0x18, 0x2d, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x27, 0x73, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x47, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18,
	0x39, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x12, 0xd6, 0x01, 0x0a, 0x20, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12,
	0x3f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x53, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20,
	0x61, 0x70, 0x70, 0x12, 0xd6, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x3f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18,
	0x2b, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x12, 0xbf, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x44, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x44, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xb5, 0x18, 0x19, 0x44, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0xd5,
	0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x3d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xd3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c,
	0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xc2, 0x01, 0x0a,
	0x14, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x56, 0x52, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x56,
	0x52, 0x12, 0xdb, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x42, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x76,
	0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a,
	0x35, 0x82, 0xb5, 0x18, 0x31, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x3c, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescData = file_steam_client_steammessages_accounthardware_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_accounthardware_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_accounthardware_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_steam_client_steammessages_accounthardware_steamclient_proto_goTypes = []interface{}{
	(EValveIndexComponent)(0),                                               // 0: steam.client.EValveIndexComponent
	(*CAccountHardware_RegisterSteamController_Request)(nil),                // 1: steam.client.CAccountHardware_RegisterSteamController_Request
	(*CAccountHardware_RegisterSteamController_Response)(nil),               // 2: steam.client.CAccountHardware_RegisterSteamController_Response
	(*CAccountHardware_CompleteSteamControllerRegistration_Request)(nil),    // 3: steam.client.CAccountHardware_CompleteSteamControllerRegistration_Request
	(*CAccountHardware_CompleteSteamControllerRegistration_Response)(nil),   // 4: steam.client.CAccountHardware_CompleteSteamControllerRegistration_Response
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Request)(nil),        // 5: steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Request
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)(nil),       // 6: steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Accounts
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Response)(nil),       // 7: steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Response
	(*CAccountHardware_SteamControllerSetConfig_ControllerConfig)(nil),      // 8: steam.client.CAccountHardware_SteamControllerSetConfig_ControllerConfig
	(*CAccountHardware_SteamControllerSetConfig_Request)(nil),               // 9: steam.client.CAccountHardware_SteamControllerSetConfig_Request
	(*CAccountHardware_SteamControllerSetConfig_Response)(nil),              // 10: steam.client.CAccountHardware_SteamControllerSetConfig_Response
	(*CAccountHardware_SteamControllerGetConfig_Request)(nil),               // 11: steam.client.CAccountHardware_SteamControllerGetConfig_Request
	(*CAccountHardware_SteamControllerGetConfig_ControllerConfig)(nil),      // 12: steam.client.CAccountHardware_SteamControllerGetConfig_ControllerConfig
	(*CAccountHardware_SteamControllerGetConfig_Response)(nil),              // 13: steam.client.CAccountHardware_SteamControllerGetConfig_Response
	(*CAccountHardware_DeRegisterSteamController_Request)(nil),              // 14: steam.client.CAccountHardware_DeRegisterSteamController_Request
	(*CAccountHardware_DeRegisterSteamController_Response)(nil),             // 15: steam.client.CAccountHardware_DeRegisterSteamController_Response
	(*CAccountHardware_SetPersonalizationFile_Request)(nil),                 // 16: steam.client.CAccountHardware_SetPersonalizationFile_Request
	(*CAccountHardware_SetPersonalizationFile_Response)(nil),                // 17: steam.client.CAccountHardware_SetPersonalizationFile_Response
	(*CAccountHardware_GetPersonalizationFile_Request)(nil),                 // 18: steam.client.CAccountHardware_GetPersonalizationFile_Request
	(*CAccountHardware_GetPersonalizationFile_Response)(nil),                // 19: steam.client.CAccountHardware_GetPersonalizationFile_Response
	(*CAccountHardware_VRCompatibilityCheck_Request)(nil),                   // 20: steam.client.CAccountHardware_VRCompatibilityCheck_Request
	(*CAccountHardware_VRCompatibilityCheck_Response)(nil),                  // 21: steam.client.CAccountHardware_VRCompatibilityCheck_Response
	(*CAccountHardware_RegisterValveIndexComponent_Request)(nil),            // 22: steam.client.CAccountHardware_RegisterValveIndexComponent_Request
	(*CAccountHardware_RegisterValveIndexComponent_Response)(nil),           // 23: steam.client.CAccountHardware_RegisterValveIndexComponent_Response
	(*CAccountHardware_VRCompatibilityCheck_Request_Pair)(nil),              // 24: steam.client.CAccountHardware_VRCompatibilityCheck_Request.Pair
	(*CAccountHardware_VRCompatibilityCheck_Response_Pair)(nil),             // 25: steam.client.CAccountHardware_VRCompatibilityCheck_Response.Pair
	(*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay)(nil), // 26: steam.client.CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay
}
var file_steam_client_steammessages_accounthardware_steamclient_proto_depIdxs = []int32{
	6,  // 0: steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts:type_name -> steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Accounts
	8,  // 1: steam.client.CAccountHardware_SteamControllerSetConfig_Request.configurations:type_name -> steam.client.CAccountHardware_SteamControllerSetConfig_ControllerConfig
	12, // 2: steam.client.CAccountHardware_SteamControllerGetConfig_Response.configurations:type_name -> steam.client.CAccountHardware_SteamControllerGetConfig_ControllerConfig
	24, // 3: steam.client.CAccountHardware_VRCompatibilityCheck_Request.values:type_name -> steam.client.CAccountHardware_VRCompatibilityCheck_Request.Pair
	25, // 4: steam.client.CAccountHardware_VRCompatibilityCheck_Response.values:type_name -> steam.client.CAccountHardware_VRCompatibilityCheck_Response.Pair
	26, // 5: steam.client.CAccountHardware_VRCompatibilityCheck_Response.components:type_name -> steam.client.CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay
	0,  // 6: steam.client.CAccountHardware_RegisterValveIndexComponent_Request.component_type:type_name -> steam.client.EValveIndexComponent
	1,  // 7: steam.client.AccountHardware.RegisterSteamController:input_type -> steam.client.CAccountHardware_RegisterSteamController_Request
	3,  // 8: steam.client.AccountHardware.CompleteSteamControllerRegistration:input_type -> steam.client.CAccountHardware_CompleteSteamControllerRegistration_Request
	5,  // 9: steam.client.AccountHardware.QueryAccountsRegisteredToController:input_type -> steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Request
	9,  // 10: steam.client.AccountHardware.SetDesiredControllerConfigForApp:input_type -> steam.client.CAccountHardware_SteamControllerSetConfig_Request
	11, // 11: steam.client.AccountHardware.GetDesiredControllerConfigForApp:input_type -> steam.client.CAccountHardware_SteamControllerGetConfig_Request
	14, // 12: steam.client.AccountHardware.DeRegisterSteamController:input_type -> steam.client.CAccountHardware_DeRegisterSteamController_Request
	16, // 13: steam.client.AccountHardware.SetControllerPersonalizationFile:input_type -> steam.client.CAccountHardware_SetPersonalizationFile_Request
	18, // 14: steam.client.AccountHardware.GetControllerPersonalizationFile:input_type -> steam.client.CAccountHardware_GetPersonalizationFile_Request
	20, // 15: steam.client.AccountHardware.VRCompatibilityCheck:input_type -> steam.client.CAccountHardware_VRCompatibilityCheck_Request
	22, // 16: steam.client.AccountHardware.RegisterValveIndexComponent:input_type -> steam.client.CAccountHardware_RegisterValveIndexComponent_Request
	2,  // 17: steam.client.AccountHardware.RegisterSteamController:output_type -> steam.client.CAccountHardware_RegisterSteamController_Response
	4,  // 18: steam.client.AccountHardware.CompleteSteamControllerRegistration:output_type -> steam.client.CAccountHardware_CompleteSteamControllerRegistration_Response
	7,  // 19: steam.client.AccountHardware.QueryAccountsRegisteredToController:output_type -> steam.client.CAccountHardware_QueryAccountsRegisteredToSerial_Response
	10, // 20: steam.client.AccountHardware.SetDesiredControllerConfigForApp:output_type -> steam.client.CAccountHardware_SteamControllerSetConfig_Response
	13, // 21: steam.client.AccountHardware.GetDesiredControllerConfigForApp:output_type -> steam.client.CAccountHardware_SteamControllerGetConfig_Response
	15, // 22: steam.client.AccountHardware.DeRegisterSteamController:output_type -> steam.client.CAccountHardware_DeRegisterSteamController_Response
	17, // 23: steam.client.AccountHardware.SetControllerPersonalizationFile:output_type -> steam.client.CAccountHardware_SetPersonalizationFile_Response
	19, // 24: steam.client.AccountHardware.GetControllerPersonalizationFile:output_type -> steam.client.CAccountHardware_GetPersonalizationFile_Response
	21, // 25: steam.client.AccountHardware.VRCompatibilityCheck:output_type -> steam.client.CAccountHardware_VRCompatibilityCheck_Response
	23, // 26: steam.client.AccountHardware.RegisterValveIndexComponent:output_type -> steam.client.CAccountHardware_RegisterValveIndexComponent_Response
	17, // [17:27] is the sub-list for method output_type
	7,  // [7:17] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_accounthardware_steamclient_proto_init() }
func file_steam_client_steammessages_accounthardware_steamclient_proto_init() {
	if File_steam_client_steammessages_accounthardware_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_RegisterSteamController_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_RegisterSteamController_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_CompleteSteamControllerRegistration_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_CompleteSteamControllerRegistration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_QueryAccountsRegisteredToSerial_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_QueryAccountsRegisteredToSerial_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerSetConfig_ControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerSetConfig_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerSetConfig_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerGetConfig_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerGetConfig_ControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SteamControllerGetConfig_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_DeRegisterSteamController_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_DeRegisterSteamController_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SetPersonalizationFile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_SetPersonalizationFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_GetPersonalizationFile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_GetPersonalizationFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_VRCompatibilityCheck_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_VRCompatibilityCheck_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_RegisterValveIndexComponent_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_RegisterValveIndexComponent_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_VRCompatibilityCheck_Request_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_VRCompatibilityCheck_Response_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_accounthardware_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_accounthardware_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_accounthardware_steamclient_proto_depIdxs,
		EnumInfos:         file_steam_client_steammessages_accounthardware_steamclient_proto_enumTypes,
		MessageInfos:      file_steam_client_steammessages_accounthardware_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_accounthardware_steamclient_proto = out.File
	file_steam_client_steammessages_accounthardware_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_accounthardware_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_accounthardware_steamclient_proto_depIdxs = nil
}
