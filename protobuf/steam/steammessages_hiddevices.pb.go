// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: steam/steammessages_hiddevices.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EHIDDeviceLocation int32

const (
	EHIDDeviceLocation_k_EDeviceLocationLocal  EHIDDeviceLocation = 0
	EHIDDeviceLocation_k_EDeviceLocationRemote EHIDDeviceLocation = 2
	EHIDDeviceLocation_k_EDeviceLocationAny    EHIDDeviceLocation = 3
)

// Enum value maps for EHIDDeviceLocation.
var (
	EHIDDeviceLocation_name = map[int32]string{
		0: "k_EDeviceLocationLocal",
		2: "k_EDeviceLocationRemote",
		3: "k_EDeviceLocationAny",
	}
	EHIDDeviceLocation_value = map[string]int32{
		"k_EDeviceLocationLocal":  0,
		"k_EDeviceLocationRemote": 2,
		"k_EDeviceLocationAny":    3,
	}
)

func (x EHIDDeviceLocation) Enum() *EHIDDeviceLocation {
	p := new(EHIDDeviceLocation)
	*p = x
	return p
}

func (x EHIDDeviceLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHIDDeviceLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_hiddevices_proto_enumTypes[0].Descriptor()
}

func (EHIDDeviceLocation) Type() protoreflect.EnumType {
	return &file_steam_steammessages_hiddevices_proto_enumTypes[0]
}

func (x EHIDDeviceLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHIDDeviceLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHIDDeviceLocation(num)
	return nil
}

// Deprecated: Use EHIDDeviceLocation.Descriptor instead.
func (EHIDDeviceLocation) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{0}
}

type EHIDDeviceDisconnectMethod int32

const (
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodUnknown       EHIDDeviceDisconnectMethod = 0
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodBluetooth     EHIDDeviceDisconnectMethod = 1
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodFeatureReport EHIDDeviceDisconnectMethod = 2
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodOutputReport  EHIDDeviceDisconnectMethod = 3
)

// Enum value maps for EHIDDeviceDisconnectMethod.
var (
	EHIDDeviceDisconnectMethod_name = map[int32]string{
		0: "k_EDeviceDisconnectMethodUnknown",
		1: "k_EDeviceDisconnectMethodBluetooth",
		2: "k_EDeviceDisconnectMethodFeatureReport",
		3: "k_EDeviceDisconnectMethodOutputReport",
	}
	EHIDDeviceDisconnectMethod_value = map[string]int32{
		"k_EDeviceDisconnectMethodUnknown":       0,
		"k_EDeviceDisconnectMethodBluetooth":     1,
		"k_EDeviceDisconnectMethodFeatureReport": 2,
		"k_EDeviceDisconnectMethodOutputReport":  3,
	}
)

func (x EHIDDeviceDisconnectMethod) Enum() *EHIDDeviceDisconnectMethod {
	p := new(EHIDDeviceDisconnectMethod)
	*p = x
	return p
}

func (x EHIDDeviceDisconnectMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHIDDeviceDisconnectMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_hiddevices_proto_enumTypes[1].Descriptor()
}

func (EHIDDeviceDisconnectMethod) Type() protoreflect.EnumType {
	return &file_steam_steammessages_hiddevices_proto_enumTypes[1]
}

func (x EHIDDeviceDisconnectMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHIDDeviceDisconnectMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHIDDeviceDisconnectMethod(num)
	return nil
}

// Deprecated: Use EHIDDeviceDisconnectMethod.Descriptor instead.
func (EHIDDeviceDisconnectMethod) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{1}
}

type CHIDDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location           *EHIDDeviceLocation `protobuf:"varint,1,opt,name=location,enum=steam.EHIDDeviceLocation,def=0" json:"location,omitempty"`
	Path               *string             `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	VendorId           *uint32             `protobuf:"varint,3,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	ProductId          *uint32             `protobuf:"varint,4,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	SerialNumber       *string             `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ReleaseNumber      *uint32             `protobuf:"varint,6,opt,name=release_number,json=releaseNumber" json:"release_number,omitempty"`
	ManufacturerString *string             `protobuf:"bytes,7,opt,name=manufacturer_string,json=manufacturerString" json:"manufacturer_string,omitempty"`
	ProductString      *string             `protobuf:"bytes,8,opt,name=product_string,json=productString" json:"product_string,omitempty"`
	UsagePage          *uint32             `protobuf:"varint,9,opt,name=usage_page,json=usagePage" json:"usage_page,omitempty"`
	Usage              *uint32             `protobuf:"varint,10,opt,name=usage" json:"usage,omitempty"`
	InterfaceNumber    *int32              `protobuf:"varint,11,opt,name=interface_number,json=interfaceNumber,def=-1" json:"interface_number,omitempty"`
	Ostype             *int32              `protobuf:"varint,12,opt,name=ostype,def=-1" json:"ostype,omitempty"`
	IsGenericGamepad   *bool               `protobuf:"varint,13,opt,name=is_generic_gamepad,json=isGenericGamepad" json:"is_generic_gamepad,omitempty"`
	IsGenericJoystick  *bool               `protobuf:"varint,14,opt,name=is_generic_joystick,json=isGenericJoystick" json:"is_generic_joystick,omitempty"`
	CapsBits           *uint32             `protobuf:"varint,15,opt,name=caps_bits,json=capsBits" json:"caps_bits,omitempty"`
	SessionId          *uint32             `protobuf:"varint,16,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	EControllerType    *uint32             `protobuf:"varint,17,opt,name=eControllerType,def=0" json:"eControllerType,omitempty"`
}

// Default values for CHIDDeviceInfo fields.
const (
	Default_CHIDDeviceInfo_Location        = EHIDDeviceLocation_k_EDeviceLocationLocal
	Default_CHIDDeviceInfo_InterfaceNumber = int32(-1)
	Default_CHIDDeviceInfo_Ostype          = int32(-1)
	Default_CHIDDeviceInfo_EControllerType = uint32(0)
)

func (x *CHIDDeviceInfo) Reset() {
	*x = CHIDDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDDeviceInfo) ProtoMessage() {}

func (x *CHIDDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDDeviceInfo.ProtoReflect.Descriptor instead.
func (*CHIDDeviceInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{0}
}

func (x *CHIDDeviceInfo) GetLocation() EHIDDeviceLocation {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return Default_CHIDDeviceInfo_Location
}

func (x *CHIDDeviceInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CHIDDeviceInfo) GetVendorId() uint32 {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetProductId() uint32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CHIDDeviceInfo) GetReleaseNumber() uint32 {
	if x != nil && x.ReleaseNumber != nil {
		return *x.ReleaseNumber
	}
	return 0
}

func (x *CHIDDeviceInfo) GetManufacturerString() string {
	if x != nil && x.ManufacturerString != nil {
		return *x.ManufacturerString
	}
	return ""
}

func (x *CHIDDeviceInfo) GetProductString() string {
	if x != nil && x.ProductString != nil {
		return *x.ProductString
	}
	return ""
}

func (x *CHIDDeviceInfo) GetUsagePage() uint32 {
	if x != nil && x.UsagePage != nil {
		return *x.UsagePage
	}
	return 0
}

func (x *CHIDDeviceInfo) GetUsage() uint32 {
	if x != nil && x.Usage != nil {
		return *x.Usage
	}
	return 0
}

func (x *CHIDDeviceInfo) GetInterfaceNumber() int32 {
	if x != nil && x.InterfaceNumber != nil {
		return *x.InterfaceNumber
	}
	return Default_CHIDDeviceInfo_InterfaceNumber
}

func (x *CHIDDeviceInfo) GetOstype() int32 {
	if x != nil && x.Ostype != nil {
		return *x.Ostype
	}
	return Default_CHIDDeviceInfo_Ostype
}

func (x *CHIDDeviceInfo) GetIsGenericGamepad() bool {
	if x != nil && x.IsGenericGamepad != nil {
		return *x.IsGenericGamepad
	}
	return false
}

func (x *CHIDDeviceInfo) GetIsGenericJoystick() bool {
	if x != nil && x.IsGenericJoystick != nil {
		return *x.IsGenericJoystick
	}
	return false
}

func (x *CHIDDeviceInfo) GetCapsBits() uint32 {
	if x != nil && x.CapsBits != nil {
		return *x.CapsBits
	}
	return 0
}

func (x *CHIDDeviceInfo) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetEControllerType() uint32 {
	if x != nil && x.EControllerType != nil {
		return *x.EControllerType
	}
	return Default_CHIDDeviceInfo_EControllerType
}

type CHIDDeviceInputReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullReport      []byte  `protobuf:"bytes,1,opt,name=full_report,json=fullReport" json:"full_report,omitempty"`
	DeltaReport     []byte  `protobuf:"bytes,2,opt,name=delta_report,json=deltaReport" json:"delta_report,omitempty"`
	DeltaReportSize *uint32 `protobuf:"varint,3,opt,name=delta_report_size,json=deltaReportSize" json:"delta_report_size,omitempty"`
	DeltaReportCrc  *uint32 `protobuf:"varint,4,opt,name=delta_report_crc,json=deltaReportCrc" json:"delta_report_crc,omitempty"`
}

func (x *CHIDDeviceInputReport) Reset() {
	*x = CHIDDeviceInputReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDDeviceInputReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDDeviceInputReport) ProtoMessage() {}

func (x *CHIDDeviceInputReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDDeviceInputReport.ProtoReflect.Descriptor instead.
func (*CHIDDeviceInputReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{1}
}

func (x *CHIDDeviceInputReport) GetFullReport() []byte {
	if x != nil {
		return x.FullReport
	}
	return nil
}

func (x *CHIDDeviceInputReport) GetDeltaReport() []byte {
	if x != nil {
		return x.DeltaReport
	}
	return nil
}

func (x *CHIDDeviceInputReport) GetDeltaReportSize() uint32 {
	if x != nil && x.DeltaReportSize != nil {
		return *x.DeltaReportSize
	}
	return 0
}

func (x *CHIDDeviceInputReport) GetDeltaReportCrc() uint32 {
	if x != nil && x.DeltaReportCrc != nil {
		return *x.DeltaReportCrc
	}
	return 0
}

type CHIDMessageToRemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Types that are assignable to Command:
	//	*CHIDMessageToRemote_DeviceOpen_
	//	*CHIDMessageToRemote_DeviceClose_
	//	*CHIDMessageToRemote_DeviceWrite_
	//	*CHIDMessageToRemote_DeviceRead_
	//	*CHIDMessageToRemote_DeviceSendFeatureReport_
	//	*CHIDMessageToRemote_DeviceGetFeatureReport_
	//	*CHIDMessageToRemote_DeviceGetVendorString_
	//	*CHIDMessageToRemote_DeviceGetProductString_
	//	*CHIDMessageToRemote_DeviceGetSerialNumberString_
	//	*CHIDMessageToRemote_DeviceStartInputReports_
	//	*CHIDMessageToRemote_DeviceRequestFullReport_
	//	*CHIDMessageToRemote_DeviceDisconnect_
	Command isCHIDMessageToRemote_Command `protobuf_oneof:"command"`
}

func (x *CHIDMessageToRemote) Reset() {
	*x = CHIDMessageToRemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote) ProtoMessage() {}

func (x *CHIDMessageToRemote) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2}
}

func (x *CHIDMessageToRemote) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (m *CHIDMessageToRemote) GetCommand() isCHIDMessageToRemote_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceOpen() *CHIDMessageToRemote_DeviceOpen {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceOpen_); ok {
		return x.DeviceOpen
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceClose() *CHIDMessageToRemote_DeviceClose {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceClose_); ok {
		return x.DeviceClose
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceWrite() *CHIDMessageToRemote_DeviceWrite {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceWrite_); ok {
		return x.DeviceWrite
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceRead() *CHIDMessageToRemote_DeviceRead {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceRead_); ok {
		return x.DeviceRead
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceSendFeatureReport() *CHIDMessageToRemote_DeviceSendFeatureReport {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceSendFeatureReport_); ok {
		return x.DeviceSendFeatureReport
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetFeatureReport() *CHIDMessageToRemote_DeviceGetFeatureReport {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceGetFeatureReport_); ok {
		return x.DeviceGetFeatureReport
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetVendorString() *CHIDMessageToRemote_DeviceGetVendorString {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceGetVendorString_); ok {
		return x.DeviceGetVendorString
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetProductString() *CHIDMessageToRemote_DeviceGetProductString {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceGetProductString_); ok {
		return x.DeviceGetProductString
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetSerialNumberString() *CHIDMessageToRemote_DeviceGetSerialNumberString {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceGetSerialNumberString_); ok {
		return x.DeviceGetSerialNumberString
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceStartInputReports() *CHIDMessageToRemote_DeviceStartInputReports {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceStartInputReports_); ok {
		return x.DeviceStartInputReports
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceRequestFullReport() *CHIDMessageToRemote_DeviceRequestFullReport {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceRequestFullReport_); ok {
		return x.DeviceRequestFullReport
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceDisconnect() *CHIDMessageToRemote_DeviceDisconnect {
	if x, ok := x.GetCommand().(*CHIDMessageToRemote_DeviceDisconnect_); ok {
		return x.DeviceDisconnect
	}
	return nil
}

type isCHIDMessageToRemote_Command interface {
	isCHIDMessageToRemote_Command()
}

type CHIDMessageToRemote_DeviceOpen_ struct {
	DeviceOpen *CHIDMessageToRemote_DeviceOpen `protobuf:"bytes,2,opt,name=device_open,json=deviceOpen,oneof"`
}

type CHIDMessageToRemote_DeviceClose_ struct {
	DeviceClose *CHIDMessageToRemote_DeviceClose `protobuf:"bytes,3,opt,name=device_close,json=deviceClose,oneof"`
}

type CHIDMessageToRemote_DeviceWrite_ struct {
	DeviceWrite *CHIDMessageToRemote_DeviceWrite `protobuf:"bytes,4,opt,name=device_write,json=deviceWrite,oneof"`
}

type CHIDMessageToRemote_DeviceRead_ struct {
	DeviceRead *CHIDMessageToRemote_DeviceRead `protobuf:"bytes,5,opt,name=device_read,json=deviceRead,oneof"`
}

type CHIDMessageToRemote_DeviceSendFeatureReport_ struct {
	DeviceSendFeatureReport *CHIDMessageToRemote_DeviceSendFeatureReport `protobuf:"bytes,6,opt,name=device_send_feature_report,json=deviceSendFeatureReport,oneof"`
}

type CHIDMessageToRemote_DeviceGetFeatureReport_ struct {
	DeviceGetFeatureReport *CHIDMessageToRemote_DeviceGetFeatureReport `protobuf:"bytes,7,opt,name=device_get_feature_report,json=deviceGetFeatureReport,oneof"`
}

type CHIDMessageToRemote_DeviceGetVendorString_ struct {
	DeviceGetVendorString *CHIDMessageToRemote_DeviceGetVendorString `protobuf:"bytes,8,opt,name=device_get_vendor_string,json=deviceGetVendorString,oneof"`
}

type CHIDMessageToRemote_DeviceGetProductString_ struct {
	DeviceGetProductString *CHIDMessageToRemote_DeviceGetProductString `protobuf:"bytes,9,opt,name=device_get_product_string,json=deviceGetProductString,oneof"`
}

type CHIDMessageToRemote_DeviceGetSerialNumberString_ struct {
	DeviceGetSerialNumberString *CHIDMessageToRemote_DeviceGetSerialNumberString `protobuf:"bytes,10,opt,name=device_get_serial_number_string,json=deviceGetSerialNumberString,oneof"`
}

type CHIDMessageToRemote_DeviceStartInputReports_ struct {
	DeviceStartInputReports *CHIDMessageToRemote_DeviceStartInputReports `protobuf:"bytes,11,opt,name=device_start_input_reports,json=deviceStartInputReports,oneof"`
}

type CHIDMessageToRemote_DeviceRequestFullReport_ struct {
	DeviceRequestFullReport *CHIDMessageToRemote_DeviceRequestFullReport `protobuf:"bytes,12,opt,name=device_request_full_report,json=deviceRequestFullReport,oneof"`
}

type CHIDMessageToRemote_DeviceDisconnect_ struct {
	DeviceDisconnect *CHIDMessageToRemote_DeviceDisconnect `protobuf:"bytes,13,opt,name=device_disconnect,json=deviceDisconnect,oneof"`
}

func (*CHIDMessageToRemote_DeviceOpen_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceClose_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceWrite_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceRead_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceSendFeatureReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetFeatureReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetVendorString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetProductString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetSerialNumberString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceStartInputReports_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceRequestFullReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceDisconnect_) isCHIDMessageToRemote_Command() {}

type CHIDMessageFromRemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*CHIDMessageFromRemote_UpdateDeviceList_
	//	*CHIDMessageFromRemote_Response
	//	*CHIDMessageFromRemote_Reports
	//	*CHIDMessageFromRemote_CloseDevice_
	//	*CHIDMessageFromRemote_CloseAllDevices_
	Command isCHIDMessageFromRemote_Command `protobuf_oneof:"command"`
}

func (x *CHIDMessageFromRemote) Reset() {
	*x = CHIDMessageFromRemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote) ProtoMessage() {}

func (x *CHIDMessageFromRemote) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3}
}

func (m *CHIDMessageFromRemote) GetCommand() isCHIDMessageFromRemote_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetUpdateDeviceList() *CHIDMessageFromRemote_UpdateDeviceList {
	if x, ok := x.GetCommand().(*CHIDMessageFromRemote_UpdateDeviceList_); ok {
		return x.UpdateDeviceList
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetResponse() *CHIDMessageFromRemote_RequestResponse {
	if x, ok := x.GetCommand().(*CHIDMessageFromRemote_Response); ok {
		return x.Response
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetReports() *CHIDMessageFromRemote_DeviceInputReports {
	if x, ok := x.GetCommand().(*CHIDMessageFromRemote_Reports); ok {
		return x.Reports
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetCloseDevice() *CHIDMessageFromRemote_CloseDevice {
	if x, ok := x.GetCommand().(*CHIDMessageFromRemote_CloseDevice_); ok {
		return x.CloseDevice
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetCloseAllDevices() *CHIDMessageFromRemote_CloseAllDevices {
	if x, ok := x.GetCommand().(*CHIDMessageFromRemote_CloseAllDevices_); ok {
		return x.CloseAllDevices
	}
	return nil
}

type isCHIDMessageFromRemote_Command interface {
	isCHIDMessageFromRemote_Command()
}

type CHIDMessageFromRemote_UpdateDeviceList_ struct {
	UpdateDeviceList *CHIDMessageFromRemote_UpdateDeviceList `protobuf:"bytes,1,opt,name=update_device_list,json=updateDeviceList,oneof"`
}

type CHIDMessageFromRemote_Response struct {
	Response *CHIDMessageFromRemote_RequestResponse `protobuf:"bytes,2,opt,name=response,oneof"`
}

type CHIDMessageFromRemote_Reports struct {
	Reports *CHIDMessageFromRemote_DeviceInputReports `protobuf:"bytes,3,opt,name=reports,oneof"`
}

type CHIDMessageFromRemote_CloseDevice_ struct {
	CloseDevice *CHIDMessageFromRemote_CloseDevice `protobuf:"bytes,4,opt,name=close_device,json=closeDevice,oneof"`
}

type CHIDMessageFromRemote_CloseAllDevices_ struct {
	CloseAllDevices *CHIDMessageFromRemote_CloseAllDevices `protobuf:"bytes,5,opt,name=close_all_devices,json=closeAllDevices,oneof"`
}

func (*CHIDMessageFromRemote_UpdateDeviceList_) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_Response) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_Reports) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_CloseDevice_) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_CloseAllDevices_) isCHIDMessageFromRemote_Command() {}

type CHIDMessageToRemote_DeviceOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CHIDDeviceInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceOpen) Reset() {
	*x = CHIDMessageToRemote_DeviceOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceOpen) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceOpen) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceOpen.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceOpen) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CHIDMessageToRemote_DeviceOpen) GetInfo() *CHIDDeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CHIDMessageToRemote_DeviceClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceClose) Reset() {
	*x = CHIDMessageToRemote_DeviceClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceClose) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceClose) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceClose.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceClose) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CHIDMessageToRemote_DeviceClose) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Data   []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceWrite) Reset() {
	*x = CHIDMessageToRemote_DeviceWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceWrite) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceWrite) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceWrite.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceWrite) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CHIDMessageToRemote_DeviceWrite) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceWrite) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageToRemote_DeviceRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device    *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Length    *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	TimeoutMs *int32  `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceRead) Reset() {
	*x = CHIDMessageToRemote_DeviceRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceRead) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceRead) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceRead.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceRead) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CHIDMessageToRemote_DeviceRead) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceRead) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceRead) GetTimeoutMs() int32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type CHIDMessageToRemote_DeviceSendFeatureReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Data   []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) Reset() {
	*x = CHIDMessageToRemote_DeviceSendFeatureReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceSendFeatureReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceSendFeatureReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceSendFeatureReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageToRemote_DeviceGetFeatureReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device       *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	ReportNumber []byte  `protobuf:"bytes,2,opt,name=report_number,json=reportNumber" json:"report_number,omitempty"`
	Length       *uint32 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) Reset() {
	*x = CHIDMessageToRemote_DeviceGetFeatureReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetFeatureReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetFeatureReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetFeatureReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 5}
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetReportNumber() []byte {
	if x != nil {
		return x.ReportNumber
	}
	return nil
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetVendorString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetVendorString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetVendorString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetVendorString) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetVendorString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetVendorString) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 6}
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetProductString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceGetProductString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetProductString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceGetProductString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetProductString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetProductString) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetProductString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetProductString) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 7}
}

func (x *CHIDMessageToRemote_DeviceGetProductString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetSerialNumberString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetSerialNumberString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetSerialNumberString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetSerialNumberString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetSerialNumberString) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 8}
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceStartInputReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Length *uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) Reset() {
	*x = CHIDMessageToRemote_DeviceStartInputReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceStartInputReports) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceStartInputReports) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceStartInputReports.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceStartInputReports) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 9}
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type CHIDMessageToRemote_DeviceRequestFullReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) Reset() {
	*x = CHIDMessageToRemote_DeviceRequestFullReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceRequestFullReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceRequestFullReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceRequestFullReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 10}
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceDisconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device           *uint32                     `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	DisconnectMethod *EHIDDeviceDisconnectMethod `protobuf:"varint,2,opt,name=disconnectMethod,enum=steam.EHIDDeviceDisconnectMethod,def=0" json:"disconnectMethod,omitempty"`
	Data             []byte                      `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for CHIDMessageToRemote_DeviceDisconnect fields.
const (
	Default_CHIDMessageToRemote_DeviceDisconnect_DisconnectMethod = EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodUnknown
)

func (x *CHIDMessageToRemote_DeviceDisconnect) Reset() {
	*x = CHIDMessageToRemote_DeviceDisconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageToRemote_DeviceDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceDisconnect) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceDisconnect.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceDisconnect) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 11}
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetDisconnectMethod() EHIDDeviceDisconnectMethod {
	if x != nil && x.DisconnectMethod != nil {
		return *x.DisconnectMethod
	}
	return Default_CHIDMessageToRemote_DeviceDisconnect_DisconnectMethod
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageFromRemote_UpdateDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*CHIDDeviceInfo `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) Reset() {
	*x = CHIDMessageFromRemote_UpdateDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_UpdateDeviceList) ProtoMessage() {}

func (x *CHIDMessageFromRemote_UpdateDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_UpdateDeviceList.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_UpdateDeviceList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) GetDevices() []*CHIDDeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CHIDMessageFromRemote_RequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Result    *int32  `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Data      []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CHIDMessageFromRemote_RequestResponse) Reset() {
	*x = CHIDMessageFromRemote_RequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_RequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_RequestResponse) ProtoMessage() {}

func (x *CHIDMessageFromRemote_RequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_RequestResponse.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_RequestResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CHIDMessageFromRemote_RequestResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CHIDMessageFromRemote_RequestResponse) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CHIDMessageFromRemote_RequestResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageFromRemote_DeviceInputReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceReports []*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport `protobuf:"bytes,1,rep,name=device_reports,json=deviceReports" json:"device_reports,omitempty"`
}

func (x *CHIDMessageFromRemote_DeviceInputReports) Reset() {
	*x = CHIDMessageFromRemote_DeviceInputReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_DeviceInputReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_DeviceInputReports) ProtoMessage() {}

func (x *CHIDMessageFromRemote_DeviceInputReports) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_DeviceInputReports.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_DeviceInputReports) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CHIDMessageFromRemote_DeviceInputReports) GetDeviceReports() []*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport {
	if x != nil {
		return x.DeviceReports
	}
	return nil
}

type CHIDMessageFromRemote_CloseDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *uint32 `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
}

func (x *CHIDMessageFromRemote_CloseDevice) Reset() {
	*x = CHIDMessageFromRemote_CloseDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_CloseDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_CloseDevice) ProtoMessage() {}

func (x *CHIDMessageFromRemote_CloseDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_CloseDevice.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_CloseDevice) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CHIDMessageFromRemote_CloseDevice) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageFromRemote_CloseAllDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CHIDMessageFromRemote_CloseAllDevices) Reset() {
	*x = CHIDMessageFromRemote_CloseAllDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_CloseAllDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_CloseAllDevices) ProtoMessage() {}

func (x *CHIDMessageFromRemote_CloseAllDevices) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_CloseAllDevices.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_CloseAllDevices) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 4}
}

type CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *uint32                  `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Reports []*CHIDDeviceInputReport `protobuf:"bytes,2,rep,name=reports" json:"reports,omitempty"`
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) Reset() {
	*x = CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_hiddevices_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) ProtoMessage() {}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_hiddevices_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) GetReports() []*CHIDDeviceInputReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

var File_steam_steammessages_hiddevices_proto protoreflect.FileDescriptor

var file_steam_steammessages_hiddevices_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x9a, 0x05,
	0x0a, 0x0e, 0x43, 0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x48, 0x49, 0x44, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x16, 0x6b,
	0x5f, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x6f, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x73, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x0f, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x43,
	0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x63, 0x22, 0xe7,
	0x10, 0x0a, 0x13, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x4b, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48,
	0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x71, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x17, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x17, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49,
	0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x25,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x5b, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a, 0x45, 0x0a,
	0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x6d, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x1a, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x49, 0x0a,
	0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x31, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x48, 0x49, 0x44, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x88, 0x07, 0x0a, 0x15, 0x43, 0x48, 0x49,
	0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49,
	0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xe3, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x68, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x48, 0x49, 0x44, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x25,
	0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x11, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2a, 0x67, 0x0a, 0x12, 0x45, 0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x79, 0x10, 0x03, 0x2a, 0xc1, 0x01, 0x0a,
	0x1a, 0x45, 0x48, 0x49, 0x44, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03,
	0x42, 0x37, 0x48, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_steam_steammessages_hiddevices_proto_rawDescOnce sync.Once
	file_steam_steammessages_hiddevices_proto_rawDescData = file_steam_steammessages_hiddevices_proto_rawDesc
)

func file_steam_steammessages_hiddevices_proto_rawDescGZIP() []byte {
	file_steam_steammessages_hiddevices_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_hiddevices_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_hiddevices_proto_rawDescData)
	})
	return file_steam_steammessages_hiddevices_proto_rawDescData
}

var file_steam_steammessages_hiddevices_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steam_steammessages_hiddevices_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_steam_steammessages_hiddevices_proto_goTypes = []interface{}{
	(EHIDDeviceLocation)(0),                                            // 0: steam.EHIDDeviceLocation
	(EHIDDeviceDisconnectMethod)(0),                                    // 1: steam.EHIDDeviceDisconnectMethod
	(*CHIDDeviceInfo)(nil),                                             // 2: steam.CHIDDeviceInfo
	(*CHIDDeviceInputReport)(nil),                                      // 3: steam.CHIDDeviceInputReport
	(*CHIDMessageToRemote)(nil),                                        // 4: steam.CHIDMessageToRemote
	(*CHIDMessageFromRemote)(nil),                                      // 5: steam.CHIDMessageFromRemote
	(*CHIDMessageToRemote_DeviceOpen)(nil),                             // 6: steam.CHIDMessageToRemote.DeviceOpen
	(*CHIDMessageToRemote_DeviceClose)(nil),                            // 7: steam.CHIDMessageToRemote.DeviceClose
	(*CHIDMessageToRemote_DeviceWrite)(nil),                            // 8: steam.CHIDMessageToRemote.DeviceWrite
	(*CHIDMessageToRemote_DeviceRead)(nil),                             // 9: steam.CHIDMessageToRemote.DeviceRead
	(*CHIDMessageToRemote_DeviceSendFeatureReport)(nil),                // 10: steam.CHIDMessageToRemote.DeviceSendFeatureReport
	(*CHIDMessageToRemote_DeviceGetFeatureReport)(nil),                 // 11: steam.CHIDMessageToRemote.DeviceGetFeatureReport
	(*CHIDMessageToRemote_DeviceGetVendorString)(nil),                  // 12: steam.CHIDMessageToRemote.DeviceGetVendorString
	(*CHIDMessageToRemote_DeviceGetProductString)(nil),                 // 13: steam.CHIDMessageToRemote.DeviceGetProductString
	(*CHIDMessageToRemote_DeviceGetSerialNumberString)(nil),            // 14: steam.CHIDMessageToRemote.DeviceGetSerialNumberString
	(*CHIDMessageToRemote_DeviceStartInputReports)(nil),                // 15: steam.CHIDMessageToRemote.DeviceStartInputReports
	(*CHIDMessageToRemote_DeviceRequestFullReport)(nil),                // 16: steam.CHIDMessageToRemote.DeviceRequestFullReport
	(*CHIDMessageToRemote_DeviceDisconnect)(nil),                       // 17: steam.CHIDMessageToRemote.DeviceDisconnect
	(*CHIDMessageFromRemote_UpdateDeviceList)(nil),                     // 18: steam.CHIDMessageFromRemote.UpdateDeviceList
	(*CHIDMessageFromRemote_RequestResponse)(nil),                      // 19: steam.CHIDMessageFromRemote.RequestResponse
	(*CHIDMessageFromRemote_DeviceInputReports)(nil),                   // 20: steam.CHIDMessageFromRemote.DeviceInputReports
	(*CHIDMessageFromRemote_CloseDevice)(nil),                          // 21: steam.CHIDMessageFromRemote.CloseDevice
	(*CHIDMessageFromRemote_CloseAllDevices)(nil),                      // 22: steam.CHIDMessageFromRemote.CloseAllDevices
	(*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport)(nil), // 23: steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport
}
var file_steam_steammessages_hiddevices_proto_depIdxs = []int32{
	0,  // 0: steam.CHIDDeviceInfo.location:type_name -> steam.EHIDDeviceLocation
	6,  // 1: steam.CHIDMessageToRemote.device_open:type_name -> steam.CHIDMessageToRemote.DeviceOpen
	7,  // 2: steam.CHIDMessageToRemote.device_close:type_name -> steam.CHIDMessageToRemote.DeviceClose
	8,  // 3: steam.CHIDMessageToRemote.device_write:type_name -> steam.CHIDMessageToRemote.DeviceWrite
	9,  // 4: steam.CHIDMessageToRemote.device_read:type_name -> steam.CHIDMessageToRemote.DeviceRead
	10, // 5: steam.CHIDMessageToRemote.device_send_feature_report:type_name -> steam.CHIDMessageToRemote.DeviceSendFeatureReport
	11, // 6: steam.CHIDMessageToRemote.device_get_feature_report:type_name -> steam.CHIDMessageToRemote.DeviceGetFeatureReport
	12, // 7: steam.CHIDMessageToRemote.device_get_vendor_string:type_name -> steam.CHIDMessageToRemote.DeviceGetVendorString
	13, // 8: steam.CHIDMessageToRemote.device_get_product_string:type_name -> steam.CHIDMessageToRemote.DeviceGetProductString
	14, // 9: steam.CHIDMessageToRemote.device_get_serial_number_string:type_name -> steam.CHIDMessageToRemote.DeviceGetSerialNumberString
	15, // 10: steam.CHIDMessageToRemote.device_start_input_reports:type_name -> steam.CHIDMessageToRemote.DeviceStartInputReports
	16, // 11: steam.CHIDMessageToRemote.device_request_full_report:type_name -> steam.CHIDMessageToRemote.DeviceRequestFullReport
	17, // 12: steam.CHIDMessageToRemote.device_disconnect:type_name -> steam.CHIDMessageToRemote.DeviceDisconnect
	18, // 13: steam.CHIDMessageFromRemote.update_device_list:type_name -> steam.CHIDMessageFromRemote.UpdateDeviceList
	19, // 14: steam.CHIDMessageFromRemote.response:type_name -> steam.CHIDMessageFromRemote.RequestResponse
	20, // 15: steam.CHIDMessageFromRemote.reports:type_name -> steam.CHIDMessageFromRemote.DeviceInputReports
	21, // 16: steam.CHIDMessageFromRemote.close_device:type_name -> steam.CHIDMessageFromRemote.CloseDevice
	22, // 17: steam.CHIDMessageFromRemote.close_all_devices:type_name -> steam.CHIDMessageFromRemote.CloseAllDevices
	2,  // 18: steam.CHIDMessageToRemote.DeviceOpen.info:type_name -> steam.CHIDDeviceInfo
	1,  // 19: steam.CHIDMessageToRemote.DeviceDisconnect.disconnectMethod:type_name -> steam.EHIDDeviceDisconnectMethod
	2,  // 20: steam.CHIDMessageFromRemote.UpdateDeviceList.devices:type_name -> steam.CHIDDeviceInfo
	23, // 21: steam.CHIDMessageFromRemote.DeviceInputReports.device_reports:type_name -> steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport
	3,  // 22: steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports:type_name -> steam.CHIDDeviceInputReport
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_steam_steammessages_hiddevices_proto_init() }
func file_steam_steammessages_hiddevices_proto_init() {
	if File_steam_steammessages_hiddevices_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_hiddevices_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDDeviceInputReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceSendFeatureReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceGetFeatureReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceGetVendorString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceGetProductString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceGetSerialNumberString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceStartInputReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceRequestFullReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageToRemote_DeviceDisconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_UpdateDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_RequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_DeviceInputReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_CloseDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_CloseAllDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_hiddevices_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steam_steammessages_hiddevices_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CHIDMessageToRemote_DeviceOpen_)(nil),
		(*CHIDMessageToRemote_DeviceClose_)(nil),
		(*CHIDMessageToRemote_DeviceWrite_)(nil),
		(*CHIDMessageToRemote_DeviceRead_)(nil),
		(*CHIDMessageToRemote_DeviceSendFeatureReport_)(nil),
		(*CHIDMessageToRemote_DeviceGetFeatureReport_)(nil),
		(*CHIDMessageToRemote_DeviceGetVendorString_)(nil),
		(*CHIDMessageToRemote_DeviceGetProductString_)(nil),
		(*CHIDMessageToRemote_DeviceGetSerialNumberString_)(nil),
		(*CHIDMessageToRemote_DeviceStartInputReports_)(nil),
		(*CHIDMessageToRemote_DeviceRequestFullReport_)(nil),
		(*CHIDMessageToRemote_DeviceDisconnect_)(nil),
	}
	file_steam_steammessages_hiddevices_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CHIDMessageFromRemote_UpdateDeviceList_)(nil),
		(*CHIDMessageFromRemote_Response)(nil),
		(*CHIDMessageFromRemote_Reports)(nil),
		(*CHIDMessageFromRemote_CloseDevice_)(nil),
		(*CHIDMessageFromRemote_CloseAllDevices_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_hiddevices_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_hiddevices_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_hiddevices_proto_depIdxs,
		EnumInfos:         file_steam_steammessages_hiddevices_proto_enumTypes,
		MessageInfos:      file_steam_steammessages_hiddevices_proto_msgTypes,
	}.Build()
	File_steam_steammessages_hiddevices_proto = out.File
	file_steam_steammessages_hiddevices_proto_rawDesc = nil
	file_steam_steammessages_hiddevices_proto_goTypes = nil
	file_steam_steammessages_hiddevices_proto_depIdxs = nil
}
