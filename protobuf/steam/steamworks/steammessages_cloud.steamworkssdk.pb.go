// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_cloud.steamworkssdk.proto

package steamworks // import "github.com/13k/go-steam-resources/protobuf/steam/steamworks"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CCloud_GetUploadServerInfo_Request struct {
	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_GetUploadServerInfo_Request) Reset()         { *m = CCloud_GetUploadServerInfo_Request{} }
func (m *CCloud_GetUploadServerInfo_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetUploadServerInfo_Request) ProtoMessage()    {}
func (*CCloud_GetUploadServerInfo_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{0}
}
func (m *CCloud_GetUploadServerInfo_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Request.Unmarshal(m, b)
}
func (m *CCloud_GetUploadServerInfo_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Request.Marshal(b, m, deterministic)
}
func (dst *CCloud_GetUploadServerInfo_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_GetUploadServerInfo_Request.Merge(dst, src)
}
func (m *CCloud_GetUploadServerInfo_Request) XXX_Size() int {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Request.Size(m)
}
func (m *CCloud_GetUploadServerInfo_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_GetUploadServerInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_GetUploadServerInfo_Request proto.InternalMessageInfo

func (m *CCloud_GetUploadServerInfo_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_GetUploadServerInfo_Response struct {
	ServerUrl            *string  `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_GetUploadServerInfo_Response) Reset()         { *m = CCloud_GetUploadServerInfo_Response{} }
func (m *CCloud_GetUploadServerInfo_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetUploadServerInfo_Response) ProtoMessage()    {}
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{1}
}
func (m *CCloud_GetUploadServerInfo_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Response.Unmarshal(m, b)
}
func (m *CCloud_GetUploadServerInfo_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Response.Marshal(b, m, deterministic)
}
func (dst *CCloud_GetUploadServerInfo_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_GetUploadServerInfo_Response.Merge(dst, src)
}
func (m *CCloud_GetUploadServerInfo_Response) XXX_Size() int {
	return xxx_messageInfo_CCloud_GetUploadServerInfo_Response.Size(m)
}
func (m *CCloud_GetUploadServerInfo_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_GetUploadServerInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_GetUploadServerInfo_Response proto.InternalMessageInfo

func (m *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if m != nil && m.ServerUrl != nil {
		return *m.ServerUrl
	}
	return ""
}

type CCloud_GetFileDetails_Request struct {
	Ugcid                *uint64  `protobuf:"varint,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Appid                *uint32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_GetFileDetails_Request) Reset()         { *m = CCloud_GetFileDetails_Request{} }
func (m *CCloud_GetFileDetails_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetFileDetails_Request) ProtoMessage()    {}
func (*CCloud_GetFileDetails_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{2}
}
func (m *CCloud_GetFileDetails_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_GetFileDetails_Request.Unmarshal(m, b)
}
func (m *CCloud_GetFileDetails_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_GetFileDetails_Request.Marshal(b, m, deterministic)
}
func (dst *CCloud_GetFileDetails_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_GetFileDetails_Request.Merge(dst, src)
}
func (m *CCloud_GetFileDetails_Request) XXX_Size() int {
	return xxx_messageInfo_CCloud_GetFileDetails_Request.Size(m)
}
func (m *CCloud_GetFileDetails_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_GetFileDetails_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_GetFileDetails_Request proto.InternalMessageInfo

func (m *CCloud_GetFileDetails_Request) GetUgcid() uint64 {
	if m != nil && m.Ugcid != nil {
		return *m.Ugcid
	}
	return 0
}

func (m *CCloud_GetFileDetails_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_UserFile struct {
	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid                *uint64  `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename             *string  `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp            *uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize             *uint32  `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url                  *string  `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator       *uint64  `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_UserFile) Reset()         { *m = CCloud_UserFile{} }
func (m *CCloud_UserFile) String() string { return proto.CompactTextString(m) }
func (*CCloud_UserFile) ProtoMessage()    {}
func (*CCloud_UserFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{3}
}
func (m *CCloud_UserFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_UserFile.Unmarshal(m, b)
}
func (m *CCloud_UserFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_UserFile.Marshal(b, m, deterministic)
}
func (dst *CCloud_UserFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_UserFile.Merge(dst, src)
}
func (m *CCloud_UserFile) XXX_Size() int {
	return xxx_messageInfo_CCloud_UserFile.Size(m)
}
func (m *CCloud_UserFile) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_UserFile.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_UserFile proto.InternalMessageInfo

func (m *CCloud_UserFile) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_UserFile) GetUgcid() uint64 {
	if m != nil && m.Ugcid != nil {
		return *m.Ugcid
	}
	return 0
}

func (m *CCloud_UserFile) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_UserFile) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CCloud_UserFile) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *CCloud_UserFile) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *CCloud_UserFile) GetSteamidCreator() uint64 {
	if m != nil && m.SteamidCreator != nil {
		return *m.SteamidCreator
	}
	return 0
}

type CCloud_GetFileDetails_Response struct {
	Details              *CCloud_UserFile `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CCloud_GetFileDetails_Response) Reset()         { *m = CCloud_GetFileDetails_Response{} }
func (m *CCloud_GetFileDetails_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_GetFileDetails_Response) ProtoMessage()    {}
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{4}
}
func (m *CCloud_GetFileDetails_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_GetFileDetails_Response.Unmarshal(m, b)
}
func (m *CCloud_GetFileDetails_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_GetFileDetails_Response.Marshal(b, m, deterministic)
}
func (dst *CCloud_GetFileDetails_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_GetFileDetails_Response.Merge(dst, src)
}
func (m *CCloud_GetFileDetails_Response) XXX_Size() int {
	return xxx_messageInfo_CCloud_GetFileDetails_Response.Size(m)
}
func (m *CCloud_GetFileDetails_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_GetFileDetails_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_GetFileDetails_Response proto.InternalMessageInfo

func (m *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if m != nil {
		return m.Details
	}
	return nil
}

type CCloud_EnumerateUserFiles_Request struct {
	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtendedDetails      *bool    `protobuf:"varint,2,opt,name=extended_details,json=extendedDetails" json:"extended_details,omitempty"`
	Count                *uint32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	StartIndex           *uint32  `protobuf:"varint,4,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_EnumerateUserFiles_Request) Reset()         { *m = CCloud_EnumerateUserFiles_Request{} }
func (m *CCloud_EnumerateUserFiles_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_EnumerateUserFiles_Request) ProtoMessage()    {}
func (*CCloud_EnumerateUserFiles_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{5}
}
func (m *CCloud_EnumerateUserFiles_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Request.Unmarshal(m, b)
}
func (m *CCloud_EnumerateUserFiles_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Request.Marshal(b, m, deterministic)
}
func (dst *CCloud_EnumerateUserFiles_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_EnumerateUserFiles_Request.Merge(dst, src)
}
func (m *CCloud_EnumerateUserFiles_Request) XXX_Size() int {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Request.Size(m)
}
func (m *CCloud_EnumerateUserFiles_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_EnumerateUserFiles_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_EnumerateUserFiles_Request proto.InternalMessageInfo

func (m *CCloud_EnumerateUserFiles_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCloud_EnumerateUserFiles_Request) GetExtendedDetails() bool {
	if m != nil && m.ExtendedDetails != nil {
		return *m.ExtendedDetails
	}
	return false
}

func (m *CCloud_EnumerateUserFiles_Request) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CCloud_EnumerateUserFiles_Request) GetStartIndex() uint32 {
	if m != nil && m.StartIndex != nil {
		return *m.StartIndex
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	Files                []*CCloud_UserFile `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles           *uint32            `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CCloud_EnumerateUserFiles_Response) Reset()         { *m = CCloud_EnumerateUserFiles_Response{} }
func (m *CCloud_EnumerateUserFiles_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_EnumerateUserFiles_Response) ProtoMessage()    {}
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{6}
}
func (m *CCloud_EnumerateUserFiles_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Response.Unmarshal(m, b)
}
func (m *CCloud_EnumerateUserFiles_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Response.Marshal(b, m, deterministic)
}
func (dst *CCloud_EnumerateUserFiles_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_EnumerateUserFiles_Response.Merge(dst, src)
}
func (m *CCloud_EnumerateUserFiles_Response) XXX_Size() int {
	return xxx_messageInfo_CCloud_EnumerateUserFiles_Response.Size(m)
}
func (m *CCloud_EnumerateUserFiles_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_EnumerateUserFiles_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_EnumerateUserFiles_Response proto.InternalMessageInfo

func (m *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if m != nil && m.TotalFiles != nil {
		return *m.TotalFiles
	}
	return 0
}

type CCloud_Delete_Request struct {
	Filename             *string  `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid                *uint32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_Delete_Request) Reset()         { *m = CCloud_Delete_Request{} }
func (m *CCloud_Delete_Request) String() string { return proto.CompactTextString(m) }
func (*CCloud_Delete_Request) ProtoMessage()    {}
func (*CCloud_Delete_Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{7}
}
func (m *CCloud_Delete_Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_Delete_Request.Unmarshal(m, b)
}
func (m *CCloud_Delete_Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_Delete_Request.Marshal(b, m, deterministic)
}
func (dst *CCloud_Delete_Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_Delete_Request.Merge(dst, src)
}
func (m *CCloud_Delete_Request) XXX_Size() int {
	return xxx_messageInfo_CCloud_Delete_Request.Size(m)
}
func (m *CCloud_Delete_Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_Delete_Request.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_Delete_Request proto.InternalMessageInfo

func (m *CCloud_Delete_Request) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *CCloud_Delete_Request) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CCloud_Delete_Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCloud_Delete_Response) Reset()         { *m = CCloud_Delete_Response{} }
func (m *CCloud_Delete_Response) String() string { return proto.CompactTextString(m) }
func (*CCloud_Delete_Response) ProtoMessage()    {}
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90, []int{8}
}
func (m *CCloud_Delete_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCloud_Delete_Response.Unmarshal(m, b)
}
func (m *CCloud_Delete_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCloud_Delete_Response.Marshal(b, m, deterministic)
}
func (dst *CCloud_Delete_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCloud_Delete_Response.Merge(dst, src)
}
func (m *CCloud_Delete_Response) XXX_Size() int {
	return xxx_messageInfo_CCloud_Delete_Response.Size(m)
}
func (m *CCloud_Delete_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CCloud_Delete_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CCloud_Delete_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CCloud_GetUploadServerInfo_Request)(nil), "CCloud_GetUploadServerInfo_Request")
	proto.RegisterType((*CCloud_GetUploadServerInfo_Response)(nil), "CCloud_GetUploadServerInfo_Response")
	proto.RegisterType((*CCloud_GetFileDetails_Request)(nil), "CCloud_GetFileDetails_Request")
	proto.RegisterType((*CCloud_UserFile)(nil), "CCloud_UserFile")
	proto.RegisterType((*CCloud_GetFileDetails_Response)(nil), "CCloud_GetFileDetails_Response")
	proto.RegisterType((*CCloud_EnumerateUserFiles_Request)(nil), "CCloud_EnumerateUserFiles_Request")
	proto.RegisterType((*CCloud_EnumerateUserFiles_Response)(nil), "CCloud_EnumerateUserFiles_Response")
	proto.RegisterType((*CCloud_Delete_Request)(nil), "CCloud_Delete_Request")
	proto.RegisterType((*CCloud_Delete_Response)(nil), "CCloud_Delete_Response")
}

func init() {
	proto.RegisterFile("steammessages_cloud.steamworkssdk.proto", fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90)
}

var fileDescriptor_steammessages_cloud_steamworkssdk_a3b262c06dca0e90 = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0x92, 0x38, 0x6d, 0x26, 0x4a, 0x13, 0x2d, 0x50, 0x56, 0x2e, 0x6d, 0x4e, 0x37, 0x2d,
	0x49, 0x81, 0x8e, 0x4b, 0x51, 0xb9, 0xa0, 0xe2, 0xa2, 0x8e, 0x4b, 0x14, 0xa9, 0x08, 0x69, 0xa3,
	0x08, 0x01, 0x42, 0xd6, 0xd8, 0x7b, 0x6c, 0x0f, 0xd9, 0x9d, 0x59, 0x66, 0x66, 0x9b, 0x50, 0x21,
	0x84, 0x96, 0x67, 0xe0, 0x06, 0xf1, 0x08, 0xdc, 0xee, 0x0d, 0x2f, 0xc1, 0x93, 0xf0, 0x0e, 0x68,
	0x66, 0x77, 0xfd, 0x13, 0x4c, 0x82, 0xb8, 0xb3, 0xcf, 0x9c, 0x9f, 0xef, 0x9c, 0xf3, 0x9d, 0xcf,
	0x26, 0x7b, 0xda, 0x20, 0x4b, 0x53, 0xd4, 0x9a, 0x8d, 0x51, 0xf7, 0x87, 0x89, 0xcc, 0x63, 0xea,
	0x6c, 0x67, 0x52, 0x9d, 0x6a, 0x1d, 0x9f, 0xd2, 0x4c, 0x49, 0x23, 0xdb, 0x74, 0xd1, 0x31, 0x17,
	0x7c, 0xc4, 0x31, 0xee, 0x0f, 0x98, 0xc6, 0x65, 0xfe, 0xe1, 0x29, 0x09, 0x0f, 0x0e, 0x6c, 0xb6,
	0xfe, 0x21, 0x9a, 0x93, 0x2c, 0x91, 0x2c, 0x3e, 0x46, 0xf5, 0x12, 0xd5, 0x91, 0x18, 0xc9, 0x7e,
	0x84, 0xdf, 0xe5, 0xa8, 0x8d, 0xff, 0x9c, 0xb4, 0x58, 0x96, 0xf1, 0x38, 0xf0, 0xc0, 0xdb, 0xdf,
	0xec, 0x76, 0x8a, 0x32, 0x78, 0xef, 0x59, 0x96, 0xc1, 0x51, 0x0f, 0x8c, 0x84, 0xb3, 0x09, 0x1f,
	0x4e, 0x80, 0xc1, 0x88, 0x27, 0x08, 0x67, 0x3c, 0x49, 0x60, 0x80, 0x90, 0xbb, 0x5c, 0x18, 0x83,
	0x91, 0x34, 0xaa, 0xa2, 0xc3, 0x1e, 0xd9, 0xbd, 0xb4, 0x98, 0xce, 0xa4, 0xd0, 0xe8, 0xdf, 0x26,
	0x44, 0x3b, 0x73, 0x3f, 0x57, 0x89, 0x2b, 0xb9, 0x1e, 0xad, 0x57, 0x96, 0x13, 0x95, 0x84, 0xbf,
	0x7a, 0xe4, 0xf6, 0x2c, 0xcd, 0xa7, 0x3c, 0xc1, 0x1e, 0x1a, 0xc6, 0x13, 0x3d, 0x85, 0xdb, 0x25,
	0xad, 0x7c, 0x3c, 0xac, 0xe1, 0xae, 0x76, 0xdf, 0x2f, 0xca, 0x60, 0xff, 0xa8, 0x07, 0x72, 0x04,
	0x66, 0x82, 0xe0, 0x42, 0x2b, 0xb0, 0x46, 0xc2, 0x18, 0x0d, 0xc4, 0x55, 0x3c, 0x8c, 0xa4, 0xa2,
	0x51, 0x15, 0xea, 0x3f, 0x69, 0x5a, 0x7e, 0xcd, 0xb5, 0xbc, 0x53, 0x94, 0xc1, 0xad, 0xa6, 0xe5,
	0x09, 0x56, 0xe1, 0x03, 0x4c, 0xa4, 0x18, 0xeb, 0xf9, 0x16, 0xff, 0xf4, 0xc8, 0x56, 0x0d, 0xee,
	0x44, 0xa3, 0xb2, 0xe8, 0xfc, 0x37, 0x16, 0xa6, 0x57, 0x7b, 0x5a, 0x6b, 0x05, 0xd2, 0x16, 0x58,
	0x6d, 0xca, 0xb6, 0xc9, 0x75, 0x9b, 0x5a, 0xb0, 0x14, 0x83, 0x15, 0xd7, 0xf9, 0xf4, 0xbb, 0xff,
	0x36, 0x59, 0x37, 0x3c, 0x45, 0x6d, 0x58, 0x9a, 0x05, 0xab, 0x2e, 0x6a, 0x66, 0xf0, 0x6f, 0x91,
	0x75, 0xeb, 0xd9, 0xd7, 0xfc, 0x15, 0x06, 0x2d, 0x57, 0xc9, 0x85, 0x1e, 0xf3, 0x57, 0xe8, 0x6f,
	0x93, 0x15, 0x3b, 0xcb, 0x35, 0x97, 0xd1, 0x7e, 0xf4, 0xf7, 0xc8, 0x96, 0xe3, 0x03, 0x8f, 0xfb,
	0x43, 0x85, 0xcc, 0x48, 0x15, 0x5c, 0x03, 0x6f, 0x7f, 0x2d, 0xba, 0x51, 0x9b, 0x0f, 0x2a, 0x6b,
	0xf8, 0x82, 0xdc, 0xf9, 0xb7, 0x69, 0xd7, 0xfb, 0x7a, 0x97, 0x5c, 0xab, 0x27, 0xe8, 0x3a, 0xdc,
	0x78, 0xbc, 0x4d, 0x2f, 0x8c, 0x20, 0x6a, 0x1c, 0xc2, 0x5f, 0x56, 0xc9, 0xdd, 0xfa, 0xf1, 0xb9,
	0xc8, 0x53, 0x54, 0xcc, 0x60, 0xe3, 0x35, 0x5b, 0xe0, 0xd3, 0x45, 0xbe, 0xdd, 0x2f, 0xca, 0xe0,
	0xee, 0x8c, 0x6f, 0xd8, 0x04, 0x4e, 0x37, 0xa1, 0x41, 0x8e, 0x9a, 0x15, 0xf8, 0xbf, 0x7b, 0x64,
	0x1b, 0xcf, 0x0d, 0x8a, 0x18, 0xe3, 0x7e, 0x03, 0xcc, 0x0e, 0xf9, 0x7a, 0xf7, 0x27, 0xaf, 0x28,
	0x83, 0x1f, 0xf6, 0x3f, 0xcf, 0x0c, 0x97, 0x82, 0x25, 0x0f, 0xe0, 0x10, 0x0d, 0x34, 0xbe, 0x53,
	0x1a, 0x0c, 0xd8, 0xf0, 0x14, 0xa4, 0x98, 0xcb, 0x3e, 0x92, 0xb9, 0x88, 0x29, 0xf4, 0x70, 0xc4,
	0xf2, 0xc4, 0xd8, 0x85, 0x83, 0x14, 0xc9, 0xf7, 0xa0, 0xd0, 0xe4, 0x4a, 0x58, 0x92, 0x4f, 0x10,
	0x98, 0x05, 0x18, 0x03, 0x13, 0x31, 0x9c, 0x1c, 0x1e, 0xd8, 0x8f, 0x35, 0xe1, 0xe6, 0x73, 0x44,
	0x5b, 0x4d, 0xb9, 0x7a, 0x8c, 0xfe, 0xcf, 0x1e, 0x69, 0x0d, 0x65, 0x2e, 0x8c, 0xdb, 0xf7, 0x66,
	0x37, 0x2d, 0xca, 0x80, 0xcf, 0x41, 0xfc, 0x8c, 0x9d, 0xf3, 0x34, 0x4f, 0x41, 0xe4, 0xe9, 0x00,
	0x95, 0xcd, 0xa9, 0x50, 0x37, 0x28, 0x2a, 0x00, 0x15, 0x58, 0xae, 0x61, 0xc8, 0x92, 0x64, 0x11,
	0x26, 0x83, 0xb4, 0x8e, 0x97, 0x23, 0x78, 0xf2, 0xe8, 0x51, 0x0d, 0xa6, 0x01, 0x4e, 0xa3, 0xaa,
	0xb6, 0xff, 0x23, 0xd9, 0xd0, 0x86, 0x29, 0xd3, 0xe7, 0x22, 0xc6, 0x73, 0xc7, 0xae, 0xcd, 0xee,
	0x37, 0x45, 0x19, 0x7c, 0x39, 0x07, 0xe5, 0xd8, 0x7a, 0x70, 0x31, 0x06, 0xe7, 0x64, 0xd3, 0x0f,
	0x70, 0xcc, 0xc5, 0x74, 0x21, 0x5c, 0x0a, 0x60, 0x66, 0x11, 0x80, 0x1d, 0x80, 0xf3, 0x12, 0x36,
	0xb0, 0x9e, 0x48, 0xc2, 0xb5, 0xa1, 0x11, 0x71, 0x15, 0x8f, 0x6c, 0xae, 0x30, 0x9d, 0xea, 0xd0,
	0x52, 0x5a, 0xd4, 0x4c, 0x7b, 0x87, 0xb4, 0x1c, 0xfe, 0xc0, 0x83, 0x95, 0xa5, 0x3c, 0xab, 0x9e,
	0xfd, 0x1d, 0xb2, 0x61, 0xa4, 0x61, 0x49, 0xbf, 0xf2, 0x76, 0x27, 0x1c, 0x11, 0x67, 0x72, 0x19,
	0xc3, 0x6f, 0xc9, 0x9b, 0x75, 0x68, 0x0f, 0x13, 0x34, 0x38, 0x65, 0xde, 0xfc, 0xfd, 0x79, 0x17,
	0xee, 0xef, 0x7f, 0x4a, 0x42, 0x40, 0x6e, 0x5e, 0xac, 0x55, 0xb5, 0xf3, 0xf8, 0xaf, 0x55, 0xd2,
	0x72, 0x2f, 0xfe, 0x6f, 0x1e, 0x79, 0x7d, 0x89, 0x26, 0xfa, 0xbb, 0xf4, 0x6a, 0x75, 0x6e, 0xdf,
	0xa3, 0xff, 0x41, 0x55, 0xc3, 0x8f, 0x8b, 0x32, 0xf8, 0x28, 0x72, 0x7b, 0xd7, 0x0e, 0xef, 0x49,
	0xf4, 0xa2, 0xd9, 0x47, 0xa6, 0x64, 0x86, 0x0a, 0xdc, 0xcf, 0x0a, 0x54, 0x4a, 0x6b, 0xc5, 0x10,
	0x18, 0xe4, 0x1a, 0x15, 0xf5, 0xcf, 0xc8, 0x8d, 0xc5, 0xe3, 0xf7, 0xef, 0xd0, 0x4b, 0x25, 0xb8,
	0xbd, 0x43, 0x2f, 0x17, 0x8d, 0xf0, 0x5e, 0x51, 0x06, 0xd0, 0xc0, 0x69, 0x2e, 0xcf, 0xf2, 0x67,
	0x4e, 0x9f, 0xa9, 0xff, 0x87, 0x47, 0xfc, 0x7f, 0x12, 0xc2, 0x0f, 0xe9, 0x95, 0x1a, 0xd2, 0xde,
	0xa5, 0x57, 0x13, 0x2a, 0xfc, 0xba, 0x28, 0x83, 0x2f, 0xa6, 0x0e, 0x7a, 0xae, 0xb6, 0x9e, 0x1b,
	0x80, 0x1d, 0x13, 0x83, 0x31, 0x7f, 0x89, 0xa2, 0xba, 0xf2, 0x1e, 0x9d, 0x42, 0xcf, 0x33, 0xcb,
	0xf2, 0xd9, 0x65, 0x31, 0x03, 0x0c, 0xac, 0x2a, 0x53, 0x3f, 0x26, 0x6b, 0xd5, 0xc6, 0xfd, 0x9b,
	0x74, 0x29, 0xdb, 0xda, 0x6f, 0xd1, 0xe5, 0xcc, 0x08, 0x1f, 0x14, 0x65, 0x70, 0xbf, 0x32, 0xea,
	0xe6, 0x97, 0x75, 0xa4, 0x64, 0xea, 0xb6, 0x65, 0x21, 0xed, 0xe9, 0x6a, 0x5b, 0xb4, 0xed, 0x5c,
	0x9f, 0xb9, 0xad, 0xf1, 0x21, 0x3a, 0xd4, 0xc7, 0x56, 0xc1, 0xeb, 0x5e, 0xec, 0x62, 0xdd, 0x65,
	0x6a, 0xda, 0xfd, 0xe4, 0xab, 0xa7, 0x63, 0x6e, 0x26, 0xf9, 0x80, 0x0e, 0x65, 0xda, 0xf9, 0xe0,
	0xc3, 0xd3, 0xce, 0x58, 0x3e, 0x74, 0x72, 0xff, 0x50, 0xa1, 0x96, 0xb9, 0x1a, 0xa2, 0xee, 0xb8,
	0xff, 0x05, 0x83, 0x7c, 0xd4, 0x71, 0x0f, 0x9d, 0xd9, 0x9f, 0x86, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x23, 0x1e, 0xf9, 0xd4, 0x85, 0x08, 0x00, 0x00,
}
