// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: tf2/tf_gcmessages.proto

package tf2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ETFGCMsg int32

const (
	ETFGCMsg_k_EMsgGCReportWarKill                                  ETFGCMsg = 5001
	ETFGCMsg_k_EMsgGCKickPlayer_DEPRECATED                          ETFGCMsg = 5020
	ETFGCMsg_k_EMsgGCStartedTraining_DEPRECATED                     ETFGCMsg = 5021
	ETFGCMsg_k_EMsgGCFreeTrial_ChooseMostHelpfulFriend              ETFGCMsg = 5022
	ETFGCMsg_k_EMsgGCRequestTF2Friends                              ETFGCMsg = 5023
	ETFGCMsg_k_EMsgGCRequestTF2FriendsResponse                      ETFGCMsg = 5024
	ETFGCMsg_k_EMsgGCReplay_SubmitContestEntry                      ETFGCMsg = 5026
	ETFGCMsg_k_EMsgGCReplay_SubmitContestEntryResponse              ETFGCMsg = 5027
	ETFGCMsg_k_EMsgGCSaxxy_Awarded                                  ETFGCMsg = 5029
	ETFGCMsg_k_EMsgGCFreeTrial_ThankedBySomeone                     ETFGCMsg = 5028
	ETFGCMsg_k_EMsgGCFreeTrial_ThankedSomeone                       ETFGCMsg = 5030
	ETFGCMsg_k_EMsgGCFreeTrial_ConvertedToPremium                   ETFGCMsg = 5031
	ETFGCMsg_k_EMsgGCMeetThePyroSilliness_BananaCraft_DEPRECATED    ETFGCMsg = 5032
	ETFGCMsg_k_EMsgGCMVMARG_HighFiveSuccessResponse_DEPRECATED      ETFGCMsg = 5033
	ETFGCMsg_k_EMsgGCMVMARG_HighFiveOnClient_DEPRECATED             ETFGCMsg = 5034
	ETFGCMsg_k_EMsgGCCoaching_AddToCoaches                          ETFGCMsg = 5200
	ETFGCMsg_k_EMsgGCCoaching_AddToCoachesResponse                  ETFGCMsg = 5201
	ETFGCMsg_k_EMsgGCCoaching_RemoveFromCoaches                     ETFGCMsg = 5202
	ETFGCMsg_k_EMsgGCCoaching_RemoveFromCoachesResponse             ETFGCMsg = 5203
	ETFGCMsg_k_EMsgGCCoaching_FindCoach                             ETFGCMsg = 5204
	ETFGCMsg_k_EMsgGCCoaching_FindCoachResponse                     ETFGCMsg = 5205
	ETFGCMsg_k_EMsgGCCoaching_AskCoach                              ETFGCMsg = 5206
	ETFGCMsg_k_EMsgGCCoaching_AskCoachResponse                      ETFGCMsg = 5207
	ETFGCMsg_k_EMsgGCCoaching_CoachJoinGame                         ETFGCMsg = 5208
	ETFGCMsg_k_EMsgGCCoaching_CoachJoining                          ETFGCMsg = 5209
	ETFGCMsg_k_EMsgGCCoaching_CoachJoined                           ETFGCMsg = 5210
	ETFGCMsg_k_EMsgGCCoaching_LikeCurrentCoach                      ETFGCMsg = 5211
	ETFGCMsg_k_EMsgGCCoaching_RemoveCurrentCoach                    ETFGCMsg = 5212
	ETFGCMsg_k_EMsgGCCoaching_AlreadyRatedCoach                     ETFGCMsg = 5213
	ETFGCMsg_k_EMsgGC_Duel_Request                                  ETFGCMsg = 5500
	ETFGCMsg_k_EMsgGC_Duel_Response                                 ETFGCMsg = 5501
	ETFGCMsg_k_EMsgGC_Duel_Results                                  ETFGCMsg = 5502
	ETFGCMsg_k_EMsgGC_Duel_Status                                   ETFGCMsg = 5503
	ETFGCMsg_k_EMsgGC_Halloween_ReservedItem_DEPRECATED             ETFGCMsg = 5600
	ETFGCMsg_k_EMsgGC_Halloween_GrantItem_DEPRECATED                ETFGCMsg = 5601
	ETFGCMsg_k_EMsgGC_Halloween_GrantItemResponse_DEPRECATED        ETFGCMsg = 5604
	ETFGCMsg_k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED      ETFGCMsg = 5605
	ETFGCMsg_k_EMsgGC_Halloween_ItemClaimed_DEPRECATED              ETFGCMsg = 5606
	ETFGCMsg_k_EMsgGC_Halloween_ReservedItem                        ETFGCMsg = 5607
	ETFGCMsg_k_EMsgGC_Halloween_GrantItem                           ETFGCMsg = 5608
	ETFGCMsg_k_EMsgGC_Halloween_GrantItemResponse                   ETFGCMsg = 5609
	ETFGCMsg_k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED_2    ETFGCMsg = 5610
	ETFGCMsg_k_EMsgGC_Halloween_ItemClaimed_DEPRECATED_2            ETFGCMsg = 5611
	ETFGCMsg_k_EMsgGC_Halloween_ServerBossEvent                     ETFGCMsg = 5612
	ETFGCMsg_k_EMsgGC_Halloween_Merasmus2012                        ETFGCMsg = 5613
	ETFGCMsg_k_EMsgGC_Halloween_UpdateMerasmusLootLevel             ETFGCMsg = 5614
	ETFGCMsg_k_EMsgGC_GameServer_LevelInfo                          ETFGCMsg = 5700
	ETFGCMsg_k_EMsgGC_GameServer_AuthChallenge                      ETFGCMsg = 5701
	ETFGCMsg_k_EMsgGC_GameServer_AuthChallengeResponse              ETFGCMsg = 5702
	ETFGCMsg_k_EMsgGC_GameServer_CreateIdentity                     ETFGCMsg = 5703
	ETFGCMsg_k_EMsgGC_GameServer_CreateIdentityResponse             ETFGCMsg = 5704
	ETFGCMsg_k_EMsgGC_GameServer_List                               ETFGCMsg = 5705
	ETFGCMsg_k_EMsgGC_GameServer_ListResponse                       ETFGCMsg = 5706
	ETFGCMsg_k_EMsgGC_GameServer_AuthResult                         ETFGCMsg = 5707
	ETFGCMsg_k_EMsgGC_GameServer_ResetIdentity                      ETFGCMsg = 5708
	ETFGCMsg_k_EMsgGC_GameServer_ResetIdentityResponse              ETFGCMsg = 5709
	ETFGCMsg_k_EMsgGC_Client_UseServerModificationItem              ETFGCMsg = 5710
	ETFGCMsg_k_EMsgGC_Client_UseServerModificationItem_Response     ETFGCMsg = 5711
	ETFGCMsg_k_EMsgGC_GameServer_UseServerModificationItem          ETFGCMsg = 5712
	ETFGCMsg_k_EMsgGC_GameServer_UseServerModificationItem_Response ETFGCMsg = 5713
	ETFGCMsg_k_EMsgGC_GameServer_ServerModificationItemExpired      ETFGCMsg = 5714
	ETFGCMsg_k_EMsgGC_GameServer_ModificationItemState              ETFGCMsg = 5715
	ETFGCMsg_k_EMsgGC_GameServer_AckPolicy                          ETFGCMsg = 5716
	ETFGCMsg_k_EMsgGC_GameServer_AckPolicyResponse                  ETFGCMsg = 5717
	ETFGCMsg_k_EMsgGC_QP_ScoreServers                               ETFGCMsg = 5800
	ETFGCMsg_k_EMsgGC_QP_ScoreServersResponse                       ETFGCMsg = 5801
	ETFGCMsg_k_EMsgGC_QP_PlayerJoining                              ETFGCMsg = 5802
	ETFGCMsg_k_EMsgGC_PickupItemEligibility_Query_DEPRECATED        ETFGCMsg = 6000
	ETFGCMsg_k_EMsgGC_PickupItemEligibility_Query_DEPRECATED_2      ETFGCMsg = 6001
	ETFGCMsg_k_EMsgGC_IncrementKillCountAttribute_DEPRECATED        ETFGCMsg = 6100
	ETFGCMsg_k_EMsgGC_IncrementKillCountResponse_DEPRECATED         ETFGCMsg = 6101
	ETFGCMsg_k_EMsgGCAbandonCurrentGame                             ETFGCMsg = 6235
	ETFGCMsg_k_EMsgForceSOCacheResend                               ETFGCMsg = 6237
	ETFGCMsg_k_EMsgGCRequestChatChannelList                         ETFGCMsg = 6260
	ETFGCMsg_k_EMsgGCRequestChatChannelListResponse                 ETFGCMsg = 6261
	ETFGCMsg_k_EMsgGCReadyUp                                        ETFGCMsg = 6270
	ETFGCMsg_k_EMsgGCKickedFromMatchmakingQueue                     ETFGCMsg = 6271
	ETFGCMsg_k_EMsgGCLeaverDetected                                 ETFGCMsg = 6272
	ETFGCMsg_k_EMsgGCLeaverDetectedResponse                         ETFGCMsg = 6287
	ETFGCMsg_k_EMsgGCExitMatchmaking                                ETFGCMsg = 6289
	ETFGCMsg_k_EMsgGCMatchmakingProgress                            ETFGCMsg = 6293
	ETFGCMsg_k_EMsgGCMvMVictoryInfo                                 ETFGCMsg = 6294
	ETFGCMsg_k_EMsgGCGameServerMatchmakingStatus                    ETFGCMsg = 6295
	ETFGCMsg_k_EMsgGCMvMVictory                                     ETFGCMsg = 6297
	ETFGCMsg_k_EMsgGCMvMVictoryReply                                ETFGCMsg = 6298
	ETFGCMsg_k_EMsgGCGameServerKickingLobby                         ETFGCMsg = 6299
	ETFGCMsg_k_EMsgGCLeaveGameAndPrepareToJoinParty                 ETFGCMsg = 6300
	ETFGCMsg_k_EMsgGC_UpdatePeriodicEvent                           ETFGCMsg = 6400
	ETFGCMsg_k_EMsgGC_DuckLeaderboard_IndividualUpdate              ETFGCMsg = 6401
	ETFGCMsg_k_EMsgGC_Client2GCEconPreviewDataBlockRequest          ETFGCMsg = 6402
	ETFGCMsg_k_EMsgGC_Client2GCEconPreviewDataBlockResponse         ETFGCMsg = 6403
	ETFGCMsg_k_EMsgGC_ClientVerificationChallenge                   ETFGCMsg = 6500
	ETFGCMsg_k_EMsgGC_ClientVerificationChallengeResponse           ETFGCMsg = 6501
	ETFGCMsg_k_EMsgGC_ClientVerificationVerboseResponse             ETFGCMsg = 6502
	ETFGCMsg_k_EMsgGC_ClientSetItemSlotAttribute                    ETFGCMsg = 6503
	ETFGCMsg_k_EMsgGC_War_IndividualUpdate                          ETFGCMsg = 6505
	ETFGCMsg_k_EMsgGC_War_JoinWar                                   ETFGCMsg = 6506
	ETFGCMsg_k_EMsgGC_War_RequestGlobalStats                        ETFGCMsg = 6507
	ETFGCMsg_k_EMsgGC_War_GlobalStatsResponse                       ETFGCMsg = 6508
	ETFGCMsg_k_EMsgGC_WorldItemPlacement_Attribute                  ETFGCMsg = 6510
	ETFGCMsg_k_EMsgGC_WorldItemPlacement_Update                     ETFGCMsg = 6511
	ETFGCMsg_k_EMsgGC_Match_Result                                  ETFGCMsg = 6512
	ETFGCMsg_k_EMsgGCVoteKickPlayerRequest                          ETFGCMsg = 6513
	ETFGCMsg_k_EMsgGCVoteKickPlayerRequestResponse                  ETFGCMsg = 6514
	ETFGCMsg_k_EMsgGC_DailyCompetitiveStatsRollup                   ETFGCMsg = 6516
	ETFGCMsg_k_EMsgGC_DailyCompetitiveStatsRollup_Response          ETFGCMsg = 6517
	ETFGCMsg_k_EMsgGC_WorldStatusBroadcast                          ETFGCMsg = 6518
	ETFGCMsg_k_EMsgGC_ReportPlayer                                  ETFGCMsg = 6519
	ETFGCMsg_k_EMsgGC_Match_ResultResponse                          ETFGCMsg = 6520
	ETFGCMsg_k_EMsgGCGameServerKickingLobbyResponse                 ETFGCMsg = 6521
	ETFGCMsg_k_EMsgGCPlayerLeftMatch                                ETFGCMsg = 6522
	ETFGCMsg_k_EMsgGCPlayerLeftMatchResponse                        ETFGCMsg = 6523
	ETFGCMsg_k_EMsgGCRequestMatchMakerStats                         ETFGCMsg = 6524
	ETFGCMsg_k_EMsgGCMatchMakerStatsResponse                        ETFGCMsg = 6525
	ETFGCMsg_k_EMsgGCMatchHistoryLoad                               ETFGCMsg = 6526
	ETFGCMsg_k_EMsgGC_AcknowledgeXP                                 ETFGCMsg = 6527
	ETFGCMsg_k_EMsgGCDataCenterPing_Update                          ETFGCMsg = 6528
	ETFGCMsg_k_EMsgGC_NotificationAcknowledge                       ETFGCMsg = 6529
	ETFGCMsg_k_EMsgGC_NotificationAcknowledgeReply                  ETFGCMsg = 6530
	ETFGCMsg_k_EMsgGC_KickPlayerFromLobby                           ETFGCMsg = 6531
	ETFGCMsg_k_EMsgGC_SurveyQuestionRequest                         ETFGCMsg = 6534
	ETFGCMsg_k_EMsgGC_SurveyQuestionResponse                        ETFGCMsg = 6535
	ETFGCMsg_k_EMsgGC_TFClientInit                                  ETFGCMsg = 6536
	ETFGCMsg_k_EMsgGC_NewMatchForLobbyRequest                       ETFGCMsg = 6537
	ETFGCMsg_k_EMsgGC_NewMatchForLobbyResponse                      ETFGCMsg = 6538
	ETFGCMsg_k_EMsgGC_ChangeMatchPlayerTeamsRequest                 ETFGCMsg = 6539
	ETFGCMsg_k_EMsgGC_ChangeMatchPlayerTeamsResponse                ETFGCMsg = 6540
	ETFGCMsg_k_EMsgGC_QuestIdentify                                 ETFGCMsg = 6541
	ETFGCMsg_k_EMsgGC_QuestDevGive                                  ETFGCMsg = 6542
	ETFGCMsg_k_EMsgGCQuestComplete_Debug                            ETFGCMsg = 6544
	ETFGCMsg_k_EMsgGC_QuestMapDebug                                 ETFGCMsg = 6545
	ETFGCMsg_k_EMsgGC_QuestMapUnlockNode                            ETFGCMsg = 6547
	ETFGCMsg_k_EMsgGC_QuestMapPurchaseReward                        ETFGCMsg = 6549
	ETFGCMsg_k_EMsgGC_SetDisablePartyQuestProgress                  ETFGCMsg = 6550
	ETFGCMsg_k_EMsgGCQuestProgressReport                            ETFGCMsg = 6553
	ETFGCMsg_k_EMsgGCParty_SetOptions                               ETFGCMsg = 6554
	ETFGCMsg_k_EMsgGCParty_SetOptionsResponse                       ETFGCMsg = 6555
	ETFGCMsg_k_EMsgGCParty_QueueForMatch                            ETFGCMsg = 6556
	ETFGCMsg_k_EMsgGCParty_QueueForMatchResponse                    ETFGCMsg = 6557
	ETFGCMsg_k_EMsgGCParty_RemoveFromQueue                          ETFGCMsg = 6558
	ETFGCMsg_k_EMsgGCParty_RemoveFromQueueResponse                  ETFGCMsg = 6559
	ETFGCMsg_k_EMsgGCParty_InvitePlayer                             ETFGCMsg = 6560
	ETFGCMsg_k_EMsgGCParty_RequestJoinPlayer                        ETFGCMsg = 6561
	ETFGCMsg_k_EMsgGCParty_SendChat                                 ETFGCMsg = 6562
	ETFGCMsg_k_EMsgGCParty_ChatMsg                                  ETFGCMsg = 6563
	ETFGCMsg_k_EMsgGCQuestNodeTurnIn                                ETFGCMsg = 6564
	ETFGCMsg_k_EMsgGCConsumePaintKit                                ETFGCMsg = 6565
	ETFGCMsg_k_EMsgGC_Painkit_DevGrant                              ETFGCMsg = 6566
	ETFGCMsg_k_EMsgGCParty_QueueForStandby                          ETFGCMsg = 6567
	ETFGCMsg_k_EMsgGCParty_QueueForStandbyResponse                  ETFGCMsg = 6568
	ETFGCMsg_k_EMsgGCParty_RemoveFromStandbyQueue                   ETFGCMsg = 6569
	ETFGCMsg_k_EMsgGCParty_RemoveFromStandbyQueueResponse           ETFGCMsg = 6570
	ETFGCMsg_k_EMsgGCParty_ClearPendingPlayer                       ETFGCMsg = 6571
	ETFGCMsg_k_EMsgGCParty_ClearPendingPlayerResponse               ETFGCMsg = 6572
	ETFGCMsg_k_EMsgGCParty_ClearOtherPartyRequest                   ETFGCMsg = 6573
	ETFGCMsg_k_EMsgGCParty_ClearOtherPartyRequestResponse           ETFGCMsg = 6574
	ETFGCMsg_k_EMsgGCParty_PromoteToLeader                          ETFGCMsg = 6575
	ETFGCMsg_k_EMsgGCParty_KickMember                               ETFGCMsg = 6576
	ETFGCMsg_k_EMsgGCQuestStrangeEvent                              ETFGCMsg = 6577
	ETFGCMsg_k_EMsgGC_AcceptLobbyInvite                             ETFGCMsg = 6578
	ETFGCMsg_k_EMsgGC_AcceptLobbyInviteReply                        ETFGCMsg = 6579
	ETFGCMsg_k_EMsgGC_ProcessMatchVoteKick                          ETFGCMsg = 6581
	ETFGCMsg_k_EMsgGC_ProcessMatchVoteKickResponse                  ETFGCMsg = 6582
	ETFGCMsg_k_EMsgGCDev_GrantWarKill                               ETFGCMsg = 10001
)

// Enum value maps for ETFGCMsg.
var (
	ETFGCMsg_name = map[int32]string{
		5001:  "k_EMsgGCReportWarKill",
		5020:  "k_EMsgGCKickPlayer_DEPRECATED",
		5021:  "k_EMsgGCStartedTraining_DEPRECATED",
		5022:  "k_EMsgGCFreeTrial_ChooseMostHelpfulFriend",
		5023:  "k_EMsgGCRequestTF2Friends",
		5024:  "k_EMsgGCRequestTF2FriendsResponse",
		5026:  "k_EMsgGCReplay_SubmitContestEntry",
		5027:  "k_EMsgGCReplay_SubmitContestEntryResponse",
		5029:  "k_EMsgGCSaxxy_Awarded",
		5028:  "k_EMsgGCFreeTrial_ThankedBySomeone",
		5030:  "k_EMsgGCFreeTrial_ThankedSomeone",
		5031:  "k_EMsgGCFreeTrial_ConvertedToPremium",
		5032:  "k_EMsgGCMeetThePyroSilliness_BananaCraft_DEPRECATED",
		5033:  "k_EMsgGCMVMARG_HighFiveSuccessResponse_DEPRECATED",
		5034:  "k_EMsgGCMVMARG_HighFiveOnClient_DEPRECATED",
		5200:  "k_EMsgGCCoaching_AddToCoaches",
		5201:  "k_EMsgGCCoaching_AddToCoachesResponse",
		5202:  "k_EMsgGCCoaching_RemoveFromCoaches",
		5203:  "k_EMsgGCCoaching_RemoveFromCoachesResponse",
		5204:  "k_EMsgGCCoaching_FindCoach",
		5205:  "k_EMsgGCCoaching_FindCoachResponse",
		5206:  "k_EMsgGCCoaching_AskCoach",
		5207:  "k_EMsgGCCoaching_AskCoachResponse",
		5208:  "k_EMsgGCCoaching_CoachJoinGame",
		5209:  "k_EMsgGCCoaching_CoachJoining",
		5210:  "k_EMsgGCCoaching_CoachJoined",
		5211:  "k_EMsgGCCoaching_LikeCurrentCoach",
		5212:  "k_EMsgGCCoaching_RemoveCurrentCoach",
		5213:  "k_EMsgGCCoaching_AlreadyRatedCoach",
		5500:  "k_EMsgGC_Duel_Request",
		5501:  "k_EMsgGC_Duel_Response",
		5502:  "k_EMsgGC_Duel_Results",
		5503:  "k_EMsgGC_Duel_Status",
		5600:  "k_EMsgGC_Halloween_ReservedItem_DEPRECATED",
		5601:  "k_EMsgGC_Halloween_GrantItem_DEPRECATED",
		5604:  "k_EMsgGC_Halloween_GrantItemResponse_DEPRECATED",
		5605:  "k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED",
		5606:  "k_EMsgGC_Halloween_ItemClaimed_DEPRECATED",
		5607:  "k_EMsgGC_Halloween_ReservedItem",
		5608:  "k_EMsgGC_Halloween_GrantItem",
		5609:  "k_EMsgGC_Halloween_GrantItemResponse",
		5610:  "k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED_2",
		5611:  "k_EMsgGC_Halloween_ItemClaimed_DEPRECATED_2",
		5612:  "k_EMsgGC_Halloween_ServerBossEvent",
		5613:  "k_EMsgGC_Halloween_Merasmus2012",
		5614:  "k_EMsgGC_Halloween_UpdateMerasmusLootLevel",
		5700:  "k_EMsgGC_GameServer_LevelInfo",
		5701:  "k_EMsgGC_GameServer_AuthChallenge",
		5702:  "k_EMsgGC_GameServer_AuthChallengeResponse",
		5703:  "k_EMsgGC_GameServer_CreateIdentity",
		5704:  "k_EMsgGC_GameServer_CreateIdentityResponse",
		5705:  "k_EMsgGC_GameServer_List",
		5706:  "k_EMsgGC_GameServer_ListResponse",
		5707:  "k_EMsgGC_GameServer_AuthResult",
		5708:  "k_EMsgGC_GameServer_ResetIdentity",
		5709:  "k_EMsgGC_GameServer_ResetIdentityResponse",
		5710:  "k_EMsgGC_Client_UseServerModificationItem",
		5711:  "k_EMsgGC_Client_UseServerModificationItem_Response",
		5712:  "k_EMsgGC_GameServer_UseServerModificationItem",
		5713:  "k_EMsgGC_GameServer_UseServerModificationItem_Response",
		5714:  "k_EMsgGC_GameServer_ServerModificationItemExpired",
		5715:  "k_EMsgGC_GameServer_ModificationItemState",
		5716:  "k_EMsgGC_GameServer_AckPolicy",
		5717:  "k_EMsgGC_GameServer_AckPolicyResponse",
		5800:  "k_EMsgGC_QP_ScoreServers",
		5801:  "k_EMsgGC_QP_ScoreServersResponse",
		5802:  "k_EMsgGC_QP_PlayerJoining",
		6000:  "k_EMsgGC_PickupItemEligibility_Query_DEPRECATED",
		6001:  "k_EMsgGC_PickupItemEligibility_Query_DEPRECATED_2",
		6100:  "k_EMsgGC_IncrementKillCountAttribute_DEPRECATED",
		6101:  "k_EMsgGC_IncrementKillCountResponse_DEPRECATED",
		6235:  "k_EMsgGCAbandonCurrentGame",
		6237:  "k_EMsgForceSOCacheResend",
		6260:  "k_EMsgGCRequestChatChannelList",
		6261:  "k_EMsgGCRequestChatChannelListResponse",
		6270:  "k_EMsgGCReadyUp",
		6271:  "k_EMsgGCKickedFromMatchmakingQueue",
		6272:  "k_EMsgGCLeaverDetected",
		6287:  "k_EMsgGCLeaverDetectedResponse",
		6289:  "k_EMsgGCExitMatchmaking",
		6293:  "k_EMsgGCMatchmakingProgress",
		6294:  "k_EMsgGCMvMVictoryInfo",
		6295:  "k_EMsgGCGameServerMatchmakingStatus",
		6297:  "k_EMsgGCMvMVictory",
		6298:  "k_EMsgGCMvMVictoryReply",
		6299:  "k_EMsgGCGameServerKickingLobby",
		6300:  "k_EMsgGCLeaveGameAndPrepareToJoinParty",
		6400:  "k_EMsgGC_UpdatePeriodicEvent",
		6401:  "k_EMsgGC_DuckLeaderboard_IndividualUpdate",
		6402:  "k_EMsgGC_Client2GCEconPreviewDataBlockRequest",
		6403:  "k_EMsgGC_Client2GCEconPreviewDataBlockResponse",
		6500:  "k_EMsgGC_ClientVerificationChallenge",
		6501:  "k_EMsgGC_ClientVerificationChallengeResponse",
		6502:  "k_EMsgGC_ClientVerificationVerboseResponse",
		6503:  "k_EMsgGC_ClientSetItemSlotAttribute",
		6505:  "k_EMsgGC_War_IndividualUpdate",
		6506:  "k_EMsgGC_War_JoinWar",
		6507:  "k_EMsgGC_War_RequestGlobalStats",
		6508:  "k_EMsgGC_War_GlobalStatsResponse",
		6510:  "k_EMsgGC_WorldItemPlacement_Attribute",
		6511:  "k_EMsgGC_WorldItemPlacement_Update",
		6512:  "k_EMsgGC_Match_Result",
		6513:  "k_EMsgGCVoteKickPlayerRequest",
		6514:  "k_EMsgGCVoteKickPlayerRequestResponse",
		6516:  "k_EMsgGC_DailyCompetitiveStatsRollup",
		6517:  "k_EMsgGC_DailyCompetitiveStatsRollup_Response",
		6518:  "k_EMsgGC_WorldStatusBroadcast",
		6519:  "k_EMsgGC_ReportPlayer",
		6520:  "k_EMsgGC_Match_ResultResponse",
		6521:  "k_EMsgGCGameServerKickingLobbyResponse",
		6522:  "k_EMsgGCPlayerLeftMatch",
		6523:  "k_EMsgGCPlayerLeftMatchResponse",
		6524:  "k_EMsgGCRequestMatchMakerStats",
		6525:  "k_EMsgGCMatchMakerStatsResponse",
		6526:  "k_EMsgGCMatchHistoryLoad",
		6527:  "k_EMsgGC_AcknowledgeXP",
		6528:  "k_EMsgGCDataCenterPing_Update",
		6529:  "k_EMsgGC_NotificationAcknowledge",
		6530:  "k_EMsgGC_NotificationAcknowledgeReply",
		6531:  "k_EMsgGC_KickPlayerFromLobby",
		6534:  "k_EMsgGC_SurveyQuestionRequest",
		6535:  "k_EMsgGC_SurveyQuestionResponse",
		6536:  "k_EMsgGC_TFClientInit",
		6537:  "k_EMsgGC_NewMatchForLobbyRequest",
		6538:  "k_EMsgGC_NewMatchForLobbyResponse",
		6539:  "k_EMsgGC_ChangeMatchPlayerTeamsRequest",
		6540:  "k_EMsgGC_ChangeMatchPlayerTeamsResponse",
		6541:  "k_EMsgGC_QuestIdentify",
		6542:  "k_EMsgGC_QuestDevGive",
		6544:  "k_EMsgGCQuestComplete_Debug",
		6545:  "k_EMsgGC_QuestMapDebug",
		6547:  "k_EMsgGC_QuestMapUnlockNode",
		6549:  "k_EMsgGC_QuestMapPurchaseReward",
		6550:  "k_EMsgGC_SetDisablePartyQuestProgress",
		6553:  "k_EMsgGCQuestProgressReport",
		6554:  "k_EMsgGCParty_SetOptions",
		6555:  "k_EMsgGCParty_SetOptionsResponse",
		6556:  "k_EMsgGCParty_QueueForMatch",
		6557:  "k_EMsgGCParty_QueueForMatchResponse",
		6558:  "k_EMsgGCParty_RemoveFromQueue",
		6559:  "k_EMsgGCParty_RemoveFromQueueResponse",
		6560:  "k_EMsgGCParty_InvitePlayer",
		6561:  "k_EMsgGCParty_RequestJoinPlayer",
		6562:  "k_EMsgGCParty_SendChat",
		6563:  "k_EMsgGCParty_ChatMsg",
		6564:  "k_EMsgGCQuestNodeTurnIn",
		6565:  "k_EMsgGCConsumePaintKit",
		6566:  "k_EMsgGC_Painkit_DevGrant",
		6567:  "k_EMsgGCParty_QueueForStandby",
		6568:  "k_EMsgGCParty_QueueForStandbyResponse",
		6569:  "k_EMsgGCParty_RemoveFromStandbyQueue",
		6570:  "k_EMsgGCParty_RemoveFromStandbyQueueResponse",
		6571:  "k_EMsgGCParty_ClearPendingPlayer",
		6572:  "k_EMsgGCParty_ClearPendingPlayerResponse",
		6573:  "k_EMsgGCParty_ClearOtherPartyRequest",
		6574:  "k_EMsgGCParty_ClearOtherPartyRequestResponse",
		6575:  "k_EMsgGCParty_PromoteToLeader",
		6576:  "k_EMsgGCParty_KickMember",
		6577:  "k_EMsgGCQuestStrangeEvent",
		6578:  "k_EMsgGC_AcceptLobbyInvite",
		6579:  "k_EMsgGC_AcceptLobbyInviteReply",
		6581:  "k_EMsgGC_ProcessMatchVoteKick",
		6582:  "k_EMsgGC_ProcessMatchVoteKickResponse",
		10001: "k_EMsgGCDev_GrantWarKill",
	}
	ETFGCMsg_value = map[string]int32{
		"k_EMsgGCReportWarKill":                                  5001,
		"k_EMsgGCKickPlayer_DEPRECATED":                          5020,
		"k_EMsgGCStartedTraining_DEPRECATED":                     5021,
		"k_EMsgGCFreeTrial_ChooseMostHelpfulFriend":              5022,
		"k_EMsgGCRequestTF2Friends":                              5023,
		"k_EMsgGCRequestTF2FriendsResponse":                      5024,
		"k_EMsgGCReplay_SubmitContestEntry":                      5026,
		"k_EMsgGCReplay_SubmitContestEntryResponse":              5027,
		"k_EMsgGCSaxxy_Awarded":                                  5029,
		"k_EMsgGCFreeTrial_ThankedBySomeone":                     5028,
		"k_EMsgGCFreeTrial_ThankedSomeone":                       5030,
		"k_EMsgGCFreeTrial_ConvertedToPremium":                   5031,
		"k_EMsgGCMeetThePyroSilliness_BananaCraft_DEPRECATED":    5032,
		"k_EMsgGCMVMARG_HighFiveSuccessResponse_DEPRECATED":      5033,
		"k_EMsgGCMVMARG_HighFiveOnClient_DEPRECATED":             5034,
		"k_EMsgGCCoaching_AddToCoaches":                          5200,
		"k_EMsgGCCoaching_AddToCoachesResponse":                  5201,
		"k_EMsgGCCoaching_RemoveFromCoaches":                     5202,
		"k_EMsgGCCoaching_RemoveFromCoachesResponse":             5203,
		"k_EMsgGCCoaching_FindCoach":                             5204,
		"k_EMsgGCCoaching_FindCoachResponse":                     5205,
		"k_EMsgGCCoaching_AskCoach":                              5206,
		"k_EMsgGCCoaching_AskCoachResponse":                      5207,
		"k_EMsgGCCoaching_CoachJoinGame":                         5208,
		"k_EMsgGCCoaching_CoachJoining":                          5209,
		"k_EMsgGCCoaching_CoachJoined":                           5210,
		"k_EMsgGCCoaching_LikeCurrentCoach":                      5211,
		"k_EMsgGCCoaching_RemoveCurrentCoach":                    5212,
		"k_EMsgGCCoaching_AlreadyRatedCoach":                     5213,
		"k_EMsgGC_Duel_Request":                                  5500,
		"k_EMsgGC_Duel_Response":                                 5501,
		"k_EMsgGC_Duel_Results":                                  5502,
		"k_EMsgGC_Duel_Status":                                   5503,
		"k_EMsgGC_Halloween_ReservedItem_DEPRECATED":             5600,
		"k_EMsgGC_Halloween_GrantItem_DEPRECATED":                5601,
		"k_EMsgGC_Halloween_GrantItemResponse_DEPRECATED":        5604,
		"k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED":      5605,
		"k_EMsgGC_Halloween_ItemClaimed_DEPRECATED":              5606,
		"k_EMsgGC_Halloween_ReservedItem":                        5607,
		"k_EMsgGC_Halloween_GrantItem":                           5608,
		"k_EMsgGC_Halloween_GrantItemResponse":                   5609,
		"k_EMsgGC_Halloween_Cheat_QueryResponse_DEPRECATED_2":    5610,
		"k_EMsgGC_Halloween_ItemClaimed_DEPRECATED_2":            5611,
		"k_EMsgGC_Halloween_ServerBossEvent":                     5612,
		"k_EMsgGC_Halloween_Merasmus2012":                        5613,
		"k_EMsgGC_Halloween_UpdateMerasmusLootLevel":             5614,
		"k_EMsgGC_GameServer_LevelInfo":                          5700,
		"k_EMsgGC_GameServer_AuthChallenge":                      5701,
		"k_EMsgGC_GameServer_AuthChallengeResponse":              5702,
		"k_EMsgGC_GameServer_CreateIdentity":                     5703,
		"k_EMsgGC_GameServer_CreateIdentityResponse":             5704,
		"k_EMsgGC_GameServer_List":                               5705,
		"k_EMsgGC_GameServer_ListResponse":                       5706,
		"k_EMsgGC_GameServer_AuthResult":                         5707,
		"k_EMsgGC_GameServer_ResetIdentity":                      5708,
		"k_EMsgGC_GameServer_ResetIdentityResponse":              5709,
		"k_EMsgGC_Client_UseServerModificationItem":              5710,
		"k_EMsgGC_Client_UseServerModificationItem_Response":     5711,
		"k_EMsgGC_GameServer_UseServerModificationItem":          5712,
		"k_EMsgGC_GameServer_UseServerModificationItem_Response": 5713,
		"k_EMsgGC_GameServer_ServerModificationItemExpired":      5714,
		"k_EMsgGC_GameServer_ModificationItemState":              5715,
		"k_EMsgGC_GameServer_AckPolicy":                          5716,
		"k_EMsgGC_GameServer_AckPolicyResponse":                  5717,
		"k_EMsgGC_QP_ScoreServers":                               5800,
		"k_EMsgGC_QP_ScoreServersResponse":                       5801,
		"k_EMsgGC_QP_PlayerJoining":                              5802,
		"k_EMsgGC_PickupItemEligibility_Query_DEPRECATED":        6000,
		"k_EMsgGC_PickupItemEligibility_Query_DEPRECATED_2":      6001,
		"k_EMsgGC_IncrementKillCountAttribute_DEPRECATED":        6100,
		"k_EMsgGC_IncrementKillCountResponse_DEPRECATED":         6101,
		"k_EMsgGCAbandonCurrentGame":                             6235,
		"k_EMsgForceSOCacheResend":                               6237,
		"k_EMsgGCRequestChatChannelList":                         6260,
		"k_EMsgGCRequestChatChannelListResponse":                 6261,
		"k_EMsgGCReadyUp":                                        6270,
		"k_EMsgGCKickedFromMatchmakingQueue":                     6271,
		"k_EMsgGCLeaverDetected":                                 6272,
		"k_EMsgGCLeaverDetectedResponse":                         6287,
		"k_EMsgGCExitMatchmaking":                                6289,
		"k_EMsgGCMatchmakingProgress":                            6293,
		"k_EMsgGCMvMVictoryInfo":                                 6294,
		"k_EMsgGCGameServerMatchmakingStatus":                    6295,
		"k_EMsgGCMvMVictory":                                     6297,
		"k_EMsgGCMvMVictoryReply":                                6298,
		"k_EMsgGCGameServerKickingLobby":                         6299,
		"k_EMsgGCLeaveGameAndPrepareToJoinParty":                 6300,
		"k_EMsgGC_UpdatePeriodicEvent":                           6400,
		"k_EMsgGC_DuckLeaderboard_IndividualUpdate":              6401,
		"k_EMsgGC_Client2GCEconPreviewDataBlockRequest":          6402,
		"k_EMsgGC_Client2GCEconPreviewDataBlockResponse":         6403,
		"k_EMsgGC_ClientVerificationChallenge":                   6500,
		"k_EMsgGC_ClientVerificationChallengeResponse":           6501,
		"k_EMsgGC_ClientVerificationVerboseResponse":             6502,
		"k_EMsgGC_ClientSetItemSlotAttribute":                    6503,
		"k_EMsgGC_War_IndividualUpdate":                          6505,
		"k_EMsgGC_War_JoinWar":                                   6506,
		"k_EMsgGC_War_RequestGlobalStats":                        6507,
		"k_EMsgGC_War_GlobalStatsResponse":                       6508,
		"k_EMsgGC_WorldItemPlacement_Attribute":                  6510,
		"k_EMsgGC_WorldItemPlacement_Update":                     6511,
		"k_EMsgGC_Match_Result":                                  6512,
		"k_EMsgGCVoteKickPlayerRequest":                          6513,
		"k_EMsgGCVoteKickPlayerRequestResponse":                  6514,
		"k_EMsgGC_DailyCompetitiveStatsRollup":                   6516,
		"k_EMsgGC_DailyCompetitiveStatsRollup_Response":          6517,
		"k_EMsgGC_WorldStatusBroadcast":                          6518,
		"k_EMsgGC_ReportPlayer":                                  6519,
		"k_EMsgGC_Match_ResultResponse":                          6520,
		"k_EMsgGCGameServerKickingLobbyResponse":                 6521,
		"k_EMsgGCPlayerLeftMatch":                                6522,
		"k_EMsgGCPlayerLeftMatchResponse":                        6523,
		"k_EMsgGCRequestMatchMakerStats":                         6524,
		"k_EMsgGCMatchMakerStatsResponse":                        6525,
		"k_EMsgGCMatchHistoryLoad":                               6526,
		"k_EMsgGC_AcknowledgeXP":                                 6527,
		"k_EMsgGCDataCenterPing_Update":                          6528,
		"k_EMsgGC_NotificationAcknowledge":                       6529,
		"k_EMsgGC_NotificationAcknowledgeReply":                  6530,
		"k_EMsgGC_KickPlayerFromLobby":                           6531,
		"k_EMsgGC_SurveyQuestionRequest":                         6534,
		"k_EMsgGC_SurveyQuestionResponse":                        6535,
		"k_EMsgGC_TFClientInit":                                  6536,
		"k_EMsgGC_NewMatchForLobbyRequest":                       6537,
		"k_EMsgGC_NewMatchForLobbyResponse":                      6538,
		"k_EMsgGC_ChangeMatchPlayerTeamsRequest":                 6539,
		"k_EMsgGC_ChangeMatchPlayerTeamsResponse":                6540,
		"k_EMsgGC_QuestIdentify":                                 6541,
		"k_EMsgGC_QuestDevGive":                                  6542,
		"k_EMsgGCQuestComplete_Debug":                            6544,
		"k_EMsgGC_QuestMapDebug":                                 6545,
		"k_EMsgGC_QuestMapUnlockNode":                            6547,
		"k_EMsgGC_QuestMapPurchaseReward":                        6549,
		"k_EMsgGC_SetDisablePartyQuestProgress":                  6550,
		"k_EMsgGCQuestProgressReport":                            6553,
		"k_EMsgGCParty_SetOptions":                               6554,
		"k_EMsgGCParty_SetOptionsResponse":                       6555,
		"k_EMsgGCParty_QueueForMatch":                            6556,
		"k_EMsgGCParty_QueueForMatchResponse":                    6557,
		"k_EMsgGCParty_RemoveFromQueue":                          6558,
		"k_EMsgGCParty_RemoveFromQueueResponse":                  6559,
		"k_EMsgGCParty_InvitePlayer":                             6560,
		"k_EMsgGCParty_RequestJoinPlayer":                        6561,
		"k_EMsgGCParty_SendChat":                                 6562,
		"k_EMsgGCParty_ChatMsg":                                  6563,
		"k_EMsgGCQuestNodeTurnIn":                                6564,
		"k_EMsgGCConsumePaintKit":                                6565,
		"k_EMsgGC_Painkit_DevGrant":                              6566,
		"k_EMsgGCParty_QueueForStandby":                          6567,
		"k_EMsgGCParty_QueueForStandbyResponse":                  6568,
		"k_EMsgGCParty_RemoveFromStandbyQueue":                   6569,
		"k_EMsgGCParty_RemoveFromStandbyQueueResponse":           6570,
		"k_EMsgGCParty_ClearPendingPlayer":                       6571,
		"k_EMsgGCParty_ClearPendingPlayerResponse":               6572,
		"k_EMsgGCParty_ClearOtherPartyRequest":                   6573,
		"k_EMsgGCParty_ClearOtherPartyRequestResponse":           6574,
		"k_EMsgGCParty_PromoteToLeader":                          6575,
		"k_EMsgGCParty_KickMember":                               6576,
		"k_EMsgGCQuestStrangeEvent":                              6577,
		"k_EMsgGC_AcceptLobbyInvite":                             6578,
		"k_EMsgGC_AcceptLobbyInviteReply":                        6579,
		"k_EMsgGC_ProcessMatchVoteKick":                          6581,
		"k_EMsgGC_ProcessMatchVoteKickResponse":                  6582,
		"k_EMsgGCDev_GrantWarKill":                               10001,
	}
)

func (x ETFGCMsg) Enum() *ETFGCMsg {
	p := new(ETFGCMsg)
	*p = x
	return p
}

func (x ETFGCMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETFGCMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[0].Descriptor()
}

func (ETFGCMsg) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[0]
}

func (x ETFGCMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETFGCMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETFGCMsg(num)
	return nil
}

// Deprecated: Use ETFGCMsg.Descriptor instead.
func (ETFGCMsg) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{0}
}

type EServerModificationItemType int32

const (
	EServerModificationItemType_kGameServerModificationItem_Halloween EServerModificationItemType = 1
)

// Enum value maps for EServerModificationItemType.
var (
	EServerModificationItemType_name = map[int32]string{
		1: "kGameServerModificationItem_Halloween",
	}
	EServerModificationItemType_value = map[string]int32{
		"kGameServerModificationItem_Halloween": 1,
	}
)

func (x EServerModificationItemType) Enum() *EServerModificationItemType {
	p := new(EServerModificationItemType)
	*p = x
	return p
}

func (x EServerModificationItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EServerModificationItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[1].Descriptor()
}

func (EServerModificationItemType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[1]
}

func (x EServerModificationItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EServerModificationItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EServerModificationItemType(num)
	return nil
}

// Deprecated: Use EServerModificationItemType.Descriptor instead.
func (EServerModificationItemType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{1}
}

type ETFSyncedMMMenuStep int32

const (
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_Invalid                ETFSyncedMMMenuStep = -1
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_None                   ETFSyncedMMMenuStep = 0
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_Configuring_Mode       ETFSyncedMMMenuStep = 1
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_MvM_Selecting_Mode     ETFSyncedMMMenuStep = 2
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_MvM_Selecting_Tour     ETFSyncedMMMenuStep = 3
	ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_MvM_Selecting_Missions ETFSyncedMMMenuStep = 4
)

// Enum value maps for ETFSyncedMMMenuStep.
var (
	ETFSyncedMMMenuStep_name = map[int32]string{
		-1: "k_eTFSyncedMMMenuStep_Invalid",
		0:  "k_eTFSyncedMMMenuStep_None",
		1:  "k_eTFSyncedMMMenuStep_Configuring_Mode",
		2:  "k_eTFSyncedMMMenuStep_MvM_Selecting_Mode",
		3:  "k_eTFSyncedMMMenuStep_MvM_Selecting_Tour",
		4:  "k_eTFSyncedMMMenuStep_MvM_Selecting_Missions",
	}
	ETFSyncedMMMenuStep_value = map[string]int32{
		"k_eTFSyncedMMMenuStep_Invalid":                -1,
		"k_eTFSyncedMMMenuStep_None":                   0,
		"k_eTFSyncedMMMenuStep_Configuring_Mode":       1,
		"k_eTFSyncedMMMenuStep_MvM_Selecting_Mode":     2,
		"k_eTFSyncedMMMenuStep_MvM_Selecting_Tour":     3,
		"k_eTFSyncedMMMenuStep_MvM_Selecting_Missions": 4,
	}
)

func (x ETFSyncedMMMenuStep) Enum() *ETFSyncedMMMenuStep {
	p := new(ETFSyncedMMMenuStep)
	*p = x
	return p
}

func (x ETFSyncedMMMenuStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETFSyncedMMMenuStep) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[2].Descriptor()
}

func (ETFSyncedMMMenuStep) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[2]
}

func (x ETFSyncedMMMenuStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETFSyncedMMMenuStep) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETFSyncedMMMenuStep(num)
	return nil
}

// Deprecated: Use ETFSyncedMMMenuStep.Descriptor instead.
func (ETFSyncedMMMenuStep) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{2}
}

type ETFMatchGroup int32

const (
	ETFMatchGroup_k_eTFMatchGroup_Invalid           ETFMatchGroup = -1
	ETFMatchGroup_k_eTFMatchGroup_MvM_Practice      ETFMatchGroup = 0
	ETFMatchGroup_k_eTFMatchGroup_MvM_MannUp        ETFMatchGroup = 1
	ETFMatchGroup_k_eTFMatchGroup_First             ETFMatchGroup = 0
	ETFMatchGroup_k_eTFMatchGroup_MvM_Default       ETFMatchGroup = 0
	ETFMatchGroup_k_eTFMatchGroup_MvM_First         ETFMatchGroup = 0
	ETFMatchGroup_k_eTFMatchGroup_MvM_Last          ETFMatchGroup = 1
	ETFMatchGroup_k_eTFMatchGroup_Ladder_6v6        ETFMatchGroup = 2
	ETFMatchGroup_k_eTFMatchGroup_Ladder_9v9        ETFMatchGroup = 3
	ETFMatchGroup_k_eTFMatchGroup_Ladder_12v12      ETFMatchGroup = 4
	ETFMatchGroup_k_eTFMatchGroup_Ladder_Default    ETFMatchGroup = 2
	ETFMatchGroup_k_eTFMatchGroup_Ladder_First      ETFMatchGroup = 2
	ETFMatchGroup_k_eTFMatchGroup_Ladder_Last       ETFMatchGroup = 4
	ETFMatchGroup_k_eTFMatchGroup_Casual_6v6        ETFMatchGroup = 5
	ETFMatchGroup_k_eTFMatchGroup_Casual_9v9        ETFMatchGroup = 6
	ETFMatchGroup_k_eTFMatchGroup_Casual_12v12      ETFMatchGroup = 7
	ETFMatchGroup_k_eTFMatchGroup_Casual_Default    ETFMatchGroup = 7
	ETFMatchGroup_k_eTFMatchGroup_Casual_First      ETFMatchGroup = 5
	ETFMatchGroup_k_eTFMatchGroup_Casual_Last       ETFMatchGroup = 7
	ETFMatchGroup_k_eTFMatchGroup_Event_Placeholder ETFMatchGroup = 8
	ETFMatchGroup_k_eTFMatchGroup_Event_Default     ETFMatchGroup = 8
	ETFMatchGroup_k_eTFMatchGroup_Event_First       ETFMatchGroup = 8
	ETFMatchGroup_k_eTFMatchGroup_Event_Last        ETFMatchGroup = 8
)

// Enum value maps for ETFMatchGroup.
var (
	ETFMatchGroup_name = map[int32]string{
		-1: "k_eTFMatchGroup_Invalid",
		0:  "k_eTFMatchGroup_MvM_Practice",
		1:  "k_eTFMatchGroup_MvM_MannUp",
		// Duplicate value: 0: "k_eTFMatchGroup_First",
		// Duplicate value: 0: "k_eTFMatchGroup_MvM_Default",
		// Duplicate value: 0: "k_eTFMatchGroup_MvM_First",
		// Duplicate value: 1: "k_eTFMatchGroup_MvM_Last",
		2: "k_eTFMatchGroup_Ladder_6v6",
		3: "k_eTFMatchGroup_Ladder_9v9",
		4: "k_eTFMatchGroup_Ladder_12v12",
		// Duplicate value: 2: "k_eTFMatchGroup_Ladder_Default",
		// Duplicate value: 2: "k_eTFMatchGroup_Ladder_First",
		// Duplicate value: 4: "k_eTFMatchGroup_Ladder_Last",
		5: "k_eTFMatchGroup_Casual_6v6",
		6: "k_eTFMatchGroup_Casual_9v9",
		7: "k_eTFMatchGroup_Casual_12v12",
		// Duplicate value: 7: "k_eTFMatchGroup_Casual_Default",
		// Duplicate value: 5: "k_eTFMatchGroup_Casual_First",
		// Duplicate value: 7: "k_eTFMatchGroup_Casual_Last",
		8: "k_eTFMatchGroup_Event_Placeholder",
		// Duplicate value: 8: "k_eTFMatchGroup_Event_Default",
		// Duplicate value: 8: "k_eTFMatchGroup_Event_First",
		// Duplicate value: 8: "k_eTFMatchGroup_Event_Last",
	}
	ETFMatchGroup_value = map[string]int32{
		"k_eTFMatchGroup_Invalid":           -1,
		"k_eTFMatchGroup_MvM_Practice":      0,
		"k_eTFMatchGroup_MvM_MannUp":        1,
		"k_eTFMatchGroup_First":             0,
		"k_eTFMatchGroup_MvM_Default":       0,
		"k_eTFMatchGroup_MvM_First":         0,
		"k_eTFMatchGroup_MvM_Last":          1,
		"k_eTFMatchGroup_Ladder_6v6":        2,
		"k_eTFMatchGroup_Ladder_9v9":        3,
		"k_eTFMatchGroup_Ladder_12v12":      4,
		"k_eTFMatchGroup_Ladder_Default":    2,
		"k_eTFMatchGroup_Ladder_First":      2,
		"k_eTFMatchGroup_Ladder_Last":       4,
		"k_eTFMatchGroup_Casual_6v6":        5,
		"k_eTFMatchGroup_Casual_9v9":        6,
		"k_eTFMatchGroup_Casual_12v12":      7,
		"k_eTFMatchGroup_Casual_Default":    7,
		"k_eTFMatchGroup_Casual_First":      5,
		"k_eTFMatchGroup_Casual_Last":       7,
		"k_eTFMatchGroup_Event_Placeholder": 8,
		"k_eTFMatchGroup_Event_Default":     8,
		"k_eTFMatchGroup_Event_First":       8,
		"k_eTFMatchGroup_Event_Last":        8,
	}
)

func (x ETFMatchGroup) Enum() *ETFMatchGroup {
	p := new(ETFMatchGroup)
	*p = x
	return p
}

func (x ETFMatchGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETFMatchGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[3].Descriptor()
}

func (ETFMatchGroup) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[3]
}

func (x ETFMatchGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETFMatchGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETFMatchGroup(num)
	return nil
}

// Deprecated: Use ETFMatchGroup.Descriptor instead.
func (ETFMatchGroup) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{3}
}

type ETFPartyChatType int32

const (
	ETFPartyChatType_k_eTFPartyChatType_Invalid                 ETFPartyChatType = 0
	ETFPartyChatType_k_eTFPartyChatType_MemberChat              ETFPartyChatType = 1
	ETFPartyChatType_k_eTFPartyChatType_Synthetic_MemberJoin    ETFPartyChatType = 1000
	ETFPartyChatType_k_eTFPartyChatType_Synthetic_MemberLeave   ETFPartyChatType = 1001
	ETFPartyChatType_k_eTFPartyChatType_Synthetic_SendFailed    ETFPartyChatType = 1002
	ETFPartyChatType_k_eTFPartyChatType_Synthetic_MemberOnline  ETFPartyChatType = 1003
	ETFPartyChatType_k_eTFPartyChatType_Synthetic_MemberOffline ETFPartyChatType = 1004
)

// Enum value maps for ETFPartyChatType.
var (
	ETFPartyChatType_name = map[int32]string{
		0:    "k_eTFPartyChatType_Invalid",
		1:    "k_eTFPartyChatType_MemberChat",
		1000: "k_eTFPartyChatType_Synthetic_MemberJoin",
		1001: "k_eTFPartyChatType_Synthetic_MemberLeave",
		1002: "k_eTFPartyChatType_Synthetic_SendFailed",
		1003: "k_eTFPartyChatType_Synthetic_MemberOnline",
		1004: "k_eTFPartyChatType_Synthetic_MemberOffline",
	}
	ETFPartyChatType_value = map[string]int32{
		"k_eTFPartyChatType_Invalid":                 0,
		"k_eTFPartyChatType_MemberChat":              1,
		"k_eTFPartyChatType_Synthetic_MemberJoin":    1000,
		"k_eTFPartyChatType_Synthetic_MemberLeave":   1001,
		"k_eTFPartyChatType_Synthetic_SendFailed":    1002,
		"k_eTFPartyChatType_Synthetic_MemberOnline":  1003,
		"k_eTFPartyChatType_Synthetic_MemberOffline": 1004,
	}
)

func (x ETFPartyChatType) Enum() *ETFPartyChatType {
	p := new(ETFPartyChatType)
	*p = x
	return p
}

func (x ETFPartyChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETFPartyChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[4].Descriptor()
}

func (ETFPartyChatType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[4]
}

func (x ETFPartyChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETFPartyChatType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETFPartyChatType(num)
	return nil
}

// Deprecated: Use ETFPartyChatType.Descriptor instead.
func (ETFPartyChatType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{4}
}

type TF_GC_GameState int32

const (
	TF_GC_GameState_TF_GC_GAMESTATE_STATE_INIT               TF_GC_GameState = 0
	TF_GC_GameState_TF_GC_GAMESTATE_WAIT_FOR_PLAYERS_TO_LOAD TF_GC_GameState = 1
	TF_GC_GameState_TF_GC_GAMESTATE_STRATEGY_TIME            TF_GC_GameState = 3
	TF_GC_GameState_TF_GC_GAMESTATE_GAME_IN_PROGRESS         TF_GC_GameState = 5
	TF_GC_GameState_TF_GC_GAMESTATE_POST_GAME                TF_GC_GameState = 6
	TF_GC_GameState_TF_GC_GAMESTATE_DISCONNECT               TF_GC_GameState = 7
	TF_GC_GameState_TF_GC_GAMESTATE_LAST                     TF_GC_GameState = 8
)

// Enum value maps for TF_GC_GameState.
var (
	TF_GC_GameState_name = map[int32]string{
		0: "TF_GC_GAMESTATE_STATE_INIT",
		1: "TF_GC_GAMESTATE_WAIT_FOR_PLAYERS_TO_LOAD",
		3: "TF_GC_GAMESTATE_STRATEGY_TIME",
		5: "TF_GC_GAMESTATE_GAME_IN_PROGRESS",
		6: "TF_GC_GAMESTATE_POST_GAME",
		7: "TF_GC_GAMESTATE_DISCONNECT",
		8: "TF_GC_GAMESTATE_LAST",
	}
	TF_GC_GameState_value = map[string]int32{
		"TF_GC_GAMESTATE_STATE_INIT":               0,
		"TF_GC_GAMESTATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
		"TF_GC_GAMESTATE_STRATEGY_TIME":            3,
		"TF_GC_GAMESTATE_GAME_IN_PROGRESS":         5,
		"TF_GC_GAMESTATE_POST_GAME":                6,
		"TF_GC_GAMESTATE_DISCONNECT":               7,
		"TF_GC_GAMESTATE_LAST":                     8,
	}
)

func (x TF_GC_GameState) Enum() *TF_GC_GameState {
	p := new(TF_GC_GameState)
	*p = x
	return p
}

func (x TF_GC_GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TF_GC_GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[5].Descriptor()
}

func (TF_GC_GameState) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[5]
}

func (x TF_GC_GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TF_GC_GameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TF_GC_GameState(num)
	return nil
}

// Deprecated: Use TF_GC_GameState.Descriptor instead.
func (TF_GC_GameState) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{5}
}

type TF_GC_TEAM int32

const (
	TF_GC_TEAM_TF_GC_TEAM_DEFENDERS   TF_GC_TEAM = 0
	TF_GC_TEAM_TF_GC_TEAM_INVADERS    TF_GC_TEAM = 1
	TF_GC_TEAM_TF_GC_TEAM_BROADCASTER TF_GC_TEAM = 2
	TF_GC_TEAM_TF_GC_TEAM_SPECTATOR   TF_GC_TEAM = 3
	TF_GC_TEAM_TF_GC_TEAM_PLAYER_POOL TF_GC_TEAM = 4
	TF_GC_TEAM_TF_GC_TEAM_NOTEAM      TF_GC_TEAM = 5
)

// Enum value maps for TF_GC_TEAM.
var (
	TF_GC_TEAM_name = map[int32]string{
		0: "TF_GC_TEAM_DEFENDERS",
		1: "TF_GC_TEAM_INVADERS",
		2: "TF_GC_TEAM_BROADCASTER",
		3: "TF_GC_TEAM_SPECTATOR",
		4: "TF_GC_TEAM_PLAYER_POOL",
		5: "TF_GC_TEAM_NOTEAM",
	}
	TF_GC_TEAM_value = map[string]int32{
		"TF_GC_TEAM_DEFENDERS":   0,
		"TF_GC_TEAM_INVADERS":    1,
		"TF_GC_TEAM_BROADCASTER": 2,
		"TF_GC_TEAM_SPECTATOR":   3,
		"TF_GC_TEAM_PLAYER_POOL": 4,
		"TF_GC_TEAM_NOTEAM":      5,
	}
)

func (x TF_GC_TEAM) Enum() *TF_GC_TEAM {
	p := new(TF_GC_TEAM)
	*p = x
	return p
}

func (x TF_GC_TEAM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TF_GC_TEAM) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[6].Descriptor()
}

func (TF_GC_TEAM) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[6]
}

func (x TF_GC_TEAM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TF_GC_TEAM) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TF_GC_TEAM(num)
	return nil
}

// Deprecated: Use TF_GC_TEAM.Descriptor instead.
func (TF_GC_TEAM) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{6}
}

type TFMatchLeaveReason int32

const (
	TFMatchLeaveReason_TFMatchLeaveReason_UNSPECIFIED TFMatchLeaveReason = 0
	TFMatchLeaveReason_TFMatchLeaveReason_VOTE_KICK   TFMatchLeaveReason = 1
	TFMatchLeaveReason_TFMatchLeaveReason_IDLE        TFMatchLeaveReason = 2
	TFMatchLeaveReason_TFMatchLeaveReason_ADMIN_KICK  TFMatchLeaveReason = 3
	TFMatchLeaveReason_TFMatchLeaveReason_AWOL        TFMatchLeaveReason = 4
	TFMatchLeaveReason_TFMatchLeaveReason_NO_SHOW     TFMatchLeaveReason = 5
	TFMatchLeaveReason_TFMatchLeaveReason_GC_REMOVED  TFMatchLeaveReason = 6
)

// Enum value maps for TFMatchLeaveReason.
var (
	TFMatchLeaveReason_name = map[int32]string{
		0: "TFMatchLeaveReason_UNSPECIFIED",
		1: "TFMatchLeaveReason_VOTE_KICK",
		2: "TFMatchLeaveReason_IDLE",
		3: "TFMatchLeaveReason_ADMIN_KICK",
		4: "TFMatchLeaveReason_AWOL",
		5: "TFMatchLeaveReason_NO_SHOW",
		6: "TFMatchLeaveReason_GC_REMOVED",
	}
	TFMatchLeaveReason_value = map[string]int32{
		"TFMatchLeaveReason_UNSPECIFIED": 0,
		"TFMatchLeaveReason_VOTE_KICK":   1,
		"TFMatchLeaveReason_IDLE":        2,
		"TFMatchLeaveReason_ADMIN_KICK":  3,
		"TFMatchLeaveReason_AWOL":        4,
		"TFMatchLeaveReason_NO_SHOW":     5,
		"TFMatchLeaveReason_GC_REMOVED":  6,
	}
)

func (x TFMatchLeaveReason) Enum() *TFMatchLeaveReason {
	p := new(TFMatchLeaveReason)
	*p = x
	return p
}

func (x TFMatchLeaveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFMatchLeaveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[7].Descriptor()
}

func (TFMatchLeaveReason) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[7]
}

func (x TFMatchLeaveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TFMatchLeaveReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TFMatchLeaveReason(num)
	return nil
}

// Deprecated: Use TFMatchLeaveReason.Descriptor instead.
func (TFMatchLeaveReason) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{7}
}

type TFVoteKickReason int32

const (
	TFVoteKickReason_TFVoteKickReason_Other    TFVoteKickReason = 0
	TFVoteKickReason_TFVoteKickReason_Cheating TFVoteKickReason = 1
	TFVoteKickReason_TFVoteKickReason_Idle     TFVoteKickReason = 2
	TFVoteKickReason_TFVoteKickReason_Scamming TFVoteKickReason = 3
)

// Enum value maps for TFVoteKickReason.
var (
	TFVoteKickReason_name = map[int32]string{
		0: "TFVoteKickReason_Other",
		1: "TFVoteKickReason_Cheating",
		2: "TFVoteKickReason_Idle",
		3: "TFVoteKickReason_Scamming",
	}
	TFVoteKickReason_value = map[string]int32{
		"TFVoteKickReason_Other":    0,
		"TFVoteKickReason_Cheating": 1,
		"TFVoteKickReason_Idle":     2,
		"TFVoteKickReason_Scamming": 3,
	}
)

func (x TFVoteKickReason) Enum() *TFVoteKickReason {
	p := new(TFVoteKickReason)
	*p = x
	return p
}

func (x TFVoteKickReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFVoteKickReason) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[8].Descriptor()
}

func (TFVoteKickReason) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[8]
}

func (x TFVoteKickReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TFVoteKickReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TFVoteKickReason(num)
	return nil
}

// Deprecated: Use TFVoteKickReason.Descriptor instead.
func (TFVoteKickReason) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{8}
}

type ServerMatchmakingState int32

const (
	ServerMatchmakingState_ServerMatchmakingState_INVALID                           ServerMatchmakingState = 0
	ServerMatchmakingState_ServerMatchmakingState_NOT_PARTICIPATING                 ServerMatchmakingState = 1
	ServerMatchmakingState_ServerMatchmakingState_EMPTY                             ServerMatchmakingState = 2
	ServerMatchmakingState_ServerMatchmakingState_ACTIVE_MATCH_REQUESTING_LATE_JOIN ServerMatchmakingState = 3
	ServerMatchmakingState_ServerMatchmakingState_ACTIVE_MATCH                      ServerMatchmakingState = 4
)

// Enum value maps for ServerMatchmakingState.
var (
	ServerMatchmakingState_name = map[int32]string{
		0: "ServerMatchmakingState_INVALID",
		1: "ServerMatchmakingState_NOT_PARTICIPATING",
		2: "ServerMatchmakingState_EMPTY",
		3: "ServerMatchmakingState_ACTIVE_MATCH_REQUESTING_LATE_JOIN",
		4: "ServerMatchmakingState_ACTIVE_MATCH",
	}
	ServerMatchmakingState_value = map[string]int32{
		"ServerMatchmakingState_INVALID":                           0,
		"ServerMatchmakingState_NOT_PARTICIPATING":                 1,
		"ServerMatchmakingState_EMPTY":                             2,
		"ServerMatchmakingState_ACTIVE_MATCH_REQUESTING_LATE_JOIN": 3,
		"ServerMatchmakingState_ACTIVE_MATCH":                      4,
	}
)

func (x ServerMatchmakingState) Enum() *ServerMatchmakingState {
	p := new(ServerMatchmakingState)
	*p = x
	return p
}

func (x ServerMatchmakingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMatchmakingState) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[9].Descriptor()
}

func (ServerMatchmakingState) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[9]
}

func (x ServerMatchmakingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServerMatchmakingState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServerMatchmakingState(num)
	return nil
}

// Deprecated: Use ServerMatchmakingState.Descriptor instead.
func (ServerMatchmakingState) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{9}
}

type SurveyQuestionType int32

const (
	SurveyQuestionType_QUESTION_MATCH_QUALITY  SurveyQuestionType = 0
	SurveyQuestionType_QUESTION_MAP_QUALITY    SurveyQuestionType = 1
	SurveyQuestionType_QUESTION_COMP_INQUIRY   SurveyQuestionType = 2
	SurveyQuestionType_QUESTION_CASUAL_INQUIRY SurveyQuestionType = 3
	SurveyQuestionType_QUESTION_RANDOM_CRIT    SurveyQuestionType = 4
)

// Enum value maps for SurveyQuestionType.
var (
	SurveyQuestionType_name = map[int32]string{
		0: "QUESTION_MATCH_QUALITY",
		1: "QUESTION_MAP_QUALITY",
		2: "QUESTION_COMP_INQUIRY",
		3: "QUESTION_CASUAL_INQUIRY",
		4: "QUESTION_RANDOM_CRIT",
	}
	SurveyQuestionType_value = map[string]int32{
		"QUESTION_MATCH_QUALITY":  0,
		"QUESTION_MAP_QUALITY":    1,
		"QUESTION_COMP_INQUIRY":   2,
		"QUESTION_CASUAL_INQUIRY": 3,
		"QUESTION_RANDOM_CRIT":    4,
	}
)

func (x SurveyQuestionType) Enum() *SurveyQuestionType {
	p := new(SurveyQuestionType)
	*p = x
	return p
}

func (x SurveyQuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyQuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[10].Descriptor()
}

func (SurveyQuestionType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[10]
}

func (x SurveyQuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SurveyQuestionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SurveyQuestionType(num)
	return nil
}

// Deprecated: Use SurveyQuestionType.Descriptor instead.
func (SurveyQuestionType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{10}
}

type CMsgGC_GameServer_CreateIdentityResponse_EStatus int32

const (
	CMsgGC_GameServer_CreateIdentityResponse_kStatus_GenericFailure CMsgGC_GameServer_CreateIdentityResponse_EStatus = 0
	CMsgGC_GameServer_CreateIdentityResponse_kStatus_TooMany        CMsgGC_GameServer_CreateIdentityResponse_EStatus = -1
	CMsgGC_GameServer_CreateIdentityResponse_kStatus_NoPrivs        CMsgGC_GameServer_CreateIdentityResponse_EStatus = -2
	CMsgGC_GameServer_CreateIdentityResponse_kStatus_Created        CMsgGC_GameServer_CreateIdentityResponse_EStatus = 1
)

// Enum value maps for CMsgGC_GameServer_CreateIdentityResponse_EStatus.
var (
	CMsgGC_GameServer_CreateIdentityResponse_EStatus_name = map[int32]string{
		0:  "kStatus_GenericFailure",
		-1: "kStatus_TooMany",
		-2: "kStatus_NoPrivs",
		1:  "kStatus_Created",
	}
	CMsgGC_GameServer_CreateIdentityResponse_EStatus_value = map[string]int32{
		"kStatus_GenericFailure": 0,
		"kStatus_TooMany":        -1,
		"kStatus_NoPrivs":        -2,
		"kStatus_Created":        1,
	}
)

func (x CMsgGC_GameServer_CreateIdentityResponse_EStatus) Enum() *CMsgGC_GameServer_CreateIdentityResponse_EStatus {
	p := new(CMsgGC_GameServer_CreateIdentityResponse_EStatus)
	*p = x
	return p
}

func (x CMsgGC_GameServer_CreateIdentityResponse_EStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGC_GameServer_CreateIdentityResponse_EStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[11].Descriptor()
}

func (CMsgGC_GameServer_CreateIdentityResponse_EStatus) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[11]
}

func (x CMsgGC_GameServer_CreateIdentityResponse_EStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGC_GameServer_CreateIdentityResponse_EStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGC_GameServer_CreateIdentityResponse_EStatus(num)
	return nil
}

// Deprecated: Use CMsgGC_GameServer_CreateIdentityResponse_EStatus.Descriptor instead.
func (CMsgGC_GameServer_CreateIdentityResponse_EStatus) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{36, 0}
}

type CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse int32

const (
	CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_AlreadyInUse             CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse = 1
	CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_NotOnAuthenticatedServer CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse = 2
	CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_ServerReject             CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse = 3
	CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_InternalError            CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse = 4
	CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_EventAlreadyActive       CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse = 5
)

// Enum value maps for CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse.
var (
	CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_name = map[int32]string{
		1: "kServerModificationItemResponse_AlreadyInUse",
		2: "kServerModificationItemResponse_NotOnAuthenticatedServer",
		3: "kServerModificationItemResponse_ServerReject",
		4: "kServerModificationItemResponse_InternalError",
		5: "kServerModificationItemResponse_EventAlreadyActive",
	}
	CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_value = map[string]int32{
		"kServerModificationItemResponse_AlreadyInUse":             1,
		"kServerModificationItemResponse_NotOnAuthenticatedServer": 2,
		"kServerModificationItemResponse_ServerReject":             3,
		"kServerModificationItemResponse_InternalError":            4,
		"kServerModificationItemResponse_EventAlreadyActive":       5,
	}
)

func (x CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) Enum() *CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse {
	p := new(CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse)
	*p = x
	return p
}

func (x CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[12].Descriptor()
}

func (CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[12]
}

func (x CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse(num)
	return nil
}

// Deprecated: Use CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse.Descriptor instead.
func (CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{44, 0}
}

type CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse int32

const (
	CMsgGC_GameServer_UseServerModificationItem_Response_kServerModificationItemServerResponse_Accepted     CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse = 1
	CMsgGC_GameServer_UseServerModificationItem_Response_kServerModificationItemServerResponse_NoVoteCalled CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse = 2
	CMsgGC_GameServer_UseServerModificationItem_Response_kServerModificationItemServerResponse_VoteFailed   CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse = 3
)

// Enum value maps for CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse.
var (
	CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_name = map[int32]string{
		1: "kServerModificationItemServerResponse_Accepted",
		2: "kServerModificationItemServerResponse_NoVoteCalled",
		3: "kServerModificationItemServerResponse_VoteFailed",
	}
	CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_value = map[string]int32{
		"kServerModificationItemServerResponse_Accepted":     1,
		"kServerModificationItemServerResponse_NoVoteCalled": 2,
		"kServerModificationItemServerResponse_VoteFailed":   3,
	}
)

func (x CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) Enum() *CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse {
	p := new(CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse)
	*p = x
	return p
}

func (x CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[13].Descriptor()
}

func (CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[13]
}

func (x CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse(num)
	return nil
}

// Deprecated: Use CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse.Descriptor instead.
func (CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{46, 0}
}

type TFPendingPartyMember_EType int32

const (
	TFPendingPartyMember_Invited         TFPendingPartyMember_EType = 0
	TFPendingPartyMember_RequestedToJoin TFPendingPartyMember_EType = 1
)

// Enum value maps for TFPendingPartyMember_EType.
var (
	TFPendingPartyMember_EType_name = map[int32]string{
		0: "Invited",
		1: "RequestedToJoin",
	}
	TFPendingPartyMember_EType_value = map[string]int32{
		"Invited":         0,
		"RequestedToJoin": 1,
	}
)

func (x TFPendingPartyMember_EType) Enum() *TFPendingPartyMember_EType {
	p := new(TFPendingPartyMember_EType)
	*p = x
	return p
}

func (x TFPendingPartyMember_EType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TFPendingPartyMember_EType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[14].Descriptor()
}

func (TFPendingPartyMember_EType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[14]
}

func (x TFPendingPartyMember_EType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TFPendingPartyMember_EType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TFPendingPartyMember_EType(num)
	return nil
}

// Deprecated: Use TFPendingPartyMember_EType.Descriptor instead.
func (TFPendingPartyMember_EType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{56, 0}
}

type CSOTFPartyInvite_Type int32

const (
	CSOTFPartyInvite_PENDING_INVITE       CSOTFPartyInvite_Type = 1
	CSOTFPartyInvite_PENDING_JOIN_REQUEST CSOTFPartyInvite_Type = 2
)

// Enum value maps for CSOTFPartyInvite_Type.
var (
	CSOTFPartyInvite_Type_name = map[int32]string{
		1: "PENDING_INVITE",
		2: "PENDING_JOIN_REQUEST",
	}
	CSOTFPartyInvite_Type_value = map[string]int32{
		"PENDING_INVITE":       1,
		"PENDING_JOIN_REQUEST": 2,
	}
)

func (x CSOTFPartyInvite_Type) Enum() *CSOTFPartyInvite_Type {
	p := new(CSOTFPartyInvite_Type)
	*p = x
	return p
}

func (x CSOTFPartyInvite_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOTFPartyInvite_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[15].Descriptor()
}

func (CSOTFPartyInvite_Type) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[15]
}

func (x CSOTFPartyInvite_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOTFPartyInvite_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOTFPartyInvite_Type(num)
	return nil
}

// Deprecated: Use CSOTFPartyInvite_Type.Descriptor instead.
func (CSOTFPartyInvite_Type) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{83, 0}
}

type CTFLobbyPlayerProto_ConnectState int32

const (
	CTFLobbyPlayerProto_INVALID             CTFLobbyPlayerProto_ConnectState = 0
	CTFLobbyPlayerProto_RESERVATION_PENDING CTFLobbyPlayerProto_ConnectState = 1
	CTFLobbyPlayerProto_RESERVED            CTFLobbyPlayerProto_ConnectState = 2
	CTFLobbyPlayerProto_CONNECTED           CTFLobbyPlayerProto_ConnectState = 3
	CTFLobbyPlayerProto_DISCONNECTED        CTFLobbyPlayerProto_ConnectState = 5
)

// Enum value maps for CTFLobbyPlayerProto_ConnectState.
var (
	CTFLobbyPlayerProto_ConnectState_name = map[int32]string{
		0: "INVALID",
		1: "RESERVATION_PENDING",
		2: "RESERVED",
		3: "CONNECTED",
		5: "DISCONNECTED",
	}
	CTFLobbyPlayerProto_ConnectState_value = map[string]int32{
		"INVALID":             0,
		"RESERVATION_PENDING": 1,
		"RESERVED":            2,
		"CONNECTED":           3,
		"DISCONNECTED":        5,
	}
)

func (x CTFLobbyPlayerProto_ConnectState) Enum() *CTFLobbyPlayerProto_ConnectState {
	p := new(CTFLobbyPlayerProto_ConnectState)
	*p = x
	return p
}

func (x CTFLobbyPlayerProto_ConnectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CTFLobbyPlayerProto_ConnectState) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[16].Descriptor()
}

func (CTFLobbyPlayerProto_ConnectState) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[16]
}

func (x CTFLobbyPlayerProto_ConnectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CTFLobbyPlayerProto_ConnectState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CTFLobbyPlayerProto_ConnectState(num)
	return nil
}

// Deprecated: Use CTFLobbyPlayerProto_ConnectState.Descriptor instead.
func (CTFLobbyPlayerProto_ConnectState) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{84, 0}
}

type CTFLobbyPlayerProto_Type int32

const (
	CTFLobbyPlayerProto_INVALID_PLAYER   CTFLobbyPlayerProto_Type = 0
	CTFLobbyPlayerProto_MATCH_PLAYER     CTFLobbyPlayerProto_Type = 1
	CTFLobbyPlayerProto_STANDBY_PLAYER   CTFLobbyPlayerProto_Type = 2
	CTFLobbyPlayerProto_OBSERVING_PLAYER CTFLobbyPlayerProto_Type = 3
)

// Enum value maps for CTFLobbyPlayerProto_Type.
var (
	CTFLobbyPlayerProto_Type_name = map[int32]string{
		0: "INVALID_PLAYER",
		1: "MATCH_PLAYER",
		2: "STANDBY_PLAYER",
		3: "OBSERVING_PLAYER",
	}
	CTFLobbyPlayerProto_Type_value = map[string]int32{
		"INVALID_PLAYER":   0,
		"MATCH_PLAYER":     1,
		"STANDBY_PLAYER":   2,
		"OBSERVING_PLAYER": 3,
	}
)

func (x CTFLobbyPlayerProto_Type) Enum() *CTFLobbyPlayerProto_Type {
	p := new(CTFLobbyPlayerProto_Type)
	*p = x
	return p
}

func (x CTFLobbyPlayerProto_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CTFLobbyPlayerProto_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[17].Descriptor()
}

func (CTFLobbyPlayerProto_Type) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[17]
}

func (x CTFLobbyPlayerProto_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CTFLobbyPlayerProto_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CTFLobbyPlayerProto_Type(num)
	return nil
}

// Deprecated: Use CTFLobbyPlayerProto_Type.Descriptor instead.
func (CTFLobbyPlayerProto_Type) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{84, 1}
}

type CSOTFGameServerLobby_State int32

const (
	CSOTFGameServerLobby_UNKNOWN     CSOTFGameServerLobby_State = 0
	CSOTFGameServerLobby_SERVERSETUP CSOTFGameServerLobby_State = 1
	CSOTFGameServerLobby_RUN         CSOTFGameServerLobby_State = 2
)

// Enum value maps for CSOTFGameServerLobby_State.
var (
	CSOTFGameServerLobby_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVERSETUP",
		2: "RUN",
	}
	CSOTFGameServerLobby_State_value = map[string]int32{
		"UNKNOWN":     0,
		"SERVERSETUP": 1,
		"RUN":         2,
	}
)

func (x CSOTFGameServerLobby_State) Enum() *CSOTFGameServerLobby_State {
	p := new(CSOTFGameServerLobby_State)
	*p = x
	return p
}

func (x CSOTFGameServerLobby_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOTFGameServerLobby_State) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[18].Descriptor()
}

func (CSOTFGameServerLobby_State) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[18]
}

func (x CSOTFGameServerLobby_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOTFGameServerLobby_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOTFGameServerLobby_State(num)
	return nil
}

// Deprecated: Use CSOTFGameServerLobby_State.Descriptor instead.
func (CSOTFGameServerLobby_State) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{86, 0}
}

type CSOTFGameServerLobby_WarMatch int32

const (
	CSOTFGameServerLobby_NOPE               CSOTFGameServerLobby_WarMatch = 0
	CSOTFGameServerLobby_INVADERS_ARE_PYRO  CSOTFGameServerLobby_WarMatch = 1
	CSOTFGameServerLobby_INVADERS_ARE_HEAVY CSOTFGameServerLobby_WarMatch = 2
)

// Enum value maps for CSOTFGameServerLobby_WarMatch.
var (
	CSOTFGameServerLobby_WarMatch_name = map[int32]string{
		0: "NOPE",
		1: "INVADERS_ARE_PYRO",
		2: "INVADERS_ARE_HEAVY",
	}
	CSOTFGameServerLobby_WarMatch_value = map[string]int32{
		"NOPE":               0,
		"INVADERS_ARE_PYRO":  1,
		"INVADERS_ARE_HEAVY": 2,
	}
)

func (x CSOTFGameServerLobby_WarMatch) Enum() *CSOTFGameServerLobby_WarMatch {
	p := new(CSOTFGameServerLobby_WarMatch)
	*p = x
	return p
}

func (x CSOTFGameServerLobby_WarMatch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOTFGameServerLobby_WarMatch) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[19].Descriptor()
}

func (CSOTFGameServerLobby_WarMatch) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[19]
}

func (x CSOTFGameServerLobby_WarMatch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOTFGameServerLobby_WarMatch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOTFGameServerLobby_WarMatch(num)
	return nil
}

// Deprecated: Use CSOTFGameServerLobby_WarMatch.Descriptor instead.
func (CSOTFGameServerLobby_WarMatch) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{86, 1}
}

type CMsgGameServerMatchmakingStatus_PlayerConnectState int32

const (
	CMsgGameServerMatchmakingStatus_INVALID   CMsgGameServerMatchmakingStatus_PlayerConnectState = 0
	CMsgGameServerMatchmakingStatus_CONNECTED CMsgGameServerMatchmakingStatus_PlayerConnectState = 1
	CMsgGameServerMatchmakingStatus_RESERVED  CMsgGameServerMatchmakingStatus_PlayerConnectState = 2
)

// Enum value maps for CMsgGameServerMatchmakingStatus_PlayerConnectState.
var (
	CMsgGameServerMatchmakingStatus_PlayerConnectState_name = map[int32]string{
		0: "INVALID",
		1: "CONNECTED",
		2: "RESERVED",
	}
	CMsgGameServerMatchmakingStatus_PlayerConnectState_value = map[string]int32{
		"INVALID":   0,
		"CONNECTED": 1,
		"RESERVED":  2,
	}
)

func (x CMsgGameServerMatchmakingStatus_PlayerConnectState) Enum() *CMsgGameServerMatchmakingStatus_PlayerConnectState {
	p := new(CMsgGameServerMatchmakingStatus_PlayerConnectState)
	*p = x
	return p
}

func (x CMsgGameServerMatchmakingStatus_PlayerConnectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerMatchmakingStatus_PlayerConnectState) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[20].Descriptor()
}

func (CMsgGameServerMatchmakingStatus_PlayerConnectState) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[20]
}

func (x CMsgGameServerMatchmakingStatus_PlayerConnectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerMatchmakingStatus_PlayerConnectState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerMatchmakingStatus_PlayerConnectState(num)
	return nil
}

// Deprecated: Use CMsgGameServerMatchmakingStatus_PlayerConnectState.Descriptor instead.
func (CMsgGameServerMatchmakingStatus_PlayerConnectState) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{93, 0}
}

type CMsgGameServerMatchmakingStatus_Event int32

const (
	CMsgGameServerMatchmakingStatus_None               CMsgGameServerMatchmakingStatus_Event = 0
	CMsgGameServerMatchmakingStatus_MvMVictory         CMsgGameServerMatchmakingStatus_Event = 1
	CMsgGameServerMatchmakingStatus_MvMDefeat          CMsgGameServerMatchmakingStatus_Event = 2
	CMsgGameServerMatchmakingStatus_AcknowledgePlayers CMsgGameServerMatchmakingStatus_Event = 3
)

// Enum value maps for CMsgGameServerMatchmakingStatus_Event.
var (
	CMsgGameServerMatchmakingStatus_Event_name = map[int32]string{
		0: "None",
		1: "MvMVictory",
		2: "MvMDefeat",
		3: "AcknowledgePlayers",
	}
	CMsgGameServerMatchmakingStatus_Event_value = map[string]int32{
		"None":               0,
		"MvMVictory":         1,
		"MvMDefeat":          2,
		"AcknowledgePlayers": 3,
	}
)

func (x CMsgGameServerMatchmakingStatus_Event) Enum() *CMsgGameServerMatchmakingStatus_Event {
	p := new(CMsgGameServerMatchmakingStatus_Event)
	*p = x
	return p
}

func (x CMsgGameServerMatchmakingStatus_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameServerMatchmakingStatus_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[21].Descriptor()
}

func (CMsgGameServerMatchmakingStatus_Event) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[21]
}

func (x CMsgGameServerMatchmakingStatus_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameServerMatchmakingStatus_Event) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameServerMatchmakingStatus_Event(num)
	return nil
}

// Deprecated: Use CMsgGameServerMatchmakingStatus_Event.Descriptor instead.
func (CMsgGameServerMatchmakingStatus_Event) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{93, 1}
}

type CMsgMvMVictoryInfo_GrantReason int32

const (
	CMsgMvMVictoryInfo_INVALID       CMsgMvMVictoryInfo_GrantReason = 0
	CMsgMvMVictoryInfo_BADGE_LEVELED CMsgMvMVictoryInfo_GrantReason = 1
	CMsgMvMVictoryInfo_SQUAD_SURPLUS CMsgMvMVictoryInfo_GrantReason = 2
	CMsgMvMVictoryInfo_MANN_UP       CMsgMvMVictoryInfo_GrantReason = 3
	CMsgMvMVictoryInfo_HELP_A_NOOB   CMsgMvMVictoryInfo_GrantReason = 4
)

// Enum value maps for CMsgMvMVictoryInfo_GrantReason.
var (
	CMsgMvMVictoryInfo_GrantReason_name = map[int32]string{
		0: "INVALID",
		1: "BADGE_LEVELED",
		2: "SQUAD_SURPLUS",
		3: "MANN_UP",
		4: "HELP_A_NOOB",
	}
	CMsgMvMVictoryInfo_GrantReason_value = map[string]int32{
		"INVALID":       0,
		"BADGE_LEVELED": 1,
		"SQUAD_SURPLUS": 2,
		"MANN_UP":       3,
		"HELP_A_NOOB":   4,
	}
)

func (x CMsgMvMVictoryInfo_GrantReason) Enum() *CMsgMvMVictoryInfo_GrantReason {
	p := new(CMsgMvMVictoryInfo_GrantReason)
	*p = x
	return p
}

func (x CMsgMvMVictoryInfo_GrantReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMvMVictoryInfo_GrantReason) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[22].Descriptor()
}

func (CMsgMvMVictoryInfo_GrantReason) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[22]
}

func (x CMsgMvMVictoryInfo_GrantReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMvMVictoryInfo_GrantReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMvMVictoryInfo_GrantReason(num)
	return nil
}

// Deprecated: Use CMsgMvMVictoryInfo_GrantReason.Descriptor instead.
func (CMsgMvMVictoryInfo_GrantReason) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{95, 0}
}

type CMsgTFXPSource_XPSourceType int32

const (
	CMsgTFXPSource_SOURCE_SCORE               CMsgTFXPSource_XPSourceType = 0
	CMsgTFXPSource_SOURCE_OBJECTIVE_BONUS     CMsgTFXPSource_XPSourceType = 1
	CMsgTFXPSource_SOURCE_COMPLETED_MATCH     CMsgTFXPSource_XPSourceType = 2
	CMsgTFXPSource_SOURCE_COMPETITIVE_ABANDON CMsgTFXPSource_XPSourceType = 3
	CMsgTFXPSource_SOURCE_COMPETITIVE_WIN     CMsgTFXPSource_XPSourceType = 4
	CMsgTFXPSource_SOURCE_COMPETITIVE_LOSS    CMsgTFXPSource_XPSourceType = 5
	CMsgTFXPSource_SOURCE_AUTOBALANCE_BONUS   CMsgTFXPSource_XPSourceType = 6
	CMsgTFXPSource_SOURCE_PRESTIGE_BONUS      CMsgTFXPSource_XPSourceType = 7
)

// Enum value maps for CMsgTFXPSource_XPSourceType.
var (
	CMsgTFXPSource_XPSourceType_name = map[int32]string{
		0: "SOURCE_SCORE",
		1: "SOURCE_OBJECTIVE_BONUS",
		2: "SOURCE_COMPLETED_MATCH",
		3: "SOURCE_COMPETITIVE_ABANDON",
		4: "SOURCE_COMPETITIVE_WIN",
		5: "SOURCE_COMPETITIVE_LOSS",
		6: "SOURCE_AUTOBALANCE_BONUS",
		7: "SOURCE_PRESTIGE_BONUS",
	}
	CMsgTFXPSource_XPSourceType_value = map[string]int32{
		"SOURCE_SCORE":               0,
		"SOURCE_OBJECTIVE_BONUS":     1,
		"SOURCE_COMPLETED_MATCH":     2,
		"SOURCE_COMPETITIVE_ABANDON": 3,
		"SOURCE_COMPETITIVE_WIN":     4,
		"SOURCE_COMPETITIVE_LOSS":    5,
		"SOURCE_AUTOBALANCE_BONUS":   6,
		"SOURCE_PRESTIGE_BONUS":      7,
	}
)

func (x CMsgTFXPSource_XPSourceType) Enum() *CMsgTFXPSource_XPSourceType {
	p := new(CMsgTFXPSource_XPSourceType)
	*p = x
	return p
}

func (x CMsgTFXPSource_XPSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgTFXPSource_XPSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[23].Descriptor()
}

func (CMsgTFXPSource_XPSourceType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[23]
}

func (x CMsgTFXPSource_XPSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgTFXPSource_XPSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgTFXPSource_XPSourceType(num)
	return nil
}

// Deprecated: Use CMsgTFXPSource_XPSourceType.Descriptor instead.
func (CMsgTFXPSource_XPSourceType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{126, 0}
}

type CMsgGCNotification_NotificationType int32

const (
	CMsgGCNotification_NOTIFICATION_REPORTED_PLAYER_BANNED          CMsgGCNotification_NotificationType = 0
	CMsgGCNotification_NOTIFICATION_CUSTOM_STRING                   CMsgGCNotification_NotificationType = 1
	CMsgGCNotification_NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS CMsgGCNotification_NotificationType = 2
	CMsgGCNotification_NOTIFICATION_REPORTED_PLAYER_WAS_BANNED      CMsgGCNotification_NotificationType = 3
	CMsgGCNotification_NOTIFICATION_SUPPORT_MESSAGE                 CMsgGCNotification_NotificationType = 4
	CMsgGCNotification_NOTIFICATION_NUM_TYPES                       CMsgGCNotification_NotificationType = 5
)

// Enum value maps for CMsgGCNotification_NotificationType.
var (
	CMsgGCNotification_NotificationType_name = map[int32]string{
		0: "NOTIFICATION_REPORTED_PLAYER_BANNED",
		1: "NOTIFICATION_CUSTOM_STRING",
		2: "NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS",
		3: "NOTIFICATION_REPORTED_PLAYER_WAS_BANNED",
		4: "NOTIFICATION_SUPPORT_MESSAGE",
		5: "NOTIFICATION_NUM_TYPES",
	}
	CMsgGCNotification_NotificationType_value = map[string]int32{
		"NOTIFICATION_REPORTED_PLAYER_BANNED":          0,
		"NOTIFICATION_CUSTOM_STRING":                   1,
		"NOTIFICATION_MM_BAN_DUE_TO_EXCESSIVE_REPORTS": 2,
		"NOTIFICATION_REPORTED_PLAYER_WAS_BANNED":      3,
		"NOTIFICATION_SUPPORT_MESSAGE":                 4,
		"NOTIFICATION_NUM_TYPES":                       5,
	}
)

func (x CMsgGCNotification_NotificationType) Enum() *CMsgGCNotification_NotificationType {
	p := new(CMsgGCNotification_NotificationType)
	*p = x
	return p
}

func (x CMsgGCNotification_NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCNotification_NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[24].Descriptor()
}

func (CMsgGCNotification_NotificationType) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[24]
}

func (x CMsgGCNotification_NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCNotification_NotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCNotification_NotificationType(num)
	return nil
}

// Deprecated: Use CMsgGCNotification_NotificationType.Descriptor instead.
func (CMsgGCNotification_NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{129, 0}
}

type CMsgGC_Match_Result_Status int32

const (
	CMsgGC_Match_Result_MATCH_SUCCEEDED        CMsgGC_Match_Result_Status = 0
	CMsgGC_Match_Result_MATCH_FAILED_GC        CMsgGC_Match_Result_Status = 1
	CMsgGC_Match_Result_MATCH_FAILED_TRUSTED   CMsgGC_Match_Result_Status = 2
	CMsgGC_Match_Result_MATCH_FAILED_ABANDON   CMsgGC_Match_Result_Status = 3
	CMsgGC_Match_Result_MATCH_FAILED_UNKNOWN   CMsgGC_Match_Result_Status = 5
	CMsgGC_Match_Result_MATCH_FAILED_TIMEOUT   CMsgGC_Match_Result_Status = 6
	CMsgGC_Match_Result_MATCH_FINISHED_ABANDON CMsgGC_Match_Result_Status = 7
)

// Enum value maps for CMsgGC_Match_Result_Status.
var (
	CMsgGC_Match_Result_Status_name = map[int32]string{
		0: "MATCH_SUCCEEDED",
		1: "MATCH_FAILED_GC",
		2: "MATCH_FAILED_TRUSTED",
		3: "MATCH_FAILED_ABANDON",
		5: "MATCH_FAILED_UNKNOWN",
		6: "MATCH_FAILED_TIMEOUT",
		7: "MATCH_FINISHED_ABANDON",
	}
	CMsgGC_Match_Result_Status_value = map[string]int32{
		"MATCH_SUCCEEDED":        0,
		"MATCH_FAILED_GC":        1,
		"MATCH_FAILED_TRUSTED":   2,
		"MATCH_FAILED_ABANDON":   3,
		"MATCH_FAILED_UNKNOWN":   5,
		"MATCH_FAILED_TIMEOUT":   6,
		"MATCH_FINISHED_ABANDON": 7,
	}
)

func (x CMsgGC_Match_Result_Status) Enum() *CMsgGC_Match_Result_Status {
	p := new(CMsgGC_Match_Result_Status)
	*p = x
	return p
}

func (x CMsgGC_Match_Result_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGC_Match_Result_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[25].Descriptor()
}

func (CMsgGC_Match_Result_Status) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[25]
}

func (x CMsgGC_Match_Result_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGC_Match_Result_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGC_Match_Result_Status(num)
	return nil
}

// Deprecated: Use CMsgGC_Match_Result_Status.Descriptor instead.
func (CMsgGC_Match_Result_Status) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{133, 0}
}

type CMsgGC_ReportPlayer_EReason int32

const (
	CMsgGC_ReportPlayer_kReason_INVALID    CMsgGC_ReportPlayer_EReason = 0
	CMsgGC_ReportPlayer_kReason_CHEATING   CMsgGC_ReportPlayer_EReason = 1
	CMsgGC_ReportPlayer_kReason_IDLE       CMsgGC_ReportPlayer_EReason = 2
	CMsgGC_ReportPlayer_kReason_HARASSMENT CMsgGC_ReportPlayer_EReason = 3
	CMsgGC_ReportPlayer_kReason_GRIEFING   CMsgGC_ReportPlayer_EReason = 4
	CMsgGC_ReportPlayer_kReason_COUNT      CMsgGC_ReportPlayer_EReason = 5
)

// Enum value maps for CMsgGC_ReportPlayer_EReason.
var (
	CMsgGC_ReportPlayer_EReason_name = map[int32]string{
		0: "kReason_INVALID",
		1: "kReason_CHEATING",
		2: "kReason_IDLE",
		3: "kReason_HARASSMENT",
		4: "kReason_GRIEFING",
		5: "kReason_COUNT",
	}
	CMsgGC_ReportPlayer_EReason_value = map[string]int32{
		"kReason_INVALID":    0,
		"kReason_CHEATING":   1,
		"kReason_IDLE":       2,
		"kReason_HARASSMENT": 3,
		"kReason_GRIEFING":   4,
		"kReason_COUNT":      5,
	}
)

func (x CMsgGC_ReportPlayer_EReason) Enum() *CMsgGC_ReportPlayer_EReason {
	p := new(CMsgGC_ReportPlayer_EReason)
	*p = x
	return p
}

func (x CMsgGC_ReportPlayer_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGC_ReportPlayer_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[26].Descriptor()
}

func (CMsgGC_ReportPlayer_EReason) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[26]
}

func (x CMsgGC_ReportPlayer_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGC_ReportPlayer_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGC_ReportPlayer_EReason(num)
	return nil
}

// Deprecated: Use CMsgGC_ReportPlayer_EReason.Descriptor instead.
func (CMsgGC_ReportPlayer_EReason) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{144, 0}
}

type CMsgGCDataCenterPing_Update_Status int32

const (
	CMsgGCDataCenterPing_Update_Invalid          CMsgGCDataCenterPing_Update_Status = 0
	CMsgGCDataCenterPing_Update_Normal           CMsgGCDataCenterPing_Update_Status = 1
	CMsgGCDataCenterPing_Update_Unreachable      CMsgGCDataCenterPing_Update_Status = 2
	CMsgGCDataCenterPing_Update_FallbackToDCPing CMsgGCDataCenterPing_Update_Status = 3
)

// Enum value maps for CMsgGCDataCenterPing_Update_Status.
var (
	CMsgGCDataCenterPing_Update_Status_name = map[int32]string{
		0: "Invalid",
		1: "Normal",
		2: "Unreachable",
		3: "FallbackToDCPing",
	}
	CMsgGCDataCenterPing_Update_Status_value = map[string]int32{
		"Invalid":          0,
		"Normal":           1,
		"Unreachable":      2,
		"FallbackToDCPing": 3,
	}
)

func (x CMsgGCDataCenterPing_Update_Status) Enum() *CMsgGCDataCenterPing_Update_Status {
	p := new(CMsgGCDataCenterPing_Update_Status)
	*p = x
	return p
}

func (x CMsgGCDataCenterPing_Update_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCDataCenterPing_Update_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_tf_gcmessages_proto_enumTypes[27].Descriptor()
}

func (CMsgGCDataCenterPing_Update_Status) Type() protoreflect.EnumType {
	return &file_tf2_tf_gcmessages_proto_enumTypes[27]
}

func (x CMsgGCDataCenterPing_Update_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCDataCenterPing_Update_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCDataCenterPing_Update_Status(num)
	return nil
}

// Deprecated: Use CMsgGCDataCenterPing_Update_Status.Descriptor instead.
func (CMsgGCDataCenterPing_Update_Status) EnumDescriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{151, 0}
}

type CMsgTFGoldenWrenchBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrenchNumber *int32  `protobuf:"varint,1,opt,name=wrench_number,json=wrenchNumber" json:"wrench_number,omitempty"`
	Deleted      *bool   `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	UserName     *string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (x *CMsgTFGoldenWrenchBroadcast) Reset() {
	*x = CMsgTFGoldenWrenchBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFGoldenWrenchBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFGoldenWrenchBroadcast) ProtoMessage() {}

func (x *CMsgTFGoldenWrenchBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFGoldenWrenchBroadcast.ProtoReflect.Descriptor instead.
func (*CMsgTFGoldenWrenchBroadcast) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgTFGoldenWrenchBroadcast) GetWrenchNumber() int32 {
	if x != nil && x.WrenchNumber != nil {
		return *x.WrenchNumber
	}
	return 0
}

func (x *CMsgTFGoldenWrenchBroadcast) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CMsgTFGoldenWrenchBroadcast) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type CMsgTFSaxxyBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryNumber *int32  `protobuf:"varint,1,opt,name=category_number,json=categoryNumber" json:"category_number,omitempty"`
	UserName       *string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (x *CMsgTFSaxxyBroadcast) Reset() {
	*x = CMsgTFSaxxyBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFSaxxyBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFSaxxyBroadcast) ProtoMessage() {}

func (x *CMsgTFSaxxyBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFSaxxyBroadcast.ProtoReflect.Descriptor instead.
func (*CMsgTFSaxxyBroadcast) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgTFSaxxyBroadcast) GetCategoryNumber() int32 {
	if x != nil && x.CategoryNumber != nil {
		return *x.CategoryNumber
	}
	return 0
}

func (x *CMsgTFSaxxyBroadcast) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type CMsgGCTFSpecificItemBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefIndex   *uint32 `protobuf:"varint,1,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	WasDestruction *bool   `protobuf:"varint,2,opt,name=was_destruction,json=wasDestruction" json:"was_destruction,omitempty"`
	UserName       *string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (x *CMsgGCTFSpecificItemBroadcast) Reset() {
	*x = CMsgGCTFSpecificItemBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCTFSpecificItemBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCTFSpecificItemBroadcast) ProtoMessage() {}

func (x *CMsgGCTFSpecificItemBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCTFSpecificItemBroadcast.ProtoReflect.Descriptor instead.
func (*CMsgGCTFSpecificItemBroadcast) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGCTFSpecificItemBroadcast) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CMsgGCTFSpecificItemBroadcast) GetWasDestruction() bool {
	if x != nil && x.WasDestruction != nil {
		return *x.WasDestruction
	}
	return false
}

func (x *CMsgGCTFSpecificItemBroadcast) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type CMsgTFWorldStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetaStressTestEventActive *bool           `protobuf:"varint,1,opt,name=beta_stress_test_event_active,json=betaStressTestEventActive,def=0" json:"beta_stress_test_event_active,omitempty"`
	EventMatchGroup           *ETFMatchGroup  `protobuf:"varint,2,opt,name=event_match_group,json=eventMatchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"event_match_group,omitempty"`
	EventExpireTime           *uint32         `protobuf:"fixed32,3,opt,name=event_expire_time,json=eventExpireTime,def=0" json:"event_expire_time,omitempty"`
	ActiveClientVersion       *uint32         `protobuf:"varint,4,opt,name=active_client_version,json=activeClientVersion" json:"active_client_version,omitempty"`
	DisabledMatchGroups       []ETFMatchGroup `protobuf:"varint,5,rep,name=disabled_match_groups,json=disabledMatchGroups,enum=tf2.ETFMatchGroup" json:"disabled_match_groups,omitempty"`
}

// Default values for CMsgTFWorldStatus fields.
const (
	Default_CMsgTFWorldStatus_BetaStressTestEventActive = bool(false)
	Default_CMsgTFWorldStatus_EventMatchGroup           = ETFMatchGroup_k_eTFMatchGroup_Invalid
	Default_CMsgTFWorldStatus_EventExpireTime           = uint32(0)
)

func (x *CMsgTFWorldStatus) Reset() {
	*x = CMsgTFWorldStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFWorldStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFWorldStatus) ProtoMessage() {}

func (x *CMsgTFWorldStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFWorldStatus.ProtoReflect.Descriptor instead.
func (*CMsgTFWorldStatus) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgTFWorldStatus) GetBetaStressTestEventActive() bool {
	if x != nil && x.BetaStressTestEventActive != nil {
		return *x.BetaStressTestEventActive
	}
	return Default_CMsgTFWorldStatus_BetaStressTestEventActive
}

func (x *CMsgTFWorldStatus) GetEventMatchGroup() ETFMatchGroup {
	if x != nil && x.EventMatchGroup != nil {
		return *x.EventMatchGroup
	}
	return Default_CMsgTFWorldStatus_EventMatchGroup
}

func (x *CMsgTFWorldStatus) GetEventExpireTime() uint32 {
	if x != nil && x.EventExpireTime != nil {
		return *x.EventExpireTime
	}
	return Default_CMsgTFWorldStatus_EventExpireTime
}

func (x *CMsgTFWorldStatus) GetActiveClientVersion() uint32 {
	if x != nil && x.ActiveClientVersion != nil {
		return *x.ActiveClientVersion
	}
	return 0
}

func (x *CMsgTFWorldStatus) GetDisabledMatchGroups() []ETFMatchGroup {
	if x != nil {
		return x.DisabledMatchGroups
	}
	return nil
}

type CSOTFDuelSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DuelWins          *uint32 `protobuf:"varint,2,opt,name=duel_wins,json=duelWins" json:"duel_wins,omitempty"`
	DuelLosses        *uint32 `protobuf:"varint,3,opt,name=duel_losses,json=duelLosses" json:"duel_losses,omitempty"`
	LastDuelAccountId *uint32 `protobuf:"varint,4,opt,name=last_duel_account_id,json=lastDuelAccountId" json:"last_duel_account_id,omitempty"`
	LastDuelTimestamp *uint32 `protobuf:"varint,5,opt,name=last_duel_timestamp,json=lastDuelTimestamp" json:"last_duel_timestamp,omitempty"`
	LastDuelStatus    *uint32 `protobuf:"varint,6,opt,name=last_duel_status,json=lastDuelStatus" json:"last_duel_status,omitempty"`
}

func (x *CSOTFDuelSummary) Reset() {
	*x = CSOTFDuelSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFDuelSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFDuelSummary) ProtoMessage() {}

func (x *CSOTFDuelSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFDuelSummary.ProtoReflect.Descriptor instead.
func (*CSOTFDuelSummary) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CSOTFDuelSummary) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTFDuelSummary) GetDuelWins() uint32 {
	if x != nil && x.DuelWins != nil {
		return *x.DuelWins
	}
	return 0
}

func (x *CSOTFDuelSummary) GetDuelLosses() uint32 {
	if x != nil && x.DuelLosses != nil {
		return *x.DuelLosses
	}
	return 0
}

func (x *CSOTFDuelSummary) GetLastDuelAccountId() uint32 {
	if x != nil && x.LastDuelAccountId != nil {
		return *x.LastDuelAccountId
	}
	return 0
}

func (x *CSOTFDuelSummary) GetLastDuelTimestamp() uint32 {
	if x != nil && x.LastDuelTimestamp != nil {
		return *x.LastDuelTimestamp
	}
	return 0
}

func (x *CSOTFDuelSummary) GetLastDuelStatus() uint32 {
	if x != nil && x.LastDuelStatus != nil {
		return *x.LastDuelStatus
	}
	return 0
}

type CSOTFMapContribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DefIndex          *uint32 `protobuf:"varint,2,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ContributionLevel *uint32 `protobuf:"varint,3,opt,name=contribution_level,json=contributionLevel" json:"contribution_level,omitempty"`
}

func (x *CSOTFMapContribution) Reset() {
	*x = CSOTFMapContribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFMapContribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFMapContribution) ProtoMessage() {}

func (x *CSOTFMapContribution) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFMapContribution.ProtoReflect.Descriptor instead.
func (*CSOTFMapContribution) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CSOTFMapContribution) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTFMapContribution) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CSOTFMapContribution) GetContributionLevel() uint32 {
	if x != nil && x.ContributionLevel != nil {
		return *x.ContributionLevel
	}
	return 0
}

type CMsgTFFreeTrialChooseMostHelpfulFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdFriend *uint32 `protobuf:"varint,1,opt,name=account_id_friend,json=accountIdFriend" json:"account_id_friend,omitempty"`
}

func (x *CMsgTFFreeTrialChooseMostHelpfulFriend) Reset() {
	*x = CMsgTFFreeTrialChooseMostHelpfulFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFFreeTrialChooseMostHelpfulFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFFreeTrialChooseMostHelpfulFriend) ProtoMessage() {}

func (x *CMsgTFFreeTrialChooseMostHelpfulFriend) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFFreeTrialChooseMostHelpfulFriend.ProtoReflect.Descriptor instead.
func (*CMsgTFFreeTrialChooseMostHelpfulFriend) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgTFFreeTrialChooseMostHelpfulFriend) GetAccountIdFriend() uint32 {
	if x != nil && x.AccountIdFriend != nil {
		return *x.AccountIdFriend
	}
	return 0
}

type CMsgTFRequestTF2Friends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgTFRequestTF2Friends) Reset() {
	*x = CMsgTFRequestTF2Friends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFRequestTF2Friends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFRequestTF2Friends) ProtoMessage() {}

func (x *CMsgTFRequestTF2Friends) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFRequestTF2Friends.ProtoReflect.Descriptor instead.
func (*CMsgTFRequestTF2Friends) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgTFRequestTF2Friends) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgTFRequestTF2FriendsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *CMsgTFRequestTF2FriendsResponse) Reset() {
	*x = CMsgTFRequestTF2FriendsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFRequestTF2FriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFRequestTF2FriendsResponse) ProtoMessage() {}

func (x *CMsgTFRequestTF2FriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFRequestTF2FriendsResponse.ProtoReflect.Descriptor instead.
func (*CMsgTFRequestTF2FriendsResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgTFRequestTF2FriendsResponse) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CSOTFPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumNewUsersHelped *uint32 `protobuf:"varint,1,opt,name=num_new_users_helped,json=numNewUsersHelped" json:"num_new_users_helped,omitempty"`
}

func (x *CSOTFPlayerInfo) Reset() {
	*x = CSOTFPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFPlayerInfo) ProtoMessage() {}

func (x *CSOTFPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFPlayerInfo.ProtoReflect.Descriptor instead.
func (*CSOTFPlayerInfo) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{9}
}

func (x *CSOTFPlayerInfo) GetNumNewUsersHelped() uint32 {
	if x != nil && x.NumNewUsersHelped != nil {
		return *x.NumNewUsersHelped
	}
	return 0
}

type CMsgTFThankedBySomeone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThankerSteamId *uint64 `protobuf:"varint,1,opt,name=thanker_steam_id,json=thankerSteamId" json:"thanker_steam_id,omitempty"`
}

func (x *CMsgTFThankedBySomeone) Reset() {
	*x = CMsgTFThankedBySomeone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFThankedBySomeone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFThankedBySomeone) ProtoMessage() {}

func (x *CMsgTFThankedBySomeone) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFThankedBySomeone.ProtoReflect.Descriptor instead.
func (*CMsgTFThankedBySomeone) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgTFThankedBySomeone) GetThankerSteamId() uint64 {
	if x != nil && x.ThankerSteamId != nil {
		return *x.ThankerSteamId
	}
	return 0
}

type CMsgTFThankedSomeone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgTFThankedSomeone) Reset() {
	*x = CMsgTFThankedSomeone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFThankedSomeone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFThankedSomeone) ProtoMessage() {}

func (x *CMsgTFThankedSomeone) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFThankedSomeone.ProtoReflect.Descriptor instead.
func (*CMsgTFThankedSomeone) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{11}
}

type CMsgTFFreeTrialConvertedToPremium struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgTFFreeTrialConvertedToPremium) Reset() {
	*x = CMsgTFFreeTrialConvertedToPremium{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFFreeTrialConvertedToPremium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFFreeTrialConvertedToPremium) ProtoMessage() {}

func (x *CMsgTFFreeTrialConvertedToPremium) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFFreeTrialConvertedToPremium.ProtoReflect.Descriptor instead.
func (*CMsgTFFreeTrialConvertedToPremium) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{12}
}

type CMsgSaxxyAwarded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category    *uint32  `protobuf:"varint,1,opt,name=category" json:"category,omitempty"`
	WinnerNames []string `protobuf:"bytes,2,rep,name=winner_names,json=winnerNames" json:"winner_names,omitempty"`
}

func (x *CMsgSaxxyAwarded) Reset() {
	*x = CMsgSaxxyAwarded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSaxxyAwarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSaxxyAwarded) ProtoMessage() {}

func (x *CMsgSaxxyAwarded) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSaxxyAwarded.ProtoReflect.Descriptor instead.
func (*CMsgSaxxyAwarded) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSaxxyAwarded) GetCategory() uint32 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

func (x *CMsgSaxxyAwarded) GetWinnerNames() []string {
	if x != nil {
		return x.WinnerNames
	}
	return nil
}

type CMsgReplaySubmitContestEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YoutubeUrl *string `protobuf:"bytes,1,opt,name=youtube_url,json=youtubeUrl" json:"youtube_url,omitempty"`
	Category   *uint32 `protobuf:"varint,2,opt,name=category" json:"category,omitempty"`
}

func (x *CMsgReplaySubmitContestEntry) Reset() {
	*x = CMsgReplaySubmitContestEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReplaySubmitContestEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReplaySubmitContestEntry) ProtoMessage() {}

func (x *CMsgReplaySubmitContestEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReplaySubmitContestEntry.ProtoReflect.Descriptor instead.
func (*CMsgReplaySubmitContestEntry) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgReplaySubmitContestEntry) GetYoutubeUrl() string {
	if x != nil && x.YoutubeUrl != nil {
		return *x.YoutubeUrl
	}
	return ""
}

func (x *CMsgReplaySubmitContestEntry) GetCategory() uint32 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

type CMsgReplaySubmitContestEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgReplaySubmitContestEntryResponse) Reset() {
	*x = CMsgReplaySubmitContestEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReplaySubmitContestEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReplaySubmitContestEntryResponse) ProtoMessage() {}

func (x *CMsgReplaySubmitContestEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReplaySubmitContestEntryResponse.ProtoReflect.Descriptor instead.
func (*CMsgReplaySubmitContestEntryResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgReplaySubmitContestEntryResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CReplayCachedContestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       *uint32  `protobuf:"fixed32,1,opt,name=timestamp" json:"timestamp,omitempty"`
	NumVotesLastDay *uint32  `protobuf:"varint,2,opt,name=num_votes_last_day,json=numVotesLastDay" json:"num_votes_last_day,omitempty"`
	VideoEntryIds   []uint32 `protobuf:"varint,3,rep,name=video_entry_ids,json=videoEntryIds" json:"video_entry_ids,omitempty"`
	NumFlagsLastDay *uint32  `protobuf:"varint,4,opt,name=num_flags_last_day,json=numFlagsLastDay" json:"num_flags_last_day,omitempty"`
}

func (x *CReplayCachedContestData) Reset() {
	*x = CReplayCachedContestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReplayCachedContestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReplayCachedContestData) ProtoMessage() {}

func (x *CReplayCachedContestData) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReplayCachedContestData.ProtoReflect.Descriptor instead.
func (*CReplayCachedContestData) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{16}
}

func (x *CReplayCachedContestData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CReplayCachedContestData) GetNumVotesLastDay() uint32 {
	if x != nil && x.NumVotesLastDay != nil {
		return *x.NumVotesLastDay
	}
	return 0
}

func (x *CReplayCachedContestData) GetVideoEntryIds() []uint32 {
	if x != nil {
		return x.VideoEntryIds
	}
	return nil
}

func (x *CReplayCachedContestData) GetNumFlagsLastDay() uint32 {
	if x != nil && x.NumFlagsLastDay != nil {
		return *x.NumFlagsLastDay
	}
	return 0
}

type CMsgTFCoaching_AddToCoaches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgTFCoaching_AddToCoaches) Reset() {
	*x = CMsgTFCoaching_AddToCoaches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_AddToCoaches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_AddToCoaches) ProtoMessage() {}

func (x *CMsgTFCoaching_AddToCoaches) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_AddToCoaches.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_AddToCoaches) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{17}
}

type CMsgTFCoaching_RemoveFromCoaches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgTFCoaching_RemoveFromCoaches) Reset() {
	*x = CMsgTFCoaching_RemoveFromCoaches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_RemoveFromCoaches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_RemoveFromCoaches) ProtoMessage() {}

func (x *CMsgTFCoaching_RemoveFromCoaches) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_RemoveFromCoaches.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_RemoveFromCoaches) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{18}
}

type CMsgTFCoaching_FindCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdFriendAsCoach *uint32 `protobuf:"varint,1,opt,name=account_id_friend_as_coach,json=accountIdFriendAsCoach" json:"account_id_friend_as_coach,omitempty"`
}

func (x *CMsgTFCoaching_FindCoach) Reset() {
	*x = CMsgTFCoaching_FindCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_FindCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_FindCoach) ProtoMessage() {}

func (x *CMsgTFCoaching_FindCoach) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_FindCoach.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_FindCoach) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgTFCoaching_FindCoach) GetAccountIdFriendAsCoach() uint32 {
	if x != nil && x.AccountIdFriendAsCoach != nil {
		return *x.AccountIdFriendAsCoach
	}
	return 0
}

type CMsgTFCoaching_FindCoachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoundCoach *bool   `protobuf:"varint,1,opt,name=found_coach,json=foundCoach" json:"found_coach,omitempty"`
	NumLikes   *uint32 `protobuf:"varint,2,opt,name=num_likes,json=numLikes" json:"num_likes,omitempty"`
	CoachName  *string `protobuf:"bytes,3,opt,name=coach_name,json=coachName" json:"coach_name,omitempty"`
}

func (x *CMsgTFCoaching_FindCoachResponse) Reset() {
	*x = CMsgTFCoaching_FindCoachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_FindCoachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_FindCoachResponse) ProtoMessage() {}

func (x *CMsgTFCoaching_FindCoachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_FindCoachResponse.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_FindCoachResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgTFCoaching_FindCoachResponse) GetFoundCoach() bool {
	if x != nil && x.FoundCoach != nil {
		return *x.FoundCoach
	}
	return false
}

func (x *CMsgTFCoaching_FindCoachResponse) GetNumLikes() uint32 {
	if x != nil && x.NumLikes != nil {
		return *x.NumLikes
	}
	return 0
}

func (x *CMsgTFCoaching_FindCoachResponse) GetCoachName() string {
	if x != nil && x.CoachName != nil {
		return *x.CoachName
	}
	return ""
}

type CMsgTFCoaching_AskCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdStudent *uint32 `protobuf:"varint,1,opt,name=account_id_student,json=accountIdStudent" json:"account_id_student,omitempty"`
	StudentIsFriend  *bool   `protobuf:"varint,2,opt,name=student_is_friend,json=studentIsFriend" json:"student_is_friend,omitempty"`
}

func (x *CMsgTFCoaching_AskCoach) Reset() {
	*x = CMsgTFCoaching_AskCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_AskCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_AskCoach) ProtoMessage() {}

func (x *CMsgTFCoaching_AskCoach) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_AskCoach.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_AskCoach) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgTFCoaching_AskCoach) GetAccountIdStudent() uint32 {
	if x != nil && x.AccountIdStudent != nil {
		return *x.AccountIdStudent
	}
	return 0
}

func (x *CMsgTFCoaching_AskCoach) GetStudentIsFriend() bool {
	if x != nil && x.StudentIsFriend != nil {
		return *x.StudentIsFriend
	}
	return false
}

type CMsgTFCoaching_AskCoachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptCoachingAssignment *bool `protobuf:"varint,1,opt,name=accept_coaching_assignment,json=acceptCoachingAssignment" json:"accept_coaching_assignment,omitempty"`
}

func (x *CMsgTFCoaching_AskCoachResponse) Reset() {
	*x = CMsgTFCoaching_AskCoachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_AskCoachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_AskCoachResponse) ProtoMessage() {}

func (x *CMsgTFCoaching_AskCoachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_AskCoachResponse.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_AskCoachResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgTFCoaching_AskCoachResponse) GetAcceptCoachingAssignment() bool {
	if x != nil && x.AcceptCoachingAssignment != nil {
		return *x.AcceptCoachingAssignment
	}
	return false
}

type CMsgTFCoaching_CoachJoinGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinGame         *bool   `protobuf:"varint,1,opt,name=join_game,json=joinGame" json:"join_game,omitempty"`
	ServerAddress    *uint32 `protobuf:"varint,2,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort       *uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	AccountIdStudent *uint32 `protobuf:"varint,4,opt,name=account_id_student,json=accountIdStudent" json:"account_id_student,omitempty"`
}

func (x *CMsgTFCoaching_CoachJoinGame) Reset() {
	*x = CMsgTFCoaching_CoachJoinGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_CoachJoinGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_CoachJoinGame) ProtoMessage() {}

func (x *CMsgTFCoaching_CoachJoinGame) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_CoachJoinGame.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_CoachJoinGame) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgTFCoaching_CoachJoinGame) GetJoinGame() bool {
	if x != nil && x.JoinGame != nil {
		return *x.JoinGame
	}
	return false
}

func (x *CMsgTFCoaching_CoachJoinGame) GetServerAddress() uint32 {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return 0
}

func (x *CMsgTFCoaching_CoachJoinGame) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgTFCoaching_CoachJoinGame) GetAccountIdStudent() uint32 {
	if x != nil && x.AccountIdStudent != nil {
		return *x.AccountIdStudent
	}
	return 0
}

type CMsgTFCoaching_CoachJoining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdCoach   *uint32 `protobuf:"varint,1,opt,name=account_id_coach,json=accountIdCoach" json:"account_id_coach,omitempty"`
	AccountIdStudent *uint32 `protobuf:"varint,2,opt,name=account_id_student,json=accountIdStudent" json:"account_id_student,omitempty"`
}

func (x *CMsgTFCoaching_CoachJoining) Reset() {
	*x = CMsgTFCoaching_CoachJoining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_CoachJoining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_CoachJoining) ProtoMessage() {}

func (x *CMsgTFCoaching_CoachJoining) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_CoachJoining.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_CoachJoining) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgTFCoaching_CoachJoining) GetAccountIdCoach() uint32 {
	if x != nil && x.AccountIdCoach != nil {
		return *x.AccountIdCoach
	}
	return 0
}

func (x *CMsgTFCoaching_CoachJoining) GetAccountIdStudent() uint32 {
	if x != nil && x.AccountIdStudent != nil {
		return *x.AccountIdStudent
	}
	return 0
}

type CMsgTFCoaching_CoachJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdCoach *uint32 `protobuf:"varint,1,opt,name=account_id_coach,json=accountIdCoach" json:"account_id_coach,omitempty"`
}

func (x *CMsgTFCoaching_CoachJoined) Reset() {
	*x = CMsgTFCoaching_CoachJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_CoachJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_CoachJoined) ProtoMessage() {}

func (x *CMsgTFCoaching_CoachJoined) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_CoachJoined.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_CoachJoined) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgTFCoaching_CoachJoined) GetAccountIdCoach() uint32 {
	if x != nil && x.AccountIdCoach != nil {
		return *x.AccountIdCoach
	}
	return 0
}

type CMsgTFCoaching_LikeCurrentCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeCoach *bool `protobuf:"varint,1,opt,name=like_coach,json=likeCoach" json:"like_coach,omitempty"`
}

func (x *CMsgTFCoaching_LikeCurrentCoach) Reset() {
	*x = CMsgTFCoaching_LikeCurrentCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_LikeCurrentCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_LikeCurrentCoach) ProtoMessage() {}

func (x *CMsgTFCoaching_LikeCurrentCoach) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_LikeCurrentCoach.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_LikeCurrentCoach) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgTFCoaching_LikeCurrentCoach) GetLikeCoach() bool {
	if x != nil && x.LikeCoach != nil {
		return *x.LikeCoach
	}
	return false
}

type CMsgTFCoaching_RemoveCurrentCoach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdCoach *uint32 `protobuf:"varint,1,opt,name=account_id_coach,json=accountIdCoach" json:"account_id_coach,omitempty"`
}

func (x *CMsgTFCoaching_RemoveCurrentCoach) Reset() {
	*x = CMsgTFCoaching_RemoveCurrentCoach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFCoaching_RemoveCurrentCoach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFCoaching_RemoveCurrentCoach) ProtoMessage() {}

func (x *CMsgTFCoaching_RemoveCurrentCoach) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFCoaching_RemoveCurrentCoach.ProtoReflect.Descriptor instead.
func (*CMsgTFCoaching_RemoveCurrentCoach) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgTFCoaching_RemoveCurrentCoach) GetAccountIdCoach() uint32 {
	if x != nil && x.AccountIdCoach != nil {
		return *x.AccountIdCoach
	}
	return 0
}

type CMsgTFQuickplay_ScoreServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CMsgTFQuickplay_ScoreServers_ServerInfo `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CMsgTFQuickplay_ScoreServers) Reset() {
	*x = CMsgTFQuickplay_ScoreServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFQuickplay_ScoreServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFQuickplay_ScoreServers) ProtoMessage() {}

func (x *CMsgTFQuickplay_ScoreServers) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFQuickplay_ScoreServers.ProtoReflect.Descriptor instead.
func (*CMsgTFQuickplay_ScoreServers) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgTFQuickplay_ScoreServers) GetServers() []*CMsgTFQuickplay_ScoreServers_ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CMsgTFQuickplay_ScoreServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CMsgTFQuickplay_ScoreServersResponse_ServerInfo `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CMsgTFQuickplay_ScoreServersResponse) Reset() {
	*x = CMsgTFQuickplay_ScoreServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFQuickplay_ScoreServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFQuickplay_ScoreServersResponse) ProtoMessage() {}

func (x *CMsgTFQuickplay_ScoreServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFQuickplay_ScoreServersResponse.ProtoReflect.Descriptor instead.
func (*CMsgTFQuickplay_ScoreServersResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgTFQuickplay_ScoreServersResponse) GetServers() []*CMsgTFQuickplay_ScoreServersResponse_ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CMsgTFQuickplay_PlayerJoining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgTFQuickplay_PlayerJoining) Reset() {
	*x = CMsgTFQuickplay_PlayerJoining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFQuickplay_PlayerJoining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFQuickplay_PlayerJoining) ProtoMessage() {}

func (x *CMsgTFQuickplay_PlayerJoining) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFQuickplay_PlayerJoining.ProtoReflect.Descriptor instead.
func (*CMsgTFQuickplay_PlayerJoining) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgTFQuickplay_PlayerJoining) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGC_GameServer_LevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelLoaded *bool   `protobuf:"varint,1,opt,name=level_loaded,json=levelLoaded" json:"level_loaded,omitempty"`
	LevelName   *string `protobuf:"bytes,2,opt,name=level_name,json=levelName" json:"level_name,omitempty"`
}

func (x *CMsgGC_GameServer_LevelInfo) Reset() {
	*x = CMsgGC_GameServer_LevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_LevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_LevelInfo) ProtoMessage() {}

func (x *CMsgGC_GameServer_LevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_LevelInfo.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_LevelInfo) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGC_GameServer_LevelInfo) GetLevelLoaded() bool {
	if x != nil && x.LevelLoaded != nil {
		return *x.LevelLoaded
	}
	return false
}

func (x *CMsgGC_GameServer_LevelInfo) GetLevelName() string {
	if x != nil && x.LevelName != nil {
		return *x.LevelName
	}
	return ""
}

type CMsgGC_GameServer_AuthChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeString *string `protobuf:"bytes,1,opt,name=challenge_string,json=challengeString" json:"challenge_string,omitempty"`
}

func (x *CMsgGC_GameServer_AuthChallenge) Reset() {
	*x = CMsgGC_GameServer_AuthChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_AuthChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_AuthChallenge) ProtoMessage() {}

func (x *CMsgGC_GameServer_AuthChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_AuthChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_AuthChallenge) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGC_GameServer_AuthChallenge) GetChallengeString() string {
	if x != nil && x.ChallengeString != nil {
		return *x.ChallengeString
	}
	return ""
}

type CMsgGC_GameServer_AuthResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticated           *bool   `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
	GameServerStanding      *int32  `protobuf:"varint,2,opt,name=game_server_standing,json=gameServerStanding" json:"game_server_standing,omitempty"`
	GameServerStandingTrend *int32  `protobuf:"varint,3,opt,name=game_server_standing_trend,json=gameServerStandingTrend" json:"game_server_standing_trend,omitempty"`
	IsValveServer           *bool   `protobuf:"varint,4,opt,name=is_valve_server,json=isValveServer" json:"is_valve_server,omitempty"`
	Message                 *string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgGC_GameServer_AuthResult) Reset() {
	*x = CMsgGC_GameServer_AuthResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_AuthResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_AuthResult) ProtoMessage() {}

func (x *CMsgGC_GameServer_AuthResult) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_AuthResult.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_AuthResult) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgGC_GameServer_AuthResult) GetAuthenticated() bool {
	if x != nil && x.Authenticated != nil {
		return *x.Authenticated
	}
	return false
}

func (x *CMsgGC_GameServer_AuthResult) GetGameServerStanding() int32 {
	if x != nil && x.GameServerStanding != nil {
		return *x.GameServerStanding
	}
	return 0
}

func (x *CMsgGC_GameServer_AuthResult) GetGameServerStandingTrend() int32 {
	if x != nil && x.GameServerStandingTrend != nil {
		return *x.GameServerStandingTrend
	}
	return 0
}

func (x *CMsgGC_GameServer_AuthResult) GetIsValveServer() bool {
	if x != nil && x.IsValveServer != nil {
		return *x.IsValveServer
	}
	return false
}

func (x *CMsgGC_GameServer_AuthResult) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgGC_GameServer_AuthChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerAccountId   *uint32 `protobuf:"varint,1,opt,name=game_server_account_id,json=gameServerAccountId" json:"game_server_account_id,omitempty"`
	HashedChallengeString []byte  `protobuf:"bytes,2,opt,name=hashed_challenge_string,json=hashedChallengeString" json:"hashed_challenge_string,omitempty"`
}

func (x *CMsgGC_GameServer_AuthChallengeResponse) Reset() {
	*x = CMsgGC_GameServer_AuthChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_AuthChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_AuthChallengeResponse) ProtoMessage() {}

func (x *CMsgGC_GameServer_AuthChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_AuthChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_AuthChallengeResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgGC_GameServer_AuthChallengeResponse) GetGameServerAccountId() uint32 {
	if x != nil && x.GameServerAccountId != nil {
		return *x.GameServerAccountId
	}
	return 0
}

func (x *CMsgGC_GameServer_AuthChallengeResponse) GetHashedChallengeString() []byte {
	if x != nil {
		return x.HashedChallengeString
	}
	return nil
}

type CMsgGC_GameServer_CreateIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGC_GameServer_CreateIdentity) Reset() {
	*x = CMsgGC_GameServer_CreateIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_CreateIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_CreateIdentity) ProtoMessage() {}

func (x *CMsgGC_GameServer_CreateIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_CreateIdentity.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_CreateIdentity) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGC_GameServer_CreateIdentity) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGC_GameServer_CreateIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountCreated          *bool                                             `protobuf:"varint,1,opt,name=account_created,json=accountCreated" json:"account_created,omitempty"`
	GameServerAccountId     *uint32                                           `protobuf:"varint,2,opt,name=game_server_account_id,json=gameServerAccountId" json:"game_server_account_id,omitempty"`
	GameServerIdentityToken *string                                           `protobuf:"bytes,3,opt,name=game_server_identity_token,json=gameServerIdentityToken" json:"game_server_identity_token,omitempty"`
	Status                  *CMsgGC_GameServer_CreateIdentityResponse_EStatus `protobuf:"varint,4,opt,name=status,enum=tf2.CMsgGC_GameServer_CreateIdentityResponse_EStatus,def=0" json:"status,omitempty"`
}

// Default values for CMsgGC_GameServer_CreateIdentityResponse fields.
const (
	Default_CMsgGC_GameServer_CreateIdentityResponse_Status = CMsgGC_GameServer_CreateIdentityResponse_kStatus_GenericFailure
)

func (x *CMsgGC_GameServer_CreateIdentityResponse) Reset() {
	*x = CMsgGC_GameServer_CreateIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_CreateIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_CreateIdentityResponse) ProtoMessage() {}

func (x *CMsgGC_GameServer_CreateIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_CreateIdentityResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_CreateIdentityResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGC_GameServer_CreateIdentityResponse) GetAccountCreated() bool {
	if x != nil && x.AccountCreated != nil {
		return *x.AccountCreated
	}
	return false
}

func (x *CMsgGC_GameServer_CreateIdentityResponse) GetGameServerAccountId() uint32 {
	if x != nil && x.GameServerAccountId != nil {
		return *x.GameServerAccountId
	}
	return 0
}

func (x *CMsgGC_GameServer_CreateIdentityResponse) GetGameServerIdentityToken() string {
	if x != nil && x.GameServerIdentityToken != nil {
		return *x.GameServerIdentityToken
	}
	return ""
}

func (x *CMsgGC_GameServer_CreateIdentityResponse) GetStatus() CMsgGC_GameServer_CreateIdentityResponse_EStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgGC_GameServer_CreateIdentityResponse_Status
}

type CMsgGC_GameServer_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGC_GameServer_List) Reset() {
	*x = CMsgGC_GameServer_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_List) ProtoMessage() {}

func (x *CMsgGC_GameServer_List) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_List.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_List) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGC_GameServer_List) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGC_GameServer_ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnedGameServers []*CMsgGC_GameServer_ListResponse_GameServerIdentity `protobuf:"bytes,1,rep,name=owned_game_servers,json=ownedGameServers" json:"owned_game_servers,omitempty"`
}

func (x *CMsgGC_GameServer_ListResponse) Reset() {
	*x = CMsgGC_GameServer_ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ListResponse) ProtoMessage() {}

func (x *CMsgGC_GameServer_ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ListResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ListResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGC_GameServer_ListResponse) GetOwnedGameServers() []*CMsgGC_GameServer_ListResponse_GameServerIdentity {
	if x != nil {
		return x.OwnedGameServers
	}
	return nil
}

type CMsgGC_GameServer_ResetIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerAccountId *uint32 `protobuf:"varint,1,opt,name=game_server_account_id,json=gameServerAccountId" json:"game_server_account_id,omitempty"`
}

func (x *CMsgGC_GameServer_ResetIdentity) Reset() {
	*x = CMsgGC_GameServer_ResetIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ResetIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ResetIdentity) ProtoMessage() {}

func (x *CMsgGC_GameServer_ResetIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ResetIdentity.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ResetIdentity) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgGC_GameServer_ResetIdentity) GetGameServerAccountId() uint32 {
	if x != nil && x.GameServerAccountId != nil {
		return *x.GameServerAccountId
	}
	return 0
}

type CMsgGC_GameServer_ResetIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerIdentityTokenReset *bool   `protobuf:"varint,1,opt,name=game_server_identity_token_reset,json=gameServerIdentityTokenReset" json:"game_server_identity_token_reset,omitempty"`
	GameServerAccountId          *uint32 `protobuf:"varint,2,opt,name=game_server_account_id,json=gameServerAccountId" json:"game_server_account_id,omitempty"`
	GameServerIdentityToken      *string `protobuf:"bytes,3,opt,name=game_server_identity_token,json=gameServerIdentityToken" json:"game_server_identity_token,omitempty"`
}

func (x *CMsgGC_GameServer_ResetIdentityResponse) Reset() {
	*x = CMsgGC_GameServer_ResetIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ResetIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ResetIdentityResponse) ProtoMessage() {}

func (x *CMsgGC_GameServer_ResetIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ResetIdentityResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ResetIdentityResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGC_GameServer_ResetIdentityResponse) GetGameServerIdentityTokenReset() bool {
	if x != nil && x.GameServerIdentityTokenReset != nil {
		return *x.GameServerIdentityTokenReset
	}
	return false
}

func (x *CMsgGC_GameServer_ResetIdentityResponse) GetGameServerAccountId() uint32 {
	if x != nil && x.GameServerAccountId != nil {
		return *x.GameServerAccountId
	}
	return 0
}

func (x *CMsgGC_GameServer_ResetIdentityResponse) GetGameServerIdentityToken() string {
	if x != nil && x.GameServerIdentityToken != nil {
		return *x.GameServerIdentityToken
	}
	return ""
}

type CMsgGC_GameServer_AckPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGC_GameServer_AckPolicy) Reset() {
	*x = CMsgGC_GameServer_AckPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_AckPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_AckPolicy) ProtoMessage() {}

func (x *CMsgGC_GameServer_AckPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_AckPolicy.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_AckPolicy) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{41}
}

type CMsgGC_GameServer_AckPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgGC_GameServer_AckPolicyResponse) Reset() {
	*x = CMsgGC_GameServer_AckPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_AckPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_AckPolicyResponse) ProtoMessage() {}

func (x *CMsgGC_GameServer_AckPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_AckPolicyResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_AckPolicyResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgGC_GameServer_AckPolicyResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgGC_GameServer_AckPolicyResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgGC_Client_UseServerModificationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgGC_Client_UseServerModificationItem) Reset() {
	*x = CMsgGC_Client_UseServerModificationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Client_UseServerModificationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Client_UseServerModificationItem) ProtoMessage() {}

func (x *CMsgGC_Client_UseServerModificationItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Client_UseServerModificationItem.ProtoReflect.Descriptor instead.
func (*CMsgGC_Client_UseServerModificationItem) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGC_Client_UseServerModificationItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgGC_Client_UseServerModificationItem_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode *CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse `protobuf:"varint,1,opt,name=response_code,json=responseCode,enum=tf2.CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse,def=1" json:"response_code,omitempty"`
}

// Default values for CMsgGC_Client_UseServerModificationItem_Response fields.
const (
	Default_CMsgGC_Client_UseServerModificationItem_Response_ResponseCode = CMsgGC_Client_UseServerModificationItem_Response_kServerModificationItemResponse_AlreadyInUse
)

func (x *CMsgGC_Client_UseServerModificationItem_Response) Reset() {
	*x = CMsgGC_Client_UseServerModificationItem_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Client_UseServerModificationItem_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Client_UseServerModificationItem_Response) ProtoMessage() {}

func (x *CMsgGC_Client_UseServerModificationItem_Response) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Client_UseServerModificationItem_Response.ProtoReflect.Descriptor instead.
func (*CMsgGC_Client_UseServerModificationItem_Response) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgGC_Client_UseServerModificationItem_Response) GetResponseCode() CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse {
	if x != nil && x.ResponseCode != nil {
		return *x.ResponseCode
	}
	return Default_CMsgGC_Client_UseServerModificationItem_Response_ResponseCode
}

type CMsgGC_GameServer_UseServerModificationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModificationType *EServerModificationItemType `protobuf:"varint,1,opt,name=modification_type,json=modificationType,enum=tf2.EServerModificationItemType,def=1" json:"modification_type,omitempty"`
}

// Default values for CMsgGC_GameServer_UseServerModificationItem fields.
const (
	Default_CMsgGC_GameServer_UseServerModificationItem_ModificationType = EServerModificationItemType_kGameServerModificationItem_Halloween
)

func (x *CMsgGC_GameServer_UseServerModificationItem) Reset() {
	*x = CMsgGC_GameServer_UseServerModificationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_UseServerModificationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_UseServerModificationItem) ProtoMessage() {}

func (x *CMsgGC_GameServer_UseServerModificationItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_UseServerModificationItem.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_UseServerModificationItem) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgGC_GameServer_UseServerModificationItem) GetModificationType() EServerModificationItemType {
	if x != nil && x.ModificationType != nil {
		return *x.ModificationType
	}
	return Default_CMsgGC_GameServer_UseServerModificationItem_ModificationType
}

type CMsgGC_GameServer_UseServerModificationItem_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModificationType   *EServerModificationItemType                                                                `protobuf:"varint,1,opt,name=modification_type,json=modificationType,enum=tf2.EServerModificationItemType,def=1" json:"modification_type,omitempty"`
	ServerResponseCode *CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse `protobuf:"varint,2,opt,name=server_response_code,json=serverResponseCode,enum=tf2.CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse,def=1" json:"server_response_code,omitempty"`
}

// Default values for CMsgGC_GameServer_UseServerModificationItem_Response fields.
const (
	Default_CMsgGC_GameServer_UseServerModificationItem_Response_ModificationType   = EServerModificationItemType_kGameServerModificationItem_Halloween
	Default_CMsgGC_GameServer_UseServerModificationItem_Response_ServerResponseCode = CMsgGC_GameServer_UseServerModificationItem_Response_kServerModificationItemServerResponse_Accepted
)

func (x *CMsgGC_GameServer_UseServerModificationItem_Response) Reset() {
	*x = CMsgGC_GameServer_UseServerModificationItem_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_UseServerModificationItem_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_UseServerModificationItem_Response) ProtoMessage() {}

func (x *CMsgGC_GameServer_UseServerModificationItem_Response) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_UseServerModificationItem_Response.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_UseServerModificationItem_Response) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgGC_GameServer_UseServerModificationItem_Response) GetModificationType() EServerModificationItemType {
	if x != nil && x.ModificationType != nil {
		return *x.ModificationType
	}
	return Default_CMsgGC_GameServer_UseServerModificationItem_Response_ModificationType
}

func (x *CMsgGC_GameServer_UseServerModificationItem_Response) GetServerResponseCode() CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse {
	if x != nil && x.ServerResponseCode != nil {
		return *x.ServerResponseCode
	}
	return Default_CMsgGC_GameServer_UseServerModificationItem_Response_ServerResponseCode
}

type CMsgGC_GameServer_ServerModificationItemExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModificationType *EServerModificationItemType `protobuf:"varint,1,opt,name=modification_type,json=modificationType,enum=tf2.EServerModificationItemType,def=1" json:"modification_type,omitempty"`
}

// Default values for CMsgGC_GameServer_ServerModificationItemExpired fields.
const (
	Default_CMsgGC_GameServer_ServerModificationItemExpired_ModificationType = EServerModificationItemType_kGameServerModificationItem_Halloween
)

func (x *CMsgGC_GameServer_ServerModificationItemExpired) Reset() {
	*x = CMsgGC_GameServer_ServerModificationItemExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ServerModificationItemExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ServerModificationItemExpired) ProtoMessage() {}

func (x *CMsgGC_GameServer_ServerModificationItemExpired) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ServerModificationItemExpired.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ServerModificationItemExpired) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgGC_GameServer_ServerModificationItemExpired) GetModificationType() EServerModificationItemType {
	if x != nil && x.ModificationType != nil {
		return *x.ModificationType
	}
	return Default_CMsgGC_GameServer_ServerModificationItemExpired_ModificationType
}

type CMsgGC_GameServer_ServerModificationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModificationType *EServerModificationItemType `protobuf:"varint,1,opt,name=modification_type,json=modificationType,enum=tf2.EServerModificationItemType,def=1" json:"modification_type,omitempty"`
	Active           *bool                        `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
}

// Default values for CMsgGC_GameServer_ServerModificationItem fields.
const (
	Default_CMsgGC_GameServer_ServerModificationItem_ModificationType = EServerModificationItemType_kGameServerModificationItem_Halloween
)

func (x *CMsgGC_GameServer_ServerModificationItem) Reset() {
	*x = CMsgGC_GameServer_ServerModificationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ServerModificationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ServerModificationItem) ProtoMessage() {}

func (x *CMsgGC_GameServer_ServerModificationItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ServerModificationItem.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ServerModificationItem) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgGC_GameServer_ServerModificationItem) GetModificationType() EServerModificationItemType {
	if x != nil && x.ModificationType != nil {
		return *x.ModificationType
	}
	return Default_CMsgGC_GameServer_ServerModificationItem_ModificationType
}

func (x *CMsgGC_GameServer_ServerModificationItem) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type CMsgGC_Halloween_ReservedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             []float32 `protobuf:"fixed32,1,rep,name=x" json:"x,omitempty"`
	Y             []float32 `protobuf:"fixed32,2,rep,name=y" json:"y,omitempty"`
	Z             []float32 `protobuf:"fixed32,3,rep,name=z" json:"z,omitempty"`
	SpawnMetaInfo *uint32   `protobuf:"varint,7,opt,name=spawn_meta_info,json=spawnMetaInfo" json:"spawn_meta_info,omitempty"`
}

func (x *CMsgGC_Halloween_ReservedItem) Reset() {
	*x = CMsgGC_Halloween_ReservedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Halloween_ReservedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Halloween_ReservedItem) ProtoMessage() {}

func (x *CMsgGC_Halloween_ReservedItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Halloween_ReservedItem.ProtoReflect.Descriptor instead.
func (*CMsgGC_Halloween_ReservedItem) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgGC_Halloween_ReservedItem) GetX() []float32 {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *CMsgGC_Halloween_ReservedItem) GetY() []float32 {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *CMsgGC_Halloween_ReservedItem) GetZ() []float32 {
	if x != nil {
		return x.Z
	}
	return nil
}

func (x *CMsgGC_Halloween_ReservedItem) GetSpawnMetaInfo() uint32 {
	if x != nil && x.SpawnMetaInfo != nil {
		return *x.SpawnMetaInfo
	}
	return 0
}

type CMsgGC_Halloween_GrantItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientAccountId *uint32 `protobuf:"varint,1,opt,name=recipient_account_id,json=recipientAccountId" json:"recipient_account_id,omitempty"`
	LevelId            *uint32 `protobuf:"varint,2,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
	Flagged            *bool   `protobuf:"varint,3,opt,name=flagged" json:"flagged,omitempty"`
}

func (x *CMsgGC_Halloween_GrantItem) Reset() {
	*x = CMsgGC_Halloween_GrantItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Halloween_GrantItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Halloween_GrantItem) ProtoMessage() {}

func (x *CMsgGC_Halloween_GrantItem) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Halloween_GrantItem.ProtoReflect.Descriptor instead.
func (*CMsgGC_Halloween_GrantItem) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgGC_Halloween_GrantItem) GetRecipientAccountId() uint32 {
	if x != nil && x.RecipientAccountId != nil {
		return *x.RecipientAccountId
	}
	return 0
}

func (x *CMsgGC_Halloween_GrantItem) GetLevelId() uint32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

func (x *CMsgGC_Halloween_GrantItem) GetFlagged() bool {
	if x != nil && x.Flagged != nil {
		return *x.Flagged
	}
	return false
}

type CMsgGC_Halloween_GrantItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientAccountId *uint32 `protobuf:"varint,1,opt,name=recipient_account_id,json=recipientAccountId" json:"recipient_account_id,omitempty"`
}

func (x *CMsgGC_Halloween_GrantItemResponse) Reset() {
	*x = CMsgGC_Halloween_GrantItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Halloween_GrantItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Halloween_GrantItemResponse) ProtoMessage() {}

func (x *CMsgGC_Halloween_GrantItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Halloween_GrantItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_Halloween_GrantItemResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgGC_Halloween_GrantItemResponse) GetRecipientAccountId() uint32 {
	if x != nil && x.RecipientAccountId != nil {
		return *x.RecipientAccountId
	}
	return 0
}

type CMsgGC_Halloween_ItemClaimed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGC_Halloween_ItemClaimed) Reset() {
	*x = CMsgGC_Halloween_ItemClaimed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Halloween_ItemClaimed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Halloween_ItemClaimed) ProtoMessage() {}

func (x *CMsgGC_Halloween_ItemClaimed) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Halloween_ItemClaimed.ProtoReflect.Descriptor instead.
func (*CMsgGC_Halloween_ItemClaimed) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{52}
}

type CMsgGC_PickupItemEligibility_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SecondsAgo *uint32 `protobuf:"varint,2,opt,name=seconds_ago,json=secondsAgo" json:"seconds_ago,omitempty"`
}

func (x *CMsgGC_PickupItemEligibility_Query) Reset() {
	*x = CMsgGC_PickupItemEligibility_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_PickupItemEligibility_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_PickupItemEligibility_Query) ProtoMessage() {}

func (x *CMsgGC_PickupItemEligibility_Query) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_PickupItemEligibility_Query.ProtoReflect.Descriptor instead.
func (*CMsgGC_PickupItemEligibility_Query) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgGC_PickupItemEligibility_Query) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGC_PickupItemEligibility_Query) GetSecondsAgo() uint32 {
	if x != nil && x.SecondsAgo != nil {
		return *x.SecondsAgo
	}
	return 0
}

type CMsgGC_PickupItemEligibility_QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WasEligible *bool   `protobuf:"varint,2,opt,name=was_eligible,json=wasEligible" json:"was_eligible,omitempty"`
	LevelId     *uint32 `protobuf:"varint,3,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) Reset() {
	*x = CMsgGC_PickupItemEligibility_QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_PickupItemEligibility_QueryResponse) ProtoMessage() {}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_PickupItemEligibility_QueryResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_PickupItemEligibility_QueryResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) GetWasEligible() bool {
	if x != nil && x.WasEligible != nil {
		return *x.WasEligible
	}
	return false
}

func (x *CMsgGC_PickupItemEligibility_QueryResponse) GetLevelId() uint32 {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return 0
}

type CSOTFPartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnsTicket        *bool                           `protobuf:"varint,2,opt,name=owns_ticket,json=ownsTicket" json:"owns_ticket,omitempty"`
	CompletedMissions *uint32                         `protobuf:"varint,3,opt,name=completed_missions,json=completedMissions" json:"completed_missions,omitempty"`
	BadgeLevel        *uint32                         `protobuf:"varint,4,opt,name=badge_level,json=badgeLevel" json:"badge_level,omitempty"`
	CompetitiveAccess *bool                           `protobuf:"varint,9,opt,name=competitive_access,json=competitiveAccess" json:"competitive_access,omitempty"`
	Experience        *uint32                         `protobuf:"varint,14,opt,name=experience" json:"experience,omitempty"`
	PlayerCriteria    *CTFPerPlayerMatchCriteriaProto `protobuf:"bytes,16,opt,name=player_criteria,json=playerCriteria" json:"player_criteria,omitempty"`
	Activity          *CSOTFPartyMember_Activity      `protobuf:"bytes,17,opt,name=activity" json:"activity,omitempty"`
	CasualBanned      *bool                           `protobuf:"varint,18,opt,name=casual_banned,json=casualBanned" json:"casual_banned,omitempty"`
	RankedBanned      *bool                           `protobuf:"varint,19,opt,name=ranked_banned,json=rankedBanned" json:"ranked_banned,omitempty"`
	CasualLowPriority *bool                           `protobuf:"varint,20,opt,name=casual_low_priority,json=casualLowPriority" json:"casual_low_priority,omitempty"`
	RankedLowPriority *bool                           `protobuf:"varint,21,opt,name=ranked_low_priority,json=rankedLowPriority" json:"ranked_low_priority,omitempty"`
	LobbyStandby      *bool                           `protobuf:"varint,22,opt,name=lobby_standby,json=lobbyStandby" json:"lobby_standby,omitempty"`
}

func (x *CSOTFPartyMember) Reset() {
	*x = CSOTFPartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFPartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFPartyMember) ProtoMessage() {}

func (x *CSOTFPartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFPartyMember.ProtoReflect.Descriptor instead.
func (*CSOTFPartyMember) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{55}
}

func (x *CSOTFPartyMember) GetOwnsTicket() bool {
	if x != nil && x.OwnsTicket != nil {
		return *x.OwnsTicket
	}
	return false
}

func (x *CSOTFPartyMember) GetCompletedMissions() uint32 {
	if x != nil && x.CompletedMissions != nil {
		return *x.CompletedMissions
	}
	return 0
}

func (x *CSOTFPartyMember) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

func (x *CSOTFPartyMember) GetCompetitiveAccess() bool {
	if x != nil && x.CompetitiveAccess != nil {
		return *x.CompetitiveAccess
	}
	return false
}

func (x *CSOTFPartyMember) GetExperience() uint32 {
	if x != nil && x.Experience != nil {
		return *x.Experience
	}
	return 0
}

func (x *CSOTFPartyMember) GetPlayerCriteria() *CTFPerPlayerMatchCriteriaProto {
	if x != nil {
		return x.PlayerCriteria
	}
	return nil
}

func (x *CSOTFPartyMember) GetActivity() *CSOTFPartyMember_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CSOTFPartyMember) GetCasualBanned() bool {
	if x != nil && x.CasualBanned != nil {
		return *x.CasualBanned
	}
	return false
}

func (x *CSOTFPartyMember) GetRankedBanned() bool {
	if x != nil && x.RankedBanned != nil {
		return *x.RankedBanned
	}
	return false
}

func (x *CSOTFPartyMember) GetCasualLowPriority() bool {
	if x != nil && x.CasualLowPriority != nil {
		return *x.CasualLowPriority
	}
	return false
}

func (x *CSOTFPartyMember) GetRankedLowPriority() bool {
	if x != nil && x.RankedLowPriority != nil {
		return *x.RankedLowPriority
	}
	return false
}

func (x *CSOTFPartyMember) GetLobbyStandby() bool {
	if x != nil && x.LobbyStandby != nil {
		return *x.LobbyStandby
	}
	return false
}

type TFPendingPartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64                     `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Type    *TFPendingPartyMember_EType `protobuf:"varint,2,opt,name=type,enum=tf2.TFPendingPartyMember_EType,def=0" json:"type,omitempty"`
	Inviter *uint64                     `protobuf:"fixed64,3,opt,name=inviter" json:"inviter,omitempty"`
}

// Default values for TFPendingPartyMember fields.
const (
	Default_TFPendingPartyMember_Type = TFPendingPartyMember_Invited
)

func (x *TFPendingPartyMember) Reset() {
	*x = TFPendingPartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFPendingPartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFPendingPartyMember) ProtoMessage() {}

func (x *TFPendingPartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFPendingPartyMember.ProtoReflect.Descriptor instead.
func (*TFPendingPartyMember) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{56}
}

func (x *TFPendingPartyMember) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *TFPendingPartyMember) GetType() TFPendingPartyMember_EType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TFPendingPartyMember_Type
}

func (x *TFPendingPartyMember) GetInviter() uint64 {
	if x != nil && x.Inviter != nil {
		return *x.Inviter
	}
	return 0
}

type TFSyncedMMUIState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MenuStep   *ETFSyncedMMMenuStep `protobuf:"varint,1,opt,name=menu_step,json=menuStep,enum=tf2.ETFSyncedMMMenuStep,def=0" json:"menu_step,omitempty"`
	MatchGroup *ETFMatchGroup       `protobuf:"varint,2,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
}

// Default values for TFSyncedMMUIState fields.
const (
	Default_TFSyncedMMUIState_MenuStep   = ETFSyncedMMMenuStep_k_eTFSyncedMMMenuStep_None
	Default_TFSyncedMMUIState_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *TFSyncedMMUIState) Reset() {
	*x = TFSyncedMMUIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFSyncedMMUIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFSyncedMMUIState) ProtoMessage() {}

func (x *TFSyncedMMUIState) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFSyncedMMUIState.ProtoReflect.Descriptor instead.
func (*TFSyncedMMUIState) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{57}
}

func (x *TFSyncedMMUIState) GetMenuStep() ETFSyncedMMMenuStep {
	if x != nil && x.MenuStep != nil {
		return *x.MenuStep
	}
	return Default_TFSyncedMMUIState_MenuStep
}

func (x *TFSyncedMMUIState) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_TFSyncedMMUIState_MatchGroup
}

type CTFGroupMatchCriteriaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LateJoinOk          *bool                   `protobuf:"varint,5,opt,name=late_join_ok,json=lateJoinOk" json:"late_join_ok,omitempty"`
	CustomPingTolerance *uint32                 `protobuf:"varint,13,opt,name=custom_ping_tolerance,json=customPingTolerance,def=0" json:"custom_ping_tolerance,omitempty"`
	MvmMannupTour       *string                 `protobuf:"bytes,10,opt,name=mvm_mannup_tour,json=mvmMannupTour" json:"mvm_mannup_tour,omitempty"`
	MvmMannupMissions   []string                `protobuf:"bytes,15,rep,name=mvm_mannup_missions,json=mvmMannupMissions" json:"mvm_mannup_missions,omitempty"`
	MvmBootcampMissions []string                `protobuf:"bytes,16,rep,name=mvm_bootcamp_missions,json=mvmBootcampMissions" json:"mvm_bootcamp_missions,omitempty"`
	CasualCriteria      *CTFCasualMatchCriteria `protobuf:"bytes,12,opt,name=casual_criteria,json=casualCriteria" json:"casual_criteria,omitempty"`
}

// Default values for CTFGroupMatchCriteriaProto fields.
const (
	Default_CTFGroupMatchCriteriaProto_CustomPingTolerance = uint32(0)
)

func (x *CTFGroupMatchCriteriaProto) Reset() {
	*x = CTFGroupMatchCriteriaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFGroupMatchCriteriaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFGroupMatchCriteriaProto) ProtoMessage() {}

func (x *CTFGroupMatchCriteriaProto) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFGroupMatchCriteriaProto.ProtoReflect.Descriptor instead.
func (*CTFGroupMatchCriteriaProto) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{58}
}

func (x *CTFGroupMatchCriteriaProto) GetLateJoinOk() bool {
	if x != nil && x.LateJoinOk != nil {
		return *x.LateJoinOk
	}
	return false
}

func (x *CTFGroupMatchCriteriaProto) GetCustomPingTolerance() uint32 {
	if x != nil && x.CustomPingTolerance != nil {
		return *x.CustomPingTolerance
	}
	return Default_CTFGroupMatchCriteriaProto_CustomPingTolerance
}

func (x *CTFGroupMatchCriteriaProto) GetMvmMannupTour() string {
	if x != nil && x.MvmMannupTour != nil {
		return *x.MvmMannupTour
	}
	return ""
}

func (x *CTFGroupMatchCriteriaProto) GetMvmMannupMissions() []string {
	if x != nil {
		return x.MvmMannupMissions
	}
	return nil
}

func (x *CTFGroupMatchCriteriaProto) GetMvmBootcampMissions() []string {
	if x != nil {
		return x.MvmBootcampMissions
	}
	return nil
}

func (x *CTFGroupMatchCriteriaProto) GetCasualCriteria() *CTFCasualMatchCriteria {
	if x != nil {
		return x.CasualCriteria
	}
	return nil
}

type CTFCasualMatchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedMapsBits []uint32 `protobuf:"fixed32,3,rep,name=selected_maps_bits,json=selectedMapsBits" json:"selected_maps_bits,omitempty"`
}

func (x *CTFCasualMatchCriteria) Reset() {
	*x = CTFCasualMatchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFCasualMatchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFCasualMatchCriteria) ProtoMessage() {}

func (x *CTFCasualMatchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFCasualMatchCriteria.ProtoReflect.Descriptor instead.
func (*CTFCasualMatchCriteria) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{59}
}

func (x *CTFCasualMatchCriteria) GetSelectedMapsBits() []uint32 {
	if x != nil {
		return x.SelectedMapsBits
	}
	return nil
}

type CTFPerPlayerMatchCriteriaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MvmSquadSurplus *bool `protobuf:"varint,1,opt,name=mvm_squad_surplus,json=mvmSquadSurplus" json:"mvm_squad_surplus,omitempty"`
}

func (x *CTFPerPlayerMatchCriteriaProto) Reset() {
	*x = CTFPerPlayerMatchCriteriaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFPerPlayerMatchCriteriaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFPerPlayerMatchCriteriaProto) ProtoMessage() {}

func (x *CTFPerPlayerMatchCriteriaProto) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFPerPlayerMatchCriteriaProto.ProtoReflect.Descriptor instead.
func (*CTFPerPlayerMatchCriteriaProto) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{60}
}

func (x *CTFPerPlayerMatchCriteriaProto) GetMvmSquadSurplus() bool {
	if x != nil && x.MvmSquadSurplus != nil {
		return *x.MvmSquadSurplus
	}
	return false
}

type CTFPartyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverwriteExisting *bool                           `protobuf:"varint,1,opt,name=overwrite_existing,json=overwriteExisting" json:"overwrite_existing,omitempty"`
	GroupCriteria     *CTFGroupMatchCriteriaProto     `protobuf:"bytes,2,opt,name=group_criteria,json=groupCriteria" json:"group_criteria,omitempty"`
	PlayerCriteria    *CTFPerPlayerMatchCriteriaProto `protobuf:"bytes,3,opt,name=player_criteria,json=playerCriteria" json:"player_criteria,omitempty"`
	PlayerUistate     *TFSyncedMMUIState              `protobuf:"bytes,5,opt,name=player_uistate,json=playerUistate" json:"player_uistate,omitempty"`
}

func (x *CTFPartyOptions) Reset() {
	*x = CTFPartyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFPartyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFPartyOptions) ProtoMessage() {}

func (x *CTFPartyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFPartyOptions.ProtoReflect.Descriptor instead.
func (*CTFPartyOptions) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{61}
}

func (x *CTFPartyOptions) GetOverwriteExisting() bool {
	if x != nil && x.OverwriteExisting != nil {
		return *x.OverwriteExisting
	}
	return false
}

func (x *CTFPartyOptions) GetGroupCriteria() *CTFGroupMatchCriteriaProto {
	if x != nil {
		return x.GroupCriteria
	}
	return nil
}

func (x *CTFPartyOptions) GetPlayerCriteria() *CTFPerPlayerMatchCriteriaProto {
	if x != nil {
		return x.PlayerCriteria
	}
	return nil
}

func (x *CTFPartyOptions) GetPlayerUistate() *TFSyncedMMUIState {
	if x != nil {
		return x.PlayerUistate
	}
	return nil
}

type CMsgPartySetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64          `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Options *CTFPartyOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (x *CMsgPartySetOptions) Reset() {
	*x = CMsgPartySetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartySetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartySetOptions) ProtoMessage() {}

func (x *CMsgPartySetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartySetOptions.ProtoReflect.Descriptor instead.
func (*CMsgPartySetOptions) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgPartySetOptions) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartySetOptions) GetOptions() *CTFPartyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type CMsgPartySetOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartySetOptionsResponse) Reset() {
	*x = CMsgPartySetOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartySetOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartySetOptionsResponse) ProtoMessage() {}

func (x *CMsgPartySetOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartySetOptionsResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartySetOptionsResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{63}
}

type CMsgPartyQueueForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId      *uint64          `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	FinalOptions *CTFPartyOptions `protobuf:"bytes,2,opt,name=final_options,json=finalOptions" json:"final_options,omitempty"`
	MatchGroup   *ETFMatchGroup   `protobuf:"varint,3,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
}

// Default values for CMsgPartyQueueForMatch fields.
const (
	Default_CMsgPartyQueueForMatch_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CMsgPartyQueueForMatch) Reset() {
	*x = CMsgPartyQueueForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyQueueForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyQueueForMatch) ProtoMessage() {}

func (x *CMsgPartyQueueForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyQueueForMatch.ProtoReflect.Descriptor instead.
func (*CMsgPartyQueueForMatch) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgPartyQueueForMatch) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyQueueForMatch) GetFinalOptions() *CTFPartyOptions {
	if x != nil {
		return x.FinalOptions
	}
	return nil
}

func (x *CMsgPartyQueueForMatch) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CMsgPartyQueueForMatch_MatchGroup
}

type CMsgPartyQueueForMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyQueueForMatchResponse) Reset() {
	*x = CMsgPartyQueueForMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyQueueForMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyQueueForMatchResponse) ProtoMessage() {}

func (x *CMsgPartyQueueForMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyQueueForMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyQueueForMatchResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{65}
}

type CMsgPartyQueueForStandby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId      *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	PartyLobbyId *uint64 `protobuf:"fixed64,2,opt,name=party_lobby_id,json=partyLobbyId" json:"party_lobby_id,omitempty"`
}

func (x *CMsgPartyQueueForStandby) Reset() {
	*x = CMsgPartyQueueForStandby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyQueueForStandby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyQueueForStandby) ProtoMessage() {}

func (x *CMsgPartyQueueForStandby) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyQueueForStandby.ProtoReflect.Descriptor instead.
func (*CMsgPartyQueueForStandby) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgPartyQueueForStandby) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyQueueForStandby) GetPartyLobbyId() uint64 {
	if x != nil && x.PartyLobbyId != nil {
		return *x.PartyLobbyId
	}
	return 0
}

type CMsgPartyQueueForStandbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyQueueForStandbyResponse) Reset() {
	*x = CMsgPartyQueueForStandbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyQueueForStandbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyQueueForStandbyResponse) ProtoMessage() {}

func (x *CMsgPartyQueueForStandbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyQueueForStandbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyQueueForStandbyResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{67}
}

type CMsgPartyRemoveFromQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId    *uint64        `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MatchGroup *ETFMatchGroup `protobuf:"varint,2,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
}

// Default values for CMsgPartyRemoveFromQueue fields.
const (
	Default_CMsgPartyRemoveFromQueue_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CMsgPartyRemoveFromQueue) Reset() {
	*x = CMsgPartyRemoveFromQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyRemoveFromQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyRemoveFromQueue) ProtoMessage() {}

func (x *CMsgPartyRemoveFromQueue) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyRemoveFromQueue.ProtoReflect.Descriptor instead.
func (*CMsgPartyRemoveFromQueue) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgPartyRemoveFromQueue) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyRemoveFromQueue) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CMsgPartyRemoveFromQueue_MatchGroup
}

type CMsgPartyRemoveFromQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyRemoveFromQueueResponse) Reset() {
	*x = CMsgPartyRemoveFromQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyRemoveFromQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyRemoveFromQueueResponse) ProtoMessage() {}

func (x *CMsgPartyRemoveFromQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyRemoveFromQueueResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyRemoveFromQueueResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{69}
}

type CMsgPartyRemoveFromStandbyQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

func (x *CMsgPartyRemoveFromStandbyQueue) Reset() {
	*x = CMsgPartyRemoveFromStandbyQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyRemoveFromStandbyQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyRemoveFromStandbyQueue) ProtoMessage() {}

func (x *CMsgPartyRemoveFromStandbyQueue) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyRemoveFromStandbyQueue.ProtoReflect.Descriptor instead.
func (*CMsgPartyRemoveFromStandbyQueue) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgPartyRemoveFromStandbyQueue) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgPartyRemoveFromStandbyQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyRemoveFromStandbyQueueResponse) Reset() {
	*x = CMsgPartyRemoveFromStandbyQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyRemoveFromStandbyQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyRemoveFromStandbyQueueResponse) ProtoMessage() {}

func (x *CMsgPartyRemoveFromStandbyQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyRemoveFromStandbyQueueResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyRemoveFromStandbyQueueResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{71}
}

type CMsgPartyInvitePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId                *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	PlayerId               *uint64 `protobuf:"fixed64,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	ExpectingRequestToJoin *bool   `protobuf:"varint,3,opt,name=expecting_request_to_join,json=expectingRequestToJoin" json:"expecting_request_to_join,omitempty"`
}

func (x *CMsgPartyInvitePlayer) Reset() {
	*x = CMsgPartyInvitePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyInvitePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyInvitePlayer) ProtoMessage() {}

func (x *CMsgPartyInvitePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyInvitePlayer.ProtoReflect.Descriptor instead.
func (*CMsgPartyInvitePlayer) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgPartyInvitePlayer) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyInvitePlayer) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgPartyInvitePlayer) GetExpectingRequestToJoin() bool {
	if x != nil && x.ExpectingRequestToJoin != nil {
		return *x.ExpectingRequestToJoin
	}
	return false
}

type CMsgPartyRequestJoinPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPartyId  *uint64 `protobuf:"fixed64,1,opt,name=current_party_id,json=currentPartyId" json:"current_party_id,omitempty"`
	JoinPlayerId    *uint64 `protobuf:"fixed64,2,opt,name=join_player_id,json=joinPlayerId" json:"join_player_id,omitempty"`
	JoinPartyId     *uint64 `protobuf:"fixed64,3,opt,name=join_party_id,json=joinPartyId" json:"join_party_id,omitempty"`
	ExpectingInvite *bool   `protobuf:"varint,4,opt,name=expecting_invite,json=expectingInvite" json:"expecting_invite,omitempty"`
}

func (x *CMsgPartyRequestJoinPlayer) Reset() {
	*x = CMsgPartyRequestJoinPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyRequestJoinPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyRequestJoinPlayer) ProtoMessage() {}

func (x *CMsgPartyRequestJoinPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyRequestJoinPlayer.ProtoReflect.Descriptor instead.
func (*CMsgPartyRequestJoinPlayer) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgPartyRequestJoinPlayer) GetCurrentPartyId() uint64 {
	if x != nil && x.CurrentPartyId != nil {
		return *x.CurrentPartyId
	}
	return 0
}

func (x *CMsgPartyRequestJoinPlayer) GetJoinPlayerId() uint64 {
	if x != nil && x.JoinPlayerId != nil {
		return *x.JoinPlayerId
	}
	return 0
}

func (x *CMsgPartyRequestJoinPlayer) GetJoinPartyId() uint64 {
	if x != nil && x.JoinPartyId != nil {
		return *x.JoinPartyId
	}
	return 0
}

func (x *CMsgPartyRequestJoinPlayer) GetExpectingInvite() bool {
	if x != nil && x.ExpectingInvite != nil {
		return *x.ExpectingInvite
	}
	return false
}

type CMsgPartyClearPendingPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId         *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	PendingPlayerId *uint64 `protobuf:"fixed64,2,opt,name=pending_player_id,json=pendingPlayerId" json:"pending_player_id,omitempty"`
}

func (x *CMsgPartyClearPendingPlayer) Reset() {
	*x = CMsgPartyClearPendingPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyClearPendingPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyClearPendingPlayer) ProtoMessage() {}

func (x *CMsgPartyClearPendingPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyClearPendingPlayer.ProtoReflect.Descriptor instead.
func (*CMsgPartyClearPendingPlayer) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgPartyClearPendingPlayer) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyClearPendingPlayer) GetPendingPlayerId() uint64 {
	if x != nil && x.PendingPlayerId != nil {
		return *x.PendingPlayerId
	}
	return 0
}

type CMsgPartyClearPendingPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyClearPendingPlayerResponse) Reset() {
	*x = CMsgPartyClearPendingPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyClearPendingPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyClearPendingPlayerResponse) ProtoMessage() {}

func (x *CMsgPartyClearPendingPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyClearPendingPlayerResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyClearPendingPlayerResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{75}
}

type CMsgPartyClearOtherPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherPartyId *uint64 `protobuf:"fixed64,1,opt,name=other_party_id,json=otherPartyId" json:"other_party_id,omitempty"`
}

func (x *CMsgPartyClearOtherPartyRequest) Reset() {
	*x = CMsgPartyClearOtherPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyClearOtherPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyClearOtherPartyRequest) ProtoMessage() {}

func (x *CMsgPartyClearOtherPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyClearOtherPartyRequest.ProtoReflect.Descriptor instead.
func (*CMsgPartyClearOtherPartyRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgPartyClearOtherPartyRequest) GetOtherPartyId() uint64 {
	if x != nil && x.OtherPartyId != nil {
		return *x.OtherPartyId
	}
	return 0
}

type CMsgPartyClearOtherPartyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyClearOtherPartyRequestResponse) Reset() {
	*x = CMsgPartyClearOtherPartyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyClearOtherPartyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyClearOtherPartyRequestResponse) ProtoMessage() {}

func (x *CMsgPartyClearOtherPartyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyClearOtherPartyRequestResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyClearOtherPartyRequestResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{77}
}

type CMsgPartyPromoteToLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId     *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	NewLeaderId *uint64 `protobuf:"fixed64,2,opt,name=new_leader_id,json=newLeaderId" json:"new_leader_id,omitempty"`
}

func (x *CMsgPartyPromoteToLeader) Reset() {
	*x = CMsgPartyPromoteToLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyPromoteToLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyPromoteToLeader) ProtoMessage() {}

func (x *CMsgPartyPromoteToLeader) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyPromoteToLeader.ProtoReflect.Descriptor instead.
func (*CMsgPartyPromoteToLeader) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgPartyPromoteToLeader) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyPromoteToLeader) GetNewLeaderId() uint64 {
	if x != nil && x.NewLeaderId != nil {
		return *x.NewLeaderId
	}
	return 0
}

type CMsgPartyKickMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId  *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	TargetId *uint64 `protobuf:"fixed64,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

func (x *CMsgPartyKickMember) Reset() {
	*x = CMsgPartyKickMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyKickMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyKickMember) ProtoMessage() {}

func (x *CMsgPartyKickMember) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyKickMember.ProtoReflect.Descriptor instead.
func (*CMsgPartyKickMember) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgPartyKickMember) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartyKickMember) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type CMsgPartySendChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Msg     *string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *CMsgPartySendChat) Reset() {
	*x = CMsgPartySendChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartySendChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartySendChat) ProtoMessage() {}

func (x *CMsgPartySendChat) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartySendChat.ProtoReflect.Descriptor instead.
func (*CMsgPartySendChat) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgPartySendChat) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgPartySendChat) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type CMsgPartyChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *ETFPartyChatType `protobuf:"varint,1,opt,name=type,enum=tf2.ETFPartyChatType,def=0" json:"type,omitempty"`
	ActorId *uint64           `protobuf:"fixed64,2,opt,name=actor_id,json=actorId" json:"actor_id,omitempty"`
	Msg     *string           `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

// Default values for CMsgPartyChatMsg fields.
const (
	Default_CMsgPartyChatMsg_Type = ETFPartyChatType_k_eTFPartyChatType_Invalid
)

func (x *CMsgPartyChatMsg) Reset() {
	*x = CMsgPartyChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyChatMsg) ProtoMessage() {}

func (x *CMsgPartyChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgPartyChatMsg) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgPartyChatMsg) GetType() ETFPartyChatType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgPartyChatMsg_Type
}

func (x *CMsgPartyChatMsg) GetActorId() uint64 {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return 0
}

func (x *CMsgPartyChatMsg) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type CSOTFParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId                   *uint64                     `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                  *uint64                     `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                 []uint64                    `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	Members                   []*CSOTFPartyMember         `protobuf:"bytes,13,rep,name=members" json:"members,omitempty"`
	AssociatedLobbyId         *uint64                     `protobuf:"varint,35,opt,name=associated_lobby_id,json=associatedLobbyId" json:"associated_lobby_id,omitempty"`
	AssociatedLobbyMatchGroup *ETFMatchGroup              `protobuf:"varint,40,opt,name=associated_lobby_match_group,json=associatedLobbyMatchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"associated_lobby_match_group,omitempty"`
	MatchmakingQueues         []*CSOTFParty_QueueEntry    `protobuf:"bytes,43,rep,name=matchmaking_queues,json=matchmakingQueues" json:"matchmaking_queues,omitempty"`
	GroupCriteria             *CTFGroupMatchCriteriaProto `protobuf:"bytes,37,opt,name=group_criteria,json=groupCriteria" json:"group_criteria,omitempty"`
	CasualBannedTime          *uint32                     `protobuf:"varint,18,opt,name=casual_banned_time,json=casualBannedTime" json:"casual_banned_time,omitempty"`
	CasualLowPriorityTime     *uint32                     `protobuf:"varint,20,opt,name=casual_low_priority_time,json=casualLowPriorityTime" json:"casual_low_priority_time,omitempty"`
	RankedBannedTime          *uint32                     `protobuf:"varint,41,opt,name=ranked_banned_time,json=rankedBannedTime" json:"ranked_banned_time,omitempty"`
	RankedLowPriorityTime     *uint32                     `protobuf:"varint,42,opt,name=ranked_low_priority_time,json=rankedLowPriorityTime" json:"ranked_low_priority_time,omitempty"`
	LeaderUiState             *TFSyncedMMUIState          `protobuf:"bytes,44,opt,name=leader_ui_state,json=leaderUiState" json:"leader_ui_state,omitempty"`
	PendingMembers            []*TFPendingPartyMember     `protobuf:"bytes,39,rep,name=pending_members,json=pendingMembers" json:"pending_members,omitempty"`
}

// Default values for CSOTFParty fields.
const (
	Default_CSOTFParty_AssociatedLobbyMatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CSOTFParty) Reset() {
	*x = CSOTFParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFParty) ProtoMessage() {}

func (x *CSOTFParty) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFParty.ProtoReflect.Descriptor instead.
func (*CSOTFParty) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{82}
}

func (x *CSOTFParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSOTFParty) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSOTFParty) GetMemberIds() []uint64 {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *CSOTFParty) GetMembers() []*CSOTFPartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSOTFParty) GetAssociatedLobbyId() uint64 {
	if x != nil && x.AssociatedLobbyId != nil {
		return *x.AssociatedLobbyId
	}
	return 0
}

func (x *CSOTFParty) GetAssociatedLobbyMatchGroup() ETFMatchGroup {
	if x != nil && x.AssociatedLobbyMatchGroup != nil {
		return *x.AssociatedLobbyMatchGroup
	}
	return Default_CSOTFParty_AssociatedLobbyMatchGroup
}

func (x *CSOTFParty) GetMatchmakingQueues() []*CSOTFParty_QueueEntry {
	if x != nil {
		return x.MatchmakingQueues
	}
	return nil
}

func (x *CSOTFParty) GetGroupCriteria() *CTFGroupMatchCriteriaProto {
	if x != nil {
		return x.GroupCriteria
	}
	return nil
}

func (x *CSOTFParty) GetCasualBannedTime() uint32 {
	if x != nil && x.CasualBannedTime != nil {
		return *x.CasualBannedTime
	}
	return 0
}

func (x *CSOTFParty) GetCasualLowPriorityTime() uint32 {
	if x != nil && x.CasualLowPriorityTime != nil {
		return *x.CasualLowPriorityTime
	}
	return 0
}

func (x *CSOTFParty) GetRankedBannedTime() uint32 {
	if x != nil && x.RankedBannedTime != nil {
		return *x.RankedBannedTime
	}
	return 0
}

func (x *CSOTFParty) GetRankedLowPriorityTime() uint32 {
	if x != nil && x.RankedLowPriorityTime != nil {
		return *x.RankedLowPriorityTime
	}
	return 0
}

func (x *CSOTFParty) GetLeaderUiState() *TFSyncedMMUIState {
	if x != nil {
		return x.LeaderUiState
	}
	return nil
}

func (x *CSOTFParty) GetPendingMembers() []*TFPendingPartyMember {
	if x != nil {
		return x.PendingMembers
	}
	return nil
}

type CSOTFPartyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *uint64                         `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Inviter *uint64                         `protobuf:"fixed64,2,opt,name=inviter" json:"inviter,omitempty"`
	Members []*CSOTFPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	Type    *CSOTFPartyInvite_Type          `protobuf:"varint,5,opt,name=type,enum=tf2.CSOTFPartyInvite_Type,def=1" json:"type,omitempty"`
}

// Default values for CSOTFPartyInvite fields.
const (
	Default_CSOTFPartyInvite_Type = CSOTFPartyInvite_PENDING_INVITE
)

func (x *CSOTFPartyInvite) Reset() {
	*x = CSOTFPartyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFPartyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFPartyInvite) ProtoMessage() {}

func (x *CSOTFPartyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFPartyInvite.ProtoReflect.Descriptor instead.
func (*CSOTFPartyInvite) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{83}
}

func (x *CSOTFPartyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSOTFPartyInvite) GetInviter() uint64 {
	if x != nil && x.Inviter != nil {
		return *x.Inviter
	}
	return 0
}

func (x *CSOTFPartyInvite) GetMembers() []*CSOTFPartyInvite_PartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSOTFPartyInvite) GetType() CSOTFPartyInvite_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CSOTFPartyInvite_Type
}

type CTFLobbyPlayerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *uint64                           `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	Team                  *TF_GC_TEAM                       `protobuf:"varint,3,opt,name=team,enum=tf2.TF_GC_TEAM,def=0" json:"team,omitempty"`
	ConnectState          *CTFLobbyPlayerProto_ConnectState `protobuf:"varint,13,opt,name=connect_state,json=connectState,enum=tf2.CTFLobbyPlayerProto_ConnectState,def=0" json:"connect_state,omitempty"`
	Name                  *string                           `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	OriginalPartyId       *uint64                           `protobuf:"varint,12,opt,name=original_party_id,json=originalPartyId" json:"original_party_id,omitempty"`
	SquadSurplus          *bool                             `protobuf:"varint,14,opt,name=squad_surplus,json=squadSurplus" json:"squad_surplus,omitempty"`
	BadgeLevel            *uint32                           `protobuf:"varint,15,opt,name=badge_level,json=badgeLevel" json:"badge_level,omitempty"`
	LastConnectTime       *uint32                           `protobuf:"varint,17,opt,name=last_connect_time,json=lastConnectTime" json:"last_connect_time,omitempty"`
	Type                  *CTFLobbyPlayerProto_Type         `protobuf:"varint,19,opt,name=type,enum=tf2.CTFLobbyPlayerProto_Type,def=0" json:"type,omitempty"`
	NormalizedRating      *float64                          `protobuf:"fixed64,20,opt,name=normalized_rating,json=normalizedRating" json:"normalized_rating,omitempty"`
	NormalizedUncertainty *float64                          `protobuf:"fixed64,22,opt,name=normalized_uncertainty,json=normalizedUncertainty" json:"normalized_uncertainty,omitempty"`
	Rank                  *uint32                           `protobuf:"varint,21,opt,name=rank" json:"rank,omitempty"`
}

// Default values for CTFLobbyPlayerProto fields.
const (
	Default_CTFLobbyPlayerProto_Team         = TF_GC_TEAM_TF_GC_TEAM_DEFENDERS
	Default_CTFLobbyPlayerProto_ConnectState = CTFLobbyPlayerProto_INVALID
	Default_CTFLobbyPlayerProto_Type         = CTFLobbyPlayerProto_INVALID_PLAYER
)

func (x *CTFLobbyPlayerProto) Reset() {
	*x = CTFLobbyPlayerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFLobbyPlayerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFLobbyPlayerProto) ProtoMessage() {}

func (x *CTFLobbyPlayerProto) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFLobbyPlayerProto.ProtoReflect.Descriptor instead.
func (*CTFLobbyPlayerProto) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{84}
}

func (x *CTFLobbyPlayerProto) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetTeam() TF_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CTFLobbyPlayerProto_Team
}

func (x *CTFLobbyPlayerProto) GetConnectState() CTFLobbyPlayerProto_ConnectState {
	if x != nil && x.ConnectState != nil {
		return *x.ConnectState
	}
	return Default_CTFLobbyPlayerProto_ConnectState
}

func (x *CTFLobbyPlayerProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CTFLobbyPlayerProto) GetOriginalPartyId() uint64 {
	if x != nil && x.OriginalPartyId != nil {
		return *x.OriginalPartyId
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetSquadSurplus() bool {
	if x != nil && x.SquadSurplus != nil {
		return *x.SquadSurplus
	}
	return false
}

func (x *CTFLobbyPlayerProto) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetLastConnectTime() uint32 {
	if x != nil && x.LastConnectTime != nil {
		return *x.LastConnectTime
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetType() CTFLobbyPlayerProto_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CTFLobbyPlayerProto_Type
}

func (x *CTFLobbyPlayerProto) GetNormalizedRating() float64 {
	if x != nil && x.NormalizedRating != nil {
		return *x.NormalizedRating
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetNormalizedUncertainty() float64 {
	if x != nil && x.NormalizedUncertainty != nil {
		return *x.NormalizedUncertainty
	}
	return 0
}

func (x *CTFLobbyPlayerProto) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type CTFLobbyInviteProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId    *uint64        `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchGroup *ETFMatchGroup `protobuf:"varint,2,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
}

// Default values for CTFLobbyInviteProto fields.
const (
	Default_CTFLobbyInviteProto_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CTFLobbyInviteProto) Reset() {
	*x = CTFLobbyInviteProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTFLobbyInviteProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTFLobbyInviteProto) ProtoMessage() {}

func (x *CTFLobbyInviteProto) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTFLobbyInviteProto.ProtoReflect.Descriptor instead.
func (*CTFLobbyInviteProto) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{85}
}

func (x *CTFLobbyInviteProto) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CTFLobbyInviteProto) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CTFLobbyInviteProto_MatchGroup
}

type CSOTFGameServerLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId                *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Members                []*CTFLobbyPlayerProto         `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	ServerId               *uint64                        `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	State                  *CSOTFGameServerLobby_State    `protobuf:"varint,4,opt,name=state,enum=tf2.CSOTFGameServerLobby_State,def=0" json:"state,omitempty"`
	Connect                *string                        `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	GameState              *TF_GC_GameState               `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=tf2.TF_GC_GameState,def=0" json:"game_state,omitempty"`
	InitialAverageMmRating *float64                       `protobuf:"fixed64,32,opt,name=initial_average_mm_rating,json=initialAverageMmRating" json:"initial_average_mm_rating,omitempty"`
	MannupTourName         *string                        `protobuf:"bytes,42,opt,name=mannup_tour_name,json=mannupTourName" json:"mannup_tour_name,omitempty"`
	MapName                *string                        `protobuf:"bytes,38,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	MissionName            *string                        `protobuf:"bytes,39,opt,name=mission_name,json=missionName" json:"mission_name,omitempty"`
	MatchGroup             *uint32                        `protobuf:"varint,41,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	MatchId                *uint64                        `protobuf:"varint,30,opt,name=match_id,json=matchId,def=0" json:"match_id,omitempty"`
	FormedTime             *uint32                        `protobuf:"varint,36,opt,name=formed_time,json=formedTime" json:"formed_time,omitempty"`
	Flags                  *uint32                        `protobuf:"varint,43,opt,name=flags" json:"flags,omitempty"`
	LateJoinEligible       *bool                          `protobuf:"varint,44,opt,name=late_join_eligible,json=lateJoinEligible" json:"late_join_eligible,omitempty"`
	FixedMatchSize         *uint32                        `protobuf:"varint,45,opt,name=fixed_match_size,json=fixedMatchSize" json:"fixed_match_size,omitempty"`
	IsWarMatch             *CSOTFGameServerLobby_WarMatch `protobuf:"varint,46,opt,name=is_war_match,json=isWarMatch,enum=tf2.CSOTFGameServerLobby_WarMatch,def=0" json:"is_war_match,omitempty"`
	NextMapsForVote        []uint32                       `protobuf:"varint,47,rep,name=next_maps_for_vote,json=nextMapsForVote" json:"next_maps_for_vote,omitempty"`
	LobbyMmVersion         *uint32                        `protobuf:"varint,48,opt,name=lobby_mm_version,json=lobbyMmVersion" json:"lobby_mm_version,omitempty"`
	PendingMembers         []*CTFLobbyPlayerProto         `protobuf:"bytes,49,rep,name=pending_members,json=pendingMembers" json:"pending_members,omitempty"`
}

// Default values for CSOTFGameServerLobby fields.
const (
	Default_CSOTFGameServerLobby_ServerId   = uint64(0)
	Default_CSOTFGameServerLobby_State      = CSOTFGameServerLobby_UNKNOWN
	Default_CSOTFGameServerLobby_GameState  = TF_GC_GameState_TF_GC_GAMESTATE_STATE_INIT
	Default_CSOTFGameServerLobby_MatchId    = uint64(0)
	Default_CSOTFGameServerLobby_IsWarMatch = CSOTFGameServerLobby_NOPE
)

func (x *CSOTFGameServerLobby) Reset() {
	*x = CSOTFGameServerLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFGameServerLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFGameServerLobby) ProtoMessage() {}

func (x *CSOTFGameServerLobby) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFGameServerLobby.ProtoReflect.Descriptor instead.
func (*CSOTFGameServerLobby) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{86}
}

func (x *CSOTFGameServerLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetMembers() []*CTFLobbyPlayerProto {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSOTFGameServerLobby) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return Default_CSOTFGameServerLobby_ServerId
}

func (x *CSOTFGameServerLobby) GetState() CSOTFGameServerLobby_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSOTFGameServerLobby_State
}

func (x *CSOTFGameServerLobby) GetConnect() string {
	if x != nil && x.Connect != nil {
		return *x.Connect
	}
	return ""
}

func (x *CSOTFGameServerLobby) GetGameState() TF_GC_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CSOTFGameServerLobby_GameState
}

func (x *CSOTFGameServerLobby) GetInitialAverageMmRating() float64 {
	if x != nil && x.InitialAverageMmRating != nil {
		return *x.InitialAverageMmRating
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetMannupTourName() string {
	if x != nil && x.MannupTourName != nil {
		return *x.MannupTourName
	}
	return ""
}

func (x *CSOTFGameServerLobby) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *CSOTFGameServerLobby) GetMissionName() string {
	if x != nil && x.MissionName != nil {
		return *x.MissionName
	}
	return ""
}

func (x *CSOTFGameServerLobby) GetMatchGroup() uint32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return Default_CSOTFGameServerLobby_MatchId
}

func (x *CSOTFGameServerLobby) GetFormedTime() uint32 {
	if x != nil && x.FormedTime != nil {
		return *x.FormedTime
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetLateJoinEligible() bool {
	if x != nil && x.LateJoinEligible != nil {
		return *x.LateJoinEligible
	}
	return false
}

func (x *CSOTFGameServerLobby) GetFixedMatchSize() uint32 {
	if x != nil && x.FixedMatchSize != nil {
		return *x.FixedMatchSize
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetIsWarMatch() CSOTFGameServerLobby_WarMatch {
	if x != nil && x.IsWarMatch != nil {
		return *x.IsWarMatch
	}
	return Default_CSOTFGameServerLobby_IsWarMatch
}

func (x *CSOTFGameServerLobby) GetNextMapsForVote() []uint32 {
	if x != nil {
		return x.NextMapsForVote
	}
	return nil
}

func (x *CSOTFGameServerLobby) GetLobbyMmVersion() uint32 {
	if x != nil && x.LobbyMmVersion != nil {
		return *x.LobbyMmVersion
	}
	return 0
}

func (x *CSOTFGameServerLobby) GetPendingMembers() []*CTFLobbyPlayerProto {
	if x != nil {
		return x.PendingMembers
	}
	return nil
}

type CMsgExitMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExplicitAbandon *bool   `protobuf:"varint,1,opt,name=explicit_abandon,json=explicitAbandon" json:"explicit_abandon,omitempty"`
	PartyId         *uint64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LobbyId         *uint64 `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgExitMatchmaking) Reset() {
	*x = CMsgExitMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgExitMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgExitMatchmaking) ProtoMessage() {}

func (x *CMsgExitMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgExitMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgExitMatchmaking) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgExitMatchmaking) GetExplicitAbandon() bool {
	if x != nil && x.ExplicitAbandon != nil {
		return *x.ExplicitAbandon
	}
	return false
}

func (x *CMsgExitMatchmaking) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgExitMatchmaking) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgAcceptLobbyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitedLobbyId           *uint64  `protobuf:"varint,1,opt,name=invited_lobby_id,json=invitedLobbyId" json:"invited_lobby_id,omitempty"`
	AbandoningMatchId        *uint64  `protobuf:"varint,2,opt,name=abandoning_match_id,json=abandoningMatchId" json:"abandoning_match_id,omitempty"`
	AbandoningInviteLobbyIds []uint64 `protobuf:"varint,3,rep,name=abandoning_invite_lobby_ids,json=abandoningInviteLobbyIds" json:"abandoning_invite_lobby_ids,omitempty"`
}

func (x *CMsgAcceptLobbyInvite) Reset() {
	*x = CMsgAcceptLobbyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAcceptLobbyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAcceptLobbyInvite) ProtoMessage() {}

func (x *CMsgAcceptLobbyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAcceptLobbyInvite.ProtoReflect.Descriptor instead.
func (*CMsgAcceptLobbyInvite) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgAcceptLobbyInvite) GetInvitedLobbyId() uint64 {
	if x != nil && x.InvitedLobbyId != nil {
		return *x.InvitedLobbyId
	}
	return 0
}

func (x *CMsgAcceptLobbyInvite) GetAbandoningMatchId() uint64 {
	if x != nil && x.AbandoningMatchId != nil {
		return *x.AbandoningMatchId
	}
	return 0
}

func (x *CMsgAcceptLobbyInvite) GetAbandoningInviteLobbyIds() []uint64 {
	if x != nil {
		return x.AbandoningInviteLobbyIds
	}
	return nil
}

type CMsgAcceptLobbyInviteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgAcceptLobbyInviteReply) Reset() {
	*x = CMsgAcceptLobbyInviteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAcceptLobbyInviteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAcceptLobbyInviteReply) ProtoMessage() {}

func (x *CMsgAcceptLobbyInviteReply) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAcceptLobbyInviteReply.ProtoReflect.Descriptor instead.
func (*CMsgAcceptLobbyInviteReply) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{89}
}

type CMsgMatchmakingSearchCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgMatchmakingSearchCountRequest) Reset() {
	*x = CMsgMatchmakingSearchCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchmakingSearchCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchmakingSearchCountRequest) ProtoMessage() {}

func (x *CMsgMatchmakingSearchCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchmakingSearchCountRequest.ProtoReflect.Descriptor instead.
func (*CMsgMatchmakingSearchCountRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{90}
}

type CMsgMatchmakingSearchCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchingPlayersByGroup []uint32 `protobuf:"varint,1,rep,name=searching_players_by_group,json=searchingPlayersByGroup" json:"searching_players_by_group,omitempty"`
}

func (x *CMsgMatchmakingSearchCountResponse) Reset() {
	*x = CMsgMatchmakingSearchCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchmakingSearchCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchmakingSearchCountResponse) ProtoMessage() {}

func (x *CMsgMatchmakingSearchCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchmakingSearchCountResponse.ProtoReflect.Descriptor instead.
func (*CMsgMatchmakingSearchCountResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgMatchmakingSearchCountResponse) GetSearchingPlayersByGroup() []uint32 {
	if x != nil {
		return x.SearchingPlayersByGroup
	}
	return nil
}

type CMsgKickedFromMatchmakingQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgKickedFromMatchmakingQueue) Reset() {
	*x = CMsgKickedFromMatchmakingQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgKickedFromMatchmakingQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgKickedFromMatchmakingQueue) ProtoMessage() {}

func (x *CMsgKickedFromMatchmakingQueue) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgKickedFromMatchmakingQueue.ProtoReflect.Descriptor instead.
func (*CMsgKickedFromMatchmakingQueue) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{92}
}

type CMsgGameServerMatchmakingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion      *uint32                                   `protobuf:"varint,16,opt,name=server_version,json=serverVersion,def=1225" json:"server_version,omitempty"`
	MatchmakingState   *ServerMatchmakingState                   `protobuf:"varint,1,opt,name=matchmaking_state,json=matchmakingState,enum=tf2.ServerMatchmakingState,def=0" json:"matchmaking_state,omitempty"`
	Map                *string                                   `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	Tags               *string                                   `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
	BotCount           *uint32                                   `protobuf:"varint,5,opt,name=bot_count,json=botCount" json:"bot_count,omitempty"`
	NumSpectators      *uint32                                   `protobuf:"varint,6,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	MaxPlayers         *uint32                                   `protobuf:"varint,7,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	SlotsFree          *uint32                                   `protobuf:"varint,8,opt,name=slots_free,json=slotsFree" json:"slots_free,omitempty"`
	ServerRegion       *uint32                                   `protobuf:"varint,9,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	ServerLoadavg      *float32                                  `protobuf:"fixed32,10,opt,name=server_loadavg,json=serverLoadavg" json:"server_loadavg,omitempty"`
	ServerTrusted      *bool                                     `protobuf:"varint,11,opt,name=server_trusted,json=serverTrusted" json:"server_trusted,omitempty"`
	ServerDedicated    *bool                                     `protobuf:"varint,12,opt,name=server_dedicated,json=serverDedicated" json:"server_dedicated,omitempty"`
	Strict             *uint32                                   `protobuf:"varint,17,opt,name=strict" json:"strict,omitempty"`
	Players            []*CMsgGameServerMatchmakingStatus_Player `protobuf:"bytes,13,rep,name=players" json:"players,omitempty"`
	GameState          *TF_GC_GameState                          `protobuf:"varint,14,opt,name=game_state,json=gameState,enum=tf2.TF_GC_GameState,def=0" json:"game_state,omitempty"`
	Event              *CMsgGameServerMatchmakingStatus_Event    `protobuf:"varint,15,opt,name=event,enum=tf2.CMsgGameServerMatchmakingStatus_Event,def=0" json:"event,omitempty"`
	MvmWave            *uint32                                   `protobuf:"varint,18,opt,name=mvm_wave,json=mvmWave" json:"mvm_wave,omitempty"`
	MvmCreditsAcquired *uint32                                   `protobuf:"varint,19,opt,name=mvm_credits_acquired,json=mvmCreditsAcquired" json:"mvm_credits_acquired,omitempty"`
	MvmCreditsDropped  *uint32                                   `protobuf:"varint,20,opt,name=mvm_credits_dropped,json=mvmCreditsDropped" json:"mvm_credits_dropped,omitempty"`
	MatchGroup         *int32                                    `protobuf:"zigzag32,23,opt,name=match_group,json=matchGroup,def=-1" json:"match_group,omitempty"`
	LobbyMmVersion     *uint32                                   `protobuf:"varint,24,opt,name=lobby_mm_version,json=lobbyMmVersion" json:"lobby_mm_version,omitempty"`
}

// Default values for CMsgGameServerMatchmakingStatus fields.
const (
	Default_CMsgGameServerMatchmakingStatus_ServerVersion    = uint32(1225)
	Default_CMsgGameServerMatchmakingStatus_MatchmakingState = ServerMatchmakingState_ServerMatchmakingState_INVALID
	Default_CMsgGameServerMatchmakingStatus_GameState        = TF_GC_GameState_TF_GC_GAMESTATE_STATE_INIT
	Default_CMsgGameServerMatchmakingStatus_Event            = CMsgGameServerMatchmakingStatus_None
	Default_CMsgGameServerMatchmakingStatus_MatchGroup       = int32(-1)
)

func (x *CMsgGameServerMatchmakingStatus) Reset() {
	*x = CMsgGameServerMatchmakingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerMatchmakingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerMatchmakingStatus) ProtoMessage() {}

func (x *CMsgGameServerMatchmakingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerMatchmakingStatus.ProtoReflect.Descriptor instead.
func (*CMsgGameServerMatchmakingStatus) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgGameServerMatchmakingStatus) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return Default_CMsgGameServerMatchmakingStatus_ServerVersion
}

func (x *CMsgGameServerMatchmakingStatus) GetMatchmakingState() ServerMatchmakingState {
	if x != nil && x.MatchmakingState != nil {
		return *x.MatchmakingState
	}
	return Default_CMsgGameServerMatchmakingStatus_MatchmakingState
}

func (x *CMsgGameServerMatchmakingStatus) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGameServerMatchmakingStatus) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *CMsgGameServerMatchmakingStatus) GetBotCount() uint32 {
	if x != nil && x.BotCount != nil {
		return *x.BotCount
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetNumSpectators() uint32 {
	if x != nil && x.NumSpectators != nil {
		return *x.NumSpectators
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetSlotsFree() uint32 {
	if x != nil && x.SlotsFree != nil {
		return *x.SlotsFree
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetServerLoadavg() float32 {
	if x != nil && x.ServerLoadavg != nil {
		return *x.ServerLoadavg
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetServerTrusted() bool {
	if x != nil && x.ServerTrusted != nil {
		return *x.ServerTrusted
	}
	return false
}

func (x *CMsgGameServerMatchmakingStatus) GetServerDedicated() bool {
	if x != nil && x.ServerDedicated != nil {
		return *x.ServerDedicated
	}
	return false
}

func (x *CMsgGameServerMatchmakingStatus) GetStrict() uint32 {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetPlayers() []*CMsgGameServerMatchmakingStatus_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGameServerMatchmakingStatus) GetGameState() TF_GC_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgGameServerMatchmakingStatus_GameState
}

func (x *CMsgGameServerMatchmakingStatus) GetEvent() CMsgGameServerMatchmakingStatus_Event {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgGameServerMatchmakingStatus_Event
}

func (x *CMsgGameServerMatchmakingStatus) GetMvmWave() uint32 {
	if x != nil && x.MvmWave != nil {
		return *x.MvmWave
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetMvmCreditsAcquired() uint32 {
	if x != nil && x.MvmCreditsAcquired != nil {
		return *x.MvmCreditsAcquired
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetMvmCreditsDropped() uint32 {
	if x != nil && x.MvmCreditsDropped != nil {
		return *x.MvmCreditsDropped
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CMsgGameServerMatchmakingStatus_MatchGroup
}

func (x *CMsgGameServerMatchmakingStatus) GetLobbyMmVersion() uint32 {
	if x != nil && x.LobbyMmVersion != nil {
		return *x.LobbyMmVersion
	}
	return 0
}

type CMsgMatchmakingProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgWaitTimeNew                    *uint32 `protobuf:"varint,4,opt,name=avg_wait_time_new,json=avgWaitTimeNew" json:"avg_wait_time_new,omitempty"`
	AvgWaitTimeJoinLate               *uint32 `protobuf:"varint,5,opt,name=avg_wait_time_join_late,json=avgWaitTimeJoinLate" json:"avg_wait_time_join_late,omitempty"`
	YourWaitTime                      *uint32 `protobuf:"varint,6,opt,name=your_wait_time,json=yourWaitTime" json:"your_wait_time,omitempty"`
	MatchingWorldwideSearchingPlayers *uint32 `protobuf:"varint,8,opt,name=matching_worldwide_searching_players,json=matchingWorldwideSearchingPlayers" json:"matching_worldwide_searching_players,omitempty"`
	MatchingNearYouSearchingPlayers   *uint32 `protobuf:"varint,9,opt,name=matching_near_you_searching_players,json=matchingNearYouSearchingPlayers" json:"matching_near_you_searching_players,omitempty"`
	TotalWorldwideSearchingPlayers    *uint32 `protobuf:"varint,13,opt,name=total_worldwide_searching_players,json=totalWorldwideSearchingPlayers" json:"total_worldwide_searching_players,omitempty"`
	TotalNearYouSearchingPlayers      *uint32 `protobuf:"varint,14,opt,name=total_near_you_searching_players,json=totalNearYouSearchingPlayers" json:"total_near_you_searching_players,omitempty"`
	MatchingWorldwideActivePlayers    *uint32 `protobuf:"varint,15,opt,name=matching_worldwide_active_players,json=matchingWorldwideActivePlayers" json:"matching_worldwide_active_players,omitempty"`
	MatchingNearYouActivePlayers      *uint32 `protobuf:"varint,16,opt,name=matching_near_you_active_players,json=matchingNearYouActivePlayers" json:"matching_near_you_active_players,omitempty"`
	TotalWorldwideActivePlayers       *uint32 `protobuf:"varint,17,opt,name=total_worldwide_active_players,json=totalWorldwideActivePlayers" json:"total_worldwide_active_players,omitempty"`
	TotalNearYouActivePlayers         *uint32 `protobuf:"varint,18,opt,name=total_near_you_active_players,json=totalNearYouActivePlayers" json:"total_near_you_active_players,omitempty"`
	MatchingWorldwideEmptyGameservers *uint32 `protobuf:"varint,19,opt,name=matching_worldwide_empty_gameservers,json=matchingWorldwideEmptyGameservers" json:"matching_worldwide_empty_gameservers,omitempty"`
	MatchingNearYouEmptyGameservers   *uint32 `protobuf:"varint,20,opt,name=matching_near_you_empty_gameservers,json=matchingNearYouEmptyGameservers" json:"matching_near_you_empty_gameservers,omitempty"`
	TotalWorldwideEmptyGameservers    *uint32 `protobuf:"varint,21,opt,name=total_worldwide_empty_gameservers,json=totalWorldwideEmptyGameservers" json:"total_worldwide_empty_gameservers,omitempty"`
	TotalNearYouEmptyGameservers      *uint32 `protobuf:"varint,22,opt,name=total_near_you_empty_gameservers,json=totalNearYouEmptyGameservers" json:"total_near_you_empty_gameservers,omitempty"`
	UrgencyPct                        *uint32 `protobuf:"varint,1,opt,name=urgency_pct,json=urgencyPct" json:"urgency_pct,omitempty"`
}

func (x *CMsgMatchmakingProgress) Reset() {
	*x = CMsgMatchmakingProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchmakingProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchmakingProgress) ProtoMessage() {}

func (x *CMsgMatchmakingProgress) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchmakingProgress.ProtoReflect.Descriptor instead.
func (*CMsgMatchmakingProgress) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgMatchmakingProgress) GetAvgWaitTimeNew() uint32 {
	if x != nil && x.AvgWaitTimeNew != nil {
		return *x.AvgWaitTimeNew
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetAvgWaitTimeJoinLate() uint32 {
	if x != nil && x.AvgWaitTimeJoinLate != nil {
		return *x.AvgWaitTimeJoinLate
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetYourWaitTime() uint32 {
	if x != nil && x.YourWaitTime != nil {
		return *x.YourWaitTime
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingWorldwideSearchingPlayers() uint32 {
	if x != nil && x.MatchingWorldwideSearchingPlayers != nil {
		return *x.MatchingWorldwideSearchingPlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingNearYouSearchingPlayers() uint32 {
	if x != nil && x.MatchingNearYouSearchingPlayers != nil {
		return *x.MatchingNearYouSearchingPlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalWorldwideSearchingPlayers() uint32 {
	if x != nil && x.TotalWorldwideSearchingPlayers != nil {
		return *x.TotalWorldwideSearchingPlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalNearYouSearchingPlayers() uint32 {
	if x != nil && x.TotalNearYouSearchingPlayers != nil {
		return *x.TotalNearYouSearchingPlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingWorldwideActivePlayers() uint32 {
	if x != nil && x.MatchingWorldwideActivePlayers != nil {
		return *x.MatchingWorldwideActivePlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingNearYouActivePlayers() uint32 {
	if x != nil && x.MatchingNearYouActivePlayers != nil {
		return *x.MatchingNearYouActivePlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalWorldwideActivePlayers() uint32 {
	if x != nil && x.TotalWorldwideActivePlayers != nil {
		return *x.TotalWorldwideActivePlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalNearYouActivePlayers() uint32 {
	if x != nil && x.TotalNearYouActivePlayers != nil {
		return *x.TotalNearYouActivePlayers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingWorldwideEmptyGameservers() uint32 {
	if x != nil && x.MatchingWorldwideEmptyGameservers != nil {
		return *x.MatchingWorldwideEmptyGameservers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetMatchingNearYouEmptyGameservers() uint32 {
	if x != nil && x.MatchingNearYouEmptyGameservers != nil {
		return *x.MatchingNearYouEmptyGameservers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalWorldwideEmptyGameservers() uint32 {
	if x != nil && x.TotalWorldwideEmptyGameservers != nil {
		return *x.TotalWorldwideEmptyGameservers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetTotalNearYouEmptyGameservers() uint32 {
	if x != nil && x.TotalNearYouEmptyGameservers != nil {
		return *x.TotalNearYouEmptyGameservers
	}
	return 0
}

func (x *CMsgMatchmakingProgress) GetUrgencyPct() uint32 {
	if x != nil && x.UrgencyPct != nil {
		return *x.UrgencyPct
	}
	return 0
}

type CMsgMvMVictoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players     []*CMsgMvMVictoryInfo_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	TourName    *string                      `protobuf:"bytes,2,opt,name=tour_name,json=tourName" json:"tour_name,omitempty"`
	MissionName *string                      `protobuf:"bytes,3,opt,name=mission_name,json=missionName" json:"mission_name,omitempty"`
}

func (x *CMsgMvMVictoryInfo) Reset() {
	*x = CMsgMvMVictoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMVictoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMVictoryInfo) ProtoMessage() {}

func (x *CMsgMvMVictoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMVictoryInfo.ProtoReflect.Descriptor instead.
func (*CMsgMvMVictoryInfo) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgMvMVictoryInfo) GetPlayers() []*CMsgMvMVictoryInfo_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgMvMVictoryInfo) GetTourName() string {
	if x != nil && x.TourName != nil {
		return *x.TourName
	}
	return ""
}

func (x *CMsgMvMVictoryInfo) GetMissionName() string {
	if x != nil && x.MissionName != nil {
		return *x.MissionName
	}
	return ""
}

type CGCMsgTFHelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionCheck    *uint32  `protobuf:"varint,1,opt,name=version_check,json=versionCheck" json:"version_check,omitempty"`
	VersionChecksum []uint64 `protobuf:"varint,2,rep,name=version_checksum,json=versionChecksum" json:"version_checksum,omitempty"`
	VersionVerbose  *uint32  `protobuf:"varint,3,opt,name=version_verbose,json=versionVerbose" json:"version_verbose,omitempty"`
}

func (x *CGCMsgTFHelloResponse) Reset() {
	*x = CGCMsgTFHelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgTFHelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgTFHelloResponse) ProtoMessage() {}

func (x *CGCMsgTFHelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgTFHelloResponse.ProtoReflect.Descriptor instead.
func (*CGCMsgTFHelloResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{96}
}

func (x *CGCMsgTFHelloResponse) GetVersionCheck() uint32 {
	if x != nil && x.VersionCheck != nil {
		return *x.VersionCheck
	}
	return 0
}

func (x *CGCMsgTFHelloResponse) GetVersionChecksum() []uint64 {
	if x != nil {
		return x.VersionChecksum
	}
	return nil
}

func (x *CGCMsgTFHelloResponse) GetVersionVerbose() uint32 {
	if x != nil && x.VersionVerbose != nil {
		return *x.VersionVerbose
	}
	return 0
}

type CGCMsgTFSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionChecksum   []byte  `protobuf:"bytes,1,opt,name=version_checksum,json=versionChecksum" json:"version_checksum,omitempty"`
	VersionCheck      *uint32 `protobuf:"varint,2,opt,name=version_check,json=versionCheck" json:"version_check,omitempty"`
	VersionCheckEx    *uint32 `protobuf:"varint,3,opt,name=version_check_ex,json=versionCheckEx" json:"version_check_ex,omitempty"`
	VersionCheckEx2   *uint32 `protobuf:"varint,4,opt,name=version_check_ex2,json=versionCheckEx2" json:"version_check_ex2,omitempty"`
	VersionChecksumEx []byte  `protobuf:"bytes,5,opt,name=version_checksum_ex,json=versionChecksumEx" json:"version_checksum_ex,omitempty"`
}

func (x *CGCMsgTFSync) Reset() {
	*x = CGCMsgTFSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgTFSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgTFSync) ProtoMessage() {}

func (x *CGCMsgTFSync) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgTFSync.ProtoReflect.Descriptor instead.
func (*CGCMsgTFSync) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{97}
}

func (x *CGCMsgTFSync) GetVersionChecksum() []byte {
	if x != nil {
		return x.VersionChecksum
	}
	return nil
}

func (x *CGCMsgTFSync) GetVersionCheck() uint32 {
	if x != nil && x.VersionCheck != nil {
		return *x.VersionCheck
	}
	return 0
}

func (x *CGCMsgTFSync) GetVersionCheckEx() uint32 {
	if x != nil && x.VersionCheckEx != nil {
		return *x.VersionCheckEx
	}
	return 0
}

func (x *CGCMsgTFSync) GetVersionCheckEx2() uint32 {
	if x != nil && x.VersionCheckEx2 != nil {
		return *x.VersionCheckEx2
	}
	return 0
}

func (x *CGCMsgTFSync) GetVersionChecksumEx() []byte {
	if x != nil {
		return x.VersionChecksumEx
	}
	return nil
}

type CGCMsgTFSyncEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionChecksum   *string `protobuf:"bytes,1,opt,name=version_checksum,json=versionChecksum" json:"version_checksum,omitempty"`
	VersionChecksumEx []byte  `protobuf:"bytes,2,opt,name=version_checksum_ex,json=versionChecksumEx" json:"version_checksum_ex,omitempty"`
	VersionCheck      *uint32 `protobuf:"varint,3,opt,name=version_check,json=versionCheck" json:"version_check,omitempty"`
}

func (x *CGCMsgTFSyncEx) Reset() {
	*x = CGCMsgTFSyncEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgTFSyncEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgTFSyncEx) ProtoMessage() {}

func (x *CGCMsgTFSyncEx) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgTFSyncEx.ProtoReflect.Descriptor instead.
func (*CGCMsgTFSyncEx) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{98}
}

func (x *CGCMsgTFSyncEx) GetVersionChecksum() string {
	if x != nil && x.VersionChecksum != nil {
		return *x.VersionChecksum
	}
	return ""
}

func (x *CGCMsgTFSyncEx) GetVersionChecksumEx() []byte {
	if x != nil {
		return x.VersionChecksumEx
	}
	return nil
}

func (x *CGCMsgTFSyncEx) GetVersionCheck() uint32 {
	if x != nil && x.VersionCheck != nil {
		return *x.VersionCheck
	}
	return 0
}

type CMsgMvMVictory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyMissionIndex *uint32                  `protobuf:"varint,1,opt,name=legacy_mission_index,json=legacyMissionIndex" json:"legacy_mission_index,omitempty"`
	TourNameMannup     *string                  `protobuf:"bytes,5,opt,name=tour_name_mannup,json=tourNameMannup" json:"tour_name_mannup,omitempty"`
	MissionName        *string                  `protobuf:"bytes,6,opt,name=mission_name,json=missionName" json:"mission_name,omitempty"`
	Players            []*CMsgMvMVictory_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	LobbyId            *uint64                  `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	EventTime          *uint32                  `protobuf:"fixed32,4,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
}

func (x *CMsgMvMVictory) Reset() {
	*x = CMsgMvMVictory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMVictory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMVictory) ProtoMessage() {}

func (x *CMsgMvMVictory) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMVictory.ProtoReflect.Descriptor instead.
func (*CMsgMvMVictory) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgMvMVictory) GetLegacyMissionIndex() uint32 {
	if x != nil && x.LegacyMissionIndex != nil {
		return *x.LegacyMissionIndex
	}
	return 0
}

func (x *CMsgMvMVictory) GetTourNameMannup() string {
	if x != nil && x.TourNameMannup != nil {
		return *x.TourNameMannup
	}
	return ""
}

func (x *CMsgMvMVictory) GetMissionName() string {
	if x != nil && x.MissionName != nil {
		return *x.MissionName
	}
	return ""
}

func (x *CMsgMvMVictory) GetPlayers() []*CMsgMvMVictory_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgMvMVictory) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgMvMVictory) GetEventTime() uint32 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

type CMsgMvMMannUpVictoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgMvMMannUpVictoryReply) Reset() {
	*x = CMsgMvMMannUpVictoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMMannUpVictoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMMannUpVictoryReply) ProtoMessage() {}

func (x *CMsgMvMMannUpVictoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMMannUpVictoryReply.ProtoReflect.Descriptor instead.
func (*CMsgMvMMannUpVictoryReply) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{100}
}

type CMsgGameServerKickingLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId *uint64 `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId *uint64 `protobuf:"varint,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGameServerKickingLobby) Reset() {
	*x = CMsgGameServerKickingLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerKickingLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerKickingLobby) ProtoMessage() {}

func (x *CMsgGameServerKickingLobby) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerKickingLobby.ProtoReflect.Descriptor instead.
func (*CMsgGameServerKickingLobby) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgGameServerKickingLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGameServerKickingLobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGameServerKickingLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameServerKickingLobbyResponse) Reset() {
	*x = CMsgGameServerKickingLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerKickingLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerKickingLobbyResponse) ProtoMessage() {}

func (x *CMsgGameServerKickingLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerKickingLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgGameServerKickingLobbyResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{102}
}

type CMsgLeaveGameAndPrepareToJoinParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

func (x *CMsgLeaveGameAndPrepareToJoinParty) Reset() {
	*x = CMsgLeaveGameAndPrepareToJoinParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeaveGameAndPrepareToJoinParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaveGameAndPrepareToJoinParty) ProtoMessage() {}

func (x *CMsgLeaveGameAndPrepareToJoinParty) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaveGameAndPrepareToJoinParty.ProtoReflect.Descriptor instead.
func (*CMsgLeaveGameAndPrepareToJoinParty) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgLeaveGameAndPrepareToJoinParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgPlayerLeftMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64             `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	LeaveReason *TFMatchLeaveReason `protobuf:"varint,2,opt,name=leave_reason,json=leaveReason,enum=tf2.TFMatchLeaveReason,def=0" json:"leave_reason,omitempty"`
	WasAbandon  *bool               `protobuf:"varint,3,opt,name=was_abandon,json=wasAbandon" json:"was_abandon,omitempty"`
	LobbyId     *uint64             `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId     *uint64             `protobuf:"varint,5,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	XpBreakdown []*CMsgTFXPSource   `protobuf:"bytes,6,rep,name=xp_breakdown,json=xpBreakdown" json:"xp_breakdown,omitempty"`
}

// Default values for CMsgPlayerLeftMatch fields.
const (
	Default_CMsgPlayerLeftMatch_LeaveReason = TFMatchLeaveReason_TFMatchLeaveReason_UNSPECIFIED
)

func (x *CMsgPlayerLeftMatch) Reset() {
	*x = CMsgPlayerLeftMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerLeftMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerLeftMatch) ProtoMessage() {}

func (x *CMsgPlayerLeftMatch) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerLeftMatch.ProtoReflect.Descriptor instead.
func (*CMsgPlayerLeftMatch) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgPlayerLeftMatch) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgPlayerLeftMatch) GetLeaveReason() TFMatchLeaveReason {
	if x != nil && x.LeaveReason != nil {
		return *x.LeaveReason
	}
	return Default_CMsgPlayerLeftMatch_LeaveReason
}

func (x *CMsgPlayerLeftMatch) GetWasAbandon() bool {
	if x != nil && x.WasAbandon != nil {
		return *x.WasAbandon
	}
	return false
}

func (x *CMsgPlayerLeftMatch) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgPlayerLeftMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgPlayerLeftMatch) GetXpBreakdown() []*CMsgTFXPSource {
	if x != nil {
		return x.XpBreakdown
	}
	return nil
}

type CMsgPlayerLeftMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPlayerLeftMatchResponse) Reset() {
	*x = CMsgPlayerLeftMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerLeftMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerLeftMatchResponse) ProtoMessage() {}

func (x *CMsgPlayerLeftMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerLeftMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgPlayerLeftMatchResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{105}
}

type CMsgProcessMatchVoteKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId          *uint64                          `protobuf:"fixed64,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	InitiatorSteamId *uint64                          `protobuf:"fixed64,2,opt,name=initiator_steam_id,json=initiatorSteamId" json:"initiator_steam_id,omitempty"`
	TargetSteamId    *uint64                          `protobuf:"fixed64,3,opt,name=target_steam_id,json=targetSteamId" json:"target_steam_id,omitempty"`
	Reason           *TFVoteKickReason                `protobuf:"varint,4,opt,name=reason,enum=tf2.TFVoteKickReason,def=0" json:"reason,omitempty"`
	Votes            []*CMsgProcessMatchVoteKick_Vote `protobuf:"bytes,5,rep,name=votes" json:"votes,omitempty"`
	DefaultPass      *bool                            `protobuf:"varint,6,opt,name=default_pass,json=defaultPass" json:"default_pass,omitempty"`
}

// Default values for CMsgProcessMatchVoteKick fields.
const (
	Default_CMsgProcessMatchVoteKick_Reason = TFVoteKickReason_TFVoteKickReason_Other
)

func (x *CMsgProcessMatchVoteKick) Reset() {
	*x = CMsgProcessMatchVoteKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProcessMatchVoteKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProcessMatchVoteKick) ProtoMessage() {}

func (x *CMsgProcessMatchVoteKick) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProcessMatchVoteKick.ProtoReflect.Descriptor instead.
func (*CMsgProcessMatchVoteKick) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgProcessMatchVoteKick) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgProcessMatchVoteKick) GetInitiatorSteamId() uint64 {
	if x != nil && x.InitiatorSteamId != nil {
		return *x.InitiatorSteamId
	}
	return 0
}

func (x *CMsgProcessMatchVoteKick) GetTargetSteamId() uint64 {
	if x != nil && x.TargetSteamId != nil {
		return *x.TargetSteamId
	}
	return 0
}

func (x *CMsgProcessMatchVoteKick) GetReason() TFVoteKickReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CMsgProcessMatchVoteKick_Reason
}

func (x *CMsgProcessMatchVoteKick) GetVotes() []*CMsgProcessMatchVoteKick_Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *CMsgProcessMatchVoteKick) GetDefaultPass() bool {
	if x != nil && x.DefaultPass != nil {
		return *x.DefaultPass
	}
	return false
}

type CMsgProcessMatchVoteKickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rip *bool `protobuf:"varint,1,opt,name=rip" json:"rip,omitempty"`
}

func (x *CMsgProcessMatchVoteKickResponse) Reset() {
	*x = CMsgProcessMatchVoteKickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProcessMatchVoteKickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProcessMatchVoteKickResponse) ProtoMessage() {}

func (x *CMsgProcessMatchVoteKickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProcessMatchVoteKickResponse.ProtoReflect.Descriptor instead.
func (*CMsgProcessMatchVoteKickResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgProcessMatchVoteKickResponse) GetRip() bool {
	if x != nil && x.Rip != nil {
		return *x.Rip
	}
	return false
}

type CMsgPlayerVoteKickedAfterLeavingMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPlayerVoteKickedAfterLeavingMatchResponse) Reset() {
	*x = CMsgPlayerVoteKickedAfterLeavingMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerVoteKickedAfterLeavingMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerVoteKickedAfterLeavingMatchResponse) ProtoMessage() {}

func (x *CMsgPlayerVoteKickedAfterLeavingMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerVoteKickedAfterLeavingMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgPlayerVoteKickedAfterLeavingMatchResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{108}
}

type CMsgHalloween_ServerBossEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCounter    *uint32  `protobuf:"varint,1,opt,name=event_counter,json=eventCounter" json:"event_counter,omitempty"`
	Timestamp       *uint32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	BossType        *uint32  `protobuf:"varint,3,opt,name=boss_type,json=bossType" json:"boss_type,omitempty"`
	BossLevel       *uint32  `protobuf:"varint,4,opt,name=boss_level,json=bossLevel" json:"boss_level,omitempty"`
	EventType       *uint32  `protobuf:"varint,5,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	PlayersInvolved *uint32  `protobuf:"varint,6,opt,name=players_involved,json=playersInvolved" json:"players_involved,omitempty"`
	ElapsedTime     *float32 `protobuf:"fixed32,7,opt,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
}

func (x *CMsgHalloween_ServerBossEvent) Reset() {
	*x = CMsgHalloween_ServerBossEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHalloween_ServerBossEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHalloween_ServerBossEvent) ProtoMessage() {}

func (x *CMsgHalloween_ServerBossEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHalloween_ServerBossEvent.ProtoReflect.Descriptor instead.
func (*CMsgHalloween_ServerBossEvent) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgHalloween_ServerBossEvent) GetEventCounter() uint32 {
	if x != nil && x.EventCounter != nil {
		return *x.EventCounter
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetBossType() uint32 {
	if x != nil && x.BossType != nil {
		return *x.BossType
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetBossLevel() uint32 {
	if x != nil && x.BossLevel != nil {
		return *x.BossLevel
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetPlayersInvolved() uint32 {
	if x != nil && x.PlayersInvolved != nil {
		return *x.PlayersInvolved
	}
	return 0
}

func (x *CMsgHalloween_ServerBossEvent) GetElapsedTime() float32 {
	if x != nil && x.ElapsedTime != nil {
		return *x.ElapsedTime
	}
	return 0
}

type CMsgHalloween_Merasmus2012 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCounter    *uint32 `protobuf:"varint,1,opt,name=event_counter,json=eventCounter" json:"event_counter,omitempty"`
	TimeSubmitted   *uint32 `protobuf:"fixed32,2,opt,name=time_submitted,json=timeSubmitted" json:"time_submitted,omitempty"`
	IsValveServer   *bool   `protobuf:"varint,3,opt,name=is_valve_server,json=isValveServer" json:"is_valve_server,omitempty"`
	BossLevel       *uint32 `protobuf:"varint,4,opt,name=boss_level,json=bossLevel" json:"boss_level,omitempty"`
	SpawnedHealth   *uint32 `protobuf:"varint,5,opt,name=spawned_health,json=spawnedHealth" json:"spawned_health,omitempty"`
	RemainingHealth *uint32 `protobuf:"varint,6,opt,name=remaining_health,json=remainingHealth" json:"remaining_health,omitempty"`
	LifeTime        *uint32 `protobuf:"varint,7,opt,name=life_time,json=lifeTime" json:"life_time,omitempty"`
	BombKills       *uint32 `protobuf:"varint,8,opt,name=bomb_kills,json=bombKills" json:"bomb_kills,omitempty"`
	StaffKills      *uint32 `protobuf:"varint,9,opt,name=staff_kills,json=staffKills" json:"staff_kills,omitempty"`
	PvpKills        *uint32 `protobuf:"varint,10,opt,name=pvp_kills,json=pvpKills" json:"pvp_kills,omitempty"`
	ProphuntTime1   *uint32 `protobuf:"varint,11,opt,name=prophunt_time1,json=prophuntTime1" json:"prophunt_time1,omitempty"`
	ProphuntTime2   *uint32 `protobuf:"varint,12,opt,name=prophunt_time2,json=prophuntTime2" json:"prophunt_time2,omitempty"`
	DmgScout        *uint32 `protobuf:"varint,13,opt,name=dmg_scout,json=dmgScout" json:"dmg_scout,omitempty"`
	DmgSniper       *uint32 `protobuf:"varint,14,opt,name=dmg_sniper,json=dmgSniper" json:"dmg_sniper,omitempty"`
	DmgSoldier      *uint32 `protobuf:"varint,15,opt,name=dmg_soldier,json=dmgSoldier" json:"dmg_soldier,omitempty"`
	DmgDemo         *uint32 `protobuf:"varint,16,opt,name=dmg_demo,json=dmgDemo" json:"dmg_demo,omitempty"`
	DmgMedic        *uint32 `protobuf:"varint,17,opt,name=dmg_medic,json=dmgMedic" json:"dmg_medic,omitempty"`
	DmgHeavy        *uint32 `protobuf:"varint,18,opt,name=dmg_heavy,json=dmgHeavy" json:"dmg_heavy,omitempty"`
	DmgPyro         *uint32 `protobuf:"varint,19,opt,name=dmg_pyro,json=dmgPyro" json:"dmg_pyro,omitempty"`
	DmgSpy          *uint32 `protobuf:"varint,20,opt,name=dmg_spy,json=dmgSpy" json:"dmg_spy,omitempty"`
	DmgEngineer     *uint32 `protobuf:"varint,21,opt,name=dmg_engineer,json=dmgEngineer" json:"dmg_engineer,omitempty"`
	ScoutCount      *uint32 `protobuf:"varint,22,opt,name=scout_count,json=scoutCount" json:"scout_count,omitempty"`
	SniperCount     *uint32 `protobuf:"varint,23,opt,name=sniper_count,json=sniperCount" json:"sniper_count,omitempty"`
	SoliderCount    *uint32 `protobuf:"varint,24,opt,name=solider_count,json=soliderCount" json:"solider_count,omitempty"`
	DemoCount       *uint32 `protobuf:"varint,25,opt,name=demo_count,json=demoCount" json:"demo_count,omitempty"`
	MedicCount      *uint32 `protobuf:"varint,26,opt,name=medic_count,json=medicCount" json:"medic_count,omitempty"`
	HeavyCount      *uint32 `protobuf:"varint,27,opt,name=heavy_count,json=heavyCount" json:"heavy_count,omitempty"`
	PyroCount       *uint32 `protobuf:"varint,28,opt,name=pyro_count,json=pyroCount" json:"pyro_count,omitempty"`
	SpyCount        *uint32 `protobuf:"varint,29,opt,name=spy_count,json=spyCount" json:"spy_count,omitempty"`
	EngineerCount   *uint32 `protobuf:"varint,30,opt,name=engineer_count,json=engineerCount" json:"engineer_count,omitempty"`
}

func (x *CMsgHalloween_Merasmus2012) Reset() {
	*x = CMsgHalloween_Merasmus2012{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHalloween_Merasmus2012) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHalloween_Merasmus2012) ProtoMessage() {}

func (x *CMsgHalloween_Merasmus2012) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHalloween_Merasmus2012.ProtoReflect.Descriptor instead.
func (*CMsgHalloween_Merasmus2012) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgHalloween_Merasmus2012) GetEventCounter() uint32 {
	if x != nil && x.EventCounter != nil {
		return *x.EventCounter
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetTimeSubmitted() uint32 {
	if x != nil && x.TimeSubmitted != nil {
		return *x.TimeSubmitted
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetIsValveServer() bool {
	if x != nil && x.IsValveServer != nil {
		return *x.IsValveServer
	}
	return false
}

func (x *CMsgHalloween_Merasmus2012) GetBossLevel() uint32 {
	if x != nil && x.BossLevel != nil {
		return *x.BossLevel
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetSpawnedHealth() uint32 {
	if x != nil && x.SpawnedHealth != nil {
		return *x.SpawnedHealth
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetRemainingHealth() uint32 {
	if x != nil && x.RemainingHealth != nil {
		return *x.RemainingHealth
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetLifeTime() uint32 {
	if x != nil && x.LifeTime != nil {
		return *x.LifeTime
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetBombKills() uint32 {
	if x != nil && x.BombKills != nil {
		return *x.BombKills
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetStaffKills() uint32 {
	if x != nil && x.StaffKills != nil {
		return *x.StaffKills
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetPvpKills() uint32 {
	if x != nil && x.PvpKills != nil {
		return *x.PvpKills
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetProphuntTime1() uint32 {
	if x != nil && x.ProphuntTime1 != nil {
		return *x.ProphuntTime1
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetProphuntTime2() uint32 {
	if x != nil && x.ProphuntTime2 != nil {
		return *x.ProphuntTime2
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgScout() uint32 {
	if x != nil && x.DmgScout != nil {
		return *x.DmgScout
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgSniper() uint32 {
	if x != nil && x.DmgSniper != nil {
		return *x.DmgSniper
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgSoldier() uint32 {
	if x != nil && x.DmgSoldier != nil {
		return *x.DmgSoldier
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgDemo() uint32 {
	if x != nil && x.DmgDemo != nil {
		return *x.DmgDemo
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgMedic() uint32 {
	if x != nil && x.DmgMedic != nil {
		return *x.DmgMedic
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgHeavy() uint32 {
	if x != nil && x.DmgHeavy != nil {
		return *x.DmgHeavy
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgPyro() uint32 {
	if x != nil && x.DmgPyro != nil {
		return *x.DmgPyro
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgSpy() uint32 {
	if x != nil && x.DmgSpy != nil {
		return *x.DmgSpy
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDmgEngineer() uint32 {
	if x != nil && x.DmgEngineer != nil {
		return *x.DmgEngineer
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetScoutCount() uint32 {
	if x != nil && x.ScoutCount != nil {
		return *x.ScoutCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetSniperCount() uint32 {
	if x != nil && x.SniperCount != nil {
		return *x.SniperCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetSoliderCount() uint32 {
	if x != nil && x.SoliderCount != nil {
		return *x.SoliderCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetDemoCount() uint32 {
	if x != nil && x.DemoCount != nil {
		return *x.DemoCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetMedicCount() uint32 {
	if x != nil && x.MedicCount != nil {
		return *x.MedicCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetHeavyCount() uint32 {
	if x != nil && x.HeavyCount != nil {
		return *x.HeavyCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetPyroCount() uint32 {
	if x != nil && x.PyroCount != nil {
		return *x.PyroCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetSpyCount() uint32 {
	if x != nil && x.SpyCount != nil {
		return *x.SpyCount
	}
	return 0
}

func (x *CMsgHalloween_Merasmus2012) GetEngineerCount() uint32 {
	if x != nil && x.EngineerCount != nil {
		return *x.EngineerCount
	}
	return 0
}

type CMsgUpdateHalloweenMerasmusLootLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players       []*CMsgUpdateHalloweenMerasmusLootLevel_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	MerasmusLevel *uint32                                        `protobuf:"varint,2,opt,name=merasmus_level,json=merasmusLevel" json:"merasmus_level,omitempty"`
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel) Reset() {
	*x = CMsgUpdateHalloweenMerasmusLootLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUpdateHalloweenMerasmusLootLevel) ProtoMessage() {}

func (x *CMsgUpdateHalloweenMerasmusLootLevel) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUpdateHalloweenMerasmusLootLevel.ProtoReflect.Descriptor instead.
func (*CMsgUpdateHalloweenMerasmusLootLevel) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel) GetPlayers() []*CMsgUpdateHalloweenMerasmusLootLevel_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel) GetMerasmusLevel() uint32 {
	if x != nil && x.MerasmusLevel != nil {
		return *x.MerasmusLevel
	}
	return 0
}

type CAttribute_String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (x *CAttribute_String) Reset() {
	*x = CAttribute_String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_String) ProtoMessage() {}

func (x *CAttribute_String) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_String.ProtoReflect.Descriptor instead.
func (*CAttribute_String) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{112}
}

func (x *CAttribute_String) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CAttribute_DynamicRecipeComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex         *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ItemQuality      *uint32 `protobuf:"varint,2,opt,name=item_quality,json=itemQuality" json:"item_quality,omitempty"`
	ComponentFlags   *uint32 `protobuf:"varint,3,opt,name=component_flags,json=componentFlags" json:"component_flags,omitempty"`
	AttributesString *string `protobuf:"bytes,4,opt,name=attributes_string,json=attributesString" json:"attributes_string,omitempty"`
	NumRequired      *uint32 `protobuf:"varint,5,opt,name=num_required,json=numRequired" json:"num_required,omitempty"`
	NumFulfilled     *uint32 `protobuf:"varint,6,opt,name=num_fulfilled,json=numFulfilled" json:"num_fulfilled,omitempty"`
}

func (x *CAttribute_DynamicRecipeComponent) Reset() {
	*x = CAttribute_DynamicRecipeComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_DynamicRecipeComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_DynamicRecipeComponent) ProtoMessage() {}

func (x *CAttribute_DynamicRecipeComponent) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_DynamicRecipeComponent.ProtoReflect.Descriptor instead.
func (*CAttribute_DynamicRecipeComponent) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{113}
}

func (x *CAttribute_DynamicRecipeComponent) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent) GetItemQuality() uint32 {
	if x != nil && x.ItemQuality != nil {
		return *x.ItemQuality
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent) GetComponentFlags() uint32 {
	if x != nil && x.ComponentFlags != nil {
		return *x.ComponentFlags
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent) GetAttributesString() string {
	if x != nil && x.AttributesString != nil {
		return *x.AttributesString
	}
	return ""
}

func (x *CAttribute_DynamicRecipeComponent) GetNumRequired() uint32 {
	if x != nil && x.NumRequired != nil {
		return *x.NumRequired
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent) GetNumFulfilled() uint32 {
	if x != nil && x.NumFulfilled != nil {
		return *x.NumFulfilled
	}
	return 0
}

type CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex         *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ItemDef          *uint32 `protobuf:"varint,2,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	ItemQuality      *uint32 `protobuf:"varint,3,opt,name=item_quality,json=itemQuality" json:"item_quality,omitempty"`
	ComponentFlags   *uint32 `protobuf:"varint,4,opt,name=component_flags,json=componentFlags" json:"component_flags,omitempty"`
	ItemFlags        *uint32 `protobuf:"varint,5,opt,name=item_flags,json=itemFlags" json:"item_flags,omitempty"`
	AttributesString *string `protobuf:"bytes,6,opt,name=attributes_string,json=attributesString" json:"attributes_string,omitempty"`
	NumRequired      *uint32 `protobuf:"varint,7,opt,name=num_required,json=numRequired" json:"num_required,omitempty"`
	ItemCount        *uint32 `protobuf:"varint,8,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
	NumFulfilled     *uint32 `protobuf:"varint,9,opt,name=num_fulfilled,json=numFulfilled" json:"num_fulfilled,omitempty"`
	ItemsFulfilled   *uint32 `protobuf:"varint,10,opt,name=items_fulfilled,json=itemsFulfilled" json:"items_fulfilled,omitempty"`
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) Reset() {
	*x = CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) ProtoMessage() {}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT.ProtoReflect.Descriptor instead.
func (*CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{114}
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetItemQuality() uint32 {
	if x != nil && x.ItemQuality != nil {
		return *x.ItemQuality
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetComponentFlags() uint32 {
	if x != nil && x.ComponentFlags != nil {
		return *x.ComponentFlags
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetItemFlags() uint32 {
	if x != nil && x.ItemFlags != nil {
		return *x.ItemFlags
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetAttributesString() string {
	if x != nil && x.AttributesString != nil {
		return *x.AttributesString
	}
	return ""
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetNumRequired() uint32 {
	if x != nil && x.NumRequired != nil {
		return *x.NumRequired
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetItemCount() uint32 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetNumFulfilled() uint32 {
	if x != nil && x.NumFulfilled != nil {
		return *x.NumFulfilled
	}
	return 0
}

func (x *CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT) GetItemsFulfilled() uint32 {
	if x != nil && x.ItemsFulfilled != nil {
		return *x.ItemsFulfilled
	}
	return 0
}

type CAttribute_ItemSlotCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags *string `protobuf:"bytes,1,opt,name=tags" json:"tags,omitempty"`
}

func (x *CAttribute_ItemSlotCriteria) Reset() {
	*x = CAttribute_ItemSlotCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_ItemSlotCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_ItemSlotCriteria) ProtoMessage() {}

func (x *CAttribute_ItemSlotCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_ItemSlotCriteria.ProtoReflect.Descriptor instead.
func (*CAttribute_ItemSlotCriteria) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{115}
}

func (x *CAttribute_ItemSlotCriteria) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

type CMsgSetItemSlotAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId             *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	SlotItemOriginalId *uint64 `protobuf:"varint,2,opt,name=slot_item_original_id,json=slotItemOriginalId" json:"slot_item_original_id,omitempty"`
	SlotIndex          *uint32 `protobuf:"varint,3,opt,name=slot_index,json=slotIndex" json:"slot_index,omitempty"`
}

func (x *CMsgSetItemSlotAttribute) Reset() {
	*x = CMsgSetItemSlotAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSetItemSlotAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSetItemSlotAttribute) ProtoMessage() {}

func (x *CMsgSetItemSlotAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSetItemSlotAttribute.ProtoReflect.Descriptor instead.
func (*CMsgSetItemSlotAttribute) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgSetItemSlotAttribute) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgSetItemSlotAttribute) GetSlotItemOriginalId() uint64 {
	if x != nil && x.SlotItemOriginalId != nil {
		return *x.SlotItemOriginalId
	}
	return 0
}

func (x *CMsgSetItemSlotAttribute) GetSlotIndex() uint32 {
	if x != nil && x.SlotIndex != nil {
		return *x.SlotIndex
	}
	return 0
}

type CSOWarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WarId        *uint32 `protobuf:"varint,2,opt,name=war_id,json=warId" json:"war_id,omitempty"`
	Affiliation  *uint32 `protobuf:"varint,3,opt,name=affiliation" json:"affiliation,omitempty"`
	PointsScored *uint32 `protobuf:"varint,4,opt,name=points_scored,json=pointsScored" json:"points_scored,omitempty"`
}

func (x *CSOWarData) Reset() {
	*x = CSOWarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOWarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOWarData) ProtoMessage() {}

func (x *CSOWarData) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOWarData.ProtoReflect.Descriptor instead.
func (*CSOWarData) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{117}
}

func (x *CSOWarData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOWarData) GetWarId() uint32 {
	if x != nil && x.WarId != nil {
		return *x.WarId
	}
	return 0
}

func (x *CSOWarData) GetAffiliation() uint32 {
	if x != nil && x.Affiliation != nil {
		return *x.Affiliation
	}
	return 0
}

func (x *CSOWarData) GetPointsScored() uint32 {
	if x != nil && x.PointsScored != nil {
		return *x.PointsScored
	}
	return 0
}

type CGCMsgGC_War_IndividualUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	WarId   *uint32 `protobuf:"varint,2,opt,name=war_id,json=warId" json:"war_id,omitempty"`
	Score   *uint32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *CGCMsgGC_War_IndividualUpdate) Reset() {
	*x = CGCMsgGC_War_IndividualUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_War_IndividualUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_War_IndividualUpdate) ProtoMessage() {}

func (x *CGCMsgGC_War_IndividualUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_War_IndividualUpdate.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_War_IndividualUpdate) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{118}
}

func (x *CGCMsgGC_War_IndividualUpdate) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CGCMsgGC_War_IndividualUpdate) GetWarId() uint32 {
	if x != nil && x.WarId != nil {
		return *x.WarId
	}
	return 0
}

func (x *CGCMsgGC_War_IndividualUpdate) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CGCMsgGC_War_JoinWar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Affiliation *uint32 `protobuf:"varint,1,opt,name=affiliation" json:"affiliation,omitempty"`
	WarId       *uint32 `protobuf:"varint,2,opt,name=war_id,json=warId" json:"war_id,omitempty"`
}

func (x *CGCMsgGC_War_JoinWar) Reset() {
	*x = CGCMsgGC_War_JoinWar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_War_JoinWar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_War_JoinWar) ProtoMessage() {}

func (x *CGCMsgGC_War_JoinWar) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_War_JoinWar.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_War_JoinWar) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{119}
}

func (x *CGCMsgGC_War_JoinWar) GetAffiliation() uint32 {
	if x != nil && x.Affiliation != nil {
		return *x.Affiliation
	}
	return 0
}

func (x *CGCMsgGC_War_JoinWar) GetWarId() uint32 {
	if x != nil && x.WarId != nil {
		return *x.WarId
	}
	return 0
}

type CGCMsgGC_War_RequestGlobalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarId *uint32 `protobuf:"varint,1,opt,name=war_id,json=warId" json:"war_id,omitempty"`
}

func (x *CGCMsgGC_War_RequestGlobalStats) Reset() {
	*x = CGCMsgGC_War_RequestGlobalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_War_RequestGlobalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_War_RequestGlobalStats) ProtoMessage() {}

func (x *CGCMsgGC_War_RequestGlobalStats) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_War_RequestGlobalStats.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_War_RequestGlobalStats) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{120}
}

func (x *CGCMsgGC_War_RequestGlobalStats) GetWarId() uint32 {
	if x != nil && x.WarId != nil {
		return *x.WarId
	}
	return 0
}

type CGCMsgGC_War_GlobalStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SideScores []*CGCMsgGC_War_GlobalStatsResponse_SideScore `protobuf:"bytes,1,rep,name=side_scores,json=sideScores" json:"side_scores,omitempty"`
	WarId      *uint32                                       `protobuf:"varint,2,opt,name=war_id,json=warId" json:"war_id,omitempty"`
}

func (x *CGCMsgGC_War_GlobalStatsResponse) Reset() {
	*x = CGCMsgGC_War_GlobalStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_War_GlobalStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_War_GlobalStatsResponse) ProtoMessage() {}

func (x *CGCMsgGC_War_GlobalStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_War_GlobalStatsResponse.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_War_GlobalStatsResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{121}
}

func (x *CGCMsgGC_War_GlobalStatsResponse) GetSideScores() []*CGCMsgGC_War_GlobalStatsResponse_SideScore {
	if x != nil {
		return x.SideScores
	}
	return nil
}

func (x *CGCMsgGC_War_GlobalStatsResponse) GetWarId() uint32 {
	if x != nil && x.WarId != nil {
		return *x.WarId
	}
	return 0
}

type CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score      *uint32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Type       *uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	ScoreId    []byte  `protobuf:"bytes,4,opt,name=score_id,json=scoreId" json:"score_id,omitempty"`
	ScoreCheck *uint32 `protobuf:"varint,5,opt,name=score_check,json=scoreCheck" json:"score_check,omitempty"`
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) Reset() {
	*x = CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) ProtoMessage() {}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{122}
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) GetScoreId() []byte {
	if x != nil {
		return x.ScoreId
	}
	return nil
}

func (x *CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate) GetScoreCheck() uint32 {
	if x != nil && x.ScoreCheck != nil {
		return *x.ScoreCheck
	}
	return 0
}

type CAttribute_WorldItemPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalItemId *uint64  `protobuf:"varint,1,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	PosX           *float32 `protobuf:"fixed32,2,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY           *float32 `protobuf:"fixed32,3,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	PosZ           *float32 `protobuf:"fixed32,4,opt,name=pos_z,json=posZ" json:"pos_z,omitempty"`
	AngX           *float32 `protobuf:"fixed32,5,opt,name=ang_x,json=angX" json:"ang_x,omitempty"`
	AngY           *float32 `protobuf:"fixed32,6,opt,name=ang_y,json=angY" json:"ang_y,omitempty"`
	AngZ           *float32 `protobuf:"fixed32,7,opt,name=ang_z,json=angZ" json:"ang_z,omitempty"`
}

func (x *CAttribute_WorldItemPlacement) Reset() {
	*x = CAttribute_WorldItemPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAttribute_WorldItemPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAttribute_WorldItemPlacement) ProtoMessage() {}

func (x *CAttribute_WorldItemPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAttribute_WorldItemPlacement.ProtoReflect.Descriptor instead.
func (*CAttribute_WorldItemPlacement) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{123}
}

func (x *CAttribute_WorldItemPlacement) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetPosX() float32 {
	if x != nil && x.PosX != nil {
		return *x.PosX
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetPosY() float32 {
	if x != nil && x.PosY != nil {
		return *x.PosY
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetPosZ() float32 {
	if x != nil && x.PosZ != nil {
		return *x.PosZ
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetAngX() float32 {
	if x != nil && x.AngX != nil {
		return *x.AngX
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetAngY() float32 {
	if x != nil && x.AngY != nil {
		return *x.AngY
	}
	return 0
}

func (x *CAttribute_WorldItemPlacement) GetAngZ() float32 {
	if x != nil && x.AngZ != nil {
		return *x.AngZ
	}
	return 0
}

type CGCMsg_WorldItemPlacement_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalItemId *uint64  `protobuf:"varint,1,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	PosX           *float32 `protobuf:"fixed32,2,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY           *float32 `protobuf:"fixed32,3,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
	PosZ           *float32 `protobuf:"fixed32,4,opt,name=pos_z,json=posZ" json:"pos_z,omitempty"`
	AngX           *float32 `protobuf:"fixed32,5,opt,name=ang_x,json=angX" json:"ang_x,omitempty"`
	AngY           *float32 `protobuf:"fixed32,6,opt,name=ang_y,json=angY" json:"ang_y,omitempty"`
	AngZ           *float32 `protobuf:"fixed32,7,opt,name=ang_z,json=angZ" json:"ang_z,omitempty"`
	ForceRemoveAll *bool    `protobuf:"varint,8,opt,name=force_remove_all,json=forceRemoveAll" json:"force_remove_all,omitempty"`
	AttribName     *string  `protobuf:"bytes,9,opt,name=attrib_name,json=attribName" json:"attrib_name,omitempty"`
}

func (x *CGCMsg_WorldItemPlacement_Update) Reset() {
	*x = CGCMsg_WorldItemPlacement_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsg_WorldItemPlacement_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsg_WorldItemPlacement_Update) ProtoMessage() {}

func (x *CGCMsg_WorldItemPlacement_Update) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsg_WorldItemPlacement_Update.ProtoReflect.Descriptor instead.
func (*CGCMsg_WorldItemPlacement_Update) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{124}
}

func (x *CGCMsg_WorldItemPlacement_Update) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetPosX() float32 {
	if x != nil && x.PosX != nil {
		return *x.PosX
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetPosY() float32 {
	if x != nil && x.PosY != nil {
		return *x.PosY
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetPosZ() float32 {
	if x != nil && x.PosZ != nil {
		return *x.PosZ
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetAngX() float32 {
	if x != nil && x.AngX != nil {
		return *x.AngX
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetAngY() float32 {
	if x != nil && x.AngY != nil {
		return *x.AngY
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetAngZ() float32 {
	if x != nil && x.AngZ != nil {
		return *x.AngZ
	}
	return 0
}

func (x *CGCMsg_WorldItemPlacement_Update) GetForceRemoveAll() bool {
	if x != nil && x.ForceRemoveAll != nil {
		return *x.ForceRemoveAll
	}
	return false
}

func (x *CGCMsg_WorldItemPlacement_Update) GetAttribName() string {
	if x != nil && x.AttribName != nil {
		return *x.AttribName
	}
	return ""
}

type CMsgAcknowledgeXP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchGroup          *int32  `protobuf:"varint,1,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	PredictedExperience *uint32 `protobuf:"varint,2,opt,name=predicted_experience,json=predictedExperience" json:"predicted_experience,omitempty"`
}

func (x *CMsgAcknowledgeXP) Reset() {
	*x = CMsgAcknowledgeXP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAcknowledgeXP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAcknowledgeXP) ProtoMessage() {}

func (x *CMsgAcknowledgeXP) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAcknowledgeXP.ProtoReflect.Descriptor instead.
func (*CMsgAcknowledgeXP) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgAcknowledgeXP) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CMsgAcknowledgeXP) GetPredictedExperience() uint32 {
	if x != nil && x.PredictedExperience != nil {
		return *x.PredictedExperience
	}
	return 0
}

type CMsgTFXPSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *CMsgTFXPSource_XPSourceType `protobuf:"varint,1,opt,name=type,enum=tf2.CMsgTFXPSource_XPSourceType,def=0" json:"type,omitempty"`
	Amount     *int32                       `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	MatchGroup *int32                       `protobuf:"varint,3,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	AccountId  *uint32                      `protobuf:"varint,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId    *uint64                      `protobuf:"varint,5,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

// Default values for CMsgTFXPSource fields.
const (
	Default_CMsgTFXPSource_Type = CMsgTFXPSource_SOURCE_SCORE
)

func (x *CMsgTFXPSource) Reset() {
	*x = CMsgTFXPSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFXPSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFXPSource) ProtoMessage() {}

func (x *CMsgTFXPSource) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFXPSource.ProtoReflect.Descriptor instead.
func (*CMsgTFXPSource) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgTFXPSource) GetType() CMsgTFXPSource_XPSourceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgTFXPSource_Type
}

func (x *CMsgTFXPSource) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgTFXPSource) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CMsgTFXPSource) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgTFXPSource) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgTFXPSourceBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*CMsgTFXPSource `protobuf:"bytes,1,rep,name=sources" json:"sources,omitempty"`
}

func (x *CMsgTFXPSourceBreakdown) Reset() {
	*x = CMsgTFXPSourceBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFXPSourceBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFXPSourceBreakdown) ProtoMessage() {}

func (x *CMsgTFXPSourceBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFXPSourceBreakdown.ProtoReflect.Descriptor instead.
func (*CMsgTFXPSourceBreakdown) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgTFXPSourceBreakdown) GetSources() []*CMsgTFXPSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type CMsgTFClientInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion *uint32 `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Language      *int32  `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CMsgTFClientInit) Reset() {
	*x = CMsgTFClientInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFClientInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFClientInit) ProtoMessage() {}

func (x *CMsgTFClientInit) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFClientInit.ProtoReflect.Descriptor instead.
func (*CMsgTFClientInit) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{128}
}

func (x *CMsgTFClientInit) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgTFClientInit) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CMsgGCNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId     *uint64                              `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	AccountId          *uint32                              `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ExpirationTime     *uint32                              `protobuf:"fixed32,3,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	Type               *CMsgGCNotification_NotificationType `protobuf:"varint,4,opt,name=type,enum=tf2.CMsgGCNotification_NotificationType,def=1" json:"type,omitempty"`
	NotificationString *string                              `protobuf:"bytes,5,opt,name=notification_string,json=notificationString" json:"notification_string,omitempty"`
}

// Default values for CMsgGCNotification fields.
const (
	Default_CMsgGCNotification_Type = CMsgGCNotification_NOTIFICATION_CUSTOM_STRING
)

func (x *CMsgGCNotification) Reset() {
	*x = CMsgGCNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotification) ProtoMessage() {}

func (x *CMsgGCNotification) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCNotification) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgGCNotification) GetNotificationId() uint64 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgGCNotification) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCNotification) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *CMsgGCNotification) GetType() CMsgGCNotification_NotificationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgGCNotification_Type
}

func (x *CMsgGCNotification) GetNotificationString() string {
	if x != nil && x.NotificationString != nil {
		return *x.NotificationString
	}
	return ""
}

type CMsgGCNotificationQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*CMsgGCNotification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
}

func (x *CMsgGCNotificationQueue) Reset() {
	*x = CMsgGCNotificationQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCNotificationQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotificationQueue) ProtoMessage() {}

func (x *CMsgGCNotificationQueue) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotificationQueue.ProtoReflect.Descriptor instead.
func (*CMsgGCNotificationQueue) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgGCNotificationQueue) GetNotifications() []*CMsgGCNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type CMsgNotificationAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NotificationId *uint64 `protobuf:"varint,2,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgNotificationAcknowledge) Reset() {
	*x = CMsgNotificationAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNotificationAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNotificationAcknowledge) ProtoMessage() {}

func (x *CMsgNotificationAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNotificationAcknowledge.ProtoReflect.Descriptor instead.
func (*CMsgNotificationAcknowledge) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgNotificationAcknowledge) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgNotificationAcknowledge) GetNotificationId() uint64 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgNotificationAcknowledgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgNotificationAcknowledgeReply) Reset() {
	*x = CMsgNotificationAcknowledgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNotificationAcknowledgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNotificationAcknowledgeReply) ProtoMessage() {}

func (x *CMsgNotificationAcknowledgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNotificationAcknowledgeReply.ProtoReflect.Descriptor instead.
func (*CMsgNotificationAcknowledgeReply) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{132}
}

type CMsgGC_Match_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     *uint64                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchGroup  *int32                        `protobuf:"varint,2,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	Status      *CMsgGC_Match_Result_Status   `protobuf:"varint,3,opt,name=status,enum=tf2.CMsgGC_Match_Result_Status,def=0" json:"status,omitempty"`
	Duration    *uint32                       `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	RedScore    *uint32                       `protobuf:"varint,5,opt,name=red_score,json=redScore" json:"red_score,omitempty"`
	BlueScore   *uint32                       `protobuf:"varint,6,opt,name=blue_score,json=blueScore" json:"blue_score,omitempty"`
	WinningTeam *uint32                       `protobuf:"varint,7,opt,name=winning_team,json=winningTeam" json:"winning_team,omitempty"`
	MapIndex    *uint32                       `protobuf:"varint,8,opt,name=map_index,json=mapIndex" json:"map_index,omitempty"`
	GameType    *uint32                       `protobuf:"varint,9,opt,name=game_type,json=gameType,def=0" json:"game_type,omitempty"`
	Players     []*CMsgGC_Match_Result_Player `protobuf:"bytes,10,rep,name=players" json:"players,omitempty"`
	WinReason   *uint32                       `protobuf:"varint,13,opt,name=win_reason,json=winReason" json:"win_reason,omitempty"`
	Flags       *uint32                       `protobuf:"varint,14,opt,name=flags" json:"flags,omitempty"`
	Bots        *uint32                       `protobuf:"varint,16,opt,name=bots" json:"bots,omitempty"`
}

// Default values for CMsgGC_Match_Result fields.
const (
	Default_CMsgGC_Match_Result_Status   = CMsgGC_Match_Result_MATCH_SUCCEEDED
	Default_CMsgGC_Match_Result_GameType = uint32(0)
)

func (x *CMsgGC_Match_Result) Reset() {
	*x = CMsgGC_Match_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Match_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Match_Result) ProtoMessage() {}

func (x *CMsgGC_Match_Result) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Match_Result.ProtoReflect.Descriptor instead.
func (*CMsgGC_Match_Result) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgGC_Match_Result) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetStatus() CMsgGC_Match_Result_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgGC_Match_Result_Status
}

func (x *CMsgGC_Match_Result) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetRedScore() uint32 {
	if x != nil && x.RedScore != nil {
		return *x.RedScore
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetBlueScore() uint32 {
	if x != nil && x.BlueScore != nil {
		return *x.BlueScore
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetWinningTeam() uint32 {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetMapIndex() uint32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return Default_CMsgGC_Match_Result_GameType
}

func (x *CMsgGC_Match_Result) GetPlayers() []*CMsgGC_Match_Result_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGC_Match_Result) GetWinReason() uint32 {
	if x != nil && x.WinReason != nil {
		return *x.WinReason
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGC_Match_Result) GetBots() uint32 {
	if x != nil && x.Bots != nil {
		return *x.Bots
	}
	return 0
}

type CMsgGC_Match_ResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGC_Match_ResultResponse) Reset() {
	*x = CMsgGC_Match_ResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Match_ResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Match_ResultResponse) ProtoMessage() {}

func (x *CMsgGC_Match_ResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Match_ResultResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_Match_ResultResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{134}
}

type CEconItemPreviewDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Econitem *CSOEconItem `protobuf:"bytes,1,opt,name=econitem" json:"econitem,omitempty"`
}

func (x *CEconItemPreviewDataBlock) Reset() {
	*x = CEconItemPreviewDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItemPreviewDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItemPreviewDataBlock) ProtoMessage() {}

func (x *CEconItemPreviewDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItemPreviewDataBlock.ProtoReflect.Descriptor instead.
func (*CEconItemPreviewDataBlock) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{135}
}

func (x *CEconItemPreviewDataBlock) GetEconitem() *CSOEconItem {
	if x != nil {
		return x.Econitem
	}
	return nil
}

type CMsgGC_Client2GCEconPreviewDataBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamS *uint64 `protobuf:"varint,1,opt,name=param_s,json=paramS" json:"param_s,omitempty"`
	ParamA *uint64 `protobuf:"varint,2,opt,name=param_a,json=paramA" json:"param_a,omitempty"`
	ParamD *uint64 `protobuf:"varint,3,opt,name=param_d,json=paramD" json:"param_d,omitempty"`
	ParamM *uint64 `protobuf:"varint,4,opt,name=param_m,json=paramM" json:"param_m,omitempty"`
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) Reset() {
	*x = CMsgGC_Client2GCEconPreviewDataBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Client2GCEconPreviewDataBlockRequest) ProtoMessage() {}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Client2GCEconPreviewDataBlockRequest.ProtoReflect.Descriptor instead.
func (*CMsgGC_Client2GCEconPreviewDataBlockRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{136}
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) GetParamS() uint64 {
	if x != nil && x.ParamS != nil {
		return *x.ParamS
	}
	return 0
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) GetParamA() uint64 {
	if x != nil && x.ParamA != nil {
		return *x.ParamA
	}
	return 0
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) GetParamD() uint64 {
	if x != nil && x.ParamD != nil {
		return *x.ParamD
	}
	return 0
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockRequest) GetParamM() uint64 {
	if x != nil && x.ParamM != nil {
		return *x.ParamM
	}
	return 0
}

type CMsgGC_Client2GCEconPreviewDataBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockResponse) Reset() {
	*x = CMsgGC_Client2GCEconPreviewDataBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Client2GCEconPreviewDataBlockResponse) ProtoMessage() {}

func (x *CMsgGC_Client2GCEconPreviewDataBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Client2GCEconPreviewDataBlockResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_Client2GCEconPreviewDataBlockResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{137}
}

func (x *CMsgGC_Client2GCEconPreviewDataBlockResponse) GetIteminfo() *CEconItemPreviewDataBlock {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CSOTFLadderPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchGroup    *int32  `protobuf:"varint,2,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	SeasonId      *uint32 `protobuf:"varint,3,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Games         *uint32 `protobuf:"varint,9,opt,name=games" json:"games,omitempty"`
	Score         *uint32 `protobuf:"varint,10,opt,name=score" json:"score,omitempty"`
	Kills         *uint32 `protobuf:"varint,11,opt,name=kills" json:"kills,omitempty"`
	Deaths        *uint32 `protobuf:"varint,12,opt,name=deaths" json:"deaths,omitempty"`
	Damage        *uint32 `protobuf:"varint,13,opt,name=damage" json:"damage,omitempty"`
	Healing       *uint32 `protobuf:"varint,14,opt,name=healing" json:"healing,omitempty"`
	Support       *uint32 `protobuf:"varint,15,opt,name=support" json:"support,omitempty"`
	ScoreBronze   *uint32 `protobuf:"varint,16,opt,name=score_bronze,json=scoreBronze" json:"score_bronze,omitempty"`
	ScoreSilver   *uint32 `protobuf:"varint,17,opt,name=score_silver,json=scoreSilver" json:"score_silver,omitempty"`
	ScoreGold     *uint32 `protobuf:"varint,18,opt,name=score_gold,json=scoreGold" json:"score_gold,omitempty"`
	KillsBronze   *uint32 `protobuf:"varint,19,opt,name=kills_bronze,json=killsBronze" json:"kills_bronze,omitempty"`
	KillsSilver   *uint32 `protobuf:"varint,20,opt,name=kills_silver,json=killsSilver" json:"kills_silver,omitempty"`
	KillsGold     *uint32 `protobuf:"varint,21,opt,name=kills_gold,json=killsGold" json:"kills_gold,omitempty"`
	DamageBronze  *uint32 `protobuf:"varint,22,opt,name=damage_bronze,json=damageBronze" json:"damage_bronze,omitempty"`
	DamageSilver  *uint32 `protobuf:"varint,23,opt,name=damage_silver,json=damageSilver" json:"damage_silver,omitempty"`
	DamageGold    *uint32 `protobuf:"varint,24,opt,name=damage_gold,json=damageGold" json:"damage_gold,omitempty"`
	HealingBronze *uint32 `protobuf:"varint,25,opt,name=healing_bronze,json=healingBronze" json:"healing_bronze,omitempty"`
	HealingSilver *uint32 `protobuf:"varint,26,opt,name=healing_silver,json=healingSilver" json:"healing_silver,omitempty"`
	HealingGold   *uint32 `protobuf:"varint,27,opt,name=healing_gold,json=healingGold" json:"healing_gold,omitempty"`
	SupportBronze *uint32 `protobuf:"varint,28,opt,name=support_bronze,json=supportBronze" json:"support_bronze,omitempty"`
	SupportSilver *uint32 `protobuf:"varint,29,opt,name=support_silver,json=supportSilver" json:"support_silver,omitempty"`
	SupportGold   *uint32 `protobuf:"varint,30,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
}

func (x *CSOTFLadderPlayerStats) Reset() {
	*x = CSOTFLadderPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFLadderPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFLadderPlayerStats) ProtoMessage() {}

func (x *CSOTFLadderPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFLadderPlayerStats.ProtoReflect.Descriptor instead.
func (*CSOTFLadderPlayerStats) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{138}
}

func (x *CSOTFLadderPlayerStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetSeasonId() uint32 {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetGames() uint32 {
	if x != nil && x.Games != nil {
		return *x.Games
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetHealing() uint32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetSupport() uint32 {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetScoreBronze() uint32 {
	if x != nil && x.ScoreBronze != nil {
		return *x.ScoreBronze
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetScoreSilver() uint32 {
	if x != nil && x.ScoreSilver != nil {
		return *x.ScoreSilver
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetScoreGold() uint32 {
	if x != nil && x.ScoreGold != nil {
		return *x.ScoreGold
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetKillsBronze() uint32 {
	if x != nil && x.KillsBronze != nil {
		return *x.KillsBronze
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetKillsSilver() uint32 {
	if x != nil && x.KillsSilver != nil {
		return *x.KillsSilver
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetKillsGold() uint32 {
	if x != nil && x.KillsGold != nil {
		return *x.KillsGold
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetDamageBronze() uint32 {
	if x != nil && x.DamageBronze != nil {
		return *x.DamageBronze
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetDamageSilver() uint32 {
	if x != nil && x.DamageSilver != nil {
		return *x.DamageSilver
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetDamageGold() uint32 {
	if x != nil && x.DamageGold != nil {
		return *x.DamageGold
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetHealingBronze() uint32 {
	if x != nil && x.HealingBronze != nil {
		return *x.HealingBronze
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetHealingSilver() uint32 {
	if x != nil && x.HealingSilver != nil {
		return *x.HealingSilver
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetHealingGold() uint32 {
	if x != nil && x.HealingGold != nil {
		return *x.HealingGold
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetSupportBronze() uint32 {
	if x != nil && x.SupportBronze != nil {
		return *x.SupportBronze
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetSupportSilver() uint32 {
	if x != nil && x.SupportSilver != nil {
		return *x.SupportSilver
	}
	return 0
}

func (x *CSOTFLadderPlayerStats) GetSupportGold() uint32 {
	if x != nil && x.SupportGold != nil {
		return *x.SupportGold
	}
	return 0
}

type CSOTFRatingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RatingType      *int32  `protobuf:"varint,2,opt,name=rating_type,json=ratingType" json:"rating_type,omitempty"`
	RatingPrimary   *uint32 `protobuf:"varint,3,opt,name=rating_primary,json=ratingPrimary" json:"rating_primary,omitempty"`
	RatingSecondary *uint32 `protobuf:"varint,4,opt,name=rating_secondary,json=ratingSecondary" json:"rating_secondary,omitempty"`
	RatingTertiary  *uint32 `protobuf:"varint,5,opt,name=rating_tertiary,json=ratingTertiary" json:"rating_tertiary,omitempty"`
}

func (x *CSOTFRatingData) Reset() {
	*x = CSOTFRatingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFRatingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFRatingData) ProtoMessage() {}

func (x *CSOTFRatingData) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFRatingData.ProtoReflect.Descriptor instead.
func (*CSOTFRatingData) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{139}
}

func (x *CSOTFRatingData) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTFRatingData) GetRatingType() int32 {
	if x != nil && x.RatingType != nil {
		return *x.RatingType
	}
	return 0
}

func (x *CSOTFRatingData) GetRatingPrimary() uint32 {
	if x != nil && x.RatingPrimary != nil {
		return *x.RatingPrimary
	}
	return 0
}

func (x *CSOTFRatingData) GetRatingSecondary() uint32 {
	if x != nil && x.RatingSecondary != nil {
		return *x.RatingSecondary
	}
	return 0
}

func (x *CSOTFRatingData) GetRatingTertiary() uint32 {
	if x != nil && x.RatingTertiary != nil {
		return *x.RatingTertiary
	}
	return 0
}

type CMsgGC_TFVoteKickPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId *uint64           `protobuf:"varint,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	VoterId  *uint64           `protobuf:"varint,3,opt,name=voter_id,json=voterId" json:"voter_id,omitempty"`
	Reason   *TFVoteKickReason `protobuf:"varint,4,opt,name=reason,enum=tf2.TFVoteKickReason,def=0" json:"reason,omitempty"`
	MatchId  *uint64           `protobuf:"varint,5,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

// Default values for CMsgGC_TFVoteKickPlayerRequest fields.
const (
	Default_CMsgGC_TFVoteKickPlayerRequest_Reason = TFVoteKickReason_TFVoteKickReason_Other
)

func (x *CMsgGC_TFVoteKickPlayerRequest) Reset() {
	*x = CMsgGC_TFVoteKickPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_TFVoteKickPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_TFVoteKickPlayerRequest) ProtoMessage() {}

func (x *CMsgGC_TFVoteKickPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_TFVoteKickPlayerRequest.ProtoReflect.Descriptor instead.
func (*CMsgGC_TFVoteKickPlayerRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{140}
}

func (x *CMsgGC_TFVoteKickPlayerRequest) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *CMsgGC_TFVoteKickPlayerRequest) GetVoterId() uint64 {
	if x != nil && x.VoterId != nil {
		return *x.VoterId
	}
	return 0
}

func (x *CMsgGC_TFVoteKickPlayerRequest) GetReason() TFVoteKickReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CMsgGC_TFVoteKickPlayerRequest_Reason
}

func (x *CMsgGC_TFVoteKickPlayerRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGC_VoteKickPlayerRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed       *bool `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	VoterInhibit  *bool `protobuf:"varint,3,opt,name=voter_inhibit,json=voterInhibit" json:"voter_inhibit,omitempty"`
	TargetInhibit *bool `protobuf:"varint,4,opt,name=target_inhibit,json=targetInhibit" json:"target_inhibit,omitempty"`
}

func (x *CMsgGC_VoteKickPlayerRequestResponse) Reset() {
	*x = CMsgGC_VoteKickPlayerRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_VoteKickPlayerRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_VoteKickPlayerRequestResponse) ProtoMessage() {}

func (x *CMsgGC_VoteKickPlayerRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_VoteKickPlayerRequestResponse.ProtoReflect.Descriptor instead.
func (*CMsgGC_VoteKickPlayerRequestResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgGC_VoteKickPlayerRequestResponse) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

func (x *CMsgGC_VoteKickPlayerRequestResponse) GetVoterInhibit() bool {
	if x != nil && x.VoterInhibit != nil {
		return *x.VoterInhibit
	}
	return false
}

func (x *CMsgGC_VoteKickPlayerRequestResponse) GetTargetInhibit() bool {
	if x != nil && x.TargetInhibit != nil {
		return *x.TargetInhibit
	}
	return false
}

type CMsgGC_DailyCompetitiveStatsRollup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGC_DailyCompetitiveStatsRollup) Reset() {
	*x = CMsgGC_DailyCompetitiveStatsRollup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_DailyCompetitiveStatsRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_DailyCompetitiveStatsRollup) ProtoMessage() {}

func (x *CMsgGC_DailyCompetitiveStatsRollup) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_DailyCompetitiveStatsRollup.ProtoReflect.Descriptor instead.
func (*CMsgGC_DailyCompetitiveStatsRollup) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{142}
}

type CMsgGC_DailyCompetitiveStatsRollup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rankdata []*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry `protobuf:"bytes,1,rep,name=rankdata" json:"rankdata,omitempty"`
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response) Reset() {
	*x = CMsgGC_DailyCompetitiveStatsRollup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_DailyCompetitiveStatsRollup_Response) ProtoMessage() {}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_DailyCompetitiveStatsRollup_Response.ProtoReflect.Descriptor instead.
func (*CMsgGC_DailyCompetitiveStatsRollup_Response) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response) GetRankdata() []*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry {
	if x != nil {
		return x.Rankdata
	}
	return nil
}

type CMsgGC_ReportPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIdTarget *uint32                      `protobuf:"varint,1,opt,name=account_id_target,json=accountIdTarget" json:"account_id_target,omitempty"`
	Reason          *CMsgGC_ReportPlayer_EReason `protobuf:"varint,2,opt,name=reason,enum=tf2.CMsgGC_ReportPlayer_EReason,def=0" json:"reason,omitempty"`
}

// Default values for CMsgGC_ReportPlayer fields.
const (
	Default_CMsgGC_ReportPlayer_Reason = CMsgGC_ReportPlayer_kReason_INVALID
)

func (x *CMsgGC_ReportPlayer) Reset() {
	*x = CMsgGC_ReportPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_ReportPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_ReportPlayer) ProtoMessage() {}

func (x *CMsgGC_ReportPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_ReportPlayer.ProtoReflect.Descriptor instead.
func (*CMsgGC_ReportPlayer) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{144}
}

func (x *CMsgGC_ReportPlayer) GetAccountIdTarget() uint32 {
	if x != nil && x.AccountIdTarget != nil {
		return *x.AccountIdTarget
	}
	return 0
}

func (x *CMsgGC_ReportPlayer) GetReason() CMsgGC_ReportPlayer_EReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CMsgGC_ReportPlayer_Reason
}

type CSOTFMatchResultPlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId             *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AccountId           *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchGroup          *int32  `protobuf:"varint,3,opt,name=match_group,json=matchGroup" json:"match_group,omitempty"`
	Endtime             *uint32 `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
	SeasonId            *uint32 `protobuf:"varint,5,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Status              *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	OriginalPartyId     *uint32 `protobuf:"varint,7,opt,name=original_party_id,json=originalPartyId" json:"original_party_id,omitempty"`
	Team                *uint32 `protobuf:"varint,8,opt,name=team" json:"team,omitempty"`
	Score               *uint32 `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
	Ping                *uint32 `protobuf:"varint,10,opt,name=ping" json:"ping,omitempty"`
	Flags               *uint32 `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	DisplayRating       *uint32 `protobuf:"varint,12,opt,name=display_rating,json=displayRating" json:"display_rating,omitempty"`
	DisplayRatingChange *int32  `protobuf:"varint,13,opt,name=display_rating_change,json=displayRatingChange" json:"display_rating_change,omitempty"`
	Rank                *uint32 `protobuf:"varint,14,opt,name=rank" json:"rank,omitempty"`
	ClassesPlayed       *uint32 `protobuf:"varint,15,opt,name=classes_played,json=classesPlayed" json:"classes_played,omitempty"`
	Kills               *uint32 `protobuf:"varint,16,opt,name=kills" json:"kills,omitempty"`
	Deaths              *uint32 `protobuf:"varint,17,opt,name=deaths" json:"deaths,omitempty"`
	Damage              *uint32 `protobuf:"varint,18,opt,name=damage" json:"damage,omitempty"`
	Healing             *uint32 `protobuf:"varint,19,opt,name=healing" json:"healing,omitempty"`
	Support             *uint32 `protobuf:"varint,20,opt,name=support" json:"support,omitempty"`
	ScoreMedal          *uint32 `protobuf:"varint,21,opt,name=score_medal,json=scoreMedal" json:"score_medal,omitempty"`
	KillsMedal          *uint32 `protobuf:"varint,22,opt,name=kills_medal,json=killsMedal" json:"kills_medal,omitempty"`
	DamageMedal         *uint32 `protobuf:"varint,23,opt,name=damage_medal,json=damageMedal" json:"damage_medal,omitempty"`
	HealingMedal        *uint32 `protobuf:"varint,24,opt,name=healing_medal,json=healingMedal" json:"healing_medal,omitempty"`
	SupportMedal        *uint32 `protobuf:"varint,25,opt,name=support_medal,json=supportMedal" json:"support_medal,omitempty"`
	MapIndex            *uint32 `protobuf:"varint,26,opt,name=map_index,json=mapIndex" json:"map_index,omitempty"`
	WinningTeam         *uint32 `protobuf:"varint,27,opt,name=winning_team,json=winningTeam" json:"winning_team,omitempty"`
}

func (x *CSOTFMatchResultPlayerStats) Reset() {
	*x = CSOTFMatchResultPlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFMatchResultPlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFMatchResultPlayerStats) ProtoMessage() {}

func (x *CSOTFMatchResultPlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFMatchResultPlayerStats.ProtoReflect.Descriptor instead.
func (*CSOTFMatchResultPlayerStats) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{145}
}

func (x *CSOTFMatchResultPlayerStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetMatchGroup() int32 {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetSeasonId() uint32 {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetOriginalPartyId() uint32 {
	if x != nil && x.OriginalPartyId != nil {
		return *x.OriginalPartyId
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetPing() uint32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetDisplayRating() uint32 {
	if x != nil && x.DisplayRating != nil {
		return *x.DisplayRating
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetDisplayRatingChange() int32 {
	if x != nil && x.DisplayRatingChange != nil {
		return *x.DisplayRatingChange
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetClassesPlayed() uint32 {
	if x != nil && x.ClassesPlayed != nil {
		return *x.ClassesPlayed
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetHealing() uint32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetSupport() uint32 {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetScoreMedal() uint32 {
	if x != nil && x.ScoreMedal != nil {
		return *x.ScoreMedal
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetKillsMedal() uint32 {
	if x != nil && x.KillsMedal != nil {
		return *x.KillsMedal
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetDamageMedal() uint32 {
	if x != nil && x.DamageMedal != nil {
		return *x.DamageMedal
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetHealingMedal() uint32 {
	if x != nil && x.HealingMedal != nil {
		return *x.HealingMedal
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetSupportMedal() uint32 {
	if x != nil && x.SupportMedal != nil {
		return *x.SupportMedal
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetMapIndex() uint32 {
	if x != nil && x.MapIndex != nil {
		return *x.MapIndex
	}
	return 0
}

func (x *CSOTFMatchResultPlayerStats) GetWinningTeam() uint32 {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return 0
}

type CMsgGCRequestMatchMakerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCRequestMatchMakerStats) Reset() {
	*x = CMsgGCRequestMatchMakerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRequestMatchMakerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRequestMatchMakerStats) ProtoMessage() {}

func (x *CMsgGCRequestMatchMakerStats) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRequestMatchMakerStats.ProtoReflect.Descriptor instead.
func (*CMsgGCRequestMatchMakerStats) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{146}
}

type CMsgGCDataCenterPopulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HealthRatio *float32 `protobuf:"fixed32,2,opt,name=health_ratio,json=healthRatio" json:"health_ratio,omitempty"`
}

func (x *CMsgGCDataCenterPopulation) Reset() {
	*x = CMsgGCDataCenterPopulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCDataCenterPopulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCDataCenterPopulation) ProtoMessage() {}

func (x *CMsgGCDataCenterPopulation) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCDataCenterPopulation.ProtoReflect.Descriptor instead.
func (*CMsgGCDataCenterPopulation) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{147}
}

func (x *CMsgGCDataCenterPopulation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCDataCenterPopulation) GetHealthRatio() float32 {
	if x != nil && x.HealthRatio != nil {
		return *x.HealthRatio
	}
	return 0
}

type CMsgGCMatchGroupDataCenterPopulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterPopulation []*CMsgGCDataCenterPopulation `protobuf:"bytes,1,rep,name=data_center_population,json=dataCenterPopulation" json:"data_center_population,omitempty"`
}

func (x *CMsgGCMatchGroupDataCenterPopulation) Reset() {
	*x = CMsgGCMatchGroupDataCenterPopulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCMatchGroupDataCenterPopulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCMatchGroupDataCenterPopulation) ProtoMessage() {}

func (x *CMsgGCMatchGroupDataCenterPopulation) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCMatchGroupDataCenterPopulation.ProtoReflect.Descriptor instead.
func (*CMsgGCMatchGroupDataCenterPopulation) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{148}
}

func (x *CMsgGCMatchGroupDataCenterPopulation) GetDataCenterPopulation() []*CMsgGCDataCenterPopulation {
	if x != nil {
		return x.DataCenterPopulation
	}
	return nil
}

type CMsgGCMatchMakerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapCount                       []uint32                                `protobuf:"varint,1,rep,name=map_count,json=mapCount" json:"map_count,omitempty"`
	MatchgroupDataCenterPopulation []*CMsgGCMatchGroupDataCenterPopulation `protobuf:"bytes,2,rep,name=matchgroup_data_center_population,json=matchgroupDataCenterPopulation" json:"matchgroup_data_center_population,omitempty"`
}

func (x *CMsgGCMatchMakerStatsResponse) Reset() {
	*x = CMsgGCMatchMakerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCMatchMakerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCMatchMakerStatsResponse) ProtoMessage() {}

func (x *CMsgGCMatchMakerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCMatchMakerStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCMatchMakerStatsResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{149}
}

func (x *CMsgGCMatchMakerStatsResponse) GetMapCount() []uint32 {
	if x != nil {
		return x.MapCount
	}
	return nil
}

func (x *CMsgGCMatchMakerStatsResponse) GetMatchgroupDataCenterPopulation() []*CMsgGCMatchGroupDataCenterPopulation {
	if x != nil {
		return x.MatchgroupDataCenterPopulation
	}
	return nil
}

type CMsgGCMatchHistoryLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchGroup *ETFMatchGroup `protobuf:"varint,1,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
}

// Default values for CMsgGCMatchHistoryLoad fields.
const (
	Default_CMsgGCMatchHistoryLoad_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CMsgGCMatchHistoryLoad) Reset() {
	*x = CMsgGCMatchHistoryLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCMatchHistoryLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCMatchHistoryLoad) ProtoMessage() {}

func (x *CMsgGCMatchHistoryLoad) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCMatchHistoryLoad.ProtoReflect.Descriptor instead.
func (*CMsgGCMatchHistoryLoad) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{150}
}

func (x *CMsgGCMatchHistoryLoad) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CMsgGCMatchHistoryLoad_MatchGroup
}

type CMsgGCDataCenterPing_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pingdata []*CMsgGCDataCenterPing_Update_PingEntry `protobuf:"bytes,1,rep,name=pingdata" json:"pingdata,omitempty"`
}

func (x *CMsgGCDataCenterPing_Update) Reset() {
	*x = CMsgGCDataCenterPing_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCDataCenterPing_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCDataCenterPing_Update) ProtoMessage() {}

func (x *CMsgGCDataCenterPing_Update) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCDataCenterPing_Update.ProtoReflect.Descriptor instead.
func (*CMsgGCDataCenterPing_Update) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{151}
}

func (x *CMsgGCDataCenterPing_Update) GetPingdata() []*CMsgGCDataCenterPing_Update_PingEntry {
	if x != nil {
		return x.Pingdata
	}
	return nil
}

type CMsgGC_KickPlayerFromLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetID *uint64 `protobuf:"varint,1,opt,name=targetID" json:"targetID,omitempty"`
}

func (x *CMsgGC_KickPlayerFromLobby) Reset() {
	*x = CMsgGC_KickPlayerFromLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_KickPlayerFromLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_KickPlayerFromLobby) ProtoMessage() {}

func (x *CMsgGC_KickPlayerFromLobby) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_KickPlayerFromLobby.ProtoReflect.Descriptor instead.
func (*CMsgGC_KickPlayerFromLobby) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{152}
}

func (x *CMsgGC_KickPlayerFromLobby) GetTargetID() uint64 {
	if x != nil && x.TargetID != nil {
		return *x.TargetID
	}
	return 0
}

type CMsgGCSurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionType *SurveyQuestionType `protobuf:"varint,1,opt,name=question_type,json=questionType,enum=tf2.SurveyQuestionType,def=0" json:"question_type,omitempty"`
	MatchId      *uint64             `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

// Default values for CMsgGCSurveyRequest fields.
const (
	Default_CMsgGCSurveyRequest_QuestionType = SurveyQuestionType_QUESTION_MATCH_QUALITY
)

func (x *CMsgGCSurveyRequest) Reset() {
	*x = CMsgGCSurveyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCSurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCSurveyRequest) ProtoMessage() {}

func (x *CMsgGCSurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCSurveyRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCSurveyRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{153}
}

func (x *CMsgGCSurveyRequest) GetQuestionType() SurveyQuestionType {
	if x != nil && x.QuestionType != nil {
		return *x.QuestionType
	}
	return Default_CMsgGCSurveyRequest_QuestionType
}

func (x *CMsgGCSurveyRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionType *SurveyQuestionType `protobuf:"varint,1,opt,name=question_type,json=questionType,enum=tf2.SurveyQuestionType,def=0" json:"question_type,omitempty"`
	MatchId      *uint64             `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Response     *int32              `protobuf:"varint,3,opt,name=response" json:"response,omitempty"`
}

// Default values for CMsgGCSurveyResponse fields.
const (
	Default_CMsgGCSurveyResponse_QuestionType = SurveyQuestionType_QUESTION_MATCH_QUALITY
)

func (x *CMsgGCSurveyResponse) Reset() {
	*x = CMsgGCSurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCSurveyResponse) ProtoMessage() {}

func (x *CMsgGCSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCSurveyResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCSurveyResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{154}
}

func (x *CMsgGCSurveyResponse) GetQuestionType() SurveyQuestionType {
	if x != nil && x.QuestionType != nil {
		return *x.QuestionType
	}
	return Default_CMsgGCSurveyResponse_QuestionType
}

func (x *CMsgGCSurveyResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCSurveyResponse) GetResponse() int32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

type CSOQuestMapNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Defindex         *uint32 `protobuf:"varint,3,opt,name=defindex" json:"defindex,omitempty"`
	NodeId           *uint32 `protobuf:"varint,4,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Star_0Earned     *bool   `protobuf:"varint,6,opt,name=star_0_earned,json=star0Earned,def=0" json:"star_0_earned,omitempty"`
	Star_1Earned     *bool   `protobuf:"varint,7,opt,name=star_1_earned,json=star1Earned,def=0" json:"star_1_earned,omitempty"`
	Star_2Earned     *bool   `protobuf:"varint,8,opt,name=star_2_earned,json=star2Earned,def=0" json:"star_2_earned,omitempty"`
	LootClaimed      *bool   `protobuf:"varint,9,opt,name=loot_claimed,json=lootClaimed,def=0" json:"loot_claimed,omitempty"`
	SelectedQuestDef *uint32 `protobuf:"varint,10,opt,name=selected_quest_def,json=selectedQuestDef,def=0" json:"selected_quest_def,omitempty"`
	MapCycle         *uint32 `protobuf:"varint,11,opt,name=map_cycle,json=mapCycle" json:"map_cycle,omitempty"`
}

// Default values for CSOQuestMapNode fields.
const (
	Default_CSOQuestMapNode_Star_0Earned     = bool(false)
	Default_CSOQuestMapNode_Star_1Earned     = bool(false)
	Default_CSOQuestMapNode_Star_2Earned     = bool(false)
	Default_CSOQuestMapNode_LootClaimed      = bool(false)
	Default_CSOQuestMapNode_SelectedQuestDef = uint32(0)
)

func (x *CSOQuestMapNode) Reset() {
	*x = CSOQuestMapNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOQuestMapNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOQuestMapNode) ProtoMessage() {}

func (x *CSOQuestMapNode) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOQuestMapNode.ProtoReflect.Descriptor instead.
func (*CSOQuestMapNode) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{155}
}

func (x *CSOQuestMapNode) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOQuestMapNode) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CSOQuestMapNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CSOQuestMapNode) GetStar_0Earned() bool {
	if x != nil && x.Star_0Earned != nil {
		return *x.Star_0Earned
	}
	return Default_CSOQuestMapNode_Star_0Earned
}

func (x *CSOQuestMapNode) GetStar_1Earned() bool {
	if x != nil && x.Star_1Earned != nil {
		return *x.Star_1Earned
	}
	return Default_CSOQuestMapNode_Star_1Earned
}

func (x *CSOQuestMapNode) GetStar_2Earned() bool {
	if x != nil && x.Star_2Earned != nil {
		return *x.Star_2Earned
	}
	return Default_CSOQuestMapNode_Star_2Earned
}

func (x *CSOQuestMapNode) GetLootClaimed() bool {
	if x != nil && x.LootClaimed != nil {
		return *x.LootClaimed
	}
	return Default_CSOQuestMapNode_LootClaimed
}

func (x *CSOQuestMapNode) GetSelectedQuestDef() uint32 {
	if x != nil && x.SelectedQuestDef != nil {
		return *x.SelectedQuestDef
	}
	return Default_CSOQuestMapNode_SelectedQuestDef
}

func (x *CSOQuestMapNode) GetMapCycle() uint32 {
	if x != nil && x.MapCycle != nil {
		return *x.MapCycle
	}
	return 0
}

type CSOQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestId              *uint64 `protobuf:"varint,2,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Defindex             *uint32 `protobuf:"varint,3,opt,name=defindex" json:"defindex,omitempty"`
	Active               *bool   `protobuf:"varint,4,opt,name=active,def=0" json:"active,omitempty"`
	Points_0             *uint32 `protobuf:"varint,5,opt,name=points_0,json=points0" json:"points_0,omitempty"`
	Points_1             *uint32 `protobuf:"varint,6,opt,name=points_1,json=points1" json:"points_1,omitempty"`
	Points_2             *uint32 `protobuf:"varint,7,opt,name=points_2,json=points2" json:"points_2,omitempty"`
	QuestMapNodeSourceId *uint32 `protobuf:"varint,8,opt,name=quest_map_node_source_id,json=questMapNodeSourceId" json:"quest_map_node_source_id,omitempty"`
	MapCycle             *uint32 `protobuf:"varint,9,opt,name=map_cycle,json=mapCycle" json:"map_cycle,omitempty"`
}

// Default values for CSOQuest fields.
const (
	Default_CSOQuest_Active = bool(false)
)

func (x *CSOQuest) Reset() {
	*x = CSOQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOQuest) ProtoMessage() {}

func (x *CSOQuest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOQuest.ProtoReflect.Descriptor instead.
func (*CSOQuest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{156}
}

func (x *CSOQuest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOQuest) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CSOQuest) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CSOQuest) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return Default_CSOQuest_Active
}

func (x *CSOQuest) GetPoints_0() uint32 {
	if x != nil && x.Points_0 != nil {
		return *x.Points_0
	}
	return 0
}

func (x *CSOQuest) GetPoints_1() uint32 {
	if x != nil && x.Points_1 != nil {
		return *x.Points_1
	}
	return 0
}

func (x *CSOQuest) GetPoints_2() uint32 {
	if x != nil && x.Points_2 != nil {
		return *x.Points_2
	}
	return 0
}

func (x *CSOQuest) GetQuestMapNodeSourceId() uint32 {
	if x != nil && x.QuestMapNodeSourceId != nil {
		return *x.QuestMapNodeSourceId
	}
	return 0
}

func (x *CSOQuest) GetMapCycle() uint32 {
	if x != nil && x.MapCycle != nil {
		return *x.MapCycle
	}
	return 0
}

type CSOQuestMapRewardPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Defindex   *uint32 `protobuf:"varint,2,opt,name=defindex" json:"defindex,omitempty"`
	Count      *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	MapCycle   *uint32 `protobuf:"varint,4,opt,name=map_cycle,json=mapCycle" json:"map_cycle,omitempty"`
	PurchaseId *uint32 `protobuf:"varint,5,opt,name=purchase_id,json=purchaseId" json:"purchase_id,omitempty"`
}

func (x *CSOQuestMapRewardPurchase) Reset() {
	*x = CSOQuestMapRewardPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOQuestMapRewardPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOQuestMapRewardPurchase) ProtoMessage() {}

func (x *CSOQuestMapRewardPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOQuestMapRewardPurchase.ProtoReflect.Descriptor instead.
func (*CSOQuestMapRewardPurchase) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{157}
}

func (x *CSOQuestMapRewardPurchase) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOQuestMapRewardPurchase) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CSOQuestMapRewardPurchase) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CSOQuestMapRewardPurchase) GetMapCycle() uint32 {
	if x != nil && x.MapCycle != nil {
		return *x.MapCycle
	}
	return 0
}

func (x *CSOQuestMapRewardPurchase) GetPurchaseId() uint32 {
	if x != nil && x.PurchaseId != nil {
		return *x.PurchaseId
	}
	return 0
}

type CMsgGCQuestIdentify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
}

func (x *CMsgGCQuestIdentify) Reset() {
	*x = CMsgGCQuestIdentify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestIdentify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestIdentify) ProtoMessage() {}

func (x *CMsgGCQuestIdentify) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestIdentify.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestIdentify) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{158}
}

func (x *CMsgGCQuestIdentify) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

type CMsgGCQuestDevGive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestDefIndex *uint32 `protobuf:"varint,1,opt,name=quest_def_index,json=questDefIndex" json:"quest_def_index,omitempty"`
}

func (x *CMsgGCQuestDevGive) Reset() {
	*x = CMsgGCQuestDevGive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestDevGive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestDevGive) ProtoMessage() {}

func (x *CMsgGCQuestDevGive) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestDevGive.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestDevGive) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{159}
}

func (x *CMsgGCQuestDevGive) GetQuestDefIndex() uint32 {
	if x != nil && x.QuestDefIndex != nil {
		return *x.QuestDefIndex
	}
	return 0
}

type CMsgGCQuestNodeTurnIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDefindex *uint32 `protobuf:"varint,1,opt,name=node_defindex,json=nodeDefindex" json:"node_defindex,omitempty"`
}

func (x *CMsgGCQuestNodeTurnIn) Reset() {
	*x = CMsgGCQuestNodeTurnIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestNodeTurnIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestNodeTurnIn) ProtoMessage() {}

func (x *CMsgGCQuestNodeTurnIn) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestNodeTurnIn.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestNodeTurnIn) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{160}
}

func (x *CMsgGCQuestNodeTurnIn) GetNodeDefindex() uint32 {
	if x != nil && x.NodeDefindex != nil {
		return *x.NodeDefindex
	}
	return 0
}

type CMsgGCQuestMapUnlockNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDefindex  *uint32 `protobuf:"varint,1,opt,name=node_defindex,json=nodeDefindex" json:"node_defindex,omitempty"`
	QuestDefindex *uint32 `protobuf:"varint,2,opt,name=quest_defindex,json=questDefindex" json:"quest_defindex,omitempty"`
}

func (x *CMsgGCQuestMapUnlockNode) Reset() {
	*x = CMsgGCQuestMapUnlockNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestMapUnlockNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestMapUnlockNode) ProtoMessage() {}

func (x *CMsgGCQuestMapUnlockNode) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestMapUnlockNode.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestMapUnlockNode) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{161}
}

func (x *CMsgGCQuestMapUnlockNode) GetNodeDefindex() uint32 {
	if x != nil && x.NodeDefindex != nil {
		return *x.NodeDefindex
	}
	return 0
}

func (x *CMsgGCQuestMapUnlockNode) GetQuestDefindex() uint32 {
	if x != nil && x.QuestDefindex != nil {
		return *x.QuestDefindex
	}
	return 0
}

type CMsgGCNewMatchForLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMatchId *uint64 `protobuf:"varint,1,opt,name=current_match_id,json=currentMatchId" json:"current_match_id,omitempty"`
	NextMapId      *uint32 `protobuf:"varint,2,opt,name=next_map_id,json=nextMapId" json:"next_map_id,omitempty"`
	LobbyId        *uint64 `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgGCNewMatchForLobbyRequest) Reset() {
	*x = CMsgGCNewMatchForLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCNewMatchForLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNewMatchForLobbyRequest) ProtoMessage() {}

func (x *CMsgGCNewMatchForLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNewMatchForLobbyRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCNewMatchForLobbyRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{162}
}

func (x *CMsgGCNewMatchForLobbyRequest) GetCurrentMatchId() uint64 {
	if x != nil && x.CurrentMatchId != nil {
		return *x.CurrentMatchId
	}
	return 0
}

func (x *CMsgGCNewMatchForLobbyRequest) GetNextMapId() uint32 {
	if x != nil && x.NextMapId != nil {
		return *x.NextMapId
	}
	return 0
}

func (x *CMsgGCNewMatchForLobbyRequest) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCNewMatchForLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCNewMatchForLobbyResponse) Reset() {
	*x = CMsgGCNewMatchForLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCNewMatchForLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNewMatchForLobbyResponse) ProtoMessage() {}

func (x *CMsgGCNewMatchForLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNewMatchForLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCNewMatchForLobbyResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{163}
}

func (x *CMsgGCNewMatchForLobbyResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCChangeMatchPlayerTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64                                       `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId *uint64                                       `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Member  []*CMsgGCChangeMatchPlayerTeamsRequest_Member `protobuf:"bytes,3,rep,name=member" json:"member,omitempty"`
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) Reset() {
	*x = CMsgGCChangeMatchPlayerTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCChangeMatchPlayerTeamsRequest) ProtoMessage() {}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCChangeMatchPlayerTeamsRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCChangeMatchPlayerTeamsRequest) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{164}
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest) GetMember() []*CMsgGCChangeMatchPlayerTeamsRequest_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type CMsgGCChangeMatchPlayerTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCChangeMatchPlayerTeamsResponse) Reset() {
	*x = CMsgGCChangeMatchPlayerTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCChangeMatchPlayerTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCChangeMatchPlayerTeamsResponse) ProtoMessage() {}

func (x *CMsgGCChangeMatchPlayerTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCChangeMatchPlayerTeamsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCChangeMatchPlayerTeamsResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{165}
}

func (x *CMsgGCChangeMatchPlayerTeamsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCQuestComplete_Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId    *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	PointsType *uint32 `protobuf:"varint,2,opt,name=points_type,json=pointsType" json:"points_type,omitempty"`
}

func (x *CMsgGCQuestComplete_Debug) Reset() {
	*x = CMsgGCQuestComplete_Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestComplete_Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestComplete_Debug) ProtoMessage() {}

func (x *CMsgGCQuestComplete_Debug) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestComplete_Debug.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestComplete_Debug) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{166}
}

func (x *CMsgGCQuestComplete_Debug) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgGCQuestComplete_Debug) GetPointsType() uint32 {
	if x != nil && x.PointsType != nil {
		return *x.PointsType
	}
	return 0
}

type CMsgGCQuestMap_Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetOperation *uint32                   `protobuf:"varint,1,opt,name=reset_operation,json=resetOperation" json:"reset_operation,omitempty"`
	GiveCredit     *uint32                   `protobuf:"varint,2,opt,name=give_credit,json=giveCredit" json:"give_credit,omitempty"`
	UnlockNode     *CMsgGCQuestMapUnlockNode `protobuf:"bytes,3,opt,name=unlock_node,json=unlockNode" json:"unlock_node,omitempty"`
}

func (x *CMsgGCQuestMap_Debug) Reset() {
	*x = CMsgGCQuestMap_Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestMap_Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestMap_Debug) ProtoMessage() {}

func (x *CMsgGCQuestMap_Debug) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestMap_Debug.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestMap_Debug) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{167}
}

func (x *CMsgGCQuestMap_Debug) GetResetOperation() uint32 {
	if x != nil && x.ResetOperation != nil {
		return *x.ResetOperation
	}
	return 0
}

func (x *CMsgGCQuestMap_Debug) GetGiveCredit() uint32 {
	if x != nil && x.GiveCredit != nil {
		return *x.GiveCredit
	}
	return 0
}

func (x *CMsgGCQuestMap_Debug) GetUnlockNode() *CMsgGCQuestMapUnlockNode {
	if x != nil {
		return x.UnlockNode
	}
	return nil
}

type CMsgGCQuestMapPurchaseReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreItemDefindex *uint32 `protobuf:"varint,1,opt,name=store_item_defindex,json=storeItemDefindex" json:"store_item_defindex,omitempty"`
}

func (x *CMsgGCQuestMapPurchaseReward) Reset() {
	*x = CMsgGCQuestMapPurchaseReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestMapPurchaseReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestMapPurchaseReward) ProtoMessage() {}

func (x *CMsgGCQuestMapPurchaseReward) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestMapPurchaseReward.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestMapPurchaseReward) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{168}
}

func (x *CMsgGCQuestMapPurchaseReward) GetStoreItemDefindex() uint32 {
	if x != nil && x.StoreItemDefindex != nil {
		return *x.StoreItemDefindex
	}
	return 0
}

type CMsgGCQuestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for CMsgGCQuestResponse fields.
const (
	Default_CMsgGCQuestResponse_Success = bool(false)
)

func (x *CMsgGCQuestResponse) Reset() {
	*x = CMsgGCQuestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestResponse) ProtoMessage() {}

func (x *CMsgGCQuestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestResponse) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{169}
}

func (x *CMsgGCQuestResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_CMsgGCQuestResponse_Success
}

type CMsgGCSetDisablePartyQuestProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *bool `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
}

func (x *CMsgGCSetDisablePartyQuestProgress) Reset() {
	*x = CMsgGCSetDisablePartyQuestProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCSetDisablePartyQuestProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCSetDisablePartyQuestProgress) ProtoMessage() {}

func (x *CMsgGCSetDisablePartyQuestProgress) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCSetDisablePartyQuestProgress.ProtoReflect.Descriptor instead.
func (*CMsgGCSetDisablePartyQuestProgress) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{170}
}

func (x *CMsgGCSetDisablePartyQuestProgress) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

type CMsgQuestProgressReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId             *uint64  `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Star_0Earned        *bool    `protobuf:"varint,2,opt,name=star_0_earned,json=star0Earned" json:"star_0_earned,omitempty"`
	Star_1Earned        *bool    `protobuf:"varint,3,opt,name=star_1_earned,json=star1Earned" json:"star_1_earned,omitempty"`
	Star_2Earned        *bool    `protobuf:"varint,4,opt,name=star_2_earned,json=star2Earned" json:"star_2_earned,omitempty"`
	ItemsEarned         []uint64 `protobuf:"varint,5,rep,name=items_earned,json=itemsEarned" json:"items_earned,omitempty"`
	RewardCreditsEarned *uint32  `protobuf:"varint,6,opt,name=reward_credits_earned,json=rewardCreditsEarned" json:"reward_credits_earned,omitempty"`
	ContractCompleted   *bool    `protobuf:"varint,7,opt,name=contract_completed,json=contractCompleted" json:"contract_completed,omitempty"`
}

func (x *CMsgQuestProgressReport) Reset() {
	*x = CMsgQuestProgressReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgQuestProgressReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgQuestProgressReport) ProtoMessage() {}

func (x *CMsgQuestProgressReport) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgQuestProgressReport.ProtoReflect.Descriptor instead.
func (*CMsgQuestProgressReport) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{171}
}

func (x *CMsgQuestProgressReport) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgQuestProgressReport) GetStar_0Earned() bool {
	if x != nil && x.Star_0Earned != nil {
		return *x.Star_0Earned
	}
	return false
}

func (x *CMsgQuestProgressReport) GetStar_1Earned() bool {
	if x != nil && x.Star_1Earned != nil {
		return *x.Star_1Earned
	}
	return false
}

func (x *CMsgQuestProgressReport) GetStar_2Earned() bool {
	if x != nil && x.Star_2Earned != nil {
		return *x.Star_2Earned
	}
	return false
}

func (x *CMsgQuestProgressReport) GetItemsEarned() []uint64 {
	if x != nil {
		return x.ItemsEarned
	}
	return nil
}

func (x *CMsgQuestProgressReport) GetRewardCreditsEarned() uint32 {
	if x != nil && x.RewardCreditsEarned != nil {
		return *x.RewardCreditsEarned
	}
	return 0
}

func (x *CMsgQuestProgressReport) GetContractCompleted() bool {
	if x != nil && x.ContractCompleted != nil {
		return *x.ContractCompleted
	}
	return false
}

type CMsgConsumePaintkit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId       *uint64 `protobuf:"fixed64,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	TargetDefindex *uint32 `protobuf:"varint,2,opt,name=target_defindex,json=targetDefindex" json:"target_defindex,omitempty"`
}

func (x *CMsgConsumePaintkit) Reset() {
	*x = CMsgConsumePaintkit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgConsumePaintkit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConsumePaintkit) ProtoMessage() {}

func (x *CMsgConsumePaintkit) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConsumePaintkit.ProtoReflect.Descriptor instead.
func (*CMsgConsumePaintkit) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{172}
}

func (x *CMsgConsumePaintkit) GetSourceId() uint64 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CMsgConsumePaintkit) GetTargetDefindex() uint32 {
	if x != nil && x.TargetDefindex != nil {
		return *x.TargetDefindex
	}
	return 0
}

type CMsgPainkitDevGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaintkitDefindex *uint32  `protobuf:"varint,1,opt,name=paintkit_defindex,json=paintkitDefindex" json:"paintkit_defindex,omitempty"`
	Wear             *float32 `protobuf:"fixed32,2,opt,name=wear" json:"wear,omitempty"`
	ItemDefindex     *uint32  `protobuf:"varint,3,opt,name=item_defindex,json=itemDefindex" json:"item_defindex,omitempty"`
}

func (x *CMsgPainkitDevGrant) Reset() {
	*x = CMsgPainkitDevGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPainkitDevGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPainkitDevGrant) ProtoMessage() {}

func (x *CMsgPainkitDevGrant) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPainkitDevGrant.ProtoReflect.Descriptor instead.
func (*CMsgPainkitDevGrant) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{173}
}

func (x *CMsgPainkitDevGrant) GetPaintkitDefindex() uint32 {
	if x != nil && x.PaintkitDefindex != nil {
		return *x.PaintkitDefindex
	}
	return 0
}

func (x *CMsgPainkitDevGrant) GetWear() float32 {
	if x != nil && x.Wear != nil {
		return *x.Wear
	}
	return 0
}

func (x *CMsgPainkitDevGrant) GetItemDefindex() uint32 {
	if x != nil && x.ItemDefindex != nil {
		return *x.ItemDefindex
	}
	return 0
}

type GCQuestStrangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId  *uint32 `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	ScorerAccountId *uint32 `protobuf:"varint,2,opt,name=scorer_account_id,json=scorerAccountId" json:"scorer_account_id,omitempty"`
	QuestId         *uint64 `protobuf:"varint,3,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	StrangeEventId  *uint32 `protobuf:"varint,4,opt,name=strange_event_id,json=strangeEventId" json:"strange_event_id,omitempty"`
	Score           *uint32 `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
}

func (x *GCQuestStrangeEvent) Reset() {
	*x = GCQuestStrangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCQuestStrangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCQuestStrangeEvent) ProtoMessage() {}

func (x *GCQuestStrangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCQuestStrangeEvent.ProtoReflect.Descriptor instead.
func (*GCQuestStrangeEvent) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{174}
}

func (x *GCQuestStrangeEvent) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *GCQuestStrangeEvent) GetScorerAccountId() uint32 {
	if x != nil && x.ScorerAccountId != nil {
		return *x.ScorerAccountId
	}
	return 0
}

func (x *GCQuestStrangeEvent) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *GCQuestStrangeEvent) GetStrangeEventId() uint32 {
	if x != nil && x.StrangeEventId != nil {
		return *x.StrangeEventId
	}
	return 0
}

func (x *GCQuestStrangeEvent) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgTFQuickplay_ScoreServers_ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress *uint32  `protobuf:"varint,1,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort    *uint32  `protobuf:"varint,2,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	NumUsers      *uint32  `protobuf:"varint,3,opt,name=num_users,json=numUsers" json:"num_users,omitempty"`
	SteamId       *uint64  `protobuf:"varint,4,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	MaxUsers      *uint32  `protobuf:"varint,5,opt,name=max_users,json=maxUsers" json:"max_users,omitempty"`
	UserScore     *float32 `protobuf:"fixed32,6,opt,name=user_score,json=userScore" json:"user_score,omitempty"`
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) Reset() {
	*x = CMsgTFQuickplay_ScoreServers_ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFQuickplay_ScoreServers_ServerInfo) ProtoMessage() {}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFQuickplay_ScoreServers_ServerInfo.ProtoReflect.Descriptor instead.
func (*CMsgTFQuickplay_ScoreServers_ServerInfo) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetServerAddress() uint32 {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetNumUsers() uint32 {
	if x != nil && x.NumUsers != nil {
		return *x.NumUsers
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetMaxUsers() uint32 {
	if x != nil && x.MaxUsers != nil {
		return *x.MaxUsers
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServers_ServerInfo) GetUserScore() float32 {
	if x != nil && x.UserScore != nil {
		return *x.UserScore
	}
	return 0
}

type CMsgTFQuickplay_ScoreServersResponse_ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress *uint32  `protobuf:"varint,1,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort    *uint32  `protobuf:"varint,2,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	TotalScore    *float32 `protobuf:"fixed32,3,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	SteamId       *uint64  `protobuf:"varint,4,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	OptionsScore  *uint32  `protobuf:"varint,5,opt,name=options_score,json=optionsScore" json:"options_score,omitempty"`
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) Reset() {
	*x = CMsgTFQuickplay_ScoreServersResponse_ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTFQuickplay_ScoreServersResponse_ServerInfo) ProtoMessage() {}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTFQuickplay_ScoreServersResponse_ServerInfo.ProtoReflect.Descriptor instead.
func (*CMsgTFQuickplay_ScoreServersResponse_ServerInfo) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) GetServerAddress() uint32 {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgTFQuickplay_ScoreServersResponse_ServerInfo) GetOptionsScore() uint32 {
	if x != nil && x.OptionsScore != nil {
		return *x.OptionsScore
	}
	return 0
}

type CMsgGC_GameServer_ListResponse_GameServerIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameServerAccountId     *uint32 `protobuf:"varint,1,opt,name=game_server_account_id,json=gameServerAccountId" json:"game_server_account_id,omitempty"`
	GameServerIdentityToken *string `protobuf:"bytes,2,opt,name=game_server_identity_token,json=gameServerIdentityToken" json:"game_server_identity_token,omitempty"`
	GameServerStanding      *int32  `protobuf:"varint,3,opt,name=game_server_standing,json=gameServerStanding" json:"game_server_standing,omitempty"`
	GameServerStandingTrend *int32  `protobuf:"varint,4,opt,name=game_server_standing_trend,json=gameServerStandingTrend" json:"game_server_standing_trend,omitempty"`
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) Reset() {
	*x = CMsgGC_GameServer_ListResponse_GameServerIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_GameServer_ListResponse_GameServerIdentity) ProtoMessage() {}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_GameServer_ListResponse_GameServerIdentity.ProtoReflect.Descriptor instead.
func (*CMsgGC_GameServer_ListResponse_GameServerIdentity) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) GetGameServerAccountId() uint32 {
	if x != nil && x.GameServerAccountId != nil {
		return *x.GameServerAccountId
	}
	return 0
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) GetGameServerIdentityToken() string {
	if x != nil && x.GameServerIdentityToken != nil {
		return *x.GameServerIdentityToken
	}
	return ""
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) GetGameServerStanding() int32 {
	if x != nil && x.GameServerStanding != nil {
		return *x.GameServerStanding
	}
	return 0
}

func (x *CMsgGC_GameServer_ListResponse_GameServerIdentity) GetGameServerStandingTrend() int32 {
	if x != nil && x.GameServerStandingTrend != nil {
		return *x.GameServerStandingTrend
	}
	return 0
}

type CSOTFPartyMember_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId           *uint64        `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LobbyMatchGroup   *ETFMatchGroup `protobuf:"varint,2,opt,name=lobby_match_group,json=lobbyMatchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"lobby_match_group,omitempty"`
	MultiqueueBlocked *bool          `protobuf:"varint,3,opt,name=multiqueue_blocked,json=multiqueueBlocked" json:"multiqueue_blocked,omitempty"`
	Online            *bool          `protobuf:"varint,4,opt,name=online" json:"online,omitempty"`
	ClientVersion     *uint32        `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

// Default values for CSOTFPartyMember_Activity fields.
const (
	Default_CSOTFPartyMember_Activity_LobbyMatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CSOTFPartyMember_Activity) Reset() {
	*x = CSOTFPartyMember_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFPartyMember_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFPartyMember_Activity) ProtoMessage() {}

func (x *CSOTFPartyMember_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFPartyMember_Activity.ProtoReflect.Descriptor instead.
func (*CSOTFPartyMember_Activity) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{55, 0}
}

func (x *CSOTFPartyMember_Activity) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSOTFPartyMember_Activity) GetLobbyMatchGroup() ETFMatchGroup {
	if x != nil && x.LobbyMatchGroup != nil {
		return *x.LobbyMatchGroup
	}
	return Default_CSOTFPartyMember_Activity_LobbyMatchGroup
}

func (x *CSOTFPartyMember_Activity) GetMultiqueueBlocked() bool {
	if x != nil && x.MultiqueueBlocked != nil {
		return *x.MultiqueueBlocked
	}
	return false
}

func (x *CSOTFPartyMember_Activity) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *CSOTFPartyMember_Activity) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CSOTFParty_QueueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchGroup *ETFMatchGroup `protobuf:"varint,1,opt,name=match_group,json=matchGroup,enum=tf2.ETFMatchGroup,def=-1" json:"match_group,omitempty"`
	QueuedTime *uint32        `protobuf:"fixed32,2,opt,name=queued_time,json=queuedTime" json:"queued_time,omitempty"`
}

// Default values for CSOTFParty_QueueEntry fields.
const (
	Default_CSOTFParty_QueueEntry_MatchGroup = ETFMatchGroup_k_eTFMatchGroup_Invalid
)

func (x *CSOTFParty_QueueEntry) Reset() {
	*x = CSOTFParty_QueueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFParty_QueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFParty_QueueEntry) ProtoMessage() {}

func (x *CSOTFParty_QueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFParty_QueueEntry.ProtoReflect.Descriptor instead.
func (*CSOTFParty_QueueEntry) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{82, 0}
}

func (x *CSOTFParty_QueueEntry) GetMatchGroup() ETFMatchGroup {
	if x != nil && x.MatchGroup != nil {
		return *x.MatchGroup
	}
	return Default_CSOTFParty_QueueEntry_MatchGroup
}

func (x *CSOTFParty_QueueEntry) GetQueuedTime() uint32 {
	if x != nil && x.QueuedTime != nil {
		return *x.QueuedTime
	}
	return 0
}

type CSOTFPartyInvite_PartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CSOTFPartyInvite_PartyMember) Reset() {
	*x = CSOTFPartyInvite_PartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTFPartyInvite_PartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTFPartyInvite_PartyMember) ProtoMessage() {}

func (x *CSOTFPartyInvite_PartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTFPartyInvite_PartyMember.ProtoReflect.Descriptor instead.
func (*CSOTFPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{83, 0}
}

func (x *CSOTFPartyInvite_PartyMember) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgGameServerMatchmakingStatus_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId      *uint64                                             `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	ConnectState *CMsgGameServerMatchmakingStatus_PlayerConnectState `protobuf:"varint,2,opt,name=connect_state,json=connectState,enum=tf2.CMsgGameServerMatchmakingStatus_PlayerConnectState,def=0" json:"connect_state,omitempty"`
}

// Default values for CMsgGameServerMatchmakingStatus_Player fields.
const (
	Default_CMsgGameServerMatchmakingStatus_Player_ConnectState = CMsgGameServerMatchmakingStatus_INVALID
)

func (x *CMsgGameServerMatchmakingStatus_Player) Reset() {
	*x = CMsgGameServerMatchmakingStatus_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerMatchmakingStatus_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerMatchmakingStatus_Player) ProtoMessage() {}

func (x *CMsgGameServerMatchmakingStatus_Player) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerMatchmakingStatus_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerMatchmakingStatus_Player) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{93, 0}
}

func (x *CMsgGameServerMatchmakingStatus_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGameServerMatchmakingStatus_Player) GetConnectState() CMsgGameServerMatchmakingStatus_PlayerConnectState {
	if x != nil && x.ConnectState != nil {
		return *x.ConnectState
	}
	return Default_CMsgGameServerMatchmakingStatus_Player_ConnectState
}

type CMsgMvMVictoryInfo_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantReason                *CMsgMvMVictoryInfo_GrantReason `protobuf:"varint,1,opt,name=grant_reason,json=grantReason,enum=tf2.CMsgMvMVictoryInfo_GrantReason,def=0" json:"grant_reason,omitempty"`
	ItemData                   []byte                          `protobuf:"bytes,2,opt,name=item_data,json=itemData" json:"item_data,omitempty"`
	SquadSurplusClaimerSteamId *uint64                         `protobuf:"fixed64,3,opt,name=squad_surplus_claimer_steam_id,json=squadSurplusClaimerSteamId" json:"squad_surplus_claimer_steam_id,omitempty"`
}

// Default values for CMsgMvMVictoryInfo_Item fields.
const (
	Default_CMsgMvMVictoryInfo_Item_GrantReason = CMsgMvMVictoryInfo_INVALID
)

func (x *CMsgMvMVictoryInfo_Item) Reset() {
	*x = CMsgMvMVictoryInfo_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMVictoryInfo_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMVictoryInfo_Item) ProtoMessage() {}

func (x *CMsgMvMVictoryInfo_Item) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMVictoryInfo_Item.ProtoReflect.Descriptor instead.
func (*CMsgMvMVictoryInfo_Item) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{95, 0}
}

func (x *CMsgMvMVictoryInfo_Item) GetGrantReason() CMsgMvMVictoryInfo_GrantReason {
	if x != nil && x.GrantReason != nil {
		return *x.GrantReason
	}
	return Default_CMsgMvMVictoryInfo_Item_GrantReason
}

func (x *CMsgMvMVictoryInfo_Item) GetItemData() []byte {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *CMsgMvMVictoryInfo_Item) GetSquadSurplusClaimerSteamId() uint64 {
	if x != nil && x.SquadSurplusClaimerSteamId != nil {
		return *x.SquadSurplusClaimerSteamId
	}
	return 0
}

type CMsgMvMVictoryInfo_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId              *uint64                    `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	BadgeGranted         *bool                      `protobuf:"varint,3,opt,name=badge_granted,json=badgeGranted" json:"badge_granted,omitempty"`
	BadgeProgressUpdated *bool                      `protobuf:"varint,4,opt,name=badge_progress_updated,json=badgeProgressUpdated" json:"badge_progress_updated,omitempty"`
	BadgeLeveled         *bool                      `protobuf:"varint,5,opt,name=badge_leveled,json=badgeLeveled" json:"badge_leveled,omitempty"`
	BadgeLevel           *uint32                    `protobuf:"varint,6,opt,name=badge_level,json=badgeLevel" json:"badge_level,omitempty"`
	BadgeProgressBits    *uint32                    `protobuf:"varint,7,opt,name=badge_progress_bits,json=badgeProgressBits" json:"badge_progress_bits,omitempty"`
	Items                []*CMsgMvMVictoryInfo_Item `protobuf:"bytes,8,rep,name=items" json:"items,omitempty"`
	VoucherMissing       *bool                      `protobuf:"varint,9,opt,name=voucher_missing,json=voucherMissing" json:"voucher_missing,omitempty"`
	BadgePoints          *uint32                    `protobuf:"varint,10,opt,name=badge_points,json=badgePoints" json:"badge_points,omitempty"`
}

func (x *CMsgMvMVictoryInfo_Player) Reset() {
	*x = CMsgMvMVictoryInfo_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMVictoryInfo_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMVictoryInfo_Player) ProtoMessage() {}

func (x *CMsgMvMVictoryInfo_Player) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMVictoryInfo_Player.ProtoReflect.Descriptor instead.
func (*CMsgMvMVictoryInfo_Player) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{95, 1}
}

func (x *CMsgMvMVictoryInfo_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgeGranted() bool {
	if x != nil && x.BadgeGranted != nil {
		return *x.BadgeGranted
	}
	return false
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgeProgressUpdated() bool {
	if x != nil && x.BadgeProgressUpdated != nil {
		return *x.BadgeProgressUpdated
	}
	return false
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgeLeveled() bool {
	if x != nil && x.BadgeLeveled != nil {
		return *x.BadgeLeveled
	}
	return false
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgeProgressBits() uint32 {
	if x != nil && x.BadgeProgressBits != nil {
		return *x.BadgeProgressBits
	}
	return 0
}

func (x *CMsgMvMVictoryInfo_Player) GetItems() []*CMsgMvMVictoryInfo_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgMvMVictoryInfo_Player) GetVoucherMissing() bool {
	if x != nil && x.VoucherMissing != nil {
		return *x.VoucherMissing
	}
	return false
}

func (x *CMsgMvMVictoryInfo_Player) GetBadgePoints() uint32 {
	if x != nil && x.BadgePoints != nil {
		return *x.BadgePoints
	}
	return 0
}

type CMsgMvMVictory_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId      *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	SquadSurplus *bool   `protobuf:"varint,2,opt,name=squad_surplus,json=squadSurplus" json:"squad_surplus,omitempty"`
}

func (x *CMsgMvMVictory_Player) Reset() {
	*x = CMsgMvMVictory_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMvMVictory_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMvMVictory_Player) ProtoMessage() {}

func (x *CMsgMvMVictory_Player) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMvMVictory_Player.ProtoReflect.Descriptor instead.
func (*CMsgMvMVictory_Player) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{99, 0}
}

func (x *CMsgMvMVictory_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgMvMVictory_Player) GetSquadSurplus() bool {
	if x != nil && x.SquadSurplus != nil {
		return *x.SquadSurplus
	}
	return false
}

type CMsgProcessMatchVoteKick_Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	VoteYay *bool   `protobuf:"varint,2,opt,name=vote_yay,json=voteYay" json:"vote_yay,omitempty"`
}

func (x *CMsgProcessMatchVoteKick_Vote) Reset() {
	*x = CMsgProcessMatchVoteKick_Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProcessMatchVoteKick_Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProcessMatchVoteKick_Vote) ProtoMessage() {}

func (x *CMsgProcessMatchVoteKick_Vote) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProcessMatchVoteKick_Vote.ProtoReflect.Descriptor instead.
func (*CMsgProcessMatchVoteKick_Vote) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{106, 0}
}

func (x *CMsgProcessMatchVoteKick_Vote) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgProcessMatchVoteKick_Vote) GetVoteYay() bool {
	if x != nil && x.VoteYay != nil {
		return *x.VoteYay
	}
	return false
}

type CMsgUpdateHalloweenMerasmusLootLevel_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel_Player) Reset() {
	*x = CMsgUpdateHalloweenMerasmusLootLevel_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUpdateHalloweenMerasmusLootLevel_Player) ProtoMessage() {}

func (x *CMsgUpdateHalloweenMerasmusLootLevel_Player) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUpdateHalloweenMerasmusLootLevel_Player.ProtoReflect.Descriptor instead.
func (*CMsgUpdateHalloweenMerasmusLootLevel_Player) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{111, 0}
}

func (x *CMsgUpdateHalloweenMerasmusLootLevel_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CGCMsgGC_War_GlobalStatsResponse_SideScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side  *uint32 `protobuf:"varint,1,opt,name=side" json:"side,omitempty"`
	Score *uint64 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (x *CGCMsgGC_War_GlobalStatsResponse_SideScore) Reset() {
	*x = CGCMsgGC_War_GlobalStatsResponse_SideScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGCMsgGC_War_GlobalStatsResponse_SideScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGCMsgGC_War_GlobalStatsResponse_SideScore) ProtoMessage() {}

func (x *CGCMsgGC_War_GlobalStatsResponse_SideScore) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGCMsgGC_War_GlobalStatsResponse_SideScore.ProtoReflect.Descriptor instead.
func (*CGCMsgGC_War_GlobalStatsResponse_SideScore) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{121, 0}
}

func (x *CGCMsgGC_War_GlobalStatsResponse_SideScore) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *CGCMsgGC_War_GlobalStatsResponse_SideScore) GetScore() uint64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGC_Match_Result_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId         *uint64             `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	OriginalPartyId *uint64             `protobuf:"varint,2,opt,name=original_party_id,json=originalPartyId" json:"original_party_id,omitempty"`
	Team            *uint32             `protobuf:"varint,3,opt,name=team" json:"team,omitempty"`
	Score           *uint32             `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Ping            *uint32             `protobuf:"varint,5,opt,name=ping" json:"ping,omitempty"`
	Flags           *uint32             `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	Rank            *uint32             `protobuf:"varint,9,opt,name=rank" json:"rank,omitempty"`
	ClassesPlayed   *uint32             `protobuf:"varint,10,opt,name=classes_played,json=classesPlayed" json:"classes_played,omitempty"`
	Kills           *uint32             `protobuf:"varint,11,opt,name=kills" json:"kills,omitempty"`
	Deaths          *uint32             `protobuf:"varint,12,opt,name=deaths" json:"deaths,omitempty"`
	Damage          *uint32             `protobuf:"varint,13,opt,name=damage" json:"damage,omitempty"`
	Healing         *uint32             `protobuf:"varint,14,opt,name=healing" json:"healing,omitempty"`
	Support         *uint32             `protobuf:"varint,15,opt,name=support" json:"support,omitempty"`
	ScoreMedal      *uint32             `protobuf:"varint,16,opt,name=score_medal,json=scoreMedal" json:"score_medal,omitempty"`
	KillsMedal      *uint32             `protobuf:"varint,17,opt,name=kills_medal,json=killsMedal" json:"kills_medal,omitempty"`
	DamageMedal     *uint32             `protobuf:"varint,18,opt,name=damage_medal,json=damageMedal" json:"damage_medal,omitempty"`
	HealingMedal    *uint32             `protobuf:"varint,19,opt,name=healing_medal,json=healingMedal" json:"healing_medal,omitempty"`
	SupportMedal    *uint32             `protobuf:"varint,20,opt,name=support_medal,json=supportMedal" json:"support_medal,omitempty"`
	XpBreakdown     []*CMsgTFXPSource   `protobuf:"bytes,21,rep,name=xp_breakdown,json=xpBreakdown" json:"xp_breakdown,omitempty"`
	LeaveTime       *uint32             `protobuf:"varint,22,opt,name=leave_time,json=leaveTime" json:"leave_time,omitempty"`
	LeaveReason     *TFMatchLeaveReason `protobuf:"varint,23,opt,name=leave_reason,json=leaveReason,enum=tf2.TFMatchLeaveReason,def=0" json:"leave_reason,omitempty"`
	ConnectTime     *uint32             `protobuf:"varint,24,opt,name=connect_time,json=connectTime" json:"connect_time,omitempty"`
}

// Default values for CMsgGC_Match_Result_Player fields.
const (
	Default_CMsgGC_Match_Result_Player_LeaveReason = TFMatchLeaveReason_TFMatchLeaveReason_UNSPECIFIED
)

func (x *CMsgGC_Match_Result_Player) Reset() {
	*x = CMsgGC_Match_Result_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_Match_Result_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_Match_Result_Player) ProtoMessage() {}

func (x *CMsgGC_Match_Result_Player) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_Match_Result_Player.ProtoReflect.Descriptor instead.
func (*CMsgGC_Match_Result_Player) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{133, 0}
}

func (x *CMsgGC_Match_Result_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetOriginalPartyId() uint64 {
	if x != nil && x.OriginalPartyId != nil {
		return *x.OriginalPartyId
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetPing() uint32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetClassesPlayed() uint32 {
	if x != nil && x.ClassesPlayed != nil {
		return *x.ClassesPlayed
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetHealing() uint32 {
	if x != nil && x.Healing != nil {
		return *x.Healing
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetSupport() uint32 {
	if x != nil && x.Support != nil {
		return *x.Support
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetScoreMedal() uint32 {
	if x != nil && x.ScoreMedal != nil {
		return *x.ScoreMedal
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetKillsMedal() uint32 {
	if x != nil && x.KillsMedal != nil {
		return *x.KillsMedal
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetDamageMedal() uint32 {
	if x != nil && x.DamageMedal != nil {
		return *x.DamageMedal
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetHealingMedal() uint32 {
	if x != nil && x.HealingMedal != nil {
		return *x.HealingMedal
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetSupportMedal() uint32 {
	if x != nil && x.SupportMedal != nil {
		return *x.SupportMedal
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetXpBreakdown() []*CMsgTFXPSource {
	if x != nil {
		return x.XpBreakdown
	}
	return nil
}

func (x *CMsgGC_Match_Result_Player) GetLeaveTime() uint32 {
	if x != nil && x.LeaveTime != nil {
		return *x.LeaveTime
	}
	return 0
}

func (x *CMsgGC_Match_Result_Player) GetLeaveReason() TFMatchLeaveReason {
	if x != nil && x.LeaveReason != nil {
		return *x.LeaveReason
	}
	return Default_CMsgGC_Match_Result_Player_LeaveReason
}

func (x *CMsgGC_Match_Result_Player) GetConnectTime() uint32 {
	if x != nil && x.ConnectTime != nil {
		return *x.ConnectTime
	}
	return 0
}

type CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank         *uint32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Records      *uint32 `protobuf:"varint,2,opt,name=records" json:"records,omitempty"`
	AvgScore     *uint32 `protobuf:"varint,3,opt,name=avg_score,json=avgScore" json:"avg_score,omitempty"`
	StdevScore   *uint32 `protobuf:"varint,4,opt,name=stdev_score,json=stdevScore" json:"stdev_score,omitempty"`
	AvgKills     *uint32 `protobuf:"varint,5,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	StdevKills   *uint32 `protobuf:"varint,6,opt,name=stdev_kills,json=stdevKills" json:"stdev_kills,omitempty"`
	AvgDamage    *uint32 `protobuf:"varint,7,opt,name=avg_damage,json=avgDamage" json:"avg_damage,omitempty"`
	StdevDamage  *uint32 `protobuf:"varint,8,opt,name=stdev_damage,json=stdevDamage" json:"stdev_damage,omitempty"`
	AvgHealing   *uint32 `protobuf:"varint,9,opt,name=avg_healing,json=avgHealing" json:"avg_healing,omitempty"`
	StdevHealing *uint32 `protobuf:"varint,10,opt,name=stdev_healing,json=stdevHealing" json:"stdev_healing,omitempty"`
	AvgSupport   *uint32 `protobuf:"varint,11,opt,name=avg_support,json=avgSupport" json:"avg_support,omitempty"`
	StdevSupport *uint32 `protobuf:"varint,12,opt,name=stdev_support,json=stdevSupport" json:"stdev_support,omitempty"`
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) Reset() {
	*x = CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) ProtoMessage() {}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry.ProtoReflect.Descriptor instead.
func (*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{143, 0}
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetRecords() uint32 {
	if x != nil && x.Records != nil {
		return *x.Records
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetAvgScore() uint32 {
	if x != nil && x.AvgScore != nil {
		return *x.AvgScore
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetStdevScore() uint32 {
	if x != nil && x.StdevScore != nil {
		return *x.StdevScore
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetAvgKills() uint32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetStdevKills() uint32 {
	if x != nil && x.StdevKills != nil {
		return *x.StdevKills
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetAvgDamage() uint32 {
	if x != nil && x.AvgDamage != nil {
		return *x.AvgDamage
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetStdevDamage() uint32 {
	if x != nil && x.StdevDamage != nil {
		return *x.StdevDamage
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetAvgHealing() uint32 {
	if x != nil && x.AvgHealing != nil {
		return *x.AvgHealing
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetStdevHealing() uint32 {
	if x != nil && x.StdevHealing != nil {
		return *x.StdevHealing
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetAvgSupport() uint32 {
	if x != nil && x.AvgSupport != nil {
		return *x.AvgSupport
	}
	return 0
}

func (x *CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry) GetStdevSupport() uint32 {
	if x != nil && x.StdevSupport != nil {
		return *x.StdevSupport
	}
	return 0
}

type CMsgGCDataCenterPing_Update_PingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ping       *uint32                             `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	PingStatus *CMsgGCDataCenterPing_Update_Status `protobuf:"varint,3,opt,name=ping_status,json=pingStatus,enum=tf2.CMsgGCDataCenterPing_Update_Status,def=1" json:"ping_status,omitempty"`
}

// Default values for CMsgGCDataCenterPing_Update_PingEntry fields.
const (
	Default_CMsgGCDataCenterPing_Update_PingEntry_PingStatus = CMsgGCDataCenterPing_Update_Normal
)

func (x *CMsgGCDataCenterPing_Update_PingEntry) Reset() {
	*x = CMsgGCDataCenterPing_Update_PingEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCDataCenterPing_Update_PingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCDataCenterPing_Update_PingEntry) ProtoMessage() {}

func (x *CMsgGCDataCenterPing_Update_PingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCDataCenterPing_Update_PingEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCDataCenterPing_Update_PingEntry) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{151, 0}
}

func (x *CMsgGCDataCenterPing_Update_PingEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCDataCenterPing_Update_PingEntry) GetPing() uint32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *CMsgGCDataCenterPing_Update_PingEntry) GetPingStatus() CMsgGCDataCenterPing_Update_Status {
	if x != nil && x.PingStatus != nil {
		return *x.PingStatus
	}
	return Default_CMsgGCDataCenterPing_Update_PingEntry_PingStatus
}

type CMsgGCChangeMatchPlayerTeamsRequest_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId *uint64     `protobuf:"varint,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	NewTeam  *TF_GC_TEAM `protobuf:"varint,2,opt,name=new_team,json=newTeam,enum=tf2.TF_GC_TEAM,def=5" json:"new_team,omitempty"`
}

// Default values for CMsgGCChangeMatchPlayerTeamsRequest_Member fields.
const (
	Default_CMsgGCChangeMatchPlayerTeamsRequest_Member_NewTeam = TF_GC_TEAM_TF_GC_TEAM_NOTEAM
)

func (x *CMsgGCChangeMatchPlayerTeamsRequest_Member) Reset() {
	*x = CMsgGCChangeMatchPlayerTeamsRequest_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_tf_gcmessages_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCChangeMatchPlayerTeamsRequest_Member) ProtoMessage() {}

func (x *CMsgGCChangeMatchPlayerTeamsRequest_Member) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_tf_gcmessages_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCChangeMatchPlayerTeamsRequest_Member.ProtoReflect.Descriptor instead.
func (*CMsgGCChangeMatchPlayerTeamsRequest_Member) Descriptor() ([]byte, []int) {
	return file_tf2_tf_gcmessages_proto_rawDescGZIP(), []int{164, 0}
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest_Member) GetMemberId() uint64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *CMsgGCChangeMatchPlayerTeamsRequest_Member) GetNewTeam() TF_GC_TEAM {
	if x != nil && x.NewTeam != nil {
		return *x.NewTeam
	}
	return Default_CMsgGCChangeMatchPlayerTeamsRequest_Member_NewTeam
}

var File_tf2_tf_gcmessages_proto protoreflect.FileDescriptor

var file_tf2_tf_gcmessages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x66, 0x32, 0x2f, 0x74, 0x66, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x66, 0x32, 0x1a, 0x17,
	0x74, 0x66, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x66, 0x32, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x79, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x47, 0x6f, 0x6c, 0x64,
	0x65, 0x6e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a,
	0x14, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x53, 0x61, 0x78, 0x78, 0x79, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x46, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61,
	0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x11, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x46, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x1d, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x62,
	0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2d, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01, 0x30, 0x52,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x80, 0x02, 0x0a,
	0x10, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x44, 0x75, 0x65, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x65, 0x6c, 0x57,
	0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x65, 0x6c, 0x4c, 0x6f,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x14, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x54, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x70,
	0x66, 0x75, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x3a, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x46, 0x32, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x42, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x46, 0x32, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x0f, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x46, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x53, 0x6f, 0x6d, 0x65,
	0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x68, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x6f,
	0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x46,
	0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x51, 0x0a, 0x10, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x61, 0x78, 0x78, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x5b, 0x0a,
	0x1c, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x18, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54,
	0x6f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x22, 0x7f, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x73, 0x6b, 0x43, 0x6f, 0x61, 0x63, 0x68,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x5f, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x73, 0x6b,
	0x43, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x43,
	0x6f, 0x61, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x22,
	0x75, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46,
	0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x22, 0x40,
	0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x61, 0x63, 0x68,
	0x22, 0x4d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x22,
	0xb1, 0x02, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xb5, 0x01, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x27,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa4, 0x03, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x65, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x16, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x07, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x0f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x73, 0x10, 0xfe,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0x37,
	0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x1a, 0xf5, 0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x56, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe3, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x20,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x57, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42,
	0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x55, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x1f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x4f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x36, 0x0a, 0x32, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x05, 0x22, 0xa3, 0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x74, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x25, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x48, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x34, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x25, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x48, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x25, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0xa7, 0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x25, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x74, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x66, 0x32,
	0x2e, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x25, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x65, 0x6e, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x71, 0x0a,
	0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x83, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x65, 0x6e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x22, 0x64,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x41, 0x67, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x73, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x9a, 0x06, 0x0a, 0x10, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x73, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x73,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x54,
	0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x73,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x4c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x1a, 0xec,
	0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0f,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01,
	0x0a, 0x14, 0x54, 0x46, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x45, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x05, 0x45, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x4a, 0x6f, 0x69,
	0x6e, 0x10, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x4d, 0x4d, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74,
	0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65,
	0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x12, 0x4c, 0x0a, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc7, 0x02, 0x0a, 0x1a, 0x43,
	0x54, 0x46, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x6b, 0x12, 0x35, 0x0a, 0x15, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x76, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x6e, 0x75, 0x70,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x76, 0x6d,
	0x4d, 0x61, 0x6e, 0x6e, 0x75, 0x70, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x76,
	0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x6e, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x76, 0x6d, 0x4d, 0x61, 0x6e, 0x6e,
	0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x76,
	0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x76, 0x6d, 0x42, 0x6f,
	0x6f, 0x74, 0x63, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54,
	0x46, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x54, 0x46, 0x43, 0x61, 0x73, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x73, 0x42, 0x69, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x1e,
	0x43, 0x54, 0x46, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x76, 0x6d, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x70,
	0x6c, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x76, 0x6d, 0x53, 0x71,
	0x75, 0x61, 0x64, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x43,
	0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x55, 0x49, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x69, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x60, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e,
	0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b,
	0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49,
	0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x22, 0x0a, 0x20, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x29, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6a, 0x6f, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x47, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x77, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4d, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4b, 0x69, 0x63, 0x6b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x40,
	0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x54,
	0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9a, 0x07, 0x0a, 0x0a, 0x43, 0x53,
	0x4f, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f,
	0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74,
	0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x19, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54,
	0x46, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x73, 0x75, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x55,
	0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x7b, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74,
	0x66, 0x32, 0x2e, 0x45, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x10, 0x43, 0x53, 0x4f, 0x54, 0x46,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xa6, 0x1d, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53,
	0x4f, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x27, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x02, 0x22, 0xe5, 0x05, 0x0a, 0x13, 0x43, 0x54, 0x46, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a,
	0x14, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x71, 0x75, 0x61, 0x64, 0x53, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x35, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x63, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x43,
	0x54, 0x46, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45,
	0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f,
	0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x82, 0x08, 0x0a, 0x14, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x66, 0x32, 0x2e, 0x43, 0x54, 0x46, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x06, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x1a, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6d,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6d, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x6e, 0x75, 0x70, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x6e, 0x6e, 0x75, 0x70, 0x54, 0x6f, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x77, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x57, 0x61, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x04, 0x4e, 0x4f, 0x50, 0x45, 0x52, 0x0a, 0x69, 0x73, 0x57,
	0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x2f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x46, 0x6f, 0x72,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x6d,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x54,
	0x46, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x2e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10,
	0x02, 0x22, 0x43, 0x0a, 0x08, 0x57, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x50, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x44,
	0x45, 0x52, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x59, 0x52, 0x4f, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x56, 0x59, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x78,
	0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x18, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x4b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0xdb, 0x09, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x31, 0x32, 0x32, 0x35, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x61, 0x76, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x61, 0x76, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1a, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x76, 0x6d, 0x5f, 0x77, 0x61, 0x76, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x76, 0x6d, 0x57, 0x61, 0x76, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x76, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d,
	0x76, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x76, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6d, 0x76, 0x6d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x6d, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x8a, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x02, 0x22, 0x48, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x76, 0x4d, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x03, 0x22, 0xbf, 0x08, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x61, 0x76, 0x67, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x34,
	0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x61, 0x76, 0x67, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x79, 0x6f,
	0x75, 0x72, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x79, 0x6f, 0x75,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x61, 0x72, 0x59, 0x6f, 0x75, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x77, 0x69, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x61, 0x72, 0x59, 0x6f, 0x75, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x21,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x61, 0x72, 0x59,
	0x6f, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x65, 0x61, 0x72, 0x59, 0x6f, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4e, 0x65,
	0x61, 0x72, 0x59, 0x6f, 0x75, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x79,
	0x6f, 0x75, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x65, 0x61, 0x72, 0x59, 0x6f, 0x75, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x63, 0x74, 0x22, 0xa0, 0x06, 0x0a, 0x12, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x4f, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x66, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x07,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1a, 0x73, 0x71, 0x75, 0x61, 0x64,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0xf4, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x62, 0x61, 0x64, 0x67, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x62, 0x61, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0b,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x44, 0x47,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x51, 0x55, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x52, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x48,
	0x45, 0x4c, 0x50, 0x5f, 0x41, 0x5f, 0x4e, 0x4f, 0x4f, 0x42, 0x10, 0x04, 0x22, 0x90, 0x01, 0x0a,
	0x15, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22,
	0xe4, 0x01, 0x0a, 0x0c, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x45, 0x78, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x45, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x6e,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x6e, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x48, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x71, 0x75, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x71, 0x75, 0x61, 0x64, 0x53, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x76, 0x4d,
	0x4d, 0x61, 0x6e, 0x6e, 0x55, 0x70, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x22,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x9b, 0x02,
	0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a,
	0x1e, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x61, 0x73, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x61, 0x73, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x78, 0x70, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x66, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x78, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x18, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56,
	0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54,
	0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a,
	0x16, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x1a, 0x3c, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x79, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x59, 0x61, 0x79, 0x22, 0x34, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f,
	0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x69, 0x70,
	0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x65, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xff, 0x07, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65,
	0x6e, 0x5f, 0x4d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x32, 0x30, 0x31, 0x32, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x76, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x76, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x75, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x31, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6d, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x6d, 0x67, 0x53, 0x63, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6d, 0x67, 0x5f,
	0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6d,
	0x67, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6d, 0x67, 0x5f, 0x73,
	0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x6d,
	0x67, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6d, 0x67, 0x5f,
	0x64, 0x65, 0x6d, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x6d, 0x67, 0x44,
	0x65, 0x6d, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6d, 0x67, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6d, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6d, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x76, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6d, 0x67, 0x48, 0x65, 0x61, 0x76, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x6d, 0x67, 0x5f, 0x70, 0x79, 0x72, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x64, 0x6d, 0x67, 0x50, 0x79, 0x72, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6d, 0x67, 0x5f,
	0x73, 0x70, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x6d, 0x67, 0x53, 0x70,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6d, 0x67, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6d, 0x67, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x65, 0x61, 0x76, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x76, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x79, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x79, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x70, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xbe, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75,
	0x73, 0x4c, 0x6f, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x4c, 0x6f, 0x6f,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x6d,
	0x75, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x23, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x21, 0x43, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x22, 0xa3, 0x03, 0x0a, 0x41, 0x43, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x5f, 0x4e,
	0x45, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x54,
	0x48, 0x49, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x43, 0x53, 0x4f, 0x57, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x05, 0x77, 0x61,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x1d, 0x43, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x57, 0x61, 0x72, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77,
	0x61, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1f, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x57, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x72, 0x49, 0x64, 0x22, 0xc2,
	0x01, 0x0a, 0x20, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x69, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x61, 0x72, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x09,
	0x53, 0x69, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x2f, 0x43, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xc7, 0x01,
	0x0a, 0x1d, 0x43, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73,
	0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x13,
	0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70,
	0x6f, 0x73, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x5f,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x6e, 0x67, 0x58, 0x12, 0x13, 0x0a,
	0x05, 0x61, 0x6e, 0x67, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x6e,
	0x67, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x5f, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x61, 0x6e, 0x67, 0x5a, 0x22, 0x95, 0x02, 0x0a, 0x20, 0x43, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x70,
	0x6f, 0x73, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x59,
	0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x5f, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x6e, 0x67, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x6e,
	0x67, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x6e, 0x67, 0x59, 0x12,
	0x13, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x5f, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x61, 0x6e, 0x67, 0x5a, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x67, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x58, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x0e, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x66, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x58,
	0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55,
	0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54,
	0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54,
	0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42,
	0x4f, 0x4e, 0x55, 0x53, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10,
	0x07, 0x22, 0x48, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2d, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x10, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x46, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xf8, 0x01, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x23, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4d, 0x5f, 0x42, 0x41, 0x4e,
	0x5f, 0x44, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x53, 0x5f,
	0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x10, 0x05, 0x22, 0x58, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x65, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xf6, 0x0a, 0x0a, 0x13,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c,
	0x75, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x1a, 0xdd, 0x05, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0c, 0x78, 0x70, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x58, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x78, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0c,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x1e, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x0b, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x43, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44,
	0x4f, 0x4e, 0x10, 0x07, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2c, 0x0a, 0x08, 0x65, 0x63, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x45, 0x63, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x65, 0x63, 0x6f, 0x6e, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x91,
	0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x41,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x4d, 0x22, 0x6a, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc4,
	0x06, 0x0a, 0x16, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x6e, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x6c, 0x76, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x69,
	0x6c, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x62, 0x72, 0x6f,
	0x6e, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6c, 0x76, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x6e, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x6f, 0x6c, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79,
	0x22, 0xba, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x54, 0x46, 0x56, 0x6f,
	0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x3a, 0x16, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x22, 0x24, 0x0a, 0x22,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x22, 0x97, 0x04, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x89, 0x03, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x65, 0x76, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x65, 0x76, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x76, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x64, 0x65, 0x76, 0x48,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x67,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x64, 0x65, 0x76,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x74, 0x64, 0x65, 0x76, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x96, 0x02, 0x0a,
	0x13, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x3a, 0x0f, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x07,
	0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x48, 0x41, 0x52, 0x41, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x52, 0x49, 0x45, 0x46, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x05, 0x22, 0xd8, 0x06, 0x0a, 0x1b, 0x43, 0x53, 0x4f, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64,
	0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4d, 0x65,
	0x64, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x53, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x7d, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x45,
	0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x17, 0x6b, 0x5f,
	0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xb7, 0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x50, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x50, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x06, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x44, 0x43, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x22, 0x38, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x74, 0x66, 0x32, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x0f, 0x43, 0x53, 0x4f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x5f, 0x30, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x30, 0x45, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x31, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x31, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x32, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x32, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0c, 0x6c, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x22, 0xab, 0x02, 0x0a, 0x08, 0x43, 0x53, 0x4f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x31,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x31, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x12, 0x36, 0x0a, 0x18, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x19, 0x43, 0x53, 0x4f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x08,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xa6, 0x1d, 0x01, 0x52, 0x08, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x47, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x3c, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x66, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x4d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x23,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x66, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x64, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a, 0x11, 0x54, 0x46,
	0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x66,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x17, 0x43,
	0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x30, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x30, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x31, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x31, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x5f, 0x32, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x32, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x7b, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x6b, 0x69, 0x74, 0x44,
	0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x69, 0x6e, 0x74,
	0x6b, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x77, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc6, 0x01,
	0x0a, 0x13, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2a, 0xe9, 0x32, 0x0a, 0x08, 0x45, 0x54, 0x46, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0x89, 0x27, 0x12,
	0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4b, 0x69, 0x63, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x9c, 0x27, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x9d, 0x27, 0x12, 0x2e, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x70,
	0x66, 0x75, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x9e, 0x27, 0x12, 0x1e, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x46, 0x32, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x9f, 0x27, 0x12, 0x26, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x46, 0x32, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xa0, 0x27, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0xa2, 0x27, 0x12, 0x2e, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa3, 0x27, 0x12, 0x1a, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x61, 0x78, 0x78, 0x79, 0x5f, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0xa5, 0x27, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x54, 0x68,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x53, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x10, 0xa4,
	0x27, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x6f,
	0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x10, 0xa6, 0x27, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x10, 0xa7, 0x27, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x65, 0x65, 0x74, 0x54, 0x68, 0x65, 0x50, 0x79, 0x72, 0x6f, 0x53, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x43, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xa8, 0x27, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x56, 0x4d, 0x41, 0x52, 0x47, 0x5f,
	0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0xa9, 0x27, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x4d, 0x56, 0x4d, 0x41, 0x52, 0x47, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x46, 0x69, 0x76, 0x65,
	0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xaa, 0x27, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x10, 0xd0, 0x28, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xd1, 0x28, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x10, 0xd2, 0x28, 0x12,
	0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd3, 0x28,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x10, 0xd4,
	0x28, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd5, 0x28, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x73, 0x6b, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x10, 0xd6, 0x28, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x73, 0x6b, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xd7, 0x28, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x10, 0xd8, 0x28, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xd9, 0x28, 0x12, 0x21, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x43, 0x6f, 0x61, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0xda, 0x28, 0x12, 0x26,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x10, 0xdb, 0x28, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x10, 0xdc, 0x28,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x10, 0xdd, 0x28, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44, 0x75, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0xfc, 0x2a, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x44, 0x75, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xfd, 0x2a, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44,
	0x75, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x10, 0xfe, 0x2a, 0x12, 0x19,
	0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44, 0x75, 0x65, 0x6c, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xff, 0x2a, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xe0, 0x2b, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xe1, 0x2b, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xe4, 0x2b, 0x12, 0x36,
	0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x65, 0x6e, 0x5f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xe5, 0x2b, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xe6, 0x2b, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xe7, 0x2b, 0x12, 0x21, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x65, 0x6e, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xe8, 0x2b, 0x12,
	0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe9, 0x2b, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e,
	0x5f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x32, 0x10, 0xea, 0x2b, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x32, 0x10, 0xeb, 0x2b, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x6f, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xec, 0x2b, 0x12,
	0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x4d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x32, 0x30,
	0x31, 0x32, 0x10, 0xed, 0x2b, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x4c, 0x6f, 0x6f, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x10, 0xee, 0x2b, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xc4, 0x2c, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10,
	0xc5, 0x2c, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xc6, 0x2c, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0xc7, 0x2c, 0x12, 0x2f, 0x0a, 0x2a, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc8, 0x2c, 0x12, 0x1d, 0x0a, 0x18,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xc9, 0x2c, 0x12, 0x25, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xca, 0x2c, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x10, 0xcb, 0x2c, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0xcc, 0x2c, 0x12,
	0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x2c, 0x12,
	0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xce, 0x2c, 0x12,
	0x37, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcf, 0x2c, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xd0, 0x2c, 0x12, 0x3b, 0x0a, 0x36,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd1, 0x2c, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xd2,
	0x2c, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xd3,
	0x2c, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x10, 0xd4, 0x2c, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x41, 0x63, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd5,
	0x2c, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x51, 0x50,
	0x5f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x10, 0xa8, 0x2d,
	0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x51, 0x50, 0x5f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa9, 0x2d, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x51, 0x50, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0xaa, 0x2d, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xf0, 0x2e, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x32, 0x10, 0xf1, 0x2e, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd4, 0x2f, 0x12, 0x33, 0x0a, 0x2e, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xd5, 0x2f,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xdb,
	0x30, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x53, 0x4f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x10, 0xdd, 0x30,
	0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xf4, 0x30, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xf5, 0x30, 0x12, 0x14, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x55, 0x70, 0x10, 0xfe, 0x30, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0xff,
	0x30, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x80, 0x31, 0x12, 0x23,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0x8f, 0x31, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x45,
	0x78, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x91,
	0x31, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x95, 0x31, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x96, 0x31,
	0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x97, 0x31, 0x12, 0x17, 0x0a, 0x12, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x10, 0x99, 0x31, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x76, 0x4d, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x9a,
	0x31, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x10, 0x9b, 0x31, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x10, 0x9c, 0x31, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x80, 0x32, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x44, 0x75, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x81, 0x32, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x82, 0x32, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x47, 0x43,
	0x45, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x83, 0x32, 0x12,
	0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0xe4, 0x32, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe5, 0x32, 0x12, 0x2f, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe6, 0x32, 0x12, 0x28,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0xe7, 0x32, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xe9, 0x32, 0x12, 0x19, 0x0a, 0x14,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x4a, 0x6f, 0x69,
	0x6e, 0x57, 0x61, 0x72, 0x10, 0xea, 0x32, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xeb, 0x32, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x61, 0x72, 0x5f, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xec, 0x32, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0xee, 0x32,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xef, 0x32, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0xf0, 0x32, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xf1, 0x32, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xf2, 0x32, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x10, 0xf4, 0x32,
	0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xf5, 0x32, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xf6, 0x32, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0xf7, 0x32, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf8, 0x32, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xf9, 0x32, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0xfa, 0x32, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfb, 0x32, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xfc, 0x32, 0x12, 0x24,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xfd, 0x32, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x61, 0x64,
	0x10, 0xfe, 0x32, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x58, 0x50, 0x10, 0xff, 0x32,
	0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x80, 0x33, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x10, 0x81, 0x33, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x10, 0x82, 0x33, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x83, 0x33, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x86, 0x33, 0x12,
	0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x87, 0x33, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x54, 0x46, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x88,
	0x33, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x4e, 0x65,
	0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x89, 0x33, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8a, 0x33,
	0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x8b, 0x33, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8c, 0x33, 0x12, 0x1b, 0x0a, 0x16, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x10, 0x8d, 0x33, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x47, 0x69, 0x76,
	0x65, 0x10, 0x8e, 0x33, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x10, 0x90, 0x33, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x10, 0x91, 0x33, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x64, 0x65, 0x10, 0x93, 0x33, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x95, 0x33, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x96, 0x33, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x99, 0x33, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x9a, 0x33, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9b, 0x33, 0x12,
	0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x9c,
	0x33, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d, 0x33, 0x12, 0x22, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x9e, 0x33, 0x12,
	0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9f, 0x33, 0x12, 0x1f, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xa0, 0x33, 0x12, 0x24, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0xa1, 0x33, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x10, 0xa2, 0x33, 0x12,
	0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xa3, 0x33, 0x12, 0x1c, 0x0a, 0x17, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x10, 0xa4, 0x33, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x4b, 0x69, 0x74, 0x10, 0xa5, 0x33, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x50, 0x61, 0x69, 0x6e, 0x6b, 0x69, 0x74, 0x5f, 0x44, 0x65, 0x76, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x10, 0xa6, 0x33, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0xa7, 0x33, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa8, 0x33, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10,
	0xa9, 0x33, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xaa, 0x33, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xab, 0x33, 0x12, 0x2d, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xac, 0x33, 0x12, 0x29, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0xad, 0x33, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xae, 0x33, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0xaf, 0x33, 0x12, 0x1d, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x4b,
	0x69, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0xb0, 0x33, 0x12, 0x1e, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xb1, 0x33, 0x12, 0x1f, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xb2, 0x33, 0x12, 0x24, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x10, 0xb3, 0x33, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65,
	0x4b, 0x69, 0x63, 0x6b, 0x10, 0xb5, 0x33, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xb6, 0x33, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44,
	0x65, 0x76, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x10,
	0x91, 0x4e, 0x2a, 0x48, 0x0a, 0x1b, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x01, 0x2a, 0x9b, 0x02, 0x0a,
	0x13, 0x45, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e, 0x75,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x2a, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d,
	0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d,
	0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28,
	0x6b, 0x5f, 0x65, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e,
	0x75, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f,
	0x65, 0x54, 0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53,
	0x74, 0x65, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x65, 0x54,
	0x46, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x4d, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x65,
	0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x04, 0x2a, 0x91, 0x06, 0x0a, 0x0d, 0x45,
	0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x17,
	0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x4d, 0x61, 0x6e, 0x6e,
	0x55, 0x70, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x4d, 0x76, 0x4d, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x36, 0x76, 0x36, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x39, 0x76, 0x39, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x31, 0x32, 0x76, 0x31, 0x32, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f,
	0x4c, 0x61, 0x73, 0x74, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x36, 0x76, 0x36, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x39, 0x76, 0x39, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x31, 0x32, 0x76, 0x31, 0x32, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x54,
	0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x43, 0x61, 0x73, 0x75,
	0x61, 0x6c, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x05, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65,
	0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f,
	0x65, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x08, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0xc1,
	0x02, 0x0a, 0x10, 0x45, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x10, 0xe8, 0x07, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x10, 0xe9, 0x07, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xea,
	0x07, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xeb,
	0x07, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x65, 0x54, 0x46, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0xec, 0x07, 0x2a, 0x81, 0x02, 0x0a, 0x0f, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x46, 0x5f, 0x47, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x08, 0x2a, 0xa8, 0x01, 0x0a, 0x0a, 0x54, 0x46, 0x5f, 0x47, 0x43,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x5f, 0x47,
	0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x46, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x46,
	0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x10,
	0x05, 0x2a, 0xfa, 0x01, 0x0a, 0x12, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x46, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x57, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x46, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x47, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x87,
	0x01, 0x0a, 0x10, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x46, 0x56, 0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x46, 0x56,
	0x6f, 0x74, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x63,
	0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0xf3, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x2a, 0x9c,
	0x01, 0x0a, 0x12, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x49, 0x4e, 0x51,
	0x55, 0x49, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x51, 0x55, 0x49, 0x52,
	0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x10, 0x04, 0x42, 0x35, 0x48,
	0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33,
	0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x66,
	0x32, 0x80, 0x01, 0x00,
}

var (
	file_tf2_tf_gcmessages_proto_rawDescOnce sync.Once
	file_tf2_tf_gcmessages_proto_rawDescData = file_tf2_tf_gcmessages_proto_rawDesc
)

func file_tf2_tf_gcmessages_proto_rawDescGZIP() []byte {
	file_tf2_tf_gcmessages_proto_rawDescOnce.Do(func() {
		file_tf2_tf_gcmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tf2_tf_gcmessages_proto_rawDescData)
	})
	return file_tf2_tf_gcmessages_proto_rawDescData
}

var file_tf2_tf_gcmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_tf2_tf_gcmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 192)
var file_tf2_tf_gcmessages_proto_goTypes = []interface{}{
	(ETFGCMsg)(0),                    // 0: tf2.ETFGCMsg
	(EServerModificationItemType)(0), // 1: tf2.EServerModificationItemType
	(ETFSyncedMMMenuStep)(0),         // 2: tf2.ETFSyncedMMMenuStep
	(ETFMatchGroup)(0),               // 3: tf2.ETFMatchGroup
	(ETFPartyChatType)(0),            // 4: tf2.ETFPartyChatType
	(TF_GC_GameState)(0),             // 5: tf2.TF_GC_GameState
	(TF_GC_TEAM)(0),                  // 6: tf2.TF_GC_TEAM
	(TFMatchLeaveReason)(0),          // 7: tf2.TFMatchLeaveReason
	(TFVoteKickReason)(0),            // 8: tf2.TFVoteKickReason
	(ServerMatchmakingState)(0),      // 9: tf2.ServerMatchmakingState
	(SurveyQuestionType)(0),          // 10: tf2.SurveyQuestionType
	(CMsgGC_GameServer_CreateIdentityResponse_EStatus)(0),                                           // 11: tf2.CMsgGC_GameServer_CreateIdentityResponse.EStatus
	(CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse)(0),           // 12: tf2.CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse
	(CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse)(0), // 13: tf2.CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse
	(TFPendingPartyMember_EType)(0),                                                                 // 14: tf2.TFPendingPartyMember.EType
	(CSOTFPartyInvite_Type)(0),                                                                      // 15: tf2.CSOTFPartyInvite.Type
	(CTFLobbyPlayerProto_ConnectState)(0),                                                           // 16: tf2.CTFLobbyPlayerProto.ConnectState
	(CTFLobbyPlayerProto_Type)(0),                                                                   // 17: tf2.CTFLobbyPlayerProto.Type
	(CSOTFGameServerLobby_State)(0),                                                                 // 18: tf2.CSOTFGameServerLobby.State
	(CSOTFGameServerLobby_WarMatch)(0),                                                              // 19: tf2.CSOTFGameServerLobby.WarMatch
	(CMsgGameServerMatchmakingStatus_PlayerConnectState)(0),                                         // 20: tf2.CMsgGameServerMatchmakingStatus.PlayerConnectState
	(CMsgGameServerMatchmakingStatus_Event)(0),                                                      // 21: tf2.CMsgGameServerMatchmakingStatus.Event
	(CMsgMvMVictoryInfo_GrantReason)(0),                                                             // 22: tf2.CMsgMvMVictoryInfo.GrantReason
	(CMsgTFXPSource_XPSourceType)(0),                                                                // 23: tf2.CMsgTFXPSource.XPSourceType
	(CMsgGCNotification_NotificationType)(0),                                                        // 24: tf2.CMsgGCNotification.NotificationType
	(CMsgGC_Match_Result_Status)(0),                                                                 // 25: tf2.CMsgGC_Match_Result.Status
	(CMsgGC_ReportPlayer_EReason)(0),                                                                // 26: tf2.CMsgGC_ReportPlayer.EReason
	(CMsgGCDataCenterPing_Update_Status)(0),                                                         // 27: tf2.CMsgGCDataCenterPing_Update.Status
	(*CMsgTFGoldenWrenchBroadcast)(nil),                                                             // 28: tf2.CMsgTFGoldenWrenchBroadcast
	(*CMsgTFSaxxyBroadcast)(nil),                                                                    // 29: tf2.CMsgTFSaxxyBroadcast
	(*CMsgGCTFSpecificItemBroadcast)(nil),                                                           // 30: tf2.CMsgGCTFSpecificItemBroadcast
	(*CMsgTFWorldStatus)(nil),                                                                       // 31: tf2.CMsgTFWorldStatus
	(*CSOTFDuelSummary)(nil),                                                                        // 32: tf2.CSOTFDuelSummary
	(*CSOTFMapContribution)(nil),                                                                    // 33: tf2.CSOTFMapContribution
	(*CMsgTFFreeTrialChooseMostHelpfulFriend)(nil),                                                  // 34: tf2.CMsgTFFreeTrialChooseMostHelpfulFriend
	(*CMsgTFRequestTF2Friends)(nil),                                                                 // 35: tf2.CMsgTFRequestTF2Friends
	(*CMsgTFRequestTF2FriendsResponse)(nil),                                                         // 36: tf2.CMsgTFRequestTF2FriendsResponse
	(*CSOTFPlayerInfo)(nil),                                                                         // 37: tf2.CSOTFPlayerInfo
	(*CMsgTFThankedBySomeone)(nil),                                                                  // 38: tf2.CMsgTFThankedBySomeone
	(*CMsgTFThankedSomeone)(nil),                                                                    // 39: tf2.CMsgTFThankedSomeone
	(*CMsgTFFreeTrialConvertedToPremium)(nil),                                                       // 40: tf2.CMsgTFFreeTrialConvertedToPremium
	(*CMsgSaxxyAwarded)(nil),                                                                        // 41: tf2.CMsgSaxxyAwarded
	(*CMsgReplaySubmitContestEntry)(nil),                                                            // 42: tf2.CMsgReplaySubmitContestEntry
	(*CMsgReplaySubmitContestEntryResponse)(nil),                                                    // 43: tf2.CMsgReplaySubmitContestEntryResponse
	(*CReplayCachedContestData)(nil),                                                                // 44: tf2.CReplayCachedContestData
	(*CMsgTFCoaching_AddToCoaches)(nil),                                                             // 45: tf2.CMsgTFCoaching_AddToCoaches
	(*CMsgTFCoaching_RemoveFromCoaches)(nil),                                                        // 46: tf2.CMsgTFCoaching_RemoveFromCoaches
	(*CMsgTFCoaching_FindCoach)(nil),                                                                // 47: tf2.CMsgTFCoaching_FindCoach
	(*CMsgTFCoaching_FindCoachResponse)(nil),                                                        // 48: tf2.CMsgTFCoaching_FindCoachResponse
	(*CMsgTFCoaching_AskCoach)(nil),                                                                 // 49: tf2.CMsgTFCoaching_AskCoach
	(*CMsgTFCoaching_AskCoachResponse)(nil),                                                         // 50: tf2.CMsgTFCoaching_AskCoachResponse
	(*CMsgTFCoaching_CoachJoinGame)(nil),                                                            // 51: tf2.CMsgTFCoaching_CoachJoinGame
	(*CMsgTFCoaching_CoachJoining)(nil),                                                             // 52: tf2.CMsgTFCoaching_CoachJoining
	(*CMsgTFCoaching_CoachJoined)(nil),                                                              // 53: tf2.CMsgTFCoaching_CoachJoined
	(*CMsgTFCoaching_LikeCurrentCoach)(nil),                                                         // 54: tf2.CMsgTFCoaching_LikeCurrentCoach
	(*CMsgTFCoaching_RemoveCurrentCoach)(nil),                                                       // 55: tf2.CMsgTFCoaching_RemoveCurrentCoach
	(*CMsgTFQuickplay_ScoreServers)(nil),                                                            // 56: tf2.CMsgTFQuickplay_ScoreServers
	(*CMsgTFQuickplay_ScoreServersResponse)(nil),                                                    // 57: tf2.CMsgTFQuickplay_ScoreServersResponse
	(*CMsgTFQuickplay_PlayerJoining)(nil),                                                           // 58: tf2.CMsgTFQuickplay_PlayerJoining
	(*CMsgGC_GameServer_LevelInfo)(nil),                                                             // 59: tf2.CMsgGC_GameServer_LevelInfo
	(*CMsgGC_GameServer_AuthChallenge)(nil),                                                         // 60: tf2.CMsgGC_GameServer_AuthChallenge
	(*CMsgGC_GameServer_AuthResult)(nil),                                                            // 61: tf2.CMsgGC_GameServer_AuthResult
	(*CMsgGC_GameServer_AuthChallengeResponse)(nil),                                                 // 62: tf2.CMsgGC_GameServer_AuthChallengeResponse
	(*CMsgGC_GameServer_CreateIdentity)(nil),                                                        // 63: tf2.CMsgGC_GameServer_CreateIdentity
	(*CMsgGC_GameServer_CreateIdentityResponse)(nil),                                                // 64: tf2.CMsgGC_GameServer_CreateIdentityResponse
	(*CMsgGC_GameServer_List)(nil),                                                                  // 65: tf2.CMsgGC_GameServer_List
	(*CMsgGC_GameServer_ListResponse)(nil),                                                          // 66: tf2.CMsgGC_GameServer_ListResponse
	(*CMsgGC_GameServer_ResetIdentity)(nil),                                                         // 67: tf2.CMsgGC_GameServer_ResetIdentity
	(*CMsgGC_GameServer_ResetIdentityResponse)(nil),                                                 // 68: tf2.CMsgGC_GameServer_ResetIdentityResponse
	(*CMsgGC_GameServer_AckPolicy)(nil),                                                             // 69: tf2.CMsgGC_GameServer_AckPolicy
	(*CMsgGC_GameServer_AckPolicyResponse)(nil),                                                     // 70: tf2.CMsgGC_GameServer_AckPolicyResponse
	(*CMsgGC_Client_UseServerModificationItem)(nil),                                                 // 71: tf2.CMsgGC_Client_UseServerModificationItem
	(*CMsgGC_Client_UseServerModificationItem_Response)(nil),                                        // 72: tf2.CMsgGC_Client_UseServerModificationItem_Response
	(*CMsgGC_GameServer_UseServerModificationItem)(nil),                                             // 73: tf2.CMsgGC_GameServer_UseServerModificationItem
	(*CMsgGC_GameServer_UseServerModificationItem_Response)(nil),                                    // 74: tf2.CMsgGC_GameServer_UseServerModificationItem_Response
	(*CMsgGC_GameServer_ServerModificationItemExpired)(nil),                                         // 75: tf2.CMsgGC_GameServer_ServerModificationItemExpired
	(*CMsgGC_GameServer_ServerModificationItem)(nil),                                                // 76: tf2.CMsgGC_GameServer_ServerModificationItem
	(*CMsgGC_Halloween_ReservedItem)(nil),                                                           // 77: tf2.CMsgGC_Halloween_ReservedItem
	(*CMsgGC_Halloween_GrantItem)(nil),                                                              // 78: tf2.CMsgGC_Halloween_GrantItem
	(*CMsgGC_Halloween_GrantItemResponse)(nil),                                                      // 79: tf2.CMsgGC_Halloween_GrantItemResponse
	(*CMsgGC_Halloween_ItemClaimed)(nil),                                                            // 80: tf2.CMsgGC_Halloween_ItemClaimed
	(*CMsgGC_PickupItemEligibility_Query)(nil),                                                      // 81: tf2.CMsgGC_PickupItemEligibility_Query
	(*CMsgGC_PickupItemEligibility_QueryResponse)(nil),                                              // 82: tf2.CMsgGC_PickupItemEligibility_QueryResponse
	(*CSOTFPartyMember)(nil),                                                                        // 83: tf2.CSOTFPartyMember
	(*TFPendingPartyMember)(nil),                                                                    // 84: tf2.TFPendingPartyMember
	(*TFSyncedMMUIState)(nil),                                                                       // 85: tf2.TFSyncedMMUIState
	(*CTFGroupMatchCriteriaProto)(nil),                                                              // 86: tf2.CTFGroupMatchCriteriaProto
	(*CTFCasualMatchCriteria)(nil),                                                                  // 87: tf2.CTFCasualMatchCriteria
	(*CTFPerPlayerMatchCriteriaProto)(nil),                                                          // 88: tf2.CTFPerPlayerMatchCriteriaProto
	(*CTFPartyOptions)(nil),                                                                         // 89: tf2.CTFPartyOptions
	(*CMsgPartySetOptions)(nil),                                                                     // 90: tf2.CMsgPartySetOptions
	(*CMsgPartySetOptionsResponse)(nil),                                                             // 91: tf2.CMsgPartySetOptionsResponse
	(*CMsgPartyQueueForMatch)(nil),                                                                  // 92: tf2.CMsgPartyQueueForMatch
	(*CMsgPartyQueueForMatchResponse)(nil),                                                          // 93: tf2.CMsgPartyQueueForMatchResponse
	(*CMsgPartyQueueForStandby)(nil),                                                                // 94: tf2.CMsgPartyQueueForStandby
	(*CMsgPartyQueueForStandbyResponse)(nil),                                                        // 95: tf2.CMsgPartyQueueForStandbyResponse
	(*CMsgPartyRemoveFromQueue)(nil),                                                                // 96: tf2.CMsgPartyRemoveFromQueue
	(*CMsgPartyRemoveFromQueueResponse)(nil),                                                        // 97: tf2.CMsgPartyRemoveFromQueueResponse
	(*CMsgPartyRemoveFromStandbyQueue)(nil),                                                         // 98: tf2.CMsgPartyRemoveFromStandbyQueue
	(*CMsgPartyRemoveFromStandbyQueueResponse)(nil),                                                 // 99: tf2.CMsgPartyRemoveFromStandbyQueueResponse
	(*CMsgPartyInvitePlayer)(nil),                                                                   // 100: tf2.CMsgPartyInvitePlayer
	(*CMsgPartyRequestJoinPlayer)(nil),                                                              // 101: tf2.CMsgPartyRequestJoinPlayer
	(*CMsgPartyClearPendingPlayer)(nil),                                                             // 102: tf2.CMsgPartyClearPendingPlayer
	(*CMsgPartyClearPendingPlayerResponse)(nil),                                                     // 103: tf2.CMsgPartyClearPendingPlayerResponse
	(*CMsgPartyClearOtherPartyRequest)(nil),                                                         // 104: tf2.CMsgPartyClearOtherPartyRequest
	(*CMsgPartyClearOtherPartyRequestResponse)(nil),                                                 // 105: tf2.CMsgPartyClearOtherPartyRequestResponse
	(*CMsgPartyPromoteToLeader)(nil),                                                                // 106: tf2.CMsgPartyPromoteToLeader
	(*CMsgPartyKickMember)(nil),                                                                     // 107: tf2.CMsgPartyKickMember
	(*CMsgPartySendChat)(nil),                                                                       // 108: tf2.CMsgPartySendChat
	(*CMsgPartyChatMsg)(nil),                                                                        // 109: tf2.CMsgPartyChatMsg
	(*CSOTFParty)(nil),                                                                              // 110: tf2.CSOTFParty
	(*CSOTFPartyInvite)(nil),                                                                        // 111: tf2.CSOTFPartyInvite
	(*CTFLobbyPlayerProto)(nil),                                                                     // 112: tf2.CTFLobbyPlayerProto
	(*CTFLobbyInviteProto)(nil),                                                                     // 113: tf2.CTFLobbyInviteProto
	(*CSOTFGameServerLobby)(nil),                                                                    // 114: tf2.CSOTFGameServerLobby
	(*CMsgExitMatchmaking)(nil),                                                                     // 115: tf2.CMsgExitMatchmaking
	(*CMsgAcceptLobbyInvite)(nil),                                                                   // 116: tf2.CMsgAcceptLobbyInvite
	(*CMsgAcceptLobbyInviteReply)(nil),                                                              // 117: tf2.CMsgAcceptLobbyInviteReply
	(*CMsgMatchmakingSearchCountRequest)(nil),                                                       // 118: tf2.CMsgMatchmakingSearchCountRequest
	(*CMsgMatchmakingSearchCountResponse)(nil),                                                      // 119: tf2.CMsgMatchmakingSearchCountResponse
	(*CMsgKickedFromMatchmakingQueue)(nil),                                                          // 120: tf2.CMsgKickedFromMatchmakingQueue
	(*CMsgGameServerMatchmakingStatus)(nil),                                                         // 121: tf2.CMsgGameServerMatchmakingStatus
	(*CMsgMatchmakingProgress)(nil),                                                                 // 122: tf2.CMsgMatchmakingProgress
	(*CMsgMvMVictoryInfo)(nil),                                                                      // 123: tf2.CMsgMvMVictoryInfo
	(*CGCMsgTFHelloResponse)(nil),                                                                   // 124: tf2.CGCMsgTFHelloResponse
	(*CGCMsgTFSync)(nil),                                                                            // 125: tf2.CGCMsgTFSync
	(*CGCMsgTFSyncEx)(nil),                                                                          // 126: tf2.CGCMsgTFSyncEx
	(*CMsgMvMVictory)(nil),                                                                          // 127: tf2.CMsgMvMVictory
	(*CMsgMvMMannUpVictoryReply)(nil),                                                               // 128: tf2.CMsgMvMMannUpVictoryReply
	(*CMsgGameServerKickingLobby)(nil),                                                              // 129: tf2.CMsgGameServerKickingLobby
	(*CMsgGameServerKickingLobbyResponse)(nil),                                                      // 130: tf2.CMsgGameServerKickingLobbyResponse
	(*CMsgLeaveGameAndPrepareToJoinParty)(nil),                                                      // 131: tf2.CMsgLeaveGameAndPrepareToJoinParty
	(*CMsgPlayerLeftMatch)(nil),                                                                     // 132: tf2.CMsgPlayerLeftMatch
	(*CMsgPlayerLeftMatchResponse)(nil),                                                             // 133: tf2.CMsgPlayerLeftMatchResponse
	(*CMsgProcessMatchVoteKick)(nil),                                                                // 134: tf2.CMsgProcessMatchVoteKick
	(*CMsgProcessMatchVoteKickResponse)(nil),                                                        // 135: tf2.CMsgProcessMatchVoteKickResponse
	(*CMsgPlayerVoteKickedAfterLeavingMatchResponse)(nil),                                           // 136: tf2.CMsgPlayerVoteKickedAfterLeavingMatchResponse
	(*CMsgHalloween_ServerBossEvent)(nil),                                                           // 137: tf2.CMsgHalloween_ServerBossEvent
	(*CMsgHalloween_Merasmus2012)(nil),                                                              // 138: tf2.CMsgHalloween_Merasmus2012
	(*CMsgUpdateHalloweenMerasmusLootLevel)(nil),                                                    // 139: tf2.CMsgUpdateHalloweenMerasmusLootLevel
	(*CAttribute_String)(nil),                                                                       // 140: tf2.CAttribute_String
	(*CAttribute_DynamicRecipeComponent)(nil),                                                       // 141: tf2.CAttribute_DynamicRecipeComponent
	(*CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT)(nil),                       // 142: tf2.CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT
	(*CAttribute_ItemSlotCriteria)(nil),                                                             // 143: tf2.CAttribute_ItemSlotCriteria
	(*CMsgSetItemSlotAttribute)(nil),                                                                // 144: tf2.CMsgSetItemSlotAttribute
	(*CSOWarData)(nil),                                                                              // 145: tf2.CSOWarData
	(*CGCMsgGC_War_IndividualUpdate)(nil),                                                           // 146: tf2.CGCMsgGC_War_IndividualUpdate
	(*CGCMsgGC_War_JoinWar)(nil),                                                                    // 147: tf2.CGCMsgGC_War_JoinWar
	(*CGCMsgGC_War_RequestGlobalStats)(nil),                                                         // 148: tf2.CGCMsgGC_War_RequestGlobalStats
	(*CGCMsgGC_War_GlobalStatsResponse)(nil),                                                        // 149: tf2.CGCMsgGC_War_GlobalStatsResponse
	(*CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate)(nil),                                         // 150: tf2.CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate
	(*CAttribute_WorldItemPlacement)(nil),                                                           // 151: tf2.CAttribute_WorldItemPlacement
	(*CGCMsg_WorldItemPlacement_Update)(nil),                                                        // 152: tf2.CGCMsg_WorldItemPlacement_Update
	(*CMsgAcknowledgeXP)(nil),                                                                       // 153: tf2.CMsgAcknowledgeXP
	(*CMsgTFXPSource)(nil),                                                                          // 154: tf2.CMsgTFXPSource
	(*CMsgTFXPSourceBreakdown)(nil),                                                                 // 155: tf2.CMsgTFXPSourceBreakdown
	(*CMsgTFClientInit)(nil),                                                                        // 156: tf2.CMsgTFClientInit
	(*CMsgGCNotification)(nil),                                                                      // 157: tf2.CMsgGCNotification
	(*CMsgGCNotificationQueue)(nil),                                                                 // 158: tf2.CMsgGCNotificationQueue
	(*CMsgNotificationAcknowledge)(nil),                                                             // 159: tf2.CMsgNotificationAcknowledge
	(*CMsgNotificationAcknowledgeReply)(nil),                                                        // 160: tf2.CMsgNotificationAcknowledgeReply
	(*CMsgGC_Match_Result)(nil),                                                                     // 161: tf2.CMsgGC_Match_Result
	(*CMsgGC_Match_ResultResponse)(nil),                                                             // 162: tf2.CMsgGC_Match_ResultResponse
	(*CEconItemPreviewDataBlock)(nil),                                                               // 163: tf2.CEconItemPreviewDataBlock
	(*CMsgGC_Client2GCEconPreviewDataBlockRequest)(nil),                                             // 164: tf2.CMsgGC_Client2GCEconPreviewDataBlockRequest
	(*CMsgGC_Client2GCEconPreviewDataBlockResponse)(nil),                                            // 165: tf2.CMsgGC_Client2GCEconPreviewDataBlockResponse
	(*CSOTFLadderPlayerStats)(nil),                                                                  // 166: tf2.CSOTFLadderPlayerStats
	(*CSOTFRatingData)(nil),                                                                         // 167: tf2.CSOTFRatingData
	(*CMsgGC_TFVoteKickPlayerRequest)(nil),                                                          // 168: tf2.CMsgGC_TFVoteKickPlayerRequest
	(*CMsgGC_VoteKickPlayerRequestResponse)(nil),                                                    // 169: tf2.CMsgGC_VoteKickPlayerRequestResponse
	(*CMsgGC_DailyCompetitiveStatsRollup)(nil),                                                      // 170: tf2.CMsgGC_DailyCompetitiveStatsRollup
	(*CMsgGC_DailyCompetitiveStatsRollup_Response)(nil),                                             // 171: tf2.CMsgGC_DailyCompetitiveStatsRollup_Response
	(*CMsgGC_ReportPlayer)(nil),                                                                     // 172: tf2.CMsgGC_ReportPlayer
	(*CSOTFMatchResultPlayerStats)(nil),                                                             // 173: tf2.CSOTFMatchResultPlayerStats
	(*CMsgGCRequestMatchMakerStats)(nil),                                                            // 174: tf2.CMsgGCRequestMatchMakerStats
	(*CMsgGCDataCenterPopulation)(nil),                                                              // 175: tf2.CMsgGCDataCenterPopulation
	(*CMsgGCMatchGroupDataCenterPopulation)(nil),                                                    // 176: tf2.CMsgGCMatchGroupDataCenterPopulation
	(*CMsgGCMatchMakerStatsResponse)(nil),                                                           // 177: tf2.CMsgGCMatchMakerStatsResponse
	(*CMsgGCMatchHistoryLoad)(nil),                                                                  // 178: tf2.CMsgGCMatchHistoryLoad
	(*CMsgGCDataCenterPing_Update)(nil),                                                             // 179: tf2.CMsgGCDataCenterPing_Update
	(*CMsgGC_KickPlayerFromLobby)(nil),                                                              // 180: tf2.CMsgGC_KickPlayerFromLobby
	(*CMsgGCSurveyRequest)(nil),                                                                     // 181: tf2.CMsgGCSurveyRequest
	(*CMsgGCSurveyResponse)(nil),                                                                    // 182: tf2.CMsgGCSurveyResponse
	(*CSOQuestMapNode)(nil),                                                                         // 183: tf2.CSOQuestMapNode
	(*CSOQuest)(nil),                                                                                // 184: tf2.CSOQuest
	(*CSOQuestMapRewardPurchase)(nil),                                                               // 185: tf2.CSOQuestMapRewardPurchase
	(*CMsgGCQuestIdentify)(nil),                                                                     // 186: tf2.CMsgGCQuestIdentify
	(*CMsgGCQuestDevGive)(nil),                                                                      // 187: tf2.CMsgGCQuestDevGive
	(*CMsgGCQuestNodeTurnIn)(nil),                                                                   // 188: tf2.CMsgGCQuestNodeTurnIn
	(*CMsgGCQuestMapUnlockNode)(nil),                                                                // 189: tf2.CMsgGCQuestMapUnlockNode
	(*CMsgGCNewMatchForLobbyRequest)(nil),                                                           // 190: tf2.CMsgGCNewMatchForLobbyRequest
	(*CMsgGCNewMatchForLobbyResponse)(nil),                                                          // 191: tf2.CMsgGCNewMatchForLobbyResponse
	(*CMsgGCChangeMatchPlayerTeamsRequest)(nil),                                                     // 192: tf2.CMsgGCChangeMatchPlayerTeamsRequest
	(*CMsgGCChangeMatchPlayerTeamsResponse)(nil),                                                    // 193: tf2.CMsgGCChangeMatchPlayerTeamsResponse
	(*CMsgGCQuestComplete_Debug)(nil),                                                               // 194: tf2.CMsgGCQuestComplete_Debug
	(*CMsgGCQuestMap_Debug)(nil),                                                                    // 195: tf2.CMsgGCQuestMap_Debug
	(*CMsgGCQuestMapPurchaseReward)(nil),                                                            // 196: tf2.CMsgGCQuestMapPurchaseReward
	(*CMsgGCQuestResponse)(nil),                                                                     // 197: tf2.CMsgGCQuestResponse
	(*CMsgGCSetDisablePartyQuestProgress)(nil),                                                      // 198: tf2.CMsgGCSetDisablePartyQuestProgress
	(*CMsgQuestProgressReport)(nil),                                                                 // 199: tf2.CMsgQuestProgressReport
	(*CMsgConsumePaintkit)(nil),                                                                     // 200: tf2.CMsgConsumePaintkit
	(*CMsgPainkitDevGrant)(nil),                                                                     // 201: tf2.CMsgPainkitDevGrant
	(*GCQuestStrangeEvent)(nil),                                                                     // 202: tf2.GCQuestStrangeEvent
	(*CMsgTFQuickplay_ScoreServers_ServerInfo)(nil),                                                 // 203: tf2.CMsgTFQuickplay_ScoreServers.ServerInfo
	(*CMsgTFQuickplay_ScoreServersResponse_ServerInfo)(nil),                                         // 204: tf2.CMsgTFQuickplay_ScoreServersResponse.ServerInfo
	(*CMsgGC_GameServer_ListResponse_GameServerIdentity)(nil),                                       // 205: tf2.CMsgGC_GameServer_ListResponse.GameServerIdentity
	(*CSOTFPartyMember_Activity)(nil),                                                               // 206: tf2.CSOTFPartyMember.Activity
	(*CSOTFParty_QueueEntry)(nil),                                                                   // 207: tf2.CSOTFParty.QueueEntry
	(*CSOTFPartyInvite_PartyMember)(nil),                                                            // 208: tf2.CSOTFPartyInvite.PartyMember
	(*CMsgGameServerMatchmakingStatus_Player)(nil),                                                  // 209: tf2.CMsgGameServerMatchmakingStatus.Player
	(*CMsgMvMVictoryInfo_Item)(nil),                                                                 // 210: tf2.CMsgMvMVictoryInfo.Item
	(*CMsgMvMVictoryInfo_Player)(nil),                                                               // 211: tf2.CMsgMvMVictoryInfo.Player
	(*CMsgMvMVictory_Player)(nil),                                                                   // 212: tf2.CMsgMvMVictory.Player
	(*CMsgProcessMatchVoteKick_Vote)(nil),                                                           // 213: tf2.CMsgProcessMatchVoteKick.Vote
	(*CMsgUpdateHalloweenMerasmusLootLevel_Player)(nil),                                             // 214: tf2.CMsgUpdateHalloweenMerasmusLootLevel.Player
	(*CGCMsgGC_War_GlobalStatsResponse_SideScore)(nil),                                              // 215: tf2.CGCMsgGC_War_GlobalStatsResponse.SideScore
	(*CMsgGC_Match_Result_Player)(nil),                                                              // 216: tf2.CMsgGC_Match_Result.Player
	(*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry)(nil),                             // 217: tf2.CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry
	(*CMsgGCDataCenterPing_Update_PingEntry)(nil),                                                   // 218: tf2.CMsgGCDataCenterPing_Update.PingEntry
	(*CMsgGCChangeMatchPlayerTeamsRequest_Member)(nil),                                              // 219: tf2.CMsgGCChangeMatchPlayerTeamsRequest.Member
	(*CSOEconItem)(nil),                                                                             // 220: tf2.CSOEconItem
}
var file_tf2_tf_gcmessages_proto_depIdxs = []int32{
	3,   // 0: tf2.CMsgTFWorldStatus.event_match_group:type_name -> tf2.ETFMatchGroup
	3,   // 1: tf2.CMsgTFWorldStatus.disabled_match_groups:type_name -> tf2.ETFMatchGroup
	203, // 2: tf2.CMsgTFQuickplay_ScoreServers.servers:type_name -> tf2.CMsgTFQuickplay_ScoreServers.ServerInfo
	204, // 3: tf2.CMsgTFQuickplay_ScoreServersResponse.servers:type_name -> tf2.CMsgTFQuickplay_ScoreServersResponse.ServerInfo
	11,  // 4: tf2.CMsgGC_GameServer_CreateIdentityResponse.status:type_name -> tf2.CMsgGC_GameServer_CreateIdentityResponse.EStatus
	205, // 5: tf2.CMsgGC_GameServer_ListResponse.owned_game_servers:type_name -> tf2.CMsgGC_GameServer_ListResponse.GameServerIdentity
	12,  // 6: tf2.CMsgGC_Client_UseServerModificationItem_Response.response_code:type_name -> tf2.CMsgGC_Client_UseServerModificationItem_Response.EServerModificationItemResponse
	1,   // 7: tf2.CMsgGC_GameServer_UseServerModificationItem.modification_type:type_name -> tf2.EServerModificationItemType
	1,   // 8: tf2.CMsgGC_GameServer_UseServerModificationItem_Response.modification_type:type_name -> tf2.EServerModificationItemType
	13,  // 9: tf2.CMsgGC_GameServer_UseServerModificationItem_Response.server_response_code:type_name -> tf2.CMsgGC_GameServer_UseServerModificationItem_Response.EServerModificationItemServerResponse
	1,   // 10: tf2.CMsgGC_GameServer_ServerModificationItemExpired.modification_type:type_name -> tf2.EServerModificationItemType
	1,   // 11: tf2.CMsgGC_GameServer_ServerModificationItem.modification_type:type_name -> tf2.EServerModificationItemType
	88,  // 12: tf2.CSOTFPartyMember.player_criteria:type_name -> tf2.CTFPerPlayerMatchCriteriaProto
	206, // 13: tf2.CSOTFPartyMember.activity:type_name -> tf2.CSOTFPartyMember.Activity
	14,  // 14: tf2.TFPendingPartyMember.type:type_name -> tf2.TFPendingPartyMember.EType
	2,   // 15: tf2.TFSyncedMMUIState.menu_step:type_name -> tf2.ETFSyncedMMMenuStep
	3,   // 16: tf2.TFSyncedMMUIState.match_group:type_name -> tf2.ETFMatchGroup
	87,  // 17: tf2.CTFGroupMatchCriteriaProto.casual_criteria:type_name -> tf2.CTFCasualMatchCriteria
	86,  // 18: tf2.CTFPartyOptions.group_criteria:type_name -> tf2.CTFGroupMatchCriteriaProto
	88,  // 19: tf2.CTFPartyOptions.player_criteria:type_name -> tf2.CTFPerPlayerMatchCriteriaProto
	85,  // 20: tf2.CTFPartyOptions.player_uistate:type_name -> tf2.TFSyncedMMUIState
	89,  // 21: tf2.CMsgPartySetOptions.options:type_name -> tf2.CTFPartyOptions
	89,  // 22: tf2.CMsgPartyQueueForMatch.final_options:type_name -> tf2.CTFPartyOptions
	3,   // 23: tf2.CMsgPartyQueueForMatch.match_group:type_name -> tf2.ETFMatchGroup
	3,   // 24: tf2.CMsgPartyRemoveFromQueue.match_group:type_name -> tf2.ETFMatchGroup
	4,   // 25: tf2.CMsgPartyChatMsg.type:type_name -> tf2.ETFPartyChatType
	83,  // 26: tf2.CSOTFParty.members:type_name -> tf2.CSOTFPartyMember
	3,   // 27: tf2.CSOTFParty.associated_lobby_match_group:type_name -> tf2.ETFMatchGroup
	207, // 28: tf2.CSOTFParty.matchmaking_queues:type_name -> tf2.CSOTFParty.QueueEntry
	86,  // 29: tf2.CSOTFParty.group_criteria:type_name -> tf2.CTFGroupMatchCriteriaProto
	85,  // 30: tf2.CSOTFParty.leader_ui_state:type_name -> tf2.TFSyncedMMUIState
	84,  // 31: tf2.CSOTFParty.pending_members:type_name -> tf2.TFPendingPartyMember
	208, // 32: tf2.CSOTFPartyInvite.members:type_name -> tf2.CSOTFPartyInvite.PartyMember
	15,  // 33: tf2.CSOTFPartyInvite.type:type_name -> tf2.CSOTFPartyInvite.Type
	6,   // 34: tf2.CTFLobbyPlayerProto.team:type_name -> tf2.TF_GC_TEAM
	16,  // 35: tf2.CTFLobbyPlayerProto.connect_state:type_name -> tf2.CTFLobbyPlayerProto.ConnectState
	17,  // 36: tf2.CTFLobbyPlayerProto.type:type_name -> tf2.CTFLobbyPlayerProto.Type
	3,   // 37: tf2.CTFLobbyInviteProto.match_group:type_name -> tf2.ETFMatchGroup
	112, // 38: tf2.CSOTFGameServerLobby.members:type_name -> tf2.CTFLobbyPlayerProto
	18,  // 39: tf2.CSOTFGameServerLobby.state:type_name -> tf2.CSOTFGameServerLobby.State
	5,   // 40: tf2.CSOTFGameServerLobby.game_state:type_name -> tf2.TF_GC_GameState
	19,  // 41: tf2.CSOTFGameServerLobby.is_war_match:type_name -> tf2.CSOTFGameServerLobby.WarMatch
	112, // 42: tf2.CSOTFGameServerLobby.pending_members:type_name -> tf2.CTFLobbyPlayerProto
	9,   // 43: tf2.CMsgGameServerMatchmakingStatus.matchmaking_state:type_name -> tf2.ServerMatchmakingState
	209, // 44: tf2.CMsgGameServerMatchmakingStatus.players:type_name -> tf2.CMsgGameServerMatchmakingStatus.Player
	5,   // 45: tf2.CMsgGameServerMatchmakingStatus.game_state:type_name -> tf2.TF_GC_GameState
	21,  // 46: tf2.CMsgGameServerMatchmakingStatus.event:type_name -> tf2.CMsgGameServerMatchmakingStatus.Event
	211, // 47: tf2.CMsgMvMVictoryInfo.players:type_name -> tf2.CMsgMvMVictoryInfo.Player
	212, // 48: tf2.CMsgMvMVictory.players:type_name -> tf2.CMsgMvMVictory.Player
	7,   // 49: tf2.CMsgPlayerLeftMatch.leave_reason:type_name -> tf2.TFMatchLeaveReason
	154, // 50: tf2.CMsgPlayerLeftMatch.xp_breakdown:type_name -> tf2.CMsgTFXPSource
	8,   // 51: tf2.CMsgProcessMatchVoteKick.reason:type_name -> tf2.TFVoteKickReason
	213, // 52: tf2.CMsgProcessMatchVoteKick.votes:type_name -> tf2.CMsgProcessMatchVoteKick.Vote
	214, // 53: tf2.CMsgUpdateHalloweenMerasmusLootLevel.players:type_name -> tf2.CMsgUpdateHalloweenMerasmusLootLevel.Player
	215, // 54: tf2.CGCMsgGC_War_GlobalStatsResponse.side_scores:type_name -> tf2.CGCMsgGC_War_GlobalStatsResponse.SideScore
	23,  // 55: tf2.CMsgTFXPSource.type:type_name -> tf2.CMsgTFXPSource.XPSourceType
	154, // 56: tf2.CMsgTFXPSourceBreakdown.sources:type_name -> tf2.CMsgTFXPSource
	24,  // 57: tf2.CMsgGCNotification.type:type_name -> tf2.CMsgGCNotification.NotificationType
	157, // 58: tf2.CMsgGCNotificationQueue.notifications:type_name -> tf2.CMsgGCNotification
	25,  // 59: tf2.CMsgGC_Match_Result.status:type_name -> tf2.CMsgGC_Match_Result.Status
	216, // 60: tf2.CMsgGC_Match_Result.players:type_name -> tf2.CMsgGC_Match_Result.Player
	220, // 61: tf2.CEconItemPreviewDataBlock.econitem:type_name -> tf2.CSOEconItem
	163, // 62: tf2.CMsgGC_Client2GCEconPreviewDataBlockResponse.iteminfo:type_name -> tf2.CEconItemPreviewDataBlock
	8,   // 63: tf2.CMsgGC_TFVoteKickPlayerRequest.reason:type_name -> tf2.TFVoteKickReason
	217, // 64: tf2.CMsgGC_DailyCompetitiveStatsRollup_Response.rankdata:type_name -> tf2.CMsgGC_DailyCompetitiveStatsRollup_Response.RankBucketEntry
	26,  // 65: tf2.CMsgGC_ReportPlayer.reason:type_name -> tf2.CMsgGC_ReportPlayer.EReason
	175, // 66: tf2.CMsgGCMatchGroupDataCenterPopulation.data_center_population:type_name -> tf2.CMsgGCDataCenterPopulation
	176, // 67: tf2.CMsgGCMatchMakerStatsResponse.matchgroup_data_center_population:type_name -> tf2.CMsgGCMatchGroupDataCenterPopulation
	3,   // 68: tf2.CMsgGCMatchHistoryLoad.match_group:type_name -> tf2.ETFMatchGroup
	218, // 69: tf2.CMsgGCDataCenterPing_Update.pingdata:type_name -> tf2.CMsgGCDataCenterPing_Update.PingEntry
	10,  // 70: tf2.CMsgGCSurveyRequest.question_type:type_name -> tf2.SurveyQuestionType
	10,  // 71: tf2.CMsgGCSurveyResponse.question_type:type_name -> tf2.SurveyQuestionType
	219, // 72: tf2.CMsgGCChangeMatchPlayerTeamsRequest.member:type_name -> tf2.CMsgGCChangeMatchPlayerTeamsRequest.Member
	189, // 73: tf2.CMsgGCQuestMap_Debug.unlock_node:type_name -> tf2.CMsgGCQuestMapUnlockNode
	3,   // 74: tf2.CSOTFPartyMember.Activity.lobby_match_group:type_name -> tf2.ETFMatchGroup
	3,   // 75: tf2.CSOTFParty.QueueEntry.match_group:type_name -> tf2.ETFMatchGroup
	20,  // 76: tf2.CMsgGameServerMatchmakingStatus.Player.connect_state:type_name -> tf2.CMsgGameServerMatchmakingStatus.PlayerConnectState
	22,  // 77: tf2.CMsgMvMVictoryInfo.Item.grant_reason:type_name -> tf2.CMsgMvMVictoryInfo.GrantReason
	210, // 78: tf2.CMsgMvMVictoryInfo.Player.items:type_name -> tf2.CMsgMvMVictoryInfo.Item
	154, // 79: tf2.CMsgGC_Match_Result.Player.xp_breakdown:type_name -> tf2.CMsgTFXPSource
	7,   // 80: tf2.CMsgGC_Match_Result.Player.leave_reason:type_name -> tf2.TFMatchLeaveReason
	27,  // 81: tf2.CMsgGCDataCenterPing_Update.PingEntry.ping_status:type_name -> tf2.CMsgGCDataCenterPing_Update.Status
	6,   // 82: tf2.CMsgGCChangeMatchPlayerTeamsRequest.Member.new_team:type_name -> tf2.TF_GC_TEAM
	83,  // [83:83] is the sub-list for method output_type
	83,  // [83:83] is the sub-list for method input_type
	83,  // [83:83] is the sub-list for extension type_name
	83,  // [83:83] is the sub-list for extension extendee
	0,   // [0:83] is the sub-list for field type_name
}

func init() { file_tf2_tf_gcmessages_proto_init() }
func file_tf2_tf_gcmessages_proto_init() {
	if File_tf2_tf_gcmessages_proto != nil {
		return
	}
	file_tf2_steammessages_proto_init()
	file_tf2_base_gcmessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tf2_tf_gcmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFGoldenWrenchBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFSaxxyBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCTFSpecificItemBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFWorldStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFDuelSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFMapContribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFFreeTrialChooseMostHelpfulFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFRequestTF2Friends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFRequestTF2FriendsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFThankedBySomeone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFThankedSomeone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFFreeTrialConvertedToPremium); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSaxxyAwarded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReplaySubmitContestEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReplaySubmitContestEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReplayCachedContestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_AddToCoaches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_RemoveFromCoaches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_FindCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_FindCoachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_AskCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_AskCoachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_CoachJoinGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_CoachJoining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_CoachJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_LikeCurrentCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFCoaching_RemoveCurrentCoach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFQuickplay_ScoreServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFQuickplay_ScoreServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFQuickplay_PlayerJoining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_LevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_AuthChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_AuthResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_AuthChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_CreateIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_CreateIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ResetIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ResetIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_AckPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_AckPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Client_UseServerModificationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Client_UseServerModificationItem_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_UseServerModificationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_UseServerModificationItem_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ServerModificationItemExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ServerModificationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Halloween_ReservedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Halloween_GrantItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Halloween_GrantItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Halloween_ItemClaimed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_PickupItemEligibility_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_PickupItemEligibility_QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFPartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFPendingPartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFSyncedMMUIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFGroupMatchCriteriaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFCasualMatchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFPerPlayerMatchCriteriaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFPartyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartySetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartySetOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyQueueForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyQueueForMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyQueueForStandby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyQueueForStandbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyRemoveFromQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyRemoveFromQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyRemoveFromStandbyQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyRemoveFromStandbyQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyInvitePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyRequestJoinPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyClearPendingPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyClearPendingPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyClearOtherPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyClearOtherPartyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyPromoteToLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyKickMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartySendChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFPartyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFLobbyPlayerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTFLobbyInviteProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFGameServerLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgExitMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAcceptLobbyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAcceptLobbyInviteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchmakingSearchCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchmakingSearchCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgKickedFromMatchmakingQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerMatchmakingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchmakingProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMVictoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgTFHelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgTFSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgTFSyncEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMVictory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMMannUpVictoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerKickingLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerKickingLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeaveGameAndPrepareToJoinParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerLeftMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerLeftMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProcessMatchVoteKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProcessMatchVoteKickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerVoteKickedAfterLeavingMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgHalloween_ServerBossEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgHalloween_Merasmus2012); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUpdateHalloweenMerasmusLootLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_DynamicRecipeComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_ItemSlotCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSetItemSlotAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOWarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_War_IndividualUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_War_JoinWar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_War_RequestGlobalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_War_GlobalStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAttribute_WorldItemPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsg_WorldItemPlacement_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAcknowledgeXP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFXPSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFXPSourceBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFClientInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCNotificationQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNotificationAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNotificationAcknowledgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Match_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Match_ResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItemPreviewDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Client2GCEconPreviewDataBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Client2GCEconPreviewDataBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFLadderPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFRatingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_TFVoteKickPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_VoteKickPlayerRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_DailyCompetitiveStatsRollup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_DailyCompetitiveStatsRollup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_ReportPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFMatchResultPlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRequestMatchMakerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCDataCenterPopulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCMatchGroupDataCenterPopulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCMatchMakerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCMatchHistoryLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCDataCenterPing_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_KickPlayerFromLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCSurveyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCSurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOQuestMapNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOQuestMapRewardPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestIdentify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestDevGive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestNodeTurnIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestMapUnlockNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCNewMatchForLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCNewMatchForLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCChangeMatchPlayerTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCChangeMatchPlayerTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestComplete_Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestMap_Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestMapPurchaseReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCSetDisablePartyQuestProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgQuestProgressReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgConsumePaintkit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPainkitDevGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCQuestStrangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFQuickplay_ScoreServers_ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTFQuickplay_ScoreServersResponse_ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_GameServer_ListResponse_GameServerIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFPartyMember_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFParty_QueueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTFPartyInvite_PartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerMatchmakingStatus_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMVictoryInfo_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMVictoryInfo_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMvMVictory_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProcessMatchVoteKick_Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUpdateHalloweenMerasmusLootLevel_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGCMsgGC_War_GlobalStatsResponse_SideScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_Match_Result_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCDataCenterPing_Update_PingEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_tf_gcmessages_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCChangeMatchPlayerTeamsRequest_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tf2_tf_gcmessages_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   192,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tf2_tf_gcmessages_proto_goTypes,
		DependencyIndexes: file_tf2_tf_gcmessages_proto_depIdxs,
		EnumInfos:         file_tf2_tf_gcmessages_proto_enumTypes,
		MessageInfos:      file_tf2_tf_gcmessages_proto_msgTypes,
	}.Build()
	File_tf2_tf_gcmessages_proto = out.File
	file_tf2_tf_gcmessages_proto_rawDesc = nil
	file_tf2_tf_gcmessages_proto_goTypes = nil
	file_tf2_tf_gcmessages_proto_depIdxs = nil
}
