// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common.proto

package dota2 // import "github.com/13k/go-steam-resources/protobuf/dota2"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ESpecialPingValue int32

const (
	ESpecialPingValue_k_ESpecialPingValue_NoData ESpecialPingValue = 16382
	ESpecialPingValue_k_ESpecialPingValue_Failed ESpecialPingValue = 16383
)

var ESpecialPingValue_name = map[int32]string{
	16382: "k_ESpecialPingValue_NoData",
	16383: "k_ESpecialPingValue_Failed",
}
var ESpecialPingValue_value = map[string]int32{
	"k_ESpecialPingValue_NoData": 16382,
	"k_ESpecialPingValue_Failed": 16383,
}

func (x ESpecialPingValue) Enum() *ESpecialPingValue {
	p := new(ESpecialPingValue)
	*p = x
	return p
}
func (x ESpecialPingValue) String() string {
	return proto.EnumName(ESpecialPingValue_name, int32(x))
}
func (x *ESpecialPingValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESpecialPingValue_value, data, "ESpecialPingValue")
	if err != nil {
		return err
	}
	*x = ESpecialPingValue(value)
	return nil
}
func (ESpecialPingValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{0}
}

type EDOTAGCSessionNeed int32

const (
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_Unknown                    EDOTAGCSessionNeed = 0
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserNoSessionNeeded        EDOTAGCSessionNeed = 100
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInOnlineGame           EDOTAGCSessionNeed = 101
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInLocalGame            EDOTAGCSessionNeed = 102
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnected       EDOTAGCSessionNeed = 103
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnected     EDOTAGCSessionNeed = 104
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserTutorials              EDOTAGCSessionNeed = 105
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle   EDOTAGCSessionNeed = 106
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle EDOTAGCSessionNeed = 107
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerOnline           EDOTAGCSessionNeed = 200
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocal            EDOTAGCSessionNeed = 201
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerIdle             EDOTAGCSessionNeed = 202
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerRelay            EDOTAGCSessionNeed = 203
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocalUpload      EDOTAGCSessionNeed = 204
)

var EDOTAGCSessionNeed_name = map[int32]string{
	0:   "k_EDOTAGCSessionNeed_Unknown",
	100: "k_EDOTAGCSessionNeed_UserNoSessionNeeded",
	101: "k_EDOTAGCSessionNeed_UserInOnlineGame",
	102: "k_EDOTAGCSessionNeed_UserInLocalGame",
	103: "k_EDOTAGCSessionNeed_UserInUIWasConnected",
	104: "k_EDOTAGCSessionNeed_UserInUINeverConnected",
	105: "k_EDOTAGCSessionNeed_UserTutorials",
	106: "k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle",
	107: "k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle",
	200: "k_EDOTAGCSessionNeed_GameServerOnline",
	201: "k_EDOTAGCSessionNeed_GameServerLocal",
	202: "k_EDOTAGCSessionNeed_GameServerIdle",
	203: "k_EDOTAGCSessionNeed_GameServerRelay",
	204: "k_EDOTAGCSessionNeed_GameServerLocalUpload",
}
var EDOTAGCSessionNeed_value = map[string]int32{
	"k_EDOTAGCSessionNeed_Unknown":                    0,
	"k_EDOTAGCSessionNeed_UserNoSessionNeeded":        100,
	"k_EDOTAGCSessionNeed_UserInOnlineGame":           101,
	"k_EDOTAGCSessionNeed_UserInLocalGame":            102,
	"k_EDOTAGCSessionNeed_UserInUIWasConnected":       103,
	"k_EDOTAGCSessionNeed_UserInUINeverConnected":     104,
	"k_EDOTAGCSessionNeed_UserTutorials":              105,
	"k_EDOTAGCSessionNeed_UserInUIWasConnectedIdle":   106,
	"k_EDOTAGCSessionNeed_UserInUINeverConnectedIdle": 107,
	"k_EDOTAGCSessionNeed_GameServerOnline":           200,
	"k_EDOTAGCSessionNeed_GameServerLocal":            201,
	"k_EDOTAGCSessionNeed_GameServerIdle":             202,
	"k_EDOTAGCSessionNeed_GameServerRelay":            203,
	"k_EDOTAGCSessionNeed_GameServerLocalUpload":      204,
}

func (x EDOTAGCSessionNeed) Enum() *EDOTAGCSessionNeed {
	p := new(EDOTAGCSessionNeed)
	*p = x
	return p
}
func (x EDOTAGCSessionNeed) String() string {
	return proto.EnumName(EDOTAGCSessionNeed_name, int32(x))
}
func (x *EDOTAGCSessionNeed) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAGCSessionNeed_value, data, "EDOTAGCSessionNeed")
	if err != nil {
		return err
	}
	*x = EDOTAGCSessionNeed(value)
	return nil
}
func (EDOTAGCSessionNeed) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{1}
}

type DOTA_TournamentEvents int32

const (
	DOTA_TournamentEvents_TE_FIRST_BLOOD  DOTA_TournamentEvents = 0
	DOTA_TournamentEvents_TE_GAME_END     DOTA_TournamentEvents = 1
	DOTA_TournamentEvents_TE_MULTI_KILL   DOTA_TournamentEvents = 2
	DOTA_TournamentEvents_TE_HERO_DENY    DOTA_TournamentEvents = 3
	DOTA_TournamentEvents_TE_AEGIS_DENY   DOTA_TournamentEvents = 4
	DOTA_TournamentEvents_TE_AEGIS_STOLEN DOTA_TournamentEvents = 5
	DOTA_TournamentEvents_TE_GODLIKE      DOTA_TournamentEvents = 6
	DOTA_TournamentEvents_TE_COURIER_KILL DOTA_TournamentEvents = 7
	DOTA_TournamentEvents_TE_ECHOSLAM     DOTA_TournamentEvents = 8
	DOTA_TournamentEvents_TE_RAPIER       DOTA_TournamentEvents = 9
	DOTA_TournamentEvents_TE_EARLY_ROSHAN DOTA_TournamentEvents = 10
	DOTA_TournamentEvents_TE_BLACK_HOLE   DOTA_TournamentEvents = 11
)

var DOTA_TournamentEvents_name = map[int32]string{
	0:  "TE_FIRST_BLOOD",
	1:  "TE_GAME_END",
	2:  "TE_MULTI_KILL",
	3:  "TE_HERO_DENY",
	4:  "TE_AEGIS_DENY",
	5:  "TE_AEGIS_STOLEN",
	6:  "TE_GODLIKE",
	7:  "TE_COURIER_KILL",
	8:  "TE_ECHOSLAM",
	9:  "TE_RAPIER",
	10: "TE_EARLY_ROSHAN",
	11: "TE_BLACK_HOLE",
}
var DOTA_TournamentEvents_value = map[string]int32{
	"TE_FIRST_BLOOD":  0,
	"TE_GAME_END":     1,
	"TE_MULTI_KILL":   2,
	"TE_HERO_DENY":    3,
	"TE_AEGIS_DENY":   4,
	"TE_AEGIS_STOLEN": 5,
	"TE_GODLIKE":      6,
	"TE_COURIER_KILL": 7,
	"TE_ECHOSLAM":     8,
	"TE_RAPIER":       9,
	"TE_EARLY_ROSHAN": 10,
	"TE_BLACK_HOLE":   11,
}

func (x DOTA_TournamentEvents) Enum() *DOTA_TournamentEvents {
	p := new(DOTA_TournamentEvents)
	*p = x
	return p
}
func (x DOTA_TournamentEvents) String() string {
	return proto.EnumName(DOTA_TournamentEvents_name, int32(x))
}
func (x *DOTA_TournamentEvents) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_TournamentEvents_value, data, "DOTA_TournamentEvents")
	if err != nil {
		return err
	}
	*x = DOTA_TournamentEvents(value)
	return nil
}
func (DOTA_TournamentEvents) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{2}
}

type EBroadcastTimelineEvent int32

const (
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_MatchStarted     EBroadcastTimelineEvent = 1
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_GameStateChanged EBroadcastTimelineEvent = 2
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_TowerDeath       EBroadcastTimelineEvent = 3
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_BarracksDeath    EBroadcastTimelineEvent = 4
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_AncientDeath     EBroadcastTimelineEvent = 5
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_RoshanDeath      EBroadcastTimelineEvent = 6
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_HeroDeath        EBroadcastTimelineEvent = 7
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_TeamFight        EBroadcastTimelineEvent = 8
	EBroadcastTimelineEvent_EBroadcastTimelineEvent_FirstBlood       EBroadcastTimelineEvent = 9
)

var EBroadcastTimelineEvent_name = map[int32]string{
	1: "EBroadcastTimelineEvent_MatchStarted",
	2: "EBroadcastTimelineEvent_GameStateChanged",
	3: "EBroadcastTimelineEvent_TowerDeath",
	4: "EBroadcastTimelineEvent_BarracksDeath",
	5: "EBroadcastTimelineEvent_AncientDeath",
	6: "EBroadcastTimelineEvent_RoshanDeath",
	7: "EBroadcastTimelineEvent_HeroDeath",
	8: "EBroadcastTimelineEvent_TeamFight",
	9: "EBroadcastTimelineEvent_FirstBlood",
}
var EBroadcastTimelineEvent_value = map[string]int32{
	"EBroadcastTimelineEvent_MatchStarted":     1,
	"EBroadcastTimelineEvent_GameStateChanged": 2,
	"EBroadcastTimelineEvent_TowerDeath":       3,
	"EBroadcastTimelineEvent_BarracksDeath":    4,
	"EBroadcastTimelineEvent_AncientDeath":     5,
	"EBroadcastTimelineEvent_RoshanDeath":      6,
	"EBroadcastTimelineEvent_HeroDeath":        7,
	"EBroadcastTimelineEvent_TeamFight":        8,
	"EBroadcastTimelineEvent_FirstBlood":       9,
}

func (x EBroadcastTimelineEvent) Enum() *EBroadcastTimelineEvent {
	p := new(EBroadcastTimelineEvent)
	*p = x
	return p
}
func (x EBroadcastTimelineEvent) String() string {
	return proto.EnumName(EBroadcastTimelineEvent_name, int32(x))
}
func (x *EBroadcastTimelineEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EBroadcastTimelineEvent_value, data, "EBroadcastTimelineEvent")
	if err != nil {
		return err
	}
	*x = EBroadcastTimelineEvent(value)
	return nil
}
func (EBroadcastTimelineEvent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{3}
}

type CMsgDOTAProfileCard_EStatID int32

const (
	CMsgDOTAProfileCard_k_eStat_SoloRank           CMsgDOTAProfileCard_EStatID = 1
	CMsgDOTAProfileCard_k_eStat_PartyRank          CMsgDOTAProfileCard_EStatID = 2
	CMsgDOTAProfileCard_k_eStat_Wins               CMsgDOTAProfileCard_EStatID = 3
	CMsgDOTAProfileCard_k_eStat_Commends           CMsgDOTAProfileCard_EStatID = 4
	CMsgDOTAProfileCard_k_eStat_GamesPlayed        CMsgDOTAProfileCard_EStatID = 5
	CMsgDOTAProfileCard_k_eStat_FirstMatchDate     CMsgDOTAProfileCard_EStatID = 6
	CMsgDOTAProfileCard_k_eStat_PreviousSeasonRank CMsgDOTAProfileCard_EStatID = 7
)

var CMsgDOTAProfileCard_EStatID_name = map[int32]string{
	1: "k_eStat_SoloRank",
	2: "k_eStat_PartyRank",
	3: "k_eStat_Wins",
	4: "k_eStat_Commends",
	5: "k_eStat_GamesPlayed",
	6: "k_eStat_FirstMatchDate",
	7: "k_eStat_PreviousSeasonRank",
}
var CMsgDOTAProfileCard_EStatID_value = map[string]int32{
	"k_eStat_SoloRank":           1,
	"k_eStat_PartyRank":          2,
	"k_eStat_Wins":               3,
	"k_eStat_Commends":           4,
	"k_eStat_GamesPlayed":        5,
	"k_eStat_FirstMatchDate":     6,
	"k_eStat_PreviousSeasonRank": 7,
}

func (x CMsgDOTAProfileCard_EStatID) Enum() *CMsgDOTAProfileCard_EStatID {
	p := new(CMsgDOTAProfileCard_EStatID)
	*p = x
	return p
}
func (x CMsgDOTAProfileCard_EStatID) String() string {
	return proto.EnumName(CMsgDOTAProfileCard_EStatID_name, int32(x))
}
func (x *CMsgDOTAProfileCard_EStatID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAProfileCard_EStatID_value, data, "CMsgDOTAProfileCard_EStatID")
	if err != nil {
		return err
	}
	*x = CMsgDOTAProfileCard_EStatID(value)
	return nil
}
func (CMsgDOTAProfileCard_EStatID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0}
}

type CMsgGCRerollPlayerChallengeResponse_EResult int32

const (
	CMsgGCRerollPlayerChallengeResponse_eResult_Success     CMsgGCRerollPlayerChallengeResponse_EResult = 0
	CMsgGCRerollPlayerChallengeResponse_eResult_Dropped     CMsgGCRerollPlayerChallengeResponse_EResult = 1
	CMsgGCRerollPlayerChallengeResponse_eResult_NotFound    CMsgGCRerollPlayerChallengeResponse_EResult = 2
	CMsgGCRerollPlayerChallengeResponse_eResult_CantReroll  CMsgGCRerollPlayerChallengeResponse_EResult = 3
	CMsgGCRerollPlayerChallengeResponse_eResult_ServerError CMsgGCRerollPlayerChallengeResponse_EResult = 4
)

var CMsgGCRerollPlayerChallengeResponse_EResult_name = map[int32]string{
	0: "eResult_Success",
	1: "eResult_Dropped",
	2: "eResult_NotFound",
	3: "eResult_CantReroll",
	4: "eResult_ServerError",
}
var CMsgGCRerollPlayerChallengeResponse_EResult_value = map[string]int32{
	"eResult_Success":     0,
	"eResult_Dropped":     1,
	"eResult_NotFound":    2,
	"eResult_CantReroll":  3,
	"eResult_ServerError": 4,
}

func (x CMsgGCRerollPlayerChallengeResponse_EResult) Enum() *CMsgGCRerollPlayerChallengeResponse_EResult {
	p := new(CMsgGCRerollPlayerChallengeResponse_EResult)
	*p = x
	return p
}
func (x CMsgGCRerollPlayerChallengeResponse_EResult) String() string {
	return proto.EnumName(CMsgGCRerollPlayerChallengeResponse_EResult_name, int32(x))
}
func (x *CMsgGCRerollPlayerChallengeResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgGCRerollPlayerChallengeResponse_EResult_value, data, "CMsgGCRerollPlayerChallengeResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgGCRerollPlayerChallengeResponse_EResult(value)
	return nil
}
func (CMsgGCRerollPlayerChallengeResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{34, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataEStat int32

const (
	CMsgDOTARealtimeGameStats_GraphData_CreepGoldEarned         CMsgDOTARealtimeGameStats_GraphDataEStat = 0
	CMsgDOTARealtimeGameStats_GraphData_KillGoldEarned          CMsgDOTARealtimeGameStats_GraphDataEStat = 1
	CMsgDOTARealtimeGameStats_GraphData_DeathAndBuybackGoldLost CMsgDOTARealtimeGameStats_GraphDataEStat = 2
	CMsgDOTARealtimeGameStats_GraphData_XPEarned                CMsgDOTARealtimeGameStats_GraphDataEStat = 3
)

var CMsgDOTARealtimeGameStats_GraphDataEStat_name = map[int32]string{
	0: "CreepGoldEarned",
	1: "KillGoldEarned",
	2: "DeathAndBuybackGoldLost",
	3: "XPEarned",
}
var CMsgDOTARealtimeGameStats_GraphDataEStat_value = map[string]int32{
	"CreepGoldEarned":         0,
	"KillGoldEarned":          1,
	"DeathAndBuybackGoldLost": 2,
	"XPEarned":                3,
}

func (x CMsgDOTARealtimeGameStats_GraphDataEStat) Enum() *CMsgDOTARealtimeGameStats_GraphDataEStat {
	p := new(CMsgDOTARealtimeGameStats_GraphDataEStat)
	*p = x
	return p
}
func (x CMsgDOTARealtimeGameStats_GraphDataEStat) String() string {
	return proto.EnumName(CMsgDOTARealtimeGameStats_GraphDataEStat_name, int32(x))
}
func (x *CMsgDOTARealtimeGameStats_GraphDataEStat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTARealtimeGameStats_GraphDataEStat_value, data, "CMsgDOTARealtimeGameStats_GraphDataEStat")
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataEStat(value)
	return nil
}
func (CMsgDOTARealtimeGameStats_GraphDataEStat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 11, 0}
}

type CMsgDOTARealtimeGameStats_GraphDataELocation int32

const (
	CMsgDOTARealtimeGameStats_GraphData_BotLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 0
	CMsgDOTARealtimeGameStats_GraphData_MidLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 1
	CMsgDOTARealtimeGameStats_GraphData_TopLane  CMsgDOTARealtimeGameStats_GraphDataELocation = 2
	CMsgDOTARealtimeGameStats_GraphData_Jungle   CMsgDOTARealtimeGameStats_GraphDataELocation = 3
	CMsgDOTARealtimeGameStats_GraphData_Ancients CMsgDOTARealtimeGameStats_GraphDataELocation = 4
	CMsgDOTARealtimeGameStats_GraphData_Other    CMsgDOTARealtimeGameStats_GraphDataELocation = 5
)

var CMsgDOTARealtimeGameStats_GraphDataELocation_name = map[int32]string{
	0: "BotLane",
	1: "MidLane",
	2: "TopLane",
	3: "Jungle",
	4: "Ancients",
	5: "Other",
}
var CMsgDOTARealtimeGameStats_GraphDataELocation_value = map[string]int32{
	"BotLane":  0,
	"MidLane":  1,
	"TopLane":  2,
	"Jungle":   3,
	"Ancients": 4,
	"Other":    5,
}

func (x CMsgDOTARealtimeGameStats_GraphDataELocation) Enum() *CMsgDOTARealtimeGameStats_GraphDataELocation {
	p := new(CMsgDOTARealtimeGameStats_GraphDataELocation)
	*p = x
	return p
}
func (x CMsgDOTARealtimeGameStats_GraphDataELocation) String() string {
	return proto.EnumName(CMsgDOTARealtimeGameStats_GraphDataELocation_name, int32(x))
}
func (x *CMsgDOTARealtimeGameStats_GraphDataELocation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTARealtimeGameStats_GraphDataELocation_value, data, "CMsgDOTARealtimeGameStats_GraphDataELocation")
	if err != nil {
		return err
	}
	*x = CMsgDOTARealtimeGameStats_GraphDataELocation(value)
	return nil
}
func (CMsgDOTARealtimeGameStats_GraphDataELocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 11, 1}
}

type CMsgDOTASeasonRewards_ERewardType int32

const (
	CMsgDOTASeasonRewards_EconItem                CMsgDOTASeasonRewards_ERewardType = 0
	CMsgDOTASeasonRewards_MysteryWheel            CMsgDOTASeasonRewards_ERewardType = 1
	CMsgDOTASeasonRewards_AbilityEffect           CMsgDOTASeasonRewards_ERewardType = 2
	CMsgDOTASeasonRewards_Other                   CMsgDOTASeasonRewards_ERewardType = 3
	CMsgDOTASeasonRewards_MysteryWheelPointsBased CMsgDOTASeasonRewards_ERewardType = 4
)

var CMsgDOTASeasonRewards_ERewardType_name = map[int32]string{
	0: "EconItem",
	1: "MysteryWheel",
	2: "AbilityEffect",
	3: "Other",
	4: "MysteryWheelPointsBased",
}
var CMsgDOTASeasonRewards_ERewardType_value = map[string]int32{
	"EconItem":                0,
	"MysteryWheel":            1,
	"AbilityEffect":           2,
	"Other":                   3,
	"MysteryWheelPointsBased": 4,
}

func (x CMsgDOTASeasonRewards_ERewardType) Enum() *CMsgDOTASeasonRewards_ERewardType {
	p := new(CMsgDOTASeasonRewards_ERewardType)
	*p = x
	return p
}
func (x CMsgDOTASeasonRewards_ERewardType) String() string {
	return proto.EnumName(CMsgDOTASeasonRewards_ERewardType_name, int32(x))
}
func (x *CMsgDOTASeasonRewards_ERewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonRewards_ERewardType_value, data, "CMsgDOTASeasonRewards_ERewardType")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonRewards_ERewardType(value)
	return nil
}
func (CMsgDOTASeasonRewards_ERewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{41, 0}
}

type CMsgDOTASeasonPredictionsEPredictionType int32

const (
	CMsgDOTASeasonPredictions_Generic CMsgDOTASeasonPredictionsEPredictionType = 0
	CMsgDOTASeasonPredictions_Hero    CMsgDOTASeasonPredictionsEPredictionType = 1
	CMsgDOTASeasonPredictions_Team    CMsgDOTASeasonPredictionsEPredictionType = 2
	CMsgDOTASeasonPredictions_Player  CMsgDOTASeasonPredictionsEPredictionType = 3
	CMsgDOTASeasonPredictions_Special CMsgDOTASeasonPredictionsEPredictionType = 4
	CMsgDOTASeasonPredictions_YesNo   CMsgDOTASeasonPredictionsEPredictionType = 5
)

var CMsgDOTASeasonPredictionsEPredictionType_name = map[int32]string{
	0: "Generic",
	1: "Hero",
	2: "Team",
	3: "Player",
	4: "Special",
	5: "YesNo",
}
var CMsgDOTASeasonPredictionsEPredictionType_value = map[string]int32{
	"Generic": 0,
	"Hero":    1,
	"Team":    2,
	"Player":  3,
	"Special": 4,
	"YesNo":   5,
}

func (x CMsgDOTASeasonPredictionsEPredictionType) Enum() *CMsgDOTASeasonPredictionsEPredictionType {
	p := new(CMsgDOTASeasonPredictionsEPredictionType)
	*p = x
	return p
}
func (x CMsgDOTASeasonPredictionsEPredictionType) String() string {
	return proto.EnumName(CMsgDOTASeasonPredictionsEPredictionType_name, int32(x))
}
func (x *CMsgDOTASeasonPredictionsEPredictionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonPredictionsEPredictionType_value, data, "CMsgDOTASeasonPredictionsEPredictionType")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEPredictionType(value)
	return nil
}
func (CMsgDOTASeasonPredictionsEPredictionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 0}
}

type CMsgDOTASeasonPredictionsEAnswerType int32

const (
	CMsgDOTASeasonPredictions_SingleInt     CMsgDOTASeasonPredictionsEAnswerType = 0
	CMsgDOTASeasonPredictions_SingleFloat   CMsgDOTASeasonPredictionsEAnswerType = 1
	CMsgDOTASeasonPredictions_MultipleInt   CMsgDOTASeasonPredictionsEAnswerType = 2
	CMsgDOTASeasonPredictions_MultipleFloat CMsgDOTASeasonPredictionsEAnswerType = 3
	CMsgDOTASeasonPredictions_AnswerTeam    CMsgDOTASeasonPredictionsEAnswerType = 4
	CMsgDOTASeasonPredictions_SingleTime    CMsgDOTASeasonPredictionsEAnswerType = 5
	CMsgDOTASeasonPredictions_MultipleTime  CMsgDOTASeasonPredictionsEAnswerType = 6
	CMsgDOTASeasonPredictions_NoAnswer      CMsgDOTASeasonPredictionsEAnswerType = 7
)

var CMsgDOTASeasonPredictionsEAnswerType_name = map[int32]string{
	0: "SingleInt",
	1: "SingleFloat",
	2: "MultipleInt",
	3: "MultipleFloat",
	4: "AnswerTeam",
	5: "SingleTime",
	6: "MultipleTime",
	7: "NoAnswer",
}
var CMsgDOTASeasonPredictionsEAnswerType_value = map[string]int32{
	"SingleInt":     0,
	"SingleFloat":   1,
	"MultipleInt":   2,
	"MultipleFloat": 3,
	"AnswerTeam":    4,
	"SingleTime":    5,
	"MultipleTime":  6,
	"NoAnswer":      7,
}

func (x CMsgDOTASeasonPredictionsEAnswerType) Enum() *CMsgDOTASeasonPredictionsEAnswerType {
	p := new(CMsgDOTASeasonPredictionsEAnswerType)
	*p = x
	return p
}
func (x CMsgDOTASeasonPredictionsEAnswerType) String() string {
	return proto.EnumName(CMsgDOTASeasonPredictionsEAnswerType_name, int32(x))
}
func (x *CMsgDOTASeasonPredictionsEAnswerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonPredictionsEAnswerType_value, data, "CMsgDOTASeasonPredictionsEAnswerType")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEAnswerType(value)
	return nil
}
func (CMsgDOTASeasonPredictionsEAnswerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 1}
}

type CMsgDOTASeasonPredictionsEResolutionTypeT int32

const (
	CMsgDOTASeasonPredictions_InvalidQuery          CMsgDOTASeasonPredictionsEResolutionTypeT = 0
	CMsgDOTASeasonPredictions_FirstToPassQuery      CMsgDOTASeasonPredictionsEResolutionTypeT = 1
	CMsgDOTASeasonPredictions_LastToPassQuery       CMsgDOTASeasonPredictionsEResolutionTypeT = 2
	CMsgDOTASeasonPredictions_LastRemainingQuery    CMsgDOTASeasonPredictionsEResolutionTypeT = 3
	CMsgDOTASeasonPredictions_MaxToPassQuery        CMsgDOTASeasonPredictionsEResolutionTypeT = 4
	CMsgDOTASeasonPredictions_MinToPassQuery        CMsgDOTASeasonPredictionsEResolutionTypeT = 5
	CMsgDOTASeasonPredictions_SumQuery              CMsgDOTASeasonPredictionsEResolutionTypeT = 6
	CMsgDOTASeasonPredictions_MaxTeamSumToPassQuery CMsgDOTASeasonPredictionsEResolutionTypeT = 7
	CMsgDOTASeasonPredictions_MinTeamSumToPassQuery CMsgDOTASeasonPredictionsEResolutionTypeT = 8
)

var CMsgDOTASeasonPredictionsEResolutionTypeT_name = map[int32]string{
	0: "InvalidQuery",
	1: "FirstToPassQuery",
	2: "LastToPassQuery",
	3: "LastRemainingQuery",
	4: "MaxToPassQuery",
	5: "MinToPassQuery",
	6: "SumQuery",
	7: "MaxTeamSumToPassQuery",
	8: "MinTeamSumToPassQuery",
}
var CMsgDOTASeasonPredictionsEResolutionTypeT_value = map[string]int32{
	"InvalidQuery":          0,
	"FirstToPassQuery":      1,
	"LastToPassQuery":       2,
	"LastRemainingQuery":    3,
	"MaxToPassQuery":        4,
	"MinToPassQuery":        5,
	"SumQuery":              6,
	"MaxTeamSumToPassQuery": 7,
	"MinTeamSumToPassQuery": 8,
}

func (x CMsgDOTASeasonPredictionsEResolutionTypeT) Enum() *CMsgDOTASeasonPredictionsEResolutionTypeT {
	p := new(CMsgDOTASeasonPredictionsEResolutionTypeT)
	*p = x
	return p
}
func (x CMsgDOTASeasonPredictionsEResolutionTypeT) String() string {
	return proto.EnumName(CMsgDOTASeasonPredictionsEResolutionTypeT_name, int32(x))
}
func (x *CMsgDOTASeasonPredictionsEResolutionTypeT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonPredictionsEResolutionTypeT_value, data, "CMsgDOTASeasonPredictionsEResolutionTypeT")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsEResolutionTypeT(value)
	return nil
}
func (CMsgDOTASeasonPredictionsEResolutionTypeT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 2}
}

type CMsgDOTASeasonPredictionsERandomSelectionGroupT int32

const (
	CMsgDOTASeasonPredictions_EarlyGame CMsgDOTASeasonPredictionsERandomSelectionGroupT = 0
	CMsgDOTASeasonPredictions_MidGame   CMsgDOTASeasonPredictionsERandomSelectionGroupT = 1
	CMsgDOTASeasonPredictions_LateGame  CMsgDOTASeasonPredictionsERandomSelectionGroupT = 2
	CMsgDOTASeasonPredictions_Count     CMsgDOTASeasonPredictionsERandomSelectionGroupT = 3
)

var CMsgDOTASeasonPredictionsERandomSelectionGroupT_name = map[int32]string{
	0: "EarlyGame",
	1: "MidGame",
	2: "LateGame",
	3: "Count",
}
var CMsgDOTASeasonPredictionsERandomSelectionGroupT_value = map[string]int32{
	"EarlyGame": 0,
	"MidGame":   1,
	"LateGame":  2,
	"Count":     3,
}

func (x CMsgDOTASeasonPredictionsERandomSelectionGroupT) Enum() *CMsgDOTASeasonPredictionsERandomSelectionGroupT {
	p := new(CMsgDOTASeasonPredictionsERandomSelectionGroupT)
	*p = x
	return p
}
func (x CMsgDOTASeasonPredictionsERandomSelectionGroupT) String() string {
	return proto.EnumName(CMsgDOTASeasonPredictionsERandomSelectionGroupT_name, int32(x))
}
func (x *CMsgDOTASeasonPredictionsERandomSelectionGroupT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonPredictionsERandomSelectionGroupT_value, data, "CMsgDOTASeasonPredictionsERandomSelectionGroupT")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsERandomSelectionGroupT(value)
	return nil
}
func (CMsgDOTASeasonPredictionsERandomSelectionGroupT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 3}
}

type CMsgDOTASeasonPredictionsERawValueTypeT int32

const (
	CMsgDOTASeasonPredictions_Number CMsgDOTASeasonPredictionsERawValueTypeT = 0
	CMsgDOTASeasonPredictions_Time   CMsgDOTASeasonPredictionsERawValueTypeT = 1
)

var CMsgDOTASeasonPredictionsERawValueTypeT_name = map[int32]string{
	0: "Number",
	1: "Time",
}
var CMsgDOTASeasonPredictionsERawValueTypeT_value = map[string]int32{
	"Number": 0,
	"Time":   1,
}

func (x CMsgDOTASeasonPredictionsERawValueTypeT) Enum() *CMsgDOTASeasonPredictionsERawValueTypeT {
	p := new(CMsgDOTASeasonPredictionsERawValueTypeT)
	*p = x
	return p
}
func (x CMsgDOTASeasonPredictionsERawValueTypeT) String() string {
	return proto.EnumName(CMsgDOTASeasonPredictionsERawValueTypeT_name, int32(x))
}
func (x *CMsgDOTASeasonPredictionsERawValueTypeT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTASeasonPredictionsERawValueTypeT_value, data, "CMsgDOTASeasonPredictionsERawValueTypeT")
	if err != nil {
		return err
	}
	*x = CMsgDOTASeasonPredictionsERawValueTypeT(value)
	return nil
}
func (CMsgDOTASeasonPredictionsERawValueTypeT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 4}
}

type CMsgDOTAMatch_ReplayState int32

const (
	CMsgDOTAMatch_REPLAY_AVAILABLE    CMsgDOTAMatch_ReplayState = 0
	CMsgDOTAMatch_REPLAY_NOT_RECORDED CMsgDOTAMatch_ReplayState = 1
	CMsgDOTAMatch_REPLAY_EXPIRED      CMsgDOTAMatch_ReplayState = 2
)

var CMsgDOTAMatch_ReplayState_name = map[int32]string{
	0: "REPLAY_AVAILABLE",
	1: "REPLAY_NOT_RECORDED",
	2: "REPLAY_EXPIRED",
}
var CMsgDOTAMatch_ReplayState_value = map[string]int32{
	"REPLAY_AVAILABLE":    0,
	"REPLAY_NOT_RECORDED": 1,
	"REPLAY_EXPIRED":      2,
}

func (x CMsgDOTAMatch_ReplayState) Enum() *CMsgDOTAMatch_ReplayState {
	p := new(CMsgDOTAMatch_ReplayState)
	*p = x
	return p
}
func (x CMsgDOTAMatch_ReplayState) String() string {
	return proto.EnumName(CMsgDOTAMatch_ReplayState_name, int32(x))
}
func (x *CMsgDOTAMatch_ReplayState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAMatch_ReplayState_value, data, "CMsgDOTAMatch_ReplayState")
	if err != nil {
		return err
	}
	*x = CMsgDOTAMatch_ReplayState(value)
	return nil
}
func (CMsgDOTAMatch_ReplayState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 0}
}

type CSODOTAGameAccountClient struct {
	AccountId                                      *uint32             `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Wins                                           *uint32             `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Losses                                         *uint32             `protobuf:"varint,4,opt,name=losses" json:"losses,omitempty"`
	Xp                                             *uint32             `protobuf:"varint,12,opt,name=xp" json:"xp,omitempty"`
	Level                                          *uint32             `protobuf:"varint,13,opt,name=level" json:"level,omitempty"`
	InitialSkill                                   *uint32             `protobuf:"varint,14,opt,name=initial_skill,json=initialSkill" json:"initial_skill,omitempty"`
	LeaverCount                                    *uint32             `protobuf:"varint,15,opt,name=leaver_count,json=leaverCount" json:"leaver_count,omitempty"`
	SecondaryLeaverCount                           *uint32             `protobuf:"varint,58,opt,name=secondary_leaver_count,json=secondaryLeaverCount" json:"secondary_leaver_count,omitempty"`
	LowPriorityUntilDate                           *uint32             `protobuf:"varint,18,opt,name=low_priority_until_date,json=lowPriorityUntilDate" json:"low_priority_until_date,omitempty"`
	PreventTextChatUntilDate                       *uint32             `protobuf:"varint,20,opt,name=prevent_text_chat_until_date,json=preventTextChatUntilDate" json:"prevent_text_chat_until_date,omitempty"`
	PreventVoiceUntilDate                          *uint32             `protobuf:"varint,21,opt,name=prevent_voice_until_date,json=preventVoiceUntilDate" json:"prevent_voice_until_date,omitempty"`
	PreventPublicTextChatUntilDate                 *uint32             `protobuf:"varint,86,opt,name=prevent_public_text_chat_until_date,json=preventPublicTextChatUntilDate" json:"prevent_public_text_chat_until_date,omitempty"`
	LastAbandonedGameDate                          *uint32             `protobuf:"varint,22,opt,name=last_abandoned_game_date,json=lastAbandonedGameDate" json:"last_abandoned_game_date,omitempty"`
	LastSecondaryAbandonedGameDate                 *uint32             `protobuf:"varint,59,opt,name=last_secondary_abandoned_game_date,json=lastSecondaryAbandonedGameDate" json:"last_secondary_abandoned_game_date,omitempty"`
	LeaverPenaltyCount                             *uint32             `protobuf:"varint,23,opt,name=leaver_penalty_count,json=leaverPenaltyCount" json:"leaver_penalty_count,omitempty"`
	CompletedGameStreak                            *uint32             `protobuf:"varint,24,opt,name=completed_game_streak,json=completedGameStreak" json:"completed_game_streak,omitempty"`
	Teaching                                       *uint32             `protobuf:"varint,28,opt,name=teaching" json:"teaching,omitempty"`
	Leadership                                     *uint32             `protobuf:"varint,29,opt,name=leadership" json:"leadership,omitempty"`
	Friendly                                       *uint32             `protobuf:"varint,30,opt,name=friendly" json:"friendly,omitempty"`
	Forgiving                                      *uint32             `protobuf:"varint,31,opt,name=forgiving" json:"forgiving,omitempty"`
	AccountDisabledUntilDate                       *uint32             `protobuf:"varint,38,opt,name=account_disabled_until_date,json=accountDisabledUntilDate" json:"account_disabled_until_date,omitempty"`
	AccountDisabledCount                           *uint32             `protobuf:"varint,39,opt,name=account_disabled_count,json=accountDisabledCount" json:"account_disabled_count,omitempty"`
	MatchDisabledUntilDate                         *uint32             `protobuf:"varint,41,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledCount                             *uint32             `protobuf:"varint,42,opt,name=match_disabled_count,json=matchDisabledCount" json:"match_disabled_count,omitempty"`
	PartnerAccountType                             *PartnerAccountType `protobuf:"varint,44,opt,name=partner_account_type,json=partnerAccountType,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	PartnerAccountState                            *uint32             `protobuf:"varint,45,opt,name=partner_account_state,json=partnerAccountState" json:"partner_account_state,omitempty"`
	Shutdownlawterminatetimestamp                  *uint32             `protobuf:"varint,47,opt,name=shutdownlawterminatetimestamp" json:"shutdownlawterminatetimestamp,omitempty"`
	LowPriorityGamesRemaining                      *uint32             `protobuf:"varint,48,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	CompetitiveRank                                *uint32             `protobuf:"varint,49,opt,name=competitive_rank,json=competitiveRank" json:"competitive_rank,omitempty"`
	CalibrationGamesRemaining                      *uint32             `protobuf:"varint,51,opt,name=calibration_games_remaining,json=calibrationGamesRemaining" json:"calibration_games_remaining,omitempty"`
	SoloCompetitiveRank                            *uint32             `protobuf:"varint,52,opt,name=solo_competitive_rank,json=soloCompetitiveRank" json:"solo_competitive_rank,omitempty"`
	SoloCalibrationGamesRemaining                  *uint32             `protobuf:"varint,54,opt,name=solo_calibration_games_remaining,json=soloCalibrationGamesRemaining" json:"solo_calibration_games_remaining,omitempty"`
	RecruitmentLevel                               *uint32             `protobuf:"varint,55,opt,name=recruitment_level,json=recruitmentLevel" json:"recruitment_level,omitempty"`
	HasNewNotifications                            *bool               `protobuf:"varint,56,opt,name=has_new_notifications,json=hasNewNotifications" json:"has_new_notifications,omitempty"`
	IsLeagueAdmin                                  *bool               `protobuf:"varint,57,opt,name=is_league_admin,json=isLeagueAdmin" json:"is_league_admin,omitempty"`
	CasualGamesPlayed                              *uint32             `protobuf:"varint,60,opt,name=casual_games_played,json=casualGamesPlayed" json:"casual_games_played,omitempty"`
	SoloCompetitiveGamesPlayed                     *uint32             `protobuf:"varint,61,opt,name=solo_competitive_games_played,json=soloCompetitiveGamesPlayed" json:"solo_competitive_games_played,omitempty"`
	PartyCompetitiveGamesPlayed                    *uint32             `protobuf:"varint,62,opt,name=party_competitive_games_played,json=partyCompetitiveGamesPlayed" json:"party_competitive_games_played,omitempty"`
	Casual_1V1GamesPlayed                          *uint32             `protobuf:"varint,65,opt,name=casual_1v1_games_played,json=casual1v1GamesPlayed" json:"casual_1v1_games_played,omitempty"`
	CompetitiveTeamGamesPlayed                     *uint32             `protobuf:"varint,66,opt,name=competitive_team_games_played,json=competitiveTeamGamesPlayed" json:"competitive_team_games_played,omitempty"`
	CurrAllHeroChallengeId                         *uint32             `protobuf:"varint,67,opt,name=curr_all_hero_challenge_id,json=currAllHeroChallengeId" json:"curr_all_hero_challenge_id,omitempty"`
	PlayTimePoints                                 *uint32             `protobuf:"varint,68,opt,name=play_time_points,json=playTimePoints" json:"play_time_points,omitempty"`
	AccountFlags                                   *uint32             `protobuf:"varint,69,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	PlayTimeLevel                                  *uint32             `protobuf:"varint,70,opt,name=play_time_level,json=playTimeLevel" json:"play_time_level,omitempty"`
	PlayerBehaviorSeqNumLastReport                 *uint32             `protobuf:"varint,71,opt,name=player_behavior_seq_num_last_report,json=playerBehaviorSeqNumLastReport" json:"player_behavior_seq_num_last_report,omitempty"`
	PlayerBehaviorScoreLastReport                  *uint32             `protobuf:"varint,72,opt,name=player_behavior_score_last_report,json=playerBehaviorScoreLastReport" json:"player_behavior_score_last_report,omitempty"`
	PlayerBehaviorReportOldData                    *bool               `protobuf:"varint,73,opt,name=player_behavior_report_old_data,json=playerBehaviorReportOldData" json:"player_behavior_report_old_data,omitempty"`
	TourneySkillLevel                              *uint32             `protobuf:"varint,74,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyRecentParticipationDate                 *uint32             `protobuf:"varint,85,opt,name=tourney_recent_participation_date,json=tourneyRecentParticipationDate" json:"tourney_recent_participation_date,omitempty"`
	FavoriteTeam                                   *uint32             `protobuf:"varint,87,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	AnchoredPhoneNumberId                          *uint64             `protobuf:"varint,88,opt,name=anchored_phone_number_id,json=anchoredPhoneNumberId" json:"anchored_phone_number_id,omitempty"`
	RankedMatchmakingBanUntilDate                  *uint32             `protobuf:"varint,89,opt,name=ranked_matchmaking_ban_until_date,json=rankedMatchmakingBanUntilDate" json:"ranked_matchmaking_ban_until_date,omitempty"`
	RecentGameTime_1                               *uint32             `protobuf:"varint,90,opt,name=recent_game_time_1,json=recentGameTime1" json:"recent_game_time_1,omitempty"`
	RecentGameTime_2                               *uint32             `protobuf:"varint,91,opt,name=recent_game_time_2,json=recentGameTime2" json:"recent_game_time_2,omitempty"`
	RecentGameTime_3                               *uint32             `protobuf:"varint,92,opt,name=recent_game_time_3,json=recentGameTime3" json:"recent_game_time_3,omitempty"`
	GeneralSeasonalRankedRank                      *uint32             `protobuf:"varint,93,opt,name=general_seasonal_ranked_rank,json=generalSeasonalRankedRank" json:"general_seasonal_ranked_rank,omitempty"`
	GeneralSeasonalRankedCalibrationGamesRemaining *uint32             `protobuf:"varint,94,opt,name=general_seasonal_ranked_calibration_games_remaining,json=generalSeasonalRankedCalibrationGamesRemaining" json:"general_seasonal_ranked_calibration_games_remaining,omitempty"`
	GeneralSeasonalRankedGamesPlayed               *uint32             `protobuf:"varint,95,opt,name=general_seasonal_ranked_games_played,json=generalSeasonalRankedGamesPlayed" json:"general_seasonal_ranked_games_played,omitempty"`
	GeneralSeasonalRankedRankPeak                  *uint32             `protobuf:"varint,96,opt,name=general_seasonal_ranked_rank_peak,json=generalSeasonalRankedRankPeak" json:"general_seasonal_ranked_rank_peak,omitempty"`
	GeneralSeasonalRankTransferred                 *bool               `protobuf:"varint,97,opt,name=general_seasonal_rank_transferred,json=generalSeasonalRankTransferred" json:"general_seasonal_rank_transferred,omitempty"`
	SoloSeasonalRankedRank                         *uint32             `protobuf:"varint,98,opt,name=solo_seasonal_ranked_rank,json=soloSeasonalRankedRank" json:"solo_seasonal_ranked_rank,omitempty"`
	SoloSeasonalRankedCalibrationGamesRemaining    *uint32             `protobuf:"varint,99,opt,name=solo_seasonal_ranked_calibration_games_remaining,json=soloSeasonalRankedCalibrationGamesRemaining" json:"solo_seasonal_ranked_calibration_games_remaining,omitempty"`
	SoloSeasonalRankedGamesPlayed                  *uint32             `protobuf:"varint,100,opt,name=solo_seasonal_ranked_games_played,json=soloSeasonalRankedGamesPlayed" json:"solo_seasonal_ranked_games_played,omitempty"`
	SoloSeasonalRankedRankPeak                     *uint32             `protobuf:"varint,101,opt,name=solo_seasonal_ranked_rank_peak,json=soloSeasonalRankedRankPeak" json:"solo_seasonal_ranked_rank_peak,omitempty"`
	SoloSeasonalRankTransferred                    *bool               `protobuf:"varint,102,opt,name=solo_seasonal_rank_transferred,json=soloSeasonalRankTransferred" json:"solo_seasonal_rank_transferred,omitempty"`
	FavoriteTeamPacked                             *uint64             `protobuf:"varint,103,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	RecentReportTime                               *uint32             `protobuf:"varint,104,opt,name=recent_report_time,json=recentReportTime" json:"recent_report_time,omitempty"`
	CustomGameDisabledUntilDate                    *uint32             `protobuf:"varint,105,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	RecentWinTime_1                                *uint32             `protobuf:"varint,106,opt,name=recent_win_time_1,json=recentWinTime1" json:"recent_win_time_1,omitempty"`
	RecentWinTime_2                                *uint32             `protobuf:"varint,107,opt,name=recent_win_time_2,json=recentWinTime2" json:"recent_win_time_2,omitempty"`
	RecentWinTime_3                                *uint32             `protobuf:"varint,108,opt,name=recent_win_time_3,json=recentWinTime3" json:"recent_win_time_3,omitempty"`
	XXX_NoUnkeyedLiteral                           struct{}            `json:"-"`
	XXX_unrecognized                               []byte              `json:"-"`
	XXX_sizecache                                  int32               `json:"-"`
}

func (m *CSODOTAGameAccountClient) Reset()         { *m = CSODOTAGameAccountClient{} }
func (m *CSODOTAGameAccountClient) String() string { return proto.CompactTextString(m) }
func (*CSODOTAGameAccountClient) ProtoMessage()    {}
func (*CSODOTAGameAccountClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{0}
}
func (m *CSODOTAGameAccountClient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAGameAccountClient.Unmarshal(m, b)
}
func (m *CSODOTAGameAccountClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAGameAccountClient.Marshal(b, m, deterministic)
}
func (dst *CSODOTAGameAccountClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAGameAccountClient.Merge(dst, src)
}
func (m *CSODOTAGameAccountClient) XXX_Size() int {
	return xxx_messageInfo_CSODOTAGameAccountClient.Size(m)
}
func (m *CSODOTAGameAccountClient) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAGameAccountClient.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAGameAccountClient proto.InternalMessageInfo

const Default_CSODOTAGameAccountClient_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAGameAccountClient) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetXp() uint32 {
	if m != nil && m.Xp != nil {
		return *m.Xp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetInitialSkill() uint32 {
	if m != nil && m.InitialSkill != nil {
		return *m.InitialSkill
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverCount() uint32 {
	if m != nil && m.LeaverCount != nil {
		return *m.LeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSecondaryLeaverCount() uint32 {
	if m != nil && m.SecondaryLeaverCount != nil {
		return *m.SecondaryLeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityUntilDate() uint32 {
	if m != nil && m.LowPriorityUntilDate != nil {
		return *m.LowPriorityUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventTextChatUntilDate() uint32 {
	if m != nil && m.PreventTextChatUntilDate != nil {
		return *m.PreventTextChatUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventVoiceUntilDate() uint32 {
	if m != nil && m.PreventVoiceUntilDate != nil {
		return *m.PreventVoiceUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventPublicTextChatUntilDate() uint32 {
	if m != nil && m.PreventPublicTextChatUntilDate != nil {
		return *m.PreventPublicTextChatUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastAbandonedGameDate() uint32 {
	if m != nil && m.LastAbandonedGameDate != nil {
		return *m.LastAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastSecondaryAbandonedGameDate() uint32 {
	if m != nil && m.LastSecondaryAbandonedGameDate != nil {
		return *m.LastSecondaryAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverPenaltyCount() uint32 {
	if m != nil && m.LeaverPenaltyCount != nil {
		return *m.LeaverPenaltyCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompletedGameStreak() uint32 {
	if m != nil && m.CompletedGameStreak != nil {
		return *m.CompletedGameStreak
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetTeaching() uint32 {
	if m != nil && m.Teaching != nil {
		return *m.Teaching
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeadership() uint32 {
	if m != nil && m.Leadership != nil {
		return *m.Leadership
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetFriendly() uint32 {
	if m != nil && m.Friendly != nil {
		return *m.Friendly
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetForgiving() uint32 {
	if m != nil && m.Forgiving != nil {
		return *m.Forgiving
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledUntilDate() uint32 {
	if m != nil && m.AccountDisabledUntilDate != nil {
		return *m.AccountDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledCount() uint32 {
	if m != nil && m.AccountDisabledCount != nil {
		return *m.AccountDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledCount() uint32 {
	if m != nil && m.MatchDisabledCount != nil {
		return *m.MatchDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CSODOTAGameAccountClient_PartnerAccountType
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountState() uint32 {
	if m != nil && m.PartnerAccountState != nil {
		return *m.PartnerAccountState
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetShutdownlawterminatetimestamp() uint32 {
	if m != nil && m.Shutdownlawterminatetimestamp != nil {
		return *m.Shutdownlawterminatetimestamp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveRank() uint32 {
	if m != nil && m.CompetitiveRank != nil {
		return *m.CompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCalibrationGamesRemaining() uint32 {
	if m != nil && m.CalibrationGamesRemaining != nil {
		return *m.CalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveRank() uint32 {
	if m != nil && m.SoloCompetitiveRank != nil {
		return *m.SoloCompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCalibrationGamesRemaining() uint32 {
	if m != nil && m.SoloCalibrationGamesRemaining != nil {
		return *m.SoloCalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecruitmentLevel() uint32 {
	if m != nil && m.RecruitmentLevel != nil {
		return *m.RecruitmentLevel
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetHasNewNotifications() bool {
	if m != nil && m.HasNewNotifications != nil {
		return *m.HasNewNotifications
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetIsLeagueAdmin() bool {
	if m != nil && m.IsLeagueAdmin != nil {
		return *m.IsLeagueAdmin
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetCasualGamesPlayed() uint32 {
	if m != nil && m.CasualGamesPlayed != nil {
		return *m.CasualGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveGamesPlayed() uint32 {
	if m != nil && m.SoloCompetitiveGamesPlayed != nil {
		return *m.SoloCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartyCompetitiveGamesPlayed() uint32 {
	if m != nil && m.PartyCompetitiveGamesPlayed != nil {
		return *m.PartyCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCasual_1V1GamesPlayed() uint32 {
	if m != nil && m.Casual_1V1GamesPlayed != nil {
		return *m.Casual_1V1GamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveTeamGamesPlayed() uint32 {
	if m != nil && m.CompetitiveTeamGamesPlayed != nil {
		return *m.CompetitiveTeamGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCurrAllHeroChallengeId() uint32 {
	if m != nil && m.CurrAllHeroChallengeId != nil {
		return *m.CurrAllHeroChallengeId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayTimePoints() uint32 {
	if m != nil && m.PlayTimePoints != nil {
		return *m.PlayTimePoints
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayTimeLevel() uint32 {
	if m != nil && m.PlayTimeLevel != nil {
		return *m.PlayTimeLevel
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayerBehaviorSeqNumLastReport() uint32 {
	if m != nil && m.PlayerBehaviorSeqNumLastReport != nil {
		return *m.PlayerBehaviorSeqNumLastReport
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayerBehaviorScoreLastReport() uint32 {
	if m != nil && m.PlayerBehaviorScoreLastReport != nil {
		return *m.PlayerBehaviorScoreLastReport
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPlayerBehaviorReportOldData() bool {
	if m != nil && m.PlayerBehaviorReportOldData != nil {
		return *m.PlayerBehaviorReportOldData
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetTourneyRecentParticipationDate() uint32 {
	if m != nil && m.TourneyRecentParticipationDate != nil {
		return *m.TourneyRecentParticipationDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetFavoriteTeam() uint32 {
	if m != nil && m.FavoriteTeam != nil {
		return *m.FavoriteTeam
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAnchoredPhoneNumberId() uint64 {
	if m != nil && m.AnchoredPhoneNumberId != nil {
		return *m.AnchoredPhoneNumberId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRankedMatchmakingBanUntilDate() uint32 {
	if m != nil && m.RankedMatchmakingBanUntilDate != nil {
		return *m.RankedMatchmakingBanUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentGameTime_1() uint32 {
	if m != nil && m.RecentGameTime_1 != nil {
		return *m.RecentGameTime_1
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentGameTime_2() uint32 {
	if m != nil && m.RecentGameTime_2 != nil {
		return *m.RecentGameTime_2
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentGameTime_3() uint32 {
	if m != nil && m.RecentGameTime_3 != nil {
		return *m.RecentGameTime_3
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetGeneralSeasonalRankedRank() uint32 {
	if m != nil && m.GeneralSeasonalRankedRank != nil {
		return *m.GeneralSeasonalRankedRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetGeneralSeasonalRankedCalibrationGamesRemaining() uint32 {
	if m != nil && m.GeneralSeasonalRankedCalibrationGamesRemaining != nil {
		return *m.GeneralSeasonalRankedCalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetGeneralSeasonalRankedGamesPlayed() uint32 {
	if m != nil && m.GeneralSeasonalRankedGamesPlayed != nil {
		return *m.GeneralSeasonalRankedGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetGeneralSeasonalRankedRankPeak() uint32 {
	if m != nil && m.GeneralSeasonalRankedRankPeak != nil {
		return *m.GeneralSeasonalRankedRankPeak
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetGeneralSeasonalRankTransferred() bool {
	if m != nil && m.GeneralSeasonalRankTransferred != nil {
		return *m.GeneralSeasonalRankTransferred
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetSoloSeasonalRankedRank() uint32 {
	if m != nil && m.SoloSeasonalRankedRank != nil {
		return *m.SoloSeasonalRankedRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloSeasonalRankedCalibrationGamesRemaining() uint32 {
	if m != nil && m.SoloSeasonalRankedCalibrationGamesRemaining != nil {
		return *m.SoloSeasonalRankedCalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloSeasonalRankedGamesPlayed() uint32 {
	if m != nil && m.SoloSeasonalRankedGamesPlayed != nil {
		return *m.SoloSeasonalRankedGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloSeasonalRankedRankPeak() uint32 {
	if m != nil && m.SoloSeasonalRankedRankPeak != nil {
		return *m.SoloSeasonalRankedRankPeak
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloSeasonalRankTransferred() bool {
	if m != nil && m.SoloSeasonalRankTransferred != nil {
		return *m.SoloSeasonalRankTransferred
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetFavoriteTeamPacked() uint64 {
	if m != nil && m.FavoriteTeamPacked != nil {
		return *m.FavoriteTeamPacked
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentReportTime() uint32 {
	if m != nil && m.RecentReportTime != nil {
		return *m.RecentReportTime
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCustomGameDisabledUntilDate() uint32 {
	if m != nil && m.CustomGameDisabledUntilDate != nil {
		return *m.CustomGameDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentWinTime_1() uint32 {
	if m != nil && m.RecentWinTime_1 != nil {
		return *m.RecentWinTime_1
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentWinTime_2() uint32 {
	if m != nil && m.RecentWinTime_2 != nil {
		return *m.RecentWinTime_2
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecentWinTime_3() uint32 {
	if m != nil && m.RecentWinTime_3 != nil {
		return *m.RecentWinTime_3
	}
	return 0
}

type CSODOTAGameAccountPlus struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	OriginalStartDate    *uint32  `protobuf:"varint,2,opt,name=original_start_date,json=originalStartDate" json:"original_start_date,omitempty"`
	PlusFlags            *uint32  `protobuf:"varint,3,opt,name=plus_flags,json=plusFlags" json:"plus_flags,omitempty"`
	PlusStatus           *uint32  `protobuf:"varint,4,opt,name=plus_status,json=plusStatus" json:"plus_status,omitempty"`
	PrepaidTimeStart     *uint32  `protobuf:"varint,5,opt,name=prepaid_time_start,json=prepaidTimeStart" json:"prepaid_time_start,omitempty"`
	PrepaidTimeBalance   *uint32  `protobuf:"varint,6,opt,name=prepaid_time_balance,json=prepaidTimeBalance" json:"prepaid_time_balance,omitempty"`
	NextPaymentDate      *uint32  `protobuf:"fixed32,7,opt,name=next_payment_date,json=nextPaymentDate" json:"next_payment_date,omitempty"`
	SteamAgreementId     *uint64  `protobuf:"fixed64,8,opt,name=steam_agreement_id,json=steamAgreementId" json:"steam_agreement_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAGameAccountPlus) Reset()         { *m = CSODOTAGameAccountPlus{} }
func (m *CSODOTAGameAccountPlus) String() string { return proto.CompactTextString(m) }
func (*CSODOTAGameAccountPlus) ProtoMessage()    {}
func (*CSODOTAGameAccountPlus) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{1}
}
func (m *CSODOTAGameAccountPlus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAGameAccountPlus.Unmarshal(m, b)
}
func (m *CSODOTAGameAccountPlus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAGameAccountPlus.Marshal(b, m, deterministic)
}
func (dst *CSODOTAGameAccountPlus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAGameAccountPlus.Merge(dst, src)
}
func (m *CSODOTAGameAccountPlus) XXX_Size() int {
	return xxx_messageInfo_CSODOTAGameAccountPlus.Size(m)
}
func (m *CSODOTAGameAccountPlus) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAGameAccountPlus.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAGameAccountPlus proto.InternalMessageInfo

func (m *CSODOTAGameAccountPlus) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetOriginalStartDate() uint32 {
	if m != nil && m.OriginalStartDate != nil {
		return *m.OriginalStartDate
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetPlusFlags() uint32 {
	if m != nil && m.PlusFlags != nil {
		return *m.PlusFlags
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetPlusStatus() uint32 {
	if m != nil && m.PlusStatus != nil {
		return *m.PlusStatus
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetPrepaidTimeStart() uint32 {
	if m != nil && m.PrepaidTimeStart != nil {
		return *m.PrepaidTimeStart
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetPrepaidTimeBalance() uint32 {
	if m != nil && m.PrepaidTimeBalance != nil {
		return *m.PrepaidTimeBalance
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetNextPaymentDate() uint32 {
	if m != nil && m.NextPaymentDate != nil {
		return *m.NextPaymentDate
	}
	return 0
}

func (m *CSODOTAGameAccountPlus) GetSteamAgreementId() uint64 {
	if m != nil && m.SteamAgreementId != nil {
		return *m.SteamAgreementId
	}
	return 0
}

type CMsgLobbyPlayerPlusSubscriptionData struct {
	HeroBadges           []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge `protobuf:"bytes,1,rep,name=hero_badges,json=heroBadges" json:"hero_badges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *CMsgLobbyPlayerPlusSubscriptionData) Reset()         { *m = CMsgLobbyPlayerPlusSubscriptionData{} }
func (m *CMsgLobbyPlayerPlusSubscriptionData) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyPlayerPlusSubscriptionData) ProtoMessage()    {}
func (*CMsgLobbyPlayerPlusSubscriptionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{2}
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Unmarshal(m, b)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyPlayerPlusSubscriptionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Merge(dst, src)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Size(m)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData proto.InternalMessageInfo

func (m *CMsgLobbyPlayerPlusSubscriptionData) GetHeroBadges() []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge {
	if m != nil {
		return m.HeroBadges
	}
	return nil
}

type CMsgLobbyPlayerPlusSubscriptionData_HeroBadge struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroBadgeXp          *uint32  `protobuf:"varint,2,opt,name=hero_badge_xp,json=heroBadgeXp" json:"hero_badge_xp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Reset() {
	*m = CMsgLobbyPlayerPlusSubscriptionData_HeroBadge{}
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoMessage() {}
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{2, 0}
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Unmarshal(m, b)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Merge(dst, src)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Size(m)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge proto.InternalMessageInfo

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroBadgeXp() uint32 {
	if m != nil && m.HeroBadgeXp != nil {
		return *m.HeroBadgeXp
	}
	return 0
}

type CMsgLobbyEventPoints struct {
	EventId              *uint32                               `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountPoints        []*CMsgLobbyEventPoints_AccountPoints `protobuf:"bytes,2,rep,name=account_points,json=accountPoints" json:"account_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CMsgLobbyEventPoints) Reset()         { *m = CMsgLobbyEventPoints{} }
func (m *CMsgLobbyEventPoints) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints) ProtoMessage()    {}
func (*CMsgLobbyEventPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{3}
}
func (m *CMsgLobbyEventPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyEventPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints.Merge(dst, src)
}
func (m *CMsgLobbyEventPoints) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints.Size(m)
}
func (m *CMsgLobbyEventPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgLobbyEventPoints) GetAccountPoints() []*CMsgLobbyEventPoints_AccountPoints {
	if m != nil {
		return m.AccountPoints
	}
	return nil
}

type CMsgLobbyEventPoints_ChatWheelMessageRange struct {
	MessageIdStart       *uint32  `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart" json:"message_id_start,omitempty"`
	MessageIdEnd         *uint32  `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd" json:"message_id_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) Reset() {
	*m = CMsgLobbyEventPoints_ChatWheelMessageRange{}
}
func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyEventPoints_ChatWheelMessageRange) ProtoMessage() {}
func (*CMsgLobbyEventPoints_ChatWheelMessageRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{3, 0}
}
func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyEventPoints_ChatWheelMessageRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange.Merge(dst, src)
}
func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange.Size(m)
}
func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_ChatWheelMessageRange proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) GetMessageIdStart() uint32 {
	if m != nil && m.MessageIdStart != nil {
		return *m.MessageIdStart
	}
	return 0
}

func (m *CMsgLobbyEventPoints_ChatWheelMessageRange) GetMessageIdEnd() uint32 {
	if m != nil && m.MessageIdEnd != nil {
		return *m.MessageIdEnd
	}
	return 0
}

type CMsgLobbyEventPoints_PeriodicResourceValues struct {
	Remaining            *uint32  `protobuf:"varint,1,opt,name=remaining" json:"remaining,omitempty"`
	Max                  *uint32  `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventPoints_PeriodicResourceValues) Reset() {
	*m = CMsgLobbyEventPoints_PeriodicResourceValues{}
}
func (m *CMsgLobbyEventPoints_PeriodicResourceValues) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyEventPoints_PeriodicResourceValues) ProtoMessage() {}
func (*CMsgLobbyEventPoints_PeriodicResourceValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{3, 1}
}
func (m *CMsgLobbyEventPoints_PeriodicResourceValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyEventPoints_PeriodicResourceValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues.Merge(dst, src)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceValues) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues.Size(m)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceValues) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceValues proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_PeriodicResourceValues) GetRemaining() uint32 {
	if m != nil && m.Remaining != nil {
		return *m.Remaining
	}
	return 0
}

func (m *CMsgLobbyEventPoints_PeriodicResourceValues) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

type CMsgLobbyEventPoints_AccountPoints struct {
	AccountId                      *uint32                                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NormalPoints                   *uint32                                       `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	PremiumPoints                  *uint32                                       `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	Owned                          *bool                                         `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	FavoriteTeam                   *uint32                                       `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamLevel              *uint32                                       `protobuf:"varint,6,opt,name=favorite_team_level,json=favoriteTeamLevel" json:"favorite_team_level,omitempty"`
	PointsHeld                     *uint32                                       `protobuf:"varint,7,opt,name=points_held,json=pointsHeld" json:"points_held,omitempty"`
	PremiumPointsHeld              *uint32                                       `protobuf:"varint,8,opt,name=premium_points_held,json=premiumPointsHeld" json:"premium_points_held,omitempty"`
	FavoriteTeamFoilLevel          *uint32                                       `protobuf:"varint,9,opt,name=favorite_team_foil_level,json=favoriteTeamFoilLevel" json:"favorite_team_foil_level,omitempty"`
	ActiveEffectsMask              *uint64                                       `protobuf:"varint,12,opt,name=active_effects_mask,json=activeEffectsMask" json:"active_effects_mask,omitempty"`
	UnlockedChatWheelMessageRanges []*CMsgLobbyEventPoints_ChatWheelMessageRange `protobuf:"bytes,13,rep,name=unlocked_chat_wheel_message_ranges,json=unlockedChatWheelMessageRanges" json:"unlocked_chat_wheel_message_ranges,omitempty"`
	PlusSubscriptionData           *CMsgLobbyPlayerPlusSubscriptionData          `protobuf:"bytes,16,opt,name=plus_subscription_data,json=plusSubscriptionData" json:"plus_subscription_data,omitempty"`
	WagerTokens                    *CMsgLobbyEventPoints_PeriodicResourceValues  `protobuf:"bytes,17,opt,name=wager_tokens,json=wagerTokens" json:"wager_tokens,omitempty"`
	RankWagerTokens                *CMsgLobbyEventPoints_PeriodicResourceValues  `protobuf:"bytes,18,opt,name=rank_wager_tokens,json=rankWagerTokens" json:"rank_wager_tokens,omitempty"`
	TipTokens                      *CMsgLobbyEventPoints_PeriodicResourceValues  `protobuf:"bytes,19,opt,name=tip_tokens,json=tipTokens" json:"tip_tokens,omitempty"`
	TipAmount                      *uint32                                       `protobuf:"varint,20,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                                      `json:"-"`
	XXX_unrecognized               []byte                                        `json:"-"`
	XXX_sizecache                  int32                                         `json:"-"`
}

func (m *CMsgLobbyEventPoints_AccountPoints) Reset()         { *m = CMsgLobbyEventPoints_AccountPoints{} }
func (m *CMsgLobbyEventPoints_AccountPoints) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints_AccountPoints) ProtoMessage()    {}
func (*CMsgLobbyEventPoints_AccountPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{3, 2}
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyEventPoints_AccountPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Merge(dst, src)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Size(m)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_AccountPoints) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetNormalPoints() uint32 {
	if m != nil && m.NormalPoints != nil {
		return *m.NormalPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPremiumPoints() uint32 {
	if m != nil && m.PremiumPoints != nil {
		return *m.PremiumPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetOwned() bool {
	if m != nil && m.Owned != nil {
		return *m.Owned
	}
	return false
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeam() uint32 {
	if m != nil && m.FavoriteTeam != nil {
		return *m.FavoriteTeam
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamLevel() uint32 {
	if m != nil && m.FavoriteTeamLevel != nil {
		return *m.FavoriteTeamLevel
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPointsHeld() uint32 {
	if m != nil && m.PointsHeld != nil {
		return *m.PointsHeld
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPremiumPointsHeld() uint32 {
	if m != nil && m.PremiumPointsHeld != nil {
		return *m.PremiumPointsHeld
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetFavoriteTeamFoilLevel() uint32 {
	if m != nil && m.FavoriteTeamFoilLevel != nil {
		return *m.FavoriteTeamFoilLevel
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetActiveEffectsMask() uint64 {
	if m != nil && m.ActiveEffectsMask != nil {
		return *m.ActiveEffectsMask
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetUnlockedChatWheelMessageRanges() []*CMsgLobbyEventPoints_ChatWheelMessageRange {
	if m != nil {
		return m.UnlockedChatWheelMessageRanges
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPlusSubscriptionData() *CMsgLobbyPlayerPlusSubscriptionData {
	if m != nil {
		return m.PlusSubscriptionData
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetWagerTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if m != nil {
		return m.WagerTokens
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetRankWagerTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if m != nil {
		return m.RankWagerTokens
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetTipTokens() *CMsgLobbyEventPoints_PeriodicResourceValues {
	if m != nil {
		return m.TipTokens
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetTipAmount() uint32 {
	if m != nil && m.TipAmount != nil {
		return *m.TipAmount
	}
	return 0
}

type CMsgLocalServerFakeLobbyData struct {
	AccountId            *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventPoints          []*CMsgLobbyEventPoints `protobuf:"bytes,2,rep,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	IsPlusSubscriber     *bool                   `protobuf:"varint,3,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PrimaryEventId       *uint32                 `protobuf:"varint,4,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	FavoriteTeam         *uint32                 `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamQuality  *uint32                 `protobuf:"varint,6,opt,name=favorite_team_quality,json=favoriteTeamQuality" json:"favorite_team_quality,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CMsgLocalServerFakeLobbyData) Reset()         { *m = CMsgLocalServerFakeLobbyData{} }
func (m *CMsgLocalServerFakeLobbyData) String() string { return proto.CompactTextString(m) }
func (*CMsgLocalServerFakeLobbyData) ProtoMessage()    {}
func (*CMsgLocalServerFakeLobbyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{4}
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Unmarshal(m, b)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Marshal(b, m, deterministic)
}
func (dst *CMsgLocalServerFakeLobbyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLocalServerFakeLobbyData.Merge(dst, src)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Size() int {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Size(m)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLocalServerFakeLobbyData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLocalServerFakeLobbyData proto.InternalMessageInfo

func (m *CMsgLocalServerFakeLobbyData) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetEventPoints() []*CMsgLobbyEventPoints {
	if m != nil {
		return m.EventPoints
	}
	return nil
}

func (m *CMsgLocalServerFakeLobbyData) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CMsgLocalServerFakeLobbyData) GetPrimaryEventId() uint32 {
	if m != nil && m.PrimaryEventId != nil {
		return *m.PrimaryEventId
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetFavoriteTeam() uint32 {
	if m != nil && m.FavoriteTeam != nil {
		return *m.FavoriteTeam
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetFavoriteTeamQuality() uint32 {
	if m != nil && m.FavoriteTeamQuality != nil {
		return *m.FavoriteTeamQuality
	}
	return 0
}

type CMsgBattleCupVictory struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	WinDate              *uint32  `protobuf:"varint,2,opt,name=win_date,json=winDate" json:"win_date,omitempty"`
	ValidUntil           *uint32  `protobuf:"varint,3,opt,name=valid_until,json=validUntil" json:"valid_until,omitempty"`
	SkillLevel           *uint32  `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TournamentId         *uint32  `protobuf:"varint,5,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	DivisionId           *uint32  `protobuf:"varint,6,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	TeamId               *uint32  `protobuf:"varint,7,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Streak               *uint32  `protobuf:"varint,8,opt,name=streak" json:"streak,omitempty"`
	TrophyId             *uint32  `protobuf:"varint,9,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgBattleCupVictory) Reset()         { *m = CMsgBattleCupVictory{} }
func (m *CMsgBattleCupVictory) String() string { return proto.CompactTextString(m) }
func (*CMsgBattleCupVictory) ProtoMessage()    {}
func (*CMsgBattleCupVictory) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{5}
}
func (m *CMsgBattleCupVictory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgBattleCupVictory.Unmarshal(m, b)
}
func (m *CMsgBattleCupVictory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgBattleCupVictory.Marshal(b, m, deterministic)
}
func (dst *CMsgBattleCupVictory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgBattleCupVictory.Merge(dst, src)
}
func (m *CMsgBattleCupVictory) XXX_Size() int {
	return xxx_messageInfo_CMsgBattleCupVictory.Size(m)
}
func (m *CMsgBattleCupVictory) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgBattleCupVictory.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgBattleCupVictory proto.InternalMessageInfo

func (m *CMsgBattleCupVictory) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetWinDate() uint32 {
	if m != nil && m.WinDate != nil {
		return *m.WinDate
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetValidUntil() uint32 {
	if m != nil && m.ValidUntil != nil {
		return *m.ValidUntil
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetStreak() uint32 {
	if m != nil && m.Streak != nil {
		return *m.Streak
	}
	return 0
}

func (m *CMsgBattleCupVictory) GetTrophyId() uint32 {
	if m != nil && m.TrophyId != nil {
		return *m.TrophyId
	}
	return 0
}

type CMsgLobbyBattleCupVictoryList struct {
	Winners              []*CMsgBattleCupVictory `protobuf:"bytes,1,rep,name=winners" json:"winners,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CMsgLobbyBattleCupVictoryList) Reset()         { *m = CMsgLobbyBattleCupVictoryList{} }
func (m *CMsgLobbyBattleCupVictoryList) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyBattleCupVictoryList) ProtoMessage()    {}
func (*CMsgLobbyBattleCupVictoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{6}
}
func (m *CMsgLobbyBattleCupVictoryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyBattleCupVictoryList.Unmarshal(m, b)
}
func (m *CMsgLobbyBattleCupVictoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyBattleCupVictoryList.Marshal(b, m, deterministic)
}
func (dst *CMsgLobbyBattleCupVictoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyBattleCupVictoryList.Merge(dst, src)
}
func (m *CMsgLobbyBattleCupVictoryList) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyBattleCupVictoryList.Size(m)
}
func (m *CMsgLobbyBattleCupVictoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyBattleCupVictoryList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyBattleCupVictoryList proto.InternalMessageInfo

func (m *CMsgLobbyBattleCupVictoryList) GetWinners() []*CMsgBattleCupVictory {
	if m != nil {
		return m.Winners
	}
	return nil
}

type CMsgDOTABroadcastNotification struct {
	Message              *string  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTABroadcastNotification) Reset()         { *m = CMsgDOTABroadcastNotification{} }
func (m *CMsgDOTABroadcastNotification) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABroadcastNotification) ProtoMessage()    {}
func (*CMsgDOTABroadcastNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{7}
}
func (m *CMsgDOTABroadcastNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABroadcastNotification.Unmarshal(m, b)
}
func (m *CMsgDOTABroadcastNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABroadcastNotification.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABroadcastNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABroadcastNotification.Merge(dst, src)
}
func (m *CMsgDOTABroadcastNotification) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABroadcastNotification.Size(m)
}
func (m *CMsgDOTABroadcastNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABroadcastNotification.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABroadcastNotification proto.InternalMessageInfo

func (m *CMsgDOTABroadcastNotification) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CProtoItemHeroStatue struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatusEffectIndex    *uint32  `protobuf:"varint,2,opt,name=status_effect_index,json=statusEffectIndex" json:"status_effect_index,omitempty"`
	SequenceName         *string  `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName" json:"sequence_name,omitempty"`
	Cycle                *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable             []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription          *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style                []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
	TournamentDrop       *bool    `protobuf:"varint,8,opt,name=tournament_drop,json=tournamentDrop" json:"tournament_drop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CProtoItemHeroStatue) Reset()         { *m = CProtoItemHeroStatue{} }
func (m *CProtoItemHeroStatue) String() string { return proto.CompactTextString(m) }
func (*CProtoItemHeroStatue) ProtoMessage()    {}
func (*CProtoItemHeroStatue) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{8}
}
func (m *CProtoItemHeroStatue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CProtoItemHeroStatue.Unmarshal(m, b)
}
func (m *CProtoItemHeroStatue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CProtoItemHeroStatue.Marshal(b, m, deterministic)
}
func (dst *CProtoItemHeroStatue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CProtoItemHeroStatue.Merge(dst, src)
}
func (m *CProtoItemHeroStatue) XXX_Size() int {
	return xxx_messageInfo_CProtoItemHeroStatue.Size(m)
}
func (m *CProtoItemHeroStatue) XXX_DiscardUnknown() {
	xxx_messageInfo_CProtoItemHeroStatue.DiscardUnknown(m)
}

var xxx_messageInfo_CProtoItemHeroStatue proto.InternalMessageInfo

func (m *CProtoItemHeroStatue) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetStatusEffectIndex() uint32 {
	if m != nil && m.StatusEffectIndex != nil {
		return *m.StatusEffectIndex
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetSequenceName() string {
	if m != nil && m.SequenceName != nil {
		return *m.SequenceName
	}
	return ""
}

func (m *CProtoItemHeroStatue) GetCycle() float32 {
	if m != nil && m.Cycle != nil {
		return *m.Cycle
	}
	return 0
}

func (m *CProtoItemHeroStatue) GetWearable() []uint32 {
	if m != nil {
		return m.Wearable
	}
	return nil
}

func (m *CProtoItemHeroStatue) GetInscription() string {
	if m != nil && m.Inscription != nil {
		return *m.Inscription
	}
	return ""
}

func (m *CProtoItemHeroStatue) GetStyle() []uint32 {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *CProtoItemHeroStatue) GetTournamentDrop() bool {
	if m != nil && m.TournamentDrop != nil {
		return *m.TournamentDrop
	}
	return false
}

type CProtoItemTeamShowcase struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	StatusEffectIndex    *uint32  `protobuf:"varint,2,opt,name=status_effect_index,json=statusEffectIndex" json:"status_effect_index,omitempty"`
	SequenceName         *string  `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName" json:"sequence_name,omitempty"`
	Cycle                *float32 `protobuf:"fixed32,4,opt,name=cycle" json:"cycle,omitempty"`
	Wearable             []uint32 `protobuf:"varint,5,rep,name=wearable" json:"wearable,omitempty"`
	Inscription          *string  `protobuf:"bytes,6,opt,name=inscription" json:"inscription,omitempty"`
	Style                []uint32 `protobuf:"varint,7,rep,name=style" json:"style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CProtoItemTeamShowcase) Reset()         { *m = CProtoItemTeamShowcase{} }
func (m *CProtoItemTeamShowcase) String() string { return proto.CompactTextString(m) }
func (*CProtoItemTeamShowcase) ProtoMessage()    {}
func (*CProtoItemTeamShowcase) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{9}
}
func (m *CProtoItemTeamShowcase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CProtoItemTeamShowcase.Unmarshal(m, b)
}
func (m *CProtoItemTeamShowcase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CProtoItemTeamShowcase.Marshal(b, m, deterministic)
}
func (dst *CProtoItemTeamShowcase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CProtoItemTeamShowcase.Merge(dst, src)
}
func (m *CProtoItemTeamShowcase) XXX_Size() int {
	return xxx_messageInfo_CProtoItemTeamShowcase.Size(m)
}
func (m *CProtoItemTeamShowcase) XXX_DiscardUnknown() {
	xxx_messageInfo_CProtoItemTeamShowcase.DiscardUnknown(m)
}

var xxx_messageInfo_CProtoItemTeamShowcase proto.InternalMessageInfo

func (m *CProtoItemTeamShowcase) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetStatusEffectIndex() uint32 {
	if m != nil && m.StatusEffectIndex != nil {
		return *m.StatusEffectIndex
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetSequenceName() string {
	if m != nil && m.SequenceName != nil {
		return *m.SequenceName
	}
	return ""
}

func (m *CProtoItemTeamShowcase) GetCycle() float32 {
	if m != nil && m.Cycle != nil {
		return *m.Cycle
	}
	return 0
}

func (m *CProtoItemTeamShowcase) GetWearable() []uint32 {
	if m != nil {
		return m.Wearable
	}
	return nil
}

func (m *CProtoItemTeamShowcase) GetInscription() string {
	if m != nil && m.Inscription != nil {
		return *m.Inscription
	}
	return ""
}

func (m *CProtoItemTeamShowcase) GetStyle() []uint32 {
	if m != nil {
		return m.Style
	}
	return nil
}

type CMatchPlayerAbilityUpgrade struct {
	Ability              *uint32  `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time                 *uint32  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMatchPlayerAbilityUpgrade) Reset()         { *m = CMatchPlayerAbilityUpgrade{} }
func (m *CMatchPlayerAbilityUpgrade) String() string { return proto.CompactTextString(m) }
func (*CMatchPlayerAbilityUpgrade) ProtoMessage()    {}
func (*CMatchPlayerAbilityUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{10}
}
func (m *CMatchPlayerAbilityUpgrade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMatchPlayerAbilityUpgrade.Unmarshal(m, b)
}
func (m *CMatchPlayerAbilityUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMatchPlayerAbilityUpgrade.Marshal(b, m, deterministic)
}
func (dst *CMatchPlayerAbilityUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMatchPlayerAbilityUpgrade.Merge(dst, src)
}
func (m *CMatchPlayerAbilityUpgrade) XXX_Size() int {
	return xxx_messageInfo_CMatchPlayerAbilityUpgrade.Size(m)
}
func (m *CMatchPlayerAbilityUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_CMatchPlayerAbilityUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_CMatchPlayerAbilityUpgrade proto.InternalMessageInfo

func (m *CMatchPlayerAbilityUpgrade) GetAbility() uint32 {
	if m != nil && m.Ability != nil {
		return *m.Ability
	}
	return 0
}

func (m *CMatchPlayerAbilityUpgrade) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CMatchPlayerTimedStats struct {
	Time                 *uint32  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Kills                *uint32  `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32  `protobuf:"varint,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32  `protobuf:"varint,4,opt,name=assists" json:"assists,omitempty"`
	NetWorth             *uint32  `protobuf:"varint,5,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	LastHits             *uint32  `protobuf:"varint,6,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies               *uint32  `protobuf:"varint,7,opt,name=denies" json:"denies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMatchPlayerTimedStats) Reset()         { *m = CMatchPlayerTimedStats{} }
func (m *CMatchPlayerTimedStats) String() string { return proto.CompactTextString(m) }
func (*CMatchPlayerTimedStats) ProtoMessage()    {}
func (*CMatchPlayerTimedStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{11}
}
func (m *CMatchPlayerTimedStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMatchPlayerTimedStats.Unmarshal(m, b)
}
func (m *CMatchPlayerTimedStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMatchPlayerTimedStats.Marshal(b, m, deterministic)
}
func (dst *CMatchPlayerTimedStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMatchPlayerTimedStats.Merge(dst, src)
}
func (m *CMatchPlayerTimedStats) XXX_Size() int {
	return xxx_messageInfo_CMatchPlayerTimedStats.Size(m)
}
func (m *CMatchPlayerTimedStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMatchPlayerTimedStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMatchPlayerTimedStats proto.InternalMessageInfo

func (m *CMatchPlayerTimedStats) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetLastHits() uint32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMatchPlayerTimedStats) GetDenies() uint32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

type CMatchAdditionalUnitInventory struct {
	UnitName             *string  `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	Items                []uint32 `protobuf:"varint,2,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMatchAdditionalUnitInventory) Reset()         { *m = CMatchAdditionalUnitInventory{} }
func (m *CMatchAdditionalUnitInventory) String() string { return proto.CompactTextString(m) }
func (*CMatchAdditionalUnitInventory) ProtoMessage()    {}
func (*CMatchAdditionalUnitInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{12}
}
func (m *CMatchAdditionalUnitInventory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMatchAdditionalUnitInventory.Unmarshal(m, b)
}
func (m *CMatchAdditionalUnitInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMatchAdditionalUnitInventory.Marshal(b, m, deterministic)
}
func (dst *CMatchAdditionalUnitInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMatchAdditionalUnitInventory.Merge(dst, src)
}
func (m *CMatchAdditionalUnitInventory) XXX_Size() int {
	return xxx_messageInfo_CMatchAdditionalUnitInventory.Size(m)
}
func (m *CMatchAdditionalUnitInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_CMatchAdditionalUnitInventory.DiscardUnknown(m)
}

var xxx_messageInfo_CMatchAdditionalUnitInventory proto.InternalMessageInfo

func (m *CMatchAdditionalUnitInventory) GetUnitName() string {
	if m != nil && m.UnitName != nil {
		return *m.UnitName
	}
	return ""
}

func (m *CMatchAdditionalUnitInventory) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type CMatchPlayerPermanentBuff struct {
	PermanentBuff        *uint32  `protobuf:"varint,1,opt,name=permanent_buff,json=permanentBuff" json:"permanent_buff,omitempty"`
	StackCount           *uint32  `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMatchPlayerPermanentBuff) Reset()         { *m = CMatchPlayerPermanentBuff{} }
func (m *CMatchPlayerPermanentBuff) String() string { return proto.CompactTextString(m) }
func (*CMatchPlayerPermanentBuff) ProtoMessage()    {}
func (*CMatchPlayerPermanentBuff) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{13}
}
func (m *CMatchPlayerPermanentBuff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMatchPlayerPermanentBuff.Unmarshal(m, b)
}
func (m *CMatchPlayerPermanentBuff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMatchPlayerPermanentBuff.Marshal(b, m, deterministic)
}
func (dst *CMatchPlayerPermanentBuff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMatchPlayerPermanentBuff.Merge(dst, src)
}
func (m *CMatchPlayerPermanentBuff) XXX_Size() int {
	return xxx_messageInfo_CMatchPlayerPermanentBuff.Size(m)
}
func (m *CMatchPlayerPermanentBuff) XXX_DiscardUnknown() {
	xxx_messageInfo_CMatchPlayerPermanentBuff.DiscardUnknown(m)
}

var xxx_messageInfo_CMatchPlayerPermanentBuff proto.InternalMessageInfo

func (m *CMatchPlayerPermanentBuff) GetPermanentBuff() uint32 {
	if m != nil && m.PermanentBuff != nil {
		return *m.PermanentBuff
	}
	return 0
}

func (m *CMatchPlayerPermanentBuff) GetStackCount() uint32 {
	if m != nil && m.StackCount != nil {
		return *m.StackCount
	}
	return 0
}

type CMatchHeroSelectEvent struct {
	IsPick               *bool    `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team                 *uint32  `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId               *uint32  `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMatchHeroSelectEvent) Reset()         { *m = CMatchHeroSelectEvent{} }
func (m *CMatchHeroSelectEvent) String() string { return proto.CompactTextString(m) }
func (*CMatchHeroSelectEvent) ProtoMessage()    {}
func (*CMatchHeroSelectEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{14}
}
func (m *CMatchHeroSelectEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMatchHeroSelectEvent.Unmarshal(m, b)
}
func (m *CMatchHeroSelectEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMatchHeroSelectEvent.Marshal(b, m, deterministic)
}
func (dst *CMatchHeroSelectEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMatchHeroSelectEvent.Merge(dst, src)
}
func (m *CMatchHeroSelectEvent) XXX_Size() int {
	return xxx_messageInfo_CMatchHeroSelectEvent.Size(m)
}
func (m *CMatchHeroSelectEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CMatchHeroSelectEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CMatchHeroSelectEvent proto.InternalMessageInfo

func (m *CMatchHeroSelectEvent) GetIsPick() bool {
	if m != nil && m.IsPick != nil {
		return *m.IsPick
	}
	return false
}

func (m *CMatchHeroSelectEvent) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMatchHeroSelectEvent) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

type CMsgDOTAProcessFantasyScheduledEvent struct {
	Event                *uint32  `protobuf:"varint,1,opt,name=event" json:"event,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	FantasyLeagueId      *uint32  `protobuf:"varint,3,opt,name=fantasy_league_id,json=fantasyLeagueId" json:"fantasy_league_id,omitempty"`
	Season               *uint32  `protobuf:"varint,4,opt,name=season" json:"season,omitempty"`
	ReferenceData        *uint32  `protobuf:"varint,5,opt,name=reference_data,json=referenceData" json:"reference_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) Reset()         { *m = CMsgDOTAProcessFantasyScheduledEvent{} }
func (m *CMsgDOTAProcessFantasyScheduledEvent) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProcessFantasyScheduledEvent) ProtoMessage()    {}
func (*CMsgDOTAProcessFantasyScheduledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{15}
}
func (m *CMsgDOTAProcessFantasyScheduledEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent.Unmarshal(m, b)
}
func (m *CMsgDOTAProcessFantasyScheduledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProcessFantasyScheduledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent.Merge(dst, src)
}
func (m *CMsgDOTAProcessFantasyScheduledEvent) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent.Size(m)
}
func (m *CMsgDOTAProcessFantasyScheduledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProcessFantasyScheduledEvent proto.InternalMessageInfo

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetEvent() uint32 {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetReferenceData() uint32 {
	if m != nil && m.ReferenceData != nil {
		return *m.ReferenceData
	}
	return 0
}

type CMsgDOTAHasItemQuery struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemId               *uint64  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAHasItemQuery) Reset()         { *m = CMsgDOTAHasItemQuery{} }
func (m *CMsgDOTAHasItemQuery) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemQuery) ProtoMessage()    {}
func (*CMsgDOTAHasItemQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{16}
}
func (m *CMsgDOTAHasItemQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAHasItemQuery.Unmarshal(m, b)
}
func (m *CMsgDOTAHasItemQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAHasItemQuery.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAHasItemQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAHasItemQuery.Merge(dst, src)
}
func (m *CMsgDOTAHasItemQuery) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAHasItemQuery.Size(m)
}
func (m *CMsgDOTAHasItemQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAHasItemQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAHasItemQuery proto.InternalMessageInfo

func (m *CMsgDOTAHasItemQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAHasItemQuery) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgDOTAHasItemResponse struct {
	HasItem              *bool    `protobuf:"varint,1,opt,name=has_item,json=hasItem" json:"has_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAHasItemResponse) Reset()         { *m = CMsgDOTAHasItemResponse{} }
func (m *CMsgDOTAHasItemResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemResponse) ProtoMessage()    {}
func (*CMsgDOTAHasItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{17}
}
func (m *CMsgDOTAHasItemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAHasItemResponse.Unmarshal(m, b)
}
func (m *CMsgDOTAHasItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAHasItemResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAHasItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAHasItemResponse.Merge(dst, src)
}
func (m *CMsgDOTAHasItemResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAHasItemResponse.Size(m)
}
func (m *CMsgDOTAHasItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAHasItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAHasItemResponse proto.InternalMessageInfo

func (m *CMsgDOTAHasItemResponse) GetHasItem() bool {
	if m != nil && m.HasItem != nil {
		return *m.HasItem
	}
	return false
}

type CMsgGCIsProQuery struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCIsProQuery) Reset()         { *m = CMsgGCIsProQuery{} }
func (m *CMsgGCIsProQuery) String() string { return proto.CompactTextString(m) }
func (*CMsgGCIsProQuery) ProtoMessage()    {}
func (*CMsgGCIsProQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{18}
}
func (m *CMsgGCIsProQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCIsProQuery.Unmarshal(m, b)
}
func (m *CMsgGCIsProQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCIsProQuery.Marshal(b, m, deterministic)
}
func (dst *CMsgGCIsProQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCIsProQuery.Merge(dst, src)
}
func (m *CMsgGCIsProQuery) XXX_Size() int {
	return xxx_messageInfo_CMsgGCIsProQuery.Size(m)
}
func (m *CMsgGCIsProQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCIsProQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCIsProQuery proto.InternalMessageInfo

func (m *CMsgGCIsProQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgGCIsProResponse struct {
	IsPro                *bool    `protobuf:"varint,1,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCIsProResponse) Reset()         { *m = CMsgGCIsProResponse{} }
func (m *CMsgGCIsProResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCIsProResponse) ProtoMessage()    {}
func (*CMsgGCIsProResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{19}
}
func (m *CMsgGCIsProResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCIsProResponse.Unmarshal(m, b)
}
func (m *CMsgGCIsProResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCIsProResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgGCIsProResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCIsProResponse.Merge(dst, src)
}
func (m *CMsgGCIsProResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgGCIsProResponse.Size(m)
}
func (m *CMsgGCIsProResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCIsProResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCIsProResponse proto.InternalMessageInfo

func (m *CMsgGCIsProResponse) GetIsPro() bool {
	if m != nil && m.IsPro != nil {
		return *m.IsPro
	}
	return false
}

type CMsgDOTAHasItemDefsQuery struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ItemdefIds           []uint32 `protobuf:"varint,2,rep,name=itemdef_ids,json=itemdefIds" json:"itemdef_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAHasItemDefsQuery) Reset()         { *m = CMsgDOTAHasItemDefsQuery{} }
func (m *CMsgDOTAHasItemDefsQuery) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemDefsQuery) ProtoMessage()    {}
func (*CMsgDOTAHasItemDefsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{20}
}
func (m *CMsgDOTAHasItemDefsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAHasItemDefsQuery.Unmarshal(m, b)
}
func (m *CMsgDOTAHasItemDefsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAHasItemDefsQuery.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAHasItemDefsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAHasItemDefsQuery.Merge(dst, src)
}
func (m *CMsgDOTAHasItemDefsQuery) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAHasItemDefsQuery.Size(m)
}
func (m *CMsgDOTAHasItemDefsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAHasItemDefsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAHasItemDefsQuery proto.InternalMessageInfo

func (m *CMsgDOTAHasItemDefsQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAHasItemDefsQuery) GetItemdefIds() []uint32 {
	if m != nil {
		return m.ItemdefIds
	}
	return nil
}

type CMsgDOTAHasItemDefsResponse struct {
	HasItems             *bool    `protobuf:"varint,1,opt,name=has_items,json=hasItems" json:"has_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAHasItemDefsResponse) Reset()         { *m = CMsgDOTAHasItemDefsResponse{} }
func (m *CMsgDOTAHasItemDefsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemDefsResponse) ProtoMessage()    {}
func (*CMsgDOTAHasItemDefsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{21}
}
func (m *CMsgDOTAHasItemDefsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAHasItemDefsResponse.Unmarshal(m, b)
}
func (m *CMsgDOTAHasItemDefsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAHasItemDefsResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAHasItemDefsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAHasItemDefsResponse.Merge(dst, src)
}
func (m *CMsgDOTAHasItemDefsResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAHasItemDefsResponse.Size(m)
}
func (m *CMsgDOTAHasItemDefsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAHasItemDefsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAHasItemDefsResponse proto.InternalMessageInfo

func (m *CMsgDOTAHasItemDefsResponse) GetHasItems() bool {
	if m != nil && m.HasItems != nil {
		return *m.HasItems
	}
	return false
}

type CMsgGCGetPlayerCardItemInfo struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerCardItemIds    []uint64 `protobuf:"varint,2,rep,name=player_card_item_ids,json=playerCardItemIds" json:"player_card_item_ids,omitempty"`
	AllForEvent          *uint32  `protobuf:"varint,3,opt,name=all_for_event,json=allForEvent" json:"all_for_event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCGetPlayerCardItemInfo) Reset()         { *m = CMsgGCGetPlayerCardItemInfo{} }
func (m *CMsgGCGetPlayerCardItemInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgGCGetPlayerCardItemInfo) ProtoMessage()    {}
func (*CMsgGCGetPlayerCardItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{22}
}
func (m *CMsgGCGetPlayerCardItemInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfo.Unmarshal(m, b)
}
func (m *CMsgGCGetPlayerCardItemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgGCGetPlayerCardItemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfo.Merge(dst, src)
}
func (m *CMsgGCGetPlayerCardItemInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfo.Size(m)
}
func (m *CMsgGCGetPlayerCardItemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCGetPlayerCardItemInfo proto.InternalMessageInfo

func (m *CMsgGCGetPlayerCardItemInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgGCGetPlayerCardItemInfo) GetPlayerCardItemIds() []uint64 {
	if m != nil {
		return m.PlayerCardItemIds
	}
	return nil
}

func (m *CMsgGCGetPlayerCardItemInfo) GetAllForEvent() uint32 {
	if m != nil && m.AllForEvent != nil {
		return *m.AllForEvent
	}
	return 0
}

type CMsgGCGetPlayerCardItemInfoResponse struct {
	PlayerCardInfos      []*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo `protobuf:"bytes,1,rep,name=player_card_infos,json=playerCardInfos" json:"player_card_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *CMsgGCGetPlayerCardItemInfoResponse) Reset()         { *m = CMsgGCGetPlayerCardItemInfoResponse{} }
func (m *CMsgGCGetPlayerCardItemInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCGetPlayerCardItemInfoResponse) ProtoMessage()    {}
func (*CMsgGCGetPlayerCardItemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{23}
}
func (m *CMsgGCGetPlayerCardItemInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse.Unmarshal(m, b)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgGCGetPlayerCardItemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse.Merge(dst, src)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse.Size(m)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse proto.InternalMessageInfo

func (m *CMsgGCGetPlayerCardItemInfoResponse) GetPlayerCardInfos() []*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo {
	if m != nil {
		return m.PlayerCardInfos
	}
	return nil
}

type CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo struct {
	PlayerCardItemId     *uint64  `protobuf:"varint,1,opt,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	AccountId            *uint32  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PackedBonuses        *uint64  `protobuf:"varint,3,opt,name=packed_bonuses,json=packedBonuses" json:"packed_bonuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) Reset() {
	*m = CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo{}
}
func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) ProtoMessage() {}
func (*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{23, 0}
}
func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.Unmarshal(m, b)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.Merge(dst, src)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.Size(m)
}
func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo proto.InternalMessageInfo

func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetPlayerCardItemId() uint64 {
	if m != nil && m.PlayerCardItemId != nil {
		return *m.PlayerCardItemId
	}
	return 0
}

func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo) GetPackedBonuses() uint64 {
	if m != nil && m.PackedBonuses != nil {
		return *m.PackedBonuses
	}
	return 0
}

type CMsgGCToGCFantasySetMatchLeague struct {
	MatchId              *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LeagueId             *uint32  `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCToGCFantasySetMatchLeague) Reset()         { *m = CMsgGCToGCFantasySetMatchLeague{} }
func (m *CMsgGCToGCFantasySetMatchLeague) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToGCFantasySetMatchLeague) ProtoMessage()    {}
func (*CMsgGCToGCFantasySetMatchLeague) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{24}
}
func (m *CMsgGCToGCFantasySetMatchLeague) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague.Unmarshal(m, b)
}
func (m *CMsgGCToGCFantasySetMatchLeague) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague.Marshal(b, m, deterministic)
}
func (dst *CMsgGCToGCFantasySetMatchLeague) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague.Merge(dst, src)
}
func (m *CMsgGCToGCFantasySetMatchLeague) XXX_Size() int {
	return xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague.Size(m)
}
func (m *CMsgGCToGCFantasySetMatchLeague) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCToGCFantasySetMatchLeague proto.InternalMessageInfo

func (m *CMsgGCToGCFantasySetMatchLeague) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgGCToGCFantasySetMatchLeague) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CSODOTAMapLocationState struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LocationId           *int32   `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Completed            *bool    `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAMapLocationState) Reset()         { *m = CSODOTAMapLocationState{} }
func (m *CSODOTAMapLocationState) String() string { return proto.CompactTextString(m) }
func (*CSODOTAMapLocationState) ProtoMessage()    {}
func (*CSODOTAMapLocationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{25}
}
func (m *CSODOTAMapLocationState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAMapLocationState.Unmarshal(m, b)
}
func (m *CSODOTAMapLocationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAMapLocationState.Marshal(b, m, deterministic)
}
func (dst *CSODOTAMapLocationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAMapLocationState.Merge(dst, src)
}
func (m *CSODOTAMapLocationState) XXX_Size() int {
	return xxx_messageInfo_CSODOTAMapLocationState.Size(m)
}
func (m *CSODOTAMapLocationState) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAMapLocationState.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAMapLocationState proto.InternalMessageInfo

func (m *CSODOTAMapLocationState) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CMsgLeagueAdminList struct {
	AccountIds           []uint32 `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLeagueAdminList) Reset()         { *m = CMsgLeagueAdminList{} }
func (m *CMsgLeagueAdminList) String() string { return proto.CompactTextString(m) }
func (*CMsgLeagueAdminList) ProtoMessage()    {}
func (*CMsgLeagueAdminList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{26}
}
func (m *CMsgLeagueAdminList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLeagueAdminList.Unmarshal(m, b)
}
func (m *CMsgLeagueAdminList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLeagueAdminList.Marshal(b, m, deterministic)
}
func (dst *CMsgLeagueAdminList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLeagueAdminList.Merge(dst, src)
}
func (m *CMsgLeagueAdminList) XXX_Size() int {
	return xxx_messageInfo_CMsgLeagueAdminList.Size(m)
}
func (m *CMsgLeagueAdminList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLeagueAdminList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLeagueAdminList proto.InternalMessageInfo

func (m *CMsgLeagueAdminList) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

type CCompendiumTimestampedData struct {
	GameTime             *uint32  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Gpm                  *uint32  `protobuf:"varint,2,opt,name=gpm" json:"gpm,omitempty"`
	Xpm                  *uint32  `protobuf:"varint,3,opt,name=xpm" json:"xpm,omitempty"`
	Kills                *uint32  `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32  `protobuf:"varint,5,opt,name=deaths" json:"deaths,omitempty"`
	ItemPurchases        []uint32 `protobuf:"varint,6,rep,name=item_purchases,json=itemPurchases" json:"item_purchases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCompendiumTimestampedData) Reset()         { *m = CCompendiumTimestampedData{} }
func (m *CCompendiumTimestampedData) String() string { return proto.CompactTextString(m) }
func (*CCompendiumTimestampedData) ProtoMessage()    {}
func (*CCompendiumTimestampedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{27}
}
func (m *CCompendiumTimestampedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCompendiumTimestampedData.Unmarshal(m, b)
}
func (m *CCompendiumTimestampedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCompendiumTimestampedData.Marshal(b, m, deterministic)
}
func (dst *CCompendiumTimestampedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCompendiumTimestampedData.Merge(dst, src)
}
func (m *CCompendiumTimestampedData) XXX_Size() int {
	return xxx_messageInfo_CCompendiumTimestampedData.Size(m)
}
func (m *CCompendiumTimestampedData) XXX_DiscardUnknown() {
	xxx_messageInfo_CCompendiumTimestampedData.DiscardUnknown(m)
}

var xxx_messageInfo_CCompendiumTimestampedData proto.InternalMessageInfo

func (m *CCompendiumTimestampedData) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetGpm() uint32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetXpm() uint32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetItemPurchases() []uint32 {
	if m != nil {
		return m.ItemPurchases
	}
	return nil
}

type CCompendiumGameTimeline struct {
	Data                 []*CCompendiumTimestampedData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Tags                 []string                      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CCompendiumGameTimeline) Reset()         { *m = CCompendiumGameTimeline{} }
func (m *CCompendiumGameTimeline) String() string { return proto.CompactTextString(m) }
func (*CCompendiumGameTimeline) ProtoMessage()    {}
func (*CCompendiumGameTimeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{28}
}
func (m *CCompendiumGameTimeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCompendiumGameTimeline.Unmarshal(m, b)
}
func (m *CCompendiumGameTimeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCompendiumGameTimeline.Marshal(b, m, deterministic)
}
func (dst *CCompendiumGameTimeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCompendiumGameTimeline.Merge(dst, src)
}
func (m *CCompendiumGameTimeline) XXX_Size() int {
	return xxx_messageInfo_CCompendiumGameTimeline.Size(m)
}
func (m *CCompendiumGameTimeline) XXX_DiscardUnknown() {
	xxx_messageInfo_CCompendiumGameTimeline.DiscardUnknown(m)
}

var xxx_messageInfo_CCompendiumGameTimeline proto.InternalMessageInfo

func (m *CCompendiumGameTimeline) GetData() []*CCompendiumTimestampedData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CCompendiumGameTimeline) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CCompendiumGameList struct {
	Games                []*CCompendiumGameTimeline `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CCompendiumGameList) Reset()         { *m = CCompendiumGameList{} }
func (m *CCompendiumGameList) String() string { return proto.CompactTextString(m) }
func (*CCompendiumGameList) ProtoMessage()    {}
func (*CCompendiumGameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{29}
}
func (m *CCompendiumGameList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCompendiumGameList.Unmarshal(m, b)
}
func (m *CCompendiumGameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCompendiumGameList.Marshal(b, m, deterministic)
}
func (dst *CCompendiumGameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCompendiumGameList.Merge(dst, src)
}
func (m *CCompendiumGameList) XXX_Size() int {
	return xxx_messageInfo_CCompendiumGameList.Size(m)
}
func (m *CCompendiumGameList) XXX_DiscardUnknown() {
	xxx_messageInfo_CCompendiumGameList.DiscardUnknown(m)
}

var xxx_messageInfo_CCompendiumGameList proto.InternalMessageInfo

func (m *CCompendiumGameList) GetGames() []*CCompendiumGameTimeline {
	if m != nil {
		return m.Games
	}
	return nil
}

type CAdditionalEquipSlot struct {
	ClassId              *uint32  `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	SlotId               *uint32  `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	DefIndex             *uint32  `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CAdditionalEquipSlot) Reset()         { *m = CAdditionalEquipSlot{} }
func (m *CAdditionalEquipSlot) String() string { return proto.CompactTextString(m) }
func (*CAdditionalEquipSlot) ProtoMessage()    {}
func (*CAdditionalEquipSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{30}
}
func (m *CAdditionalEquipSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CAdditionalEquipSlot.Unmarshal(m, b)
}
func (m *CAdditionalEquipSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CAdditionalEquipSlot.Marshal(b, m, deterministic)
}
func (dst *CAdditionalEquipSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAdditionalEquipSlot.Merge(dst, src)
}
func (m *CAdditionalEquipSlot) XXX_Size() int {
	return xxx_messageInfo_CAdditionalEquipSlot.Size(m)
}
func (m *CAdditionalEquipSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_CAdditionalEquipSlot.DiscardUnknown(m)
}

var xxx_messageInfo_CAdditionalEquipSlot proto.InternalMessageInfo

func (m *CAdditionalEquipSlot) GetClassId() uint32 {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return 0
}

func (m *CAdditionalEquipSlot) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CAdditionalEquipSlot) GetDefIndex() uint32 {
	if m != nil && m.DefIndex != nil {
		return *m.DefIndex
	}
	return 0
}

type CMsgDOTAProfileCard struct {
	AccountId              *uint32                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BackgroundDefIndex     *uint32                     `protobuf:"varint,2,opt,name=background_def_index,json=backgroundDefIndex" json:"background_def_index,omitempty"`
	Slots                  []*CMsgDOTAProfileCard_Slot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	BadgePoints            *uint32                     `protobuf:"varint,4,opt,name=badge_points,json=badgePoints" json:"badge_points,omitempty"`
	EventPoints            *uint32                     `protobuf:"varint,5,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	EventId                *uint32                     `protobuf:"varint,6,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	RecentBattleCupVictory *CMsgBattleCupVictory       `protobuf:"bytes,7,opt,name=recent_battle_cup_victory,json=recentBattleCupVictory" json:"recent_battle_cup_victory,omitempty"`
	RankTier               *uint32                     `protobuf:"varint,8,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	LeaderboardRank        *uint32                     `protobuf:"varint,9,opt,name=leaderboard_rank,json=leaderboardRank" json:"leaderboard_rank,omitempty"`
	IsPlusSubscriber       *bool                       `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PlusOriginalStartDate  *uint32                     `protobuf:"varint,11,opt,name=plus_original_start_date,json=plusOriginalStartDate" json:"plus_original_start_date,omitempty"`
	RankTierScore          *uint32                     `protobuf:"varint,12,opt,name=rank_tier_score,json=rankTierScore" json:"rank_tier_score,omitempty"`
	PreviousRankTier       *uint32                     `protobuf:"varint,13,opt,name=previous_rank_tier,json=previousRankTier" json:"previous_rank_tier,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                    `json:"-"`
	XXX_unrecognized       []byte                      `json:"-"`
	XXX_sizecache          int32                       `json:"-"`
}

func (m *CMsgDOTAProfileCard) Reset()         { *m = CMsgDOTAProfileCard{} }
func (m *CMsgDOTAProfileCard) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard) ProtoMessage()    {}
func (*CMsgDOTAProfileCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31}
}
func (m *CMsgDOTAProfileCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard.Size(m)
}
func (m *CMsgDOTAProfileCard) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetBackgroundDefIndex() uint32 {
	if m != nil && m.BackgroundDefIndex != nil {
		return *m.BackgroundDefIndex
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetSlots() []*CMsgDOTAProfileCard_Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *CMsgDOTAProfileCard) GetBadgePoints() uint32 {
	if m != nil && m.BadgePoints != nil {
		return *m.BadgePoints
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetEventPoints() uint32 {
	if m != nil && m.EventPoints != nil {
		return *m.EventPoints
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetRecentBattleCupVictory() *CMsgBattleCupVictory {
	if m != nil {
		return m.RecentBattleCupVictory
	}
	return nil
}

func (m *CMsgDOTAProfileCard) GetRankTier() uint32 {
	if m != nil && m.RankTier != nil {
		return *m.RankTier
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetLeaderboardRank() uint32 {
	if m != nil && m.LeaderboardRank != nil {
		return *m.LeaderboardRank
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CMsgDOTAProfileCard) GetPlusOriginalStartDate() uint32 {
	if m != nil && m.PlusOriginalStartDate != nil {
		return *m.PlusOriginalStartDate
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetRankTierScore() uint32 {
	if m != nil && m.RankTierScore != nil {
		return *m.RankTierScore
	}
	return 0
}

func (m *CMsgDOTAProfileCard) GetPreviousRankTier() uint32 {
	if m != nil && m.PreviousRankTier != nil {
		return *m.PreviousRankTier
	}
	return 0
}

type CMsgDOTAProfileCard_Slot struct {
	SlotId               *uint32                            `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	Trophy               *CMsgDOTAProfileCard_Slot_Trophy   `protobuf:"bytes,2,opt,name=trophy" json:"trophy,omitempty"`
	Stat                 *CMsgDOTAProfileCard_Slot_Stat     `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
	Item                 *CMsgDOTAProfileCard_Slot_Item     `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	Hero                 *CMsgDOTAProfileCard_Slot_Hero     `protobuf:"bytes,5,opt,name=hero" json:"hero,omitempty"`
	Emoticon             *CMsgDOTAProfileCard_Slot_Emoticon `protobuf:"bytes,6,opt,name=emoticon" json:"emoticon,omitempty"`
	Team                 *CMsgDOTAProfileCard_Slot_Team     `protobuf:"bytes,7,opt,name=team" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot) Reset()         { *m = CMsgDOTAProfileCard_Slot{} }
func (m *CMsgDOTAProfileCard_Slot) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0}
}
func (m *CMsgDOTAProfileCard_Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot) GetTrophy() *CMsgDOTAProfileCard_Slot_Trophy {
	if m != nil {
		return m.Trophy
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetStat() *CMsgDOTAProfileCard_Slot_Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetItem() *CMsgDOTAProfileCard_Slot_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetHero() *CMsgDOTAProfileCard_Slot_Hero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetEmoticon() *CMsgDOTAProfileCard_Slot_Emoticon {
	if m != nil {
		return m.Emoticon
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot) GetTeam() *CMsgDOTAProfileCard_Slot_Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type CMsgDOTAProfileCard_Slot_Trophy struct {
	TrophyId             *uint32  `protobuf:"varint,1,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	TrophyScore          *uint32  `protobuf:"varint,2,opt,name=trophy_score,json=trophyScore" json:"trophy_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Trophy) Reset()         { *m = CMsgDOTAProfileCard_Slot_Trophy{} }
func (m *CMsgDOTAProfileCard_Slot_Trophy) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Trophy) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Trophy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 0}
}
func (m *CMsgDOTAProfileCard_Slot_Trophy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Trophy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Trophy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Trophy) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Trophy) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Trophy proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyId() uint32 {
	if m != nil && m.TrophyId != nil {
		return *m.TrophyId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Trophy) GetTrophyScore() uint32 {
	if m != nil && m.TrophyScore != nil {
		return *m.TrophyScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Stat struct {
	StatId               *CMsgDOTAProfileCard_EStatID `protobuf:"varint,1,opt,name=stat_id,json=statId,enum=CMsgDOTAProfileCard_EStatID,def=1" json:"stat_id,omitempty"`
	StatScore            *uint32                      `protobuf:"varint,2,opt,name=stat_score,json=statScore" json:"stat_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Stat) Reset()         { *m = CMsgDOTAProfileCard_Slot_Stat{} }
func (m *CMsgDOTAProfileCard_Slot_Stat) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Stat) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 1}
}
func (m *CMsgDOTAProfileCard_Slot_Stat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Stat) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Stat proto.InternalMessageInfo

const Default_CMsgDOTAProfileCard_Slot_Stat_StatId CMsgDOTAProfileCard_EStatID = CMsgDOTAProfileCard_k_eStat_SoloRank

func (m *CMsgDOTAProfileCard_Slot_Stat) GetStatId() CMsgDOTAProfileCard_EStatID {
	if m != nil && m.StatId != nil {
		return *m.StatId
	}
	return Default_CMsgDOTAProfileCard_Slot_Stat_StatId
}

func (m *CMsgDOTAProfileCard_Slot_Stat) GetStatScore() uint32 {
	if m != nil && m.StatScore != nil {
		return *m.StatScore
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Item struct {
	SerializedItem       []byte   `protobuf:"bytes,1,opt,name=serialized_item,json=serializedItem" json:"serialized_item,omitempty"`
	ItemId               *uint64  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Item) Reset()         { *m = CMsgDOTAProfileCard_Slot_Item{} }
func (m *CMsgDOTAProfileCard_Slot_Item) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Item) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 2}
}
func (m *CMsgDOTAProfileCard_Slot_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Item) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Item proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot_Item) GetSerializedItem() []byte {
	if m != nil {
		return m.SerializedItem
	}
	return nil
}

func (m *CMsgDOTAProfileCard_Slot_Item) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Hero struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroWins             *uint32  `protobuf:"varint,2,opt,name=hero_wins,json=heroWins" json:"hero_wins,omitempty"`
	HeroLosses           *uint32  `protobuf:"varint,3,opt,name=hero_losses,json=heroLosses" json:"hero_losses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Hero) Reset()         { *m = CMsgDOTAProfileCard_Slot_Hero{} }
func (m *CMsgDOTAProfileCard_Slot_Hero) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Hero) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Hero) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 3}
}
func (m *CMsgDOTAProfileCard_Slot_Hero) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Hero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Hero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Hero) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Hero) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Hero proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroWins() uint32 {
	if m != nil && m.HeroWins != nil {
		return *m.HeroWins
	}
	return 0
}

func (m *CMsgDOTAProfileCard_Slot_Hero) GetHeroLosses() uint32 {
	if m != nil && m.HeroLosses != nil {
		return *m.HeroLosses
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Emoticon struct {
	EmoticonId           *uint32  `protobuf:"varint,1,opt,name=emoticon_id,json=emoticonId" json:"emoticon_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Emoticon) Reset()         { *m = CMsgDOTAProfileCard_Slot_Emoticon{} }
func (m *CMsgDOTAProfileCard_Slot_Emoticon) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Emoticon) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Emoticon) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 4}
}
func (m *CMsgDOTAProfileCard_Slot_Emoticon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Emoticon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Emoticon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Emoticon) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Emoticon) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Emoticon proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot_Emoticon) GetEmoticonId() uint32 {
	if m != nil && m.EmoticonId != nil {
		return *m.EmoticonId
	}
	return 0
}

type CMsgDOTAProfileCard_Slot_Team struct {
	TeamId               *uint32  `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAProfileCard_Slot_Team) Reset()         { *m = CMsgDOTAProfileCard_Slot_Team{} }
func (m *CMsgDOTAProfileCard_Slot_Team) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProfileCard_Slot_Team) ProtoMessage()    {}
func (*CMsgDOTAProfileCard_Slot_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{31, 0, 5}
}
func (m *CMsgDOTAProfileCard_Slot_Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team.Unmarshal(m, b)
}
func (m *CMsgDOTAProfileCard_Slot_Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAProfileCard_Slot_Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team.Merge(dst, src)
}
func (m *CMsgDOTAProfileCard_Slot_Team) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team.Size(m)
}
func (m *CMsgDOTAProfileCard_Slot_Team) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAProfileCard_Slot_Team proto.InternalMessageInfo

func (m *CMsgDOTAProfileCard_Slot_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CSODOTAPlayerChallenge struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId              *uint32  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId               *uint32  `protobuf:"varint,3,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	IntParam_0           *uint32  `protobuf:"varint,5,opt,name=int_param_0,json=intParam0" json:"int_param_0,omitempty"`
	IntParam_1           *uint32  `protobuf:"varint,6,opt,name=int_param_1,json=intParam1" json:"int_param_1,omitempty"`
	CreatedTime          *uint32  `protobuf:"varint,7,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	Completed            *uint32  `protobuf:"varint,8,opt,name=completed" json:"completed,omitempty"`
	SequenceId           *uint32  `protobuf:"varint,9,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	ChallengeTier        *uint32  `protobuf:"varint,10,opt,name=challenge_tier,json=challengeTier" json:"challenge_tier,omitempty"`
	Flags                *uint32  `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	Attempts             *uint32  `protobuf:"varint,12,opt,name=attempts" json:"attempts,omitempty"`
	CompleteLimit        *uint32  `protobuf:"varint,13,opt,name=complete_limit,json=completeLimit" json:"complete_limit,omitempty"`
	QuestRank            *uint32  `protobuf:"varint,14,opt,name=quest_rank,json=questRank" json:"quest_rank,omitempty"`
	MaxQuestRank         *uint32  `protobuf:"varint,15,opt,name=max_quest_rank,json=maxQuestRank" json:"max_quest_rank,omitempty"`
	InstanceId           *uint32  `protobuf:"varint,16,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	HeroId               *uint32  `protobuf:"varint,17,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TemplateId           *uint32  `protobuf:"varint,18,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAPlayerChallenge) Reset()         { *m = CSODOTAPlayerChallenge{} }
func (m *CSODOTAPlayerChallenge) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPlayerChallenge) ProtoMessage()    {}
func (*CSODOTAPlayerChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{32}
}
func (m *CSODOTAPlayerChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPlayerChallenge.Unmarshal(m, b)
}
func (m *CSODOTAPlayerChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPlayerChallenge.Marshal(b, m, deterministic)
}
func (dst *CSODOTAPlayerChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPlayerChallenge.Merge(dst, src)
}
func (m *CSODOTAPlayerChallenge) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPlayerChallenge.Size(m)
}
func (m *CSODOTAPlayerChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPlayerChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPlayerChallenge proto.InternalMessageInfo

func (m *CSODOTAPlayerChallenge) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetIntParam_0() uint32 {
	if m != nil && m.IntParam_0 != nil {
		return *m.IntParam_0
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetIntParam_1() uint32 {
	if m != nil && m.IntParam_1 != nil {
		return *m.IntParam_1
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetCreatedTime() uint32 {
	if m != nil && m.CreatedTime != nil {
		return *m.CreatedTime
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetCompleted() uint32 {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetSequenceId() uint32 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetChallengeTier() uint32 {
	if m != nil && m.ChallengeTier != nil {
		return *m.ChallengeTier
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetAttempts() uint32 {
	if m != nil && m.Attempts != nil {
		return *m.Attempts
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetCompleteLimit() uint32 {
	if m != nil && m.CompleteLimit != nil {
		return *m.CompleteLimit
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetQuestRank() uint32 {
	if m != nil && m.QuestRank != nil {
		return *m.QuestRank
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetMaxQuestRank() uint32 {
	if m != nil && m.MaxQuestRank != nil {
		return *m.MaxQuestRank
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetInstanceId() uint32 {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CSODOTAPlayerChallenge) GetTemplateId() uint32 {
	if m != nil && m.TemplateId != nil {
		return *m.TemplateId
	}
	return 0
}

type CMsgClientToGCRerollPlayerChallenge struct {
	EventId              *uint32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SequenceId           *uint32  `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	HeroId               *uint32  `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgClientToGCRerollPlayerChallenge) Reset()         { *m = CMsgClientToGCRerollPlayerChallenge{} }
func (m *CMsgClientToGCRerollPlayerChallenge) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCRerollPlayerChallenge) ProtoMessage()    {}
func (*CMsgClientToGCRerollPlayerChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{33}
}
func (m *CMsgClientToGCRerollPlayerChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge.Unmarshal(m, b)
}
func (m *CMsgClientToGCRerollPlayerChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge.Marshal(b, m, deterministic)
}
func (dst *CMsgClientToGCRerollPlayerChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge.Merge(dst, src)
}
func (m *CMsgClientToGCRerollPlayerChallenge) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge.Size(m)
}
func (m *CMsgClientToGCRerollPlayerChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCRerollPlayerChallenge proto.InternalMessageInfo

func (m *CMsgClientToGCRerollPlayerChallenge) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgClientToGCRerollPlayerChallenge) GetSequenceId() uint32 {
	if m != nil && m.SequenceId != nil {
		return *m.SequenceId
	}
	return 0
}

func (m *CMsgClientToGCRerollPlayerChallenge) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

type CMsgGCRerollPlayerChallengeResponse struct {
	Result               *CMsgGCRerollPlayerChallengeResponse_EResult `protobuf:"varint,1,opt,name=result,enum=CMsgGCRerollPlayerChallengeResponse_EResult,def=0" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CMsgGCRerollPlayerChallengeResponse) Reset()         { *m = CMsgGCRerollPlayerChallengeResponse{} }
func (m *CMsgGCRerollPlayerChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCRerollPlayerChallengeResponse) ProtoMessage()    {}
func (*CMsgGCRerollPlayerChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{34}
}
func (m *CMsgGCRerollPlayerChallengeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse.Unmarshal(m, b)
}
func (m *CMsgGCRerollPlayerChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse.Marshal(b, m, deterministic)
}
func (dst *CMsgGCRerollPlayerChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse.Merge(dst, src)
}
func (m *CMsgGCRerollPlayerChallengeResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse.Size(m)
}
func (m *CMsgGCRerollPlayerChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCRerollPlayerChallengeResponse proto.InternalMessageInfo

const Default_CMsgGCRerollPlayerChallengeResponse_Result CMsgGCRerollPlayerChallengeResponse_EResult = CMsgGCRerollPlayerChallengeResponse_eResult_Success

func (m *CMsgGCRerollPlayerChallengeResponse) GetResult() CMsgGCRerollPlayerChallengeResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgGCRerollPlayerChallengeResponse_Result
}

type CMsgGCTopCustomGamesList struct {
	TopCustomGames       []uint64 `protobuf:"varint,1,rep,name=top_custom_games,json=topCustomGames" json:"top_custom_games,omitempty"`
	GameOfTheDay         *uint64  `protobuf:"varint,2,opt,name=game_of_the_day,json=gameOfTheDay" json:"game_of_the_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCTopCustomGamesList) Reset()         { *m = CMsgGCTopCustomGamesList{} }
func (m *CMsgGCTopCustomGamesList) String() string { return proto.CompactTextString(m) }
func (*CMsgGCTopCustomGamesList) ProtoMessage()    {}
func (*CMsgGCTopCustomGamesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{35}
}
func (m *CMsgGCTopCustomGamesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCTopCustomGamesList.Unmarshal(m, b)
}
func (m *CMsgGCTopCustomGamesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCTopCustomGamesList.Marshal(b, m, deterministic)
}
func (dst *CMsgGCTopCustomGamesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCTopCustomGamesList.Merge(dst, src)
}
func (m *CMsgGCTopCustomGamesList) XXX_Size() int {
	return xxx_messageInfo_CMsgGCTopCustomGamesList.Size(m)
}
func (m *CMsgGCTopCustomGamesList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCTopCustomGamesList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCTopCustomGamesList proto.InternalMessageInfo

func (m *CMsgGCTopCustomGamesList) GetTopCustomGames() []uint64 {
	if m != nil {
		return m.TopCustomGames
	}
	return nil
}

func (m *CMsgGCTopCustomGamesList) GetGameOfTheDay() uint64 {
	if m != nil && m.GameOfTheDay != nil {
		return *m.GameOfTheDay
	}
	return 0
}

type CMsgDOTARealtimeGameStats struct {
	Match                *CMsgDOTARealtimeGameStats_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams                []*CMsgDOTARealtimeGameStats_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings            []*CMsgDOTARealtimeGameStats_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData            *CMsgDOTARealtimeGameStats_GraphData         `protobuf:"bytes,4,opt,name=graph_data,json=graphData" json:"graph_data,omitempty"`
	DeltaFrame           *bool                                        `protobuf:"varint,5,opt,name=delta_frame,json=deltaFrame" json:"delta_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats) Reset()         { *m = CMsgDOTARealtimeGameStats{} }
func (m *CMsgDOTARealtimeGameStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36}
}
func (m *CMsgDOTARealtimeGameStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats.Size(m)
}
func (m *CMsgDOTARealtimeGameStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats) GetMatch() *CMsgDOTARealtimeGameStats_MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetTeams() []*CMsgDOTARealtimeGameStats_TeamDetails {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetBuildings() []*CMsgDOTARealtimeGameStats_BuildingDetails {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetGraphData() *CMsgDOTARealtimeGameStats_GraphData {
	if m != nil {
		return m.GraphData
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats) GetDeltaFrame() bool {
	if m != nil && m.DeltaFrame != nil {
		return *m.DeltaFrame
	}
	return false
}

type CMsgDOTARealtimeGameStats_TeamDetails struct {
	TeamNumber           *uint32                                    `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	TeamId               *uint32                                    `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string                                    `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo             *uint64                                    `protobuf:"fixed64,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamTag              *string                                    `protobuf:"bytes,10,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Score                *uint32                                    `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NetWorth             *uint32                                    `protobuf:"varint,9,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Players              []*CMsgDOTARealtimeGameStats_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	OnlyTeam             *bool                                      `protobuf:"varint,7,opt,name=only_team,json=onlyTeam" json:"only_team,omitempty"`
	Cheers               *uint32                                    `protobuf:"varint,8,opt,name=cheers" json:"cheers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_TeamDetails{} }
func (m *CMsgDOTARealtimeGameStats_TeamDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_TeamDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_TeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 0}
}
func (m *CMsgDOTARealtimeGameStats_TeamDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_TeamDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_TeamDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_TeamDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_TeamDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_TeamDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamNumber() uint32 {
	if m != nil && m.TeamNumber != nil {
		return *m.TeamNumber
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStats_PlayerDetails {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetOnlyTeam() bool {
	if m != nil && m.OnlyTeam != nil {
		return *m.OnlyTeam
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_TeamDetails) GetCheers() uint32 {
	if m != nil && m.Cheers != nil {
		return *m.Cheers
	}
	return 0
}

type CMsgDOTARealtimeGameStats_ItemDetails struct {
	ItemAbilityId        *uint32  `protobuf:"varint,1,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Time                 *int32   `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Sold                 *bool    `protobuf:"varint,4,opt,name=sold" json:"sold,omitempty"`
	Stackcount           *uint32  `protobuf:"varint,5,opt,name=stackcount" json:"stackcount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_ItemDetails{} }
func (m *CMsgDOTARealtimeGameStats_ItemDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_ItemDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_ItemDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 1}
}
func (m *CMsgDOTARealtimeGameStats_ItemDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_ItemDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_ItemDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_ItemDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_ItemDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_ItemDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetItemAbilityId() uint32 {
	if m != nil && m.ItemAbilityId != nil {
		return *m.ItemAbilityId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetSold() bool {
	if m != nil && m.Sold != nil {
		return *m.Sold
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_ItemDetails) GetStackcount() uint32 {
	if m != nil && m.Stackcount != nil {
		return *m.Stackcount
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityDetails struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level                *uint32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Cooldown             *float32 `protobuf:"fixed32,4,opt,name=cooldown" json:"cooldown,omitempty"`
	CooldownMax          *float32 `protobuf:"fixed32,5,opt,name=cooldown_max,json=cooldownMax" json:"cooldown_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_AbilityDetails{}
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_AbilityDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_AbilityDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 2}
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_AbilityDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_AbilityDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldown() float32 {
	if m != nil && m.Cooldown != nil {
		return *m.Cooldown
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_AbilityDetails) GetCooldownMax() float32 {
	if m != nil && m.CooldownMax != nil {
		return *m.CooldownMax
	}
	return 0
}

type CMsgDOTARealtimeGameStats_HeroToHeroStats struct {
	Victimid             *uint32  `protobuf:"varint,1,opt,name=victimid" json:"victimid,omitempty"`
	Kills                *uint32  `protobuf:"varint,2,opt,name=kills" json:"kills,omitempty"`
	Assists              *uint32  `protobuf:"varint,3,opt,name=assists" json:"assists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_HeroToHeroStats{}
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_HeroToHeroStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 3}
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_HeroToHeroStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_HeroToHeroStats proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetVictimid() uint32 {
	if m != nil && m.Victimid != nil {
		return *m.Victimid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_HeroToHeroStats) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

type CMsgDOTARealtimeGameStats_AbilityList struct {
	Id                   []uint32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_AbilityList) Reset()         { *m = CMsgDOTARealtimeGameStats_AbilityList{} }
func (m *CMsgDOTARealtimeGameStats_AbilityList) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_AbilityList) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_AbilityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 4}
}
func (m *CMsgDOTARealtimeGameStats_AbilityList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_AbilityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_AbilityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_AbilityList) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_AbilityList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_AbilityList proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_AbilityList) GetId() []uint32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type CMsgDOTARealtimeGameStats_PlayerDetails struct {
	Accountid            *uint32                                      `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid             *uint32                                      `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name                 *string                                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team                 *uint32                                      `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid               *uint32                                      `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Healthpoints         *uint32                                      `protobuf:"varint,6,opt,name=healthpoints" json:"healthpoints,omitempty"`
	Maxhealthpoints      *uint32                                      `protobuf:"varint,7,opt,name=maxhealthpoints" json:"maxhealthpoints,omitempty"`
	Healthregenrate      *float32                                     `protobuf:"fixed32,8,opt,name=healthregenrate" json:"healthregenrate,omitempty"`
	Manapoints           *uint32                                      `protobuf:"varint,9,opt,name=manapoints" json:"manapoints,omitempty"`
	Maxmanapoints        *uint32                                      `protobuf:"varint,10,opt,name=maxmanapoints" json:"maxmanapoints,omitempty"`
	Manaregenrate        *float32                                     `protobuf:"fixed32,11,opt,name=manaregenrate" json:"manaregenrate,omitempty"`
	BaseStrength         *uint32                                      `protobuf:"varint,12,opt,name=base_strength,json=baseStrength" json:"base_strength,omitempty"`
	BaseAgility          *uint32                                      `protobuf:"varint,13,opt,name=base_agility,json=baseAgility" json:"base_agility,omitempty"`
	BaseIntelligence     *uint32                                      `protobuf:"varint,14,opt,name=base_intelligence,json=baseIntelligence" json:"base_intelligence,omitempty"`
	BaseArmor            *int32                                       `protobuf:"varint,15,opt,name=base_armor,json=baseArmor" json:"base_armor,omitempty"`
	BaseMovespeed        *uint32                                      `protobuf:"varint,16,opt,name=base_movespeed,json=baseMovespeed" json:"base_movespeed,omitempty"`
	BaseDamage           *uint32                                      `protobuf:"varint,17,opt,name=base_damage,json=baseDamage" json:"base_damage,omitempty"`
	Strength             *uint32                                      `protobuf:"varint,18,opt,name=strength" json:"strength,omitempty"`
	Agility              *uint32                                      `protobuf:"varint,19,opt,name=agility" json:"agility,omitempty"`
	Intelligence         *uint32                                      `protobuf:"varint,20,opt,name=intelligence" json:"intelligence,omitempty"`
	Armor                *int32                                       `protobuf:"varint,21,opt,name=armor" json:"armor,omitempty"`
	Movespeed            *uint32                                      `protobuf:"varint,22,opt,name=movespeed" json:"movespeed,omitempty"`
	Damage               *uint32                                      `protobuf:"varint,23,opt,name=damage" json:"damage,omitempty"`
	HeroDamage           *uint32                                      `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage          *uint32                                      `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	Abilities            []*CMsgDOTARealtimeGameStats_AbilityDetails  `protobuf:"bytes,26,rep,name=abilities" json:"abilities,omitempty"`
	Level                *uint32                                      `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	KillCount            *uint32                                      `protobuf:"varint,28,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	DeathCount           *uint32                                      `protobuf:"varint,29,opt,name=death_count,json=deathCount" json:"death_count,omitempty"`
	AssistsCount         *uint32                                      `protobuf:"varint,30,opt,name=assists_count,json=assistsCount" json:"assists_count,omitempty"`
	DeniesCount          *uint32                                      `protobuf:"varint,31,opt,name=denies_count,json=deniesCount" json:"denies_count,omitempty"`
	LhCount              *uint32                                      `protobuf:"varint,32,opt,name=lh_count,json=lhCount" json:"lh_count,omitempty"`
	HeroHealing          *uint32                                      `protobuf:"varint,33,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	GoldPerMin           *uint32                                      `protobuf:"varint,34,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XpPerMin             *uint32                                      `protobuf:"varint,35,opt,name=xp_per_min,json=xpPerMin" json:"xp_per_min,omitempty"`
	NetGold              *uint32                                      `protobuf:"varint,36,opt,name=net_gold,json=netGold" json:"net_gold,omitempty"`
	Gold                 *uint32                                      `protobuf:"varint,37,opt,name=gold" json:"gold,omitempty"`
	X                    *float32                                     `protobuf:"fixed32,38,opt,name=x" json:"x,omitempty"`
	Y                    *float32                                     `protobuf:"fixed32,39,opt,name=y" json:"y,omitempty"`
	RespawnTime          *int32                                       `protobuf:"varint,40,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	UltimateCooldown     *uint32                                      `protobuf:"varint,41,opt,name=ultimate_cooldown,json=ultimateCooldown" json:"ultimate_cooldown,omitempty"`
	HasBuyback           *bool                                        `protobuf:"varint,42,opt,name=has_buyback,json=hasBuyback" json:"has_buyback,omitempty"`
	Items                []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,43,rep,name=items" json:"items,omitempty"`
	Stashitems           []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,44,rep,name=stashitems" json:"stashitems,omitempty"`
	Itemshoppinglist     []*CMsgDOTARealtimeGameStats_ItemDetails     `protobuf:"bytes,45,rep,name=itemshoppinglist" json:"itemshoppinglist,omitempty"`
	Levelpoints          []*CMsgDOTARealtimeGameStats_AbilityList     `protobuf:"bytes,46,rep,name=levelpoints" json:"levelpoints,omitempty"`
	HeroToHeroStats      []*CMsgDOTARealtimeGameStats_HeroToHeroStats `protobuf:"bytes,47,rep,name=hero_to_hero_stats,json=heroToHeroStats" json:"hero_to_hero_stats,omitempty"`
	HasUltimate          *bool                                        `protobuf:"varint,48,opt,name=has_ultimate,json=hasUltimate" json:"has_ultimate,omitempty"`
	HasUltimateMana      *bool                                        `protobuf:"varint,49,opt,name=has_ultimate_mana,json=hasUltimateMana" json:"has_ultimate_mana,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_PlayerDetails{}
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_PlayerDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_PlayerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 5}
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_PlayerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_PlayerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_PlayerDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetPlayerid() uint32 {
	if m != nil && m.Playerid != nil {
		return *m.Playerid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroid() uint32 {
	if m != nil && m.Heroid != nil {
		return *m.Heroid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthpoints() uint32 {
	if m != nil && m.Healthpoints != nil {
		return *m.Healthpoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxhealthpoints() uint32 {
	if m != nil && m.Maxhealthpoints != nil {
		return *m.Maxhealthpoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHealthregenrate() float32 {
	if m != nil && m.Healthregenrate != nil {
		return *m.Healthregenrate
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetManapoints() uint32 {
	if m != nil && m.Manapoints != nil {
		return *m.Manapoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMaxmanapoints() uint32 {
	if m != nil && m.Maxmanapoints != nil {
		return *m.Maxmanapoints
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetManaregenrate() float32 {
	if m != nil && m.Manaregenrate != nil {
		return *m.Manaregenrate
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseStrength() uint32 {
	if m != nil && m.BaseStrength != nil {
		return *m.BaseStrength
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseAgility() uint32 {
	if m != nil && m.BaseAgility != nil {
		return *m.BaseAgility
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseIntelligence() uint32 {
	if m != nil && m.BaseIntelligence != nil {
		return *m.BaseIntelligence
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseArmor() int32 {
	if m != nil && m.BaseArmor != nil {
		return *m.BaseArmor
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseMovespeed() uint32 {
	if m != nil && m.BaseMovespeed != nil {
		return *m.BaseMovespeed
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetBaseDamage() uint32 {
	if m != nil && m.BaseDamage != nil {
		return *m.BaseDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAgility() uint32 {
	if m != nil && m.Agility != nil {
		return *m.Agility
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetIntelligence() uint32 {
	if m != nil && m.Intelligence != nil {
		return *m.Intelligence
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetArmor() int32 {
	if m != nil && m.Armor != nil {
		return *m.Armor
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetMovespeed() uint32 {
	if m != nil && m.Movespeed != nil {
		return *m.Movespeed
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDamage() uint32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroDamage() uint32 {
	if m != nil && m.HeroDamage != nil {
		return *m.HeroDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetTowerDamage() uint32 {
	if m != nil && m.TowerDamage != nil {
		return *m.TowerDamage
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAbilities() []*CMsgDOTARealtimeGameStats_AbilityDetails {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetKillCount() uint32 {
	if m != nil && m.KillCount != nil {
		return *m.KillCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeathCount() uint32 {
	if m != nil && m.DeathCount != nil {
		return *m.DeathCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetAssistsCount() uint32 {
	if m != nil && m.AssistsCount != nil {
		return *m.AssistsCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetDeniesCount() uint32 {
	if m != nil && m.DeniesCount != nil {
		return *m.DeniesCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLhCount() uint32 {
	if m != nil && m.LhCount != nil {
		return *m.LhCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroHealing() uint32 {
	if m != nil && m.HeroHealing != nil {
		return *m.HeroHealing
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetGoldPerMin() uint32 {
	if m != nil && m.GoldPerMin != nil {
		return *m.GoldPerMin
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetXpPerMin() uint32 {
	if m != nil && m.XpPerMin != nil {
		return *m.XpPerMin
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetNetGold() uint32 {
	if m != nil && m.NetGold != nil {
		return *m.NetGold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetGold() uint32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetRespawnTime() int32 {
	if m != nil && m.RespawnTime != nil {
		return *m.RespawnTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetUltimateCooldown() uint32 {
	if m != nil && m.UltimateCooldown != nil {
		return *m.UltimateCooldown
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasBuyback() bool {
	if m != nil && m.HasBuyback != nil {
		return *m.HasBuyback
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetItems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetStashitems() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Stashitems
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetItemshoppinglist() []*CMsgDOTARealtimeGameStats_ItemDetails {
	if m != nil {
		return m.Itemshoppinglist
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetLevelpoints() []*CMsgDOTARealtimeGameStats_AbilityList {
	if m != nil {
		return m.Levelpoints
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHeroToHeroStats() []*CMsgDOTARealtimeGameStats_HeroToHeroStats {
	if m != nil {
		return m.HeroToHeroStats
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimate() bool {
	if m != nil && m.HasUltimate != nil {
		return *m.HasUltimate
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_PlayerDetails) GetHasUltimateMana() bool {
	if m != nil && m.HasUltimateMana != nil {
		return *m.HasUltimateMana
	}
	return false
}

type CMsgDOTARealtimeGameStats_BuildingDetails struct {
	Team                 *uint32  `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	Heading              *float32 `protobuf:"fixed32,3,opt,name=heading" json:"heading,omitempty"`
	Lane                 *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier                 *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	Type                 *uint32  `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
	X                    *float32 `protobuf:"fixed32,7,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,8,opt,name=y" json:"y,omitempty"`
	Destroyed            *bool    `protobuf:"varint,9,opt,name=destroyed" json:"destroyed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_BuildingDetails{}
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_BuildingDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_BuildingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 6}
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_BuildingDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_BuildingDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_BuildingDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetHeading() float32 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetLane() uint32 {
	if m != nil && m.Lane != nil {
		return *m.Lane
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetTier() uint32 {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BuildingDetails) GetDestroyed() bool {
	if m != nil && m.Destroyed != nil {
		return *m.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStats_KillDetails struct {
	PlayerId             *uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	DeathTime            *int32   `protobuf:"varint,2,opt,name=death_time,json=deathTime" json:"death_time,omitempty"`
	KillerPlayerId       *uint32  `protobuf:"varint,3,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) Reset()         { *m = CMsgDOTARealtimeGameStats_KillDetails{} }
func (m *CMsgDOTARealtimeGameStats_KillDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_KillDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_KillDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 7}
}
func (m *CMsgDOTARealtimeGameStats_KillDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_KillDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_KillDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_KillDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_KillDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_KillDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetDeathTime() int32 {
	if m != nil && m.DeathTime != nil {
		return *m.DeathTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_KillDetails) GetKillerPlayerId() uint32 {
	if m != nil && m.KillerPlayerId != nil {
		return *m.KillerPlayerId
	}
	return 0
}

type CMsgDOTARealtimeGameStats_BroadcasterDetails struct {
	PlayerId             *uint32  `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	SelectedHero         *uint32  `protobuf:"varint,2,opt,name=selected_hero,json=selectedHero" json:"selected_hero,omitempty"`
	SelectedGraph        *uint32  `protobuf:"varint,3,opt,name=selected_graph,json=selectedGraph" json:"selected_graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_BroadcasterDetails{}
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_BroadcasterDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 8}
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_BroadcasterDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_BroadcasterDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedHero() uint32 {
	if m != nil && m.SelectedHero != nil {
		return *m.SelectedHero
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_BroadcasterDetails) GetSelectedGraph() uint32 {
	if m != nil && m.SelectedGraph != nil {
		return *m.SelectedGraph
	}
	return 0
}

type CMsgDOTARealtimeGameStats_PickBanDetails struct {
	Hero                 *uint32  `protobuf:"varint,1,opt,name=hero" json:"hero,omitempty"`
	Team                 *uint32  `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_PickBanDetails{}
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_PickBanDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_PickBanDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 9}
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_PickBanDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_PickBanDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_PickBanDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) GetHero() uint32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_PickBanDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

type CMsgDOTARealtimeGameStats_MatchDetails struct {
	ServerSteamId        *uint64                                         `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Matchid              *uint64                                         `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp            *uint32                                         `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TimeOfDay            *float32                                        `protobuf:"fixed32,4,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	IsNightstalkerNight  *bool                                           `protobuf:"varint,5,opt,name=is_nightstalker_night,json=isNightstalkerNight" json:"is_nightstalker_night,omitempty"`
	GameTime             *int32                                          `protobuf:"varint,6,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	GameState            *uint32                                         `protobuf:"varint,19,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	TeamidRadiant        *uint32                                         `protobuf:"varint,8,opt,name=teamid_radiant,json=teamidRadiant" json:"teamid_radiant,omitempty"`
	TeamidDire           *uint32                                         `protobuf:"varint,9,opt,name=teamid_dire,json=teamidDire" json:"teamid_dire,omitempty"`
	Picks                []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
	Bans                 []*CMsgDOTARealtimeGameStats_PickBanDetails     `protobuf:"bytes,11,rep,name=bans" json:"bans,omitempty"`
	Kills                []*CMsgDOTARealtimeGameStats_KillDetails        `protobuf:"bytes,12,rep,name=kills" json:"kills,omitempty"`
	Broadcasters         []*CMsgDOTARealtimeGameStats_BroadcasterDetails `protobuf:"bytes,13,rep,name=broadcasters" json:"broadcasters,omitempty"`
	GameMode             *uint32                                         `protobuf:"varint,14,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LeagueId             *uint32                                         `protobuf:"varint,15,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId         *uint32                                         `protobuf:"varint,18,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	SingleTeam           *bool                                           `protobuf:"varint,16,opt,name=single_team,json=singleTeam" json:"single_team,omitempty"`
	CheersPeak           *uint32                                         `protobuf:"varint,17,opt,name=cheers_peak,json=cheersPeak" json:"cheers_peak,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) Reset() {
	*m = CMsgDOTARealtimeGameStats_MatchDetails{}
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_MatchDetails) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_MatchDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 10}
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_MatchDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_MatchDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_MatchDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetMatchid() uint64 {
	if m != nil && m.Matchid != nil {
		return *m.Matchid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTimeOfDay() float32 {
	if m != nil && m.TimeOfDay != nil {
		return *m.TimeOfDay
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetIsNightstalkerNight() bool {
	if m != nil && m.IsNightstalkerNight != nil {
		return *m.IsNightstalkerNight
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetGameState() uint32 {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidRadiant() uint32 {
	if m != nil && m.TeamidRadiant != nil {
		return *m.TeamidRadiant
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetTeamidDire() uint32 {
	if m != nil && m.TeamidDire != nil {
		return *m.TeamidDire
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetPicks() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if m != nil {
		return m.Picks
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetBans() []*CMsgDOTARealtimeGameStats_PickBanDetails {
	if m != nil {
		return m.Bans
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetKills() []*CMsgDOTARealtimeGameStats_KillDetails {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetBroadcasters() []*CMsgDOTARealtimeGameStats_BroadcasterDetails {
	if m != nil {
		return m.Broadcasters
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetLeagueNodeId() uint32 {
	if m != nil && m.LeagueNodeId != nil {
		return *m.LeagueNodeId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetSingleTeam() bool {
	if m != nil && m.SingleTeam != nil {
		return *m.SingleTeam
	}
	return false
}

func (m *CMsgDOTARealtimeGameStats_MatchDetails) GetCheersPeak() uint32 {
	if m != nil && m.CheersPeak != nil {
		return *m.CheersPeak
	}
	return 0
}

type CMsgDOTARealtimeGameStats_GraphData struct {
	GraphGold            []int32                                                  `protobuf:"varint,1,rep,name=graph_gold,json=graphGold" json:"graph_gold,omitempty"`
	GraphXp              []int32                                                  `protobuf:"varint,2,rep,name=graph_xp,json=graphXp" json:"graph_xp,omitempty"`
	GraphKill            []int32                                                  `protobuf:"varint,3,rep,name=graph_kill,json=graphKill" json:"graph_kill,omitempty"`
	GraphTower           []int32                                                  `protobuf:"varint,4,rep,name=graph_tower,json=graphTower" json:"graph_tower,omitempty"`
	GraphRax             []int32                                                  `protobuf:"varint,5,rep,name=graph_rax,json=graphRax" json:"graph_rax,omitempty"`
	TeamLocStats         []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats `protobuf:"bytes,6,rep,name=team_loc_stats,json=teamLocStats" json:"team_loc_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData) Reset()         { *m = CMsgDOTARealtimeGameStats_GraphData{} }
func (m *CMsgDOTARealtimeGameStats_GraphData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStats_GraphData) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStats_GraphData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 11}
}
func (m *CMsgDOTARealtimeGameStats_GraphData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_GraphData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_GraphData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_GraphData) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_GraphData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphGold() []int32 {
	if m != nil {
		return m.GraphGold
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphXp() []int32 {
	if m != nil {
		return m.GraphXp
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphKill() []int32 {
	if m != nil {
		return m.GraphKill
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphTower() []int32 {
	if m != nil {
		return m.GraphTower
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetGraphRax() []int32 {
	if m != nil {
		return m.GraphRax
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStats_GraphData) GetTeamLocStats() []*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats {
	if m != nil {
		return m.TeamLocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_LocationStats struct {
	Stats                []int32  `protobuf:"varint,1,rep,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_GraphData_LocationStats{}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_GraphData_LocationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 11, 0}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_GraphData_LocationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_LocationStats proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_GraphData_LocationStats) GetStats() []int32 {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats struct {
	LocStats             []*CMsgDOTARealtimeGameStats_GraphData_LocationStats `protobuf:"bytes,1,rep,name=loc_stats,json=locStats" json:"loc_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Reset() {
	*m = CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats{}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{36, 11, 1}
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.Size(m)
}
func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats) GetLocStats() []*CMsgDOTARealtimeGameStats_GraphData_LocationStats {
	if m != nil {
		return m.LocStats
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse struct {
	Match                *CMsgDOTARealtimeGameStatsTerse_MatchDetails      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Teams                []*CMsgDOTARealtimeGameStatsTerse_TeamDetails     `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Buildings            []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	GraphData            *CMsgDOTARealtimeGameStatsTerse_GraphData         `protobuf:"bytes,4,opt,name=graph_data,json=graphData" json:"graph_data,omitempty"`
	DeltaFrame           *bool                                             `protobuf:"varint,5,opt,name=delta_frame,json=deltaFrame" json:"delta_frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse) Reset()         { *m = CMsgDOTARealtimeGameStatsTerse{} }
func (m *CMsgDOTARealtimeGameStatsTerse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStatsTerse) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStatsTerse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37}
}
func (m *CMsgDOTARealtimeGameStatsTerse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse) GetMatch() *CMsgDOTARealtimeGameStatsTerse_MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetTeams() []*CMsgDOTARealtimeGameStatsTerse_TeamDetails {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetBuildings() []*CMsgDOTARealtimeGameStatsTerse_BuildingDetails {
	if m != nil {
		return m.Buildings
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetGraphData() *CMsgDOTARealtimeGameStatsTerse_GraphData {
	if m != nil {
		return m.GraphData
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse) GetDeltaFrame() bool {
	if m != nil && m.DeltaFrame != nil {
		return *m.DeltaFrame
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse_TeamDetails struct {
	TeamNumber           *uint32                                         `protobuf:"varint,1,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	TeamId               *uint32                                         `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string                                         `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag              *string                                         `protobuf:"bytes,8,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamLogo             *uint64                                         `protobuf:"fixed64,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	Score                *uint32                                         `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
	NetWorth             *uint32                                         `protobuf:"varint,7,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Players              []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails `protobuf:"bytes,6,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_TeamDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_TeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37, 0}
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse_TeamDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_TeamDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamNumber() uint32 {
	if m != nil && m.TeamNumber != nil {
		return *m.TeamNumber
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_TeamDetails) GetPlayers() []*CMsgDOTARealtimeGameStatsTerse_PlayerDetails {
	if m != nil {
		return m.Players
	}
	return nil
}

type CMsgDOTARealtimeGameStatsTerse_PlayerDetails struct {
	Accountid            *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Playerid             *uint32  `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
	Name                 *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Team                 *uint32  `protobuf:"varint,4,opt,name=team" json:"team,omitempty"`
	Heroid               *uint32  `protobuf:"varint,5,opt,name=heroid" json:"heroid,omitempty"`
	Level                *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	KillCount            *uint32  `protobuf:"varint,7,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	DeathCount           *uint32  `protobuf:"varint,8,opt,name=death_count,json=deathCount" json:"death_count,omitempty"`
	AssistsCount         *uint32  `protobuf:"varint,9,opt,name=assists_count,json=assistsCount" json:"assists_count,omitempty"`
	DeniesCount          *uint32  `protobuf:"varint,10,opt,name=denies_count,json=deniesCount" json:"denies_count,omitempty"`
	LhCount              *uint32  `protobuf:"varint,11,opt,name=lh_count,json=lhCount" json:"lh_count,omitempty"`
	Gold                 *uint32  `protobuf:"varint,12,opt,name=gold" json:"gold,omitempty"`
	X                    *float32 `protobuf:"fixed32,13,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,14,opt,name=y" json:"y,omitempty"`
	NetWorth             *uint32  `protobuf:"varint,15,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_PlayerDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_PlayerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37, 1}
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_PlayerDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetPlayerid() uint32 {
	if m != nil && m.Playerid != nil {
		return *m.Playerid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetHeroid() uint32 {
	if m != nil && m.Heroid != nil {
		return *m.Heroid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetKillCount() uint32 {
	if m != nil && m.KillCount != nil {
		return *m.KillCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeathCount() uint32 {
	if m != nil && m.DeathCount != nil {
		return *m.DeathCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetAssistsCount() uint32 {
	if m != nil && m.AssistsCount != nil {
		return *m.AssistsCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetDeniesCount() uint32 {
	if m != nil && m.DeniesCount != nil {
		return *m.DeniesCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetLhCount() uint32 {
	if m != nil && m.LhCount != nil {
		return *m.LhCount
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetGold() uint32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_PlayerDetails) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

type CMsgDOTARealtimeGameStatsTerse_BuildingDetails struct {
	Team                 *uint32  `protobuf:"varint,1,opt,name=team" json:"team,omitempty"`
	Heading              *float32 `protobuf:"fixed32,2,opt,name=heading" json:"heading,omitempty"`
	Type                 *uint32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Lane                 *uint32  `protobuf:"varint,4,opt,name=lane" json:"lane,omitempty"`
	Tier                 *uint32  `protobuf:"varint,5,opt,name=tier" json:"tier,omitempty"`
	X                    *float32 `protobuf:"fixed32,6,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,7,opt,name=y" json:"y,omitempty"`
	Destroyed            *bool    `protobuf:"varint,8,opt,name=destroyed" json:"destroyed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_BuildingDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_BuildingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37, 2}
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_BuildingDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetHeading() float32 {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetLane() uint32 {
	if m != nil && m.Lane != nil {
		return *m.Lane
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetTier() uint32 {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_BuildingDetails) GetDestroyed() bool {
	if m != nil && m.Destroyed != nil {
		return *m.Destroyed
	}
	return false
}

type CMsgDOTARealtimeGameStatsTerse_MatchDetails struct {
	ServerSteamId              *uint64  `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	Matchid                    *uint64  `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	Timestamp                  *uint32  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	GameTime                   *int32   `protobuf:"varint,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	SteamBroadcasterAccountIds []uint32 `protobuf:"varint,6,rep,name=steam_broadcaster_account_ids,json=steamBroadcasterAccountIds" json:"steam_broadcaster_account_ids,omitempty"`
	GameMode                   *uint32  `protobuf:"varint,7,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LeagueId                   *uint32  `protobuf:"varint,8,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueNodeId               *uint32  `protobuf:"varint,9,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	GameState                  *uint32  `protobuf:"varint,10,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_MatchDetails{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) ProtoMessage() {}
func (*CMsgDOTARealtimeGameStatsTerse_MatchDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37, 3}
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse_MatchDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_MatchDetails proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetMatchid() uint64 {
	if m != nil && m.Matchid != nil {
		return *m.Matchid
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetSteamBroadcasterAccountIds() []uint32 {
	if m != nil {
		return m.SteamBroadcasterAccountIds
	}
	return nil
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetLeagueNodeId() uint32 {
	if m != nil && m.LeagueNodeId != nil {
		return *m.LeagueNodeId
	}
	return 0
}

func (m *CMsgDOTARealtimeGameStatsTerse_MatchDetails) GetGameState() uint32 {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return 0
}

type CMsgDOTARealtimeGameStatsTerse_GraphData struct {
	GraphGold            []int32  `protobuf:"varint,1,rep,name=graph_gold,json=graphGold" json:"graph_gold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) Reset() {
	*m = CMsgDOTARealtimeGameStatsTerse_GraphData{}
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTARealtimeGameStatsTerse_GraphData) ProtoMessage()    {}
func (*CMsgDOTARealtimeGameStatsTerse_GraphData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{37, 4}
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData.Unmarshal(m, b)
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTARealtimeGameStatsTerse_GraphData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData.Merge(dst, src)
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData.Size(m)
}
func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTARealtimeGameStatsTerse_GraphData proto.InternalMessageInfo

func (m *CMsgDOTARealtimeGameStatsTerse_GraphData) GetGraphGold() []int32 {
	if m != nil {
		return m.GraphGold
	}
	return nil
}

type CMsgDOTABroadcastTimelineEvent struct {
	Event                *EBroadcastTimelineEvent `protobuf:"varint,1,opt,name=event,enum=EBroadcastTimelineEvent,def=1" json:"event,omitempty"`
	Timestamp            *uint32                  `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Data                 *uint32                  `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	StringData           *string                  `protobuf:"bytes,4,opt,name=string_data,json=stringData" json:"string_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CMsgDOTABroadcastTimelineEvent) Reset()         { *m = CMsgDOTABroadcastTimelineEvent{} }
func (m *CMsgDOTABroadcastTimelineEvent) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABroadcastTimelineEvent) ProtoMessage()    {}
func (*CMsgDOTABroadcastTimelineEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{38}
}
func (m *CMsgDOTABroadcastTimelineEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABroadcastTimelineEvent.Unmarshal(m, b)
}
func (m *CMsgDOTABroadcastTimelineEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABroadcastTimelineEvent.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABroadcastTimelineEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABroadcastTimelineEvent.Merge(dst, src)
}
func (m *CMsgDOTABroadcastTimelineEvent) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABroadcastTimelineEvent.Size(m)
}
func (m *CMsgDOTABroadcastTimelineEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABroadcastTimelineEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABroadcastTimelineEvent proto.InternalMessageInfo

const Default_CMsgDOTABroadcastTimelineEvent_Event EBroadcastTimelineEvent = EBroadcastTimelineEvent_EBroadcastTimelineEvent_MatchStarted

func (m *CMsgDOTABroadcastTimelineEvent) GetEvent() EBroadcastTimelineEvent {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return Default_CMsgDOTABroadcastTimelineEvent_Event
}

func (m *CMsgDOTABroadcastTimelineEvent) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTABroadcastTimelineEvent) GetData() uint32 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *CMsgDOTABroadcastTimelineEvent) GetStringData() string {
	if m != nil && m.StringData != nil {
		return *m.StringData
	}
	return ""
}

type CMsgGCToClientMatchGroupsVersion struct {
	MatchgroupsVersion   *uint32  `protobuf:"varint,1,opt,name=matchgroups_version,json=matchgroupsVersion" json:"matchgroups_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgGCToClientMatchGroupsVersion) Reset()         { *m = CMsgGCToClientMatchGroupsVersion{} }
func (m *CMsgGCToClientMatchGroupsVersion) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientMatchGroupsVersion) ProtoMessage()    {}
func (*CMsgGCToClientMatchGroupsVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{39}
}
func (m *CMsgGCToClientMatchGroupsVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgGCToClientMatchGroupsVersion.Unmarshal(m, b)
}
func (m *CMsgGCToClientMatchGroupsVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgGCToClientMatchGroupsVersion.Marshal(b, m, deterministic)
}
func (dst *CMsgGCToClientMatchGroupsVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgGCToClientMatchGroupsVersion.Merge(dst, src)
}
func (m *CMsgGCToClientMatchGroupsVersion) XXX_Size() int {
	return xxx_messageInfo_CMsgGCToClientMatchGroupsVersion.Size(m)
}
func (m *CMsgGCToClientMatchGroupsVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgGCToClientMatchGroupsVersion.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgGCToClientMatchGroupsVersion proto.InternalMessageInfo

func (m *CMsgGCToClientMatchGroupsVersion) GetMatchgroupsVersion() uint32 {
	if m != nil && m.MatchgroupsVersion != nil {
		return *m.MatchgroupsVersion
	}
	return 0
}

type CMsgDOTASDOHeroStatsHistory struct {
	MatchId              *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode             *uint32  `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType            *uint32  `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	StartTime            *uint32  `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Won                  *bool    `protobuf:"varint,5,opt,name=won" json:"won,omitempty"`
	Gpm                  *uint32  `protobuf:"varint,6,opt,name=gpm" json:"gpm,omitempty"`
	Xpm                  *uint32  `protobuf:"varint,7,opt,name=xpm" json:"xpm,omitempty"`
	Kills                *uint32  `protobuf:"varint,8,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32  `protobuf:"varint,9,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32  `protobuf:"varint,10,opt,name=assists" json:"assists,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTASDOHeroStatsHistory) Reset()         { *m = CMsgDOTASDOHeroStatsHistory{} }
func (m *CMsgDOTASDOHeroStatsHistory) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASDOHeroStatsHistory) ProtoMessage()    {}
func (*CMsgDOTASDOHeroStatsHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{40}
}
func (m *CMsgDOTASDOHeroStatsHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASDOHeroStatsHistory.Unmarshal(m, b)
}
func (m *CMsgDOTASDOHeroStatsHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASDOHeroStatsHistory.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASDOHeroStatsHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASDOHeroStatsHistory.Merge(dst, src)
}
func (m *CMsgDOTASDOHeroStatsHistory) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASDOHeroStatsHistory.Size(m)
}
func (m *CMsgDOTASDOHeroStatsHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASDOHeroStatsHistory.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASDOHeroStatsHistory proto.InternalMessageInfo

func (m *CMsgDOTASDOHeroStatsHistory) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetLobbyType() uint32 {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetWon() bool {
	if m != nil && m.Won != nil {
		return *m.Won
	}
	return false
}

func (m *CMsgDOTASDOHeroStatsHistory) GetGpm() uint32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetXpm() uint32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTASDOHeroStatsHistory) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

type CMsgDOTASeasonRewards struct {
	Rewards              []*CMsgDOTASeasonRewards_Reward `protobuf:"bytes,1,rep,name=rewards" json:"rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CMsgDOTASeasonRewards) Reset()         { *m = CMsgDOTASeasonRewards{} }
func (m *CMsgDOTASeasonRewards) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonRewards) ProtoMessage()    {}
func (*CMsgDOTASeasonRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{41}
}
func (m *CMsgDOTASeasonRewards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonRewards.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonRewards.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonRewards.Merge(dst, src)
}
func (m *CMsgDOTASeasonRewards) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonRewards.Size(m)
}
func (m *CMsgDOTASeasonRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonRewards.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonRewards proto.InternalMessageInfo

func (m *CMsgDOTASeasonRewards) GetRewards() []*CMsgDOTASeasonRewards_Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type CMsgDOTASeasonRewards_Reward struct {
	Name                 *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Itemdef              *uint32                            `protobuf:"varint,2,opt,name=itemdef" json:"itemdef,omitempty"`
	Importance           *uint32                            `protobuf:"varint,3,opt,name=importance" json:"importance,omitempty"`
	BaseLevel            *uint32                            `protobuf:"varint,4,opt,name=base_level,json=baseLevel" json:"base_level,omitempty"`
	RepeatLevel          *uint32                            `protobuf:"varint,5,opt,name=repeat_level,json=repeatLevel" json:"repeat_level,omitempty"`
	RewardType           *CMsgDOTASeasonRewards_ERewardType `protobuf:"varint,6,opt,name=reward_type,json=rewardType,enum=CMsgDOTASeasonRewards_ERewardType,def=0" json:"reward_type,omitempty"`
	Image                *string                            `protobuf:"bytes,7,opt,name=image" json:"image,omitempty"`
	ActionId             *uint32                            `protobuf:"varint,8,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	EffectIndex          *uint32                            `protobuf:"varint,9,opt,name=effect_index,json=effectIndex" json:"effect_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTASeasonRewards_Reward) Reset()         { *m = CMsgDOTASeasonRewards_Reward{} }
func (m *CMsgDOTASeasonRewards_Reward) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonRewards_Reward) ProtoMessage()    {}
func (*CMsgDOTASeasonRewards_Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{41, 0}
}
func (m *CMsgDOTASeasonRewards_Reward) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonRewards_Reward.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonRewards_Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonRewards_Reward.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonRewards_Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonRewards_Reward.Merge(dst, src)
}
func (m *CMsgDOTASeasonRewards_Reward) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonRewards_Reward.Size(m)
}
func (m *CMsgDOTASeasonRewards_Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonRewards_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonRewards_Reward proto.InternalMessageInfo

const Default_CMsgDOTASeasonRewards_Reward_RewardType CMsgDOTASeasonRewards_ERewardType = CMsgDOTASeasonRewards_EconItem

func (m *CMsgDOTASeasonRewards_Reward) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTASeasonRewards_Reward) GetItemdef() uint32 {
	if m != nil && m.Itemdef != nil {
		return *m.Itemdef
	}
	return 0
}

func (m *CMsgDOTASeasonRewards_Reward) GetImportance() uint32 {
	if m != nil && m.Importance != nil {
		return *m.Importance
	}
	return 0
}

func (m *CMsgDOTASeasonRewards_Reward) GetBaseLevel() uint32 {
	if m != nil && m.BaseLevel != nil {
		return *m.BaseLevel
	}
	return 0
}

func (m *CMsgDOTASeasonRewards_Reward) GetRepeatLevel() uint32 {
	if m != nil && m.RepeatLevel != nil {
		return *m.RepeatLevel
	}
	return 0
}

func (m *CMsgDOTASeasonRewards_Reward) GetRewardType() CMsgDOTASeasonRewards_ERewardType {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return Default_CMsgDOTASeasonRewards_Reward_RewardType
}

func (m *CMsgDOTASeasonRewards_Reward) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CMsgDOTASeasonRewards_Reward) GetActionId() uint32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CMsgDOTASeasonRewards_Reward) GetEffectIndex() uint32 {
	if m != nil && m.EffectIndex != nil {
		return *m.EffectIndex
	}
	return 0
}

type CMsgDOTASeasonAchievements struct {
	Achievements         []*CMsgDOTASeasonAchievements_Achievement `protobuf:"bytes,1,rep,name=achievements" json:"achievements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CMsgDOTASeasonAchievements) Reset()         { *m = CMsgDOTASeasonAchievements{} }
func (m *CMsgDOTASeasonAchievements) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonAchievements) ProtoMessage()    {}
func (*CMsgDOTASeasonAchievements) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{42}
}
func (m *CMsgDOTASeasonAchievements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonAchievements.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonAchievements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonAchievements.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonAchievements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonAchievements.Merge(dst, src)
}
func (m *CMsgDOTASeasonAchievements) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonAchievements.Size(m)
}
func (m *CMsgDOTASeasonAchievements) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonAchievements.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonAchievements proto.InternalMessageInfo

func (m *CMsgDOTASeasonAchievements) GetAchievements() []*CMsgDOTASeasonAchievements_Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

type CMsgDOTASeasonAchievements_Achievement struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description          *string  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Image                *string  `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ActionId             *uint32  `protobuf:"varint,4,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	MaxGrants            *uint32  `protobuf:"varint,5,opt,name=max_grants,json=maxGrants" json:"max_grants,omitempty"`
	NormalPoints         *uint32  `protobuf:"varint,6,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	TrackingAchievement  *uint32  `protobuf:"varint,7,opt,name=tracking_achievement,json=trackingAchievement" json:"tracking_achievement,omitempty"`
	AchievementGoal      *uint32  `protobuf:"varint,8,opt,name=achievement_goal,json=achievementGoal" json:"achievement_goal,omitempty"`
	AchievementLevel     *uint32  `protobuf:"varint,9,opt,name=achievement_level,json=achievementLevel" json:"achievement_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTASeasonAchievements_Achievement) Reset() {
	*m = CMsgDOTASeasonAchievements_Achievement{}
}
func (m *CMsgDOTASeasonAchievements_Achievement) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonAchievements_Achievement) ProtoMessage()    {}
func (*CMsgDOTASeasonAchievements_Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{42, 0}
}
func (m *CMsgDOTASeasonAchievements_Achievement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonAchievements_Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonAchievements_Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement.Merge(dst, src)
}
func (m *CMsgDOTASeasonAchievements_Achievement) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement.Size(m)
}
func (m *CMsgDOTASeasonAchievements_Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonAchievements_Achievement proto.InternalMessageInfo

func (m *CMsgDOTASeasonAchievements_Achievement) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetActionId() uint32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetMaxGrants() uint32 {
	if m != nil && m.MaxGrants != nil {
		return *m.MaxGrants
	}
	return 0
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetNormalPoints() uint32 {
	if m != nil && m.NormalPoints != nil {
		return *m.NormalPoints
	}
	return 0
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetTrackingAchievement() uint32 {
	if m != nil && m.TrackingAchievement != nil {
		return *m.TrackingAchievement
	}
	return 0
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetAchievementGoal() uint32 {
	if m != nil && m.AchievementGoal != nil {
		return *m.AchievementGoal
	}
	return 0
}

func (m *CMsgDOTASeasonAchievements_Achievement) GetAchievementLevel() uint32 {
	if m != nil && m.AchievementLevel != nil {
		return *m.AchievementLevel
	}
	return 0
}

type CMsgDOTASeasonPredictions struct {
	Predictions                         []*CMsgDOTASeasonPredictions_Prediction       `protobuf:"bytes,1,rep,name=predictions" json:"predictions,omitempty"`
	InGamePredictions                   []*CMsgDOTASeasonPredictions_InGamePrediction `protobuf:"bytes,2,rep,name=in_game_predictions,json=inGamePredictions" json:"in_game_predictions,omitempty"`
	InGamePredictionCountPerGame        *uint32                                       `protobuf:"varint,3,opt,name=in_game_prediction_count_per_game,json=inGamePredictionCountPerGame" json:"in_game_prediction_count_per_game,omitempty"`
	InGamePredictionVotingPeriodMinutes *uint32                                       `protobuf:"varint,4,opt,name=in_game_prediction_voting_period_minutes,json=inGamePredictionVotingPeriodMinutes" json:"in_game_prediction_voting_period_minutes,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}                                      `json:"-"`
	XXX_unrecognized                    []byte                                        `json:"-"`
	XXX_sizecache                       int32                                         `json:"-"`
}

func (m *CMsgDOTASeasonPredictions) Reset()         { *m = CMsgDOTASeasonPredictions{} }
func (m *CMsgDOTASeasonPredictions) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonPredictions) ProtoMessage()    {}
func (*CMsgDOTASeasonPredictions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43}
}
func (m *CMsgDOTASeasonPredictions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions.Size(m)
}
func (m *CMsgDOTASeasonPredictions) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions proto.InternalMessageInfo

func (m *CMsgDOTASeasonPredictions) GetPredictions() []*CMsgDOTASeasonPredictions_Prediction {
	if m != nil {
		return m.Predictions
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions) GetInGamePredictions() []*CMsgDOTASeasonPredictions_InGamePrediction {
	if m != nil {
		return m.InGamePredictions
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions) GetInGamePredictionCountPerGame() uint32 {
	if m != nil && m.InGamePredictionCountPerGame != nil {
		return *m.InGamePredictionCountPerGame
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions) GetInGamePredictionVotingPeriodMinutes() uint32 {
	if m != nil && m.InGamePredictionVotingPeriodMinutes != nil {
		return *m.InGamePredictionVotingPeriodMinutes
	}
	return 0
}

type CMsgDOTASeasonPredictions_Choice struct {
	Value                *uint32  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MinRawValue          *uint32  `protobuf:"varint,3,opt,name=min_raw_value,json=minRawValue" json:"min_raw_value,omitempty"`
	MaxRawValue          *uint32  `protobuf:"varint,4,opt,name=max_raw_value,json=maxRawValue" json:"max_raw_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTASeasonPredictions_Choice) Reset()         { *m = CMsgDOTASeasonPredictions_Choice{} }
func (m *CMsgDOTASeasonPredictions_Choice) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonPredictions_Choice) ProtoMessage()    {}
func (*CMsgDOTASeasonPredictions_Choice) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 0}
}
func (m *CMsgDOTASeasonPredictions_Choice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Choice.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions_Choice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Choice.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions_Choice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Choice.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions_Choice) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Choice.Size(m)
}
func (m *CMsgDOTASeasonPredictions_Choice) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Choice.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions_Choice proto.InternalMessageInfo

func (m *CMsgDOTASeasonPredictions_Choice) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Choice) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_Choice) GetMinRawValue() uint32 {
	if m != nil && m.MinRawValue != nil {
		return *m.MinRawValue
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Choice) GetMaxRawValue() uint32 {
	if m != nil && m.MaxRawValue != nil {
		return *m.MaxRawValue
	}
	return 0
}

type CMsgDOTASeasonPredictions_Answers struct {
	AnswerId             *uint32  `protobuf:"varint,1,opt,name=answer_id,json=answerId" json:"answer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTASeasonPredictions_Answers) Reset()         { *m = CMsgDOTASeasonPredictions_Answers{} }
func (m *CMsgDOTASeasonPredictions_Answers) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonPredictions_Answers) ProtoMessage()    {}
func (*CMsgDOTASeasonPredictions_Answers) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 1}
}
func (m *CMsgDOTASeasonPredictions_Answers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Answers.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions_Answers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Answers.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions_Answers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Answers.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions_Answers) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Answers.Size(m)
}
func (m *CMsgDOTASeasonPredictions_Answers) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Answers.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions_Answers proto.InternalMessageInfo

func (m *CMsgDOTASeasonPredictions_Answers) GetAnswerId() uint32 {
	if m != nil && m.AnswerId != nil {
		return *m.AnswerId
	}
	return 0
}

type CMsgDOTASeasonPredictions_QueryKeyValues struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTASeasonPredictions_QueryKeyValues) Reset() {
	*m = CMsgDOTASeasonPredictions_QueryKeyValues{}
}
func (m *CMsgDOTASeasonPredictions_QueryKeyValues) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonPredictions_QueryKeyValues) ProtoMessage()    {}
func (*CMsgDOTASeasonPredictions_QueryKeyValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 2}
}
func (m *CMsgDOTASeasonPredictions_QueryKeyValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions_QueryKeyValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions_QueryKeyValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions_QueryKeyValues) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues.Size(m)
}
func (m *CMsgDOTASeasonPredictions_QueryKeyValues) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions_QueryKeyValues proto.InternalMessageInfo

func (m *CMsgDOTASeasonPredictions_QueryKeyValues) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_QueryKeyValues) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CMsgDOTASeasonPredictions_Prediction struct {
	Type                 *CMsgDOTASeasonPredictionsEPredictionType `protobuf:"varint,1,opt,name=type,enum=CMsgDOTASeasonPredictionsEPredictionType,def=0" json:"type,omitempty"`
	Question             *string                                   `protobuf:"bytes,2,opt,name=question" json:"question,omitempty"`
	Choices              []*CMsgDOTASeasonPredictions_Choice       `protobuf:"bytes,3,rep,name=choices" json:"choices,omitempty"`
	SelectionId          *uint32                                   `protobuf:"varint,4,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	StartDate            *uint32                                   `protobuf:"varint,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	LockDate             *uint32                                   `protobuf:"varint,6,opt,name=lock_date,json=lockDate" json:"lock_date,omitempty"`
	Reward               *uint32                                   `protobuf:"varint,7,opt,name=reward" json:"reward,omitempty"`
	AnswerType           *CMsgDOTASeasonPredictionsEAnswerType     `protobuf:"varint,8,opt,name=answer_type,json=answerType,enum=CMsgDOTASeasonPredictionsEAnswerType,def=0" json:"answer_type,omitempty"`
	AnswerId             *uint32                                   `protobuf:"varint,9,opt,name=answer_id,json=answerId" json:"answer_id,omitempty"`
	Answers              []*CMsgDOTASeasonPredictions_Answers      `protobuf:"bytes,10,rep,name=answers" json:"answers,omitempty"`
	QueryName            *string                                   `protobuf:"bytes,11,opt,name=query_name,json=queryName" json:"query_name,omitempty"`
	QueryBindParams      []uint32                                  `protobuf:"varint,12,rep,name=query_bind_params,json=queryBindParams" json:"query_bind_params,omitempty"`
	LockOnSelectionId    *uint32                                   `protobuf:"varint,13,opt,name=lock_on_selection_id,json=lockOnSelectionId" json:"lock_on_selection_id,omitempty"`
	LockOnSelectionValue *uint32                                   `protobuf:"varint,14,opt,name=lock_on_selection_value,json=lockOnSelectionValue" json:"lock_on_selection_value,omitempty"`
	LockOnSelectionSet   *bool                                     `protobuf:"varint,15,opt,name=lock_on_selection_set,json=lockOnSelectionSet" json:"lock_on_selection_set,omitempty"`
	UseAnswerValueRanges *bool                                     `protobuf:"varint,16,opt,name=use_answer_value_ranges,json=useAnswerValueRanges" json:"use_answer_value_ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CMsgDOTASeasonPredictions_Prediction) Reset()         { *m = CMsgDOTASeasonPredictions_Prediction{} }
func (m *CMsgDOTASeasonPredictions_Prediction) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTASeasonPredictions_Prediction) ProtoMessage()    {}
func (*CMsgDOTASeasonPredictions_Prediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 3}
}
func (m *CMsgDOTASeasonPredictions_Prediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions_Prediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions_Prediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions_Prediction) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction.Size(m)
}
func (m *CMsgDOTASeasonPredictions_Prediction) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions_Prediction proto.InternalMessageInfo

const Default_CMsgDOTASeasonPredictions_Prediction_Type CMsgDOTASeasonPredictionsEPredictionType = CMsgDOTASeasonPredictions_Generic
const Default_CMsgDOTASeasonPredictions_Prediction_AnswerType CMsgDOTASeasonPredictionsEAnswerType = CMsgDOTASeasonPredictions_SingleInt

func (m *CMsgDOTASeasonPredictions_Prediction) GetType() CMsgDOTASeasonPredictionsEPredictionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMsgDOTASeasonPredictions_Prediction_Type
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetQuestion() string {
	if m != nil && m.Question != nil {
		return *m.Question
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetChoices() []*CMsgDOTASeasonPredictions_Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetSelectionId() uint32 {
	if m != nil && m.SelectionId != nil {
		return *m.SelectionId
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetStartDate() uint32 {
	if m != nil && m.StartDate != nil {
		return *m.StartDate
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetLockDate() uint32 {
	if m != nil && m.LockDate != nil {
		return *m.LockDate
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetReward() uint32 {
	if m != nil && m.Reward != nil {
		return *m.Reward
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetAnswerType() CMsgDOTASeasonPredictionsEAnswerType {
	if m != nil && m.AnswerType != nil {
		return *m.AnswerType
	}
	return Default_CMsgDOTASeasonPredictions_Prediction_AnswerType
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetAnswerId() uint32 {
	if m != nil && m.AnswerId != nil {
		return *m.AnswerId
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetAnswers() []*CMsgDOTASeasonPredictions_Answers {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetQueryName() string {
	if m != nil && m.QueryName != nil {
		return *m.QueryName
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetQueryBindParams() []uint32 {
	if m != nil {
		return m.QueryBindParams
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionId() uint32 {
	if m != nil && m.LockOnSelectionId != nil {
		return *m.LockOnSelectionId
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionValue() uint32 {
	if m != nil && m.LockOnSelectionValue != nil {
		return *m.LockOnSelectionValue
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetLockOnSelectionSet() bool {
	if m != nil && m.LockOnSelectionSet != nil {
		return *m.LockOnSelectionSet
	}
	return false
}

func (m *CMsgDOTASeasonPredictions_Prediction) GetUseAnswerValueRanges() bool {
	if m != nil && m.UseAnswerValueRanges != nil {
		return *m.UseAnswerValueRanges
	}
	return false
}

type CMsgDOTASeasonPredictions_InGamePrediction struct {
	Id                   *uint32                                          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string                                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                 *CMsgDOTASeasonPredictionsEPredictionType        `protobuf:"varint,3,opt,name=type,enum=CMsgDOTASeasonPredictionsEPredictionType,def=0" json:"type,omitempty"`
	Group                *CMsgDOTASeasonPredictionsERandomSelectionGroupT `protobuf:"varint,4,opt,name=group,enum=CMsgDOTASeasonPredictionsERandomSelectionGroupT,def=0" json:"group,omitempty"`
	Question             *string                                          `protobuf:"bytes,5,opt,name=question" json:"question,omitempty"`
	Choices              []*CMsgDOTASeasonPredictions_Choice              `protobuf:"bytes,6,rep,name=choices" json:"choices,omitempty"`
	RequiredHeroes       []string                                         `protobuf:"bytes,7,rep,name=required_heroes,json=requiredHeroes" json:"required_heroes,omitempty"`
	QueryName            *string                                          `protobuf:"bytes,8,opt,name=query_name,json=queryName" json:"query_name,omitempty"`
	QueryValues          []*CMsgDOTASeasonPredictions_QueryKeyValues      `protobuf:"bytes,9,rep,name=query_values,json=queryValues" json:"query_values,omitempty"`
	AnswerResolutionType *CMsgDOTASeasonPredictionsEResolutionTypeT       `protobuf:"varint,10,opt,name=answer_resolution_type,json=answerResolutionType,enum=CMsgDOTASeasonPredictionsEResolutionTypeT,def=0" json:"answer_resolution_type,omitempty"`
	PointsToGrant        *uint32                                          `protobuf:"varint,11,opt,name=points_to_grant,json=pointsToGrant" json:"points_to_grant,omitempty"`
	RewardAction         *uint32                                          `protobuf:"varint,12,opt,name=reward_action,json=rewardAction" json:"reward_action,omitempty"`
	DebugForceSelection  *uint32                                          `protobuf:"varint,13,opt,name=debug_force_selection,json=debugForceSelection" json:"debug_force_selection,omitempty"`
	RawValueType         *CMsgDOTASeasonPredictionsERawValueTypeT         `protobuf:"varint,14,opt,name=raw_value_type,json=rawValueType,enum=CMsgDOTASeasonPredictionsERawValueTypeT,def=0" json:"raw_value_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) Reset() {
	*m = CMsgDOTASeasonPredictions_InGamePrediction{}
}
func (m *CMsgDOTASeasonPredictions_InGamePrediction) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTASeasonPredictions_InGamePrediction) ProtoMessage() {}
func (*CMsgDOTASeasonPredictions_InGamePrediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{43, 4}
}
func (m *CMsgDOTASeasonPredictions_InGamePrediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction.Unmarshal(m, b)
}
func (m *CMsgDOTASeasonPredictions_InGamePrediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTASeasonPredictions_InGamePrediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction.Merge(dst, src)
}
func (m *CMsgDOTASeasonPredictions_InGamePrediction) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction.Size(m)
}
func (m *CMsgDOTASeasonPredictions_InGamePrediction) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTASeasonPredictions_InGamePrediction proto.InternalMessageInfo

const Default_CMsgDOTASeasonPredictions_InGamePrediction_Type CMsgDOTASeasonPredictionsEPredictionType = CMsgDOTASeasonPredictions_Generic
const Default_CMsgDOTASeasonPredictions_InGamePrediction_Group CMsgDOTASeasonPredictionsERandomSelectionGroupT = CMsgDOTASeasonPredictions_EarlyGame
const Default_CMsgDOTASeasonPredictions_InGamePrediction_AnswerResolutionType CMsgDOTASeasonPredictionsEResolutionTypeT = CMsgDOTASeasonPredictions_InvalidQuery
const Default_CMsgDOTASeasonPredictions_InGamePrediction_RawValueType CMsgDOTASeasonPredictionsERawValueTypeT = CMsgDOTASeasonPredictions_Number

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetType() CMsgDOTASeasonPredictionsEPredictionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_Type
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetGroup() CMsgDOTASeasonPredictionsERandomSelectionGroupT {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_Group
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetQuestion() string {
	if m != nil && m.Question != nil {
		return *m.Question
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetChoices() []*CMsgDOTASeasonPredictions_Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetRequiredHeroes() []string {
	if m != nil {
		return m.RequiredHeroes
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetQueryName() string {
	if m != nil && m.QueryName != nil {
		return *m.QueryName
	}
	return ""
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetQueryValues() []*CMsgDOTASeasonPredictions_QueryKeyValues {
	if m != nil {
		return m.QueryValues
	}
	return nil
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetAnswerResolutionType() CMsgDOTASeasonPredictionsEResolutionTypeT {
	if m != nil && m.AnswerResolutionType != nil {
		return *m.AnswerResolutionType
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_AnswerResolutionType
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetPointsToGrant() uint32 {
	if m != nil && m.PointsToGrant != nil {
		return *m.PointsToGrant
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetRewardAction() uint32 {
	if m != nil && m.RewardAction != nil {
		return *m.RewardAction
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetDebugForceSelection() uint32 {
	if m != nil && m.DebugForceSelection != nil {
		return *m.DebugForceSelection
	}
	return 0
}

func (m *CMsgDOTASeasonPredictions_InGamePrediction) GetRawValueType() CMsgDOTASeasonPredictionsERawValueTypeT {
	if m != nil && m.RawValueType != nil {
		return *m.RawValueType
	}
	return Default_CMsgDOTASeasonPredictions_InGamePrediction_RawValueType
}

type CMsgDOTAMatch struct {
	Duration             *uint32                             `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	StartTime            *uint32                             `protobuf:"fixed32,4,opt,name=startTime" json:"startTime,omitempty"`
	Players              []*CMsgDOTAMatch_Player             `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	MatchId              *uint64                             `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TowerStatus          []uint32                            `protobuf:"varint,8,rep,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus       []uint32                            `protobuf:"varint,9,rep,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster              *uint32                             `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	FirstBloodTime       *uint32                             `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	ReplaySalt           *uint32                             `protobuf:"fixed32,13,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	ServerIp             *uint32                             `protobuf:"fixed32,14,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort           *uint32                             `protobuf:"varint,15,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LobbyType            *uint32                             `protobuf:"varint,16,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	HumanPlayers         *uint32                             `protobuf:"varint,17,opt,name=human_players,json=humanPlayers" json:"human_players,omitempty"`
	AverageSkill         *uint32                             `protobuf:"varint,18,opt,name=average_skill,json=averageSkill" json:"average_skill,omitempty"`
	GameBalance          *float32                            `protobuf:"fixed32,19,opt,name=game_balance,json=gameBalance" json:"game_balance,omitempty"`
	RadiantTeamId        *uint32                             `protobuf:"varint,20,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireTeamId           *uint32                             `protobuf:"varint,21,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Leagueid             *uint32                             `protobuf:"varint,22,opt,name=leagueid" json:"leagueid,omitempty"`
	RadiantTeamName      *string                             `protobuf:"bytes,23,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	DireTeamName         *string                             `protobuf:"bytes,24,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	RadiantTeamLogo      *uint64                             `protobuf:"varint,25,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	DireTeamLogo         *uint64                             `protobuf:"varint,26,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	RadiantTeamComplete  *uint32                             `protobuf:"varint,27,opt,name=radiant_team_complete,json=radiantTeamComplete" json:"radiant_team_complete,omitempty"`
	DireTeamComplete     *uint32                             `protobuf:"varint,28,opt,name=dire_team_complete,json=direTeamComplete" json:"dire_team_complete,omitempty"`
	PositiveVotes        *uint32                             `protobuf:"varint,29,opt,name=positive_votes,json=positiveVotes" json:"positive_votes,omitempty"`
	NegativeVotes        *uint32                             `protobuf:"varint,30,opt,name=negative_votes,json=negativeVotes" json:"negative_votes,omitempty"`
	GameMode             *DOTA_GameMode                      `protobuf:"varint,31,opt,name=game_mode,json=gameMode,enum=DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	PicksBans            []*CMatchHeroSelectEvent            `protobuf:"bytes,32,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	MatchSeqNum          *uint64                             `protobuf:"varint,33,opt,name=match_seq_num,json=matchSeqNum" json:"match_seq_num,omitempty"`
	ReplayState          *CMsgDOTAMatch_ReplayState          `protobuf:"varint,34,opt,name=replay_state,json=replayState,enum=CMsgDOTAMatch_ReplayState,def=0" json:"replay_state,omitempty"`
	RadiantGuildId       *uint32                             `protobuf:"varint,35,opt,name=radiant_guild_id,json=radiantGuildId" json:"radiant_guild_id,omitempty"`
	DireGuildId          *uint32                             `protobuf:"varint,36,opt,name=dire_guild_id,json=direGuildId" json:"dire_guild_id,omitempty"`
	RadiantTeamTag       *string                             `protobuf:"bytes,37,opt,name=radiant_team_tag,json=radiantTeamTag" json:"radiant_team_tag,omitempty"`
	DireTeamTag          *string                             `protobuf:"bytes,38,opt,name=dire_team_tag,json=direTeamTag" json:"dire_team_tag,omitempty"`
	SeriesId             *uint32                             `protobuf:"varint,39,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType           *uint32                             `protobuf:"varint,40,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	BroadcasterChannels  []*CMsgDOTAMatch_BroadcasterChannel `protobuf:"bytes,43,rep,name=broadcaster_channels,json=broadcasterChannels" json:"broadcaster_channels,omitempty"`
	Engine               *uint32                             `protobuf:"varint,44,opt,name=engine" json:"engine,omitempty"`
	CustomGameData       *CMsgDOTAMatch_CustomGameData       `protobuf:"bytes,45,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags           *uint32                             `protobuf:"varint,46,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	PrivateMetadataKey   *uint32                             `protobuf:"fixed32,47,opt,name=private_metadata_key,json=privateMetadataKey" json:"private_metadata_key,omitempty"`
	RadiantTeamScore     *uint32                             `protobuf:"varint,48,opt,name=radiant_team_score,json=radiantTeamScore" json:"radiant_team_score,omitempty"`
	DireTeamScore        *uint32                             `protobuf:"varint,49,opt,name=dire_team_score,json=direTeamScore" json:"dire_team_score,omitempty"`
	MatchOutcome         *EMatchOutcome                      `protobuf:"varint,50,opt,name=match_outcome,json=matchOutcome,enum=EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	TournamentId         *uint32                             `protobuf:"varint,51,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentRound      *uint32                             `protobuf:"varint,52,opt,name=tournament_round,json=tournamentRound" json:"tournament_round,omitempty"`
	PreGameDuration      *uint32                             `protobuf:"varint,53,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CMsgDOTAMatch) Reset()         { *m = CMsgDOTAMatch{} }
func (m *CMsgDOTAMatch) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch) ProtoMessage()    {}
func (*CMsgDOTAMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44}
}
func (m *CMsgDOTAMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch.Merge(dst, src)
}
func (m *CMsgDOTAMatch) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch.Size(m)
}
func (m *CMsgDOTAMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch proto.InternalMessageInfo

const Default_CMsgDOTAMatch_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE
const Default_CMsgDOTAMatch_ReplayState CMsgDOTAMatch_ReplayState = CMsgDOTAMatch_REPLAY_AVAILABLE
const Default_CMsgDOTAMatch_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown

func (m *CMsgDOTAMatch) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *CMsgDOTAMatch) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAMatch) GetPlayers() []*CMsgDOTAMatch_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTAMatch) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetTowerStatus() []uint32 {
	if m != nil {
		return m.TowerStatus
	}
	return nil
}

func (m *CMsgDOTAMatch) GetBarracksStatus() []uint32 {
	if m != nil {
		return m.BarracksStatus
	}
	return nil
}

func (m *CMsgDOTAMatch) GetCluster() uint32 {
	if m != nil && m.Cluster != nil {
		return *m.Cluster
	}
	return 0
}

func (m *CMsgDOTAMatch) GetFirstBloodTime() uint32 {
	if m != nil && m.FirstBloodTime != nil {
		return *m.FirstBloodTime
	}
	return 0
}

func (m *CMsgDOTAMatch) GetReplaySalt() uint32 {
	if m != nil && m.ReplaySalt != nil {
		return *m.ReplaySalt
	}
	return 0
}

func (m *CMsgDOTAMatch) GetServerIp() uint32 {
	if m != nil && m.ServerIp != nil {
		return *m.ServerIp
	}
	return 0
}

func (m *CMsgDOTAMatch) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *CMsgDOTAMatch) GetLobbyType() uint32 {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return 0
}

func (m *CMsgDOTAMatch) GetHumanPlayers() uint32 {
	if m != nil && m.HumanPlayers != nil {
		return *m.HumanPlayers
	}
	return 0
}

func (m *CMsgDOTAMatch) GetAverageSkill() uint32 {
	if m != nil && m.AverageSkill != nil {
		return *m.AverageSkill
	}
	return 0
}

func (m *CMsgDOTAMatch) GetGameBalance() float32 {
	if m != nil && m.GameBalance != nil {
		return *m.GameBalance
	}
	return 0
}

func (m *CMsgDOTAMatch) GetRadiantTeamId() uint32 {
	if m != nil && m.RadiantTeamId != nil {
		return *m.RadiantTeamId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetDireTeamId() uint32 {
	if m != nil && m.DireTeamId != nil {
		return *m.DireTeamId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CMsgDOTAMatch) GetRadiantTeamName() string {
	if m != nil && m.RadiantTeamName != nil {
		return *m.RadiantTeamName
	}
	return ""
}

func (m *CMsgDOTAMatch) GetDireTeamName() string {
	if m != nil && m.DireTeamName != nil {
		return *m.DireTeamName
	}
	return ""
}

func (m *CMsgDOTAMatch) GetRadiantTeamLogo() uint64 {
	if m != nil && m.RadiantTeamLogo != nil {
		return *m.RadiantTeamLogo
	}
	return 0
}

func (m *CMsgDOTAMatch) GetDireTeamLogo() uint64 {
	if m != nil && m.DireTeamLogo != nil {
		return *m.DireTeamLogo
	}
	return 0
}

func (m *CMsgDOTAMatch) GetRadiantTeamComplete() uint32 {
	if m != nil && m.RadiantTeamComplete != nil {
		return *m.RadiantTeamComplete
	}
	return 0
}

func (m *CMsgDOTAMatch) GetDireTeamComplete() uint32 {
	if m != nil && m.DireTeamComplete != nil {
		return *m.DireTeamComplete
	}
	return 0
}

func (m *CMsgDOTAMatch) GetPositiveVotes() uint32 {
	if m != nil && m.PositiveVotes != nil {
		return *m.PositiveVotes
	}
	return 0
}

func (m *CMsgDOTAMatch) GetNegativeVotes() uint32 {
	if m != nil && m.NegativeVotes != nil {
		return *m.NegativeVotes
	}
	return 0
}

func (m *CMsgDOTAMatch) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgDOTAMatch_GameMode
}

func (m *CMsgDOTAMatch) GetPicksBans() []*CMatchHeroSelectEvent {
	if m != nil {
		return m.PicksBans
	}
	return nil
}

func (m *CMsgDOTAMatch) GetMatchSeqNum() uint64 {
	if m != nil && m.MatchSeqNum != nil {
		return *m.MatchSeqNum
	}
	return 0
}

func (m *CMsgDOTAMatch) GetReplayState() CMsgDOTAMatch_ReplayState {
	if m != nil && m.ReplayState != nil {
		return *m.ReplayState
	}
	return Default_CMsgDOTAMatch_ReplayState
}

func (m *CMsgDOTAMatch) GetRadiantGuildId() uint32 {
	if m != nil && m.RadiantGuildId != nil {
		return *m.RadiantGuildId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetDireGuildId() uint32 {
	if m != nil && m.DireGuildId != nil {
		return *m.DireGuildId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetRadiantTeamTag() string {
	if m != nil && m.RadiantTeamTag != nil {
		return *m.RadiantTeamTag
	}
	return ""
}

func (m *CMsgDOTAMatch) GetDireTeamTag() string {
	if m != nil && m.DireTeamTag != nil {
		return *m.DireTeamTag
	}
	return ""
}

func (m *CMsgDOTAMatch) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTAMatch) GetBroadcasterChannels() []*CMsgDOTAMatch_BroadcasterChannel {
	if m != nil {
		return m.BroadcasterChannels
	}
	return nil
}

func (m *CMsgDOTAMatch) GetEngine() uint32 {
	if m != nil && m.Engine != nil {
		return *m.Engine
	}
	return 0
}

func (m *CMsgDOTAMatch) GetCustomGameData() *CMsgDOTAMatch_CustomGameData {
	if m != nil {
		return m.CustomGameData
	}
	return nil
}

func (m *CMsgDOTAMatch) GetMatchFlags() uint32 {
	if m != nil && m.MatchFlags != nil {
		return *m.MatchFlags
	}
	return 0
}

func (m *CMsgDOTAMatch) GetPrivateMetadataKey() uint32 {
	if m != nil && m.PrivateMetadataKey != nil {
		return *m.PrivateMetadataKey
	}
	return 0
}

func (m *CMsgDOTAMatch) GetRadiantTeamScore() uint32 {
	if m != nil && m.RadiantTeamScore != nil {
		return *m.RadiantTeamScore
	}
	return 0
}

func (m *CMsgDOTAMatch) GetDireTeamScore() uint32 {
	if m != nil && m.DireTeamScore != nil {
		return *m.DireTeamScore
	}
	return 0
}

func (m *CMsgDOTAMatch) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CMsgDOTAMatch_MatchOutcome
}

func (m *CMsgDOTAMatch) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTAMatch) GetTournamentRound() uint32 {
	if m != nil && m.TournamentRound != nil {
		return *m.TournamentRound
	}
	return 0
}

func (m *CMsgDOTAMatch) GetPreGameDuration() uint32 {
	if m != nil && m.PreGameDuration != nil {
		return *m.PreGameDuration
	}
	return 0
}

type CMsgDOTAMatch_Player struct {
	AccountId                *uint32                              `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot               *uint32                              `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId                   *uint32                              `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Item_0                   *uint32                              `protobuf:"varint,4,opt,name=item_0,json=item0" json:"item_0,omitempty"`
	Item_1                   *uint32                              `protobuf:"varint,5,opt,name=item_1,json=item1" json:"item_1,omitempty"`
	Item_2                   *uint32                              `protobuf:"varint,6,opt,name=item_2,json=item2" json:"item_2,omitempty"`
	Item_3                   *uint32                              `protobuf:"varint,7,opt,name=item_3,json=item3" json:"item_3,omitempty"`
	Item_4                   *uint32                              `protobuf:"varint,8,opt,name=item_4,json=item4" json:"item_4,omitempty"`
	Item_5                   *uint32                              `protobuf:"varint,9,opt,name=item_5,json=item5" json:"item_5,omitempty"`
	Item_6                   *uint32                              `protobuf:"varint,59,opt,name=item_6,json=item6" json:"item_6,omitempty"`
	Item_7                   *uint32                              `protobuf:"varint,60,opt,name=item_7,json=item7" json:"item_7,omitempty"`
	Item_8                   *uint32                              `protobuf:"varint,61,opt,name=item_8,json=item8" json:"item_8,omitempty"`
	ExpectedTeamContribution *float32                             `protobuf:"fixed32,10,opt,name=expected_team_contribution,json=expectedTeamContribution" json:"expected_team_contribution,omitempty"`
	ScaledMetric             *float32                             `protobuf:"fixed32,11,opt,name=scaled_metric,json=scaledMetric" json:"scaled_metric,omitempty"`
	PreviousRank             *uint32                              `protobuf:"varint,12,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	RankChange               *int32                               `protobuf:"zigzag32,13,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	SoloRank                 *bool                                `protobuf:"varint,49,opt,name=solo_rank,json=soloRank" json:"solo_rank,omitempty"`
	SeasonalRank             *bool                                `protobuf:"varint,53,opt,name=seasonal_rank,json=seasonalRank" json:"seasonal_rank,omitempty"`
	RankTierUpdated          *bool                                `protobuf:"varint,66,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	Kills                    *uint32                              `protobuf:"varint,14,opt,name=kills" json:"kills,omitempty"`
	Deaths                   *uint32                              `protobuf:"varint,15,opt,name=deaths" json:"deaths,omitempty"`
	Assists                  *uint32                              `protobuf:"varint,16,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus             *uint32                              `protobuf:"varint,17,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	Gold                     *uint32                              `protobuf:"varint,18,opt,name=gold" json:"gold,omitempty"`
	LastHits                 *uint32                              `protobuf:"varint,19,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   *uint32                              `protobuf:"varint,20,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin               *uint32                              `protobuf:"varint,21,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XPPerMin                 *uint32                              `protobuf:"varint,22,opt,name=XP_per_min,json=XPPerMin" json:"XP_per_min,omitempty"`
	GoldSpent                *uint32                              `protobuf:"varint,23,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	HeroDamage               *uint32                              `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage              *uint32                              `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing              *uint32                              `protobuf:"varint,26,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	Level                    *uint32                              `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	TimeLastSeen             *uint32                              `protobuf:"varint,28,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	PlayerName               *string                              `protobuf:"bytes,29,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	SupportAbilityValue      *uint32                              `protobuf:"varint,30,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	FeedingDetected          *bool                                `protobuf:"varint,32,opt,name=feeding_detected,json=feedingDetected" json:"feeding_detected,omitempty"`
	SearchRank               *uint32                              `protobuf:"varint,34,opt,name=search_rank,json=searchRank" json:"search_rank,omitempty"`
	SearchRankUncertainty    *uint32                              `protobuf:"varint,35,opt,name=search_rank_uncertainty,json=searchRankUncertainty" json:"search_rank_uncertainty,omitempty"`
	RankUncertaintyChange    *int32                               `protobuf:"varint,36,opt,name=rank_uncertainty_change,json=rankUncertaintyChange" json:"rank_uncertainty_change,omitempty"`
	HeroPlayCount            *uint32                              `protobuf:"varint,37,opt,name=hero_play_count,json=heroPlayCount" json:"hero_play_count,omitempty"`
	PartyId                  *uint64                              `protobuf:"fixed64,38,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ScaledHeroDamage         *uint32                              `protobuf:"varint,54,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage        *uint32                              `protobuf:"varint,55,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing        *uint32                              `protobuf:"varint,56,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	ScaledKills              *float32                             `protobuf:"fixed32,39,opt,name=scaled_kills,json=scaledKills" json:"scaled_kills,omitempty"`
	ScaledDeaths             *float32                             `protobuf:"fixed32,40,opt,name=scaled_deaths,json=scaledDeaths" json:"scaled_deaths,omitempty"`
	ScaledAssists            *float32                             `protobuf:"fixed32,41,opt,name=scaled_assists,json=scaledAssists" json:"scaled_assists,omitempty"`
	ClaimedFarmGold          *uint32                              `protobuf:"varint,42,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold              *uint32                              `protobuf:"varint,43,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies            *uint32                              `protobuf:"varint,44,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses            *uint32                              `protobuf:"varint,45,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                   *uint32                              `protobuf:"varint,46,opt,name=misses" json:"misses,omitempty"`
	AbilityUpgrades          []*CMatchPlayerAbilityUpgrade        `protobuf:"bytes,47,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory []*CMatchAdditionalUnitInventory     `protobuf:"bytes,48,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs           []*CMatchPlayerPermanentBuff         `protobuf:"bytes,57,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	CustomGameData           *CMsgDOTAMatch_Player_CustomGameData `protobuf:"bytes,50,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	ActivePlusSubscription   *bool                                `protobuf:"varint,51,opt,name=active_plus_subscription,json=activePlusSubscription" json:"active_plus_subscription,omitempty"`
	NetWorth                 *uint32                              `protobuf:"varint,52,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	BotDifficulty            *uint32                              `protobuf:"varint,58,opt,name=bot_difficulty,json=botDifficulty" json:"bot_difficulty,omitempty"`
	HeroPickOrder            *uint32                              `protobuf:"varint,63,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed          *bool                                `protobuf:"varint,64,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasBonus             *bool                                `protobuf:"varint,65,opt,name=hero_was_bonus,json=heroWasBonus" json:"hero_was_bonus,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                             `json:"-"`
	XXX_unrecognized         []byte                               `json:"-"`
	XXX_sizecache            int32                                `json:"-"`
}

func (m *CMsgDOTAMatch_Player) Reset()         { *m = CMsgDOTAMatch_Player{} }
func (m *CMsgDOTAMatch_Player) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch_Player) ProtoMessage()    {}
func (*CMsgDOTAMatch_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 0}
}
func (m *CMsgDOTAMatch_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch_Player.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch_Player.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch_Player.Merge(dst, src)
}
func (m *CMsgDOTAMatch_Player) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch_Player.Size(m)
}
func (m *CMsgDOTAMatch_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch_Player proto.InternalMessageInfo

func (m *CMsgDOTAMatch_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetPlayerSlot() uint32 {
	if m != nil && m.PlayerSlot != nil {
		return *m.PlayerSlot
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_0() uint32 {
	if m != nil && m.Item_0 != nil {
		return *m.Item_0
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_1() uint32 {
	if m != nil && m.Item_1 != nil {
		return *m.Item_1
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_2() uint32 {
	if m != nil && m.Item_2 != nil {
		return *m.Item_2
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_3() uint32 {
	if m != nil && m.Item_3 != nil {
		return *m.Item_3
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_4() uint32 {
	if m != nil && m.Item_4 != nil {
		return *m.Item_4
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_5() uint32 {
	if m != nil && m.Item_5 != nil {
		return *m.Item_5
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_6() uint32 {
	if m != nil && m.Item_6 != nil {
		return *m.Item_6
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_7() uint32 {
	if m != nil && m.Item_7 != nil {
		return *m.Item_7
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetItem_8() uint32 {
	if m != nil && m.Item_8 != nil {
		return *m.Item_8
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetExpectedTeamContribution() float32 {
	if m != nil && m.ExpectedTeamContribution != nil {
		return *m.ExpectedTeamContribution
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledMetric() float32 {
	if m != nil && m.ScaledMetric != nil {
		return *m.ScaledMetric
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetPreviousRank() uint32 {
	if m != nil && m.PreviousRank != nil {
		return *m.PreviousRank
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetSoloRank() bool {
	if m != nil && m.SoloRank != nil {
		return *m.SoloRank
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetSeasonalRank() bool {
	if m != nil && m.SeasonalRank != nil {
		return *m.SeasonalRank
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetRankTierUpdated() bool {
	if m != nil && m.RankTierUpdated != nil {
		return *m.RankTierUpdated
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetLeaverStatus() uint32 {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetGold() uint32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetLastHits() uint32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetDenies() uint32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetGoldPerMin() uint32 {
	if m != nil && m.GoldPerMin != nil {
		return *m.GoldPerMin
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetXPPerMin() uint32 {
	if m != nil && m.XPPerMin != nil {
		return *m.XPPerMin
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetGoldSpent() uint32 {
	if m != nil && m.GoldSpent != nil {
		return *m.GoldSpent
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroDamage() uint32 {
	if m != nil && m.HeroDamage != nil {
		return *m.HeroDamage
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetTowerDamage() uint32 {
	if m != nil && m.TowerDamage != nil {
		return *m.TowerDamage
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroHealing() uint32 {
	if m != nil && m.HeroHealing != nil {
		return *m.HeroHealing
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetTimeLastSeen() uint32 {
	if m != nil && m.TimeLastSeen != nil {
		return *m.TimeLastSeen
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *CMsgDOTAMatch_Player) GetSupportAbilityValue() uint32 {
	if m != nil && m.SupportAbilityValue != nil {
		return *m.SupportAbilityValue
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetFeedingDetected() bool {
	if m != nil && m.FeedingDetected != nil {
		return *m.FeedingDetected
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetSearchRank() uint32 {
	if m != nil && m.SearchRank != nil {
		return *m.SearchRank
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetSearchRankUncertainty() uint32 {
	if m != nil && m.SearchRankUncertainty != nil {
		return *m.SearchRankUncertainty
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetRankUncertaintyChange() int32 {
	if m != nil && m.RankUncertaintyChange != nil {
		return *m.RankUncertaintyChange
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroPlayCount() uint32 {
	if m != nil && m.HeroPlayCount != nil {
		return *m.HeroPlayCount
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledHeroDamage() uint32 {
	if m != nil && m.ScaledHeroDamage != nil {
		return *m.ScaledHeroDamage
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledTowerDamage() uint32 {
	if m != nil && m.ScaledTowerDamage != nil {
		return *m.ScaledTowerDamage
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledHeroHealing() uint32 {
	if m != nil && m.ScaledHeroHealing != nil {
		return *m.ScaledHeroHealing
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledKills() float32 {
	if m != nil && m.ScaledKills != nil {
		return *m.ScaledKills
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledDeaths() float32 {
	if m != nil && m.ScaledDeaths != nil {
		return *m.ScaledDeaths
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetScaledAssists() float32 {
	if m != nil && m.ScaledAssists != nil {
		return *m.ScaledAssists
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetClaimedFarmGold() uint32 {
	if m != nil && m.ClaimedFarmGold != nil {
		return *m.ClaimedFarmGold
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetSupportGold() uint32 {
	if m != nil && m.SupportGold != nil {
		return *m.SupportGold
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetClaimedDenies() uint32 {
	if m != nil && m.ClaimedDenies != nil {
		return *m.ClaimedDenies
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetClaimedMisses() uint32 {
	if m != nil && m.ClaimedMisses != nil {
		return *m.ClaimedMisses
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetMisses() uint32 {
	if m != nil && m.Misses != nil {
		return *m.Misses
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetAbilityUpgrades() []*CMatchPlayerAbilityUpgrade {
	if m != nil {
		return m.AbilityUpgrades
	}
	return nil
}

func (m *CMsgDOTAMatch_Player) GetAdditionalUnitsInventory() []*CMatchAdditionalUnitInventory {
	if m != nil {
		return m.AdditionalUnitsInventory
	}
	return nil
}

func (m *CMsgDOTAMatch_Player) GetPermanentBuffs() []*CMatchPlayerPermanentBuff {
	if m != nil {
		return m.PermanentBuffs
	}
	return nil
}

func (m *CMsgDOTAMatch_Player) GetCustomGameData() *CMsgDOTAMatch_Player_CustomGameData {
	if m != nil {
		return m.CustomGameData
	}
	return nil
}

func (m *CMsgDOTAMatch_Player) GetActivePlusSubscription() bool {
	if m != nil && m.ActivePlusSubscription != nil {
		return *m.ActivePlusSubscription
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetBotDifficulty() uint32 {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroPickOrder() uint32 {
	if m != nil && m.HeroPickOrder != nil {
		return *m.HeroPickOrder
	}
	return 0
}

func (m *CMsgDOTAMatch_Player) GetHeroWasRandomed() bool {
	if m != nil && m.HeroWasRandomed != nil {
		return *m.HeroWasRandomed
	}
	return false
}

func (m *CMsgDOTAMatch_Player) GetHeroWasBonus() bool {
	if m != nil && m.HeroWasBonus != nil {
		return *m.HeroWasBonus
	}
	return false
}

type CMsgDOTAMatch_Player_CustomGameData struct {
	DotaTeam             *uint32  `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Winner               *bool    `protobuf:"varint,2,opt,name=winner" json:"winner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAMatch_Player_CustomGameData) Reset()         { *m = CMsgDOTAMatch_Player_CustomGameData{} }
func (m *CMsgDOTAMatch_Player_CustomGameData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch_Player_CustomGameData) ProtoMessage()    {}
func (*CMsgDOTAMatch_Player_CustomGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 0, 0}
}
func (m *CMsgDOTAMatch_Player_CustomGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch_Player_CustomGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch_Player_CustomGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData.Merge(dst, src)
}
func (m *CMsgDOTAMatch_Player_CustomGameData) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData.Size(m)
}
func (m *CMsgDOTAMatch_Player_CustomGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch_Player_CustomGameData proto.InternalMessageInfo

func (m *CMsgDOTAMatch_Player_CustomGameData) GetDotaTeam() uint32 {
	if m != nil && m.DotaTeam != nil {
		return *m.DotaTeam
	}
	return 0
}

func (m *CMsgDOTAMatch_Player_CustomGameData) GetWinner() bool {
	if m != nil && m.Winner != nil {
		return *m.Winner
	}
	return false
}

type CMsgDOTAMatch_BroadcasterInfo struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAMatch_BroadcasterInfo) Reset()         { *m = CMsgDOTAMatch_BroadcasterInfo{} }
func (m *CMsgDOTAMatch_BroadcasterInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch_BroadcasterInfo) ProtoMessage()    {}
func (*CMsgDOTAMatch_BroadcasterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 1}
}
func (m *CMsgDOTAMatch_BroadcasterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch_BroadcasterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch_BroadcasterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo.Merge(dst, src)
}
func (m *CMsgDOTAMatch_BroadcasterInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo.Size(m)
}
func (m *CMsgDOTAMatch_BroadcasterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch_BroadcasterInfo proto.InternalMessageInfo

func (m *CMsgDOTAMatch_BroadcasterInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAMatch_BroadcasterInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CMsgDOTAMatch_BroadcasterChannel struct {
	CountryCode          *string                          `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description          *string                          `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	BroadcasterInfos     []*CMsgDOTAMatch_BroadcasterInfo `protobuf:"bytes,3,rep,name=broadcaster_infos,json=broadcasterInfos" json:"broadcaster_infos,omitempty"`
	LanguageCode         *string                          `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMsgDOTAMatch_BroadcasterChannel) Reset()         { *m = CMsgDOTAMatch_BroadcasterChannel{} }
func (m *CMsgDOTAMatch_BroadcasterChannel) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch_BroadcasterChannel) ProtoMessage()    {}
func (*CMsgDOTAMatch_BroadcasterChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 2}
}
func (m *CMsgDOTAMatch_BroadcasterChannel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch_BroadcasterChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch_BroadcasterChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel.Merge(dst, src)
}
func (m *CMsgDOTAMatch_BroadcasterChannel) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel.Size(m)
}
func (m *CMsgDOTAMatch_BroadcasterChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch_BroadcasterChannel proto.InternalMessageInfo

func (m *CMsgDOTAMatch_BroadcasterChannel) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CMsgDOTAMatch_BroadcasterChannel) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CMsgDOTAMatch_BroadcasterChannel) GetBroadcasterInfos() []*CMsgDOTAMatch_BroadcasterInfo {
	if m != nil {
		return m.BroadcasterInfos
	}
	return nil
}

func (m *CMsgDOTAMatch_BroadcasterChannel) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CMsgDOTAMatch_CustomGameData struct {
	CustomGameId         *uint64  `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	MapName              *string  `protobuf:"bytes,2,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAMatch_CustomGameData) Reset()         { *m = CMsgDOTAMatch_CustomGameData{} }
func (m *CMsgDOTAMatch_CustomGameData) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAMatch_CustomGameData) ProtoMessage()    {}
func (*CMsgDOTAMatch_CustomGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{44, 3}
}
func (m *CMsgDOTAMatch_CustomGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAMatch_CustomGameData.Unmarshal(m, b)
}
func (m *CMsgDOTAMatch_CustomGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAMatch_CustomGameData.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAMatch_CustomGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAMatch_CustomGameData.Merge(dst, src)
}
func (m *CMsgDOTAMatch_CustomGameData) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAMatch_CustomGameData.Size(m)
}
func (m *CMsgDOTAMatch_CustomGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAMatch_CustomGameData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAMatch_CustomGameData proto.InternalMessageInfo

func (m *CMsgDOTAMatch_CustomGameData) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgDOTAMatch_CustomGameData) GetMapName() string {
	if m != nil && m.MapName != nil {
		return *m.MapName
	}
	return ""
}

type CMsgPlayerCard struct {
	AccountId            *uint32                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StatModifier         []*CMsgPlayerCard_StatModifier `protobuf:"bytes,2,rep,name=stat_modifier,json=statModifier" json:"stat_modifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CMsgPlayerCard) Reset()         { *m = CMsgPlayerCard{} }
func (m *CMsgPlayerCard) String() string { return proto.CompactTextString(m) }
func (*CMsgPlayerCard) ProtoMessage()    {}
func (*CMsgPlayerCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{45}
}
func (m *CMsgPlayerCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPlayerCard.Unmarshal(m, b)
}
func (m *CMsgPlayerCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPlayerCard.Marshal(b, m, deterministic)
}
func (dst *CMsgPlayerCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPlayerCard.Merge(dst, src)
}
func (m *CMsgPlayerCard) XXX_Size() int {
	return xxx_messageInfo_CMsgPlayerCard.Size(m)
}
func (m *CMsgPlayerCard) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPlayerCard.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPlayerCard proto.InternalMessageInfo

func (m *CMsgPlayerCard) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgPlayerCard) GetStatModifier() []*CMsgPlayerCard_StatModifier {
	if m != nil {
		return m.StatModifier
	}
	return nil
}

type CMsgPlayerCard_StatModifier struct {
	Stat                 *uint32  `protobuf:"varint,1,opt,name=stat" json:"stat,omitempty"`
	Value                *uint32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgPlayerCard_StatModifier) Reset()         { *m = CMsgPlayerCard_StatModifier{} }
func (m *CMsgPlayerCard_StatModifier) String() string { return proto.CompactTextString(m) }
func (*CMsgPlayerCard_StatModifier) ProtoMessage()    {}
func (*CMsgPlayerCard_StatModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{45, 0}
}
func (m *CMsgPlayerCard_StatModifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPlayerCard_StatModifier.Unmarshal(m, b)
}
func (m *CMsgPlayerCard_StatModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPlayerCard_StatModifier.Marshal(b, m, deterministic)
}
func (dst *CMsgPlayerCard_StatModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPlayerCard_StatModifier.Merge(dst, src)
}
func (m *CMsgPlayerCard_StatModifier) XXX_Size() int {
	return xxx_messageInfo_CMsgPlayerCard_StatModifier.Size(m)
}
func (m *CMsgPlayerCard_StatModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPlayerCard_StatModifier.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPlayerCard_StatModifier proto.InternalMessageInfo

func (m *CMsgPlayerCard_StatModifier) GetStat() uint32 {
	if m != nil && m.Stat != nil {
		return *m.Stat
	}
	return 0
}

func (m *CMsgPlayerCard_StatModifier) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type CMsgDOTAFantasyPlayerStats struct {
	PlayerAccountId        *uint32  `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	MatchId                *uint64  `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchCompleted         *bool    `protobuf:"varint,3,opt,name=match_completed,json=matchCompleted" json:"match_completed,omitempty"`
	TeamId                 *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LeagueId               *uint32  `protobuf:"varint,5,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Delay                  *uint32  `protobuf:"varint,6,opt,name=delay" json:"delay,omitempty"`
	SeriesId               *uint32  `protobuf:"varint,7,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType             *uint32  `protobuf:"varint,8,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Kills                  *uint32  `protobuf:"varint,10,opt,name=kills" json:"kills,omitempty"`
	Deaths                 *uint32  `protobuf:"varint,11,opt,name=deaths" json:"deaths,omitempty"`
	Cs                     *uint32  `protobuf:"varint,12,opt,name=cs" json:"cs,omitempty"`
	Gpm                    *float32 `protobuf:"fixed32,13,opt,name=gpm" json:"gpm,omitempty"`
	TowerKills             *uint32  `protobuf:"varint,14,opt,name=tower_kills,json=towerKills" json:"tower_kills,omitempty"`
	RoshanKills            *uint32  `protobuf:"varint,15,opt,name=roshan_kills,json=roshanKills" json:"roshan_kills,omitempty"`
	TeamfightParticipation *float32 `protobuf:"fixed32,16,opt,name=teamfight_participation,json=teamfightParticipation" json:"teamfight_participation,omitempty"`
	WardsPlaced            *uint32  `protobuf:"varint,17,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	CampsStacked           *uint32  `protobuf:"varint,18,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	RunesGrabbed           *uint32  `protobuf:"varint,19,opt,name=runes_grabbed,json=runesGrabbed" json:"runes_grabbed,omitempty"`
	FirstBlood             *uint32  `protobuf:"varint,20,opt,name=first_blood,json=firstBlood" json:"first_blood,omitempty"`
	Stuns                  *float32 `protobuf:"fixed32,21,opt,name=stuns" json:"stuns,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStats) Reset()         { *m = CMsgDOTAFantasyPlayerStats{} }
func (m *CMsgDOTAFantasyPlayerStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerStats) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{46}
}
func (m *CMsgDOTAFantasyPlayerStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerStats.Unmarshal(m, b)
}
func (m *CMsgDOTAFantasyPlayerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAFantasyPlayerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAFantasyPlayerStats.Merge(dst, src)
}
func (m *CMsgDOTAFantasyPlayerStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerStats.Size(m)
}
func (m *CMsgDOTAFantasyPlayerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAFantasyPlayerStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAFantasyPlayerStats proto.InternalMessageInfo

func (m *CMsgDOTAFantasyPlayerStats) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetMatchCompleted() bool {
	if m != nil && m.MatchCompleted != nil {
		return *m.MatchCompleted
	}
	return false
}

func (m *CMsgDOTAFantasyPlayerStats) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetDelay() uint32 {
	if m != nil && m.Delay != nil {
		return *m.Delay
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetCs() uint32 {
	if m != nil && m.Cs != nil {
		return *m.Cs
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetGpm() float32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetTowerKills() uint32 {
	if m != nil && m.TowerKills != nil {
		return *m.TowerKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetRoshanKills() uint32 {
	if m != nil && m.RoshanKills != nil {
		return *m.RoshanKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetTeamfightParticipation() float32 {
	if m != nil && m.TeamfightParticipation != nil {
		return *m.TeamfightParticipation
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetWardsPlaced() uint32 {
	if m != nil && m.WardsPlaced != nil {
		return *m.WardsPlaced
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetCampsStacked() uint32 {
	if m != nil && m.CampsStacked != nil {
		return *m.CampsStacked
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetRunesGrabbed() uint32 {
	if m != nil && m.RunesGrabbed != nil {
		return *m.RunesGrabbed
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetFirstBlood() uint32 {
	if m != nil && m.FirstBlood != nil {
		return *m.FirstBlood
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStats) GetStuns() float32 {
	if m != nil && m.Stuns != nil {
		return *m.Stuns
	}
	return 0
}

type CMsgDOTAFantasyPlayerMatchStats struct {
	Matches              []*CMsgDOTAFantasyPlayerStats `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerMatchStats) Reset()         { *m = CMsgDOTAFantasyPlayerMatchStats{} }
func (m *CMsgDOTAFantasyPlayerMatchStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerMatchStats) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerMatchStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{47}
}
func (m *CMsgDOTAFantasyPlayerMatchStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats.Unmarshal(m, b)
}
func (m *CMsgDOTAFantasyPlayerMatchStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTAFantasyPlayerMatchStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats.Merge(dst, src)
}
func (m *CMsgDOTAFantasyPlayerMatchStats) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats.Size(m)
}
func (m *CMsgDOTAFantasyPlayerMatchStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAFantasyPlayerMatchStats proto.InternalMessageInfo

func (m *CMsgDOTAFantasyPlayerMatchStats) GetMatches() []*CMsgDOTAFantasyPlayerStats {
	if m != nil {
		return m.Matches
	}
	return nil
}

type CMsgDOTABotDebugInfo struct {
	Bots                 []*CMsgDOTABotDebugInfo_Bot `protobuf:"bytes,1,rep,name=bots" json:"bots,omitempty"`
	DesirePushLaneTop    *float32                    `protobuf:"fixed32,2,opt,name=desire_push_lane_top,json=desirePushLaneTop" json:"desire_push_lane_top,omitempty"`
	DesirePushLaneMid    *float32                    `protobuf:"fixed32,3,opt,name=desire_push_lane_mid,json=desirePushLaneMid" json:"desire_push_lane_mid,omitempty"`
	DesirePushLaneBot    *float32                    `protobuf:"fixed32,4,opt,name=desire_push_lane_bot,json=desirePushLaneBot" json:"desire_push_lane_bot,omitempty"`
	DesireDefendLaneTop  *float32                    `protobuf:"fixed32,5,opt,name=desire_defend_lane_top,json=desireDefendLaneTop" json:"desire_defend_lane_top,omitempty"`
	DesireDefendLaneMid  *float32                    `protobuf:"fixed32,6,opt,name=desire_defend_lane_mid,json=desireDefendLaneMid" json:"desire_defend_lane_mid,omitempty"`
	DesireDefendLaneBot  *float32                    `protobuf:"fixed32,7,opt,name=desire_defend_lane_bot,json=desireDefendLaneBot" json:"desire_defend_lane_bot,omitempty"`
	DesireFarmLaneTop    *float32                    `protobuf:"fixed32,8,opt,name=desire_farm_lane_top,json=desireFarmLaneTop" json:"desire_farm_lane_top,omitempty"`
	DesireFarmLaneMid    *float32                    `protobuf:"fixed32,9,opt,name=desire_farm_lane_mid,json=desireFarmLaneMid" json:"desire_farm_lane_mid,omitempty"`
	DesireFarmLaneBot    *float32                    `protobuf:"fixed32,10,opt,name=desire_farm_lane_bot,json=desireFarmLaneBot" json:"desire_farm_lane_bot,omitempty"`
	DesireFarmRoshan     *float32                    `protobuf:"fixed32,11,opt,name=desire_farm_roshan,json=desireFarmRoshan" json:"desire_farm_roshan,omitempty"`
	ExecutionTime        *float32                    `protobuf:"fixed32,12,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	RuneStatus           []uint32                    `protobuf:"varint,13,rep,name=rune_status,json=runeStatus" json:"rune_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CMsgDOTABotDebugInfo) Reset()         { *m = CMsgDOTABotDebugInfo{} }
func (m *CMsgDOTABotDebugInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABotDebugInfo) ProtoMessage()    {}
func (*CMsgDOTABotDebugInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{48}
}
func (m *CMsgDOTABotDebugInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABotDebugInfo.Unmarshal(m, b)
}
func (m *CMsgDOTABotDebugInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABotDebugInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABotDebugInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABotDebugInfo.Merge(dst, src)
}
func (m *CMsgDOTABotDebugInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABotDebugInfo.Size(m)
}
func (m *CMsgDOTABotDebugInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABotDebugInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABotDebugInfo proto.InternalMessageInfo

func (m *CMsgDOTABotDebugInfo) GetBots() []*CMsgDOTABotDebugInfo_Bot {
	if m != nil {
		return m.Bots
	}
	return nil
}

func (m *CMsgDOTABotDebugInfo) GetDesirePushLaneTop() float32 {
	if m != nil && m.DesirePushLaneTop != nil {
		return *m.DesirePushLaneTop
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesirePushLaneMid() float32 {
	if m != nil && m.DesirePushLaneMid != nil {
		return *m.DesirePushLaneMid
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesirePushLaneBot() float32 {
	if m != nil && m.DesirePushLaneBot != nil {
		return *m.DesirePushLaneBot
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireDefendLaneTop() float32 {
	if m != nil && m.DesireDefendLaneTop != nil {
		return *m.DesireDefendLaneTop
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireDefendLaneMid() float32 {
	if m != nil && m.DesireDefendLaneMid != nil {
		return *m.DesireDefendLaneMid
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireDefendLaneBot() float32 {
	if m != nil && m.DesireDefendLaneBot != nil {
		return *m.DesireDefendLaneBot
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireFarmLaneTop() float32 {
	if m != nil && m.DesireFarmLaneTop != nil {
		return *m.DesireFarmLaneTop
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireFarmLaneMid() float32 {
	if m != nil && m.DesireFarmLaneMid != nil {
		return *m.DesireFarmLaneMid
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireFarmLaneBot() float32 {
	if m != nil && m.DesireFarmLaneBot != nil {
		return *m.DesireFarmLaneBot
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetDesireFarmRoshan() float32 {
	if m != nil && m.DesireFarmRoshan != nil {
		return *m.DesireFarmRoshan
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetExecutionTime() float32 {
	if m != nil && m.ExecutionTime != nil {
		return *m.ExecutionTime
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo) GetRuneStatus() []uint32 {
	if m != nil {
		return m.RuneStatus
	}
	return nil
}

type CMsgDOTABotDebugInfo_Bot struct {
	PlayerOwnerId        *uint32                          `protobuf:"varint,1,opt,name=player_owner_id,json=playerOwnerId" json:"player_owner_id,omitempty"`
	HeroId               *uint32                          `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Difficulty           *uint32                          `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	PowerCurrent         *uint32                          `protobuf:"varint,4,opt,name=power_current,json=powerCurrent" json:"power_current,omitempty"`
	PowerMax             *uint32                          `protobuf:"varint,5,opt,name=power_max,json=powerMax" json:"power_max,omitempty"`
	MoveTargetX          *uint32                          `protobuf:"varint,6,opt,name=move_target_x,json=moveTargetX" json:"move_target_x,omitempty"`
	MoveTargetY          *uint32                          `protobuf:"varint,7,opt,name=move_target_y,json=moveTargetY" json:"move_target_y,omitempty"`
	MoveTargetZ          *uint32                          `protobuf:"varint,8,opt,name=move_target_z,json=moveTargetZ" json:"move_target_z,omitempty"`
	ActiveModeId         *uint32                          `protobuf:"varint,9,opt,name=active_mode_id,json=activeModeId" json:"active_mode_id,omitempty"`
	ExecutionTime        *float32                         `protobuf:"fixed32,10,opt,name=execution_time,json=executionTime" json:"execution_time,omitempty"`
	Modes                []*CMsgDOTABotDebugInfo_Bot_Mode `protobuf:"bytes,11,rep,name=modes" json:"modes,omitempty"`
	Action               *CMsgDOTABotDebugInfo_Bot_Action `protobuf:"bytes,12,opt,name=action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMsgDOTABotDebugInfo_Bot) Reset()         { *m = CMsgDOTABotDebugInfo_Bot{} }
func (m *CMsgDOTABotDebugInfo_Bot) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABotDebugInfo_Bot) ProtoMessage()    {}
func (*CMsgDOTABotDebugInfo_Bot) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{48, 0}
}
func (m *CMsgDOTABotDebugInfo_Bot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot.Unmarshal(m, b)
}
func (m *CMsgDOTABotDebugInfo_Bot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABotDebugInfo_Bot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot.Merge(dst, src)
}
func (m *CMsgDOTABotDebugInfo_Bot) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot.Size(m)
}
func (m *CMsgDOTABotDebugInfo_Bot) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABotDebugInfo_Bot proto.InternalMessageInfo

func (m *CMsgDOTABotDebugInfo_Bot) GetPlayerOwnerId() uint32 {
	if m != nil && m.PlayerOwnerId != nil {
		return *m.PlayerOwnerId
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetPowerCurrent() uint32 {
	if m != nil && m.PowerCurrent != nil {
		return *m.PowerCurrent
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetPowerMax() uint32 {
	if m != nil && m.PowerMax != nil {
		return *m.PowerMax
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetMoveTargetX() uint32 {
	if m != nil && m.MoveTargetX != nil {
		return *m.MoveTargetX
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetMoveTargetY() uint32 {
	if m != nil && m.MoveTargetY != nil {
		return *m.MoveTargetY
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetMoveTargetZ() uint32 {
	if m != nil && m.MoveTargetZ != nil {
		return *m.MoveTargetZ
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetActiveModeId() uint32 {
	if m != nil && m.ActiveModeId != nil {
		return *m.ActiveModeId
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetExecutionTime() float32 {
	if m != nil && m.ExecutionTime != nil {
		return *m.ExecutionTime
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot) GetModes() []*CMsgDOTABotDebugInfo_Bot_Mode {
	if m != nil {
		return m.Modes
	}
	return nil
}

func (m *CMsgDOTABotDebugInfo_Bot) GetAction() *CMsgDOTABotDebugInfo_Bot_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

type CMsgDOTABotDebugInfo_Bot_Mode struct {
	ModeId               *uint32  `protobuf:"varint,1,opt,name=mode_id,json=modeId" json:"mode_id,omitempty"`
	Desire               *float32 `protobuf:"fixed32,2,opt,name=desire" json:"desire,omitempty"`
	TargetEntity         *uint32  `protobuf:"varint,3,opt,name=target_entity,json=targetEntity" json:"target_entity,omitempty"`
	TargetX              *uint32  `protobuf:"varint,4,opt,name=target_x,json=targetX" json:"target_x,omitempty"`
	TargetY              *uint32  `protobuf:"varint,5,opt,name=target_y,json=targetY" json:"target_y,omitempty"`
	TargetZ              *uint32  `protobuf:"varint,6,opt,name=target_z,json=targetZ" json:"target_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) Reset()         { *m = CMsgDOTABotDebugInfo_Bot_Mode{} }
func (m *CMsgDOTABotDebugInfo_Bot_Mode) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABotDebugInfo_Bot_Mode) ProtoMessage()    {}
func (*CMsgDOTABotDebugInfo_Bot_Mode) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{48, 0, 0}
}
func (m *CMsgDOTABotDebugInfo_Bot_Mode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode.Unmarshal(m, b)
}
func (m *CMsgDOTABotDebugInfo_Bot_Mode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABotDebugInfo_Bot_Mode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode.Merge(dst, src)
}
func (m *CMsgDOTABotDebugInfo_Bot_Mode) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode.Size(m)
}
func (m *CMsgDOTABotDebugInfo_Bot_Mode) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Mode proto.InternalMessageInfo

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetModeId() uint32 {
	if m != nil && m.ModeId != nil {
		return *m.ModeId
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetDesire() float32 {
	if m != nil && m.Desire != nil {
		return *m.Desire
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetEntity() uint32 {
	if m != nil && m.TargetEntity != nil {
		return *m.TargetEntity
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetX() uint32 {
	if m != nil && m.TargetX != nil {
		return *m.TargetX
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetY() uint32 {
	if m != nil && m.TargetY != nil {
		return *m.TargetY
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Mode) GetTargetZ() uint32 {
	if m != nil && m.TargetZ != nil {
		return *m.TargetZ
	}
	return 0
}

type CMsgDOTABotDebugInfo_Bot_Action struct {
	ActionId             *uint32  `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	ActionTarget         *string  `protobuf:"bytes,2,opt,name=action_target,json=actionTarget" json:"action_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTABotDebugInfo_Bot_Action) Reset()         { *m = CMsgDOTABotDebugInfo_Bot_Action{} }
func (m *CMsgDOTABotDebugInfo_Bot_Action) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABotDebugInfo_Bot_Action) ProtoMessage()    {}
func (*CMsgDOTABotDebugInfo_Bot_Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{48, 0, 1}
}
func (m *CMsgDOTABotDebugInfo_Bot_Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action.Unmarshal(m, b)
}
func (m *CMsgDOTABotDebugInfo_Bot_Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTABotDebugInfo_Bot_Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action.Merge(dst, src)
}
func (m *CMsgDOTABotDebugInfo_Bot_Action) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action.Size(m)
}
func (m *CMsgDOTABotDebugInfo_Bot_Action) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTABotDebugInfo_Bot_Action proto.InternalMessageInfo

func (m *CMsgDOTABotDebugInfo_Bot_Action) GetActionId() uint32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CMsgDOTABotDebugInfo_Bot_Action) GetActionTarget() string {
	if m != nil && m.ActionTarget != nil {
		return *m.ActionTarget
	}
	return ""
}

type CMsgSuccessfulHero struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	WinPercent           *float32 `protobuf:"fixed32,2,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	LongestStreak        *uint32  `protobuf:"varint,3,opt,name=longest_streak,json=longestStreak" json:"longest_streak,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSuccessfulHero) Reset()         { *m = CMsgSuccessfulHero{} }
func (m *CMsgSuccessfulHero) String() string { return proto.CompactTextString(m) }
func (*CMsgSuccessfulHero) ProtoMessage()    {}
func (*CMsgSuccessfulHero) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{49}
}
func (m *CMsgSuccessfulHero) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSuccessfulHero.Unmarshal(m, b)
}
func (m *CMsgSuccessfulHero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSuccessfulHero.Marshal(b, m, deterministic)
}
func (dst *CMsgSuccessfulHero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSuccessfulHero.Merge(dst, src)
}
func (m *CMsgSuccessfulHero) XXX_Size() int {
	return xxx_messageInfo_CMsgSuccessfulHero.Size(m)
}
func (m *CMsgSuccessfulHero) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSuccessfulHero.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSuccessfulHero proto.InternalMessageInfo

func (m *CMsgSuccessfulHero) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgSuccessfulHero) GetWinPercent() float32 {
	if m != nil && m.WinPercent != nil {
		return *m.WinPercent
	}
	return 0
}

func (m *CMsgSuccessfulHero) GetLongestStreak() uint32 {
	if m != nil && m.LongestStreak != nil {
		return *m.LongestStreak
	}
	return 0
}

type CMsgRecentMatchInfo struct {
	MatchId              *uint64        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameMode             *DOTA_GameMode `protobuf:"varint,2,opt,name=game_mode,json=gameMode,enum=DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	Kills                *uint32        `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32        `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32        `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Duration             *uint32        `protobuf:"varint,6,opt,name=duration" json:"duration,omitempty"`
	PlayerSlot           *uint32        `protobuf:"varint,7,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	MatchOutcome         *EMatchOutcome `protobuf:"varint,8,opt,name=match_outcome,json=matchOutcome,enum=EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	Timestamp            *uint32        `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CMsgRecentMatchInfo) Reset()         { *m = CMsgRecentMatchInfo{} }
func (m *CMsgRecentMatchInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgRecentMatchInfo) ProtoMessage()    {}
func (*CMsgRecentMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{50}
}
func (m *CMsgRecentMatchInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgRecentMatchInfo.Unmarshal(m, b)
}
func (m *CMsgRecentMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgRecentMatchInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgRecentMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgRecentMatchInfo.Merge(dst, src)
}
func (m *CMsgRecentMatchInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgRecentMatchInfo.Size(m)
}
func (m *CMsgRecentMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgRecentMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgRecentMatchInfo proto.InternalMessageInfo

const Default_CMsgRecentMatchInfo_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE
const Default_CMsgRecentMatchInfo_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown

func (m *CMsgRecentMatchInfo) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgRecentMatchInfo_GameMode
}

func (m *CMsgRecentMatchInfo) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetPlayerSlot() uint32 {
	if m != nil && m.PlayerSlot != nil {
		return *m.PlayerSlot
	}
	return 0
}

func (m *CMsgRecentMatchInfo) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CMsgRecentMatchInfo_MatchOutcome
}

func (m *CMsgRecentMatchInfo) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgMatchTips struct {
	Tips                 []*CMsgMatchTips_SingleTip `protobuf:"bytes,2,rep,name=tips" json:"tips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CMsgMatchTips) Reset()         { *m = CMsgMatchTips{} }
func (m *CMsgMatchTips) String() string { return proto.CompactTextString(m) }
func (*CMsgMatchTips) ProtoMessage()    {}
func (*CMsgMatchTips) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{51}
}
func (m *CMsgMatchTips) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgMatchTips.Unmarshal(m, b)
}
func (m *CMsgMatchTips) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgMatchTips.Marshal(b, m, deterministic)
}
func (dst *CMsgMatchTips) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgMatchTips.Merge(dst, src)
}
func (m *CMsgMatchTips) XXX_Size() int {
	return xxx_messageInfo_CMsgMatchTips.Size(m)
}
func (m *CMsgMatchTips) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgMatchTips.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgMatchTips proto.InternalMessageInfo

func (m *CMsgMatchTips) GetTips() []*CMsgMatchTips_SingleTip {
	if m != nil {
		return m.Tips
	}
	return nil
}

type CMsgMatchTips_SingleTip struct {
	SourceAccountId      *uint32  `protobuf:"varint,1,opt,name=source_account_id,json=sourceAccountId" json:"source_account_id,omitempty"`
	TargetAccountId      *uint32  `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	TipAmount            *uint32  `protobuf:"varint,3,opt,name=tip_amount,json=tipAmount" json:"tip_amount,omitempty"`
	EventId              *EEvent  `protobuf:"varint,4,opt,name=event_id,json=eventId,enum=EEvent,def=0" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgMatchTips_SingleTip) Reset()         { *m = CMsgMatchTips_SingleTip{} }
func (m *CMsgMatchTips_SingleTip) String() string { return proto.CompactTextString(m) }
func (*CMsgMatchTips_SingleTip) ProtoMessage()    {}
func (*CMsgMatchTips_SingleTip) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4, []int{51, 0}
}
func (m *CMsgMatchTips_SingleTip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgMatchTips_SingleTip.Unmarshal(m, b)
}
func (m *CMsgMatchTips_SingleTip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgMatchTips_SingleTip.Marshal(b, m, deterministic)
}
func (dst *CMsgMatchTips_SingleTip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgMatchTips_SingleTip.Merge(dst, src)
}
func (m *CMsgMatchTips_SingleTip) XXX_Size() int {
	return xxx_messageInfo_CMsgMatchTips_SingleTip.Size(m)
}
func (m *CMsgMatchTips_SingleTip) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgMatchTips_SingleTip.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgMatchTips_SingleTip proto.InternalMessageInfo

const Default_CMsgMatchTips_SingleTip_EventId EEvent = EEvent_EVENT_ID_NONE

func (m *CMsgMatchTips_SingleTip) GetSourceAccountId() uint32 {
	if m != nil && m.SourceAccountId != nil {
		return *m.SourceAccountId
	}
	return 0
}

func (m *CMsgMatchTips_SingleTip) GetTargetAccountId() uint32 {
	if m != nil && m.TargetAccountId != nil {
		return *m.TargetAccountId
	}
	return 0
}

func (m *CMsgMatchTips_SingleTip) GetTipAmount() uint32 {
	if m != nil && m.TipAmount != nil {
		return *m.TipAmount
	}
	return 0
}

func (m *CMsgMatchTips_SingleTip) GetEventId() EEvent {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return Default_CMsgMatchTips_SingleTip_EventId
}

func init() {
	proto.RegisterType((*CSODOTAGameAccountClient)(nil), "CSODOTAGameAccountClient")
	proto.RegisterType((*CSODOTAGameAccountPlus)(nil), "CSODOTAGameAccountPlus")
	proto.RegisterType((*CMsgLobbyPlayerPlusSubscriptionData)(nil), "CMsgLobbyPlayerPlusSubscriptionData")
	proto.RegisterType((*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)(nil), "CMsgLobbyPlayerPlusSubscriptionData.HeroBadge")
	proto.RegisterType((*CMsgLobbyEventPoints)(nil), "CMsgLobbyEventPoints")
	proto.RegisterType((*CMsgLobbyEventPoints_ChatWheelMessageRange)(nil), "CMsgLobbyEventPoints.ChatWheelMessageRange")
	proto.RegisterType((*CMsgLobbyEventPoints_PeriodicResourceValues)(nil), "CMsgLobbyEventPoints.PeriodicResourceValues")
	proto.RegisterType((*CMsgLobbyEventPoints_AccountPoints)(nil), "CMsgLobbyEventPoints.AccountPoints")
	proto.RegisterType((*CMsgLocalServerFakeLobbyData)(nil), "CMsgLocalServerFakeLobbyData")
	proto.RegisterType((*CMsgBattleCupVictory)(nil), "CMsgBattleCupVictory")
	proto.RegisterType((*CMsgLobbyBattleCupVictoryList)(nil), "CMsgLobbyBattleCupVictoryList")
	proto.RegisterType((*CMsgDOTABroadcastNotification)(nil), "CMsgDOTABroadcastNotification")
	proto.RegisterType((*CProtoItemHeroStatue)(nil), "CProtoItemHeroStatue")
	proto.RegisterType((*CProtoItemTeamShowcase)(nil), "CProtoItemTeamShowcase")
	proto.RegisterType((*CMatchPlayerAbilityUpgrade)(nil), "CMatchPlayerAbilityUpgrade")
	proto.RegisterType((*CMatchPlayerTimedStats)(nil), "CMatchPlayerTimedStats")
	proto.RegisterType((*CMatchAdditionalUnitInventory)(nil), "CMatchAdditionalUnitInventory")
	proto.RegisterType((*CMatchPlayerPermanentBuff)(nil), "CMatchPlayerPermanentBuff")
	proto.RegisterType((*CMatchHeroSelectEvent)(nil), "CMatchHeroSelectEvent")
	proto.RegisterType((*CMsgDOTAProcessFantasyScheduledEvent)(nil), "CMsgDOTAProcessFantasyScheduledEvent")
	proto.RegisterType((*CMsgDOTAHasItemQuery)(nil), "CMsgDOTAHasItemQuery")
	proto.RegisterType((*CMsgDOTAHasItemResponse)(nil), "CMsgDOTAHasItemResponse")
	proto.RegisterType((*CMsgGCIsProQuery)(nil), "CMsgGCIsProQuery")
	proto.RegisterType((*CMsgGCIsProResponse)(nil), "CMsgGCIsProResponse")
	proto.RegisterType((*CMsgDOTAHasItemDefsQuery)(nil), "CMsgDOTAHasItemDefsQuery")
	proto.RegisterType((*CMsgDOTAHasItemDefsResponse)(nil), "CMsgDOTAHasItemDefsResponse")
	proto.RegisterType((*CMsgGCGetPlayerCardItemInfo)(nil), "CMsgGCGetPlayerCardItemInfo")
	proto.RegisterType((*CMsgGCGetPlayerCardItemInfoResponse)(nil), "CMsgGCGetPlayerCardItemInfoResponse")
	proto.RegisterType((*CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo)(nil), "CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo")
	proto.RegisterType((*CMsgGCToGCFantasySetMatchLeague)(nil), "CMsgGCToGCFantasySetMatchLeague")
	proto.RegisterType((*CSODOTAMapLocationState)(nil), "CSODOTAMapLocationState")
	proto.RegisterType((*CMsgLeagueAdminList)(nil), "CMsgLeagueAdminList")
	proto.RegisterType((*CCompendiumTimestampedData)(nil), "CCompendiumTimestampedData")
	proto.RegisterType((*CCompendiumGameTimeline)(nil), "CCompendiumGameTimeline")
	proto.RegisterType((*CCompendiumGameList)(nil), "CCompendiumGameList")
	proto.RegisterType((*CAdditionalEquipSlot)(nil), "CAdditionalEquipSlot")
	proto.RegisterType((*CMsgDOTAProfileCard)(nil), "CMsgDOTAProfileCard")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot)(nil), "CMsgDOTAProfileCard.Slot")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Trophy)(nil), "CMsgDOTAProfileCard.Slot.Trophy")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Stat)(nil), "CMsgDOTAProfileCard.Slot.Stat")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Item)(nil), "CMsgDOTAProfileCard.Slot.Item")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Hero)(nil), "CMsgDOTAProfileCard.Slot.Hero")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Emoticon)(nil), "CMsgDOTAProfileCard.Slot.Emoticon")
	proto.RegisterType((*CMsgDOTAProfileCard_Slot_Team)(nil), "CMsgDOTAProfileCard.Slot.Team")
	proto.RegisterType((*CSODOTAPlayerChallenge)(nil), "CSODOTAPlayerChallenge")
	proto.RegisterType((*CMsgClientToGCRerollPlayerChallenge)(nil), "CMsgClientToGCRerollPlayerChallenge")
	proto.RegisterType((*CMsgGCRerollPlayerChallengeResponse)(nil), "CMsgGCRerollPlayerChallengeResponse")
	proto.RegisterType((*CMsgGCTopCustomGamesList)(nil), "CMsgGCTopCustomGamesList")
	proto.RegisterType((*CMsgDOTARealtimeGameStats)(nil), "CMsgDOTARealtimeGameStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_TeamDetails)(nil), "CMsgDOTARealtimeGameStats.TeamDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_ItemDetails)(nil), "CMsgDOTARealtimeGameStats.ItemDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_AbilityDetails)(nil), "CMsgDOTARealtimeGameStats.AbilityDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_HeroToHeroStats)(nil), "CMsgDOTARealtimeGameStats.HeroToHeroStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_AbilityList)(nil), "CMsgDOTARealtimeGameStats.AbilityList")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_PlayerDetails)(nil), "CMsgDOTARealtimeGameStats.PlayerDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_BuildingDetails)(nil), "CMsgDOTARealtimeGameStats.BuildingDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_KillDetails)(nil), "CMsgDOTARealtimeGameStats.KillDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_BroadcasterDetails)(nil), "CMsgDOTARealtimeGameStats.BroadcasterDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_PickBanDetails)(nil), "CMsgDOTARealtimeGameStats.PickBanDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_MatchDetails)(nil), "CMsgDOTARealtimeGameStats.MatchDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData)(nil), "CMsgDOTARealtimeGameStats.GraphData")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData_LocationStats)(nil), "CMsgDOTARealtimeGameStats.GraphData.LocationStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)(nil), "CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse)(nil), "CMsgDOTARealtimeGameStatsTerse")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_TeamDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.TeamDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_PlayerDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.PlayerDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_BuildingDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.BuildingDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_MatchDetails)(nil), "CMsgDOTARealtimeGameStatsTerse.MatchDetails")
	proto.RegisterType((*CMsgDOTARealtimeGameStatsTerse_GraphData)(nil), "CMsgDOTARealtimeGameStatsTerse.GraphData")
	proto.RegisterType((*CMsgDOTABroadcastTimelineEvent)(nil), "CMsgDOTABroadcastTimelineEvent")
	proto.RegisterType((*CMsgGCToClientMatchGroupsVersion)(nil), "CMsgGCToClientMatchGroupsVersion")
	proto.RegisterType((*CMsgDOTASDOHeroStatsHistory)(nil), "CMsgDOTASDOHeroStatsHistory")
	proto.RegisterType((*CMsgDOTASeasonRewards)(nil), "CMsgDOTASeasonRewards")
	proto.RegisterType((*CMsgDOTASeasonRewards_Reward)(nil), "CMsgDOTASeasonRewards.Reward")
	proto.RegisterType((*CMsgDOTASeasonAchievements)(nil), "CMsgDOTASeasonAchievements")
	proto.RegisterType((*CMsgDOTASeasonAchievements_Achievement)(nil), "CMsgDOTASeasonAchievements.Achievement")
	proto.RegisterType((*CMsgDOTASeasonPredictions)(nil), "CMsgDOTASeasonPredictions")
	proto.RegisterType((*CMsgDOTASeasonPredictions_Choice)(nil), "CMsgDOTASeasonPredictions.Choice")
	proto.RegisterType((*CMsgDOTASeasonPredictions_Answers)(nil), "CMsgDOTASeasonPredictions.Answers")
	proto.RegisterType((*CMsgDOTASeasonPredictions_QueryKeyValues)(nil), "CMsgDOTASeasonPredictions.QueryKeyValues")
	proto.RegisterType((*CMsgDOTASeasonPredictions_Prediction)(nil), "CMsgDOTASeasonPredictions.Prediction")
	proto.RegisterType((*CMsgDOTASeasonPredictions_InGamePrediction)(nil), "CMsgDOTASeasonPredictions.InGamePrediction")
	proto.RegisterType((*CMsgDOTAMatch)(nil), "CMsgDOTAMatch")
	proto.RegisterType((*CMsgDOTAMatch_Player)(nil), "CMsgDOTAMatch.Player")
	proto.RegisterType((*CMsgDOTAMatch_Player_CustomGameData)(nil), "CMsgDOTAMatch.Player.CustomGameData")
	proto.RegisterType((*CMsgDOTAMatch_BroadcasterInfo)(nil), "CMsgDOTAMatch.BroadcasterInfo")
	proto.RegisterType((*CMsgDOTAMatch_BroadcasterChannel)(nil), "CMsgDOTAMatch.BroadcasterChannel")
	proto.RegisterType((*CMsgDOTAMatch_CustomGameData)(nil), "CMsgDOTAMatch.CustomGameData")
	proto.RegisterType((*CMsgPlayerCard)(nil), "CMsgPlayerCard")
	proto.RegisterType((*CMsgPlayerCard_StatModifier)(nil), "CMsgPlayerCard.StatModifier")
	proto.RegisterType((*CMsgDOTAFantasyPlayerStats)(nil), "CMsgDOTAFantasyPlayerStats")
	proto.RegisterType((*CMsgDOTAFantasyPlayerMatchStats)(nil), "CMsgDOTAFantasyPlayerMatchStats")
	proto.RegisterType((*CMsgDOTABotDebugInfo)(nil), "CMsgDOTABotDebugInfo")
	proto.RegisterType((*CMsgDOTABotDebugInfo_Bot)(nil), "CMsgDOTABotDebugInfo.Bot")
	proto.RegisterType((*CMsgDOTABotDebugInfo_Bot_Mode)(nil), "CMsgDOTABotDebugInfo.Bot.Mode")
	proto.RegisterType((*CMsgDOTABotDebugInfo_Bot_Action)(nil), "CMsgDOTABotDebugInfo.Bot.Action")
	proto.RegisterType((*CMsgSuccessfulHero)(nil), "CMsgSuccessfulHero")
	proto.RegisterType((*CMsgRecentMatchInfo)(nil), "CMsgRecentMatchInfo")
	proto.RegisterType((*CMsgMatchTips)(nil), "CMsgMatchTips")
	proto.RegisterType((*CMsgMatchTips_SingleTip)(nil), "CMsgMatchTips.SingleTip")
	proto.RegisterEnum("ESpecialPingValue", ESpecialPingValue_name, ESpecialPingValue_value)
	proto.RegisterEnum("EDOTAGCSessionNeed", EDOTAGCSessionNeed_name, EDOTAGCSessionNeed_value)
	proto.RegisterEnum("DOTA_TournamentEvents", DOTA_TournamentEvents_name, DOTA_TournamentEvents_value)
	proto.RegisterEnum("EBroadcastTimelineEvent", EBroadcastTimelineEvent_name, EBroadcastTimelineEvent_value)
	proto.RegisterEnum("CMsgDOTAProfileCard_EStatID", CMsgDOTAProfileCard_EStatID_name, CMsgDOTAProfileCard_EStatID_value)
	proto.RegisterEnum("CMsgGCRerollPlayerChallengeResponse_EResult", CMsgGCRerollPlayerChallengeResponse_EResult_name, CMsgGCRerollPlayerChallengeResponse_EResult_value)
	proto.RegisterEnum("CMsgDOTARealtimeGameStats_GraphDataEStat", CMsgDOTARealtimeGameStats_GraphDataEStat_name, CMsgDOTARealtimeGameStats_GraphDataEStat_value)
	proto.RegisterEnum("CMsgDOTARealtimeGameStats_GraphDataELocation", CMsgDOTARealtimeGameStats_GraphDataELocation_name, CMsgDOTARealtimeGameStats_GraphDataELocation_value)
	proto.RegisterEnum("CMsgDOTASeasonRewards_ERewardType", CMsgDOTASeasonRewards_ERewardType_name, CMsgDOTASeasonRewards_ERewardType_value)
	proto.RegisterEnum("CMsgDOTASeasonPredictionsEPredictionType", CMsgDOTASeasonPredictionsEPredictionType_name, CMsgDOTASeasonPredictionsEPredictionType_value)
	proto.RegisterEnum("CMsgDOTASeasonPredictionsEAnswerType", CMsgDOTASeasonPredictionsEAnswerType_name, CMsgDOTASeasonPredictionsEAnswerType_value)
	proto.RegisterEnum("CMsgDOTASeasonPredictionsEResolutionTypeT", CMsgDOTASeasonPredictionsEResolutionTypeT_name, CMsgDOTASeasonPredictionsEResolutionTypeT_value)
	proto.RegisterEnum("CMsgDOTASeasonPredictionsERandomSelectionGroupT", CMsgDOTASeasonPredictionsERandomSelectionGroupT_name, CMsgDOTASeasonPredictionsERandomSelectionGroupT_value)
	proto.RegisterEnum("CMsgDOTASeasonPredictionsERawValueTypeT", CMsgDOTASeasonPredictionsERawValueTypeT_name, CMsgDOTASeasonPredictionsERawValueTypeT_value)
	proto.RegisterEnum("CMsgDOTAMatch_ReplayState", CMsgDOTAMatch_ReplayState_name, CMsgDOTAMatch_ReplayState_value)
}

func init() {
	proto.RegisterFile("dota_gcmessages_common.proto", fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4)
}

var fileDescriptor_dota_gcmessages_common_00b9aebbac456fb4 = []byte{
	// 11318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xbd, 0x49, 0x6f, 0x24, 0xc9,
	0x92, 0x18, 0xdc, 0xc9, 0x35, 0xd3, 0x92, 0x99, 0x4c, 0x06, 0xc9, 0xaa, 0xac, 0xac, 0xae, 0x2d,
	0xab, 0xaa, 0xbb, 0xaa, 0xba, 0x3a, 0xab, 0x8a, 0xd5, 0xfd, 0xba, 0x5f, 0xcd, 0x5b, 0x3e, 0x2e,
	0x59, 0x45, 0xbe, 0xe6, 0xf6, 0x82, 0xac, 0x5e, 0xde, 0xcc, 0x9b, 0xf8, 0x9c, 0x19, 0xce, 0xcc,
	0x18, 0x46, 0x46, 0x64, 0x47, 0x44, 0x72, 0x79, 0x80, 0x30, 0x03, 0x68, 0x83, 0x20, 0x68, 0x79,
	0x27, 0x09, 0x3a, 0x09, 0x3a, 0x0c, 0x74, 0x90, 0x0e, 0x92, 0x30, 0x47, 0x2d, 0x90, 0x30, 0xc2,
	0x8c, 0x46, 0x03, 0xe8, 0xa0, 0x5f, 0xa0, 0x8b, 0x0e, 0xba, 0x48, 0x07, 0x0d, 0x24, 0x41, 0xd0,
	0x08, 0x66, 0xe6, 0x1e, 0x4b, 0x2e, 0x64, 0xf5, 0x8c, 0x30, 0x10, 0x74, 0x62, 0xba, 0xb9, 0xb9,
	0xb9, 0x87, 0xbb, 0xb9, 0xb9, 0x99, 0xb9, 0xb9, 0x11, 0xde, 0xb7, 0xfd, 0x48, 0x58, 0xed, 0x56,
	0x57, 0x86, 0xa1, 0x68, 0xcb, 0xd0, 0x6a, 0xf9, 0xdd, 0xae, 0xef, 0x35, 0x7a, 0x81, 0x1f, 0xf9,
	0xb5, 0xc5, 0x30, 0x92, 0xa2, 0xab, 0xeb, 0x14, 0xf0, 0x5a, 0xbb, 0x15, 0xda, 0x27, 0xa9, 0x36,
	0x0a, 0x7e, 0x9d, 0x48, 0x85, 0x1d, 0x11, 0x48, 0xdb, 0x92, 0x5e, 0xbf, 0xab, 0x2a, 0xea, 0xff,
	0xe9, 0x36, 0x54, 0xd7, 0x0f, 0xf6, 0x36, 0xf6, 0x0e, 0x57, 0xdf, 0x88, 0xae, 0x5c, 0x6d, 0xb5,
	0xfc, 0xbe, 0x17, 0xad, 0xbb, 0x8e, 0xf4, 0x22, 0xe3, 0x3e, 0x80, 0x60, 0x80, 0xe5, 0xd8, 0xd5,
	0xdc, 0xdd, 0xdc, 0xa3, 0xd2, 0xda, 0xd4, 0x6f, 0xfd, 0xf6, 0xad, 0x9c, 0x59, 0x50, 0xf0, 0x2d,
	0xdb, 0x30, 0x60, 0xea, 0xcc, 0xf1, 0xc2, 0xea, 0x24, 0x56, 0x9b, 0xf4, 0xdb, 0xb8, 0x06, 0x33,
	0xae, 0x1f, 0x86, 0x32, 0xac, 0x4e, 0x11, 0x54, 0x95, 0x8c, 0x32, 0x4c, 0x9c, 0xf7, 0xaa, 0x73,
	0x04, 0x9b, 0x38, 0xef, 0x19, 0x4b, 0x30, 0xed, 0xca, 0x53, 0xe9, 0x56, 0x4b, 0x04, 0xe2, 0x82,
	0x71, 0x1f, 0x4a, 0x8e, 0xe7, 0x44, 0x8e, 0x70, 0xad, 0xf0, 0xc4, 0x71, 0xdd, 0x6a, 0x99, 0x6a,
	0xe7, 0x14, 0xf0, 0x00, 0x61, 0xc6, 0x3d, 0x98, 0x73, 0xa5, 0x38, 0x95, 0x81, 0x45, 0x03, 0xa9,
	0xce, 0x13, 0x4e, 0x91, 0x61, 0xeb, 0x08, 0x32, 0x3e, 0x81, 0x6b, 0xa1, 0x6c, 0xf9, 0x9e, 0x2d,
	0x82, 0x0b, 0x2b, 0x83, 0xfc, 0x8a, 0x90, 0x97, 0xe2, 0xda, 0xed, 0x54, 0xab, 0x4f, 0xe1, 0xba,
	0xeb, 0x9f, 0x59, 0xbd, 0xc0, 0xf1, 0x03, 0x27, 0xba, 0xb0, 0xfa, 0x5e, 0xe4, 0xb8, 0x96, 0x2d,
	0x22, 0x59, 0x35, 0xb8, 0x99, 0xeb, 0x9f, 0xed, 0xab, 0xda, 0xb7, 0x58, 0xb9, 0x21, 0x22, 0x69,
	0xfc, 0x08, 0xde, 0xef, 0x05, 0xf2, 0x54, 0x7a, 0x91, 0x15, 0xc9, 0xf3, 0xc8, 0x6a, 0x75, 0x44,
	0x94, 0x6e, 0xbb, 0x44, 0x6d, 0xab, 0x0a, 0xe7, 0x50, 0x9e, 0x47, 0xeb, 0x1d, 0x11, 0x25, 0xed,
	0x3f, 0x03, 0x5d, 0x67, 0x9d, 0xfa, 0x4e, 0x4b, 0xa6, 0xdb, 0x2e, 0x53, 0xdb, 0x65, 0x55, 0xff,
	0x25, 0x56, 0x27, 0x0d, 0xbf, 0x80, 0xfb, 0xba, 0x61, 0xaf, 0x7f, 0xe4, 0x3a, 0xad, 0xd1, 0xfd,
	0x7f, 0x49, 0x34, 0x6e, 0x2b, 0xd4, 0x7d, 0xc2, 0x1c, 0x39, 0x0a, 0x57, 0x84, 0x91, 0x25, 0x8e,
	0x84, 0x67, 0xfb, 0x9e, 0xb4, 0xad, 0xb6, 0xe8, 0x4a, 0xa6, 0x70, 0x8d, 0x47, 0x81, 0xf5, 0xab,
	0xba, 0x1a, 0x79, 0x86, 0x1a, 0xfe, 0x04, 0xea, 0xd4, 0x30, 0x99, 0xf0, 0x51, 0x24, 0x7e, 0x85,
	0x07, 0x81, 0x98, 0x07, 0x1a, 0x71, 0x98, 0xd6, 0x73, 0x58, 0x52, 0xab, 0xd5, 0x93, 0x9e, 0x70,
	0xa3, 0x0b, 0xb5, 0x6a, 0xd7, 0xa9, 0xb5, 0xc1, 0x75, 0xfb, 0x5c, 0xc5, 0x6b, 0xb6, 0x02, 0xcb,
	0x2d, 0xbf, 0xdb, 0x73, 0x65, 0xa4, 0xbb, 0x0b, 0xa3, 0x40, 0x8a, 0x93, 0x6a, 0x95, 0x9a, 0x2c,
	0xc6, 0x95, 0xd8, 0xc7, 0x01, 0x55, 0x19, 0x35, 0xc8, 0x47, 0x52, 0xb4, 0x3a, 0x8e, 0xd7, 0xae,
	0xbe, 0x4f, 0x68, 0x71, 0xd9, 0xb8, 0x0d, 0xe0, 0x4a, 0x61, 0xcb, 0x20, 0xec, 0x38, 0xbd, 0xea,
	0x2d, 0xaa, 0x4d, 0x41, 0xb0, 0xed, 0x71, 0xe0, 0x48, 0xcf, 0x76, 0x2f, 0xaa, 0xb7, 0xb9, 0xad,
	0x2e, 0x1b, 0xef, 0x43, 0xe1, 0xd8, 0x0f, 0xda, 0xce, 0x29, 0x12, 0xbe, 0x43, 0x95, 0x09, 0xc0,
	0xf8, 0x21, 0xdc, 0xd4, 0x5b, 0xca, 0x76, 0x42, 0x71, 0xe4, 0x4a, 0x3b, 0xbd, 0x4a, 0x1f, 0x30,
	0x97, 0x28, 0x94, 0x0d, 0x85, 0x91, 0xac, 0xcf, 0x27, 0x70, 0x6d, 0xa8, 0x39, 0x4f, 0xce, 0x87,
	0xcc, 0x9b, 0x03, 0x2d, 0x79, 0x7a, 0xbe, 0x0f, 0x37, 0xba, 0x22, 0x6a, 0x75, 0x46, 0x76, 0xf9,
	0x98, 0x1a, 0x5e, 0x23, 0x84, 0xe1, 0x0e, 0x9f, 0xc3, 0xd2, 0x40, 0x53, 0xee, 0xee, 0x09, 0xaf,
	0x45, 0xa6, 0x15, 0x77, 0x76, 0x00, 0x4b, 0x3d, 0x11, 0x44, 0x9e, 0x0c, 0x2c, 0x3d, 0xd4, 0xe8,
	0xa2, 0x27, 0xab, 0x4f, 0xef, 0xe6, 0x1e, 0x95, 0x57, 0x16, 0x1b, 0xfb, 0x5c, 0xa9, 0x24, 0xcd,
	0xe1, 0x45, 0x4f, 0xbe, 0x9a, 0xdb, 0x5f, 0x35, 0x0f, 0x77, 0x9b, 0xa6, 0xb5, 0xbb, 0xb7, 0xdb,
	0x34, 0x8d, 0xde, 0x10, 0x06, 0x2e, 0xf0, 0x20, 0xd1, 0x30, 0xc2, 0xd1, 0x7f, 0xcc, 0x0b, 0x9c,
	0x6d, 0x72, 0x80, 0x55, 0xc6, 0x06, 0xdc, 0x0a, 0x3b, 0xfd, 0xc8, 0xf6, 0xcf, 0x3c, 0x57, 0x9c,
	0x45, 0x32, 0xe8, 0x3a, 0x9e, 0x88, 0x64, 0xe4, 0x74, 0x65, 0x18, 0x89, 0x6e, 0xaf, 0xfa, 0x8c,
	0xda, 0x5e, 0x8e, 0x64, 0xfc, 0x18, 0xde, 0xcf, 0x88, 0x03, 0xe4, 0xae, 0xd0, 0x0a, 0x64, 0x57,
	0x38, 0x1e, 0xae, 0xf0, 0x73, 0x22, 0x72, 0x23, 0x25, 0x13, 0x90, 0xc7, 0x42, 0x53, 0x23, 0x18,
	0x8f, 0xa1, 0x82, 0xec, 0x27, 0x23, 0x27, 0x72, 0x4e, 0xa5, 0x15, 0x08, 0xef, 0xa4, 0xfa, 0x82,
	0x1a, 0xcd, 0xa7, 0xe0, 0xa6, 0xf0, 0x4e, 0x8c, 0x1f, 0xc1, 0xcd, 0x96, 0x70, 0x9d, 0xa3, 0x40,
	0x44, 0x8e, 0xef, 0x0d, 0x75, 0xf5, 0x92, 0xbb, 0x4a, 0xa1, 0x0c, 0x74, 0xb5, 0x02, 0xcb, 0xa1,
	0xef, 0xfa, 0xd6, 0x50, 0x7f, 0x9f, 0xf0, 0x2c, 0x61, 0xe5, 0xfa, 0x40, 0x9f, 0x6f, 0xe0, 0x2e,
	0xb7, 0xb9, 0xa4, 0xe3, 0xef, 0xa9, 0x89, 0xc2, 0xe6, 0x63, 0x3b, 0xff, 0x08, 0x16, 0x02, 0xd9,
	0x0a, 0xfa, 0x4e, 0xd4, 0x45, 0x59, 0xc4, 0x72, 0xfd, 0x33, 0x6a, 0x59, 0x49, 0x55, 0x6c, 0x93,
	0x88, 0x5f, 0x81, 0xe5, 0x8e, 0x08, 0x2d, 0x4f, 0x9e, 0x59, 0x9e, 0x1f, 0x39, 0xc7, 0x4e, 0x8b,
	0x48, 0x86, 0xd5, 0xcf, 0xef, 0xe6, 0x1e, 0xe5, 0xcd, 0xc5, 0x8e, 0x08, 0x77, 0xe5, 0xd9, 0x6e,
	0xba, 0xca, 0xf8, 0x00, 0xe6, 0x9d, 0x10, 0xe5, 0x78, 0xbb, 0x2f, 0x2d, 0x61, 0x77, 0x1d, 0xaf,
	0xfa, 0x7d, 0xc2, 0x2e, 0x39, 0xe1, 0x36, 0x41, 0x57, 0x11, 0x68, 0x34, 0x60, 0xb1, 0x25, 0xc2,
	0xbe, 0x70, 0xd5, 0x77, 0xf4, 0x5c, 0x71, 0x21, 0xed, 0xea, 0x0f, 0x68, 0x28, 0x0b, 0x5c, 0x45,
	0x63, 0xdf, 0xa7, 0x0a, 0x63, 0x15, 0x6e, 0x0d, 0xcd, 0x5a, 0xa6, 0xe5, 0x0f, 0xa9, 0x65, 0x6d,
	0x60, 0xf6, 0xd2, 0x24, 0xd6, 0xe1, 0x36, 0x72, 0xe0, 0xc5, 0x78, 0x1a, 0x3f, 0x22, 0x1a, 0x37,
	0x09, 0x6b, 0x0c, 0x91, 0x4f, 0xe1, 0xba, 0x1a, 0xf7, 0x8b, 0xd3, 0x17, 0xd9, 0xd6, 0xab, 0xbc,
	0xb9, 0xb9, 0xfa, 0xc5, 0xe9, 0x8b, 0x81, 0xe1, 0xa7, 0x7b, 0x45, 0xa5, 0x20, 0xdb, 0x78, 0x8d,
	0x87, 0x9f, 0x42, 0x3a, 0x94, 0xa2, 0x9b, 0x26, 0xf1, 0x0a, 0x6a, 0xad, 0x7e, 0x10, 0x58, 0xc2,
	0x75, 0xad, 0x8e, 0x0c, 0x7c, 0x3c, 0x3c, 0x5c, 0x57, 0x7a, 0x6d, 0x89, 0xe7, 0xfe, 0x3a, 0x0b,
	0x08, 0xc4, 0x58, 0x75, 0xdd, 0x4d, 0x19, 0xf8, 0xeb, 0xba, 0x7a, 0xcb, 0x36, 0x1e, 0x41, 0x05,
	0xfb, 0xb1, 0x70, 0xc7, 0x58, 0x3d, 0xdf, 0xf1, 0xa2, 0xb0, 0xba, 0x41, 0x2d, 0xca, 0x08, 0x3f,
	0x74, 0xba, 0x72, 0x9f, 0xa0, 0x78, 0xac, 0xeb, 0xbd, 0x7b, 0xec, 0x8a, 0x76, 0x58, 0x6d, 0xf2,
	0xb1, 0xae, 0x80, 0xaf, 0x11, 0x86, 0x8b, 0x9c, 0x90, 0x63, 0x1e, 0x7a, 0x4d, 0x68, 0x25, 0x4d,
	0x8d, 0x19, 0x08, 0x4f, 0x3d, 0x1c, 0x7c, 0x60, 0x1d, 0xc9, 0x8e, 0x38, 0x75, 0xfc, 0xc0, 0x0a,
	0xe5, 0xb7, 0x96, 0xd7, 0xef, 0x5a, 0x74, 0x0e, 0x05, 0xb2, 0xe7, 0x07, 0x51, 0xf5, 0x8d, 0x3a,
	0xf5, 0x08, 0x75, 0x4d, 0x61, 0x1e, 0xc8, 0x6f, 0x77, 0xfb, 0xdd, 0x6d, 0x11, 0x46, 0x26, 0x61,
	0x19, 0x9b, 0x70, 0x6f, 0x88, 0x58, 0xcb, 0x0f, 0x64, 0x86, 0xd4, 0x26, 0x6f, 0x82, 0x01, 0x52,
	0x88, 0x96, 0xa2, 0xb4, 0x01, 0x77, 0x06, 0x29, 0x71, 0x73, 0xcb, 0x77, 0x6d, 0x94, 0xb7, 0xa2,
	0xba, 0x45, 0x3c, 0x7b, 0x33, 0x4b, 0x87, 0x9b, 0xef, 0xb9, 0xf6, 0x86, 0x88, 0x04, 0x72, 0x70,
	0xe4, 0xf7, 0x03, 0x4f, 0x5e, 0xb0, 0x02, 0xa4, 0x26, 0xe2, 0x27, 0xcc, 0xc1, 0xaa, 0x8a, 0xd4,
	0x20, 0x9e, 0x8c, 0x2d, 0xb8, 0xa7, 0xf1, 0x03, 0xd9, 0x22, 0x4d, 0x40, 0x04, 0x91, 0xd3, 0x72,
	0x7a, 0xbc, 0x9f, 0x49, 0xce, 0xbf, 0xe5, 0xa9, 0x50, 0x88, 0x26, 0xe1, 0xed, 0xa7, 0xd1, 0x48,
	0xde, 0xdf, 0x87, 0xd2, 0xb1, 0x38, 0x45, 0x39, 0xc6, 0xac, 0x54, 0xfd, 0x8a, 0x17, 0x49, 0x03,
	0x91, 0x75, 0x50, 0x4b, 0x10, 0x5e, 0xab, 0xe3, 0xa3, 0x32, 0xd9, 0xeb, 0xf8, 0x9e, 0xc4, 0x79,
	0x3f, 0x92, 0x01, 0x72, 0xcb, 0xd7, 0x77, 0x73, 0x8f, 0xa6, 0xcc, 0x65, 0x5d, 0xbf, 0x8f, 0xd5,
	0xbb, 0x54, 0xbb, 0x65, 0xe3, 0x44, 0xa3, 0x3c, 0x92, 0xb6, 0x45, 0x07, 0x47, 0x57, 0x9c, 0x38,
	0x5e, 0xdb, 0x3a, 0x12, 0x5e, 0xfa, 0x40, 0xfa, 0x86, 0x27, 0x9a, 0x11, 0x77, 0x12, 0xbc, 0x35,
	0xe1, 0x25, 0xe7, 0xd2, 0x47, 0x60, 0xa8, 0x4f, 0xa5, 0xe3, 0x9e, 0xd8, 0xe5, 0x45, 0xf5, 0x67,
	0x2c, 0x57, 0xb9, 0x06, 0x39, 0x1c, 0x19, 0xe6, 0xc5, 0x48, 0xe4, 0x95, 0xea, 0xaf, 0x8e, 0x42,
	0x5e, 0x19, 0x89, 0xfc, 0xb2, 0xfa, 0x6b, 0xa3, 0x90, 0x5f, 0xe2, 0xe9, 0xd0, 0x96, 0x9e, 0x0c,
	0x50, 0x55, 0x95, 0x22, 0xf4, 0x3d, 0xe1, 0x5a, 0xea, 0x0b, 0x49, 0xf0, 0xfe, 0x9c, 0x45, 0xb6,
	0xc2, 0x39, 0x50, 0x28, 0x26, 0x61, 0x90, 0xf8, 0x3d, 0x81, 0x97, 0xe3, 0x08, 0x5c, 0x26, 0x91,
	0x7f, 0x9d, 0xe8, 0x36, 0x46, 0xd2, 0x1d, 0x2f, 0xa2, 0x77, 0xe1, 0xc1, 0xb8, 0xce, 0x32, 0x12,
	0xc3, 0x22, 0xea, 0x77, 0x47, 0x52, 0x4f, 0xcb, 0x8d, 0x4d, 0xb8, 0x77, 0xd9, 0xd7, 0x5b, 0x3d,
	0x54, 0xc1, 0xfe, 0x7f, 0x5e, 0xce, 0xb1, 0x53, 0xb0, 0x8f, 0xca, 0xd8, 0xd6, 0x18, 0x4a, 0x56,
	0x14, 0x08, 0x2f, 0x3c, 0x96, 0x41, 0x20, 0xed, 0xaa, 0xa0, 0x9d, 0x73, 0x7b, 0x04, 0xa5, 0xc3,
	0x04, 0x0b, 0x95, 0x1d, 0x12, 0xe7, 0x23, 0xd7, 0xe3, 0x88, 0x65, 0x19, 0x22, 0x8c, 0x58, 0x0c,
	0x09, 0xcf, 0x47, 0x36, 0xbd, 0x6c, 0x25, 0x5a, 0x44, 0xf1, 0xa3, 0x61, 0x8a, 0xe3, 0x97, 0x61,
	0x13, 0xee, 0x8d, 0xec, 0x26, 0xb3, 0x06, 0x76, 0x72, 0xe6, 0x8e, 0x5f, 0x80, 0x35, 0xb8, 0x3d,
	0xf6, 0x5b, 0x79, 0xf6, 0x65, 0x72, 0x76, 0x8d, 0x99, 0xfa, 0xf5, 0x51, 0x34, 0x32, 0xf3, 0x7e,
	0xcc, 0x12, 0x6b, 0x90, 0x46, 0x7a, 0xd2, 0x9f, 0xc3, 0x52, 0x46, 0x6c, 0x58, 0x3d, 0xd1, 0x3a,
	0x91, 0x76, 0xb5, 0x4d, 0xd2, 0xc0, 0x48, 0x4b, 0x8f, 0x7d, 0xaa, 0x31, 0x9e, 0xc6, 0xdb, 0x4c,
	0x09, 0x48, 0xdc, 0x68, 0xd5, 0x4e, 0xac, 0x2f, 0x48, 0x4f, 0xc9, 0x54, 0xdc, 0x68, 0x28, 0x57,
	0x5b, 0xfd, 0x30, 0xf2, 0xbb, 0xca, 0x98, 0x18, 0xa1, 0xc7, 0x3a, 0x7c, 0xc2, 0x32, 0x1a, 0xd9,
	0x12, 0x43, 0xca, 0xec, 0x63, 0x52, 0x51, 0xb0, 0xcf, 0x33, 0xc7, 0xd3, 0x32, 0xe3, 0x37, 0xf8,
	0xb0, 0xe2, 0x8a, 0xaf, 0x1c, 0x8f, 0x45, 0xc6, 0x08, 0xd4, 0x95, 0xea, 0xc9, 0x08, 0xd4, 0x95,
	0x51, 0xa8, 0x2f, 0xab, 0xee, 0x08, 0xd4, 0x97, 0xf5, 0xff, 0x38, 0x01, 0xd7, 0x86, 0xad, 0xed,
	0x7d, 0xb7, 0x1f, 0xbe, 0x9b, 0xad, 0xdd, 0x80, 0x45, 0x3f, 0x70, 0xda, 0x0e, 0x2e, 0x53, 0x18,
	0x89, 0x20, 0xe2, 0x4f, 0x9f, 0xe0, 0x83, 0x41, 0x57, 0x1d, 0x60, 0x0d, 0x7d, 0xf0, 0x2d, 0x80,
	0x9e, 0xdb, 0x0f, 0xd5, 0x79, 0xcb, 0x16, 0x7a, 0x01, 0x21, 0x7c, 0xd8, 0xde, 0x81, 0x22, 0x55,
	0xa3, 0x2a, 0xdd, 0xd7, 0xb6, 0x3a, 0xb5, 0x38, 0x20, 0x08, 0x2e, 0x52, 0x2f, 0x90, 0x3d, 0xe1,
	0xd8, 0xfc, 0x5d, 0xd4, 0x67, 0x75, 0x9a, 0x17, 0x49, 0xd5, 0xe0, 0x97, 0x51, 0x8f, 0xc8, 0x04,
	0x19, 0xec, 0x23, 0xe1, 0x0a, 0xaf, 0x25, 0xab, 0x33, 0x6c, 0x2b, 0xa4, 0xf0, 0xd7, 0xb8, 0xc6,
	0x78, 0x02, 0x0b, 0x1e, 0x1a, 0xab, 0x3d, 0x71, 0x41, 0x4a, 0x23, 0x7d, 0xcd, 0xec, 0xdd, 0xdc,
	0xa3, 0x59, 0x73, 0x1e, 0x2b, 0xf6, 0x19, 0x4e, 0xdf, 0xf2, 0x14, 0x0c, 0xf2, 0x78, 0x58, 0xa2,
	0x1d, 0x48, 0x49, 0xe8, 0x8e, 0x5d, 0xcd, 0xdf, 0xcd, 0x3d, 0x9a, 0x31, 0x2b, 0x54, 0xb3, 0xaa,
	0x2b, 0xb6, 0xec, 0xfa, 0xbf, 0xc8, 0xc1, 0xfd, 0xf5, 0x9d, 0xb0, 0xbd, 0xed, 0x1f, 0x1d, 0x5d,
	0xd0, 0x6e, 0x09, 0x70, 0x9a, 0x0f, 0xfa, 0x47, 0x61, 0x2b, 0x70, 0x7a, 0xea, 0xbc, 0x13, 0xc6,
	0x1e, 0x14, 0x49, 0xe3, 0x39, 0x12, 0x76, 0x5b, 0x86, 0xd5, 0xdc, 0xdd, 0xc9, 0x47, 0xc5, 0x95,
	0x46, 0xe3, 0x1d, 0x9a, 0x36, 0x50, 0x13, 0x5a, 0xc3, 0x66, 0x26, 0x74, 0xf4, 0xcf, 0xb0, 0xb6,
	0x09, 0x85, 0xb8, 0xc2, 0xb8, 0x0e, 0xb3, 0x44, 0x5d, 0xaf, 0xa8, 0x39, 0x83, 0xc5, 0x2d, 0xdb,
	0xa8, 0x43, 0x29, 0xe9, 0xd6, 0x3a, 0xef, 0xa9, 0x25, 0x2c, 0xc6, 0x84, 0xbe, 0xee, 0xd5, 0xff,
	0x59, 0x01, 0x96, 0xe2, 0x71, 0x34, 0xc9, 0x6a, 0x67, 0x45, 0xea, 0x06, 0xe4, 0xd9, 0xde, 0x8f,
	0xc9, 0xce, 0x52, 0x79, 0xcb, 0x36, 0x7e, 0x02, 0x65, 0xcd, 0x45, 0x4a, 0x17, 0x9b, 0xa0, 0x2f,
	0xba, 0xdf, 0x18, 0x45, 0xa9, 0xa1, 0x19, 0x90, 0x4a, 0xa6, 0x56, 0xcf, 0xb8, 0x58, 0x6b, 0xc3,
	0xf2, 0x7a, 0x47, 0x44, 0x5f, 0x75, 0xa4, 0x74, 0x77, 0xd8, 0x9d, 0x64, 0x0a, 0xaf, 0x2d, 0x51,
	0xe5, 0x53, 0xee, 0x25, 0xcb, 0xb1, 0x15, 0x4f, 0xf0, 0x38, 0xca, 0x0a, 0xbe, 0x65, 0x33, 0x47,
	0x3c, 0x80, 0x72, 0x0a, 0x53, 0x7a, 0xb6, 0xfa, 0xce, 0xb9, 0x18, 0xaf, 0xe9, 0xd9, 0xb5, 0x4d,
	0xb8, 0xb6, 0x2f, 0x03, 0xc7, 0xb7, 0x9d, 0x96, 0x29, 0x43, 0xbf, 0x1f, 0xb4, 0xe4, 0x97, 0xc2,
	0xed, 0xcb, 0x10, 0x6d, 0xe9, 0x44, 0xd2, 0x72, 0x17, 0x09, 0xc0, 0xa8, 0xc0, 0x64, 0x57, 0x9c,
	0x2b, 0x92, 0xf8, 0xb3, 0xf6, 0x57, 0x67, 0xa1, 0x94, 0xf9, 0x26, 0xdc, 0x01, 0x83, 0xdb, 0x2a,
	0xbd, 0xa1, 0xee, 0x43, 0xc9, 0xf3, 0x83, 0xae, 0x70, 0x93, 0xe9, 0xa2, 0xf1, 0x31, 0x50, 0xd1,
	0x78, 0x08, 0xe5, 0x5e, 0x20, 0xbb, 0x4e, 0xbf, 0xab, 0xb1, 0x26, 0x95, 0x4a, 0xca, 0x50, 0x85,
	0xb6, 0x04, 0xd3, 0xfe, 0x99, 0x27, 0x6d, 0xda, 0x47, 0x79, 0x93, 0x0b, 0xc3, 0x0a, 0xd5, 0xf4,
	0x08, 0x85, 0xaa, 0x01, 0x8b, 0x59, 0xf1, 0xc9, 0x0a, 0x1f, 0x6f, 0x9c, 0x85, 0x34, 0x2a, 0x2b,
	0x7c, 0xb8, 0x71, 0xa9, 0x53, 0xab, 0x23, 0x5d, 0x9b, 0x76, 0x0c, 0x6e, 0x5c, 0x02, 0x6d, 0x4a,
	0x97, 0x04, 0x45, 0x76, 0xc8, 0x8c, 0x98, 0x67, 0x82, 0x99, 0x71, 0x13, 0xfe, 0x67, 0x50, 0xcd,
	0x0e, 0xe0, 0xd8, 0x77, 0xb4, 0xda, 0x59, 0x60, 0xbf, 0x4f, 0x7a, 0x14, 0xaf, 0x7d, 0x47, 0xa9,
	0x9e, 0x0d, 0x58, 0x14, 0x2d, 0x32, 0x3c, 0xe4, 0xf1, 0xb1, 0x6c, 0x45, 0xa1, 0xd5, 0x15, 0xe1,
	0x09, 0xb9, 0xf8, 0xa6, 0xcc, 0x05, 0xae, 0x6a, 0x72, 0xcd, 0x8e, 0x08, 0x4f, 0x8c, 0x33, 0xa8,
	0xf7, 0x3d, 0xd7, 0x6f, 0xd1, 0xb1, 0xda, 0x11, 0x91, 0x75, 0x86, 0xec, 0x65, 0x69, 0x2e, 0x09,
	0x90, 0xc1, 0xc2, 0x6a, 0x89, 0x98, 0xf6, 0xa3, 0xd1, 0x4c, 0x3b, 0x92, 0x29, 0xcd, 0xdb, 0x9a,
	0xec, 0xc8, 0xea, 0xd0, 0xf8, 0x19, 0x5c, 0x63, 0x59, 0x97, 0xda, 0xc6, 0xac, 0x90, 0x57, 0xee,
	0xe6, 0x1e, 0x15, 0x57, 0x1e, 0xbc, 0xcb, 0x9e, 0x37, 0x97, 0x7a, 0xa3, 0x85, 0xc8, 0xdc, 0x99,
	0x68, 0xcb, 0xc0, 0x8a, 0xfc, 0x13, 0xe9, 0x85, 0xd5, 0x05, 0xa2, 0xf8, 0x74, 0xf4, 0xf0, 0x47,
	0xb3, 0xba, 0x59, 0x24, 0x0a, 0x87, 0x44, 0xc0, 0xf8, 0x1a, 0x16, 0xe8, 0x14, 0xce, 0x50, 0x35,
	0xfe, 0x04, 0x54, 0xe7, 0x91, 0xcc, 0x57, 0x29, 0xca, 0x5f, 0x00, 0x44, 0x4e, 0x4f, 0x93, 0x5c,
	0xfc, 0x13, 0x90, 0x2c, 0x44, 0x4e, 0x4f, 0x11, 0xbb, 0xc5, 0xc4, 0x44, 0x97, 0x5c, 0x42, 0xec,
	0xe1, 0xc4, 0xea, 0x55, 0x02, 0xd4, 0xff, 0xfe, 0x04, 0xbc, 0xcf, 0x94, 0x5b, 0xa8, 0xae, 0x05,
	0xa7, 0x32, 0x78, 0x2d, 0x4e, 0x24, 0x75, 0x44, 0xf3, 0x76, 0xc5, 0xe6, 0xfc, 0x1c, 0xe6, 0x94,
	0x5f, 0x33, 0x2d, 0xca, 0x96, 0x47, 0x8e, 0xd6, 0x2c, 0xca, 0x94, 0x84, 0x7c, 0x0a, 0x86, 0x83,
	0x9a, 0x54, 0xb2, 0xde, 0x47, 0x32, 0xa0, 0x5d, 0x9b, 0x37, 0x2b, 0x4e, 0x98, 0x5a, 0xda, 0x23,
	0x19, 0x90, 0x09, 0x1b, 0x38, 0x5d, 0x11, 0x5c, 0x58, 0xb1, 0x5c, 0x9d, 0x52, 0x26, 0x2c, 0xc3,
	0x9b, 0x4a, 0xbc, 0xbe, 0xd3, 0x66, 0x5e, 0x81, 0xe5, 0xec, 0x5e, 0xfa, 0xb6, 0x2f, 0x5c, 0x27,
	0xba, 0x50, 0xdb, 0x79, 0x31, 0x8d, 0xfc, 0x53, 0xae, 0xaa, 0xff, 0xf6, 0x04, 0xcb, 0xfa, 0x35,
	0x11, 0x45, 0xae, 0x5c, 0xef, 0xf7, 0xbe, 0x74, 0x5a, 0x91, 0x1f, 0x5c, 0x5c, 0x35, 0x45, 0x37,
	0x20, 0x8f, 0x4a, 0x47, 0x4a, 0x0b, 0x98, 0x3d, 0x73, 0xd8, 0x92, 0xbb, 0x03, 0xc5, 0x53, 0xe1,
	0x3a, 0x4a, 0x47, 0x52, 0x22, 0x0b, 0x08, 0x44, 0x1a, 0x11, 0x22, 0xa4, 0xad, 0x4b, 0x75, 0xfa,
	0x87, 0x89, 0x59, 0x79, 0x1f, 0x4a, 0x64, 0x2d, 0x0a, 0x7d, 0xd8, 0xaa, 0xaf, 0x4d, 0x80, 0x5b,
	0x36, 0x52, 0xb1, 0x9d, 0x53, 0x27, 0xc4, 0xed, 0xe4, 0xd8, 0xea, 0x1b, 0x41, 0x83, 0xb6, 0x6c,
	0x3c, 0x03, 0x69, 0x16, 0x1c, 0x2d, 0xa7, 0x66, 0xb0, 0xb8, 0x65, 0x1b, 0xd7, 0x60, 0x46, 0x79,
	0x69, 0x59, 0x2c, 0xa9, 0x92, 0x71, 0x13, 0x0a, 0x51, 0xe0, 0xf7, 0x3a, 0x17, 0xd8, 0xa4, 0xa0,
	0x3c, 0xb3, 0x04, 0xd8, 0xb2, 0xeb, 0xfb, 0x70, 0x2b, 0x5e, 0xfe, 0xc1, 0xc9, 0xda, 0x76, 0xc2,
	0xc8, 0x78, 0x06, 0x38, 0x03, 0x9e, 0x0c, 0xf4, 0x61, 0xce, 0xfc, 0x32, 0x88, 0x6b, 0x6a, 0xac,
	0xfa, 0xf7, 0x99, 0x22, 0xea, 0x64, 0x6b, 0x81, 0x2f, 0xec, 0x96, 0x08, 0xa3, 0xb4, 0xe3, 0xc9,
	0xa8, 0xc2, 0xac, 0x12, 0x4f, 0x34, 0xff, 0x05, 0x53, 0x17, 0xeb, 0x7f, 0x0b, 0x57, 0x6d, 0x3f,
	0xf0, 0x23, 0x7f, 0x2b, 0x92, 0x5d, 0x3c, 0xf6, 0x49, 0x6f, 0xba, 0xe4, 0xdc, 0x6f, 0xc0, 0x22,
	0x2b, 0x5b, 0x4a, 0x5c, 0x5a, 0x8e, 0x67, 0x4b, 0x7d, 0x84, 0x2d, 0x70, 0x15, 0x8b, 0xcb, 0x2d,
	0xac, 0xc0, 0x25, 0x08, 0xe5, 0xb7, 0x7d, 0xe9, 0xb5, 0xa4, 0x85, 0x53, 0x4e, 0xcb, 0x58, 0x30,
	0xe7, 0x34, 0x70, 0x57, 0x74, 0x25, 0x1e, 0x3c, 0xad, 0x8b, 0x96, 0x2b, 0x69, 0x09, 0x27, 0x4c,
	0x2e, 0x18, 0x35, 0xc8, 0x9f, 0x49, 0x11, 0xa0, 0x0a, 0x5c, 0x9d, 0xbe, 0x3b, 0x89, 0xb3, 0xa8,
	0xcb, 0xc6, 0x5d, 0x28, 0x3a, 0x5e, 0x2c, 0xc3, 0x68, 0xd1, 0x0a, 0x66, 0x1a, 0x84, 0x34, 0xc3,
	0xe8, 0xc2, 0x45, 0x6d, 0x0c, 0x9b, 0x72, 0xc1, 0xf8, 0x10, 0xe6, 0x53, 0x1c, 0x61, 0x07, 0x7e,
	0x8f, 0xd6, 0x2e, 0x6f, 0x96, 0x13, 0xf0, 0x46, 0xe0, 0xf7, 0xea, 0xff, 0x39, 0x07, 0xd7, 0x92,
	0x99, 0x41, 0x4e, 0x3f, 0xe8, 0xf8, 0x67, 0x2d, 0x11, 0xfe, 0x3f, 0x3b, 0x37, 0xf5, 0x9f, 0x40,
	0x6d, 0x9d, 0xbc, 0x15, 0x7c, 0x7c, 0xac, 0x1e, 0x39, 0xb8, 0xb3, 0xdf, 0xf6, 0xda, 0x81, 0xb0,
	0x25, 0x32, 0x91, 0x60, 0x88, 0x56, 0xd9, 0x54, 0xd1, 0x30, 0x60, 0x8a, 0x4c, 0x1f, 0xfe, 0x4e,
	0xfa, 0x5d, 0xff, 0xd7, 0x38, 0x7d, 0x29, 0x62, 0xa8, 0x33, 0xa3, 0x4a, 0x15, 0x85, 0x31, 0x7a,
	0x2e, 0x41, 0xc7, 0x01, 0xe1, 0xae, 0xd5, 0xda, 0x0b, 0x17, 0x70, 0x7f, 0xd9, 0x52, 0x44, 0x1d,
	0xad, 0xae, 0xa8, 0x12, 0x0d, 0x25, 0x0c, 0x9d, 0x30, 0xd2, 0x1a, 0xbf, 0x2e, 0xe2, 0xce, 0xf3,
	0x64, 0x64, 0x9d, 0xf9, 0x41, 0xd4, 0x51, 0x9b, 0x3d, 0xef, 0xc9, 0xe8, 0x2b, 0x2c, 0x63, 0x25,
	0xb9, 0xc3, 0x3a, 0x4e, 0x14, 0xaa, 0x6d, 0x9e, 0x47, 0xc0, 0xa6, 0x13, 0xa9, 0xbe, 0x3c, 0x47,
	0x86, 0x7a, 0x8f, 0x73, 0xa9, 0x6e, 0xe2, 0xe6, 0xc2, 0xef, 0x58, 0xb5, 0x6d, 0x07, 0x27, 0x4f,
	0xb8, 0x6f, 0x3d, 0x27, 0xda, 0xf2, 0x50, 0xa0, 0xa2, 0x7c, 0xbb, 0x09, 0x85, 0xbe, 0xe7, 0x44,
	0xbc, 0x80, 0xbc, 0xbd, 0xf2, 0x08, 0xd0, 0x8b, 0xe7, 0x44, 0xb2, 0xcb, 0x92, 0xbf, 0x64, 0x72,
	0xa1, 0xde, 0x82, 0x1b, 0xe9, 0xb9, 0xd9, 0x97, 0x41, 0x57, 0x78, 0xd2, 0x8b, 0xd6, 0xfa, 0xc7,
	0xc7, 0xa4, 0xab, 0x69, 0x80, 0x75, 0xd4, 0x3f, 0x3e, 0x56, 0x13, 0x55, 0xea, 0x65, 0xd0, 0x50,
	0xf6, 0x45, 0xa2, 0x75, 0xa2, 0x6e, 0x33, 0x26, 0x94, 0xec, 0x43, 0x10, 0xdd, 0x62, 0xd4, 0x7f,
	0x0e, 0xcb, 0xdc, 0x09, 0xed, 0x6a, 0xe9, 0xca, 0x56, 0x44, 0x87, 0x00, 0xb2, 0x2f, 0x1e, 0x2d,
	0x4e, 0xeb, 0x84, 0x28, 0xe7, 0xcd, 0x19, 0x27, 0xdc, 0x77, 0x5a, 0x27, 0xb4, 0x30, 0x78, 0x24,
	0xe8, 0x75, 0xc4, 0xa3, 0x20, 0xc5, 0xeb, 0x93, 0x69, 0x5e, 0xaf, 0xff, 0x6e, 0x0e, 0x1e, 0x68,
	0xa9, 0xb3, 0x1f, 0xf8, 0x2d, 0x19, 0x86, 0xaf, 0x85, 0x17, 0x89, 0xf0, 0xe2, 0xa0, 0xd5, 0x91,
	0x76, 0xdf, 0x95, 0x36, 0x77, 0xb7, 0x04, 0xd3, 0x74, 0x26, 0xa9, 0xcf, 0xe0, 0x02, 0xea, 0xc5,
	0xc9, 0x35, 0xc6, 0x84, 0x3e, 0x77, 0xf5, 0x95, 0xc5, 0x13, 0x58, 0x38, 0x66, 0x62, 0xda, 0x5b,
	0x1e, 0xf7, 0x3f, 0xaf, 0x2a, 0xd8, 0x5f, 0xae, 0x84, 0x30, 0xd9, 0xf4, 0xfa, 0xa6, 0x96, 0x4b,
	0x38, 0x8f, 0x81, 0x3c, 0x96, 0x01, 0xed, 0x2e, 0x52, 0x93, 0x98, 0x1f, 0x4a, 0x31, 0x14, 0x4f,
	0xf0, 0xfa, 0x2e, 0x1f, 0x5b, 0xf8, 0x19, 0x9b, 0x22, 0xc4, 0xbd, 0xfe, 0xd3, 0xbe, 0xbc, 0xfa,
	0xd8, 0xc2, 0x49, 0x8c, 0x24, 0x9d, 0x09, 0x13, 0xa4, 0x29, 0xce, 0x60, 0x71, 0xcb, 0xae, 0x7f,
	0x02, 0xd7, 0x07, 0xe8, 0x99, 0x32, 0xec, 0xf9, 0x5e, 0x28, 0xf1, 0xa8, 0xeb, 0x88, 0xd0, 0x42,
	0x44, 0x35, 0xf3, 0xb3, 0x1d, 0x46, 0xa9, 0xbf, 0x80, 0x0a, 0xb6, 0x7a, 0xb3, 0xbe, 0x15, 0xee,
	0x07, 0xfe, 0xbb, 0x8c, 0xa0, 0xfe, 0x14, 0x16, 0x53, 0x4d, 0xe2, 0x4e, 0x96, 0x61, 0x06, 0x57,
	0x37, 0xf0, 0x55, 0x17, 0xd3, 0x0e, 0x56, 0xd7, 0x7f, 0x06, 0xd5, 0x81, 0x61, 0x6d, 0xc8, 0xe3,
	0xf0, 0x9d, 0x3e, 0xf5, 0x0e, 0x14, 0x71, 0xc8, 0xb6, 0x3c, 0xb6, 0x1c, 0x5b, 0x73, 0x32, 0x28,
	0xd0, 0x96, 0x1d, 0xd6, 0x5f, 0xc1, 0xcd, 0x11, 0xb4, 0xe3, 0x11, 0xdd, 0x84, 0x82, 0xfe, 0xec,
	0x50, 0x0d, 0x2a, 0xaf, 0xbe, 0x3b, 0xac, 0xff, 0x32, 0xc7, 0x8d, 0xdf, 0xac, 0xbf, 0x91, 0x11,
	0x6f, 0x87, 0x75, 0x11, 0xd8, 0x58, 0xb9, 0xe5, 0x1d, 0xfb, 0x57, 0x8d, 0xed, 0x19, 0x2c, 0x29,
	0x6f, 0x75, 0x4b, 0x04, 0xb6, 0xa5, 0x96, 0x84, 0x07, 0x39, 0x65, 0x2e, 0xf4, 0xb2, 0x04, 0xed,
	0x10, 0xcd, 0x56, 0xe1, 0xba, 0xd6, 0xb1, 0x1f, 0xb0, 0xa6, 0xa4, 0xb8, 0xaa, 0x28, 0x5c, 0xf7,
	0xb5, 0x1f, 0x10, 0xc7, 0xd6, 0xff, 0xfa, 0x04, 0x5b, 0xde, 0x63, 0xc6, 0x14, 0x7f, 0x98, 0x05,
	0x0b, 0x99, 0xce, 0xbd, 0x63, 0x5f, 0x1f, 0xd9, 0x2f, 0x1b, 0xef, 0x40, 0xa0, 0x91, 0xaa, 0x42,
	0xf0, 0x7c, 0x2f, 0x53, 0x0e, 0x6b, 0x7f, 0x31, 0x07, 0xe5, 0x2c, 0x8e, 0xf1, 0x31, 0x2c, 0x8e,
	0xf8, 0x60, 0x9a, 0x98, 0x29, 0xb3, 0x32, 0xf8, 0xbd, 0x03, 0xd3, 0x37, 0x31, 0x38, 0x7d, 0x28,
	0x6b, 0xc8, 0x99, 0x65, 0x1d, 0xf9, 0x5e, 0x3f, 0x94, 0x2c, 0x68, 0xa7, 0xcc, 0x12, 0x43, 0xd7,
	0x18, 0x58, 0xff, 0x06, 0xee, 0xf0, 0xe7, 0x1c, 0xfa, 0x6f, 0xd6, 0xf5, 0x2e, 0x97, 0x11, 0x49,
	0x17, 0xde, 0x87, 0xc8, 0xdb, 0x7c, 0xcb, 0x1a, 0x0f, 0x66, 0x96, 0xca, 0x5b, 0x36, 0x89, 0xdd,
	0x78, 0x13, 0x4f, 0x28, 0xb1, 0xab, 0x76, 0x6f, 0xfd, 0xcf, 0xe7, 0xe0, 0xba, 0xf2, 0x27, 0xed,
	0x88, 0x1e, 0xea, 0xd9, 0x28, 0x63, 0xf9, 0xfa, 0xf3, 0x9d, 0x1c, 0x4a, 0x0f, 0xa1, 0xe8, 0xaa,
	0x56, 0x9a, 0xfe, 0xb4, 0xc2, 0x02, 0x5d, 0xb1, 0x65, 0xa3, 0xbc, 0x89, 0xaf, 0xd0, 0x95, 0x1a,
	0x9d, 0x00, 0xea, 0xdf, 0xe3, 0xbd, 0x94, 0xba, 0x83, 0x23, 0x4d, 0xec, 0x0e, 0x14, 0x93, 0x01,
	0xf0, 0xd2, 0x96, 0x4c, 0x88, 0xfb, 0x0e, 0xeb, 0xff, 0x38, 0x07, 0xb5, 0x75, 0xba, 0x0c, 0xf3,
	0x6c, 0xa7, 0xdf, 0x3d, 0xd4, 0x02, 0x4c, 0xf2, 0x2d, 0xc8, 0x4d, 0x28, 0xc4, 0x1e, 0x78, 0xc5,
	0xbb, 0xf9, 0xb6, 0xf2, 0xbc, 0xa3, 0xed, 0xdf, 0xee, 0x69, 0x61, 0x8b, 0x3f, 0x11, 0x72, 0xde,
	0xeb, 0x2a, 0x8e, 0xc4, 0x9f, 0xc9, 0xb1, 0x38, 0x35, 0xfa, 0x58, 0x9c, 0xce, 0x1c, 0x8b, 0x0f,
	0xa1, 0x4c, 0xfc, 0xd0, 0xeb, 0x07, 0xad, 0x8e, 0xc0, 0xd5, 0x9c, 0xa1, 0x11, 0x97, 0x10, 0xba,
	0xaf, 0x81, 0xf5, 0x5f, 0x87, 0xeb, 0xa9, 0x31, 0xeb, 0x9b, 0x00, 0xd7, 0xf1, 0xa4, 0xf1, 0x0c,
	0xa6, 0x48, 0x52, 0x32, 0x13, 0xdf, 0x6c, 0x8c, 0xff, 0x36, 0x93, 0x10, 0xe9, 0xc8, 0x10, 0x6d,
	0xde, 0x6f, 0x05, 0x93, 0x7e, 0xd7, 0x9b, 0xb0, 0x38, 0x40, 0x9f, 0x26, 0xb3, 0x01, 0xd3, 0xe4,
	0x1e, 0x56, 0xc4, 0xab, 0x8d, 0x31, 0x83, 0x30, 0x19, 0xad, 0xde, 0x86, 0xa5, 0xf5, 0xe4, 0xcc,
	0x6d, 0x7e, 0xdb, 0x77, 0x7a, 0x07, 0xae, 0x1f, 0x21, 0xa7, 0xb5, 0x5c, 0x11, 0x86, 0x29, 0xdf,
	0x11, 0x95, 0x59, 0x28, 0x87, 0xae, 0x9f, 0x62, 0xf5, 0x19, 0x2c, 0x32, 0x0b, 0x92, 0xf8, 0x22,
	0x75, 0x8c, 0xe7, 0x37, 0x8f, 0xc2, 0x0b, 0xcb, 0xf5, 0xbf, 0x37, 0xc7, 0xab, 0xaf, 0x4e, 0xb2,
	0x63, 0xc7, 0x95, 0xb8, 0x83, 0xae, 0x12, 0x3d, 0xcf, 0x61, 0xe9, 0x48, 0xb4, 0x4e, 0xda, 0x81,
	0xdf, 0xf7, 0x6c, 0x2b, 0x21, 0xcf, 0x3d, 0x1b, 0x49, 0xdd, 0x86, 0xea, 0xc8, 0x78, 0x06, 0xd3,
	0x38, 0x1e, 0xdc, 0x64, 0x38, 0x03, 0x37, 0x1a, 0x23, 0x7a, 0x6d, 0xe0, 0x37, 0x9a, 0x8c, 0x67,
	0xdc, 0x83, 0x39, 0x76, 0xaf, 0x29, 0xf3, 0x91, 0xb9, 0xa0, 0x48, 0x30, 0x65, 0x27, 0xde, 0x1b,
	0xb0, 0x30, 0x99, 0x23, 0x32, 0xa6, 0x64, 0xda, 0xd9, 0x36, 0x93, 0x75, 0xb6, 0xed, 0xc3, 0x0d,
	0xe5, 0xf8, 0x3d, 0x22, 0xeb, 0xc2, 0x6a, 0xf5, 0x7b, 0xd6, 0x29, 0xdb, 0x17, 0xa4, 0x07, 0x8d,
	0x35, 0x3e, 0xae, 0x71, 0xbb, 0x21, 0x6b, 0xef, 0x26, 0x14, 0xd8, 0xfb, 0xee, 0xc8, 0x40, 0x59,
	0x45, 0x79, 0x04, 0x1c, 0x3a, 0x32, 0x30, 0x1e, 0x43, 0x85, 0x43, 0x50, 0x8e, 0x7c, 0x14, 0x5e,
	0x74, 0x9f, 0xc1, 0xe6, 0xd1, 0x7c, 0x0a, 0x4e, 0x17, 0x19, 0xa3, 0xed, 0x5f, 0x18, 0x63, 0xff,
	0x7e, 0x06, 0x55, 0x42, 0x1d, 0xe5, 0x5a, 0x2e, 0xaa, 0xd0, 0x23, 0xb7, 0x1f, 0xee, 0x0d, 0xb9,
	0x97, 0x3f, 0x80, 0xf9, 0x78, 0xb8, 0x7c, 0x63, 0xaa, 0x62, 0xbb, 0x4a, 0x7a, 0xd0, 0x74, 0x3f,
	0xaa, 0xdc, 0xc8, 0xa7, 0x8e, 0xdf, 0x0f, 0xad, 0xe4, 0xfb, 0x4a, 0xb1, 0x1b, 0x99, 0x6a, 0x4c,
	0xd5, 0xa4, 0xf6, 0x77, 0x66, 0x60, 0x8a, 0x78, 0x35, 0xc5, 0x90, 0xb9, 0x0c, 0x43, 0x7e, 0x0e,
	0x33, 0x6c, 0x10, 0x12, 0xbb, 0x14, 0x57, 0xee, 0x8e, 0xe5, 0x85, 0xc6, 0x21, 0xe1, 0x99, 0x0a,
	0xdf, 0x58, 0x81, 0x29, 0x34, 0x24, 0x88, 0x8b, 0x8b, 0x2b, 0xb7, 0xc7, 0xb7, 0x43, 0x19, 0x6a,
	0x12, 0x2e, 0xb6, 0x21, 0xa5, 0x63, 0xea, 0xaa, 0x36, 0xa4, 0xae, 0x10, 0x2e, 0xb6, 0x41, 0x4d,
	0x8f, 0x18, 0xea, 0xd2, 0x36, 0xa8, 0x5e, 0x9a, 0x84, 0x6b, 0xfc, 0x08, 0xf2, 0xb2, 0xeb, 0x47,
	0x4e, 0x4b, 0x59, 0x1d, 0xc5, 0x95, 0xfa, 0xf8, 0x76, 0x4d, 0x85, 0x69, 0xc6, 0x6d, 0xb0, 0x4f,
	0x52, 0x40, 0x67, 0xaf, 0xea, 0x13, 0xcd, 0x31, 0x56, 0x50, 0x6b, 0x9b, 0x30, 0xc3, 0x33, 0x94,
	0xb5, 0xba, 0x73, 0x59, 0xab, 0x1b, 0xf7, 0x89, 0xaa, 0xe4, 0x55, 0x56, 0xde, 0x6a, 0x86, 0xd1,
	0x1a, 0xd7, 0x3c, 0x98, 0xc2, 0x39, 0x33, 0xde, 0xc0, 0x2c, 0xce, 0x9a, 0xa6, 0x52, 0x5e, 0x79,
	0x7f, 0xe4, 0x40, 0x9a, 0x88, 0xbc, 0xb5, 0xf1, 0xaa, 0x72, 0x62, 0x49, 0xfc, 0x69, 0x1d, 0xf8,
	0xae, 0x8f, 0x2c, 0x60, 0xce, 0x60, 0x73, 0x3e, 0x7c, 0x89, 0x50, 0xba, 0xc7, 0x02, 0x42, 0xb8,
	0xbf, 0x4d, 0x98, 0xc2, 0xf9, 0x46, 0x93, 0x34, 0x94, 0x81, 0x23, 0x5c, 0xe7, 0x17, 0xd2, 0x4e,
	0xb4, 0xc3, 0x39, 0xb3, 0x9c, 0x80, 0x09, 0x71, 0x9c, 0xce, 0x59, 0xfb, 0x39, 0x4c, 0xe1, 0x2a,
	0x8c, 0x37, 0x4c, 0x51, 0x05, 0xc3, 0x0a, 0x0a, 0x73, 0x54, 0x47, 0x30, 0x02, 0xbe, 0x72, 0x3c,
	0xba, 0x43, 0xa1, 0x4a, 0x15, 0xef, 0xa8, 0xdc, 0x2c, 0x08, 0xda, 0x26, 0x48, 0xed, 0x23, 0xc8,
	0xeb, 0xc5, 0x42, 0x64, 0xbd, 0x5c, 0x49, 0x37, 0xa0, 0x41, 0x5b, 0x76, 0xed, 0x0e, 0x4c, 0x1d,
	0x2a, 0xc3, 0x41, 0x3b, 0x4d, 0x72, 0x69, 0xa7, 0x49, 0xfd, 0x9f, 0xe4, 0x60, 0x56, 0xcd, 0x9d,
	0xb1, 0x04, 0x43, 0xb3, 0x57, 0xc9, 0x19, 0xcb, 0xb0, 0xa0, 0xa1, 0xfb, 0x22, 0x88, 0x2e, 0x08,
	0x3c, 0x61, 0x54, 0x60, 0x4e, 0x83, 0x71, 0xdc, 0x95, 0xc9, 0x74, 0xf3, 0x75, 0xbf, 0xdb, 0x95,
	0x9e, 0x1d, 0x56, 0xa6, 0x8c, 0xeb, 0xb0, 0xa8, 0xa1, 0xa9, 0x9b, 0xc6, 0xca, 0xb4, 0x51, 0x83,
	0x6b, 0xba, 0xe2, 0xb5, 0x13, 0x84, 0xac, 0xbf, 0xa0, 0x18, 0xa8, 0xcc, 0x18, 0xb7, 0xa1, 0x16,
	0xf7, 0xa9, 0xb6, 0x33, 0xdf, 0x14, 0x52, 0xe7, 0xb3, 0xf5, 0x7f, 0x3e, 0x15, 0xdf, 0x7b, 0x29,
	0x8d, 0x4c, 0x47, 0x90, 0xbc, 0x9b, 0x9a, 0x72, 0x27, 0x25, 0x84, 0x27, 0x52, 0x28, 0xb1, 0x28,
	0xbe, 0x95, 0x88, 0x8a, 0xc9, 0x54, 0xbd, 0x16, 0x18, 0xb7, 0xd1, 0xa6, 0xa7, 0xa8, 0x08, 0xd1,
	0xb5, 0x9e, 0x2b, 0x31, 0x5f, 0x70, 0x28, 0x00, 0x42, 0x74, 0x9f, 0x67, 0xeb, 0x5f, 0x28, 0x39,
	0x1f, 0xd7, 0xbf, 0x40, 0xfe, 0x6f, 0x05, 0x52, 0x44, 0x92, 0x6f, 0xb6, 0x94, 0x91, 0x5b, 0x54,
	0x30, 0x52, 0x48, 0x32, 0x2a, 0x12, 0x8b, 0xee, 0x04, 0x40, 0xf6, 0xa6, 0xf6, 0x55, 0xc4, 0x5e,
	0x2d, 0xd0, 0x20, 0xd6, 0x25, 0x93, 0xa0, 0x1b, 0x12, 0x8f, 0xc0, 0x92, 0x34, 0x86, 0xd2, 0x19,
	0xb0, 0x04, 0xd3, 0x7c, 0x97, 0xc7, 0x72, 0x99, 0x0b, 0x46, 0x0d, 0xf2, 0x22, 0x8a, 0x64, 0xb7,
	0x17, 0x85, 0x4a, 0x00, 0xc7, 0x65, 0x22, 0xac, 0x86, 0x61, 0xb9, 0x4e, 0xd7, 0x89, 0x94, 0xdc,
	0x2d, 0x69, 0xe8, 0x36, 0x02, 0x71, 0xb7, 0x7d, 0xdb, 0x97, 0x61, 0xc4, 0xc7, 0x0a, 0x07, 0xdc,
	0x16, 0x08, 0x42, 0x07, 0xca, 0x03, 0x28, 0x77, 0xc5, 0xb9, 0x95, 0x42, 0x99, 0x57, 0x17, 0x39,
	0xe2, 0xfc, 0xa7, 0x31, 0xd6, 0x1d, 0x72, 0x9d, 0x44, 0x42, 0x7d, 0x65, 0x85, 0xbf, 0x52, 0x83,
	0x58, 0xc5, 0xd0, 0x5b, 0x6c, 0x21, 0xb3, 0xc5, 0xee, 0x40, 0x11, 0xc7, 0xeb, 0x8a, 0x88, 0x5a,
	0x72, 0xa0, 0x2d, 0x68, 0xd0, 0x96, 0x5d, 0xff, 0x05, 0x1b, 0x15, 0x1c, 0x98, 0x8c, 0x8a, 0xb4,
	0x29, 0x03, 0xdf, 0x75, 0x07, 0xb9, 0xe9, 0x92, 0xab, 0xb1, 0x81, 0x25, 0x98, 0x1c, 0x5a, 0x82,
	0xd4, 0xe0, 0xa6, 0x32, 0xc6, 0xfa, 0x7f, 0xcb, 0x69, 0x8b, 0x66, 0x64, 0xa7, 0xb1, 0x45, 0xf3,
	0x16, 0x66, 0x02, 0x19, 0xf6, 0xdd, 0x48, 0x49, 0xbe, 0xa7, 0x8d, 0x77, 0x68, 0xd5, 0x68, 0x9a,
	0xd4, 0xe6, 0xd5, 0xbc, 0xe4, 0x1f, 0xd6, 0x41, 0xbf, 0xd5, 0x92, 0x61, 0x68, 0x2a, 0x62, 0xf5,
	0x5f, 0xc0, 0xac, 0xc2, 0x31, 0x16, 0x61, 0x10, 0xab, 0xf2, 0x5e, 0x1a, 0xb8, 0x11, 0xf8, 0xbd,
	0x9e, 0xb4, 0x2b, 0x39, 0xdc, 0xdc, 0x1a, 0xb8, 0xeb, 0x47, 0xaf, 0x51, 0x93, 0xaa, 0x4c, 0x18,
	0xd7, 0xc0, 0xd0, 0xd0, 0x75, 0xe1, 0x45, 0x3c, 0xb0, 0xca, 0x24, 0x6e, 0xfa, 0x98, 0x2e, 0xf9,
	0xe9, 0x9b, 0x41, 0xe0, 0x07, 0x95, 0xa9, 0xfa, 0x09, 0x1b, 0xbe, 0x68, 0xbb, 0xf4, 0xd6, 0xe3,
	0x9b, 0xf5, 0x90, 0x54, 0xd2, 0x47, 0x50, 0x89, 0xfc, 0x9e, 0x95, 0xba, 0x97, 0x67, 0xed, 0x74,
	0xca, 0x2c, 0x47, 0x19, 0x6c, 0xe3, 0x21, 0xcc, 0x93, 0x26, 0xef, 0x1f, 0x5b, 0x51, 0x47, 0x5a,
	0xb6, 0xb8, 0x50, 0x22, 0x78, 0x0e, 0xc1, 0x7b, 0xc7, 0x87, 0x1d, 0xb9, 0x21, 0x2e, 0xea, 0xff,
	0xf3, 0x01, 0xdc, 0xd0, 0x67, 0x85, 0x29, 0x85, 0x8b, 0x5b, 0x8d, 0x03, 0x76, 0x45, 0x14, 0x1a,
	0x3f, 0x84, 0x69, 0xb2, 0x89, 0x68, 0x72, 0x8b, 0x2b, 0x1f, 0x36, 0xc6, 0xa2, 0x36, 0x58, 0x34,
	0xc9, 0x48, 0x38, 0x6e, 0x68, 0x72, 0x2b, 0xe3, 0x07, 0x30, 0x8d, 0x22, 0x54, 0xdf, 0x22, 0x7c,
	0x70, 0x49, 0x73, 0x94, 0xc0, 0x71, 0x6b, 0x6a, 0x64, 0x6c, 0x42, 0xe1, 0xa8, 0xef, 0xb8, 0xb6,
	0xe3, 0xb5, 0xb5, 0x02, 0xfa, 0xe4, 0x12, 0x0a, 0x6b, 0x0a, 0x57, 0x53, 0x49, 0x1a, 0x1b, 0xeb,
	0x00, 0xed, 0x40, 0xf4, 0x3a, 0xec, 0x54, 0x99, 0x4a, 0xdd, 0x3d, 0x8d, 0x26, 0xf5, 0x06, 0x91,
	0xc9, 0x66, 0x28, 0xb4, 0xf5, 0x4f, 0x72, 0xba, 0x4b, 0x37, 0x12, 0xd6, 0x71, 0x20, 0xba, 0x92,
	0xe4, 0x59, 0xde, 0x04, 0x02, 0xbd, 0x46, 0x48, 0xed, 0xf7, 0x26, 0xa0, 0x98, 0xfa, 0x0c, 0xde,
	0x5f, 0xa2, 0xab, 0xe2, 0xb4, 0xf4, 0xc1, 0x83, 0x20, 0x8e, 0xcd, 0x4a, 0x1f, 0x38, 0x13, 0x19,
	0x2f, 0x3d, 0xea, 0x05, 0xd4, 0x32, 0xf1, 0xb0, 0xe6, 0xa9, 0x9d, 0xe8, 0xca, 0xb8, 0xd2, 0xf5,
	0xdb, 0x3e, 0x7d, 0xcb, 0x0c, 0x57, 0x6e, 0xfb, 0x6d, 0x1f, 0xf7, 0x22, 0x55, 0x46, 0xa2, 0x4d,
	0xc2, 0xac, 0x60, 0x52, 0x17, 0x87, 0xa2, 0x4d, 0x1e, 0x54, 0x3a, 0xd6, 0x59, 0x12, 0x73, 0x21,
	0xeb, 0x7e, 0x2c, 0x0c, 0xb8, 0x1f, 0xd7, 0x60, 0x96, 0xed, 0x73, 0xb6, 0xcb, 0x8a, 0x2b, 0x8f,
	0x2e, 0x99, 0x34, 0xde, 0x6b, 0x7a, 0xf6, 0x75, 0x43, 0xec, 0xc0, 0xf7, 0xdc, 0x0b, 0x2b, 0x56,
	0x93, 0xf2, 0x66, 0x1e, 0x01, 0x74, 0xe4, 0x5e, 0x83, 0x99, 0x56, 0x47, 0x22, 0x7d, 0x75, 0x1d,
	0xc1, 0xa5, 0xda, 0x2f, 0x73, 0x50, 0x64, 0xaf, 0x0c, 0x4f, 0xe5, 0x07, 0x30, 0x4f, 0x7a, 0x84,
	0xf2, 0xdf, 0x26, 0x92, 0x86, 0x0c, 0x45, 0xe5, 0xf6, 0xe5, 0x77, 0x11, 0x34, 0x67, 0x13, 0xf4,
	0xe9, 0xf4, 0x3b, 0x76, 0xde, 0xe2, 0x3c, 0x4e, 0x2b, 0xe7, 0xad, 0x01, 0x53, 0xa1, 0xef, 0xea,
	0x5b, 0x63, 0xfa, 0x6d, 0xdc, 0x06, 0xf6, 0x45, 0xb2, 0x77, 0x72, 0x3a, 0xe5, 0x9d, 0x24, 0x48,
	0xed, 0xaf, 0xe4, 0xa0, 0xac, 0x7a, 0xd2, 0xc3, 0x2a, 0xc3, 0x44, 0x3c, 0x92, 0x09, 0x67, 0x74,
	0xf7, 0xf1, 0x73, 0x8b, 0xc9, 0xf4, 0x73, 0x8b, 0x1a, 0xe4, 0x5b, 0xbe, 0xef, 0xda, 0xfe, 0x99,
	0xa7, 0xbc, 0xe4, 0x71, 0x99, 0x0e, 0x3e, 0xf5, 0xdb, 0xea, 0x8a, 0x73, 0x1a, 0xca, 0x84, 0x59,
	0xd4, 0xb0, 0x1d, 0x71, 0x5e, 0xfb, 0x39, 0xcc, 0xa3, 0xfa, 0x74, 0xe8, 0xeb, 0xfb, 0x0f, 0x3a,
	0x8f, 0xd0, 0x0c, 0x72, 0xba, 0x89, 0x2a, 0xa9, 0xcb, 0x63, 0x7c, 0xd5, 0x29, 0x9f, 0xf4, 0x64,
	0xc6, 0x27, 0x5d, 0xbb, 0x05, 0x45, 0xf5, 0xa5, 0x24, 0x74, 0xf4, 0x67, 0x4e, 0xf2, 0x67, 0xd6,
	0xfe, 0x6e, 0x19, 0x4a, 0x99, 0xd5, 0xc6, 0x83, 0x58, 0x29, 0x0e, 0x43, 0x76, 0xa7, 0x63, 0xe3,
	0xd0, 0x98, 0x1b, 0x12, 0x6f, 0x8a, 0x2e, 0xc7, 0x53, 0x36, 0x39, 0xb0, 0x62, 0xc8, 0x2d, 0x53,
	0x29, 0xaf, 0xee, 0x35, 0xa0, 0x93, 0x21, 0xbe, 0x10, 0x53, 0x25, 0xa3, 0x0e, 0x73, 0x1d, 0x64,
	0xc5, 0x8e, 0xb2, 0x26, 0x59, 0x8d, 0xc8, 0xc0, 0x8c, 0x47, 0x30, 0xdf, 0x15, 0xe7, 0x19, 0x34,
	0x56, 0x26, 0x06, 0xc1, 0x88, 0xc9, 0xe5, 0x40, 0xb6, 0xa5, 0x17, 0xa0, 0x31, 0x96, 0xa7, 0xd9,
	0x1f, 0x04, 0x23, 0xb7, 0x74, 0x85, 0x27, 0x14, 0x39, 0xa5, 0x5b, 0x24, 0x10, 0xe3, 0x01, 0x94,
	0xba, 0xe2, 0x3c, 0x85, 0xa2, 0x54, 0x8b, 0x0c, 0x90, 0xb1, 0x3c, 0x91, 0xf4, 0x56, 0xa4, 0xde,
	0xb2, 0x40, 0xe3, 0x3e, 0x94, 0x8e, 0x44, 0xc8, 0xef, 0x2b, 0xbc, 0x76, 0xd4, 0x51, 0xfa, 0xc6,
	0x1c, 0x02, 0x0f, 0x14, 0x8c, 0x2d, 0xef, 0x50, 0x5a, 0xa2, 0xcd, 0x37, 0x1e, 0x25, 0x6d, 0x79,
	0x87, 0x72, 0x95, 0x41, 0xc6, 0x47, 0xb0, 0x40, 0x28, 0x8e, 0x17, 0x49, 0xd7, 0x75, 0xda, 0x78,
	0x06, 0x2b, 0xb5, 0xa3, 0x82, 0x15, 0x5b, 0x29, 0x38, 0x2a, 0x27, 0x4c, 0x2f, 0xe8, 0xfa, 0x01,
	0x69, 0x1e, 0xd3, 0x66, 0x81, 0xa8, 0x21, 0x00, 0x55, 0x1c, 0xaa, 0xee, 0xfa, 0xa7, 0x32, 0xec,
	0x49, 0xa9, 0x35, 0x0f, 0x1a, 0xe9, 0x8e, 0x06, 0xa2, 0x0c, 0x24, 0x34, 0x5b, 0x74, 0x45, 0x5b,
	0x2a, 0x05, 0x84, 0x08, 0x6f, 0x10, 0x04, 0x79, 0x23, 0xfe, 0x2c, 0xd6, 0x40, 0xe2, 0x32, 0x31,
	0xa8, 0xfa, 0x9a, 0x45, 0xc5, 0xa0, 0xea, 0x4b, 0xea, 0x30, 0x97, 0xf9, 0x88, 0x25, 0xfd, 0x58,
	0x29, 0xf5, 0x01, 0x4b, 0x30, 0xcd, 0x63, 0x5f, 0xa6, 0xb1, 0x73, 0x01, 0x39, 0x35, 0x19, 0x32,
	0xbf, 0xae, 0x49, 0x00, 0xe4, 0xa7, 0xe2, 0x91, 0x5e, 0x57, 0x7e, 0x2a, 0x1e, 0xa5, 0x36, 0x38,
	0x54, 0x65, 0x35, 0x31, 0x38, 0xd4, 0x67, 0xa0, 0xb1, 0xe6, 0x9f, 0xc9, 0x40, 0x63, 0xdc, 0x50,
	0xc6, 0x1a, 0xc2, 0x14, 0xca, 0x1b, 0x28, 0xb0, 0xf8, 0x72, 0x64, 0x58, 0xad, 0x91, 0x38, 0x7d,
	0x7c, 0x89, 0x38, 0xcd, 0x8a, 0x1a, 0x33, 0x69, 0x9b, 0x48, 0x94, 0x9b, 0x69, 0x89, 0x72, 0x0b,
	0x80, 0x2e, 0x96, 0x59, 0x7c, 0xf1, 0xe3, 0x9a, 0x02, 0x42, 0xf8, 0x85, 0x08, 0x9d, 0x5e, 0x22,
	0xea, 0xa8, 0x7a, 0xf5, 0xbc, 0x86, 0x40, 0x8c, 0x70, 0x1f, 0x4a, 0x6a, 0xfb, 0x2b, 0x94, 0xdb,
	0x2a, 0x52, 0x9c, 0x81, 0x8c, 0x74, 0x0f, 0xe6, 0xf8, 0x92, 0x49, 0xe1, 0xf0, 0x53, 0x9b, 0x22,
	0xc3, 0x18, 0xe5, 0x06, 0xe4, 0x5d, 0xdd, 0xcb, 0x5d, 0x5e, 0x35, 0xb7, 0x13, 0xb7, 0xa6, 0x59,
	0xc4, 0xbd, 0xe4, 0x78, 0xed, 0xea, 0xbd, 0x24, 0xfe, 0x6a, 0x93, 0x41, 0xc6, 0x5d, 0x98, 0x6b,
	0xfb, 0xae, 0x6d, 0xf5, 0x64, 0x60, 0x75, 0x1d, 0xaf, 0x5a, 0xe7, 0x71, 0x22, 0x6c, 0x5f, 0x06,
	0x3b, 0x8e, 0x67, 0xbc, 0x0f, 0x70, 0xde, 0x8b, 0xeb, 0xef, 0x33, 0xcb, 0x9c, 0xf7, 0x54, 0xed,
	0x0d, 0xc0, 0xd3, 0xcb, 0x42, 0xfc, 0xea, 0x03, 0xee, 0xdd, 0x93, 0xd1, 0x1b, 0x94, 0xef, 0x06,
	0x4c, 0x11, 0xf8, 0x21, 0x4b, 0x15, 0xfc, 0x6d, 0xcc, 0x41, 0xee, 0x9c, 0xde, 0xff, 0x4c, 0x98,
	0xb9, 0x73, 0x2c, 0x5d, 0xd0, 0x9b, 0x9e, 0x09, 0x33, 0x77, 0x81, 0xa3, 0x0d, 0x64, 0xd8, 0x13,
	0x67, 0x1c, 0x5f, 0x58, 0x7d, 0x44, 0x6c, 0x54, 0x54, 0x30, 0xb2, 0x3f, 0x3e, 0x82, 0x85, 0x3e,
	0x2e, 0x1b, 0x6a, 0xd0, 0xb1, 0x38, 0xe7, 0xb7, 0x3d, 0x15, 0x5d, 0xb1, 0xae, 0xc5, 0x3a, 0xf2,
	0x90, 0x08, 0xad, 0xa3, 0xfe, 0xc5, 0x91, 0x68, 0x9d, 0xd0, 0x63, 0x9e, 0xbc, 0x09, 0x1d, 0x11,
	0xae, 0x31, 0x04, 0xb5, 0x25, 0xbe, 0x71, 0xf8, 0xe8, 0x4a, 0x6d, 0x29, 0x75, 0x36, 0xaa, 0x1b,
	0x3a, 0xe3, 0x35, 0x1d, 0x5f, 0x61, 0x87, 0x49, 0x3c, 0xfd, 0x4e, 0x24, 0x52, 0x2d, 0x0d, 0x13,
	0x2a, 0xf4, 0xa3, 0xe3, 0xf7, 0x7a, 0x8e, 0xd7, 0x76, 0x9d, 0x30, 0xaa, 0x7e, 0xfc, 0x9d, 0xa8,
	0x0d, 0xb5, 0x37, 0x36, 0xa1, 0x48, 0x4c, 0xaa, 0x44, 0x61, 0xe3, 0x4a, 0x72, 0xa9, 0xd3, 0xc7,
	0x4c, 0x37, 0x35, 0xbe, 0x02, 0x83, 0x58, 0x28, 0xf2, 0xf9, 0xd1, 0x44, 0x88, 0xe8, 0xd5, 0x67,
	0x57, 0x2a, 0x87, 0x03, 0xa7, 0x25, 0xca, 0xf3, 0xec, 0xf1, 0x89, 0xbc, 0x29, 0x42, 0x4b, 0xaf,
	0x1a, 0x3d, 0x31, 0xca, 0x9b, 0xb8, 0x62, 0x6f, 0x15, 0xc8, 0x78, 0x02, 0x0b, 0x69, 0x14, 0x0b,
	0x85, 0x34, 0xbd, 0x2a, 0xca, 0x9b, 0xf3, 0x29, 0xbc, 0x1d, 0xe1, 0x89, 0xda, 0xef, 0xe4, 0x60,
	0x7e, 0x40, 0x21, 0x1d, 0x79, 0x59, 0x59, 0x45, 0xfb, 0x47, 0x20, 0x16, 0x9d, 0x80, 0x13, 0xa6,
	0x2e, 0x22, 0xb6, 0x2b, 0x3c, 0xa9, 0x0f, 0x41, 0xfc, 0xcd, 0xaa, 0x8c, 0x0c, 0xd4, 0x11, 0x48,
	0xbf, 0x09, 0x76, 0xd1, 0xd3, 0x01, 0x9f, 0xf4, 0x9b, 0xd9, 0x7a, 0x36, 0xc3, 0xd6, 0x79, 0xcd,
	0xd6, 0xef, 0x43, 0xc1, 0x96, 0x61, 0x14, 0xf8, 0x17, 0x92, 0x6d, 0xe2, 0xbc, 0x99, 0x00, 0x6a,
	0x21, 0x14, 0xbf, 0x70, 0x5c, 0x57, 0x0f, 0xf9, 0x26, 0x14, 0xd4, 0xdd, 0x4d, 0xa2, 0x55, 0x30,
	0x80, 0x9d, 0x45, 0x2c, 0x52, 0xe2, 0xab, 0xf4, 0x69, 0x24, 0x25, 0xa2, 0x0e, 0x6d, 0x8e, 0x47,
	0x50, 0x41, 0xf1, 0x23, 0x03, 0x2b, 0x21, 0xc1, 0x7a, 0x46, 0x99, 0xe1, 0xfb, 0x8a, 0x50, 0xed,
	0xcf, 0x81, 0x11, 0x47, 0x81, 0x24, 0x3a, 0xc5, 0xa5, 0x7d, 0x53, 0x1c, 0x82, 0x2b, 0x5b, 0x91,
	0xb4, 0x89, 0x11, 0x74, 0x0c, 0xa1, 0x06, 0x92, 0x73, 0xe9, 0x21, 0x94, 0x63, 0x24, 0xd2, 0xe3,
	0x75, 0x0c, 0xa1, 0x86, 0x92, 0x9e, 0x5f, 0xfb, 0x1c, 0xca, 0xfb, 0x4e, 0xeb, 0x64, 0x4d, 0x78,
	0xa9, 0x95, 0x22, 0xa2, 0xea, 0xbe, 0x9f, 0x3c, 0x85, 0x23, 0x56, 0xaf, 0xf6, 0xdf, 0xa7, 0x61,
	0x2e, 0x6d, 0xf7, 0xa0, 0x9e, 0x1a, 0x92, 0x2d, 0x67, 0x85, 0x69, 0x57, 0xd2, 0x0c, 0x76, 0x89,
	0xe0, 0x03, 0xa5, 0xe0, 0x57, 0x81, 0xef, 0x9a, 0x62, 0xbf, 0x98, 0x2e, 0x66, 0x6f, 0x99, 0x27,
	0x07, 0x6f, 0x99, 0x6f, 0x43, 0x91, 0xa2, 0x7c, 0xfd, 0x63, 0x32, 0xe8, 0x58, 0x73, 0xa4, 0xfa,
	0xbd, 0xe3, 0x0d, 0x71, 0x61, 0xac, 0xc0, 0xb2, 0x13, 0x5a, 0x9e, 0xd3, 0xee, 0x44, 0x61, 0x24,
	0xdc, 0x13, 0x19, 0x70, 0x41, 0x59, 0x2b, 0x8b, 0x4e, 0xb8, 0x9b, 0xaa, 0xa3, 0xdf, 0xd9, 0x2b,
	0x9f, 0x19, 0x5a, 0xc5, 0xe4, 0xca, 0xe7, 0x16, 0x80, 0x7a, 0xda, 0x89, 0x9b, 0x82, 0x4f, 0x61,
	0x42, 0xe7, 0xfb, 0xae, 0x87, 0x50, 0xc6, 0x2f, 0x72, 0x6c, 0x2b, 0x10, 0xb6, 0x23, 0xbc, 0x48,
	0xe9, 0xf1, 0x25, 0x86, 0x9a, 0x0c, 0xd4, 0x96, 0x90, 0x63, 0x5b, 0xb6, 0x13, 0x48, 0xad, 0x2d,
	0x31, 0x68, 0xc3, 0x09, 0xa4, 0xf1, 0x63, 0x98, 0xee, 0x39, 0xad, 0x13, 0xd4, 0x92, 0xae, 0x3a,
	0x17, 0xb3, 0x4b, 0x65, 0x72, 0x3b, 0xe3, 0x87, 0x30, 0x75, 0x24, 0xbc, 0xb0, 0x5a, 0xfc, 0xae,
	0xed, 0xa9, 0x19, 0x8a, 0x5e, 0x56, 0x90, 0xe7, 0xae, 0x14, 0x4d, 0xa9, 0xed, 0xa1, 0x15, 0xe9,
	0x9f, 0xc2, 0xdc, 0x51, 0xc2, 0xbf, 0x3a, 0x92, 0xf2, 0xe3, 0xcb, 0x6c, 0xd5, 0x21, 0x76, 0x37,
	0x33, 0x24, 0xe2, 0x45, 0xe9, 0xfa, 0xb6, 0x56, 0xd1, 0x68, 0x51, 0x76, 0x7c, 0x5b, 0x66, 0xaf,
	0x27, 0xe7, 0xb3, 0xd7, 0x93, 0xc6, 0x03, 0x28, 0xab, 0x4a, 0xcf, 0xb7, 0x53, 0x8e, 0x9d, 0x39,
	0x86, 0xee, 0xfa, 0xb6, 0x54, 0x8e, 0x19, 0x94, 0xce, 0x2a, 0xa4, 0xae, 0xc2, 0x87, 0x11, 0x83,
	0xc8, 0x32, 0xbb, 0x03, 0x45, 0xb6, 0xc5, 0xf8, 0x49, 0x83, 0x52, 0xdc, 0x18, 0xb4, 0x2f, 0xc5,
	0x49, 0xed, 0x5f, 0x4d, 0x41, 0x21, 0xb6, 0x93, 0x89, 0x4f, 0xc8, 0xc2, 0xa6, 0x23, 0x16, 0x4d,
	0x85, 0x69, 0x65, 0x3b, 0xd3, 0xd9, 0x7b, 0x03, 0xf2, 0x5c, 0x4d, 0x51, 0xd7, 0x58, 0x39, 0x4b,
	0xe5, 0xaf, 0x7b, 0x49, 0x4b, 0x7a, 0x75, 0x3e, 0x99, 0x6a, 0x89, 0x33, 0x8d, 0xe3, 0xe0, 0x6a,
	0x52, 0xa5, 0xaa, 0x53, 0x54, 0xcf, 0x2d, 0x0e, 0x11, 0x42, 0x33, 0x45, 0x08, 0x01, 0x99, 0x4a,
	0x93, 0xc4, 0xbe, 0x08, 0x30, 0xc5, 0xb9, 0xf1, 0x6b, 0xcc, 0x9f, 0x96, 0xeb, 0xb7, 0xd4, 0x51,
	0xc1, 0x76, 0xec, 0xf7, 0xde, 0xc5, 0xf8, 0x27, 0x9f, 0x44, 0xfa, 0x7e, 0x37, 0x34, 0xe7, 0xd8,
	0xd0, 0x6e, 0x51, 0xa9, 0xf6, 0x10, 0x4a, 0x99, 0x6a, 0x0e, 0x52, 0xc2, 0x5e, 0x78, 0x02, 0xb8,
	0x50, 0xb3, 0x61, 0x61, 0x88, 0x92, 0xb1, 0x07, 0x85, 0x64, 0x50, 0x7c, 0xbf, 0xb8, 0xf2, 0x4e,
	0x83, 0xca, 0x0e, 0x28, 0xef, 0xaa, 0xc1, 0xd4, 0x7f, 0x15, 0xa6, 0x09, 0xd7, 0x58, 0x84, 0xf9,
	0xf5, 0x40, 0xca, 0x1e, 0x4e, 0x7c, 0x53, 0x04, 0x9e, 0xb4, 0x2b, 0xef, 0x19, 0x06, 0x94, 0x71,
	0x3a, 0x53, 0xb0, 0x9c, 0x71, 0x13, 0xae, 0x6f, 0xa0, 0xb4, 0x5e, 0xf5, 0x6c, 0xa5, 0x82, 0x60,
	0xf5, 0xb6, 0x1f, 0x46, 0x95, 0x09, 0x63, 0x0e, 0xf2, 0x5f, 0xef, 0x2b, 0xd4, 0xc9, 0xfa, 0x57,
	0x50, 0x90, 0xba, 0x63, 0xa3, 0x08, 0xb3, 0x6b, 0x7e, 0xb4, 0x2d, 0x3c, 0x59, 0x79, 0x0f, 0x0b,
	0x3b, 0x8e, 0x4d, 0x85, 0x1c, 0x16, 0x0e, 0xfd, 0x1e, 0x15, 0x26, 0x0c, 0x80, 0x99, 0x9f, 0xf4,
	0x91, 0x9f, 0x2a, 0x93, 0x48, 0x6d, 0xd5, 0x6b, 0x39, 0xd2, 0x8b, 0xc2, 0xca, 0x94, 0x51, 0x80,
	0xe9, 0xbd, 0xa8, 0x23, 0x83, 0xca, 0x74, 0xfd, 0x5f, 0xce, 0xc1, 0xed, 0xb1, 0x5f, 0x7d, 0x28,
	0x83, 0x50, 0x1a, 0x6b, 0x59, 0x1f, 0xd4, 0xd3, 0xc6, 0xe5, 0xf8, 0x23, 0x1d, 0x51, 0xab, 0x59,
	0x47, 0xd4, 0x47, 0x57, 0xd1, 0x18, 0xe1, 0x8d, 0xda, 0x19, 0xf6, 0x46, 0x3d, 0xbb, 0x8a, 0xcc,
	0x25, 0x2e, 0xa9, 0xcd, 0x11, 0x2e, 0xa9, 0xc7, 0x57, 0xd1, 0xfb, 0x93, 0xf9, 0xa5, 0xfe, 0xf6,
	0x9f, 0x8d, 0x5f, 0x2a, 0xed, 0x7a, 0xca, 0x67, 0x5d, 0x4f, 0x97, 0xba, 0xac, 0xde, 0xc1, 0x2f,
	0x35, 0x3b, 0xe0, 0x97, 0x7a, 0x33, 0xe8, 0x97, 0xfa, 0xf8, 0xaa, 0x99, 0x1b, 0xed, 0x9c, 0xaa,
	0xfd, 0x8d, 0xc9, 0xff, 0x7b, 0x3c, 0x19, 0xb1, 0x59, 0x37, 0x33, 0xde, 0xac, 0x9b, 0xbd, 0xc2,
	0xac, 0xcb, 0x5f, 0x6d, 0xd6, 0x15, 0xde, 0xc1, 0xac, 0x83, 0xcb, 0xcd, 0xba, 0x62, 0xd6, 0xac,
	0xd3, 0x86, 0xd5, 0xdc, 0xa0, 0x61, 0x55, 0xca, 0x68, 0xa0, 0x65, 0xad, 0x81, 0x66, 0x96, 0x76,
	0x3e, 0xbb, 0xb4, 0x97, 0x2a, 0xce, 0xb9, 0xd1, 0x8a, 0xf3, 0xc4, 0x90, 0xe2, 0x4c, 0x0a, 0xf1,
	0x64, 0x4a, 0x21, 0x7e, 0x57, 0x65, 0x9a, 0x86, 0x3d, 0x93, 0x19, 0xf6, 0xec, 0x48, 0xc5, 0x39,
	0x3f, 0xa8, 0x38, 0xff, 0xe1, 0xc4, 0x9f, 0xb1, 0x2a, 0x98, 0x51, 0xdb, 0xa6, 0x06, 0xd4, 0xb6,
	0x55, 0xb8, 0xc5, 0xbd, 0xa6, 0x94, 0x0a, 0x2b, 0x1d, 0x18, 0xc4, 0x61, 0x36, 0x35, 0x42, 0x4a,
	0x29, 0x23, 0xab, 0x71, 0xa0, 0x50, 0x56, 0x03, 0x99, 0xbd, 0x4c, 0x03, 0xc9, 0x5f, 0xa9, 0x81,
	0x14, 0x46, 0x68, 0x20, 0x59, 0xcd, 0x12, 0x06, 0x34, 0xcb, 0xda, 0x93, 0x77, 0xd7, 0x2e, 0xea,
	0xbf, 0x9f, 0x4b, 0x0e, 0x91, 0xf8, 0x63, 0x74, 0x70, 0x0e, 0x87, 0x74, 0x1e, 0xa6, 0x43, 0x3a,
	0xcb, 0x2b, 0xd5, 0x46, 0x73, 0x34, 0xe2, 0xab, 0x07, 0x63, 0x2a, 0x2c, 0x5a, 0x5c, 0x0a, 0xc3,
	0x90, 0xf6, 0xd8, 0x90, 0xd0, 0xd9, 0xf4, 0x0a, 0x19, 0x2a, 0x34, 0x49, 0x31, 0xa2, 0xad, 0x84,
	0x75, 0x18, 0x05, 0x8e, 0xd7, 0x4e, 0xe4, 0x7e, 0x01, 0xcd, 0x6f, 0x04, 0x51, 0x70, 0xe7, 0x01,
	0xdc, 0xd5, 0x97, 0x3f, 0x7c, 0xef, 0x46, 0xfd, 0xbe, 0x09, 0xfc, 0x7e, 0x2f, 0xfc, 0x52, 0x06,
	0x21, 0x1e, 0xc0, 0xcf, 0x60, 0x91, 0x78, 0xa4, 0x4d, 0x50, 0xeb, 0x94, 0xc1, 0x6a, 0x7b, 0x18,
	0xa9, 0x2a, 0xd5, 0xa0, 0xfe, 0xcb, 0x89, 0x24, 0xde, 0xf1, 0x60, 0x63, 0x2f, 0xb6, 0x7a, 0x37,
	0x9d, 0x90, 0x42, 0x60, 0x2e, 0x0f, 0x85, 0x4b, 0xd8, 0x60, 0x62, 0x80, 0x0d, 0x6e, 0x01, 0xb8,
	0xfe, 0xd1, 0xd1, 0x85, 0x95, 0xda, 0x70, 0x05, 0x82, 0x50, 0x02, 0x11, 0x8e, 0x26, 0xd0, 0xcf,
	0x4c, 0xa7, 0xe2, 0x68, 0x02, 0xf5, 0xbe, 0xb4, 0x02, 0x93, 0x67, 0xbe, 0xa7, 0x0e, 0x2c, 0xfc,
	0xa9, 0x03, 0xcc, 0x66, 0x86, 0x02, 0xcc, 0x66, 0x47, 0x04, 0x98, 0xe5, 0x47, 0x07, 0x98, 0x15,
	0xc6, 0xc5, 0x5d, 0x43, 0xc6, 0xc7, 0x5d, 0xff, 0x1f, 0x93, 0xb0, 0x1c, 0xcf, 0x09, 0xdf, 0x9b,
	0xcb, 0x33, 0x11, 0xd8, 0xa1, 0xf1, 0x19, 0xcc, 0x06, 0xfc, 0x53, 0x29, 0x66, 0xb7, 0x1a, 0x23,
	0x11, 0x1b, 0xfc, 0xd7, 0xd4, 0xd8, 0xb5, 0x7f, 0x3a, 0x01, 0x33, 0x0c, 0x8b, 0x0f, 0x83, 0x5c,
	0xea, 0x30, 0xa8, 0x72, 0x30, 0x84, 0x2d, 0x8f, 0xf5, 0xb3, 0x11, 0x55, 0x34, 0x6e, 0x03, 0x38,
	0xdd, 0x9e, 0x1f, 0xd0, 0x95, 0xad, 0xbe, 0x25, 0x4d, 0x20, 0xb1, 0x2f, 0x36, 0xfd, 0x68, 0x84,
	0x7c, 0xb1, 0xfc, 0x66, 0x84, 0x3c, 0x55, 0x3d, 0x29, 0x74, 0x02, 0x10, 0x15, 0x51, 0xc5, 0x30,
	0x46, 0xd9, 0x81, 0x22, 0x8f, 0xd2, 0x8a, 0x9d, 0x05, 0xe5, 0x54, 0xa8, 0x4b, 0xf6, 0xbb, 0x9a,
	0xfc, 0x83, 0xd2, 0xc4, 0xe4, 0x9b, 0x2d, 0xdf, 0xa3, 0x20, 0x1b, 0x08, 0x62, 0x28, 0x05, 0x89,
	0x93, 0x9f, 0x73, 0x96, 0xbe, 0x8f, 0x0b, 0xc8, 0x2b, 0xa2, 0xa5, 0xc3, 0x1a, 0x95, 0x54, 0x60,
	0x00, 0x87, 0xb3, 0x64, 0x9e, 0x18, 0x14, 0x54, 0xd8, 0x57, 0xf2, 0xb8, 0xa0, 0xde, 0x81, 0x62,
	0xaa, 0x6b, 0x54, 0x1a, 0x75, 0xe7, 0x95, 0xf7, 0x8c, 0x0a, 0xcc, 0xed, 0x5c, 0xa0, 0x8c, 0xba,
	0xa0, 0x87, 0x66, 0x95, 0x9c, 0xb1, 0x00, 0x25, 0xe5, 0x27, 0xe2, 0x17, 0x0a, 0x95, 0x89, 0x44,
	0xb3, 0x9c, 0x44, 0xed, 0x36, 0x8d, 0xcf, 0x91, 0x65, 0x6b, 0x22, 0x94, 0x76, 0x65, 0xaa, 0xfe,
	0x8f, 0x26, 0xa1, 0x96, 0xfd, 0xf6, 0xd5, 0x56, 0xc7, 0x91, 0xa7, 0xf4, 0x92, 0x35, 0x34, 0xbe,
	0x80, 0x39, 0x91, 0x2a, 0x2b, 0x36, 0xf8, 0xb0, 0x31, 0xbe, 0x49, 0x23, 0x55, 0x30, 0x33, 0x8d,
	0x6b, 0xbf, 0x3b, 0x01, 0xc5, 0x54, 0xed, 0x48, 0xd6, 0xb8, 0x8b, 0xc7, 0x78, 0xf2, 0xfe, 0x81,
	0xef, 0x8f, 0xd2, 0xa0, 0x64, 0xc6, 0x27, 0xc7, 0xce, 0xf8, 0xd4, 0xc0, 0x8c, 0xdf, 0x02, 0xe8,
	0x8a, 0x73, 0xab, 0x1d, 0x88, 0x24, 0xcc, 0xae, 0xd0, 0x15, 0xe7, 0x6f, 0x08, 0x30, 0xfc, 0x0c,
	0x73, 0x66, 0xc4, 0x33, 0xcc, 0x17, 0xb0, 0x14, 0x05, 0xa2, 0x45, 0x29, 0x23, 0x52, 0x5f, 0xa5,
	0x36, 0xe4, 0xa2, 0xae, 0x4b, 0x7f, 0xdf, 0x63, 0xa8, 0xa4, 0x30, 0xad, 0xb6, 0x2f, 0x5c, 0xc5,
	0x0c, 0xf3, 0x29, 0xf8, 0x1b, 0x5f, 0xb8, 0xc6, 0x47, 0xb0, 0x90, 0x46, 0x4d, 0x3f, 0x7d, 0x4c,
	0xd3, 0x20, 0x16, 0xae, 0xff, 0x85, 0xe5, 0xe4, 0xa6, 0x9a, 0x17, 0x60, 0x3f, 0x90, 0xb6, 0xd3,
	0xe2, 0x44, 0x35, 0x6f, 0xa0, 0xd8, 0x4b, 0x8a, 0x6a, 0xc5, 0x1e, 0x36, 0xc6, 0x36, 0x68, 0x24,
	0xbf, 0xcd, 0x74, 0x4b, 0xe3, 0x57, 0x61, 0xd1, 0xe1, 0x8c, 0x03, 0x56, 0x9a, 0xe0, 0xa0, 0xe1,
	0x30, 0x4c, 0x70, 0x8b, 0x52, 0x0e, 0xa4, 0xc8, 0x2e, 0x38, 0x03, 0x10, 0x1c, 0xe5, 0xbd, 0x61,
	0xe2, 0x96, 0x7a, 0x3b, 0x2c, 0x03, 0xaa, 0x51, 0xfb, 0xff, 0xfd, 0xc1, 0xd6, 0xa4, 0x6c, 0xed,
	0xcb, 0x00, 0xa1, 0xc6, 0x5b, 0x78, 0x34, 0x82, 0xd0, 0xa9, 0x1f, 0xe1, 0x42, 0xf5, 0xe8, 0x11,
	0xa1, 0xd5, 0x75, 0xbc, 0x7e, 0x14, 0xa7, 0x83, 0xbb, 0x3f, 0x48, 0xef, 0x4b, 0x42, 0xe6, 0x07,
	0x87, 0x3b, 0x8c, 0x5a, 0xfb, 0x05, 0xcc, 0xac, 0x77, 0x7c, 0x87, 0x6f, 0x4f, 0x4e, 0x85, 0xdb,
	0xd7, 0x41, 0xc0, 0x5c, 0x18, 0x79, 0xc1, 0x59, 0x87, 0x52, 0xd7, 0xf1, 0xac, 0x40, 0x9c, 0x59,
	0xdc, 0x42, 0xc5, 0xa7, 0x77, 0x1d, 0xcf, 0x14, 0x67, 0xf4, 0x80, 0x91, 0x70, 0xc4, 0x79, 0x0a,
	0x47, 0xc5, 0x85, 0x76, 0xc5, 0xb9, 0xc6, 0xa9, 0x7d, 0x00, 0xb3, 0xab, 0x5e, 0x78, 0xa6, 0xbc,
	0x1f, 0x82, 0x7e, 0xa6, 0x5c, 0x7f, 0x0c, 0xd8, 0xb2, 0x6b, 0xaf, 0xa0, 0x4c, 0x8f, 0x00, 0xbe,
	0x90, 0x17, 0xea, 0xc5, 0xf2, 0xa8, 0x1d, 0x15, 0x8f, 0x9f, 0x87, 0xca, 0x85, 0xda, 0x7f, 0x99,
	0x06, 0x48, 0x66, 0xc0, 0x78, 0xa3, 0x54, 0x45, 0x56, 0x0a, 0x9e, 0x5c, 0xb2, 0xb8, 0xa9, 0x79,
	0x23, 0xb1, 0x38, 0xfb, 0x46, 0x7a, 0x32, 0x70, 0x5a, 0x4a, 0xbf, 0xac, 0x41, 0x9e, 0xc2, 0x74,
	0x92, 0xcd, 0x1b, 0x97, 0x8d, 0x5f, 0x81, 0xd9, 0x16, 0xcd, 0xa9, 0x36, 0x1b, 0xef, 0x5d, 0xd2,
	0x0f, 0xcf, 0xbe, 0xa9, 0x5b, 0xa0, 0xd4, 0x64, 0x67, 0x65, 0x66, 0x8f, 0x17, 0x63, 0x58, 0x1c,
	0xb3, 0xa7, 0x63, 0x47, 0xa7, 0x53, 0xa7, 0x2c, 0xc5, 0x8b, 0xde, 0x24, 0x47, 0xc3, 0x09, 0xd7,
	0xea, 0x27, 0x44, 0x7e, 0xeb, 0x84, 0x2a, 0xaf, 0xc1, 0x0c, 0x4b, 0x75, 0xfd, 0x84, 0x88, 0x4b,
	0x86, 0x09, 0x45, 0xb5, 0x00, 0x34, 0x3f, 0x79, 0x9a, 0x9f, 0x0f, 0x2e, 0x9b, 0x1f, 0x5e, 0x3a,
	0x9a, 0x9b, 0xc2, 0x01, 0xb9, 0x91, 0xb6, 0xbc, 0xc8, 0x04, 0x11, 0x83, 0xb3, 0x8b, 0x5a, 0xc8,
	0x2e, 0xaa, 0xf1, 0x03, 0x98, 0xe5, 0xdf, 0xda, 0x05, 0x58, 0xbf, 0xa4, 0x33, 0xc5, 0x26, 0xa6,
	0x6e, 0xa2, 0x02, 0xa9, 0x82, 0x0b, 0x36, 0x4c, 0x8b, 0xb4, 0x00, 0x05, 0x82, 0x90, 0x65, 0xfa,
	0x04, 0x16, 0xb8, 0xfa, 0xc8, 0xf1, 0x6c, 0x0e, 0x38, 0x63, 0x4f, 0x5f, 0xc9, 0x9c, 0xa7, 0x8a,
	0x35, 0xc7, 0xb3, 0x29, 0xea, 0x2c, 0x34, 0x9e, 0xc1, 0x12, 0x4d, 0x97, 0xef, 0x59, 0x99, 0x89,
	0xe7, 0xeb, 0xd4, 0x05, 0xac, 0xdb, 0xf3, 0x0e, 0x52, 0xd3, 0x4f, 0xa9, 0x0b, 0x07, 0x1b, 0x30,
	0xeb, 0x95, 0x75, 0xea, 0xc2, 0x4c, 0x1b, 0xde, 0x11, 0x2f, 0x60, 0x79, 0xb8, 0x59, 0x28, 0x39,
	0xa7, 0x62, 0xde, 0x34, 0x06, 0x1a, 0x1d, 0x48, 0x4a, 0x92, 0xd8, 0x0f, 0xa5, 0xa5, 0x26, 0x91,
	0xba, 0xd0, 0x6f, 0xb7, 0xd9, 0x7f, 0xb7, 0xd4, 0x0f, 0xd5, 0x3a, 0x50, 0x1f, 0xfc, 0x08, 0xbb,
	0xf6, 0x37, 0x67, 0xa0, 0x32, 0x28, 0x9b, 0xde, 0x29, 0x72, 0xe1, 0x4d, 0xca, 0x90, 0xfa, 0x53,
	0xed, 0x8e, 0x03, 0x98, 0x26, 0x7d, 0x94, 0xb8, 0xb7, 0x9c, 0xf2, 0x73, 0x8d, 0xa0, 0x64, 0x0a,
	0xcf, 0xf6, 0xbb, 0xf1, 0x77, 0x93, 0xe2, 0x6b, 0x45, 0xaf, 0x0a, 0x4d, 0x11, 0xb8, 0x94, 0xe5,
	0xcd, 0x64, 0x5a, 0x99, 0x2d, 0x37, 0x3d, 0x7e, 0xcb, 0xcd, 0x7c, 0xe7, 0x2d, 0xf7, 0x21, 0xcc,
	0x07, 0xf2, 0xdb, 0xbe, 0x13, 0xa8, 0xab, 0x05, 0x7a, 0x5f, 0x37, 0xf9, 0xa8, 0x60, 0x96, 0x35,
	0x78, 0x93, 0xa0, 0x03, 0x5c, 0x97, 0x1f, 0xe4, 0xba, 0x6d, 0x98, 0xe3, 0x6a, 0x5a, 0x29, 0x54,
	0x4c, 0xb3, 0xae, 0xe9, 0xe1, 0x91, 0x64, 0xc5, 0x9a, 0x59, 0xa4, 0xe6, 0x4a, 0xc6, 0xf5, 0xe0,
	0x9a, 0x5a, 0xf8, 0x40, 0x86, 0xbe, 0xdb, 0x27, 0x7e, 0xa1, 0xe5, 0x81, 0x54, 0xdc, 0xdb, 0xb8,
	0x49, 0x8d, 0x9b, 0xe0, 0xf2, 0x58, 0xd1, 0xab, 0xb9, 0x2d, 0x8f, 0x1e, 0x25, 0x53, 0x8f, 0xe6,
	0x12, 0x53, 0xce, 0x62, 0x51, 0x56, 0x30, 0x4e, 0x63, 0x10, 0xf9, 0xac, 0x44, 0x28, 0xc3, 0xbf,
	0xc4, 0xe0, 0x43, 0x9f, 0x14, 0x09, 0xd4, 0x23, 0x94, 0x6a, 0xc9, 0x9a, 0x87, 0x8e, 0x4e, 0x60,
	0xe0, 0x2a, 0xf3, 0xdb, 0x0a, 0x2c, 0xdb, 0xf2, 0xa8, 0xdf, 0xb6, 0x8e, 0xfd, 0xa0, 0x25, 0x13,
	0x96, 0x57, 0xfb, 0x6a, 0x91, 0x2a, 0x5f, 0x63, 0x5d, 0xbc, 0xf4, 0xc6, 0xd7, 0x50, 0x8e, 0x0f,
	0x0c, 0xfe, 0xd4, 0xf2, 0xd5, 0x9c, 0xa8, 0x8f, 0x13, 0xf5, 0xa1, 0x33, 0xec, 0xd2, 0x32, 0xe7,
	0x82, 0x14, 0xbc, 0xfe, 0x25, 0xcc, 0x0f, 0xb0, 0xac, 0x51, 0x04, 0xcd, 0xb4, 0x95, 0xf7, 0x8c,
	0x3c, 0x47, 0x27, 0x57, 0x72, 0xf8, 0xeb, 0x50, 0x8a, 0x2e, 0xbb, 0x33, 0xd9, 0x53, 0x54, 0x99,
	0x44, 0xe4, 0x83, 0x9e, 0x6c, 0x39, 0xc2, 0x65, 0x6f, 0xe6, 0x37, 0x32, 0xdc, 0xf5, 0x2b, 0xd3,
	0xf5, 0x5f, 0xe6, 0xa0, 0x98, 0x92, 0x84, 0x46, 0x09, 0x12, 0x59, 0x58, 0x79, 0xcf, 0x98, 0x87,
	0x22, 0x17, 0x5f, 0xbb, 0xbe, 0x88, 0x2a, 0x39, 0x04, 0xec, 0xf4, 0xdd, 0xc8, 0xe9, 0x31, 0xc6,
	0x04, 0xaa, 0xb4, 0x1a, 0xc0, 0x38, 0x93, 0x46, 0x19, 0x40, 0x51, 0xc4, 0x71, 0x4c, 0x61, 0x99,
	0x89, 0xa0, 0x0d, 0x55, 0x99, 0x26, 0xbd, 0x58, 0x35, 0x21, 0xc8, 0x0c, 0xea, 0xcd, 0xbb, 0x3e,
	0xb7, 0xa9, 0xcc, 0xd6, 0xff, 0x7d, 0x0e, 0x16, 0x86, 0x18, 0x00, 0x5b, 0xa5, 0x59, 0xa0, 0xf2,
	0x9e, 0xb1, 0x04, 0x15, 0x0a, 0x31, 0x3e, 0xf4, 0xf7, 0x45, 0xc8, 0xcf, 0xec, 0x2a, 0x39, 0x63,
	0x11, 0xe6, 0xb7, 0x45, 0x16, 0x48, 0x11, 0x8d, 0x9c, 0x7e, 0x4d, 0x25, 0x05, 0x61, 0xf8, 0xa4,
	0x61, 0x40, 0x79, 0x47, 0x9c, 0xa7, 0x71, 0xa7, 0x08, 0xe6, 0x78, 0x69, 0xd8, 0x34, 0x0e, 0xf0,
	0xa0, 0xcf, 0x8f, 0x16, 0x2b, 0x33, 0xc6, 0x0d, 0x58, 0xc6, 0x56, 0x52, 0x74, 0x0f, 0xfa, 0xdd,
	0x34, 0xe2, 0x2c, 0x55, 0x39, 0xde, 0x88, 0xaa, 0x7c, 0x7d, 0x17, 0xae, 0x8f, 0x91, 0x15, 0x38,
	0xeb, 0xb1, 0xb4, 0x88, 0x3d, 0xd4, 0x54, 0xc8, 0x61, 0xd7, 0xdb, 0x22, 0x22, 0xef, 0x20, 0x9b,
	0x0b, 0xa4, 0x55, 0x55, 0x26, 0xeb, 0x1f, 0xc2, 0xfc, 0x00, 0xef, 0xe0, 0x8a, 0x33, 0xf7, 0x30,
	0x47, 0xd0, 0xec, 0xe6, 0xea, 0x7f, 0xf4, 0x10, 0x4a, 0x9a, 0xff, 0xc8, 0x36, 0x47, 0x49, 0x64,
	0xf7, 0x39, 0xe9, 0x54, 0xfc, 0x52, 0x47, 0x95, 0x8d, 0xf7, 0x21, 0x31, 0x78, 0x49, 0xfc, 0xcd,
	0xa6, 0x2d, 0xe0, 0x67, 0x89, 0x1f, 0x73, 0x3a, 0xf5, 0x6e, 0x3e, 0x26, 0xad, 0xdc, 0x96, 0x49,
	0x30, 0x5d, 0xda, 0x50, 0x9f, 0xc9, 0x1a, 0xea, 0x71, 0x04, 0x8a, 0x4a, 0x2c, 0x94, 0xa7, 0xf3,
	0x8d, 0x23, 0x50, 0x54, 0x66, 0xa1, 0x0f, 0x61, 0xfe, 0x48, 0x04, 0xa8, 0xb2, 0xc7, 0xe9, 0x87,
	0x0a, 0x84, 0x55, 0xd6, 0x60, 0x85, 0x58, 0x85, 0xd9, 0x96, 0xdb, 0x47, 0xe3, 0x49, 0x5b, 0xcd,
	0xaa, 0x68, 0x3c, 0x82, 0xca, 0x31, 0x72, 0x89, 0x75, 0xe4, 0xfa, 0xbe, 0x0a, 0xcc, 0xe6, 0xfd,
	0x5e, 0x26, 0xf8, 0x1a, 0x82, 0xe9, 0xdb, 0xee, 0xa0, 0xc5, 0x49, 0x69, 0x05, 0x43, 0xe1, 0x72,
	0x00, 0xf4, 0x2c, 0xda, 0x90, 0x08, 0x3a, 0x10, 0x2e, 0xdd, 0x3b, 0x2a, 0x07, 0x99, 0xd3, 0xa3,
	0x9d, 0x3d, 0x6b, 0xe6, 0x19, 0xb0, 0xd5, 0xe3, 0xc0, 0x61, 0xaa, 0xa4, 0x3c, 0x80, 0xf3, 0x3a,
	0x70, 0x18, 0x41, 0xfb, 0x7e, 0x10, 0x0d, 0xb8, 0x1e, 0x2a, 0x83, 0xae, 0x87, 0xfb, 0x50, 0xea,
	0xf4, 0xbb, 0xc2, 0xb3, 0xf4, 0xfc, 0x2e, 0xa8, 0xb8, 0x30, 0x04, 0xee, 0xab, 0xd9, 0xbc, 0x0f,
	0x25, 0x71, 0x2a, 0x03, 0xd1, 0x96, 0x2a, 0xe7, 0xb1, 0xba, 0x29, 0x53, 0xc0, 0x38, 0xe7, 0x31,
	0xa9, 0xd9, 0x3a, 0xb1, 0xd2, 0x22, 0x47, 0xe3, 0x21, 0x4c, 0x67, 0x54, 0xa2, 0x27, 0x39, 0x74,
	0xd3, 0x69, 0x69, 0x57, 0xdf, 0x92, 0x7e, 0x92, 0x43, 0xe0, 0x43, 0x76, 0xf5, 0xdd, 0x85, 0x39,
	0xdb, 0x09, 0x64, 0x8c, 0xb4, 0xac, 0xf3, 0x36, 0x04, 0x52, 0x61, 0xd4, 0x40, 0xb9, 0xd1, 0x1c,
	0x1d, 0x9c, 0x14, 0x97, 0x51, 0x8b, 0xc9, 0xf4, 0x42, 0xa7, 0xce, 0x75, 0x3a, 0x75, 0xe6, 0x53,
	0xfd, 0xd0, 0xd9, 0xf3, 0x00, 0xca, 0x49, 0x4f, 0x84, 0x58, 0xe5, 0x77, 0xfa, 0xba, 0x2f, 0xad,
	0x17, 0x65, 0x28, 0x92, 0x7b, 0xfe, 0x06, 0xb1, 0x55, 0x9a, 0x22, 0x79, 0xe9, 0x33, 0x14, 0x09,
	0xb1, 0xc6, 0xd1, 0xc4, 0x9a, 0x22, 0x61, 0xad, 0xc0, 0x72, 0x86, 0xa2, 0x8e, 0x77, 0x57, 0xa1,
	0x4a, 0x8b, 0x29, 0xaa, 0xeb, 0xaa, 0xca, 0x78, 0x0a, 0x46, 0x42, 0x39, 0x6e, 0xc0, 0x01, 0x4c,
	0x15, 0x4d, 0x3d, 0xc6, 0x7e, 0x08, 0xe5, 0x9e, 0x1f, 0x72, 0xda, 0xcd, 0x53, 0x1f, 0xcd, 0x9b,
	0x5b, 0xfa, 0x50, 0x62, 0xe8, 0x97, 0x08, 0x44, 0x34, 0x4f, 0xb6, 0x45, 0x0a, 0x8d, 0xc3, 0x99,
	0x4a, 0x1a, 0xca, 0x68, 0x3f, 0x4e, 0x7b, 0xb7, 0xee, 0xd0, 0xe9, 0x52, 0x6e, 0xe0, 0xf6, 0xa3,
	0x77, 0x18, 0x3b, 0xbe, 0x2d, 0x5f, 0x19, 0x5c, 0x5c, 0xdd, 0x69, 0xee, 0xec, 0x6d, 0x34, 0x39,
	0x5b, 0x6e, 0xe2, 0x01, 0xfb, 0x14, 0x80, 0x2e, 0xa0, 0x2d, 0xba, 0x7d, 0xbe, 0x4b, 0x9b, 0xf8,
	0x5a, 0x63, 0xe4, 0x2b, 0x76, 0xb3, 0x40, 0x98, 0x6b, 0xc2, 0x0b, 0xd9, 0x1e, 0xc2, 0x7d, 0xac,
	0xf2, 0x67, 0x52, 0x28, 0xd4, 0x14, 0xda, 0x43, 0x51, 0xab, 0xc3, 0xa9, 0x32, 0x8d, 0x3d, 0xf2,
	0xea, 0xd0, 0x06, 0x22, 0x17, 0x69, 0x9d, 0x86, 0x57, 0x1b, 0x90, 0x10, 0x26, 0x6f, 0x28, 0xc4,
	0x78, 0x55, 0x31, 0x9b, 0xfb, 0xdb, 0xab, 0xdf, 0x58, 0xab, 0x5f, 0xae, 0x6e, 0x6d, 0xaf, 0xae,
	0x6d, 0x37, 0x4d, 0xb5, 0x05, 0xf9, 0xb2, 0xfe, 0x11, 0x54, 0xf4, 0xe2, 0xb4, 0xfb, 0x8e, 0x6b,
	0x23, 0x0b, 0xde, 0x57, 0x29, 0xd3, 0x18, 0xfe, 0x06, 0xc1, 0x9c, 0x29, 0x8b, 0x96, 0x24, 0x46,
	0x7b, 0xa0, 0x2e, 0x04, 0x9c, 0x40, 0x6a, 0x9c, 0x14, 0xb5, 0xf8, 0xda, 0xe7, 0x21, 0x31, 0x59,
	0x39, 0xb5, 0xca, 0x87, 0xa2, 0x1d, 0x53, 0x8b, 0xd1, 0x3e, 0x50, 0xee, 0x0d, 0xb5, 0xb6, 0xea,
	0x86, 0x28, 0x94, 0x81, 0x23, 0xe9, 0x8d, 0xe4, 0x87, 0x2a, 0x0e, 0x90, 0x00, 0xfa, 0x15, 0x01,
	0x55, 0xd2, 0x66, 0x7f, 0x14, 0x0b, 0x03, 0x47, 0x86, 0xb4, 0xdb, 0x0f, 0x61, 0x29, 0xed, 0xe8,
	0x6e, 0x75, 0x84, 0xe7, 0x49, 0x57, 0x07, 0x52, 0xdd, 0x1b, 0x98, 0xb2, 0x94, 0xbf, 0x7b, 0x9d,
	0x31, 0xcd, 0xc5, 0xa3, 0x21, 0x18, 0xf9, 0x14, 0xa5, 0xd7, 0x76, 0x3c, 0x4e, 0xa3, 0x5c, 0x32,
	0x55, 0xc9, 0x78, 0x03, 0x95, 0x4c, 0x5e, 0x3c, 0x11, 0x09, 0x4a, 0x89, 0x9c, 0x76, 0x14, 0x72,
	0x4f, 0x49, 0x3c, 0x3e, 0x5d, 0xda, 0x95, 0x5b, 0x99, 0x32, 0x7e, 0x17, 0x73, 0x01, 0x3f, 0x2f,
	0x69, 0xe8, 0x20, 0xd2, 0xa8, 0xd5, 0xe1, 0x5c, 0x71, 0x94, 0xdc, 0xcd, 0x39, 0xa5, 0x60, 0x23,
	0x19, 0x09, 0xec, 0xc9, 0x3a, 0x91, 0x17, 0x94, 0x44, 0x79, 0xd6, 0x34, 0x54, 0xdd, 0x8e, 0xaa,
	0xfa, 0x42, 0x5e, 0x50, 0x86, 0xbf, 0xf4, 0xaa, 0xf0, 0xcd, 0xda, 0x73, 0x95, 0xe1, 0x2f, 0x59,
	0x17, 0x7e, 0x23, 0xf8, 0x01, 0xcc, 0x27, 0x2b, 0xc3, 0xa8, 0x9c, 0x25, 0xb9, 0xa4, 0xd7, 0x86,
	0xf1, 0xb6, 0x35, 0xbb, 0xfa, 0xfd, 0xa8, 0xe5, 0x77, 0x65, 0x75, 0x45, 0x6d, 0x95, 0x26, 0x7d,
	0xe7, 0x1e, 0x43, 0x5f, 0x5d, 0x3f, 0xb1, 0x32, 0x00, 0xeb, 0xad, 0x77, 0xe2, 0xf9, 0x67, 0x9e,
	0x39, 0xd7, 0x4d, 0x41, 0x87, 0x53, 0xdc, 0xbc, 0x1c, 0x91, 0xe2, 0xe6, 0x31, 0x54, 0x52, 0x48,
	0xf4, 0x2a, 0x55, 0x65, 0x54, 0x4e, 0x65, 0x43, 0x31, 0x11, 0x8c, 0x62, 0xac, 0x17, 0x48, 0xb5,
	0x18, 0xfa, 0x20, 0xfe, 0x94, 0x71, 0x7b, 0x01, 0x9d, 0xf5, 0x1b, 0x0a, 0x5c, 0xfb, 0x63, 0x43,
	0xab, 0x71, 0xef, 0x90, 0x43, 0x40, 0x85, 0x1f, 0x85, 0xae, 0x1f, 0x67, 0xab, 0x60, 0x90, 0x7e,
	0x29, 0x39, 0x32, 0xcf, 0x04, 0xe5, 0x33, 0x88, 0x64, 0xd7, 0x7a, 0xae, 0xdf, 0x40, 0x63, 0xe9,
	0x79, 0x0c, 0x7e, 0xa1, 0x2f, 0x3a, 0xb1, 0xf4, 0x22, 0x06, 0xaf, 0xe8, 0x7b, 0x3f, 0x2c, 0xad,
	0xc4, 0xe0, 0x97, 0xca, 0x32, 0x27, 0xf0, 0xcb, 0x18, 0xfc, 0x89, 0x76, 0x7f, 0x63, 0xe9, 0x93,
	0x18, 0xfc, 0xa9, 0x32, 0xac, 0x09, 0xfc, 0x69, 0x0c, 0xfe, 0x9e, 0x4a, 0x02, 0x4f, 0xe0, 0xef,
	0xc5, 0xe0, 0xcf, 0x54, 0x7e, 0x66, 0x02, 0x7f, 0x16, 0x83, 0x3f, 0x57, 0xc9, 0x97, 0x09, 0xfc,
	0xb9, 0xf1, 0x03, 0xa8, 0xc9, 0xf3, 0x1e, 0x47, 0x51, 0x29, 0x19, 0xed, 0x45, 0x81, 0x73, 0x44,
	0xea, 0x24, 0xe9, 0x07, 0x13, 0x66, 0x55, 0x63, 0xb0, 0xac, 0x4e, 0xea, 0x29, 0x50, 0xab, 0x25,
	0x5c, 0x69, 0x23, 0x07, 0x07, 0x4e, 0x4b, 0x45, 0x38, 0xcf, 0x31, 0x70, 0x87, 0x60, 0x88, 0x94,
	0x79, 0xab, 0xaa, 0x4d, 0x88, 0xf4, 0x33, 0x55, 0x52, 0x28, 0x84, 0x77, 0x42, 0xbb, 0xbb, 0x2d,
	0x49, 0xa1, 0x58, 0x30, 0x01, 0x41, 0xeb, 0x04, 0x21, 0x19, 0xe2, 0xbb, 0x7e, 0x92, 0xed, 0x3b,
	0x6f, 0xe6, 0x43, 0xf5, 0x46, 0x8f, 0x03, 0xc6, 0x52, 0xc9, 0x36, 0x89, 0x41, 0xf2, 0xe6, 0x5c,
	0x98, 0x4a, 0xae, 0xc9, 0x07, 0xa2, 0x7e, 0x5b, 0xdb, 0xef, 0xd9, 0x22, 0x52, 0xa9, 0x9c, 0xf3,
	0x9c, 0xd4, 0xeb, 0xd0, 0x91, 0xc1, 0x5b, 0x06, 0x27, 0xf7, 0x10, 0xe5, 0xd1, 0xf7, 0x10, 0xf3,
	0xe3, 0xee, 0x21, 0x2a, 0xd9, 0xfc, 0x2f, 0xf7, 0xa1, 0xa4, 0x12, 0xef, 0x2b, 0x95, 0x6c, 0x21,
	0xbe, 0x2c, 0x3b, 0x8d, 0x35, 0x37, 0x7d, 0xc5, 0x6a, 0xa4, 0xae, 0x58, 0x33, 0xb9, 0x61, 0x16,
	0xc7, 0xe6, 0x86, 0x59, 0x4a, 0xe7, 0x86, 0x19, 0x8a, 0xaf, 0x5d, 0x1e, 0x15, 0x5f, 0xfb, 0xf5,
	0x7e, 0x5c, 0xaf, 0x94, 0x90, 0xaf, 0xf7, 0x55, 0xed, 0x2d, 0x20, 0x5c, 0x2b, 0xec, 0xc9, 0xf8,
	0x9f, 0x03, 0x14, 0x10, 0x72, 0x80, 0x80, 0xff, 0x23, 0x71, 0xd2, 0x83, 0x51, 0xc2, 0xb5, 0xe1,
	0x28, 0xe1, 0xd1, 0x11, 0xd0, 0x0f, 0xa0, 0xcc, 0x19, 0xac, 0xf9, 0x7f, 0x22, 0x48, 0x4f, 0x29,
	0x11, 0x73, 0x08, 0xdd, 0xa6, 0x7f, 0x7f, 0x20, 0xbd, 0xd4, 0xbe, 0x26, 0xbd, 0xe8, 0x16, 0xdf,
	0xc0, 0x31, 0x88, 0xb4, 0xa2, 0x15, 0x58, 0x0e, 0xfb, 0x3d, 0x4a, 0x8f, 0xaa, 0x9f, 0x9b, 0xb0,
	0x3b, 0xe7, 0xb6, 0x4a, 0xe8, 0xce, 0x95, 0xea, 0xea, 0x81, 0xbd, 0x39, 0x8f, 0xa1, 0x72, 0x2c,
	0xa5, 0x4d, 0xf7, 0x7a, 0x32, 0xa2, 0x9d, 0x40, 0xc1, 0xcf, 0x79, 0x73, 0x5e, 0xc1, 0x37, 0x14,
	0x98, 0x0f, 0x33, 0x11, 0xb4, 0x3a, 0xcc, 0x86, 0x75, 0x7d, 0x98, 0x21, 0x88, 0x98, 0xf0, 0x7b,
	0x70, 0x3d, 0x85, 0x60, 0xf5, 0xbd, 0x96, 0x0c, 0x22, 0xe1, 0x78, 0xd1, 0x85, 0x3a, 0xad, 0x97,
	0x13, 0xe4, 0xb7, 0x49, 0x25, 0xb6, 0x1b, 0x6c, 0xa0, 0xf7, 0xca, 0x03, 0xba, 0x1e, 0x5e, 0x0e,
	0xb2, 0x2d, 0xd4, 0xb6, 0xf9, 0x00, 0x28, 0x18, 0x96, 0x34, 0x65, 0x75, 0xc1, 0xcf, 0x21, 0xd2,
	0x94, 0x2d, 0x13, 0x85, 0x65, 0x1c, 0x01, 0xc0, 0xf9, 0xd6, 0x1d, 0x9b, 0x4e, 0xf0, 0x19, 0x73,
	0x96, 0xca, 0x5b, 0x94, 0x57, 0x56, 0x6d, 0xf2, 0xf4, 0xea, 0x73, 0x06, 0xfb, 0x0a, 0xd7, 0x6c,
	0x26, 0x3c, 0xd0, 0x80, 0x45, 0x85, 0x9d, 0x61, 0x85, 0xcf, 0x54, 0xce, 0x29, 0xaa, 0x3a, 0x4c,
	0x31, 0x44, 0x82, 0x9f, 0xe1, 0x8b, 0xcf, 0xd3, 0xf8, 0x9b, 0x29, 0xee, 0xb8, 0x07, 0x4a, 0xba,
	0x58, 0xbc, 0x41, 0x39, 0xa2, 0xbb, 0xc8, 0xb0, 0x2f, 0x68, 0x9b, 0x26, 0x52, 0x49, 0xed, 0xd6,
	0x47, 0x69, 0xa9, 0xb4, 0x11, 0x27, 0xa7, 0x50, 0x48, 0x7a, 0xeb, 0x3e, 0xe6, 0xd7, 0x19, 0x0c,
	0x5d, 0x55, 0x1b, 0xf8, 0x09, 0x2c, 0xb4, 0x5c, 0xe1, 0x74, 0xa5, 0x6d, 0x1d, 0x8b, 0xa0, 0xcb,
	0x77, 0xd4, 0x4f, 0xd4, 0x3f, 0x1b, 0xe0, 0x8a, 0xd7, 0x22, 0xe8, 0x52, 0x1c, 0x1c, 0x0e, 0x4d,
	0xf1, 0x16, 0xa1, 0x7d, 0xa4, 0xdc, 0xb9, 0x0c, 0x23, 0x94, 0x87, 0x50, 0xd6, 0xe4, 0xd4, 0x0e,
	0x7e, 0xaa, 0xde, 0x8e, 0x32, 0x74, 0x83, 0x37, 0x72, 0x0a, 0xad, 0xeb, 0xd0, 0x2b, 0xe8, 0x8f,
	0x33, 0x68, 0x3b, 0x04, 0x44, 0x39, 0xa0, 0xaa, 0x59, 0xbb, 0x50, 0x25, 0xe3, 0x35, 0x54, 0x34,
	0x73, 0xf7, 0x39, 0x5b, 0x96, 0x8e, 0xa2, 0xbe, 0xd9, 0x18, 0x9f, 0x51, 0xcb, 0x9c, 0x17, 0x99,
	0x72, 0x68, 0xfc, 0x1a, 0xd4, 0x44, 0x9c, 0xf1, 0xc2, 0xea, 0x7b, 0x4e, 0x14, 0x5a, 0x8e, 0x4e,
	0x34, 0x55, 0x7d, 0x4e, 0x14, 0x6f, 0x37, 0x2e, 0x4d, 0x47, 0x65, 0x56, 0x45, 0xa6, 0x22, 0x4c,
	0x12, 0x55, 0xad, 0xc3, 0x7c, 0x36, 0xb1, 0x54, 0x58, 0xfd, 0x3e, 0x91, 0xac, 0x35, 0xc6, 0x66,
	0xa3, 0x32, 0xcb, 0x99, 0xac, 0x53, 0xa1, 0xb1, 0x3b, 0x42, 0x5d, 0x5b, 0x19, 0x78, 0x02, 0x98,
	0xb6, 0xb6, 0xaf, 0xd2, 0xda, 0x3e, 0x87, 0xaa, 0xca, 0xbe, 0x39, 0x94, 0xdb, 0x92, 0x34, 0x99,
	0xbc, 0x79, 0x8d, 0xeb, 0x07, 0x93, 0x59, 0x66, 0x03, 0x5f, 0x3e, 0x19, 0x88, 0x69, 0x7a, 0x08,
	0xe5, 0x23, 0x3f, 0xb2, 0x6c, 0xe7, 0xf8, 0xd8, 0x69, 0xf5, 0xdd, 0xe8, 0x42, 0xfd, 0xc3, 0x9c,
	0xd2, 0x91, 0x1f, 0x6d, 0xc4, 0xc0, 0x64, 0xb7, 0x3a, 0xad, 0x13, 0xcb, 0x0f, 0x6c, 0x19, 0x54,
	0x7f, 0x9c, 0xda, 0xad, 0x4e, 0xeb, 0x64, 0x0f, 0x81, 0x14, 0xac, 0x4e, 0xef, 0xe7, 0x05, 0x1d,
	0xa9, 0xb6, 0xdf, 0x95, 0x76, 0xf5, 0xff, 0x53, 0xc1, 0xea, 0x32, 0xf0, 0xbf, 0x12, 0xa1, 0xa9,
	0xc0, 0x28, 0x38, 0x63, 0x5c, 0xca, 0xaa, 0x43, 0xff, 0xfb, 0x20, 0x6f, 0xce, 0x29, 0x44, 0x4a,
	0xaa, 0x53, 0x6b, 0x42, 0x39, 0x3b, 0x33, 0x94, 0xa3, 0xc4, 0x8f, 0x84, 0x95, 0x0a, 0xce, 0xc9,
	0x23, 0x40, 0x3f, 0xed, 0xe3, 0x6c, 0x7f, 0xa4, 0x3a, 0xe5, 0x4d, 0x55, 0xaa, 0x6d, 0xc0, 0x7c,
	0x4a, 0x01, 0x7f, 0x97, 0x8c, 0x49, 0x23, 0x7c, 0xd3, 0xb5, 0x3f, 0xc8, 0x65, 0x62, 0xc6, 0x95,
	0xce, 0xce, 0x4f, 0xe7, 0xfa, 0x5e, 0x14, 0xa0, 0x24, 0xb3, 0xf5, 0x8d, 0x50, 0x51, 0xc1, 0xd6,
	0xd1, 0x62, 0xbb, 0xfa, 0xaa, 0xf5, 0x0b, 0x58, 0x48, 0x5b, 0x13, 0x9c, 0x24, 0x69, 0x32, 0x66,
	0xe5, 0x31, 0xa6, 0x04, 0xe5, 0x43, 0xaa, 0x1c, 0x65, 0x01, 0x7c, 0xbc, 0x0b, 0xaf, 0xdd, 0x17,
	0x6d, 0xc9, 0x43, 0xe2, 0x90, 0x8f, 0x39, 0x0d, 0xc4, 0x31, 0xd5, 0x7e, 0x3a, 0x34, 0xb5, 0x0f,
	0xa0, 0x9c, 0x66, 0xda, 0x38, 0x2e, 0x63, 0x2e, 0x61, 0x46, 0xce, 0x44, 0xd9, 0x15, 0x3d, 0x2b,
	0x35, 0x3b, 0xb3, 0x5d, 0xd1, 0xc3, 0x53, 0xac, 0xbe, 0x0f, 0xc5, 0x94, 0x69, 0x68, 0x2c, 0xc1,
	0x90, 0x71, 0x58, 0x79, 0xcf, 0xb8, 0x0e, 0x8b, 0x0a, 0xba, 0xbb, 0x77, 0x68, 0x99, 0xcd, 0xf5,
	0x3d, 0x73, 0xa3, 0xb9, 0x51, 0xc9, 0x19, 0x06, 0x94, 0x55, 0x45, 0xf3, 0xeb, 0xfd, 0x2d, 0xb3,
	0xb9, 0x51, 0x99, 0xa8, 0xff, 0x83, 0x1c, 0x94, 0xf1, 0xeb, 0x93, 0xf4, 0x4e, 0x57, 0x2d, 0xdc,
	0x2a, 0x94, 0x28, 0x9b, 0x44, 0xd7, 0xb7, 0x9d, 0x63, 0x87, 0x38, 0x01, 0x27, 0x91, 0x93, 0x53,
	0x24, 0x64, 0x28, 0xef, 0xc7, 0x8e, 0xc2, 0x31, 0xe7, 0xc2, 0x54, 0xa9, 0xf6, 0x39, 0xcc, 0xa5,
	0x6b, 0xe9, 0xe1, 0x66, 0x24, 0x74, 0x66, 0x36, 0xce, 0x15, 0x92, 0xb9, 0xea, 0xd3, 0x57, 0x95,
	0xf5, 0xbf, 0x3c, 0x9d, 0x5c, 0xf1, 0xab, 0x04, 0x50, 0xdc, 0x25, 0xc7, 0xdf, 0x3e, 0x89, 0x33,
	0x61, 0x0d, 0x7d, 0x81, 0x4a, 0x6a, 0xb5, 0x9a, 0x4e, 0xf8, 0x19, 0x7b, 0xdd, 0x26, 0xb2, 0x5e,
	0xb7, 0x0f, 0x61, 0x9e, 0xab, 0x06, 0x53, 0x35, 0x95, 0x09, 0xbc, 0x1e, 0x27, 0x23, 0x48, 0xc5,
	0x54, 0x4e, 0x0d, 0xc6, 0x54, 0x26, 0xa1, 0x54, 0xd3, 0x03, 0xa1, 0x54, 0x4b, 0x30, 0x6d, 0x4b,
	0x57, 0xe8, 0x34, 0xa6, 0x5c, 0xc8, 0x1a, 0xcb, 0xb3, 0x97, 0x1b, 0xcb, 0xf9, 0x21, 0x63, 0x39,
	0x56, 0x5c, 0x61, 0xb4, 0xe2, 0x5a, 0xcc, 0x28, 0xae, 0x65, 0x98, 0x68, 0xe9, 0x04, 0x07, 0x13,
	0xad, 0x50, 0x87, 0xe8, 0x70, 0x68, 0x1f, 0x85, 0xe8, 0xdc, 0x01, 0x56, 0xdf, 0xac, 0xb4, 0x3a,
	0x0c, 0x04, 0xe2, 0xc3, 0xf6, 0x1e, 0xcc, 0x05, 0x7e, 0xd8, 0x11, 0x9e, 0xc2, 0x50, 0xff, 0x35,
	0x8c, 0x61, 0x8c, 0xf2, 0x19, 0x5c, 0xc7, 0xe9, 0x38, 0x76, 0xda, 0x9d, 0x81, 0xff, 0xa3, 0x41,
	0xea, 0xf2, 0x84, 0x79, 0x2d, 0xae, 0xce, 0xfc, 0xfb, 0x0c, 0xa4, 0x4d, 0x31, 0x2b, 0xa8, 0xbd,
	0xb4, 0xa4, 0xce, 0x70, 0x50, 0x24, 0xd8, 0x3e, 0x81, 0x70, 0x07, 0xb6, 0x44, 0xb7, 0x47, 0x2e,
	0x4f, 0xca, 0x8f, 0xaf, 0xbc, 0x7c, 0x04, 0x3c, 0x60, 0x18, 0x5d, 0x62, 0xf4, 0x3d, 0x19, 0x5a,
	0xed, 0x40, 0x1c, 0x1d, 0x49, 0x5b, 0x29, 0xd4, 0x73, 0x04, 0x7c, 0xc3, 0x30, 0xfc, 0xd2, 0x94,
	0xf3, 0x53, 0x69, 0xd6, 0x90, 0xf8, 0x3d, 0x39, 0xfe, 0xbb, 0xef, 0x85, 0xa4, 0x56, 0x4f, 0x98,
	0x5c, 0xa8, 0x7f, 0xcd, 0xb9, 0xc8, 0x86, 0x18, 0x51, 0x47, 0x94, 0x45, 0xa1, 0xf1, 0xa9, 0x0a,
	0x02, 0x8c, 0x73, 0x4d, 0xdd, 0x6c, 0x8c, 0xe7, 0x5d, 0x53, 0xe3, 0xd6, 0xff, 0x1d, 0x24, 0xa9,
	0x00, 0xd7, 0xfc, 0x68, 0x43, 0x1e, 0xf5, 0xdb, 0x2a, 0xe7, 0xda, 0xd4, 0x91, 0x1f, 0x07, 0xae,
	0x24, 0x69, 0x9b, 0xd2, 0x48, 0x8d, 0x35, 0x3f, 0x32, 0x09, 0xcd, 0x78, 0x06, 0x4b, 0xb6, 0x0c,
	0x9d, 0x40, 0x5a, 0xbd, 0x7e, 0xd8, 0xb1, 0x5c, 0xe1, 0x49, 0x2b, 0xf2, 0x7b, 0x2a, 0xb2, 0x72,
	0x81, 0xeb, 0xf6, 0xfb, 0x61, 0x67, 0x5b, 0x78, 0xf2, 0xd0, 0xef, 0x8d, 0x6c, 0xd0, 0x55, 0x86,
	0xf0, 0x50, 0x83, 0x1d, 0xc7, 0x1e, 0xd9, 0xe0, 0xc8, 0x8f, 0xd4, 0x0b, 0x96, 0x81, 0x06, 0x6b,
	0x7e, 0x64, 0xbc, 0x84, 0x6b, 0xaa, 0x81, 0x2d, 0x8f, 0xa5, 0x67, 0x27, 0x83, 0xe2, 0xe7, 0xd0,
	0x8b, 0x5c, 0xbb, 0x41, 0x95, 0x7a, 0x58, 0xa3, 0x1b, 0x75, 0x95, 0xb3, 0x7c, 0x44, 0x23, 0x1c,
	0xda, 0xe8, 0x46, 0x38, 0xb8, 0xd9, 0xd1, 0x8d, 0x70, 0x78, 0xc9, 0xf7, 0x90, 0xce, 0x17, 0x0f,
	0x2e, 0x9f, 0xfe, 0x1e, 0x54, 0xfb, 0x86, 0x67, 0x2c, 0x69, 0xd0, 0x55, 0x17, 0xe1, 0x43, 0x0d,
	0xb2, 0x33, 0x96, 0x34, 0xc0, 0x41, 0xc1, 0xa8, 0x06, 0x38, 0xa4, 0xa7, 0x60, 0xa4, 0x1b, 0xf0,
	0xf6, 0x52, 0xe6, 0x76, 0x25, 0x41, 0x37, 0x09, 0x8e, 0xea, 0x86, 0x3c, 0x97, 0x2d, 0x75, 0x8f,
	0xa8, 0xdd, 0xf8, 0x13, 0x66, 0x29, 0x86, 0xc6, 0x5e, 0xfc, 0xbe, 0x27, 0xb5, 0x6d, 0x5a, 0xe2,
	0x7c, 0x72, 0x08, 0x62, 0xcb, 0xb4, 0xf6, 0x87, 0xd3, 0x30, 0x89, 0xbd, 0xab, 0xff, 0x21, 0x24,
	0x03, 0xcb, 0x3f, 0xf3, 0xd2, 0x81, 0x1b, 0x25, 0x06, 0xef, 0x21, 0x34, 0x9b, 0xf0, 0x63, 0x22,
	0xe3, 0x35, 0xb9, 0x0d, 0x90, 0xd2, 0x7d, 0x26, 0xb5, 0x6b, 0x3c, 0x56, 0x7c, 0xee, 0x43, 0xa9,
	0x47, 0x62, 0xa6, 0xd5, 0x0f, 0x02, 0x34, 0x3e, 0xa7, 0x94, 0x8f, 0x00, 0x81, 0xeb, 0x0c, 0xa3,
	0x37, 0x63, 0x84, 0xa4, 0xdf, 0xcd, 0x97, 0xcc, 0x3c, 0x01, 0x76, 0xc4, 0x39, 0x39, 0x5d, 0xfd,
	0x53, 0x69, 0x45, 0x22, 0x68, 0xcb, 0xc8, 0x3a, 0x57, 0x42, 0xb5, 0x88, 0xc0, 0x43, 0x82, 0x7d,
	0x3d, 0x88, 0x73, 0xa1, 0xb3, 0xce, 0x24, 0x38, 0xdf, 0x0c, 0xe2, 0xfc, 0x42, 0xc9, 0xd8, 0x14,
	0xce, 0xcf, 0xf0, 0xfc, 0x56, 0x4a, 0x62, 0x37, 0x1b, 0x03, 0xcb, 0xd0, 0x1d, 0x8e, 0x81, 0x1d,
	0x5e, 0x04, 0x18, 0xb5, 0x08, 0x9f, 0xc0, 0x34, 0x52, 0xd1, 0xaf, 0x9b, 0x6e, 0x8f, 0xdd, 0xce,
	0x0d, 0xa4, 0x6b, 0x32, 0xb2, 0xf1, 0x39, 0xcc, 0xa4, 0x2e, 0x64, 0xd3, 0x09, 0xbb, 0x86, 0x9a,
	0xf1, 0x25, 0xad, 0xa9, 0xf0, 0x6b, 0xff, 0x30, 0x07, 0x53, 0xe4, 0xdd, 0xbe, 0x0e, 0xb3, 0x7a,
	0xf8, 0x2a, 0x23, 0x52, 0x97, 0x07, 0x4e, 0xa7, 0x05, 0x72, 0x94, 0x12, 0x11, 0xaa, 0x44, 0xae,
	0x3d, 0x9e, 0x15, 0xe9, 0x45, 0x4e, 0xbc, 0x8e, 0x73, 0x0c, 0x6c, 0x12, 0x8c, 0x1e, 0x0a, 0xe8,
	0x25, 0x50, 0xc9, 0x70, 0x23, 0x35, 0xfd, 0x49, 0xd5, 0x85, 0x5a, 0x3e, 0x55, 0xf5, 0x4d, 0xaa,
	0xea, 0x17, 0x3a, 0x27, 0x1c, 0x97, 0x7f, 0x56, 0xfb, 0x09, 0xcc, 0xa8, 0x6b, 0xe6, 0x4c, 0x3c,
	0x5c, 0x6e, 0x20, 0x1e, 0x8e, 0xfe, 0x17, 0x16, 0x4f, 0x35, 0x35, 0x54, 0x2a, 0xd3, 0x1c, 0x03,
	0x79, 0xe5, 0xea, 0x7d, 0x30, 0x70, 0x9a, 0x54, 0xa6, 0x97, 0xe3, 0xbe, 0x7b, 0x79, 0x9a, 0xaa,
	0x3b, 0x50, 0x3c, 0x73, 0x3c, 0xab, 0x27, 0x83, 0x96, 0x54, 0x39, 0x6d, 0x27, 0x4c, 0x38, 0x73,
	0xbc, 0x7d, 0x86, 0xe0, 0x12, 0xbb, 0xbe, 0xd7, 0x96, 0x61, 0xa4, 0xff, 0x3d, 0xa2, 0x7a, 0x83,
	0xa8, 0xa0, 0xfc, 0x8f, 0x11, 0xeb, 0xff, 0x61, 0x82, 0x33, 0xfa, 0xf1, 0xbf, 0x88, 0xa2, 0x93,
	0x81, 0x04, 0xf9, 0x25, 0x91, 0xb9, 0x3f, 0x1e, 0x8c, 0xcc, 0xfd, 0xae, 0x77, 0x17, 0xb1, 0x22,
	0x30, 0x39, 0x5a, 0x11, 0x98, 0x1a, 0xe7, 0xc1, 0x9a, 0xce, 0x7a, 0xb0, 0xd2, 0xf7, 0x9f, 0x33,
	0x03, 0xf7, 0x9f, 0x03, 0x5e, 0xd4, 0xd9, 0x21, 0x2f, 0xea, 0x90, 0x6b, 0x39, 0xff, 0xa7, 0x71,
	0x2d, 0x67, 0x02, 0xb2, 0x0b, 0x03, 0x21, 0xf3, 0xf5, 0xff, 0x9a, 0xe3, 0xab, 0x5b, 0x22, 0x74,
	0xe8, 0xf4, 0x42, 0xe3, 0x29, 0x4c, 0x45, 0x4e, 0x4f, 0x47, 0xf7, 0x55, 0x1b, 0x99, 0xda, 0x86,
	0xbe, 0x67, 0xef, 0x99, 0x84, 0x55, 0xfb, 0x9d, 0x9c, 0xbe, 0xcf, 0x3f, 0x74, 0x28, 0xe3, 0x2f,
	0xe7, 0xe8, 0x1f, 0xa1, 0x41, 0x72, 0x45, 0xa2, 0x41, 0x3e, 0x81, 0x05, 0xc5, 0xbc, 0x43, 0xb9,
	0x4d, 0xe7, 0xb9, 0x22, 0xc1, 0xcd, 0x26, 0xf8, 0x9f, 0x1c, 0x48, 0xf0, 0x6f, 0xbc, 0x48, 0x65,
	0x5b, 0xe2, 0x78, 0x9a, 0xd9, 0x46, 0x93, 0x63, 0xd7, 0x4b, 0xcd, 0x2f, 0x9b, 0xbb, 0x87, 0xd6,
	0xd6, 0x06, 0xaf, 0xb4, 0xce, 0xc2, 0xf4, 0xe4, 0x2d, 0x2c, 0x34, 0x55, 0xbc, 0xc2, 0xbe, 0xe3,
	0xb5, 0xd9, 0x65, 0x75, 0x07, 0x6a, 0x27, 0xd6, 0x10, 0xd8, 0xda, 0xf5, 0xd1, 0xfe, 0xa8, 0xfc,
	0xaf, 0xdf, 0x1c, 0x87, 0xf0, 0x5a, 0x38, 0xae, 0xb4, 0x2b, 0x7f, 0xfc, 0x9b, 0x4f, 0xfe, 0xd2,
	0x34, 0x18, 0x4d, 0xfa, 0xb7, 0x3a, 0xeb, 0x07, 0x32, 0x0c, 0x1d, 0xdf, 0xdb, 0x95, 0xd2, 0x36,
	0xee, 0xc2, 0xfb, 0x27, 0xd6, 0x30, 0x5c, 0xaf, 0x58, 0xe5, 0x3d, 0xe3, 0x29, 0x3c, 0x1a, 0x8d,
	0x11, 0xca, 0x60, 0xd7, 0x4f, 0x41, 0xa4, 0x5d, 0xb1, 0x8d, 0xc7, 0xf0, 0x70, 0x2c, 0xf6, 0x96,
	0xb7, 0xe7, 0xb9, 0x8e, 0xc7, 0xf7, 0xf9, 0xd2, 0x78, 0x04, 0x0f, 0x2e, 0x41, 0xa5, 0x7f, 0x89,
	0x40, 0x98, 0xc7, 0xc6, 0xc7, 0xf0, 0xf8, 0x12, 0xcc, 0xb7, 0x5b, 0x5f, 0x89, 0x70, 0xdd, 0xf7,
	0x3c, 0x72, 0xd9, 0x55, 0xda, 0xc6, 0x33, 0xf8, 0xe8, 0x52, 0xf4, 0x5d, 0x49, 0xff, 0xca, 0x56,
	0x37, 0xe8, 0x18, 0x1f, 0x40, 0x7d, 0x6c, 0x83, 0xc3, 0x7e, 0xe4, 0x07, 0x8e, 0x70, 0xc3, 0x8a,
	0x63, 0xbc, 0x80, 0x8f, 0xdf, 0x79, 0x1c, 0x5b, 0xb6, 0x2b, 0x2b, 0xbf, 0x61, 0xbc, 0x84, 0x67,
	0xdf, 0x61, 0x2c, 0xd4, 0xe8, 0xc4, 0x78, 0x32, 0x66, 0x12, 0xe9, 0x99, 0x14, 0xdd, 0xaa, 0xf3,
	0x44, 0x56, 0x7e, 0x2f, 0x67, 0x3c, 0x1e, 0x33, 0x8b, 0x09, 0x2e, 0xcd, 0x64, 0xe5, 0xf7, 0x73,
	0xc6, 0x23, 0xb8, 0x7f, 0x05, 0x2a, 0xf5, 0xff, 0x6f, 0xde, 0x85, 0xa8, 0x89, 0xb6, 0x4d, 0xe5,
	0x0f, 0x72, 0xc6, 0x33, 0x78, 0xf2, 0x2e, 0xfd, 0xbf, 0xed, 0xb9, 0xbe, 0xb0, 0x2b, 0xff, 0x36,
	0xf7, 0xe4, 0x8f, 0x72, 0xb0, 0x4c, 0x92, 0xee, 0x30, 0xbe, 0x19, 0xa2, 0x0d, 0x11, 0xa2, 0x1d,
	0x7b, 0xd8, 0xb4, 0x5e, 0x6f, 0x99, 0x07, 0x87, 0xd6, 0xda, 0xf6, 0xde, 0xde, 0x06, 0x47, 0xe1,
	0x1c, 0x36, 0x49, 0x28, 0x5a, 0xcd, 0xdd, 0x0d, 0x8e, 0x23, 0x3f, 0x6c, 0x5a, 0x3b, 0x6f, 0xb7,
	0x0f, 0xb7, 0xac, 0x2f, 0xb6, 0xb6, 0xb7, 0x39, 0x71, 0xdf, 0x61, 0xd3, 0xda, 0x6c, 0x9a, 0x7b,
	0xd6, 0x46, 0x73, 0xf7, 0x9b, 0xca, 0xa4, 0x42, 0x5a, 0x6d, 0xbe, 0xd9, 0x3a, 0x60, 0xd0, 0x94,
	0xb1, 0x08, 0xf3, 0x31, 0xe8, 0xe0, 0x70, 0x6f, 0xbb, 0xb9, 0x5b, 0x99, 0x36, 0xca, 0x00, 0x48,
	0x7d, 0x6f, 0x63, 0x7b, 0xeb, 0x8b, 0x66, 0x65, 0x46, 0x21, 0xad, 0xef, 0xbd, 0x35, 0xb7, 0x9a,
	0x26, 0x93, 0x9f, 0x55, 0x43, 0x68, 0xae, 0x6f, 0xee, 0x1d, 0x6c, 0xaf, 0xee, 0x54, 0xf2, 0x46,
	0x09, 0x0a, 0x87, 0x4d, 0xcb, 0x5c, 0xdd, 0xdf, 0x6a, 0x9a, 0x95, 0x82, 0x6a, 0xd4, 0x5c, 0x35,
	0xb7, 0xbf, 0xb1, 0xcc, 0xbd, 0x83, 0xcd, 0xd5, 0xdd, 0x0a, 0xa8, 0x11, 0xac, 0x6d, 0xaf, 0xae,
	0x7f, 0x61, 0x6d, 0xee, 0x6d, 0x37, 0x2b, 0xc5, 0x27, 0x7f, 0x6d, 0x12, 0xae, 0x8f, 0x79, 0xaf,
	0x82, 0x7b, 0xe1, 0x5d, 0x9e, 0xb2, 0x54, 0x72, 0xb8, 0x1d, 0xc7, 0x61, 0xea, 0x57, 0x74, 0x92,
	0x7d, 0xc5, 0x76, 0x65, 0x02, 0x39, 0x7b, 0x1c, 0x36, 0x3b, 0x6d, 0xf1, 0xb8, 0xa8, 0x4c, 0xe2,
	0xb6, 0x1d, 0x87, 0xb7, 0xa6, 0xa2, 0x4d, 0x18, 0x75, 0xea, 0xb2, 0xa1, 0xaa, 0x57, 0xa3, 0x8c,
	0x39, 0x6d, 0x7c, 0x08, 0xf7, 0xc7, 0x61, 0xb2, 0x5e, 0xcb, 0x88, 0x33, 0xc6, 0x43, 0xb8, 0x37,
	0x0e, 0x91, 0x3c, 0xd1, 0x84, 0x36, 0x7b, 0x19, 0x1a, 0xfd, 0xcb, 0x1d, 0x34, 0x38, 0x2b, 0xf9,
	0xcb, 0xbe, 0xf9, 0x75, 0x6c, 0xfd, 0x55, 0x0a, 0x6b, 0x9f, 0x6d, 0xe6, 0x7e, 0xf6, 0xbc, 0xed,
	0x44, 0x9d, 0xfe, 0x51, 0xa3, 0xe5, 0x77, 0x9f, 0xbd, 0x78, 0x79, 0xf2, 0xac, 0xed, 0x7f, 0x4c,
	0xaf, 0xac, 0x3e, 0x0e, 0xd4, 0xbf, 0x74, 0x09, 0x9f, 0xd1, 0x7f, 0x01, 0x3f, 0xea, 0x1f, 0x3f,
	0xb3, 0xfd, 0x48, 0xac, 0xfc, 0x56, 0xee, 0xbd, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x05, 0x33,
	0x06, 0xf4, 0x76, 0x7c, 0x00, 0x00,
}
