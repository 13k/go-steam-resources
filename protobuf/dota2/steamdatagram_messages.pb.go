// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamdatagram_messages.proto

package dota2 // import "github.com/13k/go-steam-resources/protobuf/dota2"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Invalid                       ESteamDatagramMsgID = 0
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest             ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply               ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest         ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply           ESteamDatagramMsgID = 4
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest      ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished  ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                     ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                    ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter            ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer            ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter            ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient            ESteamDatagramMsgID = 12
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Stats                         ESteamDatagramMsgID = 13
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleRequest       ESteamDatagramMsgID = 14
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleReply         ESteamDatagramMsgID = 15
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary ESteamDatagramMsgID = 16
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayHealth                   ESteamDatagramMsgID = 17
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectRequest                ESteamDatagramMsgID = 18
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectOK                     ESteamDatagramMsgID = 19
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectionClosed              ESteamDatagramMsgID = 20
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoConnection                  ESteamDatagramMsgID = 21
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingRequest       ESteamDatagramMsgID = 22
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingReply         ESteamDatagramMsgID = 23
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionRequest             ESteamDatagramMsgID = 24
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionEstablished         ESteamDatagramMsgID = 25
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsClient                ESteamDatagramMsgID = 26
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsRelay                 ESteamDatagramMsgID = 27
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PBadRoute                   ESteamDatagramMsgID = 28
)

var ESteamDatagramMsgID_name = map[int32]string{
	0:  "k_ESteamDatagramMsg_Invalid",
	1:  "k_ESteamDatagramMsg_RouterPingRequest",
	2:  "k_ESteamDatagramMsg_RouterPingReply",
	3:  "k_ESteamDatagramMsg_GameserverPingRequest",
	4:  "k_ESteamDatagramMsg_GameserverPingReply",
	5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
	6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
	7:  "k_ESteamDatagramMsg_NoSession",
	8:  "k_ESteamDatagramMsg_Diagnostic",
	9:  "k_ESteamDatagramMsg_DataClientToRouter",
	10: "k_ESteamDatagramMsg_DataRouterToServer",
	11: "k_ESteamDatagramMsg_DataServerToRouter",
	12: "k_ESteamDatagramMsg_DataRouterToClient",
	13: "k_ESteamDatagramMsg_Stats",
	14: "k_ESteamDatagramMsg_ClientPingSampleRequest",
	15: "k_ESteamDatagramMsg_ClientPingSampleReply",
	16: "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
	17: "k_ESteamDatagramMsg_RelayHealth",
	18: "k_ESteamDatagramMsg_ConnectRequest",
	19: "k_ESteamDatagramMsg_ConnectOK",
	20: "k_ESteamDatagramMsg_ConnectionClosed",
	21: "k_ESteamDatagramMsg_NoConnection",
	22: "k_ESteamDatagramMsg_RelayToRelayPingRequest",
	23: "k_ESteamDatagramMsg_RelayToRelayPingReply",
	24: "k_ESteamDatagramMsg_P2PSessionRequest",
	25: "k_ESteamDatagramMsg_P2PSessionEstablished",
	26: "k_ESteamDatagramMsg_P2PStatsClient",
	27: "k_ESteamDatagramMsg_P2PStatsRelay",
	28: "k_ESteamDatagramMsg_P2PBadRoute",
}
var ESteamDatagramMsgID_value = map[string]int32{
	"k_ESteamDatagramMsg_Invalid":                       0,
	"k_ESteamDatagramMsg_RouterPingRequest":             1,
	"k_ESteamDatagramMsg_RouterPingReply":               2,
	"k_ESteamDatagramMsg_GameserverPingRequest":         3,
	"k_ESteamDatagramMsg_GameserverPingReply":           4,
	"k_ESteamDatagramMsg_GameserverSessionRequest":      5,
	"k_ESteamDatagramMsg_GameserverSessionEstablished":  6,
	"k_ESteamDatagramMsg_NoSession":                     7,
	"k_ESteamDatagramMsg_Diagnostic":                    8,
	"k_ESteamDatagramMsg_DataClientToRouter":            9,
	"k_ESteamDatagramMsg_DataRouterToServer":            10,
	"k_ESteamDatagramMsg_DataServerToRouter":            11,
	"k_ESteamDatagramMsg_DataRouterToClient":            12,
	"k_ESteamDatagramMsg_Stats":                         13,
	"k_ESteamDatagramMsg_ClientPingSampleRequest":       14,
	"k_ESteamDatagramMsg_ClientPingSampleReply":         15,
	"k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary": 16,
	"k_ESteamDatagramMsg_RelayHealth":                   17,
	"k_ESteamDatagramMsg_ConnectRequest":                18,
	"k_ESteamDatagramMsg_ConnectOK":                     19,
	"k_ESteamDatagramMsg_ConnectionClosed":              20,
	"k_ESteamDatagramMsg_NoConnection":                  21,
	"k_ESteamDatagramMsg_RelayToRelayPingRequest":       22,
	"k_ESteamDatagramMsg_RelayToRelayPingReply":         23,
	"k_ESteamDatagramMsg_P2PSessionRequest":             24,
	"k_ESteamDatagramMsg_P2PSessionEstablished":         25,
	"k_ESteamDatagramMsg_P2PStatsClient":                26,
	"k_ESteamDatagramMsg_P2PStatsRelay":                 27,
	"k_ESteamDatagramMsg_P2PBadRoute":                   28,
}

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}
func (x ESteamDatagramMsgID) String() string {
	return proto.EnumName(ESteamDatagramMsgID_name, int32(x))
}
func (x *ESteamDatagramMsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESteamDatagramMsgID_value, data, "ESteamDatagramMsgID")
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(value)
	return nil
}
func (ESteamDatagramMsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{0}
}

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

var CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
	0: "INVALID",
	1: "CURVE25519",
}
var CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
	"INVALID":    0,
	"CURVE25519": 1,
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}
func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return proto.EnumName(CMsgSteamDatagramSessionCryptInfo_EKeyType_name, int32(x))
}
func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramSessionCryptInfo_EKeyType_value, data, "CMsgSteamDatagramSessionCryptInfo_EKeyType")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(value)
	return nil
}
func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{1, 0}
}

type CMsgSteamDatagramRouterPingReply struct {
	ClientTimestamp            *uint32                                            `protobuf:"fixed32,1,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LatencyDatacenterIds       []uint32                                           `protobuf:"fixed32,2,rep,packed,name=latency_datacenter_ids,json=latencyDatacenterIds" json:"latency_datacenter_ids,omitempty"`
	LatencyPingMs              []uint32                                           `protobuf:"varint,3,rep,packed,name=latency_ping_ms,json=latencyPingMs" json:"latency_ping_ms,omitempty"`
	YourPublicIp               *uint32                                            `protobuf:"fixed32,4,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime                 *uint32                                            `protobuf:"fixed32,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge                  *uint64                                            `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown       *uint32                                            `protobuf:"varint,7,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	ClientCookie               *uint32                                            `protobuf:"fixed32,8,opt,name=client_cookie,json=clientCookie" json:"client_cookie,omitempty"`
	ScoringPenaltyRelayCluster *uint32                                            `protobuf:"varint,9,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	RouteExceptions            []*CMsgSteamDatagramRouterPingReply_RouteException `protobuf:"bytes,10,rep,name=route_exceptions,json=routeExceptions" json:"route_exceptions,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                           `json:"-"`
	XXX_unrecognized           []byte                                             `json:"-"`
	XXX_sizecache              int32                                              `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingReply) Reset()         { *m = CMsgSteamDatagramRouterPingReply{} }
func (m *CMsgSteamDatagramRouterPingReply) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterPingReply) ProtoMessage()    {}
func (*CMsgSteamDatagramRouterPingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{0}
}
func (m *CMsgSteamDatagramRouterPingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramRouterPingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramRouterPingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramRouterPingReply.Merge(dst, src)
}
func (m *CMsgSteamDatagramRouterPingReply) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply.Size(m)
}
func (m *CMsgSteamDatagramRouterPingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramRouterPingReply.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramRouterPingReply proto.InternalMessageInfo

func (m *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if m != nil && m.ClientTimestamp != nil {
		return *m.ClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIds() []uint32 {
	if m != nil {
		return m.LatencyDatacenterIds
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if m != nil {
		return m.LatencyPingMs
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if m != nil && m.YourPublicIp != nil {
		return *m.YourPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetClientCookie() uint32 {
	if m != nil && m.ClientCookie != nil {
		return *m.ClientCookie
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetScoringPenaltyRelayCluster() uint32 {
	if m != nil && m.ScoringPenaltyRelayCluster != nil {
		return *m.ScoringPenaltyRelayCluster
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetRouteExceptions() []*CMsgSteamDatagramRouterPingReply_RouteException {
	if m != nil {
		return m.RouteExceptions
	}
	return nil
}

type CMsgSteamDatagramRouterPingReply_RouteException struct {
	DataCenterId         *uint32  `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Flags                *uint32  `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Penalty              *uint32  `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) Reset() {
	*m = CMsgSteamDatagramRouterPingReply_RouteException{}
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramRouterPingReply_RouteException) ProtoMessage() {}
func (*CMsgSteamDatagramRouterPingReply_RouteException) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{0, 0}
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramRouterPingReply_RouteException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException.Merge(dst, src)
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException.Size(m)
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramRouterPingReply_RouteException proto.InternalMessageInfo

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetDataCenterId() uint32 {
	if m != nil && m.DataCenterId != nil {
		return *m.DataCenterId
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetPenalty() uint32 {
	if m != nil && m.Penalty != nil {
		return *m.Penalty
	}
	return 0
}

type CMsgSteamDatagramSessionCryptInfo struct {
	KeyType              *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=CMsgSteamDatagramSessionCryptInfo_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData              []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce                *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	IsSnp                *bool                                       `protobuf:"varint,4,opt,name=is_snp,json=isSnp" json:"is_snp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfo) Reset()         { *m = CMsgSteamDatagramSessionCryptInfo{} }
func (m *CMsgSteamDatagramSessionCryptInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{1}
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramSessionCryptInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Merge(dst, src)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Size(m)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo proto.InternalMessageInfo

const Default_CMsgSteamDatagramSessionCryptInfo_KeyType CMsgSteamDatagramSessionCryptInfo_EKeyType = CMsgSteamDatagramSessionCryptInfo_INVALID

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return Default_CMsgSteamDatagramSessionCryptInfo_KeyType
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetIsSnp() bool {
	if m != nil && m.IsSnp != nil {
		return *m.IsSnp
	}
	return false
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	Info                 []byte   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*m = CMsgSteamDatagramSessionCryptInfoSigned{}
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{2}
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Merge(dst, src)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Size(m)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned proto.InternalMessageInfo

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramDiagnostic struct {
	Severity             *uint32  `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text                 *string  `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamDatagramDiagnostic) Reset()         { *m = CMsgSteamDatagramDiagnostic{} }
func (m *CMsgSteamDatagramDiagnostic) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDiagnostic) ProtoMessage()    {}
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{3}
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramDiagnostic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramDiagnostic.Merge(dst, src)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Size(m)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramDiagnostic.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramDiagnostic proto.InternalMessageInfo

func (m *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *CMsgSteamDatagramDiagnostic) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	OutPacketsPerSecX10     *uint32  `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32  `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32  `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32  `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32  `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32  `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32  `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32  `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*m = CMsgSteamDatagramLinkInstantaneousStats{}
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{4}
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramLinkInstantaneousStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Merge(dst, src)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Size(m)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats proto.InternalMessageInfo

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if m != nil && m.OutPacketsPerSecX10 != nil {
		return *m.OutPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if m != nil && m.OutBytesPerSec != nil {
		return *m.OutBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if m != nil && m.InPacketsPerSecX10 != nil {
		return *m.InPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if m != nil && m.InBytesPerSec != nil {
		return *m.InBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if m != nil && m.PingMs != nil {
		return *m.PingMs
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if m != nil && m.PacketsDroppedPct != nil {
		return *m.PacketsDroppedPct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if m != nil && m.PacketsWeirdSequencePct != nil {
		return *m.PacketsWeirdSequencePct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if m != nil && m.PeakJitterUsec != nil {
		return *m.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	PacketsSent               *uint64  `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                    *uint64  `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv               *uint64  `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                    *uint64  `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced      *uint64  `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped        *uint64  `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder     *uint64  `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvDuplicate      *uint64  `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch          *uint64  `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	QualityHistogram_100      *uint32  `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99       *uint32  `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97       *uint32  `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95       *uint32  `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90       *uint32  `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75       *uint32  `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50       *uint32  `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1        *uint32  `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead      *uint32  `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd          *uint32  `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th          *uint32  `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th         *uint32  `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th         *uint32  `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25          *uint32  `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50          *uint32  `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75          *uint32  `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100         *uint32  `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125         *uint32  `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150         *uint32  `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200         *uint32  `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300         *uint32  `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax          *uint32  `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th             *uint32  `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th            *uint32  `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th            *uint32  `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th            *uint32  `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th            *uint32  `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible *uint32  `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1         *uint32  `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2         *uint32  `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5         *uint32  `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10        *uint32  `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20        *uint32  `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	TxspeedMax                *uint32  `protobuf:"varint,67,opt,name=txspeed_max,json=txspeedMax" json:"txspeed_max,omitempty"`
	TxspeedHistogram_16       *uint32  `protobuf:"varint,68,opt,name=txspeed_histogram_16,json=txspeedHistogram16" json:"txspeed_histogram_16,omitempty"`
	TxspeedHistogram_32       *uint32  `protobuf:"varint,69,opt,name=txspeed_histogram_32,json=txspeedHistogram32" json:"txspeed_histogram_32,omitempty"`
	TxspeedHistogram_64       *uint32  `protobuf:"varint,70,opt,name=txspeed_histogram_64,json=txspeedHistogram64" json:"txspeed_histogram_64,omitempty"`
	TxspeedHistogram_128      *uint32  `protobuf:"varint,71,opt,name=txspeed_histogram_128,json=txspeedHistogram128" json:"txspeed_histogram_128,omitempty"`
	TxspeedHistogram_256      *uint32  `protobuf:"varint,72,opt,name=txspeed_histogram_256,json=txspeedHistogram256" json:"txspeed_histogram_256,omitempty"`
	TxspeedHistogram_512      *uint32  `protobuf:"varint,73,opt,name=txspeed_histogram_512,json=txspeedHistogram512" json:"txspeed_histogram_512,omitempty"`
	TxspeedHistogram_1024     *uint32  `protobuf:"varint,74,opt,name=txspeed_histogram_1024,json=txspeedHistogram1024" json:"txspeed_histogram_1024,omitempty"`
	TxspeedHistogramMax       *uint32  `protobuf:"varint,75,opt,name=txspeed_histogram_max,json=txspeedHistogramMax" json:"txspeed_histogram_max,omitempty"`
	TxspeedNtile_5Th          *uint32  `protobuf:"varint,76,opt,name=txspeed_ntile_5th,json=txspeedNtile5th" json:"txspeed_ntile_5th,omitempty"`
	TxspeedNtile_50Th         *uint32  `protobuf:"varint,77,opt,name=txspeed_ntile_50th,json=txspeedNtile50th" json:"txspeed_ntile_50th,omitempty"`
	TxspeedNtile_75Th         *uint32  `protobuf:"varint,78,opt,name=txspeed_ntile_75th,json=txspeedNtile75th" json:"txspeed_ntile_75th,omitempty"`
	TxspeedNtile_95Th         *uint32  `protobuf:"varint,79,opt,name=txspeed_ntile_95th,json=txspeedNtile95th" json:"txspeed_ntile_95th,omitempty"`
	TxspeedNtile_98Th         *uint32  `protobuf:"varint,80,opt,name=txspeed_ntile_98th,json=txspeedNtile98th" json:"txspeed_ntile_98th,omitempty"`
	RxspeedMax                *uint32  `protobuf:"varint,81,opt,name=rxspeed_max,json=rxspeedMax" json:"rxspeed_max,omitempty"`
	RxspeedHistogram_16       *uint32  `protobuf:"varint,82,opt,name=rxspeed_histogram_16,json=rxspeedHistogram16" json:"rxspeed_histogram_16,omitempty"`
	RxspeedHistogram_32       *uint32  `protobuf:"varint,83,opt,name=rxspeed_histogram_32,json=rxspeedHistogram32" json:"rxspeed_histogram_32,omitempty"`
	RxspeedHistogram_64       *uint32  `protobuf:"varint,84,opt,name=rxspeed_histogram_64,json=rxspeedHistogram64" json:"rxspeed_histogram_64,omitempty"`
	RxspeedHistogram_128      *uint32  `protobuf:"varint,85,opt,name=rxspeed_histogram_128,json=rxspeedHistogram128" json:"rxspeed_histogram_128,omitempty"`
	RxspeedHistogram_256      *uint32  `protobuf:"varint,86,opt,name=rxspeed_histogram_256,json=rxspeedHistogram256" json:"rxspeed_histogram_256,omitempty"`
	RxspeedHistogram_512      *uint32  `protobuf:"varint,87,opt,name=rxspeed_histogram_512,json=rxspeedHistogram512" json:"rxspeed_histogram_512,omitempty"`
	RxspeedHistogram_1024     *uint32  `protobuf:"varint,88,opt,name=rxspeed_histogram_1024,json=rxspeedHistogram1024" json:"rxspeed_histogram_1024,omitempty"`
	RxspeedHistogramMax       *uint32  `protobuf:"varint,89,opt,name=rxspeed_histogram_max,json=rxspeedHistogramMax" json:"rxspeed_histogram_max,omitempty"`
	RxspeedNtile_5Th          *uint32  `protobuf:"varint,90,opt,name=rxspeed_ntile_5th,json=rxspeedNtile5th" json:"rxspeed_ntile_5th,omitempty"`
	RxspeedNtile_50Th         *uint32  `protobuf:"varint,91,opt,name=rxspeed_ntile_50th,json=rxspeedNtile50th" json:"rxspeed_ntile_50th,omitempty"`
	RxspeedNtile_75Th         *uint32  `protobuf:"varint,92,opt,name=rxspeed_ntile_75th,json=rxspeedNtile75th" json:"rxspeed_ntile_75th,omitempty"`
	RxspeedNtile_95Th         *uint32  `protobuf:"varint,93,opt,name=rxspeed_ntile_95th,json=rxspeedNtile95th" json:"rxspeed_ntile_95th,omitempty"`
	RxspeedNtile_98Th         *uint32  `protobuf:"varint,94,opt,name=rxspeed_ntile_98th,json=rxspeedNtile98th" json:"rxspeed_ntile_98th,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *CMsgSteamDatagramLinkLifetimeStats) Reset()         { *m = CMsgSteamDatagramLinkLifetimeStats{} }
func (m *CMsgSteamDatagramLinkLifetimeStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{5}
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramLinkLifetimeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Merge(dst, src)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Size(m)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats proto.InternalMessageInfo

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if m != nil && m.PacketsSent != nil {
		return *m.PacketsSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if m != nil && m.KbSent != nil {
		return *m.KbSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if m != nil && m.PacketsRecv != nil {
		return *m.PacketsRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if m != nil && m.KbRecv != nil {
		return *m.KbRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if m != nil && m.PacketsRecvSequenced != nil {
		return *m.PacketsRecvSequenced
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if m != nil && m.PacketsRecvDropped != nil {
		return *m.PacketsRecvDropped
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if m != nil && m.PacketsRecvOutOfOrder != nil {
		return *m.PacketsRecvOutOfOrder
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if m != nil && m.PacketsRecvDuplicate != nil {
		return *m.PacketsRecvDuplicate
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if m != nil && m.PacketsRecvLurch != nil {
		return *m.PacketsRecvLurch
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if m != nil && m.QualityHistogram_100 != nil {
		return *m.QualityHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if m != nil && m.QualityHistogram_99 != nil {
		return *m.QualityHistogram_99
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if m != nil && m.QualityHistogram_97 != nil {
		return *m.QualityHistogram_97
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if m != nil && m.QualityHistogram_95 != nil {
		return *m.QualityHistogram_95
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if m != nil && m.QualityHistogram_90 != nil {
		return *m.QualityHistogram_90
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if m != nil && m.QualityHistogram_75 != nil {
		return *m.QualityHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if m != nil && m.QualityHistogram_50 != nil {
		return *m.QualityHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if m != nil && m.QualityHistogram_1 != nil {
		return *m.QualityHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if m != nil && m.QualityHistogramDead != nil {
		return *m.QualityHistogramDead
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if m != nil && m.QualityNtile_2Nd != nil {
		return *m.QualityNtile_2Nd
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if m != nil && m.QualityNtile_5Th != nil {
		return *m.QualityNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if m != nil && m.QualityNtile_25Th != nil {
		return *m.QualityNtile_25Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if m != nil && m.QualityNtile_50Th != nil {
		return *m.QualityNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if m != nil && m.PingHistogram_25 != nil {
		return *m.PingHistogram_25
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if m != nil && m.PingHistogram_50 != nil {
		return *m.PingHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if m != nil && m.PingHistogram_75 != nil {
		return *m.PingHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if m != nil && m.PingHistogram_100 != nil {
		return *m.PingHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if m != nil && m.PingHistogram_125 != nil {
		return *m.PingHistogram_125
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if m != nil && m.PingHistogram_150 != nil {
		return *m.PingHistogram_150
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if m != nil && m.PingHistogram_200 != nil {
		return *m.PingHistogram_200
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if m != nil && m.PingHistogram_300 != nil {
		return *m.PingHistogram_300
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if m != nil && m.PingHistogramMax != nil {
		return *m.PingHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if m != nil && m.PingNtile_5Th != nil {
		return *m.PingNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if m != nil && m.PingNtile_50Th != nil {
		return *m.PingNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if m != nil && m.PingNtile_75Th != nil {
		return *m.PingNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if m != nil && m.PingNtile_95Th != nil {
		return *m.PingNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if m != nil && m.PingNtile_98Th != nil {
		return *m.PingNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if m != nil && m.JitterHistogramNegligible != nil {
		return *m.JitterHistogramNegligible
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if m != nil && m.JitterHistogram_1 != nil {
		return *m.JitterHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if m != nil && m.JitterHistogram_2 != nil {
		return *m.JitterHistogram_2
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if m != nil && m.JitterHistogram_5 != nil {
		return *m.JitterHistogram_5
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if m != nil && m.JitterHistogram_10 != nil {
		return *m.JitterHistogram_10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if m != nil && m.JitterHistogram_20 != nil {
		return *m.JitterHistogram_20
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedMax() uint32 {
	if m != nil && m.TxspeedMax != nil {
		return *m.TxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_16() uint32 {
	if m != nil && m.TxspeedHistogram_16 != nil {
		return *m.TxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_32() uint32 {
	if m != nil && m.TxspeedHistogram_32 != nil {
		return *m.TxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_64() uint32 {
	if m != nil && m.TxspeedHistogram_64 != nil {
		return *m.TxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_128() uint32 {
	if m != nil && m.TxspeedHistogram_128 != nil {
		return *m.TxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_256() uint32 {
	if m != nil && m.TxspeedHistogram_256 != nil {
		return *m.TxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_512() uint32 {
	if m != nil && m.TxspeedHistogram_512 != nil {
		return *m.TxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_1024() uint32 {
	if m != nil && m.TxspeedHistogram_1024 != nil {
		return *m.TxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogramMax() uint32 {
	if m != nil && m.TxspeedHistogramMax != nil {
		return *m.TxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_5Th() uint32 {
	if m != nil && m.TxspeedNtile_5Th != nil {
		return *m.TxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_50Th() uint32 {
	if m != nil && m.TxspeedNtile_50Th != nil {
		return *m.TxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_75Th() uint32 {
	if m != nil && m.TxspeedNtile_75Th != nil {
		return *m.TxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_95Th() uint32 {
	if m != nil && m.TxspeedNtile_95Th != nil {
		return *m.TxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_98Th() uint32 {
	if m != nil && m.TxspeedNtile_98Th != nil {
		return *m.TxspeedNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedMax() uint32 {
	if m != nil && m.RxspeedMax != nil {
		return *m.RxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_16() uint32 {
	if m != nil && m.RxspeedHistogram_16 != nil {
		return *m.RxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_32() uint32 {
	if m != nil && m.RxspeedHistogram_32 != nil {
		return *m.RxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_64() uint32 {
	if m != nil && m.RxspeedHistogram_64 != nil {
		return *m.RxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_128() uint32 {
	if m != nil && m.RxspeedHistogram_128 != nil {
		return *m.RxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_256() uint32 {
	if m != nil && m.RxspeedHistogram_256 != nil {
		return *m.RxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_512() uint32 {
	if m != nil && m.RxspeedHistogram_512 != nil {
		return *m.RxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_1024() uint32 {
	if m != nil && m.RxspeedHistogram_1024 != nil {
		return *m.RxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogramMax() uint32 {
	if m != nil && m.RxspeedHistogramMax != nil {
		return *m.RxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_5Th() uint32 {
	if m != nil && m.RxspeedNtile_5Th != nil {
		return *m.RxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_50Th() uint32 {
	if m != nil && m.RxspeedNtile_50Th != nil {
		return *m.RxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_75Th() uint32 {
	if m != nil && m.RxspeedNtile_75Th != nil {
		return *m.RxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_95Th() uint32 {
	if m != nil && m.RxspeedNtile_95Th != nil {
		return *m.RxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_98Th() uint32 {
	if m != nil && m.RxspeedNtile_98Th != nil {
		return *m.RxspeedNtile_98Th
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	Instantaneous        *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime             *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CMsgSteamDatagramConnectionQuality) Reset()         { *m = CMsgSteamDatagramConnectionQuality{} }
func (m *CMsgSteamDatagramConnectionQuality) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectionQuality) ProtoMessage()    {}
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_steamdatagram_messages_106acab4a0d79c1f, []int{6}
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Marshal(b, m, deterministic)
}
func (dst *CMsgSteamDatagramConnectionQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Merge(dst, src)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Size(m)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramConnectionQuality.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramConnectionQuality proto.InternalMessageInfo

func (m *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if m != nil {
		return m.Instantaneous
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func init() {
	proto.RegisterType((*CMsgSteamDatagramRouterPingReply)(nil), "CMsgSteamDatagramRouterPingReply")
	proto.RegisterType((*CMsgSteamDatagramRouterPingReply_RouteException)(nil), "CMsgSteamDatagramRouterPingReply.RouteException")
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfo)(nil), "CMsgSteamDatagramSessionCryptInfo")
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfoSigned)(nil), "CMsgSteamDatagramSessionCryptInfoSigned")
	proto.RegisterType((*CMsgSteamDatagramDiagnostic)(nil), "CMsgSteamDatagramDiagnostic")
	proto.RegisterType((*CMsgSteamDatagramLinkInstantaneousStats)(nil), "CMsgSteamDatagramLinkInstantaneousStats")
	proto.RegisterType((*CMsgSteamDatagramLinkLifetimeStats)(nil), "CMsgSteamDatagramLinkLifetimeStats")
	proto.RegisterType((*CMsgSteamDatagramConnectionQuality)(nil), "CMsgSteamDatagramConnectionQuality")
	proto.RegisterEnum("ESteamDatagramMsgID", ESteamDatagramMsgID_name, ESteamDatagramMsgID_value)
	proto.RegisterEnum("CMsgSteamDatagramSessionCryptInfo_EKeyType", CMsgSteamDatagramSessionCryptInfo_EKeyType_name, CMsgSteamDatagramSessionCryptInfo_EKeyType_value)
}

func init() {
	proto.RegisterFile("steamdatagram_messages.proto", fileDescriptor_steamdatagram_messages_106acab4a0d79c1f)
}

var fileDescriptor_steamdatagram_messages_106acab4a0d79c1f = []byte{
	// 2080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x99, 0xed, 0x56, 0xdc, 0xb8,
	0x19, 0xc7, 0x97, 0x40, 0x80, 0x88, 0x37, 0x47, 0x21, 0x44, 0x90, 0x64, 0x43, 0x26, 0xd9, 0x84,
	0x90, 0x04, 0x3c, 0x06, 0xf3, 0xd2, 0x9e, 0xee, 0x36, 0x01, 0xba, 0x61, 0x13, 0x60, 0xd6, 0x93,
	0x64, 0xb7, 0x9b, 0xb6, 0x3e, 0xc6, 0x16, 0x33, 0x2a, 0x1e, 0xd9, 0x91, 0xe4, 0x84, 0xf9, 0xd6,
	0xbb, 0xe8, 0x95, 0xf4, 0x92, 0xda, 0x73, 0x7a, 0x0d, 0xfd, 0xd2, 0x23, 0xc9, 0x9e, 0x37, 0x6b,
	0x42, 0x3e, 0xc1, 0xe8, 0xf9, 0xfd, 0x1f, 0x3d, 0x7a, 0xf4, 0x97, 0x8c, 0x07, 0x70, 0x87, 0x0b,
	0x1c, 0xb4, 0xa2, 0x40, 0x04, 0x0d, 0x16, 0xb4, 0xfc, 0x16, 0xe6, 0x3c, 0x68, 0x60, 0xbe, 0x96,
	0xb2, 0x44, 0x24, 0x95, 0xff, 0x8d, 0x81, 0xe5, 0xbd, 0x23, 0xde, 0xa8, 0x4b, 0x68, 0x3f, 0x87,
	0xbc, 0x24, 0x13, 0x98, 0xd5, 0x08, 0x6d, 0x78, 0x38, 0x8d, 0xdb, 0xf0, 0x09, 0xb0, 0xc2, 0x98,
	0x60, 0x2a, 0x7c, 0x41, 0x5a, 0x98, 0x8b, 0xa0, 0x95, 0xa2, 0x91, 0xe5, 0x91, 0x95, 0x09, 0x6f,
	0x4e, 0x8f, 0xbf, 0x2d, 0x86, 0xe1, 0x0e, 0x58, 0x88, 0x03, 0x81, 0x69, 0xd8, 0xf6, 0xe5, 0x94,
	0x21, 0xa6, 0x02, 0x33, 0x9f, 0x44, 0x1c, 0x5d, 0x59, 0x1e, 0x5d, 0x99, 0x78, 0x79, 0xc5, 0x1a,
	0xf1, 0xe6, 0x73, 0x62, 0xbf, 0x03, 0x1c, 0x46, 0x1c, 0xae, 0x82, 0xb9, 0x42, 0x99, 0x12, 0xda,
	0xf0, 0x5b, 0x1c, 0x8d, 0x2e, 0x8f, 0xae, 0xcc, 0x28, 0xc9, 0x4c, 0x1e, 0x92, 0x35, 0x1d, 0x71,
	0xf8, 0x10, 0xcc, 0xb6, 0x93, 0x8c, 0xf9, 0x69, 0x76, 0x1a, 0x93, 0xd0, 0x27, 0x29, 0x1a, 0x53,
	0xe5, 0x4c, 0xcb, 0xd1, 0x9a, 0x1a, 0x3c, 0x4c, 0xe1, 0x3d, 0x30, 0xc5, 0x31, 0xfb, 0x84, 0x99,
	0x2a, 0x1b, 0x5d, 0x55, 0x08, 0xd0, 0x43, 0xb2, 0x62, 0x78, 0x07, 0x5c, 0x0b, 0x9b, 0x41, 0x1c,
	0x63, 0xda, 0xc0, 0x68, 0x7c, 0x79, 0x64, 0x65, 0xdc, 0xeb, 0x0e, 0xc0, 0x4d, 0xb0, 0xc0, 0x71,
	0x98, 0xd0, 0x88, 0xfb, 0x19, 0x15, 0x24, 0xf6, 0x79, 0x33, 0x13, 0x51, 0xf2, 0x99, 0xa2, 0x89,
	0xe5, 0x91, 0x95, 0x19, 0x6f, 0x3e, 0x8f, 0xbe, 0x93, 0xc1, 0x7a, 0x1e, 0x83, 0x0f, 0xc0, 0x4c,
	0xde, 0xab, 0x30, 0x49, 0xce, 0x09, 0x46, 0x93, 0xba, 0x32, 0x3d, 0xb8, 0xa7, 0xc6, 0xe0, 0x0b,
	0x70, 0x97, 0x87, 0x09, 0x93, 0xcb, 0x4c, 0x31, 0x0d, 0x62, 0xd1, 0xf6, 0x19, 0x8e, 0x83, 0xb6,
	0x1f, 0xc6, 0x19, 0x17, 0x98, 0xa1, 0x6b, 0x6a, 0x86, 0xa5, 0x1c, 0xaa, 0x69, 0xc6, 0x93, 0xc8,
	0x9e, 0x26, 0xe0, 0x07, 0x60, 0x31, 0xb9, 0x4d, 0x3e, 0xbe, 0x08, 0x71, 0x2a, 0x48, 0x42, 0x39,
	0x02, 0xcb, 0xa3, 0x2b, 0x53, 0x8e, 0xbd, 0x76, 0xd9, 0x86, 0xae, 0xa9, 0xcf, 0x07, 0x85, 0xd0,
	0x9b, 0x63, 0x7d, 0x9f, 0xf9, 0xd2, 0x19, 0x98, 0xed, 0x47, 0x64, 0xc7, 0xe5, 0x7e, 0xfa, 0x9d,
	0x0d, 0xcd, 0x0d, 0x30, 0x2d, 0x47, 0xf7, 0xf2, 0x4d, 0x84, 0xf3, 0xe0, 0xea, 0x59, 0x1c, 0x34,
	0xe4, 0x66, 0xcb, 0xfa, 0xf5, 0x07, 0x88, 0xc0, 0x44, 0xbe, 0x4a, 0x34, 0xaa, 0xc6, 0x8b, 0x8f,
	0x95, 0x7f, 0x8f, 0x80, 0xfb, 0xa5, 0x62, 0xeb, 0x98, 0x73, 0x92, 0xd0, 0x3d, 0xd6, 0x4e, 0xc5,
	0x21, 0x3d, 0x4b, 0xe0, 0x09, 0x98, 0x3c, 0xc7, 0x6d, 0x5f, 0xb4, 0x53, 0xac, 0x66, 0x9d, 0x75,
	0x9e, 0xae, 0x5d, 0xaa, 0x5a, 0x3b, 0x78, 0x8d, 0xdb, 0x6f, 0xdb, 0x29, 0xfe, 0xdd, 0xc4, 0xe1,
	0xf1, 0xfb, 0x17, 0x6f, 0x0e, 0xf7, 0xbd, 0x89, 0x73, 0x3d, 0x02, 0x17, 0x75, 0x42, 0x59, 0xba,
	0xaa, 0x74, 0x5a, 0x85, 0x64, 0x26, 0xb9, 0x02, 0x9a, 0xd0, 0x10, 0xab, 0x4a, 0xc7, 0x3d, 0xfd,
	0x01, 0xde, 0x04, 0xe3, 0x84, 0xfb, 0x9c, 0x6a, 0x9f, 0x4d, 0x7a, 0x57, 0x09, 0xaf, 0xd3, 0xb4,
	0xf2, 0x18, 0x4c, 0x16, 0xb3, 0xc0, 0x29, 0x50, 0xcc, 0x63, 0x7d, 0x03, 0x67, 0x01, 0xd8, 0x7b,
	0xe7, 0xbd, 0x3f, 0x70, 0x5c, 0xb7, 0xba, 0x6b, 0x8d, 0x54, 0x3e, 0x80, 0xc7, 0x97, 0x16, 0x5c,
	0x27, 0x0d, 0x8a, 0x23, 0x08, 0xc1, 0x18, 0xa1, 0x67, 0x89, 0x5a, 0xe8, 0xb4, 0xa7, 0x7e, 0x97,
	0x3e, 0xe5, 0xa4, 0x41, 0x03, 0x91, 0x31, 0x9c, 0x17, 0xdc, 0x1d, 0xa8, 0x1c, 0x81, 0xdb, 0xa5,
	0xe4, 0xfb, 0x24, 0x68, 0xd0, 0x84, 0x0b, 0x12, 0xc2, 0x25, 0x30, 0xc9, 0xf1, 0x27, 0xcc, 0x88,
	0x68, 0xab, 0xa4, 0x33, 0x5e, 0xe7, 0xb3, 0x9c, 0x4c, 0xe0, 0x0b, 0xa1, 0x72, 0x5e, 0xf3, 0xd4,
	0xef, 0x95, 0x7f, 0x8e, 0x1a, 0x8a, 0x7d, 0x43, 0xe8, 0xf9, 0x21, 0xe5, 0x22, 0xa0, 0x22, 0xa0,
	0x38, 0xc9, 0x78, 0x5d, 0x04, 0x82, 0xc3, 0x4d, 0x70, 0x2b, 0xc9, 0x84, 0x9f, 0x06, 0xe1, 0x39,
	0x16, 0xdc, 0x4f, 0x31, 0xf3, 0x39, 0x0e, 0xfd, 0x8b, 0xaa, 0x9d, 0x4f, 0x75, 0x23, 0xc9, 0x44,
	0x4d, 0x47, 0x6b, 0x98, 0xd5, 0x71, 0xf8, 0x6b, 0xd5, 0x86, 0x4f, 0xc0, 0x75, 0xa9, 0x3a, 0x6d,
	0x0b, 0xdc, 0xd1, 0xe4, 0x8e, 0x99, 0x4d, 0x32, 0xf1, 0x52, 0x8e, 0x6b, 0x1a, 0x3a, 0x60, 0x81,
	0x50, 0x63, 0x7e, 0xed, 0x24, 0x48, 0x68, 0x29, 0xfd, 0x63, 0x60, 0x11, 0x3a, 0x90, 0x7d, 0x4c,
	0xd1, 0x33, 0x84, 0xf6, 0x26, 0xbf, 0x05, 0x26, 0x8a, 0x9b, 0xe6, 0xaa, 0x8a, 0x8f, 0xa7, 0xfa,
	0x7a, 0x59, 0x03, 0x37, 0x8a, 0x29, 0x23, 0x96, 0xa4, 0x29, 0x8e, 0xfc, 0x34, 0x14, 0xea, 0x86,
	0x98, 0xf1, 0xae, 0xe7, 0xa1, 0x7d, 0x1d, 0xa9, 0x85, 0x02, 0xfe, 0x1e, 0x2c, 0x15, 0xfc, 0x67,
	0x4c, 0x58, 0xe4, 0x73, 0xfc, 0x31, 0xc3, 0x34, 0xc4, 0x4a, 0xa6, 0x6f, 0x8b, 0x5b, 0x39, 0xf1,
	0x8b, 0x04, 0xea, 0x79, 0x5c, 0x8a, 0x57, 0x80, 0x95, 0xe2, 0xe0, 0xdc, 0xff, 0x3b, 0x11, 0xf2,
	0x64, 0x65, 0xb2, 0xdc, 0x49, 0xdd, 0x0c, 0x39, 0xfe, 0x93, 0x1a, 0x7e, 0xc7, 0x71, 0x58, 0xf9,
	0xcf, 0x22, 0xa8, 0x18, 0x77, 0xe6, 0x0d, 0x39, 0xc3, 0xf2, 0x8a, 0xd3, 0x9b, 0x72, 0x1f, 0x4c,
	0x17, 0xd5, 0x70, 0x4c, 0x85, 0xea, 0xd4, 0x98, 0x37, 0x95, 0x8f, 0xd5, 0x31, 0x15, 0x72, 0xe5,
	0xe7, 0xa7, 0x3a, 0x3a, 0xa6, 0xa2, 0xe3, 0xe7, 0xa7, 0x2a, 0xd0, 0xa3, 0x65, 0x38, 0xfc, 0xa4,
	0xfa, 0xd2, 0xd5, 0x7a, 0x38, 0xfc, 0x94, 0x6b, 0x55, 0x74, 0xbc, 0xd0, 0xaa, 0xc0, 0x26, 0x58,
	0xe8, 0xd5, 0x76, 0x9a, 0x10, 0xa9, 0x0e, 0x8c, 0x79, 0xf3, 0x3d, 0x59, 0x8a, 0x06, 0x44, 0xd0,
	0x06, 0xf3, 0x7d, 0xaa, 0xbc, 0xe1, 0xaa, 0x05, 0x63, 0x1e, 0xec, 0xd1, 0xe4, 0x0d, 0x87, 0x3b,
	0x60, 0xb1, 0x4f, 0x21, 0xbd, 0x94, 0x9c, 0xf9, 0x09, 0x8b, 0xf2, 0x8b, 0x73, 0xcc, 0xbb, 0xd9,
	0x23, 0x3b, 0xc9, 0xc4, 0xc9, 0xd9, 0x89, 0x0c, 0x96, 0x2a, 0x8c, 0xb2, 0x34, 0x26, 0x61, 0x20,
	0x30, 0x02, 0xa5, 0x0a, 0xf7, 0x8b, 0x18, 0x7c, 0x06, 0x60, 0x9f, 0x2a, 0xce, 0x58, 0xd8, 0x44,
	0x53, 0x4a, 0x61, 0xf5, 0x28, 0xde, 0xc8, 0x71, 0xe8, 0x80, 0x9b, 0x1f, 0xb3, 0x20, 0x26, 0xa2,
	0xed, 0x37, 0x09, 0x17, 0x89, 0x7a, 0xe8, 0x56, 0x6d, 0x1b, 0xdd, 0xd4, 0x07, 0x22, 0x0f, 0xbe,
	0x2a, 0x62, 0x55, 0xdb, 0x96, 0x3d, 0x28, 0x6b, 0x76, 0x77, 0xd1, 0x82, 0xf6, 0xf8, 0xa0, 0x64,
	0x77, 0x77, 0x88, 0x62, 0x1b, 0xdd, 0x1a, 0xa2, 0xd8, 0x1e, 0xa2, 0x70, 0x11, 0x1a, 0xa2, 0x70,
	0x87, 0x28, 0x6c, 0xb4, 0x38, 0x44, 0x31, 0x64, 0x1d, 0xdb, 0x2e, 0x5a, 0x32, 0x2b, 0xb6, 0x87,
	0xcc, 0xe1, 0xda, 0xe8, 0xb6, 0x59, 0xe1, 0xda, 0xf2, 0x6c, 0x1a, 0xfa, 0x8b, 0xee, 0xe8, 0xb3,
	0x59, 0xea, 0xae, 0xdc, 0xf3, 0x32, 0x1f, 0xe1, 0x20, 0x42, 0x77, 0xf5, 0x53, 0x7c, 0x50, 0xb2,
	0x8f, 0x83, 0x08, 0xae, 0x82, 0x22, 0x95, 0x2f, 0x9f, 0xee, 0xd8, 0x77, 0x68, 0x84, 0xbe, 0x55,
	0x82, 0xb9, 0x3c, 0x70, 0x2c, 0xc7, 0x1d, 0x6a, 0x60, 0x5d, 0xd1, 0x44, 0xf7, 0xca, 0xac, 0x2b,
	0x9a, 0xd2, 0x4b, 0x03, 0x79, 0x25, 0xbc, 0xac, 0x60, 0xab, 0x2f, 0xb1, 0x91, 0x76, 0x6d, 0xd1,
	0x44, 0xf7, 0xcb, 0xb4, 0x1c, 0x97, 0x75, 0xa8, 0xeb, 0xac, 0xbb, 0x4c, 0xc7, 0x45, 0x4f, 0x74,
	0x1d, 0x32, 0xd0, 0x59, 0xa1, 0xe3, 0x1a, 0x58, 0xd7, 0x46, 0xab, 0x06, 0xd6, 0xb5, 0x0d, 0xec,
	0xb6, 0x8b, 0x9e, 0x1a, 0xd8, 0x6d, 0x57, 0x9d, 0x95, 0x7e, 0x56, 0x5a, 0xff, 0x99, 0xae, 0xb8,
	0x0f, 0x96, 0xbe, 0x37, 0xd0, 0x8e, 0x8b, 0x9e, 0x9b, 0x68, 0xc7, 0x98, 0xdb, 0xb5, 0xd1, 0x9a,
	0x89, 0x76, 0x4d, 0xb9, 0x1d, 0xdb, 0x46, 0xeb, 0x06, 0xda, 0x31, 0x56, 0xb2, 0x61, 0xdb, 0xc8,
	0x36, 0xd0, 0x1b, 0x46, 0xba, 0x15, 0x5c, 0xa0, 0xaa, 0x81, 0x3e, 0x0a, 0x2e, 0xe4, 0x9f, 0x4e,
	0x8a, 0xee, 0x9a, 0xc3, 0x51, 0xe4, 0xb4, 0x1c, 0xed, 0x38, 0xe3, 0x11, 0x98, 0xeb, 0xa5, 0xe4,
	0x46, 0x6f, 0xe8, 0x87, 0x56, 0x17, 0xb3, 0x4b, 0xdc, 0xb6, 0x4c, 0xb7, 0x39, 0xc0, 0x6d, 0x97,
	0xf3, 0xed, 0x4a, 0xce, 0x1d, 0xe0, 0x76, 0x0d, 0xdc, 0x8e, 0x68, 0xa2, 0xad, 0x41, 0x6e, 0x47,
	0x34, 0xe1, 0xf7, 0xe0, 0x76, 0xfe, 0x84, 0xea, 0xae, 0x9a, 0xe2, 0x46, 0x4c, 0x1a, 0xe4, 0x34,
	0xc6, 0xe8, 0x0f, 0x4a, 0xb3, 0xa8, 0x91, 0xce, 0xf2, 0x8f, 0x3b, 0x80, 0xec, 0x59, 0x49, 0x5f,
	0x45, 0xdf, 0xeb, 0x9e, 0x0d, 0xc8, 0xaa, 0x46, 0xda, 0x41, 0x3f, 0x18, 0x69, 0xc7, 0x48, 0xbb,
	0xe8, 0x8f, 0x46, 0xda, 0x95, 0x37, 0x48, 0xb9, 0x12, 0x1b, 0xbd, 0xd0, 0x37, 0xc8, 0x60, 0x29,
	0xb6, 0x91, 0x77, 0x6c, 0xf4, 0xd2, 0xc8, 0x3b, 0xb6, 0x7c, 0xed, 0x10, 0x17, 0x3c, 0xc5, 0x38,
	0x52, 0xb6, 0xd8, 0x53, 0x1c, 0xc8, 0x87, 0xa4, 0x21, 0x6c, 0x30, 0x5f, 0x00, 0x3d, 0x15, 0x6c,
	0xa1, 0x7d, 0x7d, 0xe9, 0xe5, 0xb1, 0x6e, 0x09, 0x5b, 0x66, 0xc5, 0x86, 0x83, 0x0e, 0xcc, 0x8a,
	0x0d, 0xc7, 0xac, 0xd8, 0xda, 0x44, 0x7f, 0x32, 0x2b, 0xb6, 0x36, 0xe5, 0x83, 0xcb, 0x50, 0x95,
	0xb3, 0x83, 0x7e, 0xd4, 0x0f, 0xae, 0x52, 0x59, 0xce, 0x8e, 0x59, 0xe3, 0xb8, 0x5b, 0xe8, 0x95,
	0x59, 0xe3, 0xb8, 0x5b, 0x66, 0x8d, 0x5b, 0x75, 0xd0, 0xa1, 0x59, 0xe3, 0x56, 0x1d, 0x79, 0x89,
	0x1b, 0x6a, 0xb3, 0x9d, 0x4d, 0xf4, 0x93, 0xbe, 0xc4, 0x4b, 0xc5, 0xd9, 0xce, 0x90, 0x15, 0xc9,
	0x2d, 0x79, 0x6d, 0x9e, 0x49, 0xee, 0xcd, 0x2a, 0xb8, 0x5e, 0x68, 0xba, 0xe7, 0xf5, 0x8d, 0xbe,
	0xec, 0xf2, 0x40, 0xef, 0x65, 0x3e, 0xc0, 0xca, 0x53, 0x7b, 0xa4, 0x6d, 0xd7, 0x07, 0xdb, 0x26,
	0x5a, 0x9d, 0xdd, 0xe3, 0x32, 0xbd, 0x6d, 0xcc, 0xad, 0x4e, 0xf0, 0x49, 0x99, 0xde, 0x35, 0xd3,
	0xf2, 0x1c, 0xd7, 0x0c, 0xb4, 0x3c, 0xca, 0xf7, 0xc0, 0x14, 0xeb, 0x31, 0xe8, 0xcf, 0xda, 0xa0,
	0xac, 0xcf, 0xa0, 0xcc, 0x64, 0x50, 0x4f, 0x9b, 0x87, 0x19, 0x0d, 0xca, 0x4c, 0x06, 0xad, 0x9b,
	0x15, 0xda, 0xa0, 0xcc, 0x64, 0xd0, 0xb7, 0x66, 0x85, 0x36, 0x28, 0x33, 0x1a, 0xf4, 0x9d, 0xde,
	0x4e, 0x66, 0x36, 0x28, 0x33, 0x1a, 0xf4, 0xbd, 0x59, 0x93, 0x1b, 0x94, 0x19, 0x0d, 0xfa, 0x8b,
	0x59, 0x93, 0x1b, 0x94, 0x99, 0x0d, 0xfa, 0xab, 0x36, 0x28, 0x1b, 0x62, 0x50, 0x66, 0x34, 0xe8,
	0x9f, 0xcd, 0x33, 0xe5, 0x06, 0x65, 0x25, 0x83, 0xfe, 0xa6, 0x0d, 0xca, 0xca, 0x06, 0x65, 0x65,
	0x83, 0x7e, 0xd0, 0xb6, 0x60, 0x06, 0x83, 0xb2, 0xb2, 0x41, 0xff, 0x52, 0xa6, 0xb7, 0x8d, 0xb9,
	0x95, 0x41, 0xff, 0x5a, 0xa6, 0x77, 0xcd, 0xb4, 0x34, 0xe8, 0xdf, 0x0c, 0xf4, 0x8e, 0x68, 0x56,
	0xfe, 0x35, 0x62, 0x78, 0xd1, 0xd9, 0x4b, 0x28, 0xc5, 0xa1, 0x20, 0x09, 0xfd, 0x59, 0xff, 0xe5,
	0x03, 0x8f, 0xc1, 0x0c, 0xe9, 0x7d, 0x27, 0x55, 0xef, 0x9c, 0x53, 0xce, 0xca, 0xda, 0x57, 0xbe,
	0xbe, 0x7a, 0xfd, 0x72, 0xf8, 0x03, 0x98, 0x8c, 0xf3, 0x37, 0x29, 0xf5, 0x3a, 0x3a, 0xe5, 0x3c,
	0x58, 0xbb, 0xfc, 0x7d, 0xcb, 0xeb, 0x88, 0x56, 0xff, 0x7b, 0x0d, 0xdc, 0x38, 0xe8, 0xa3, 0x8f,
	0x78, 0xe3, 0x70, 0x1f, 0xde, 0x03, 0xb7, 0xcf, 0xfd, 0x52, 0xc0, 0x3f, 0xa4, 0x9f, 0x82, 0x98,
	0x44, 0xd6, 0x37, 0xf0, 0x09, 0xf8, 0xce, 0x04, 0xf4, 0x7e, 0x6d, 0xf3, 0x31, 0xc3, 0x5c, 0x58,
	0x23, 0xf0, 0x31, 0x78, 0x70, 0x19, 0x9a, 0xc6, 0x6d, 0xeb, 0x0a, 0x7c, 0x0e, 0x9e, 0x98, 0xc0,
	0x1f, 0x83, 0x16, 0xd6, 0x5f, 0x81, 0xf5, 0xe6, 0x1d, 0x85, 0x4f, 0xc1, 0xe3, 0xaf, 0xc1, 0x65,
	0xee, 0x31, 0x68, 0x83, 0x67, 0x5f, 0x86, 0xf3, 0x2f, 0x37, 0x8a, 0xf4, 0x57, 0xe1, 0x26, 0xb0,
	0xbf, 0x4a, 0x71, 0xc0, 0x45, 0x70, 0x1a, 0x13, 0xde, 0xc4, 0x91, 0x35, 0x0e, 0xef, 0x83, 0xbb,
	0x26, 0xd5, 0x71, 0x92, 0xd3, 0xd6, 0x04, 0xac, 0x80, 0x6f, 0x4d, 0x48, 0xf7, 0x0b, 0x10, 0x6b,
	0x12, 0xae, 0x82, 0x47, 0x46, 0x26, 0x10, 0xc1, 0x9e, 0xfe, 0xfe, 0x32, 0xd1, 0xfd, 0xb3, 0xae,
	0x7d, 0x89, 0xd5, 0xcc, 0xdb, 0xa4, 0xae, 0x0a, 0xb6, 0xc0, 0x97, 0x58, 0xcd, 0x74, 0xf2, 0x4e,
	0x7d, 0x4d, 0x5e, 0x5d, 0x8b, 0x35, 0x0d, 0xef, 0x82, 0x45, 0x13, 0xab, 0xec, 0x66, 0xcd, 0xc0,
	0x75, 0xf0, 0xd4, 0x14, 0xd6, 0x72, 0xb9, 0x4d, 0xf5, 0xa0, 0x95, 0xc6, 0xb8, 0x68, 0xfe, 0xec,
	0x30, 0x2b, 0x94, 0x05, 0x72, 0x77, 0xe7, 0xa0, 0x0b, 0xaa, 0xc3, 0xf1, 0x62, 0x49, 0xf5, 0xcf,
	0x44, 0x84, 0x4d, 0x1c, 0xd5, 0x18, 0x69, 0x05, 0xac, 0x6d, 0x59, 0xf0, 0x01, 0xb8, 0x67, 0x74,
	0x26, 0x8e, 0x83, 0xf6, 0x2b, 0x1c, 0xc4, 0xa2, 0x69, 0x5d, 0x87, 0x8f, 0x40, 0xc5, 0x98, 0x5b,
	0x1f, 0xee, 0xa2, 0x64, 0x38, 0x6c, 0xe7, 0x73, 0xee, 0xe4, 0xb5, 0x75, 0x03, 0xae, 0x80, 0x87,
	0x5f, 0x40, 0x48, 0x42, 0xf7, 0xe2, 0x84, 0xe3, 0xc8, 0x9a, 0x87, 0x0f, 0xc1, 0xb2, 0xd9, 0x46,
	0x5d, 0xd6, 0xba, 0x39, 0xac, 0xad, 0xaa, 0xfe, 0xb7, 0x89, 0xfa, 0xd1, 0x7b, 0x64, 0x16, 0x86,
	0xb5, 0xb5, 0x2c, 0x90, 0x6d, 0xbd, 0x35, 0xec, 0x90, 0xd7, 0x9c, 0xda, 0xc0, 0x69, 0x41, 0xc3,
	0x32, 0x77, 0xd1, 0xde, 0x63, 0xb2, 0x38, 0xac, 0xa9, 0x12, 0x97, 0x96, 0xc9, 0x7d, 0xb5, 0x04,
	0xbf, 0x03, 0xf7, 0xbf, 0xc4, 0xa9, 0x8a, 0xad, 0xdb, 0xc3, 0x36, 0xb2, 0xe6, 0xd4, 0x5e, 0x06,
	0x91, 0xda, 0x7d, 0xeb, 0xce, 0x4b, 0xf7, 0x37, 0xbb, 0x41, 0x44, 0x33, 0x3b, 0x5d, 0x0b, 0x93,
	0xd6, 0x7a, 0x75, 0xe3, 0x7c, 0xbd, 0x91, 0x3c, 0x57, 0xff, 0x6a, 0x78, 0xce, 0x30, 0x4f, 0x32,
	0x16, 0x62, 0xbe, 0xae, 0xfe, 0xc7, 0x70, 0x9a, 0x9d, 0xad, 0x47, 0x89, 0x08, 0x9c, 0x7f, 0x8c,
	0x7c, 0xf3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0xf3, 0xdb, 0x28, 0x8e, 0x18, 0x00, 0x00,
}
