// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: csgo/econ_gcmessages.proto

package csgo

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCItemMsg int32

const (
	EGCItemMsg_k_EMsgGCBase                                 EGCItemMsg = 1000
	EGCItemMsg_k_EMsgGCSetItemPosition                      EGCItemMsg = 1001
	EGCItemMsg_k_EMsgGCCraft                                EGCItemMsg = 1002
	EGCItemMsg_k_EMsgGCCraftResponse                        EGCItemMsg = 1003
	EGCItemMsg_k_EMsgGCDelete                               EGCItemMsg = 1004
	EGCItemMsg_k_EMsgGCVerifyCacheSubscription              EGCItemMsg = 1005
	EGCItemMsg_k_EMsgGCNameItem                             EGCItemMsg = 1006
	EGCItemMsg_k_EMsgGCUnlockCrate                          EGCItemMsg = 1007
	EGCItemMsg_k_EMsgGCUnlockCrateResponse                  EGCItemMsg = 1008
	EGCItemMsg_k_EMsgGCPaintItem                            EGCItemMsg = 1009
	EGCItemMsg_k_EMsgGCPaintItemResponse                    EGCItemMsg = 1010
	EGCItemMsg_k_EMsgGCGoldenWrenchBroadcast                EGCItemMsg = 1011
	EGCItemMsg_k_EMsgGCMOTDRequest                          EGCItemMsg = 1012
	EGCItemMsg_k_EMsgGCMOTDRequestResponse                  EGCItemMsg = 1013
	EGCItemMsg_k_EMsgGCAddItemToSocket_DEPRECATED           EGCItemMsg = 1014
	EGCItemMsg_k_EMsgGCAddItemToSocketResponse_DEPRECATED   EGCItemMsg = 1015
	EGCItemMsg_k_EMsgGCAddSocketToBaseItem_DEPRECATED       EGCItemMsg = 1016
	EGCItemMsg_k_EMsgGCAddSocketToItem_DEPRECATED           EGCItemMsg = 1017
	EGCItemMsg_k_EMsgGCAddSocketToItemResponse_DEPRECATED   EGCItemMsg = 1018
	EGCItemMsg_k_EMsgGCNameBaseItem                         EGCItemMsg = 1019
	EGCItemMsg_k_EMsgGCNameBaseItemResponse                 EGCItemMsg = 1020
	EGCItemMsg_k_EMsgGCRemoveSocketItem_DEPRECATED          EGCItemMsg = 1021
	EGCItemMsg_k_EMsgGCRemoveSocketItemResponse_DEPRECATED  EGCItemMsg = 1022
	EGCItemMsg_k_EMsgGCCustomizeItemTexture                 EGCItemMsg = 1023
	EGCItemMsg_k_EMsgGCCustomizeItemTextureResponse         EGCItemMsg = 1024
	EGCItemMsg_k_EMsgGCUseItemRequest                       EGCItemMsg = 1025
	EGCItemMsg_k_EMsgGCUseItemResponse                      EGCItemMsg = 1026
	EGCItemMsg_k_EMsgGCGiftedItems_DEPRECATED               EGCItemMsg = 1027
	EGCItemMsg_k_EMsgGCRemoveItemName                       EGCItemMsg = 1030
	EGCItemMsg_k_EMsgGCRemoveItemPaint                      EGCItemMsg = 1031
	EGCItemMsg_k_EMsgGCGiftWrapItem                         EGCItemMsg = 1032
	EGCItemMsg_k_EMsgGCGiftWrapItemResponse                 EGCItemMsg = 1033
	EGCItemMsg_k_EMsgGCDeliverGift                          EGCItemMsg = 1034
	EGCItemMsg_k_EMsgGCDeliverGiftResponseGiver             EGCItemMsg = 1035
	EGCItemMsg_k_EMsgGCDeliverGiftResponseReceiver          EGCItemMsg = 1036
	EGCItemMsg_k_EMsgGCUnwrapGiftRequest                    EGCItemMsg = 1037
	EGCItemMsg_k_EMsgGCUnwrapGiftResponse                   EGCItemMsg = 1038
	EGCItemMsg_k_EMsgGCSetItemStyle                         EGCItemMsg = 1039
	EGCItemMsg_k_EMsgGCUsedClaimCodeItem                    EGCItemMsg = 1040
	EGCItemMsg_k_EMsgGCSortItems                            EGCItemMsg = 1041
	EGCItemMsg_k_EMsgGC_RevolvingLootList_DEPRECATED        EGCItemMsg = 1042
	EGCItemMsg_k_EMsgGCLookupAccount                        EGCItemMsg = 1043
	EGCItemMsg_k_EMsgGCLookupAccountResponse                EGCItemMsg = 1044
	EGCItemMsg_k_EMsgGCLookupAccountName                    EGCItemMsg = 1045
	EGCItemMsg_k_EMsgGCLookupAccountNameResponse            EGCItemMsg = 1046
	EGCItemMsg_k_EMsgGCUpdateItemSchema                     EGCItemMsg = 1049
	EGCItemMsg_k_EMsgGCRemoveCustomTexture                  EGCItemMsg = 1051
	EGCItemMsg_k_EMsgGCRemoveCustomTextureResponse          EGCItemMsg = 1052
	EGCItemMsg_k_EMsgGCRemoveMakersMark                     EGCItemMsg = 1053
	EGCItemMsg_k_EMsgGCRemoveMakersMarkResponse             EGCItemMsg = 1054
	EGCItemMsg_k_EMsgGCRemoveUniqueCraftIndex               EGCItemMsg = 1055
	EGCItemMsg_k_EMsgGCRemoveUniqueCraftIndexResponse       EGCItemMsg = 1056
	EGCItemMsg_k_EMsgGCSaxxyBroadcast                       EGCItemMsg = 1057
	EGCItemMsg_k_EMsgGCBackpackSortFinished                 EGCItemMsg = 1058
	EGCItemMsg_k_EMsgGCAdjustItemEquippedState              EGCItemMsg = 1059
	EGCItemMsg_k_EMsgGCCollectItem                          EGCItemMsg = 1061
	EGCItemMsg_k_EMsgGCItemAcknowledged__DEPRECATED         EGCItemMsg = 1062
	EGCItemMsg_k_EMsgGC_ReportAbuse                         EGCItemMsg = 1065
	EGCItemMsg_k_EMsgGC_ReportAbuseResponse                 EGCItemMsg = 1066
	EGCItemMsg_k_EMsgGCNameItemNotification                 EGCItemMsg = 1068
	EGCItemMsg_k_EMsgGCApplyConsumableEffects               EGCItemMsg = 1069
	EGCItemMsg_k_EMsgGCConsumableExhausted                  EGCItemMsg = 1070
	EGCItemMsg_k_EMsgGCShowItemsPickedUp                    EGCItemMsg = 1071
	EGCItemMsg_k_EMsgGCClientDisplayNotification            EGCItemMsg = 1072
	EGCItemMsg_k_EMsgGCApplyStrangePart                     EGCItemMsg = 1073
	EGCItemMsg_k_EMsgGC_IncrementKillCountAttribute         EGCItemMsg = 1074
	EGCItemMsg_k_EMsgGC_IncrementKillCountResponse          EGCItemMsg = 1075
	EGCItemMsg_k_EMsgGCApplyPennantUpgrade                  EGCItemMsg = 1076
	EGCItemMsg_k_EMsgGCSetItemPositions                     EGCItemMsg = 1077
	EGCItemMsg_k_EMsgGCApplyEggEssence                      EGCItemMsg = 1078
	EGCItemMsg_k_EMsgGCNameEggEssenceResponse               EGCItemMsg = 1079
	EGCItemMsg_k_EMsgGCPaintKitItem                         EGCItemMsg = 1080
	EGCItemMsg_k_EMsgGCPaintKitBaseItem                     EGCItemMsg = 1081
	EGCItemMsg_k_EMsgGCPaintKitItemResponse                 EGCItemMsg = 1082
	EGCItemMsg_k_EMsgGCGiftedItems                          EGCItemMsg = 1083
	EGCItemMsg_k_EMsgGCUnlockItemStyle                      EGCItemMsg = 1084
	EGCItemMsg_k_EMsgGCUnlockItemStyleResponse              EGCItemMsg = 1085
	EGCItemMsg_k_EMsgGCApplySticker                         EGCItemMsg = 1086
	EGCItemMsg_k_EMsgGCItemAcknowledged                     EGCItemMsg = 1087
	EGCItemMsg_k_EMsgGCStatTrakSwap                         EGCItemMsg = 1088
	EGCItemMsg_k_EMsgGCUserTrackTimePlayedConsecutively     EGCItemMsg = 1089
	EGCItemMsg_k_EMsgGCItemCustomizationNotification        EGCItemMsg = 1090
	EGCItemMsg_k_EMsgGCModifyItemAttribute                  EGCItemMsg = 1091
	EGCItemMsg_k_EMsgGCCasketItemAdd                        EGCItemMsg = 1092
	EGCItemMsg_k_EMsgGCCasketItemExtract                    EGCItemMsg = 1093
	EGCItemMsg_k_EMsgGCCasketItemLoadContents               EGCItemMsg = 1094
	EGCItemMsg_k_EMsgGCTradingBase                          EGCItemMsg = 1500
	EGCItemMsg_k_EMsgGCTrading_InitiateTradeRequest         EGCItemMsg = 1501
	EGCItemMsg_k_EMsgGCTrading_InitiateTradeResponse        EGCItemMsg = 1502
	EGCItemMsg_k_EMsgGCTrading_StartSession                 EGCItemMsg = 1503
	EGCItemMsg_k_EMsgGCTrading_SetItem                      EGCItemMsg = 1504
	EGCItemMsg_k_EMsgGCTrading_RemoveItem                   EGCItemMsg = 1505
	EGCItemMsg_k_EMsgGCTrading_UpdateTradeInfo              EGCItemMsg = 1506
	EGCItemMsg_k_EMsgGCTrading_SetReadiness                 EGCItemMsg = 1507
	EGCItemMsg_k_EMsgGCTrading_ReadinessResponse            EGCItemMsg = 1508
	EGCItemMsg_k_EMsgGCTrading_SessionClosed                EGCItemMsg = 1509
	EGCItemMsg_k_EMsgGCTrading_CancelSession                EGCItemMsg = 1510
	EGCItemMsg_k_EMsgGCTrading_TradeChatMsg                 EGCItemMsg = 1511
	EGCItemMsg_k_EMsgGCTrading_ConfirmOffer                 EGCItemMsg = 1512
	EGCItemMsg_k_EMsgGCTrading_TradeTypingChatMsg           EGCItemMsg = 1513
	EGCItemMsg_k_EMsgGCServerBrowser_FavoriteServer         EGCItemMsg = 1601
	EGCItemMsg_k_EMsgGCServerBrowser_BlacklistServer        EGCItemMsg = 1602
	EGCItemMsg_k_EMsgGCServerRentalsBase                    EGCItemMsg = 1700
	EGCItemMsg_k_EMsgGCItemPreviewCheckStatus               EGCItemMsg = 1701
	EGCItemMsg_k_EMsgGCItemPreviewStatusResponse            EGCItemMsg = 1702
	EGCItemMsg_k_EMsgGCItemPreviewRequest                   EGCItemMsg = 1703
	EGCItemMsg_k_EMsgGCItemPreviewRequestResponse           EGCItemMsg = 1704
	EGCItemMsg_k_EMsgGCItemPreviewExpire                    EGCItemMsg = 1705
	EGCItemMsg_k_EMsgGCItemPreviewExpireNotification        EGCItemMsg = 1706
	EGCItemMsg_k_EMsgGCItemPreviewItemBoughtNotification    EGCItemMsg = 1707
	EGCItemMsg_k_EMsgGCDev_NewItemRequest                   EGCItemMsg = 2001
	EGCItemMsg_k_EMsgGCDev_NewItemRequestResponse           EGCItemMsg = 2002
	EGCItemMsg_k_EMsgGCDev_PaintKitDropItem                 EGCItemMsg = 2003
	EGCItemMsg_k_EMsgGCStoreGetUserData                     EGCItemMsg = 2500
	EGCItemMsg_k_EMsgGCStoreGetUserDataResponse             EGCItemMsg = 2501
	EGCItemMsg_k_EMsgGCStorePurchaseInit_DEPRECATED         EGCItemMsg = 2502
	EGCItemMsg_k_EMsgGCStorePurchaseInitResponse_DEPRECATED EGCItemMsg = 2503
	EGCItemMsg_k_EMsgGCStorePurchaseFinalize                EGCItemMsg = 2504
	EGCItemMsg_k_EMsgGCStorePurchaseFinalizeResponse        EGCItemMsg = 2505
	EGCItemMsg_k_EMsgGCStorePurchaseCancel                  EGCItemMsg = 2506
	EGCItemMsg_k_EMsgGCStorePurchaseCancelResponse          EGCItemMsg = 2507
	EGCItemMsg_k_EMsgGCStorePurchaseQueryTxn                EGCItemMsg = 2508
	EGCItemMsg_k_EMsgGCStorePurchaseQueryTxnResponse        EGCItemMsg = 2509
	EGCItemMsg_k_EMsgGCStorePurchaseInit                    EGCItemMsg = 2510
	EGCItemMsg_k_EMsgGCStorePurchaseInitResponse            EGCItemMsg = 2511
	EGCItemMsg_k_EMsgGCBannedWordListRequest                EGCItemMsg = 2512
	EGCItemMsg_k_EMsgGCBannedWordListResponse               EGCItemMsg = 2513
	EGCItemMsg_k_EMsgGCToGCBannedWordListBroadcast          EGCItemMsg = 2514
	EGCItemMsg_k_EMsgGCToGCBannedWordListUpdated            EGCItemMsg = 2515
	EGCItemMsg_k_EMsgGCToGCDirtySDOCache                    EGCItemMsg = 2516
	EGCItemMsg_k_EMsgGCToGCDirtyMultipleSDOCache            EGCItemMsg = 2517
	EGCItemMsg_k_EMsgGCToGCUpdateSQLKeyValue                EGCItemMsg = 2518
	EGCItemMsg_k_EMsgGCToGCIsTrustedServer                  EGCItemMsg = 2519
	EGCItemMsg_k_EMsgGCToGCIsTrustedServerResponse          EGCItemMsg = 2520
	EGCItemMsg_k_EMsgGCToGCBroadcastConsoleCommand          EGCItemMsg = 2521
	EGCItemMsg_k_EMsgGCServerVersionUpdated                 EGCItemMsg = 2522
	EGCItemMsg_k_EMsgGCApplyAutograph                       EGCItemMsg = 2523
	EGCItemMsg_k_EMsgGCToGCWebAPIAccountChanged             EGCItemMsg = 2524
	EGCItemMsg_k_EMsgGCRequestAnnouncements                 EGCItemMsg = 2525
	EGCItemMsg_k_EMsgGCRequestAnnouncementsResponse         EGCItemMsg = 2526
	EGCItemMsg_k_EMsgGCRequestPassportItemGrant             EGCItemMsg = 2527
	EGCItemMsg_k_EMsgGCClientVersionUpdated                 EGCItemMsg = 2528
	EGCItemMsg_k_EMsgGCAdjustItemEquippedStateMulti         EGCItemMsg = 2529
)

// Enum value maps for EGCItemMsg.
var (
	EGCItemMsg_name = map[int32]string{
		1000: "k_EMsgGCBase",
		1001: "k_EMsgGCSetItemPosition",
		1002: "k_EMsgGCCraft",
		1003: "k_EMsgGCCraftResponse",
		1004: "k_EMsgGCDelete",
		1005: "k_EMsgGCVerifyCacheSubscription",
		1006: "k_EMsgGCNameItem",
		1007: "k_EMsgGCUnlockCrate",
		1008: "k_EMsgGCUnlockCrateResponse",
		1009: "k_EMsgGCPaintItem",
		1010: "k_EMsgGCPaintItemResponse",
		1011: "k_EMsgGCGoldenWrenchBroadcast",
		1012: "k_EMsgGCMOTDRequest",
		1013: "k_EMsgGCMOTDRequestResponse",
		1014: "k_EMsgGCAddItemToSocket_DEPRECATED",
		1015: "k_EMsgGCAddItemToSocketResponse_DEPRECATED",
		1016: "k_EMsgGCAddSocketToBaseItem_DEPRECATED",
		1017: "k_EMsgGCAddSocketToItem_DEPRECATED",
		1018: "k_EMsgGCAddSocketToItemResponse_DEPRECATED",
		1019: "k_EMsgGCNameBaseItem",
		1020: "k_EMsgGCNameBaseItemResponse",
		1021: "k_EMsgGCRemoveSocketItem_DEPRECATED",
		1022: "k_EMsgGCRemoveSocketItemResponse_DEPRECATED",
		1023: "k_EMsgGCCustomizeItemTexture",
		1024: "k_EMsgGCCustomizeItemTextureResponse",
		1025: "k_EMsgGCUseItemRequest",
		1026: "k_EMsgGCUseItemResponse",
		1027: "k_EMsgGCGiftedItems_DEPRECATED",
		1030: "k_EMsgGCRemoveItemName",
		1031: "k_EMsgGCRemoveItemPaint",
		1032: "k_EMsgGCGiftWrapItem",
		1033: "k_EMsgGCGiftWrapItemResponse",
		1034: "k_EMsgGCDeliverGift",
		1035: "k_EMsgGCDeliverGiftResponseGiver",
		1036: "k_EMsgGCDeliverGiftResponseReceiver",
		1037: "k_EMsgGCUnwrapGiftRequest",
		1038: "k_EMsgGCUnwrapGiftResponse",
		1039: "k_EMsgGCSetItemStyle",
		1040: "k_EMsgGCUsedClaimCodeItem",
		1041: "k_EMsgGCSortItems",
		1042: "k_EMsgGC_RevolvingLootList_DEPRECATED",
		1043: "k_EMsgGCLookupAccount",
		1044: "k_EMsgGCLookupAccountResponse",
		1045: "k_EMsgGCLookupAccountName",
		1046: "k_EMsgGCLookupAccountNameResponse",
		1049: "k_EMsgGCUpdateItemSchema",
		1051: "k_EMsgGCRemoveCustomTexture",
		1052: "k_EMsgGCRemoveCustomTextureResponse",
		1053: "k_EMsgGCRemoveMakersMark",
		1054: "k_EMsgGCRemoveMakersMarkResponse",
		1055: "k_EMsgGCRemoveUniqueCraftIndex",
		1056: "k_EMsgGCRemoveUniqueCraftIndexResponse",
		1057: "k_EMsgGCSaxxyBroadcast",
		1058: "k_EMsgGCBackpackSortFinished",
		1059: "k_EMsgGCAdjustItemEquippedState",
		1061: "k_EMsgGCCollectItem",
		1062: "k_EMsgGCItemAcknowledged__DEPRECATED",
		1065: "k_EMsgGC_ReportAbuse",
		1066: "k_EMsgGC_ReportAbuseResponse",
		1068: "k_EMsgGCNameItemNotification",
		1069: "k_EMsgGCApplyConsumableEffects",
		1070: "k_EMsgGCConsumableExhausted",
		1071: "k_EMsgGCShowItemsPickedUp",
		1072: "k_EMsgGCClientDisplayNotification",
		1073: "k_EMsgGCApplyStrangePart",
		1074: "k_EMsgGC_IncrementKillCountAttribute",
		1075: "k_EMsgGC_IncrementKillCountResponse",
		1076: "k_EMsgGCApplyPennantUpgrade",
		1077: "k_EMsgGCSetItemPositions",
		1078: "k_EMsgGCApplyEggEssence",
		1079: "k_EMsgGCNameEggEssenceResponse",
		1080: "k_EMsgGCPaintKitItem",
		1081: "k_EMsgGCPaintKitBaseItem",
		1082: "k_EMsgGCPaintKitItemResponse",
		1083: "k_EMsgGCGiftedItems",
		1084: "k_EMsgGCUnlockItemStyle",
		1085: "k_EMsgGCUnlockItemStyleResponse",
		1086: "k_EMsgGCApplySticker",
		1087: "k_EMsgGCItemAcknowledged",
		1088: "k_EMsgGCStatTrakSwap",
		1089: "k_EMsgGCUserTrackTimePlayedConsecutively",
		1090: "k_EMsgGCItemCustomizationNotification",
		1091: "k_EMsgGCModifyItemAttribute",
		1092: "k_EMsgGCCasketItemAdd",
		1093: "k_EMsgGCCasketItemExtract",
		1094: "k_EMsgGCCasketItemLoadContents",
		1500: "k_EMsgGCTradingBase",
		1501: "k_EMsgGCTrading_InitiateTradeRequest",
		1502: "k_EMsgGCTrading_InitiateTradeResponse",
		1503: "k_EMsgGCTrading_StartSession",
		1504: "k_EMsgGCTrading_SetItem",
		1505: "k_EMsgGCTrading_RemoveItem",
		1506: "k_EMsgGCTrading_UpdateTradeInfo",
		1507: "k_EMsgGCTrading_SetReadiness",
		1508: "k_EMsgGCTrading_ReadinessResponse",
		1509: "k_EMsgGCTrading_SessionClosed",
		1510: "k_EMsgGCTrading_CancelSession",
		1511: "k_EMsgGCTrading_TradeChatMsg",
		1512: "k_EMsgGCTrading_ConfirmOffer",
		1513: "k_EMsgGCTrading_TradeTypingChatMsg",
		1601: "k_EMsgGCServerBrowser_FavoriteServer",
		1602: "k_EMsgGCServerBrowser_BlacklistServer",
		1700: "k_EMsgGCServerRentalsBase",
		1701: "k_EMsgGCItemPreviewCheckStatus",
		1702: "k_EMsgGCItemPreviewStatusResponse",
		1703: "k_EMsgGCItemPreviewRequest",
		1704: "k_EMsgGCItemPreviewRequestResponse",
		1705: "k_EMsgGCItemPreviewExpire",
		1706: "k_EMsgGCItemPreviewExpireNotification",
		1707: "k_EMsgGCItemPreviewItemBoughtNotification",
		2001: "k_EMsgGCDev_NewItemRequest",
		2002: "k_EMsgGCDev_NewItemRequestResponse",
		2003: "k_EMsgGCDev_PaintKitDropItem",
		2500: "k_EMsgGCStoreGetUserData",
		2501: "k_EMsgGCStoreGetUserDataResponse",
		2502: "k_EMsgGCStorePurchaseInit_DEPRECATED",
		2503: "k_EMsgGCStorePurchaseInitResponse_DEPRECATED",
		2504: "k_EMsgGCStorePurchaseFinalize",
		2505: "k_EMsgGCStorePurchaseFinalizeResponse",
		2506: "k_EMsgGCStorePurchaseCancel",
		2507: "k_EMsgGCStorePurchaseCancelResponse",
		2508: "k_EMsgGCStorePurchaseQueryTxn",
		2509: "k_EMsgGCStorePurchaseQueryTxnResponse",
		2510: "k_EMsgGCStorePurchaseInit",
		2511: "k_EMsgGCStorePurchaseInitResponse",
		2512: "k_EMsgGCBannedWordListRequest",
		2513: "k_EMsgGCBannedWordListResponse",
		2514: "k_EMsgGCToGCBannedWordListBroadcast",
		2515: "k_EMsgGCToGCBannedWordListUpdated",
		2516: "k_EMsgGCToGCDirtySDOCache",
		2517: "k_EMsgGCToGCDirtyMultipleSDOCache",
		2518: "k_EMsgGCToGCUpdateSQLKeyValue",
		2519: "k_EMsgGCToGCIsTrustedServer",
		2520: "k_EMsgGCToGCIsTrustedServerResponse",
		2521: "k_EMsgGCToGCBroadcastConsoleCommand",
		2522: "k_EMsgGCServerVersionUpdated",
		2523: "k_EMsgGCApplyAutograph",
		2524: "k_EMsgGCToGCWebAPIAccountChanged",
		2525: "k_EMsgGCRequestAnnouncements",
		2526: "k_EMsgGCRequestAnnouncementsResponse",
		2527: "k_EMsgGCRequestPassportItemGrant",
		2528: "k_EMsgGCClientVersionUpdated",
		2529: "k_EMsgGCAdjustItemEquippedStateMulti",
	}
	EGCItemMsg_value = map[string]int32{
		"k_EMsgGCBase":                                 1000,
		"k_EMsgGCSetItemPosition":                      1001,
		"k_EMsgGCCraft":                                1002,
		"k_EMsgGCCraftResponse":                        1003,
		"k_EMsgGCDelete":                               1004,
		"k_EMsgGCVerifyCacheSubscription":              1005,
		"k_EMsgGCNameItem":                             1006,
		"k_EMsgGCUnlockCrate":                          1007,
		"k_EMsgGCUnlockCrateResponse":                  1008,
		"k_EMsgGCPaintItem":                            1009,
		"k_EMsgGCPaintItemResponse":                    1010,
		"k_EMsgGCGoldenWrenchBroadcast":                1011,
		"k_EMsgGCMOTDRequest":                          1012,
		"k_EMsgGCMOTDRequestResponse":                  1013,
		"k_EMsgGCAddItemToSocket_DEPRECATED":           1014,
		"k_EMsgGCAddItemToSocketResponse_DEPRECATED":   1015,
		"k_EMsgGCAddSocketToBaseItem_DEPRECATED":       1016,
		"k_EMsgGCAddSocketToItem_DEPRECATED":           1017,
		"k_EMsgGCAddSocketToItemResponse_DEPRECATED":   1018,
		"k_EMsgGCNameBaseItem":                         1019,
		"k_EMsgGCNameBaseItemResponse":                 1020,
		"k_EMsgGCRemoveSocketItem_DEPRECATED":          1021,
		"k_EMsgGCRemoveSocketItemResponse_DEPRECATED":  1022,
		"k_EMsgGCCustomizeItemTexture":                 1023,
		"k_EMsgGCCustomizeItemTextureResponse":         1024,
		"k_EMsgGCUseItemRequest":                       1025,
		"k_EMsgGCUseItemResponse":                      1026,
		"k_EMsgGCGiftedItems_DEPRECATED":               1027,
		"k_EMsgGCRemoveItemName":                       1030,
		"k_EMsgGCRemoveItemPaint":                      1031,
		"k_EMsgGCGiftWrapItem":                         1032,
		"k_EMsgGCGiftWrapItemResponse":                 1033,
		"k_EMsgGCDeliverGift":                          1034,
		"k_EMsgGCDeliverGiftResponseGiver":             1035,
		"k_EMsgGCDeliverGiftResponseReceiver":          1036,
		"k_EMsgGCUnwrapGiftRequest":                    1037,
		"k_EMsgGCUnwrapGiftResponse":                   1038,
		"k_EMsgGCSetItemStyle":                         1039,
		"k_EMsgGCUsedClaimCodeItem":                    1040,
		"k_EMsgGCSortItems":                            1041,
		"k_EMsgGC_RevolvingLootList_DEPRECATED":        1042,
		"k_EMsgGCLookupAccount":                        1043,
		"k_EMsgGCLookupAccountResponse":                1044,
		"k_EMsgGCLookupAccountName":                    1045,
		"k_EMsgGCLookupAccountNameResponse":            1046,
		"k_EMsgGCUpdateItemSchema":                     1049,
		"k_EMsgGCRemoveCustomTexture":                  1051,
		"k_EMsgGCRemoveCustomTextureResponse":          1052,
		"k_EMsgGCRemoveMakersMark":                     1053,
		"k_EMsgGCRemoveMakersMarkResponse":             1054,
		"k_EMsgGCRemoveUniqueCraftIndex":               1055,
		"k_EMsgGCRemoveUniqueCraftIndexResponse":       1056,
		"k_EMsgGCSaxxyBroadcast":                       1057,
		"k_EMsgGCBackpackSortFinished":                 1058,
		"k_EMsgGCAdjustItemEquippedState":              1059,
		"k_EMsgGCCollectItem":                          1061,
		"k_EMsgGCItemAcknowledged__DEPRECATED":         1062,
		"k_EMsgGC_ReportAbuse":                         1065,
		"k_EMsgGC_ReportAbuseResponse":                 1066,
		"k_EMsgGCNameItemNotification":                 1068,
		"k_EMsgGCApplyConsumableEffects":               1069,
		"k_EMsgGCConsumableExhausted":                  1070,
		"k_EMsgGCShowItemsPickedUp":                    1071,
		"k_EMsgGCClientDisplayNotification":            1072,
		"k_EMsgGCApplyStrangePart":                     1073,
		"k_EMsgGC_IncrementKillCountAttribute":         1074,
		"k_EMsgGC_IncrementKillCountResponse":          1075,
		"k_EMsgGCApplyPennantUpgrade":                  1076,
		"k_EMsgGCSetItemPositions":                     1077,
		"k_EMsgGCApplyEggEssence":                      1078,
		"k_EMsgGCNameEggEssenceResponse":               1079,
		"k_EMsgGCPaintKitItem":                         1080,
		"k_EMsgGCPaintKitBaseItem":                     1081,
		"k_EMsgGCPaintKitItemResponse":                 1082,
		"k_EMsgGCGiftedItems":                          1083,
		"k_EMsgGCUnlockItemStyle":                      1084,
		"k_EMsgGCUnlockItemStyleResponse":              1085,
		"k_EMsgGCApplySticker":                         1086,
		"k_EMsgGCItemAcknowledged":                     1087,
		"k_EMsgGCStatTrakSwap":                         1088,
		"k_EMsgGCUserTrackTimePlayedConsecutively":     1089,
		"k_EMsgGCItemCustomizationNotification":        1090,
		"k_EMsgGCModifyItemAttribute":                  1091,
		"k_EMsgGCCasketItemAdd":                        1092,
		"k_EMsgGCCasketItemExtract":                    1093,
		"k_EMsgGCCasketItemLoadContents":               1094,
		"k_EMsgGCTradingBase":                          1500,
		"k_EMsgGCTrading_InitiateTradeRequest":         1501,
		"k_EMsgGCTrading_InitiateTradeResponse":        1502,
		"k_EMsgGCTrading_StartSession":                 1503,
		"k_EMsgGCTrading_SetItem":                      1504,
		"k_EMsgGCTrading_RemoveItem":                   1505,
		"k_EMsgGCTrading_UpdateTradeInfo":              1506,
		"k_EMsgGCTrading_SetReadiness":                 1507,
		"k_EMsgGCTrading_ReadinessResponse":            1508,
		"k_EMsgGCTrading_SessionClosed":                1509,
		"k_EMsgGCTrading_CancelSession":                1510,
		"k_EMsgGCTrading_TradeChatMsg":                 1511,
		"k_EMsgGCTrading_ConfirmOffer":                 1512,
		"k_EMsgGCTrading_TradeTypingChatMsg":           1513,
		"k_EMsgGCServerBrowser_FavoriteServer":         1601,
		"k_EMsgGCServerBrowser_BlacklistServer":        1602,
		"k_EMsgGCServerRentalsBase":                    1700,
		"k_EMsgGCItemPreviewCheckStatus":               1701,
		"k_EMsgGCItemPreviewStatusResponse":            1702,
		"k_EMsgGCItemPreviewRequest":                   1703,
		"k_EMsgGCItemPreviewRequestResponse":           1704,
		"k_EMsgGCItemPreviewExpire":                    1705,
		"k_EMsgGCItemPreviewExpireNotification":        1706,
		"k_EMsgGCItemPreviewItemBoughtNotification":    1707,
		"k_EMsgGCDev_NewItemRequest":                   2001,
		"k_EMsgGCDev_NewItemRequestResponse":           2002,
		"k_EMsgGCDev_PaintKitDropItem":                 2003,
		"k_EMsgGCStoreGetUserData":                     2500,
		"k_EMsgGCStoreGetUserDataResponse":             2501,
		"k_EMsgGCStorePurchaseInit_DEPRECATED":         2502,
		"k_EMsgGCStorePurchaseInitResponse_DEPRECATED": 2503,
		"k_EMsgGCStorePurchaseFinalize":                2504,
		"k_EMsgGCStorePurchaseFinalizeResponse":        2505,
		"k_EMsgGCStorePurchaseCancel":                  2506,
		"k_EMsgGCStorePurchaseCancelResponse":          2507,
		"k_EMsgGCStorePurchaseQueryTxn":                2508,
		"k_EMsgGCStorePurchaseQueryTxnResponse":        2509,
		"k_EMsgGCStorePurchaseInit":                    2510,
		"k_EMsgGCStorePurchaseInitResponse":            2511,
		"k_EMsgGCBannedWordListRequest":                2512,
		"k_EMsgGCBannedWordListResponse":               2513,
		"k_EMsgGCToGCBannedWordListBroadcast":          2514,
		"k_EMsgGCToGCBannedWordListUpdated":            2515,
		"k_EMsgGCToGCDirtySDOCache":                    2516,
		"k_EMsgGCToGCDirtyMultipleSDOCache":            2517,
		"k_EMsgGCToGCUpdateSQLKeyValue":                2518,
		"k_EMsgGCToGCIsTrustedServer":                  2519,
		"k_EMsgGCToGCIsTrustedServerResponse":          2520,
		"k_EMsgGCToGCBroadcastConsoleCommand":          2521,
		"k_EMsgGCServerVersionUpdated":                 2522,
		"k_EMsgGCApplyAutograph":                       2523,
		"k_EMsgGCToGCWebAPIAccountChanged":             2524,
		"k_EMsgGCRequestAnnouncements":                 2525,
		"k_EMsgGCRequestAnnouncementsResponse":         2526,
		"k_EMsgGCRequestPassportItemGrant":             2527,
		"k_EMsgGCClientVersionUpdated":                 2528,
		"k_EMsgGCAdjustItemEquippedStateMulti":         2529,
	}
)

func (x EGCItemMsg) Enum() *EGCItemMsg {
	p := new(EGCItemMsg)
	*p = x
	return p
}

func (x EGCItemMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCItemMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_econ_gcmessages_proto_enumTypes[0].Descriptor()
}

func (EGCItemMsg) Type() protoreflect.EnumType {
	return &file_csgo_econ_gcmessages_proto_enumTypes[0]
}

func (x EGCItemMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCItemMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCItemMsg(num)
	return nil
}

// Deprecated: Use EGCItemMsg.Descriptor instead.
func (EGCItemMsg) EnumDescriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{0}
}

type EGCMsgResponse int32

const (
	EGCMsgResponse_k_EGCMsgResponseOK           EGCMsgResponse = 0
	EGCMsgResponse_k_EGCMsgResponseDenied       EGCMsgResponse = 1
	EGCMsgResponse_k_EGCMsgResponseServerError  EGCMsgResponse = 2
	EGCMsgResponse_k_EGCMsgResponseTimeout      EGCMsgResponse = 3
	EGCMsgResponse_k_EGCMsgResponseInvalid      EGCMsgResponse = 4
	EGCMsgResponse_k_EGCMsgResponseNoMatch      EGCMsgResponse = 5
	EGCMsgResponse_k_EGCMsgResponseUnknownError EGCMsgResponse = 6
	EGCMsgResponse_k_EGCMsgResponseNotLoggedOn  EGCMsgResponse = 7
	EGCMsgResponse_k_EGCMsgFailedToCreate       EGCMsgResponse = 8
	EGCMsgResponse_k_EGCMsgLimitExceeded        EGCMsgResponse = 9
	EGCMsgResponse_k_EGCMsgCommitUnfinalized    EGCMsgResponse = 10
)

// Enum value maps for EGCMsgResponse.
var (
	EGCMsgResponse_name = map[int32]string{
		0:  "k_EGCMsgResponseOK",
		1:  "k_EGCMsgResponseDenied",
		2:  "k_EGCMsgResponseServerError",
		3:  "k_EGCMsgResponseTimeout",
		4:  "k_EGCMsgResponseInvalid",
		5:  "k_EGCMsgResponseNoMatch",
		6:  "k_EGCMsgResponseUnknownError",
		7:  "k_EGCMsgResponseNotLoggedOn",
		8:  "k_EGCMsgFailedToCreate",
		9:  "k_EGCMsgLimitExceeded",
		10: "k_EGCMsgCommitUnfinalized",
	}
	EGCMsgResponse_value = map[string]int32{
		"k_EGCMsgResponseOK":           0,
		"k_EGCMsgResponseDenied":       1,
		"k_EGCMsgResponseServerError":  2,
		"k_EGCMsgResponseTimeout":      3,
		"k_EGCMsgResponseInvalid":      4,
		"k_EGCMsgResponseNoMatch":      5,
		"k_EGCMsgResponseUnknownError": 6,
		"k_EGCMsgResponseNotLoggedOn":  7,
		"k_EGCMsgFailedToCreate":       8,
		"k_EGCMsgLimitExceeded":        9,
		"k_EGCMsgCommitUnfinalized":    10,
	}
)

func (x EGCMsgResponse) Enum() *EGCMsgResponse {
	p := new(EGCMsgResponse)
	*p = x
	return p
}

func (x EGCMsgResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCMsgResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_econ_gcmessages_proto_enumTypes[1].Descriptor()
}

func (EGCMsgResponse) Type() protoreflect.EnumType {
	return &file_csgo_econ_gcmessages_proto_enumTypes[1]
}

func (x EGCMsgResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCMsgResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCMsgResponse(num)
	return nil
}

// Deprecated: Use EGCMsgResponse.Descriptor instead.
func (EGCMsgResponse) EnumDescriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{1}
}

type EUnlockStyle int32

const (
	EUnlockStyle_k_UnlockStyle_Succeeded               EUnlockStyle = 0
	EUnlockStyle_k_UnlockStyle_Failed_PreReq           EUnlockStyle = 1
	EUnlockStyle_k_UnlockStyle_Failed_CantAfford       EUnlockStyle = 2
	EUnlockStyle_k_UnlockStyle_Failed_CantCommit       EUnlockStyle = 3
	EUnlockStyle_k_UnlockStyle_Failed_CantLockCache    EUnlockStyle = 4
	EUnlockStyle_k_UnlockStyle_Failed_CantAffordAttrib EUnlockStyle = 5
)

// Enum value maps for EUnlockStyle.
var (
	EUnlockStyle_name = map[int32]string{
		0: "k_UnlockStyle_Succeeded",
		1: "k_UnlockStyle_Failed_PreReq",
		2: "k_UnlockStyle_Failed_CantAfford",
		3: "k_UnlockStyle_Failed_CantCommit",
		4: "k_UnlockStyle_Failed_CantLockCache",
		5: "k_UnlockStyle_Failed_CantAffordAttrib",
	}
	EUnlockStyle_value = map[string]int32{
		"k_UnlockStyle_Succeeded":               0,
		"k_UnlockStyle_Failed_PreReq":           1,
		"k_UnlockStyle_Failed_CantAfford":       2,
		"k_UnlockStyle_Failed_CantCommit":       3,
		"k_UnlockStyle_Failed_CantLockCache":    4,
		"k_UnlockStyle_Failed_CantAffordAttrib": 5,
	}
)

func (x EUnlockStyle) Enum() *EUnlockStyle {
	p := new(EUnlockStyle)
	*p = x
	return p
}

func (x EUnlockStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUnlockStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_econ_gcmessages_proto_enumTypes[2].Descriptor()
}

func (EUnlockStyle) Type() protoreflect.EnumType {
	return &file_csgo_econ_gcmessages_proto_enumTypes[2]
}

func (x EUnlockStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUnlockStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUnlockStyle(num)
	return nil
}

// Deprecated: Use EUnlockStyle.Descriptor instead.
func (EUnlockStyle) EnumDescriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{2}
}

type EGCItemCustomizationNotification int32

const (
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_NameItem              EGCItemCustomizationNotification = 1006
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_UnlockCrate           EGCItemCustomizationNotification = 1007
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_XRayItemReveal        EGCItemCustomizationNotification = 1008
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_XRayItemClaim         EGCItemCustomizationNotification = 1009
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_CasketTooFull         EGCItemCustomizationNotification = 1011
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_CasketContents        EGCItemCustomizationNotification = 1012
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_CasketAdded           EGCItemCustomizationNotification = 1013
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_CasketRemoved         EGCItemCustomizationNotification = 1014
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_CasketInvFull         EGCItemCustomizationNotification = 1015
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_NameBaseItem          EGCItemCustomizationNotification = 1019
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_RemoveItemName        EGCItemCustomizationNotification = 1030
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_RemoveSticker         EGCItemCustomizationNotification = 1053
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_ApplySticker          EGCItemCustomizationNotification = 1086
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_StatTrakSwap          EGCItemCustomizationNotification = 1088
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_RemovePatch           EGCItemCustomizationNotification = 1089
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_ApplyPatch            EGCItemCustomizationNotification = 1090
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_ActivateFanToken      EGCItemCustomizationNotification = 9178
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_ActivateOperationCoin EGCItemCustomizationNotification = 9179
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_GraffitiUnseal        EGCItemCustomizationNotification = 9185
	EGCItemCustomizationNotification_k_EGCItemCustomizationNotification_GenerateSouvenir      EGCItemCustomizationNotification = 9204
)

// Enum value maps for EGCItemCustomizationNotification.
var (
	EGCItemCustomizationNotification_name = map[int32]string{
		1006: "k_EGCItemCustomizationNotification_NameItem",
		1007: "k_EGCItemCustomizationNotification_UnlockCrate",
		1008: "k_EGCItemCustomizationNotification_XRayItemReveal",
		1009: "k_EGCItemCustomizationNotification_XRayItemClaim",
		1011: "k_EGCItemCustomizationNotification_CasketTooFull",
		1012: "k_EGCItemCustomizationNotification_CasketContents",
		1013: "k_EGCItemCustomizationNotification_CasketAdded",
		1014: "k_EGCItemCustomizationNotification_CasketRemoved",
		1015: "k_EGCItemCustomizationNotification_CasketInvFull",
		1019: "k_EGCItemCustomizationNotification_NameBaseItem",
		1030: "k_EGCItemCustomizationNotification_RemoveItemName",
		1053: "k_EGCItemCustomizationNotification_RemoveSticker",
		1086: "k_EGCItemCustomizationNotification_ApplySticker",
		1088: "k_EGCItemCustomizationNotification_StatTrakSwap",
		1089: "k_EGCItemCustomizationNotification_RemovePatch",
		1090: "k_EGCItemCustomizationNotification_ApplyPatch",
		9178: "k_EGCItemCustomizationNotification_ActivateFanToken",
		9179: "k_EGCItemCustomizationNotification_ActivateOperationCoin",
		9185: "k_EGCItemCustomizationNotification_GraffitiUnseal",
		9204: "k_EGCItemCustomizationNotification_GenerateSouvenir",
	}
	EGCItemCustomizationNotification_value = map[string]int32{
		"k_EGCItemCustomizationNotification_NameItem":              1006,
		"k_EGCItemCustomizationNotification_UnlockCrate":           1007,
		"k_EGCItemCustomizationNotification_XRayItemReveal":        1008,
		"k_EGCItemCustomizationNotification_XRayItemClaim":         1009,
		"k_EGCItemCustomizationNotification_CasketTooFull":         1011,
		"k_EGCItemCustomizationNotification_CasketContents":        1012,
		"k_EGCItemCustomizationNotification_CasketAdded":           1013,
		"k_EGCItemCustomizationNotification_CasketRemoved":         1014,
		"k_EGCItemCustomizationNotification_CasketInvFull":         1015,
		"k_EGCItemCustomizationNotification_NameBaseItem":          1019,
		"k_EGCItemCustomizationNotification_RemoveItemName":        1030,
		"k_EGCItemCustomizationNotification_RemoveSticker":         1053,
		"k_EGCItemCustomizationNotification_ApplySticker":          1086,
		"k_EGCItemCustomizationNotification_StatTrakSwap":          1088,
		"k_EGCItemCustomizationNotification_RemovePatch":           1089,
		"k_EGCItemCustomizationNotification_ApplyPatch":            1090,
		"k_EGCItemCustomizationNotification_ActivateFanToken":      9178,
		"k_EGCItemCustomizationNotification_ActivateOperationCoin": 9179,
		"k_EGCItemCustomizationNotification_GraffitiUnseal":        9185,
		"k_EGCItemCustomizationNotification_GenerateSouvenir":      9204,
	}
)

func (x EGCItemCustomizationNotification) Enum() *EGCItemCustomizationNotification {
	p := new(EGCItemCustomizationNotification)
	*p = x
	return p
}

func (x EGCItemCustomizationNotification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCItemCustomizationNotification) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_econ_gcmessages_proto_enumTypes[3].Descriptor()
}

func (EGCItemCustomizationNotification) Type() protoreflect.EnumType {
	return &file_csgo_econ_gcmessages_proto_enumTypes[3]
}

func (x EGCItemCustomizationNotification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCItemCustomizationNotification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCItemCustomizationNotification(num)
	return nil
}

// Deprecated: Use EGCItemCustomizationNotification.Descriptor instead.
func (EGCItemCustomizationNotification) EnumDescriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{3}
}

type CMsgGCGiftedItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid             *uint32  `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Giftdefindex          *uint32  `protobuf:"varint,2,opt,name=giftdefindex" json:"giftdefindex,omitempty"`
	MaxGiftsPossible      *uint32  `protobuf:"varint,3,opt,name=max_gifts_possible,json=maxGiftsPossible" json:"max_gifts_possible,omitempty"`
	NumEligibleRecipients *uint32  `protobuf:"varint,4,opt,name=num_eligible_recipients,json=numEligibleRecipients" json:"num_eligible_recipients,omitempty"`
	RecipientsAccountids  []uint32 `protobuf:"varint,5,rep,name=recipients_accountids,json=recipientsAccountids" json:"recipients_accountids,omitempty"`
}

func (x *CMsgGCGiftedItems) Reset() {
	*x = CMsgGCGiftedItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_econ_gcmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCGiftedItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGiftedItems) ProtoMessage() {}

func (x *CMsgGCGiftedItems) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_econ_gcmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGiftedItems.ProtoReflect.Descriptor instead.
func (*CMsgGCGiftedItems) Descriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgGCGiftedItems) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgGCGiftedItems) GetGiftdefindex() uint32 {
	if x != nil && x.Giftdefindex != nil {
		return *x.Giftdefindex
	}
	return 0
}

func (x *CMsgGCGiftedItems) GetMaxGiftsPossible() uint32 {
	if x != nil && x.MaxGiftsPossible != nil {
		return *x.MaxGiftsPossible
	}
	return 0
}

func (x *CMsgGCGiftedItems) GetNumEligibleRecipients() uint32 {
	if x != nil && x.NumEligibleRecipients != nil {
		return *x.NumEligibleRecipients
	}
	return 0
}

func (x *CMsgGCGiftedItems) GetRecipientsAccountids() []uint32 {
	if x != nil {
		return x.RecipientsAccountids
	}
	return nil
}

type CMsgApplyAutograph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutographItemId *uint64 `protobuf:"varint,1,opt,name=autograph_item_id,json=autographItemId" json:"autograph_item_id,omitempty"`
	ItemItemId      *uint64 `protobuf:"varint,2,opt,name=item_item_id,json=itemItemId" json:"item_item_id,omitempty"`
}

func (x *CMsgApplyAutograph) Reset() {
	*x = CMsgApplyAutograph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_econ_gcmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgApplyAutograph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgApplyAutograph) ProtoMessage() {}

func (x *CMsgApplyAutograph) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_econ_gcmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgApplyAutograph.ProtoReflect.Descriptor instead.
func (*CMsgApplyAutograph) Descriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgApplyAutograph) GetAutographItemId() uint64 {
	if x != nil && x.AutographItemId != nil {
		return *x.AutographItemId
	}
	return 0
}

func (x *CMsgApplyAutograph) GetItemItemId() uint64 {
	if x != nil && x.ItemItemId != nil {
		return *x.ItemItemId
	}
	return 0
}

type CMsgCasketItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CasketItemId *uint64 `protobuf:"varint,1,opt,name=casket_item_id,json=casketItemId" json:"casket_item_id,omitempty"`
	ItemItemId   *uint64 `protobuf:"varint,2,opt,name=item_item_id,json=itemItemId" json:"item_item_id,omitempty"`
}

func (x *CMsgCasketItem) Reset() {
	*x = CMsgCasketItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_econ_gcmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCasketItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCasketItem) ProtoMessage() {}

func (x *CMsgCasketItem) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_econ_gcmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCasketItem.ProtoReflect.Descriptor instead.
func (*CMsgCasketItem) Descriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgCasketItem) GetCasketItemId() uint64 {
	if x != nil && x.CasketItemId != nil {
		return *x.CasketItemId
	}
	return 0
}

func (x *CMsgCasketItem) GetItemItemId() uint64 {
	if x != nil && x.ItemItemId != nil {
		return *x.ItemItemId
	}
	return 0
}

type CMsgGCUserTrackTimePlayedConsecutively struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
}

func (x *CMsgGCUserTrackTimePlayedConsecutively) Reset() {
	*x = CMsgGCUserTrackTimePlayedConsecutively{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_econ_gcmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCUserTrackTimePlayedConsecutively) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCUserTrackTimePlayedConsecutively) ProtoMessage() {}

func (x *CMsgGCUserTrackTimePlayedConsecutively) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_econ_gcmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCUserTrackTimePlayedConsecutively.ProtoReflect.Descriptor instead.
func (*CMsgGCUserTrackTimePlayedConsecutively) Descriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGCUserTrackTimePlayedConsecutively) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type CMsgGCItemCustomizationNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  []uint64 `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	Request *uint32  `protobuf:"varint,2,opt,name=request" json:"request,omitempty"`
}

func (x *CMsgGCItemCustomizationNotification) Reset() {
	*x = CMsgGCItemCustomizationNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_econ_gcmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemCustomizationNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemCustomizationNotification) ProtoMessage() {}

func (x *CMsgGCItemCustomizationNotification) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_econ_gcmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemCustomizationNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCItemCustomizationNotification) Descriptor() ([]byte, []int) {
	return file_csgo_econ_gcmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgGCItemCustomizationNotification) GetItemId() []uint64 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

func (x *CMsgGCItemCustomizationNotification) GetRequest() uint32 {
	if x != nil && x.Request != nil {
		return *x.Request
	}
	return 0
}

var File_csgo_econ_gcmessages_proto protoreflect.FileDescriptor

var file_csgo_econ_gcmessages_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x73, 0x67, 0x6f, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x73,
	0x67, 0x6f, 0x1a, 0x18, 0x63, 0x73, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a,
	0x11, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x69, 0x66, 0x74,
	0x73, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x47, 0x69, 0x66, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x22,
	0x62, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0xdd, 0x27, 0x0a, 0x0a, 0x45, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x11, 0x0a, 0x0c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x42, 0x61, 0x73, 0x65, 0x10, 0xe8, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe9, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x10, 0xea, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xec, 0x07, 0x12, 0x24, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xed, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xee, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x10, 0xef, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xf0, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xf1, 0x07, 0x12, 0x1e, 0x0a,
	0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf2, 0x07, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x57,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xf3,
	0x07, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x4f, 0x54,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xf4, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x4f, 0x54, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf5, 0x07, 0x12, 0x27, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xf6, 0x07, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0xf7, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0xf8, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x41, 0x64, 0x64, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x5f,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xf9, 0x07, 0x12, 0x2f, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xfa, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xfb, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfc, 0x07, 0x12, 0x28, 0x0a, 0x23,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0xfd, 0x07, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xfe, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0xff, 0x07, 0x12, 0x29, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x80, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x81, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x82,
	0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x69, 0x66,
	0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x83, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x10, 0x86, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x87,
	0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x69, 0x66,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x88, 0x08, 0x12, 0x21, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x69, 0x66, 0x74, 0x57, 0x72, 0x61, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x89, 0x08, 0x12,
	0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x10, 0x8a, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x69, 0x76, 0x65, 0x72, 0x10, 0x8b, 0x08,
	0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x10, 0x8c, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x8d, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8e, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x10, 0x8f, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x90, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x91, 0x08, 0x12, 0x2a,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6c,
	0x76, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x92, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x93, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x94, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x95, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x96, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x99,
	0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x9b, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9c, 0x08, 0x12, 0x1d, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x10, 0x9d, 0x08, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0x9e, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x9f, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xa0, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x53, 0x61, 0x78, 0x78, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10,
	0xa1, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x42, 0x61,
	0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x10, 0xa2, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa3, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x10, 0xa5, 0x08, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x5f, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xa6, 0x08,
	0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x62, 0x75, 0x73, 0x65, 0x10, 0xa9, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x62,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xaa, 0x08, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xac,
	0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x10, 0xad, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x68, 0x61,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0xae, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x55, 0x70, 0x10, 0xaf, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb0, 0x08,
	0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x10, 0xb1, 0x08, 0x12,
	0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0xb2, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xb3, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x65, 0x6e, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x10, 0xb4, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0xb5, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x67, 0x67, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x10, 0xb6, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x67, 0x67, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb7, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x10, 0xb8, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50,
	0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0xb9, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xba, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0xbb, 0x08, 0x12,
	0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0xbc, 0x08, 0x12, 0x24, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xbd, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0xbe, 0x08, 0x12, 0x1d,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x10, 0xbf, 0x08, 0x12, 0x19, 0x0a,
	0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x61, 0x74, 0x54, 0x72, 0x61,
	0x6b, 0x53, 0x77, 0x61, 0x70, 0x10, 0xc0, 0x08, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x6c, 0x79, 0x10, 0xc1, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0xc2, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x10, 0xc3, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x10, 0xc4,
	0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0xc5,
	0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0xc6, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x10, 0xdc, 0x0b,
	0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xdd, 0x0b, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xde, 0x0b, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xdf, 0x0b, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xe0, 0x0b, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xe1, 0x0b, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xe2, 0x0b, 0x12,
	0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x10,
	0xe3, 0x0b, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe4, 0x0b, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0xe5, 0x0b, 0x12, 0x22,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0xe6, 0x0b, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x10, 0xe7, 0x0b, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x10, 0xe8, 0x0b, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xe9,
	0x0b, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xc1, 0x0c, 0x12, 0x2a, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xc2, 0x0c, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x10, 0xa4, 0x0d, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xa5, 0x0d, 0x12, 0x26, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xa6, 0x0d, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0xa7, 0x0d, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa8, 0x0d, 0x12,
	0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0xa9, 0x0d, 0x12,
	0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xaa, 0x0d, 0x12, 0x2e, 0x0a, 0x29, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xab, 0x0d, 0x12, 0x1f, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x76, 0x5f, 0x4e, 0x65, 0x77, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xd1, 0x0f, 0x12, 0x27, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x76, 0x5f, 0x4e, 0x65, 0x77, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xd2, 0x0f, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x44, 0x65, 0x76, 0x5f, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xd3, 0x0f, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x10, 0xc4, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc5, 0x13, 0x12, 0x29,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc6, 0x13, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc7, 0x13, 0x12, 0x22, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x10, 0xc8, 0x13,
	0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc9, 0x13, 0x12, 0x20, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0xca, 0x13, 0x12, 0x28,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcb, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x6e, 0x10, 0xcc, 0x13, 0x12, 0x2a, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x13, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x10, 0xce, 0x13, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcf, 0x13,
	0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0xd0, 0x13, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd1, 0x13, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x10, 0xd2, 0x13, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x47, 0x43, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xd3, 0x13, 0x12, 0x1e, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x53, 0x44, 0x4f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0xd4, 0x13, 0x12, 0x26, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x44, 0x4f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x10, 0xd5, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x51, 0x4c, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0xd6, 0x13, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xd7, 0x13, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xd8, 0x13, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x47, 0x43, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0xd9, 0x13, 0x12, 0x21, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xda, 0x13,
	0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x10, 0xdb, 0x13, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x57, 0x65, 0x62,
	0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x10, 0xdc, 0x13, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0xdd, 0x13, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xde, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0xdf, 0x13, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xe0, 0x13, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x10, 0xe1, 0x13, 0x2a, 0xd5, 0x02, 0x0a, 0x0e, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x6e, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x09,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x0a, 0x2a,
	0xe9, 0x01, 0x0a, 0x0c, 0x45, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x50, 0x72, 0x65, 0x52, 0x65, 0x71, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x66, 0x66, 0x6f, 0x72,
	0x64, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x43, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0x04,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x66, 0x66,
	0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x10, 0x05, 0x2a, 0xef, 0x08, 0x0a, 0x20,
	0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0xee, 0x07, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x72, 0x61, 0x74, 0x65, 0x10, 0xef, 0x07, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x58, 0x52,
	0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x10, 0xf0, 0x07, 0x12,
	0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x58, 0x52, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x10, 0xf1, 0x07, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xf3, 0x07, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x10, 0xf4, 0x07, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0xf5, 0x07, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x43, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0xf6,
	0x07, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xf7, 0x07, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xfb, 0x07, 0x12, 0x36,
	0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x86, 0x08, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x9d, 0x08, 0x12, 0x34, 0x0a,
	0x2f, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x10, 0xbe, 0x08, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x54, 0x72,
	0x61, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x10, 0xc0, 0x08, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x10, 0xc1, 0x08, 0x12, 0x32,
	0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x10,
	0xc2, 0x08, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x46, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0xda, 0x47, 0x12, 0x3d, 0x0a, 0x38,
	0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0xdb, 0x47, 0x12, 0x36, 0x0a, 0x31, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x47, 0x72, 0x61, 0x66, 0x66, 0x69, 0x74, 0x69, 0x55, 0x6e, 0x73, 0x65, 0x61, 0x6c,
	0x10, 0xe1, 0x47, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x76, 0x65, 0x6e, 0x69, 0x72, 0x10, 0xf4, 0x47, 0x42, 0x36, 0x48,
	0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33,
	0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x73,
	0x67, 0x6f, 0x80, 0x01, 0x00,
}

var (
	file_csgo_econ_gcmessages_proto_rawDescOnce sync.Once
	file_csgo_econ_gcmessages_proto_rawDescData = file_csgo_econ_gcmessages_proto_rawDesc
)

func file_csgo_econ_gcmessages_proto_rawDescGZIP() []byte {
	file_csgo_econ_gcmessages_proto_rawDescOnce.Do(func() {
		file_csgo_econ_gcmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_csgo_econ_gcmessages_proto_rawDescData)
	})
	return file_csgo_econ_gcmessages_proto_rawDescData
}

var file_csgo_econ_gcmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_csgo_econ_gcmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_csgo_econ_gcmessages_proto_goTypes = []interface{}{
	(EGCItemMsg)(0),                                // 0: csgo.EGCItemMsg
	(EGCMsgResponse)(0),                            // 1: csgo.EGCMsgResponse
	(EUnlockStyle)(0),                              // 2: csgo.EUnlockStyle
	(EGCItemCustomizationNotification)(0),          // 3: csgo.EGCItemCustomizationNotification
	(*CMsgGCGiftedItems)(nil),                      // 4: csgo.CMsgGCGiftedItems
	(*CMsgApplyAutograph)(nil),                     // 5: csgo.CMsgApplyAutograph
	(*CMsgCasketItem)(nil),                         // 6: csgo.CMsgCasketItem
	(*CMsgGCUserTrackTimePlayedConsecutively)(nil), // 7: csgo.CMsgGCUserTrackTimePlayedConsecutively
	(*CMsgGCItemCustomizationNotification)(nil),    // 8: csgo.CMsgGCItemCustomizationNotification
}
var file_csgo_econ_gcmessages_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_csgo_econ_gcmessages_proto_init() }
func file_csgo_econ_gcmessages_proto_init() {
	if File_csgo_econ_gcmessages_proto != nil {
		return
	}
	file_csgo_steammessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_csgo_econ_gcmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCGiftedItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_econ_gcmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgApplyAutograph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_econ_gcmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCasketItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_econ_gcmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCUserTrackTimePlayedConsecutively); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_econ_gcmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemCustomizationNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_csgo_econ_gcmessages_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_csgo_econ_gcmessages_proto_goTypes,
		DependencyIndexes: file_csgo_econ_gcmessages_proto_depIdxs,
		EnumInfos:         file_csgo_econ_gcmessages_proto_enumTypes,
		MessageInfos:      file_csgo_econ_gcmessages_proto_msgTypes,
	}.Build()
	File_csgo_econ_gcmessages_proto = out.File
	file_csgo_econ_gcmessages_proto_rawDesc = nil
	file_csgo_econ_gcmessages_proto_goTypes = nil
	file_csgo_econ_gcmessages_proto_depIdxs = nil
}
