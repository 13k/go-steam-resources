// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: artifact/dcg_gcmessages_client.proto

package artifact

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDCGClientMessages int32

const (
	EGCDCGClientMessages_k_EMsgClientToGCStartMatchmaking                     EGCDCGClientMessages = 9010
	EGCDCGClientMessages_k_EMsgClientToGCStartMatchmakingResponse             EGCDCGClientMessages = 9011
	EGCDCGClientMessages_k_EMsgClientToGCStopMatchmaking                      EGCDCGClientMessages = 9012
	EGCDCGClientMessages_k_EMsgClientToGCStopMatchmakingResponse              EGCDCGClientMessages = 9013
	EGCDCGClientMessages_k_EMsgGCToClientMatchmakingStopped                   EGCDCGClientMessages = 9014
	EGCDCGClientMessages_k_EMsgClientToGCLeaveLobby                           EGCDCGClientMessages = 9015
	EGCDCGClientMessages_k_EMsgClientToGCLeaveLobbyResponse                   EGCDCGClientMessages = 9016
	EGCDCGClientMessages_k_EMsgGCToClientDefaultValidator                     EGCDCGClientMessages = 9019
	EGCDCGClientMessages_k_EMsgClientToGCJoinChatChannel                      EGCDCGClientMessages = 9023
	EGCDCGClientMessages_k_EMsgClientToGCJoinChatChannelResponse              EGCDCGClientMessages = 9024
	EGCDCGClientMessages_k_EMsgClientToGCSendChatMessage                      EGCDCGClientMessages = 9025
	EGCDCGClientMessages_k_EMsgGCToClientChatMessage                          EGCDCGClientMessages = 9026
	EGCDCGClientMessages_k_EMsgGCToClientUserJoinedChatChannel                EGCDCGClientMessages = 9027
	EGCDCGClientMessages_k_EMsgClientToGCLeaveChatChannel                     EGCDCGClientMessages = 9028
	EGCDCGClientMessages_k_EMsgGCToClientChatChannelJoined                    EGCDCGClientMessages = 9029
	EGCDCGClientMessages_k_EMsgClientToGCIsInMatchmaking                      EGCDCGClientMessages = 9030
	EGCDCGClientMessages_k_EMsgClientToGCIsInMatchmakingResponse              EGCDCGClientMessages = 9031
	EGCDCGClientMessages_k_EMsgClientToGCOpenPackItem                         EGCDCGClientMessages = 9036
	EGCDCGClientMessages_k_EMsgClientToGCOpenPackItemResponse                 EGCDCGClientMessages = 9037
	EGCDCGClientMessages_k_EMsgClientToGCLeaveChatChannelByKey                EGCDCGClientMessages = 9040
	EGCDCGClientMessages_k_EMsgClientToGCSendChatMessageRoll                  EGCDCGClientMessages = 9041
	EGCDCGClientMessages_k_EMsgClientToGCGetMatchHistory                      EGCDCGClientMessages = 9044
	EGCDCGClientMessages_k_EMsgClientToGCGetMatchHistoryResponse              EGCDCGClientMessages = 9045
	EGCDCGClientMessages_k_EMsgClientToGCGetMatchDetails                      EGCDCGClientMessages = 9046
	EGCDCGClientMessages_k_EMsgClientToGCGetMatchDetailsResponse              EGCDCGClientMessages = 9047
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGrant                         EGCDCGClientMessages = 9048
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGrantResponse                 EGCDCGClientMessages = 9049
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGrantChoice                   EGCDCGClientMessages = 9050
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGrantChoiceResponse           EGCDCGClientMessages = 9051
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGetFormat                     EGCDCGClientMessages = 9052
	EGCDCGClientMessages_k_EMsgClientToGCLimitedGetFormatResponse             EGCDCGClientMessages = 9053
	EGCDCGClientMessages_k_EMsgClientToGCGetAIVsAIMatchConfig                 EGCDCGClientMessages = 9076
	EGCDCGClientMessages_k_EMsgClientToGCGetAIVsAIMatchConfigResponse         EGCDCGClientMessages = 9077
	EGCDCGClientMessages_k_EMsgClientToGCGetAIVsAIMatchComplete               EGCDCGClientMessages = 9078
	EGCDCGClientMessages_k_EMsgGCToClientGlobalPhantomLeagues                 EGCDCGClientMessages = 9081
	EGCDCGClientMessages_k_EMsgGCToClientMatchmakingStatus                    EGCDCGClientMessages = 9096
	EGCDCGClientMessages_k_EMsgClientToGCJoinGauntlet                         EGCDCGClientMessages = 9097
	EGCDCGClientMessages_k_EMsgClientToGCJoinGauntletResponse                 EGCDCGClientMessages = 9098
	EGCDCGClientMessages_k_EMsgClientToGCAbandonGauntlet                      EGCDCGClientMessages = 9099
	EGCDCGClientMessages_k_EMsgClientToGCAbandonGauntletResponse              EGCDCGClientMessages = 9100
	EGCDCGClientMessages_k_EMsgGCToClientAvailableGauntlets                   EGCDCGClientMessages = 9101
	EGCDCGClientMessages_k_EMsgClientToGCGetGauntletMatches                   EGCDCGClientMessages = 9102
	EGCDCGClientMessages_k_EMsgClientToGCGetGauntletMatchesResponse           EGCDCGClientMessages = 9103
	EGCDCGClientMessages_k_EMsgClientToGCRegisterGauntletDeck                 EGCDCGClientMessages = 9104
	EGCDCGClientMessages_k_EMsgClientToGCRegisterGauntletDeckResponse         EGCDCGClientMessages = 9105
	EGCDCGClientMessages_k_EMsgClientToGCAIGauntletResult                     EGCDCGClientMessages = 9106
	EGCDCGClientMessages_k_EMsgClientToGCAIGauntletResultResponse             EGCDCGClientMessages = 9107
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyCreate                   EGCDCGClientMessages = 9110
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyCreateResponse           EGCDCGClientMessages = 9111
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyLeave                    EGCDCGClientMessages = 9112
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyLeaveResponse            EGCDCGClientMessages = 9113
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyJoin                     EGCDCGClientMessages = 9114
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyJoinResponse             EGCDCGClientMessages = 9115
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyAction                   EGCDCGClientMessages = 9116
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyActionResponse           EGCDCGClientMessages = 9117
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyStartMatch               EGCDCGClientMessages = 9118
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyStartMatchResponse       EGCDCGClientMessages = 9119
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyInviteUser               EGCDCGClientMessages = 9120
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyInviteUserResponse       EGCDCGClientMessages = 9121
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyChallenge                EGCDCGClientMessages = 9122
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyChallengeResponse        EGCDCGClientMessages = 9123
	EGCDCGClientMessages_k_EMsgGCToClientPrivateLobbyEvent                    EGCDCGClientMessages = 9124
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyClientVersion            EGCDCGClientMessages = 9125
	EGCDCGClientMessages_k_EMsgGCToClientSDRTicket                            EGCDCGClientMessages = 9126
	EGCDCGClientMessages_k_EMsgClientToGCReplacementSDRTicket                 EGCDCGClientMessages = 9127
	EGCDCGClientMessages_k_EMsgClientToGCReplacementSDRTicketResponse         EGCDCGClientMessages = 9128
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyJoinChatRoom             EGCDCGClientMessages = 9129
	EGCDCGClientMessages_k_EMsgClientToGCPrivateLobbyJoinChatRoomResponse     EGCDCGClientMessages = 9130
	EGCDCGClientMessages_k_EMsgClientToGCMatchSignout                         EGCDCGClientMessages = 9133
	EGCDCGClientMessages_k_EMsgClientToGCInitialGrantAck                      EGCDCGClientMessages = 9134
	EGCDCGClientMessages_k_EMsgClientToGCRecycleCards                         EGCDCGClientMessages = 9135
	EGCDCGClientMessages_k_EMsgClientToGCRecycleCardsResponse                 EGCDCGClientMessages = 9136
	EGCDCGClientMessages_k_EMsgClientToGCSetPlayerBadge                       EGCDCGClientMessages = 9137
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetInfo                       EGCDCGClientMessages = 9500
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetInfoResponse               EGCDCGClientMessages = 9501
	EGCDCGClientMessages_k_EMsgClientToGCTourneyUnsubscribe                   EGCDCGClientMessages = 9502
	EGCDCGClientMessages_k_EMsgGCToClientTourneyUpdated                       EGCDCGClientMessages = 9503
	EGCDCGClientMessages_k_EMsgGCToClientTourneySeriesMatchReady              EGCDCGClientMessages = 9506
	EGCDCGClientMessages_k_EMsgGCToClientTourneySeriesMatchNotReady           EGCDCGClientMessages = 9507
	EGCDCGClientMessages_k_EMsgClientToGCCreateTourney                        EGCDCGClientMessages = 9508
	EGCDCGClientMessages_k_EMsgClientToGCCreateTourneyResponse                EGCDCGClientMessages = 9509
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAcceptInvite                  EGCDCGClientMessages = 9512
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAcceptInviteResponse          EGCDCGClientMessages = 9513
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRejectInvite                  EGCDCGClientMessages = 9514
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRejectInviteResponse          EGCDCGClientMessages = 9515
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRevokeInvite                  EGCDCGClientMessages = 9516
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRevokeInviteResponse          EGCDCGClientMessages = 9517
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSwitchStage              EGCDCGClientMessages = 9518
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSwitchStageResponse      EGCDCGClientMessages = 9519
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminKick                     EGCDCGClientMessages = 9520
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminKickResponse             EGCDCGClientMessages = 9521
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminGrantWin                 EGCDCGClientMessages = 9522
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminGrantWinResponse         EGCDCGClientMessages = 9523
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminChangeRights             EGCDCGClientMessages = 9524
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminChangeRightsResponse     EGCDCGClientMessages = 9525
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRegisterDeck                  EGCDCGClientMessages = 9526
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRegisterDeckResponse          EGCDCGClientMessages = 9527
	EGCDCGClientMessages_k_EMsgClientToGCTourneyUserLeave                     EGCDCGClientMessages = 9528
	EGCDCGClientMessages_k_EMsgClientToGCTourneyUserLeaveResponse             EGCDCGClientMessages = 9529
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRegisterSharedDeck            EGCDCGClientMessages = 9530
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRegisterSharedDeckResponse    EGCDCGClientMessages = 9531
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetRegisteredDecks            EGCDCGClientMessages = 9532
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetRegisteredDecksResponse    EGCDCGClientMessages = 9533
	EGCDCGClientMessages_k_EMsgClientToGCTourneyCreateOpenInvite              EGCDCGClientMessages = 9536
	EGCDCGClientMessages_k_EMsgClientToGCTourneyCreateOpenInviteResponse      EGCDCGClientMessages = 9537
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRevokeOpenInvite              EGCDCGClientMessages = 9538
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRevokeOpenInviteResponse      EGCDCGClientMessages = 9539
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetOpenInvites                EGCDCGClientMessages = 9540
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetOpenInvitesResponse        EGCDCGClientMessages = 9541
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSwitchPhaseStage         EGCDCGClientMessages = 9542
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSwitchPhaseStageResponse EGCDCGClientMessages = 9543
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetOverview                   EGCDCGClientMessages = 9544
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetOverviewResponse           EGCDCGClientMessages = 9545
	EGCDCGClientMessages_k_EMsgClientToGCTourneySetStatus                     EGCDCGClientMessages = 9546
	EGCDCGClientMessages_k_EMsgClientToGCTourneySetStatusResponse             EGCDCGClientMessages = 9547
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAddPhase                      EGCDCGClientMessages = 9548
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAddPhaseResponse              EGCDCGClientMessages = 9549
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRemovePhase                   EGCDCGClientMessages = 9550
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRemovePhaseResponse           EGCDCGClientMessages = 9551
	EGCDCGClientMessages_k_EMsgClientToGCTourneySpectateMatch                 EGCDCGClientMessages = 9552
	EGCDCGClientMessages_k_EMsgClientToGCTourneySpectateMatchResponse         EGCDCGClientMessages = 9553
	EGCDCGClientMessages_k_EMsgClientToGCTourneyInviteList                    EGCDCGClientMessages = 9554
	EGCDCGClientMessages_k_EMsgClientToGCTourneyInviteListResponse            EGCDCGClientMessages = 9555
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSetSeedValues            EGCDCGClientMessages = 9556
	EGCDCGClientMessages_k_EMsgClientToGCTourneyAdminSetSeedValuesResponse    EGCDCGClientMessages = 9557
	EGCDCGClientMessages_k_EMsgClientToGCTourneyEditStageSwapPlayers          EGCDCGClientMessages = 9558
	EGCDCGClientMessages_k_EMsgClientToGCTourneyEditStageSwapPlayersResponse  EGCDCGClientMessages = 9559
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetLimitedReplay              EGCDCGClientMessages = 9560
	EGCDCGClientMessages_k_EMsgClientToGCTourneyGetLimitedReplayResponse      EGCDCGClientMessages = 9561
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRejoinChatRoom                EGCDCGClientMessages = 9562
	EGCDCGClientMessages_k_EMsgClientToGCTourneyRejoinChatRoomResponse        EGCDCGClientMessages = 9563
	EGCDCGClientMessages_k_EMsgGCToClientTourneyMembersMatchmaking            EGCDCGClientMessages = 9564
	EGCDCGClientMessages_k_EMsgClientToGCTourneyPayEntryFee                   EGCDCGClientMessages = 9565
	EGCDCGClientMessages_k_EMsgClientToGCTourneyPayEntryFeeResponse           EGCDCGClientMessages = 9566
	EGCDCGClientMessages_k_EMsgClientToGCTourneyPlayerAbandon                 EGCDCGClientMessages = 9567
	EGCDCGClientMessages_k_EMsgClientToGCTourneyPlayerAbandonResponse         EGCDCGClientMessages = 9568
	EGCDCGClientMessages_k_EMsgClientToGCTourneyChangeValue                   EGCDCGClientMessages = 9569
	EGCDCGClientMessages_k_EMsgClientToGCTourneyChangeValueResponse           EGCDCGClientMessages = 9570
	EGCDCGClientMessages_k_EMsgClientToGCTourneyJoinOpenTourney               EGCDCGClientMessages = 9571
	EGCDCGClientMessages_k_EMsgClientToGCTourneyJoinOpenTourneyResponse       EGCDCGClientMessages = 9572
)

// Enum value maps for EGCDCGClientMessages.
var (
	EGCDCGClientMessages_name = map[int32]string{
		9010: "k_EMsgClientToGCStartMatchmaking",
		9011: "k_EMsgClientToGCStartMatchmakingResponse",
		9012: "k_EMsgClientToGCStopMatchmaking",
		9013: "k_EMsgClientToGCStopMatchmakingResponse",
		9014: "k_EMsgGCToClientMatchmakingStopped",
		9015: "k_EMsgClientToGCLeaveLobby",
		9016: "k_EMsgClientToGCLeaveLobbyResponse",
		9019: "k_EMsgGCToClientDefaultValidator",
		9023: "k_EMsgClientToGCJoinChatChannel",
		9024: "k_EMsgClientToGCJoinChatChannelResponse",
		9025: "k_EMsgClientToGCSendChatMessage",
		9026: "k_EMsgGCToClientChatMessage",
		9027: "k_EMsgGCToClientUserJoinedChatChannel",
		9028: "k_EMsgClientToGCLeaveChatChannel",
		9029: "k_EMsgGCToClientChatChannelJoined",
		9030: "k_EMsgClientToGCIsInMatchmaking",
		9031: "k_EMsgClientToGCIsInMatchmakingResponse",
		9036: "k_EMsgClientToGCOpenPackItem",
		9037: "k_EMsgClientToGCOpenPackItemResponse",
		9040: "k_EMsgClientToGCLeaveChatChannelByKey",
		9041: "k_EMsgClientToGCSendChatMessageRoll",
		9044: "k_EMsgClientToGCGetMatchHistory",
		9045: "k_EMsgClientToGCGetMatchHistoryResponse",
		9046: "k_EMsgClientToGCGetMatchDetails",
		9047: "k_EMsgClientToGCGetMatchDetailsResponse",
		9048: "k_EMsgClientToGCLimitedGrant",
		9049: "k_EMsgClientToGCLimitedGrantResponse",
		9050: "k_EMsgClientToGCLimitedGrantChoice",
		9051: "k_EMsgClientToGCLimitedGrantChoiceResponse",
		9052: "k_EMsgClientToGCLimitedGetFormat",
		9053: "k_EMsgClientToGCLimitedGetFormatResponse",
		9076: "k_EMsgClientToGCGetAIVsAIMatchConfig",
		9077: "k_EMsgClientToGCGetAIVsAIMatchConfigResponse",
		9078: "k_EMsgClientToGCGetAIVsAIMatchComplete",
		9081: "k_EMsgGCToClientGlobalPhantomLeagues",
		9096: "k_EMsgGCToClientMatchmakingStatus",
		9097: "k_EMsgClientToGCJoinGauntlet",
		9098: "k_EMsgClientToGCJoinGauntletResponse",
		9099: "k_EMsgClientToGCAbandonGauntlet",
		9100: "k_EMsgClientToGCAbandonGauntletResponse",
		9101: "k_EMsgGCToClientAvailableGauntlets",
		9102: "k_EMsgClientToGCGetGauntletMatches",
		9103: "k_EMsgClientToGCGetGauntletMatchesResponse",
		9104: "k_EMsgClientToGCRegisterGauntletDeck",
		9105: "k_EMsgClientToGCRegisterGauntletDeckResponse",
		9106: "k_EMsgClientToGCAIGauntletResult",
		9107: "k_EMsgClientToGCAIGauntletResultResponse",
		9110: "k_EMsgClientToGCPrivateLobbyCreate",
		9111: "k_EMsgClientToGCPrivateLobbyCreateResponse",
		9112: "k_EMsgClientToGCPrivateLobbyLeave",
		9113: "k_EMsgClientToGCPrivateLobbyLeaveResponse",
		9114: "k_EMsgClientToGCPrivateLobbyJoin",
		9115: "k_EMsgClientToGCPrivateLobbyJoinResponse",
		9116: "k_EMsgClientToGCPrivateLobbyAction",
		9117: "k_EMsgClientToGCPrivateLobbyActionResponse",
		9118: "k_EMsgClientToGCPrivateLobbyStartMatch",
		9119: "k_EMsgClientToGCPrivateLobbyStartMatchResponse",
		9120: "k_EMsgClientToGCPrivateLobbyInviteUser",
		9121: "k_EMsgClientToGCPrivateLobbyInviteUserResponse",
		9122: "k_EMsgClientToGCPrivateLobbyChallenge",
		9123: "k_EMsgClientToGCPrivateLobbyChallengeResponse",
		9124: "k_EMsgGCToClientPrivateLobbyEvent",
		9125: "k_EMsgClientToGCPrivateLobbyClientVersion",
		9126: "k_EMsgGCToClientSDRTicket",
		9127: "k_EMsgClientToGCReplacementSDRTicket",
		9128: "k_EMsgClientToGCReplacementSDRTicketResponse",
		9129: "k_EMsgClientToGCPrivateLobbyJoinChatRoom",
		9130: "k_EMsgClientToGCPrivateLobbyJoinChatRoomResponse",
		9133: "k_EMsgClientToGCMatchSignout",
		9134: "k_EMsgClientToGCInitialGrantAck",
		9135: "k_EMsgClientToGCRecycleCards",
		9136: "k_EMsgClientToGCRecycleCardsResponse",
		9137: "k_EMsgClientToGCSetPlayerBadge",
		9500: "k_EMsgClientToGCTourneyGetInfo",
		9501: "k_EMsgClientToGCTourneyGetInfoResponse",
		9502: "k_EMsgClientToGCTourneyUnsubscribe",
		9503: "k_EMsgGCToClientTourneyUpdated",
		9506: "k_EMsgGCToClientTourneySeriesMatchReady",
		9507: "k_EMsgGCToClientTourneySeriesMatchNotReady",
		9508: "k_EMsgClientToGCCreateTourney",
		9509: "k_EMsgClientToGCCreateTourneyResponse",
		9512: "k_EMsgClientToGCTourneyAcceptInvite",
		9513: "k_EMsgClientToGCTourneyAcceptInviteResponse",
		9514: "k_EMsgClientToGCTourneyRejectInvite",
		9515: "k_EMsgClientToGCTourneyRejectInviteResponse",
		9516: "k_EMsgClientToGCTourneyRevokeInvite",
		9517: "k_EMsgClientToGCTourneyRevokeInviteResponse",
		9518: "k_EMsgClientToGCTourneyAdminSwitchStage",
		9519: "k_EMsgClientToGCTourneyAdminSwitchStageResponse",
		9520: "k_EMsgClientToGCTourneyAdminKick",
		9521: "k_EMsgClientToGCTourneyAdminKickResponse",
		9522: "k_EMsgClientToGCTourneyAdminGrantWin",
		9523: "k_EMsgClientToGCTourneyAdminGrantWinResponse",
		9524: "k_EMsgClientToGCTourneyAdminChangeRights",
		9525: "k_EMsgClientToGCTourneyAdminChangeRightsResponse",
		9526: "k_EMsgClientToGCTourneyRegisterDeck",
		9527: "k_EMsgClientToGCTourneyRegisterDeckResponse",
		9528: "k_EMsgClientToGCTourneyUserLeave",
		9529: "k_EMsgClientToGCTourneyUserLeaveResponse",
		9530: "k_EMsgClientToGCTourneyRegisterSharedDeck",
		9531: "k_EMsgClientToGCTourneyRegisterSharedDeckResponse",
		9532: "k_EMsgClientToGCTourneyGetRegisteredDecks",
		9533: "k_EMsgClientToGCTourneyGetRegisteredDecksResponse",
		9536: "k_EMsgClientToGCTourneyCreateOpenInvite",
		9537: "k_EMsgClientToGCTourneyCreateOpenInviteResponse",
		9538: "k_EMsgClientToGCTourneyRevokeOpenInvite",
		9539: "k_EMsgClientToGCTourneyRevokeOpenInviteResponse",
		9540: "k_EMsgClientToGCTourneyGetOpenInvites",
		9541: "k_EMsgClientToGCTourneyGetOpenInvitesResponse",
		9542: "k_EMsgClientToGCTourneyAdminSwitchPhaseStage",
		9543: "k_EMsgClientToGCTourneyAdminSwitchPhaseStageResponse",
		9544: "k_EMsgClientToGCTourneyGetOverview",
		9545: "k_EMsgClientToGCTourneyGetOverviewResponse",
		9546: "k_EMsgClientToGCTourneySetStatus",
		9547: "k_EMsgClientToGCTourneySetStatusResponse",
		9548: "k_EMsgClientToGCTourneyAddPhase",
		9549: "k_EMsgClientToGCTourneyAddPhaseResponse",
		9550: "k_EMsgClientToGCTourneyRemovePhase",
		9551: "k_EMsgClientToGCTourneyRemovePhaseResponse",
		9552: "k_EMsgClientToGCTourneySpectateMatch",
		9553: "k_EMsgClientToGCTourneySpectateMatchResponse",
		9554: "k_EMsgClientToGCTourneyInviteList",
		9555: "k_EMsgClientToGCTourneyInviteListResponse",
		9556: "k_EMsgClientToGCTourneyAdminSetSeedValues",
		9557: "k_EMsgClientToGCTourneyAdminSetSeedValuesResponse",
		9558: "k_EMsgClientToGCTourneyEditStageSwapPlayers",
		9559: "k_EMsgClientToGCTourneyEditStageSwapPlayersResponse",
		9560: "k_EMsgClientToGCTourneyGetLimitedReplay",
		9561: "k_EMsgClientToGCTourneyGetLimitedReplayResponse",
		9562: "k_EMsgClientToGCTourneyRejoinChatRoom",
		9563: "k_EMsgClientToGCTourneyRejoinChatRoomResponse",
		9564: "k_EMsgGCToClientTourneyMembersMatchmaking",
		9565: "k_EMsgClientToGCTourneyPayEntryFee",
		9566: "k_EMsgClientToGCTourneyPayEntryFeeResponse",
		9567: "k_EMsgClientToGCTourneyPlayerAbandon",
		9568: "k_EMsgClientToGCTourneyPlayerAbandonResponse",
		9569: "k_EMsgClientToGCTourneyChangeValue",
		9570: "k_EMsgClientToGCTourneyChangeValueResponse",
		9571: "k_EMsgClientToGCTourneyJoinOpenTourney",
		9572: "k_EMsgClientToGCTourneyJoinOpenTourneyResponse",
	}
	EGCDCGClientMessages_value = map[string]int32{
		"k_EMsgClientToGCStartMatchmaking":                     9010,
		"k_EMsgClientToGCStartMatchmakingResponse":             9011,
		"k_EMsgClientToGCStopMatchmaking":                      9012,
		"k_EMsgClientToGCStopMatchmakingResponse":              9013,
		"k_EMsgGCToClientMatchmakingStopped":                   9014,
		"k_EMsgClientToGCLeaveLobby":                           9015,
		"k_EMsgClientToGCLeaveLobbyResponse":                   9016,
		"k_EMsgGCToClientDefaultValidator":                     9019,
		"k_EMsgClientToGCJoinChatChannel":                      9023,
		"k_EMsgClientToGCJoinChatChannelResponse":              9024,
		"k_EMsgClientToGCSendChatMessage":                      9025,
		"k_EMsgGCToClientChatMessage":                          9026,
		"k_EMsgGCToClientUserJoinedChatChannel":                9027,
		"k_EMsgClientToGCLeaveChatChannel":                     9028,
		"k_EMsgGCToClientChatChannelJoined":                    9029,
		"k_EMsgClientToGCIsInMatchmaking":                      9030,
		"k_EMsgClientToGCIsInMatchmakingResponse":              9031,
		"k_EMsgClientToGCOpenPackItem":                         9036,
		"k_EMsgClientToGCOpenPackItemResponse":                 9037,
		"k_EMsgClientToGCLeaveChatChannelByKey":                9040,
		"k_EMsgClientToGCSendChatMessageRoll":                  9041,
		"k_EMsgClientToGCGetMatchHistory":                      9044,
		"k_EMsgClientToGCGetMatchHistoryResponse":              9045,
		"k_EMsgClientToGCGetMatchDetails":                      9046,
		"k_EMsgClientToGCGetMatchDetailsResponse":              9047,
		"k_EMsgClientToGCLimitedGrant":                         9048,
		"k_EMsgClientToGCLimitedGrantResponse":                 9049,
		"k_EMsgClientToGCLimitedGrantChoice":                   9050,
		"k_EMsgClientToGCLimitedGrantChoiceResponse":           9051,
		"k_EMsgClientToGCLimitedGetFormat":                     9052,
		"k_EMsgClientToGCLimitedGetFormatResponse":             9053,
		"k_EMsgClientToGCGetAIVsAIMatchConfig":                 9076,
		"k_EMsgClientToGCGetAIVsAIMatchConfigResponse":         9077,
		"k_EMsgClientToGCGetAIVsAIMatchComplete":               9078,
		"k_EMsgGCToClientGlobalPhantomLeagues":                 9081,
		"k_EMsgGCToClientMatchmakingStatus":                    9096,
		"k_EMsgClientToGCJoinGauntlet":                         9097,
		"k_EMsgClientToGCJoinGauntletResponse":                 9098,
		"k_EMsgClientToGCAbandonGauntlet":                      9099,
		"k_EMsgClientToGCAbandonGauntletResponse":              9100,
		"k_EMsgGCToClientAvailableGauntlets":                   9101,
		"k_EMsgClientToGCGetGauntletMatches":                   9102,
		"k_EMsgClientToGCGetGauntletMatchesResponse":           9103,
		"k_EMsgClientToGCRegisterGauntletDeck":                 9104,
		"k_EMsgClientToGCRegisterGauntletDeckResponse":         9105,
		"k_EMsgClientToGCAIGauntletResult":                     9106,
		"k_EMsgClientToGCAIGauntletResultResponse":             9107,
		"k_EMsgClientToGCPrivateLobbyCreate":                   9110,
		"k_EMsgClientToGCPrivateLobbyCreateResponse":           9111,
		"k_EMsgClientToGCPrivateLobbyLeave":                    9112,
		"k_EMsgClientToGCPrivateLobbyLeaveResponse":            9113,
		"k_EMsgClientToGCPrivateLobbyJoin":                     9114,
		"k_EMsgClientToGCPrivateLobbyJoinResponse":             9115,
		"k_EMsgClientToGCPrivateLobbyAction":                   9116,
		"k_EMsgClientToGCPrivateLobbyActionResponse":           9117,
		"k_EMsgClientToGCPrivateLobbyStartMatch":               9118,
		"k_EMsgClientToGCPrivateLobbyStartMatchResponse":       9119,
		"k_EMsgClientToGCPrivateLobbyInviteUser":               9120,
		"k_EMsgClientToGCPrivateLobbyInviteUserResponse":       9121,
		"k_EMsgClientToGCPrivateLobbyChallenge":                9122,
		"k_EMsgClientToGCPrivateLobbyChallengeResponse":        9123,
		"k_EMsgGCToClientPrivateLobbyEvent":                    9124,
		"k_EMsgClientToGCPrivateLobbyClientVersion":            9125,
		"k_EMsgGCToClientSDRTicket":                            9126,
		"k_EMsgClientToGCReplacementSDRTicket":                 9127,
		"k_EMsgClientToGCReplacementSDRTicketResponse":         9128,
		"k_EMsgClientToGCPrivateLobbyJoinChatRoom":             9129,
		"k_EMsgClientToGCPrivateLobbyJoinChatRoomResponse":     9130,
		"k_EMsgClientToGCMatchSignout":                         9133,
		"k_EMsgClientToGCInitialGrantAck":                      9134,
		"k_EMsgClientToGCRecycleCards":                         9135,
		"k_EMsgClientToGCRecycleCardsResponse":                 9136,
		"k_EMsgClientToGCSetPlayerBadge":                       9137,
		"k_EMsgClientToGCTourneyGetInfo":                       9500,
		"k_EMsgClientToGCTourneyGetInfoResponse":               9501,
		"k_EMsgClientToGCTourneyUnsubscribe":                   9502,
		"k_EMsgGCToClientTourneyUpdated":                       9503,
		"k_EMsgGCToClientTourneySeriesMatchReady":              9506,
		"k_EMsgGCToClientTourneySeriesMatchNotReady":           9507,
		"k_EMsgClientToGCCreateTourney":                        9508,
		"k_EMsgClientToGCCreateTourneyResponse":                9509,
		"k_EMsgClientToGCTourneyAcceptInvite":                  9512,
		"k_EMsgClientToGCTourneyAcceptInviteResponse":          9513,
		"k_EMsgClientToGCTourneyRejectInvite":                  9514,
		"k_EMsgClientToGCTourneyRejectInviteResponse":          9515,
		"k_EMsgClientToGCTourneyRevokeInvite":                  9516,
		"k_EMsgClientToGCTourneyRevokeInviteResponse":          9517,
		"k_EMsgClientToGCTourneyAdminSwitchStage":              9518,
		"k_EMsgClientToGCTourneyAdminSwitchStageResponse":      9519,
		"k_EMsgClientToGCTourneyAdminKick":                     9520,
		"k_EMsgClientToGCTourneyAdminKickResponse":             9521,
		"k_EMsgClientToGCTourneyAdminGrantWin":                 9522,
		"k_EMsgClientToGCTourneyAdminGrantWinResponse":         9523,
		"k_EMsgClientToGCTourneyAdminChangeRights":             9524,
		"k_EMsgClientToGCTourneyAdminChangeRightsResponse":     9525,
		"k_EMsgClientToGCTourneyRegisterDeck":                  9526,
		"k_EMsgClientToGCTourneyRegisterDeckResponse":          9527,
		"k_EMsgClientToGCTourneyUserLeave":                     9528,
		"k_EMsgClientToGCTourneyUserLeaveResponse":             9529,
		"k_EMsgClientToGCTourneyRegisterSharedDeck":            9530,
		"k_EMsgClientToGCTourneyRegisterSharedDeckResponse":    9531,
		"k_EMsgClientToGCTourneyGetRegisteredDecks":            9532,
		"k_EMsgClientToGCTourneyGetRegisteredDecksResponse":    9533,
		"k_EMsgClientToGCTourneyCreateOpenInvite":              9536,
		"k_EMsgClientToGCTourneyCreateOpenInviteResponse":      9537,
		"k_EMsgClientToGCTourneyRevokeOpenInvite":              9538,
		"k_EMsgClientToGCTourneyRevokeOpenInviteResponse":      9539,
		"k_EMsgClientToGCTourneyGetOpenInvites":                9540,
		"k_EMsgClientToGCTourneyGetOpenInvitesResponse":        9541,
		"k_EMsgClientToGCTourneyAdminSwitchPhaseStage":         9542,
		"k_EMsgClientToGCTourneyAdminSwitchPhaseStageResponse": 9543,
		"k_EMsgClientToGCTourneyGetOverview":                   9544,
		"k_EMsgClientToGCTourneyGetOverviewResponse":           9545,
		"k_EMsgClientToGCTourneySetStatus":                     9546,
		"k_EMsgClientToGCTourneySetStatusResponse":             9547,
		"k_EMsgClientToGCTourneyAddPhase":                      9548,
		"k_EMsgClientToGCTourneyAddPhaseResponse":              9549,
		"k_EMsgClientToGCTourneyRemovePhase":                   9550,
		"k_EMsgClientToGCTourneyRemovePhaseResponse":           9551,
		"k_EMsgClientToGCTourneySpectateMatch":                 9552,
		"k_EMsgClientToGCTourneySpectateMatchResponse":         9553,
		"k_EMsgClientToGCTourneyInviteList":                    9554,
		"k_EMsgClientToGCTourneyInviteListResponse":            9555,
		"k_EMsgClientToGCTourneyAdminSetSeedValues":            9556,
		"k_EMsgClientToGCTourneyAdminSetSeedValuesResponse":    9557,
		"k_EMsgClientToGCTourneyEditStageSwapPlayers":          9558,
		"k_EMsgClientToGCTourneyEditStageSwapPlayersResponse":  9559,
		"k_EMsgClientToGCTourneyGetLimitedReplay":              9560,
		"k_EMsgClientToGCTourneyGetLimitedReplayResponse":      9561,
		"k_EMsgClientToGCTourneyRejoinChatRoom":                9562,
		"k_EMsgClientToGCTourneyRejoinChatRoomResponse":        9563,
		"k_EMsgGCToClientTourneyMembersMatchmaking":            9564,
		"k_EMsgClientToGCTourneyPayEntryFee":                   9565,
		"k_EMsgClientToGCTourneyPayEntryFeeResponse":           9566,
		"k_EMsgClientToGCTourneyPlayerAbandon":                 9567,
		"k_EMsgClientToGCTourneyPlayerAbandonResponse":         9568,
		"k_EMsgClientToGCTourneyChangeValue":                   9569,
		"k_EMsgClientToGCTourneyChangeValueResponse":           9570,
		"k_EMsgClientToGCTourneyJoinOpenTourney":               9571,
		"k_EMsgClientToGCTourneyJoinOpenTourneyResponse":       9572,
	}
)

func (x EGCDCGClientMessages) Enum() *EGCDCGClientMessages {
	p := new(EGCDCGClientMessages)
	*p = x
	return p
}

func (x EGCDCGClientMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDCGClientMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[0].Descriptor()
}

func (EGCDCGClientMessages) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[0]
}

func (x EGCDCGClientMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDCGClientMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDCGClientMessages(num)
	return nil
}

// Deprecated: Use EGCDCGClientMessages.Descriptor instead.
func (EGCDCGClientMessages) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

type EChatRoomType int32

const (
	EChatRoomType_k_EChatRoomType_Invalid        EChatRoomType = 0
	EChatRoomType_k_EChatRoomType_Match          EChatRoomType = 1
	EChatRoomType_k_EChatRoomType_PublicRegion   EChatRoomType = 2
	EChatRoomType_k_EChatRoomType_Developer      EChatRoomType = 3
	EChatRoomType_k_EChatRoomType_Custom         EChatRoomType = 4
	EChatRoomType_k_EChatRoomType_PrivateLobby   EChatRoomType = 5
	EChatRoomType_k_EChatRoomType_Client_Tab     EChatRoomType = 20
	EChatRoomType_k_EChatRoomType_Client_Whisper EChatRoomType = 21
)

// Enum value maps for EChatRoomType.
var (
	EChatRoomType_name = map[int32]string{
		0:  "k_EChatRoomType_Invalid",
		1:  "k_EChatRoomType_Match",
		2:  "k_EChatRoomType_PublicRegion",
		3:  "k_EChatRoomType_Developer",
		4:  "k_EChatRoomType_Custom",
		5:  "k_EChatRoomType_PrivateLobby",
		20: "k_EChatRoomType_Client_Tab",
		21: "k_EChatRoomType_Client_Whisper",
	}
	EChatRoomType_value = map[string]int32{
		"k_EChatRoomType_Invalid":        0,
		"k_EChatRoomType_Match":          1,
		"k_EChatRoomType_PublicRegion":   2,
		"k_EChatRoomType_Developer":      3,
		"k_EChatRoomType_Custom":         4,
		"k_EChatRoomType_PrivateLobby":   5,
		"k_EChatRoomType_Client_Tab":     20,
		"k_EChatRoomType_Client_Whisper": 21,
	}
)

func (x EChatRoomType) Enum() *EChatRoomType {
	p := new(EChatRoomType)
	*p = x
	return p
}

func (x EChatRoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[1].Descriptor()
}

func (EChatRoomType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[1]
}

func (x EChatRoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomType(num)
	return nil
}

// Deprecated: Use EChatRoomType.Descriptor instead.
func (EChatRoomType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

type EChatMessageAdditionalData int32

const (
	EChatMessageAdditionalData_k_EChatMessageAdditionalData_None     EChatMessageAdditionalData = 0
	EChatMessageAdditionalData_k_EChatMessageAdditionalData_DiceRoll EChatMessageAdditionalData = 1
)

// Enum value maps for EChatMessageAdditionalData.
var (
	EChatMessageAdditionalData_name = map[int32]string{
		0: "k_EChatMessageAdditionalData_None",
		1: "k_EChatMessageAdditionalData_DiceRoll",
	}
	EChatMessageAdditionalData_value = map[string]int32{
		"k_EChatMessageAdditionalData_None":     0,
		"k_EChatMessageAdditionalData_DiceRoll": 1,
	}
)

func (x EChatMessageAdditionalData) Enum() *EChatMessageAdditionalData {
	p := new(EChatMessageAdditionalData)
	*p = x
	return p
}

func (x EChatMessageAdditionalData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatMessageAdditionalData) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[2].Descriptor()
}

func (EChatMessageAdditionalData) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[2]
}

func (x EChatMessageAdditionalData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatMessageAdditionalData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatMessageAdditionalData(num)
	return nil
}

// Deprecated: Use EChatMessageAdditionalData.Descriptor instead.
func (EChatMessageAdditionalData) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

type CMsgClientToGCStartMatchmakingResponse_EResultCode int32

const (
	CMsgClientToGCStartMatchmakingResponse_k_EResult_OK                   CMsgClientToGCStartMatchmakingResponse_EResultCode = 0
	CMsgClientToGCStartMatchmakingResponse_k_EResult_AlreadyFindingMatch  CMsgClientToGCStartMatchmakingResponse_EResultCode = 1
	CMsgClientToGCStartMatchmakingResponse_k_EResult_PartyMemberInLobby   CMsgClientToGCStartMatchmakingResponse_EResultCode = 2
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InvalidClientVersion CMsgClientToGCStartMatchmakingResponse_EResultCode = 3
	CMsgClientToGCStartMatchmakingResponse_k_EResult_MatchmakingDisabled  CMsgClientToGCStartMatchmakingResponse_EResultCode = 4
	CMsgClientToGCStartMatchmakingResponse_k_EResult_MatchmakingTooBusy   CMsgClientToGCStartMatchmakingResponse_EResultCode = 5
	CMsgClientToGCStartMatchmakingResponse_k_EResult_GauntletClosed       CMsgClientToGCStartMatchmakingResponse_EResultCode = 6
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InvalidGauntlet      CMsgClientToGCStartMatchmakingResponse_EResultCode = 7
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InternalError        CMsgClientToGCStartMatchmakingResponse_EResultCode = 8
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InvalidDeck          CMsgClientToGCStartMatchmakingResponse_EResultCode = 9
	CMsgClientToGCStartMatchmakingResponse_k_EResult_HasUnownedCards      CMsgClientToGCStartMatchmakingResponse_EResultCode = 10
	CMsgClientToGCStartMatchmakingResponse_k_EResult_TournamentNoMatches  CMsgClientToGCStartMatchmakingResponse_EResultCode = 11
	CMsgClientToGCStartMatchmakingResponse_k_EResult_TournamentNoDeck     CMsgClientToGCStartMatchmakingResponse_EResultCode = 13
	CMsgClientToGCStartMatchmakingResponse_k_EResult_NoRegionPings        CMsgClientToGCStartMatchmakingResponse_EResultCode = 14
)

// Enum value maps for CMsgClientToGCStartMatchmakingResponse_EResultCode.
var (
	CMsgClientToGCStartMatchmakingResponse_EResultCode_name = map[int32]string{
		0:  "k_EResult_OK",
		1:  "k_EResult_AlreadyFindingMatch",
		2:  "k_EResult_PartyMemberInLobby",
		3:  "k_EResult_InvalidClientVersion",
		4:  "k_EResult_MatchmakingDisabled",
		5:  "k_EResult_MatchmakingTooBusy",
		6:  "k_EResult_GauntletClosed",
		7:  "k_EResult_InvalidGauntlet",
		8:  "k_EResult_InternalError",
		9:  "k_EResult_InvalidDeck",
		10: "k_EResult_HasUnownedCards",
		11: "k_EResult_TournamentNoMatches",
		13: "k_EResult_TournamentNoDeck",
		14: "k_EResult_NoRegionPings",
	}
	CMsgClientToGCStartMatchmakingResponse_EResultCode_value = map[string]int32{
		"k_EResult_OK":                   0,
		"k_EResult_AlreadyFindingMatch":  1,
		"k_EResult_PartyMemberInLobby":   2,
		"k_EResult_InvalidClientVersion": 3,
		"k_EResult_MatchmakingDisabled":  4,
		"k_EResult_MatchmakingTooBusy":   5,
		"k_EResult_GauntletClosed":       6,
		"k_EResult_InvalidGauntlet":      7,
		"k_EResult_InternalError":        8,
		"k_EResult_InvalidDeck":          9,
		"k_EResult_HasUnownedCards":      10,
		"k_EResult_TournamentNoMatches":  11,
		"k_EResult_TournamentNoDeck":     13,
		"k_EResult_NoRegionPings":        14,
	}
)

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) Enum() *CMsgClientToGCStartMatchmakingResponse_EResultCode {
	p := new(CMsgClientToGCStartMatchmakingResponse_EResultCode)
	*p = x
	return p
}

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCStartMatchmakingResponse_EResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[3].Descriptor()
}

func (CMsgClientToGCStartMatchmakingResponse_EResultCode) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[3]
}

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCStartMatchmakingResponse_EResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCStartMatchmakingResponse_EResultCode(num)
	return nil
}

// Deprecated: Use CMsgClientToGCStartMatchmakingResponse_EResultCode.Descriptor instead.
func (CMsgClientToGCStartMatchmakingResponse_EResultCode) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{1, 0}
}

type CMsgGCToClientMatchmakingStopped_EReason int32

const (
	CMsgGCToClientMatchmakingStopped_k_EResult_Unspecified         CMsgGCToClientMatchmakingStopped_EReason = 0
	CMsgGCToClientMatchmakingStopped_k_EResult_VersionUpdated      CMsgGCToClientMatchmakingStopped_EReason = 1
	CMsgGCToClientMatchmakingStopped_k_EResult_FailedReadyUp       CMsgGCToClientMatchmakingStopped_EReason = 2
	CMsgGCToClientMatchmakingStopped_k_EResult_TourneySeriesClosed CMsgGCToClientMatchmakingStopped_EReason = 3
)

// Enum value maps for CMsgGCToClientMatchmakingStopped_EReason.
var (
	CMsgGCToClientMatchmakingStopped_EReason_name = map[int32]string{
		0: "k_EResult_Unspecified",
		1: "k_EResult_VersionUpdated",
		2: "k_EResult_FailedReadyUp",
		3: "k_EResult_TourneySeriesClosed",
	}
	CMsgGCToClientMatchmakingStopped_EReason_value = map[string]int32{
		"k_EResult_Unspecified":         0,
		"k_EResult_VersionUpdated":      1,
		"k_EResult_FailedReadyUp":       2,
		"k_EResult_TourneySeriesClosed": 3,
	}
)

func (x CMsgGCToClientMatchmakingStopped_EReason) Enum() *CMsgGCToClientMatchmakingStopped_EReason {
	p := new(CMsgGCToClientMatchmakingStopped_EReason)
	*p = x
	return p
}

func (x CMsgGCToClientMatchmakingStopped_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientMatchmakingStopped_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[4].Descriptor()
}

func (CMsgGCToClientMatchmakingStopped_EReason) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[4]
}

func (x CMsgGCToClientMatchmakingStopped_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientMatchmakingStopped_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientMatchmakingStopped_EReason(num)
	return nil
}

// Deprecated: Use CMsgGCToClientMatchmakingStopped_EReason.Descriptor instead.
func (CMsgGCToClientMatchmakingStopped_EReason) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgClientToGCJoinChatChannelResponse_EResult int32

const (
	CMsgClientToGCJoinChatChannelResponse_k_EResult_Success          CMsgClientToGCJoinChatChannelResponse_EResult = 0
	CMsgClientToGCJoinChatChannelResponse_k_EResult_InvalidRoom      CMsgClientToGCJoinChatChannelResponse_EResult = 1
	CMsgClientToGCJoinChatChannelResponse_k_EResult_PermissionDenied CMsgClientToGCJoinChatChannelResponse_EResult = 2
	CMsgClientToGCJoinChatChannelResponse_k_EResult_InternalError    CMsgClientToGCJoinChatChannelResponse_EResult = 3
	CMsgClientToGCJoinChatChannelResponse_k_EResult_RoomOffline      CMsgClientToGCJoinChatChannelResponse_EResult = 4
	CMsgClientToGCJoinChatChannelResponse_k_EResult_AlreadyJoined    CMsgClientToGCJoinChatChannelResponse_EResult = 5
	CMsgClientToGCJoinChatChannelResponse_k_EResult_RateLimited      CMsgClientToGCJoinChatChannelResponse_EResult = 6
	CMsgClientToGCJoinChatChannelResponse_k_EResult_TooManyRooms     CMsgClientToGCJoinChatChannelResponse_EResult = 7
	CMsgClientToGCJoinChatChannelResponse_k_EResult_ChatBanned       CMsgClientToGCJoinChatChannelResponse_EResult = 8
	CMsgClientToGCJoinChatChannelResponse_k_EResult_AccountNotLinked CMsgClientToGCJoinChatChannelResponse_EResult = 9
)

// Enum value maps for CMsgClientToGCJoinChatChannelResponse_EResult.
var (
	CMsgClientToGCJoinChatChannelResponse_EResult_name = map[int32]string{
		0: "k_EResult_Success",
		1: "k_EResult_InvalidRoom",
		2: "k_EResult_PermissionDenied",
		3: "k_EResult_InternalError",
		4: "k_EResult_RoomOffline",
		5: "k_EResult_AlreadyJoined",
		6: "k_EResult_RateLimited",
		7: "k_EResult_TooManyRooms",
		8: "k_EResult_ChatBanned",
		9: "k_EResult_AccountNotLinked",
	}
	CMsgClientToGCJoinChatChannelResponse_EResult_value = map[string]int32{
		"k_EResult_Success":          0,
		"k_EResult_InvalidRoom":      1,
		"k_EResult_PermissionDenied": 2,
		"k_EResult_InternalError":    3,
		"k_EResult_RoomOffline":      4,
		"k_EResult_AlreadyJoined":    5,
		"k_EResult_RateLimited":      6,
		"k_EResult_TooManyRooms":     7,
		"k_EResult_ChatBanned":       8,
		"k_EResult_AccountNotLinked": 9,
	}
)

func (x CMsgClientToGCJoinChatChannelResponse_EResult) Enum() *CMsgClientToGCJoinChatChannelResponse_EResult {
	p := new(CMsgClientToGCJoinChatChannelResponse_EResult)
	*p = x
	return p
}

func (x CMsgClientToGCJoinChatChannelResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCJoinChatChannelResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[5].Descriptor()
}

func (CMsgClientToGCJoinChatChannelResponse_EResult) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[5]
}

func (x CMsgClientToGCJoinChatChannelResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCJoinChatChannelResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCJoinChatChannelResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgClientToGCJoinChatChannelResponse_EResult.Descriptor instead.
func (CMsgClientToGCJoinChatChannelResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{10, 0}
}

type CMsgClientToGCOpenPackItemResponse_EResponse int32

const (
	CMsgClientToGCOpenPackItemResponse_k_eSuccess         CMsgClientToGCOpenPackItemResponse_EResponse = 1
	CMsgClientToGCOpenPackItemResponse_k_eTooManyRequests CMsgClientToGCOpenPackItemResponse_EResponse = 2
	CMsgClientToGCOpenPackItemResponse_k_eInternalError   CMsgClientToGCOpenPackItemResponse_EResponse = 3
	CMsgClientToGCOpenPackItemResponse_k_eInvalidItemID   CMsgClientToGCOpenPackItemResponse_EResponse = 4
	CMsgClientToGCOpenPackItemResponse_k_eDisabled        CMsgClientToGCOpenPackItemResponse_EResponse = 5
	CMsgClientToGCOpenPackItemResponse_k_eRegionLocked    CMsgClientToGCOpenPackItemResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCOpenPackItemResponse_EResponse.
var (
	CMsgClientToGCOpenPackItemResponse_EResponse_name = map[int32]string{
		1: "k_eSuccess",
		2: "k_eTooManyRequests",
		3: "k_eInternalError",
		4: "k_eInvalidItemID",
		5: "k_eDisabled",
		6: "k_eRegionLocked",
	}
	CMsgClientToGCOpenPackItemResponse_EResponse_value = map[string]int32{
		"k_eSuccess":         1,
		"k_eTooManyRequests": 2,
		"k_eInternalError":   3,
		"k_eInvalidItemID":   4,
		"k_eDisabled":        5,
		"k_eRegionLocked":    6,
	}
)

func (x CMsgClientToGCOpenPackItemResponse_EResponse) Enum() *CMsgClientToGCOpenPackItemResponse_EResponse {
	p := new(CMsgClientToGCOpenPackItemResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOpenPackItemResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOpenPackItemResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[6].Descriptor()
}

func (CMsgClientToGCOpenPackItemResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[6]
}

func (x CMsgClientToGCOpenPackItemResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOpenPackItemResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOpenPackItemResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOpenPackItemResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOpenPackItemResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{22, 0}
}

type CMsgClientToGCOpenPackItemResponse_ESlotType int32

const (
	CMsgClientToGCOpenPackItemResponse_k_eSlot_Unspecified        CMsgClientToGCOpenPackItemResponse_ESlotType = 0
	CMsgClientToGCOpenPackItemResponse_k_eSlot_Common             CMsgClientToGCOpenPackItemResponse_ESlotType = 1
	CMsgClientToGCOpenPackItemResponse_k_eSlot_Uncommon           CMsgClientToGCOpenPackItemResponse_ESlotType = 2
	CMsgClientToGCOpenPackItemResponse_k_eSlot_Rare               CMsgClientToGCOpenPackItemResponse_ESlotType = 3
	CMsgClientToGCOpenPackItemResponse_k_eSlot_UncommonFromCommon CMsgClientToGCOpenPackItemResponse_ESlotType = 4
	CMsgClientToGCOpenPackItemResponse_k_eSlot_RareFromCommon     CMsgClientToGCOpenPackItemResponse_ESlotType = 5
	CMsgClientToGCOpenPackItemResponse_k_eSlot_RareFromUncommon   CMsgClientToGCOpenPackItemResponse_ESlotType = 6
)

// Enum value maps for CMsgClientToGCOpenPackItemResponse_ESlotType.
var (
	CMsgClientToGCOpenPackItemResponse_ESlotType_name = map[int32]string{
		0: "k_eSlot_Unspecified",
		1: "k_eSlot_Common",
		2: "k_eSlot_Uncommon",
		3: "k_eSlot_Rare",
		4: "k_eSlot_UncommonFromCommon",
		5: "k_eSlot_RareFromCommon",
		6: "k_eSlot_RareFromUncommon",
	}
	CMsgClientToGCOpenPackItemResponse_ESlotType_value = map[string]int32{
		"k_eSlot_Unspecified":        0,
		"k_eSlot_Common":             1,
		"k_eSlot_Uncommon":           2,
		"k_eSlot_Rare":               3,
		"k_eSlot_UncommonFromCommon": 4,
		"k_eSlot_RareFromCommon":     5,
		"k_eSlot_RareFromUncommon":   6,
	}
)

func (x CMsgClientToGCOpenPackItemResponse_ESlotType) Enum() *CMsgClientToGCOpenPackItemResponse_ESlotType {
	p := new(CMsgClientToGCOpenPackItemResponse_ESlotType)
	*p = x
	return p
}

func (x CMsgClientToGCOpenPackItemResponse_ESlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOpenPackItemResponse_ESlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[7].Descriptor()
}

func (CMsgClientToGCOpenPackItemResponse_ESlotType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[7]
}

func (x CMsgClientToGCOpenPackItemResponse_ESlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOpenPackItemResponse_ESlotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOpenPackItemResponse_ESlotType(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOpenPackItemResponse_ESlotType.Descriptor instead.
func (CMsgClientToGCOpenPackItemResponse_ESlotType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{22, 1}
}

type CMsgClientToGCSpectateUserResponse_EResult int32

const (
	CMsgClientToGCSpectateUserResponse_eResult_OK            CMsgClientToGCSpectateUserResponse_EResult = 1
	CMsgClientToGCSpectateUserResponse_eResult_NotInGame     CMsgClientToGCSpectateUserResponse_EResult = 2
	CMsgClientToGCSpectateUserResponse_eResult_InternalError CMsgClientToGCSpectateUserResponse_EResult = 3
)

// Enum value maps for CMsgClientToGCSpectateUserResponse_EResult.
var (
	CMsgClientToGCSpectateUserResponse_EResult_name = map[int32]string{
		1: "eResult_OK",
		2: "eResult_NotInGame",
		3: "eResult_InternalError",
	}
	CMsgClientToGCSpectateUserResponse_EResult_value = map[string]int32{
		"eResult_OK":            1,
		"eResult_NotInGame":     2,
		"eResult_InternalError": 3,
	}
)

func (x CMsgClientToGCSpectateUserResponse_EResult) Enum() *CMsgClientToGCSpectateUserResponse_EResult {
	p := new(CMsgClientToGCSpectateUserResponse_EResult)
	*p = x
	return p
}

func (x CMsgClientToGCSpectateUserResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSpectateUserResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[8].Descriptor()
}

func (CMsgClientToGCSpectateUserResponse_EResult) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[8]
}

func (x CMsgClientToGCSpectateUserResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSpectateUserResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSpectateUserResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSpectateUserResponse_EResult.Descriptor instead.
func (CMsgClientToGCSpectateUserResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{24, 0}
}

type CMsgClientToGCGetMatchDetailsResponse_EResult int32

const (
	CMsgClientToGCGetMatchDetailsResponse_eResult_Success       CMsgClientToGCGetMatchDetailsResponse_EResult = 0
	CMsgClientToGCGetMatchDetailsResponse_eResult_InvalidMatch  CMsgClientToGCGetMatchDetailsResponse_EResult = 1
	CMsgClientToGCGetMatchDetailsResponse_eResult_NotAuthorized CMsgClientToGCGetMatchDetailsResponse_EResult = 2
	CMsgClientToGCGetMatchDetailsResponse_eResult_InternalError CMsgClientToGCGetMatchDetailsResponse_EResult = 3
)

// Enum value maps for CMsgClientToGCGetMatchDetailsResponse_EResult.
var (
	CMsgClientToGCGetMatchDetailsResponse_EResult_name = map[int32]string{
		0: "eResult_Success",
		1: "eResult_InvalidMatch",
		2: "eResult_NotAuthorized",
		3: "eResult_InternalError",
	}
	CMsgClientToGCGetMatchDetailsResponse_EResult_value = map[string]int32{
		"eResult_Success":       0,
		"eResult_InvalidMatch":  1,
		"eResult_NotAuthorized": 2,
		"eResult_InternalError": 3,
	}
)

func (x CMsgClientToGCGetMatchDetailsResponse_EResult) Enum() *CMsgClientToGCGetMatchDetailsResponse_EResult {
	p := new(CMsgClientToGCGetMatchDetailsResponse_EResult)
	*p = x
	return p
}

func (x CMsgClientToGCGetMatchDetailsResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetMatchDetailsResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[9].Descriptor()
}

func (CMsgClientToGCGetMatchDetailsResponse_EResult) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[9]
}

func (x CMsgClientToGCGetMatchDetailsResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetMatchDetailsResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetMatchDetailsResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetMatchDetailsResponse_EResult.Descriptor instead.
func (CMsgClientToGCGetMatchDetailsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{28, 0}
}

type CMsgClientToGCJoinGauntletResponse_EResponse int32

const (
	CMsgClientToGCJoinGauntletResponse_k_eInternalError        CMsgClientToGCJoinGauntletResponse_EResponse = 0
	CMsgClientToGCJoinGauntletResponse_k_eSuccess              CMsgClientToGCJoinGauntletResponse_EResponse = 1
	CMsgClientToGCJoinGauntletResponse_k_eInvalidGauntlet      CMsgClientToGCJoinGauntletResponse_EResponse = 2
	CMsgClientToGCJoinGauntletResponse_k_eTooBusy              CMsgClientToGCJoinGauntletResponse_EResponse = 3
	CMsgClientToGCJoinGauntletResponse_k_eAlreadyInGauntlet    CMsgClientToGCJoinGauntletResponse_EResponse = 4
	CMsgClientToGCJoinGauntletResponse_k_eInvalidDeck          CMsgClientToGCJoinGauntletResponse_EResponse = 5
	CMsgClientToGCJoinGauntletResponse_k_eMissingItem          CMsgClientToGCJoinGauntletResponse_EResponse = 6
	CMsgClientToGCJoinGauntletResponse_k_eInvalidEntryCost     CMsgClientToGCJoinGauntletResponse_EResponse = 7
	CMsgClientToGCJoinGauntletResponse_k_eDisabled             CMsgClientToGCJoinGauntletResponse_EResponse = 8
	CMsgClientToGCJoinGauntletResponse_k_eHasUnownedCards      CMsgClientToGCJoinGauntletResponse_EResponse = 9
	CMsgClientToGCJoinGauntletResponse_k_eRateLimited          CMsgClientToGCJoinGauntletResponse_EResponse = 10
	CMsgClientToGCJoinGauntletResponse_k_eRandomDeckNotAllowed CMsgClientToGCJoinGauntletResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCJoinGauntletResponse_EResponse.
var (
	CMsgClientToGCJoinGauntletResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eInvalidGauntlet",
		3:  "k_eTooBusy",
		4:  "k_eAlreadyInGauntlet",
		5:  "k_eInvalidDeck",
		6:  "k_eMissingItem",
		7:  "k_eInvalidEntryCost",
		8:  "k_eDisabled",
		9:  "k_eHasUnownedCards",
		10: "k_eRateLimited",
		11: "k_eRandomDeckNotAllowed",
	}
	CMsgClientToGCJoinGauntletResponse_EResponse_value = map[string]int32{
		"k_eInternalError":        0,
		"k_eSuccess":              1,
		"k_eInvalidGauntlet":      2,
		"k_eTooBusy":              3,
		"k_eAlreadyInGauntlet":    4,
		"k_eInvalidDeck":          5,
		"k_eMissingItem":          6,
		"k_eInvalidEntryCost":     7,
		"k_eDisabled":             8,
		"k_eHasUnownedCards":      9,
		"k_eRateLimited":          10,
		"k_eRandomDeckNotAllowed": 11,
	}
)

func (x CMsgClientToGCJoinGauntletResponse_EResponse) Enum() *CMsgClientToGCJoinGauntletResponse_EResponse {
	p := new(CMsgClientToGCJoinGauntletResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCJoinGauntletResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCJoinGauntletResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCJoinGauntletResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[10]
}

func (x CMsgClientToGCJoinGauntletResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCJoinGauntletResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCJoinGauntletResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCJoinGauntletResponse_EResponse.Descriptor instead.
func (CMsgClientToGCJoinGauntletResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{34, 0}
}

type CMsgClientToGCAbandonGauntletResponse_EResponse int32

const (
	CMsgClientToGCAbandonGauntletResponse_k_eInternalError   CMsgClientToGCAbandonGauntletResponse_EResponse = 0
	CMsgClientToGCAbandonGauntletResponse_k_eSuccess         CMsgClientToGCAbandonGauntletResponse_EResponse = 1
	CMsgClientToGCAbandonGauntletResponse_k_eInvalidGauntlet CMsgClientToGCAbandonGauntletResponse_EResponse = 2
	CMsgClientToGCAbandonGauntletResponse_k_eTooBusy         CMsgClientToGCAbandonGauntletResponse_EResponse = 3
	CMsgClientToGCAbandonGauntletResponse_k_eDisabled        CMsgClientToGCAbandonGauntletResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCAbandonGauntletResponse_EResponse.
var (
	CMsgClientToGCAbandonGauntletResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eInvalidGauntlet",
		3: "k_eTooBusy",
		4: "k_eDisabled",
	}
	CMsgClientToGCAbandonGauntletResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eInvalidGauntlet": 2,
		"k_eTooBusy":         3,
		"k_eDisabled":        4,
	}
)

func (x CMsgClientToGCAbandonGauntletResponse_EResponse) Enum() *CMsgClientToGCAbandonGauntletResponse_EResponse {
	p := new(CMsgClientToGCAbandonGauntletResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCAbandonGauntletResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCAbandonGauntletResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[11].Descriptor()
}

func (CMsgClientToGCAbandonGauntletResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[11]
}

func (x CMsgClientToGCAbandonGauntletResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCAbandonGauntletResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCAbandonGauntletResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCAbandonGauntletResponse_EResponse.Descriptor instead.
func (CMsgClientToGCAbandonGauntletResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{36, 0}
}

type CMsgClientToGCAIGauntletResultResponse_EResponse int32

const (
	CMsgClientToGCAIGauntletResultResponse_k_eInternalError   CMsgClientToGCAIGauntletResultResponse_EResponse = 0
	CMsgClientToGCAIGauntletResultResponse_k_eSuccess         CMsgClientToGCAIGauntletResultResponse_EResponse = 1
	CMsgClientToGCAIGauntletResultResponse_k_eFailed          CMsgClientToGCAIGauntletResultResponse_EResponse = 2
	CMsgClientToGCAIGauntletResultResponse_k_eDisabled        CMsgClientToGCAIGauntletResultResponse_EResponse = 3
	CMsgClientToGCAIGauntletResultResponse_k_eBusy            CMsgClientToGCAIGauntletResultResponse_EResponse = 4
	CMsgClientToGCAIGauntletResultResponse_k_eInvalidKey      CMsgClientToGCAIGauntletResultResponse_EResponse = 5
	CMsgClientToGCAIGauntletResultResponse_k_eMismatchedGames CMsgClientToGCAIGauntletResultResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCAIGauntletResultResponse_EResponse.
var (
	CMsgClientToGCAIGauntletResultResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eFailed",
		3: "k_eDisabled",
		4: "k_eBusy",
		5: "k_eInvalidKey",
		6: "k_eMismatchedGames",
	}
	CMsgClientToGCAIGauntletResultResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eFailed":          2,
		"k_eDisabled":        3,
		"k_eBusy":            4,
		"k_eInvalidKey":      5,
		"k_eMismatchedGames": 6,
	}
)

func (x CMsgClientToGCAIGauntletResultResponse_EResponse) Enum() *CMsgClientToGCAIGauntletResultResponse_EResponse {
	p := new(CMsgClientToGCAIGauntletResultResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCAIGauntletResultResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCAIGauntletResultResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[12].Descriptor()
}

func (CMsgClientToGCAIGauntletResultResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[12]
}

func (x CMsgClientToGCAIGauntletResultResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCAIGauntletResultResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCAIGauntletResultResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCAIGauntletResultResponse_EResponse.Descriptor instead.
func (CMsgClientToGCAIGauntletResultResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{38, 0}
}

type CMsgClientToGCRegisterGauntletDeckResponse_EResponse int32

const (
	CMsgClientToGCRegisterGauntletDeckResponse_k_eInternalError         CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 0
	CMsgClientToGCRegisterGauntletDeckResponse_k_eSuccess               CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 1
	CMsgClientToGCRegisterGauntletDeckResponse_k_eInvalidGauntlet       CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 2
	CMsgClientToGCRegisterGauntletDeckResponse_k_eDeckAlreadyRegistered CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 3
	CMsgClientToGCRegisterGauntletDeckResponse_k_eInvalidDeck           CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 4
	CMsgClientToGCRegisterGauntletDeckResponse_k_eHasUnownedCards       CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 5
	CMsgClientToGCRegisterGauntletDeckResponse_k_eDisabled              CMsgClientToGCRegisterGauntletDeckResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRegisterGauntletDeckResponse_EResponse.
var (
	CMsgClientToGCRegisterGauntletDeckResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eInvalidGauntlet",
		3: "k_eDeckAlreadyRegistered",
		4: "k_eInvalidDeck",
		5: "k_eHasUnownedCards",
		6: "k_eDisabled",
	}
	CMsgClientToGCRegisterGauntletDeckResponse_EResponse_value = map[string]int32{
		"k_eInternalError":         0,
		"k_eSuccess":               1,
		"k_eInvalidGauntlet":       2,
		"k_eDeckAlreadyRegistered": 3,
		"k_eInvalidDeck":           4,
		"k_eHasUnownedCards":       5,
		"k_eDisabled":              6,
	}
)

func (x CMsgClientToGCRegisterGauntletDeckResponse_EResponse) Enum() *CMsgClientToGCRegisterGauntletDeckResponse_EResponse {
	p := new(CMsgClientToGCRegisterGauntletDeckResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRegisterGauntletDeckResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRegisterGauntletDeckResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[13].Descriptor()
}

func (CMsgClientToGCRegisterGauntletDeckResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[13]
}

func (x CMsgClientToGCRegisterGauntletDeckResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRegisterGauntletDeckResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRegisterGauntletDeckResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRegisterGauntletDeckResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRegisterGauntletDeckResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{43, 0}
}

type CMsgClientToGCLimitedGrantResponse_EResponse int32

const (
	CMsgClientToGCLimitedGrantResponse_k_eInternalError  CMsgClientToGCLimitedGrantResponse_EResponse = 0
	CMsgClientToGCLimitedGrantResponse_k_eSuccess        CMsgClientToGCLimitedGrantResponse_EResponse = 1
	CMsgClientToGCLimitedGrantResponse_k_eInvalidFormat  CMsgClientToGCLimitedGrantResponse_EResponse = 2
	CMsgClientToGCLimitedGrantResponse_k_eAlreadyGranted CMsgClientToGCLimitedGrantResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCLimitedGrantResponse_EResponse.
var (
	CMsgClientToGCLimitedGrantResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eInvalidFormat",
		3: "k_eAlreadyGranted",
	}
	CMsgClientToGCLimitedGrantResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eInvalidFormat":  2,
		"k_eAlreadyGranted": 3,
	}
)

func (x CMsgClientToGCLimitedGrantResponse_EResponse) Enum() *CMsgClientToGCLimitedGrantResponse_EResponse {
	p := new(CMsgClientToGCLimitedGrantResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCLimitedGrantResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCLimitedGrantResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[14].Descriptor()
}

func (CMsgClientToGCLimitedGrantResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[14]
}

func (x CMsgClientToGCLimitedGrantResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCLimitedGrantResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCLimitedGrantResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCLimitedGrantResponse_EResponse.Descriptor instead.
func (CMsgClientToGCLimitedGrantResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{45, 0}
}

type CMsgClientToGCLimitedGrantChoiceResponse_EResponse int32

const (
	CMsgClientToGCLimitedGrantChoiceResponse_k_eInternalError  CMsgClientToGCLimitedGrantChoiceResponse_EResponse = 0
	CMsgClientToGCLimitedGrantChoiceResponse_k_eSuccess        CMsgClientToGCLimitedGrantChoiceResponse_EResponse = 1
	CMsgClientToGCLimitedGrantChoiceResponse_k_eInvalidFormat  CMsgClientToGCLimitedGrantChoiceResponse_EResponse = 2
	CMsgClientToGCLimitedGrantChoiceResponse_k_eInvalidChoices CMsgClientToGCLimitedGrantChoiceResponse_EResponse = 3
	CMsgClientToGCLimitedGrantChoiceResponse_k_eAlreadyGranted CMsgClientToGCLimitedGrantChoiceResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCLimitedGrantChoiceResponse_EResponse.
var (
	CMsgClientToGCLimitedGrantChoiceResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eInvalidFormat",
		3: "k_eInvalidChoices",
		4: "k_eAlreadyGranted",
	}
	CMsgClientToGCLimitedGrantChoiceResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eInvalidFormat":  2,
		"k_eInvalidChoices": 3,
		"k_eAlreadyGranted": 4,
	}
)

func (x CMsgClientToGCLimitedGrantChoiceResponse_EResponse) Enum() *CMsgClientToGCLimitedGrantChoiceResponse_EResponse {
	p := new(CMsgClientToGCLimitedGrantChoiceResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCLimitedGrantChoiceResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCLimitedGrantChoiceResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[15].Descriptor()
}

func (CMsgClientToGCLimitedGrantChoiceResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[15]
}

func (x CMsgClientToGCLimitedGrantChoiceResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCLimitedGrantChoiceResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCLimitedGrantChoiceResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCLimitedGrantChoiceResponse_EResponse.Descriptor instead.
func (CMsgClientToGCLimitedGrantChoiceResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{47, 0}
}

type CMsgClientToGCPrivateLobbyCreateResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyCreateResponse_k_eInternalError  CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyCreateResponse_k_eSuccess        CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyCreateResponse_k_eAlreadyInLobby CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyCreateResponse_k_eDisabled       CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyCreateResponse_k_eInvalidVersion CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyCreateResponse_k_eNoRegionPings  CMsgClientToGCPrivateLobbyCreateResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCPrivateLobbyCreateResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyCreateResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eAlreadyInLobby",
		3: "k_eDisabled",
		4: "k_eInvalidVersion",
		5: "k_eNoRegionPings",
	}
	CMsgClientToGCPrivateLobbyCreateResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eAlreadyInLobby": 2,
		"k_eDisabled":       3,
		"k_eInvalidVersion": 4,
		"k_eNoRegionPings":  5,
	}
)

func (x CMsgClientToGCPrivateLobbyCreateResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyCreateResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyCreateResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyCreateResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyCreateResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[16].Descriptor()
}

func (CMsgClientToGCPrivateLobbyCreateResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[16]
}

func (x CMsgClientToGCPrivateLobbyCreateResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyCreateResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyCreateResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyCreateResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyCreateResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{51, 0}
}

type CMsgClientToGCPrivateLobbyLeaveResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyLeaveResponse_k_eInternalError CMsgClientToGCPrivateLobbyLeaveResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyLeaveResponse_k_eSuccess       CMsgClientToGCPrivateLobbyLeaveResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyLeaveResponse_k_eNotInLobby    CMsgClientToGCPrivateLobbyLeaveResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyLeaveResponse_k_eInMatchMaking CMsgClientToGCPrivateLobbyLeaveResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCPrivateLobbyLeaveResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyLeaveResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eNotInLobby",
		3: "k_eInMatchMaking",
	}
	CMsgClientToGCPrivateLobbyLeaveResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eNotInLobby":    2,
		"k_eInMatchMaking": 3,
	}
)

func (x CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyLeaveResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyLeaveResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[17].Descriptor()
}

func (CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[17]
}

func (x CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyLeaveResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyLeaveResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyLeaveResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{53, 0}
}

type CMsgClientToGCPrivateLobbyJoinResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyJoinResponse_k_eInternalError      CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyJoinResponse_k_eSuccess            CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyJoinResponse_k_eAlreadyInLobby     CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyJoinResponse_k_eDisabled           CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyJoinResponse_k_eInvalidLobbyID     CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyJoinResponse_k_eInvalidPermissions CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 5
	CMsgClientToGCPrivateLobbyJoinResponse_k_eInvalidVersion     CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 6
	CMsgClientToGCPrivateLobbyJoinResponse_k_eNoRegionPings      CMsgClientToGCPrivateLobbyJoinResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCPrivateLobbyJoinResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyJoinResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eAlreadyInLobby",
		3: "k_eDisabled",
		4: "k_eInvalidLobbyID",
		5: "k_eInvalidPermissions",
		6: "k_eInvalidVersion",
		7: "k_eNoRegionPings",
	}
	CMsgClientToGCPrivateLobbyJoinResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eAlreadyInLobby":     2,
		"k_eDisabled":           3,
		"k_eInvalidLobbyID":     4,
		"k_eInvalidPermissions": 5,
		"k_eInvalidVersion":     6,
		"k_eNoRegionPings":      7,
	}
)

func (x CMsgClientToGCPrivateLobbyJoinResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyJoinResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyJoinResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyJoinResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyJoinResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[18].Descriptor()
}

func (CMsgClientToGCPrivateLobbyJoinResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[18]
}

func (x CMsgClientToGCPrivateLobbyJoinResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyJoinResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyJoinResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoinResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyJoinResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{55, 0}
}

type CMsgClientToGCPrivateLobbyAction_EAction int32

const (
	CMsgClientToGCPrivateLobbyAction_k_eSetTeam         CMsgClientToGCPrivateLobbyAction_EAction = 0
	CMsgClientToGCPrivateLobbyAction_k_eSetDeck         CMsgClientToGCPrivateLobbyAction_EAction = 1
	CMsgClientToGCPrivateLobbyAction_k_eKickUser        CMsgClientToGCPrivateLobbyAction_EAction = 3
	CMsgClientToGCPrivateLobbyAction_k_eCancelInvite    CMsgClientToGCPrivateLobbyAction_EAction = 4
	CMsgClientToGCPrivateLobbyAction_k_eCancelFindMatch CMsgClientToGCPrivateLobbyAction_EAction = 5
	CMsgClientToGCPrivateLobbyAction_k_eSetDecksVisible CMsgClientToGCPrivateLobbyAction_EAction = 6
	CMsgClientToGCPrivateLobbyAction_k_eSetTimerMode    CMsgClientToGCPrivateLobbyAction_EAction = 7
	CMsgClientToGCPrivateLobbyAction_k_eShareDeck       CMsgClientToGCPrivateLobbyAction_EAction = 8
	CMsgClientToGCPrivateLobbyAction_k_eSetGameMode     CMsgClientToGCPrivateLobbyAction_EAction = 9
	CMsgClientToGCPrivateLobbyAction_k_eSetReady        CMsgClientToGCPrivateLobbyAction_EAction = 10
)

// Enum value maps for CMsgClientToGCPrivateLobbyAction_EAction.
var (
	CMsgClientToGCPrivateLobbyAction_EAction_name = map[int32]string{
		0:  "k_eSetTeam",
		1:  "k_eSetDeck",
		3:  "k_eKickUser",
		4:  "k_eCancelInvite",
		5:  "k_eCancelFindMatch",
		6:  "k_eSetDecksVisible",
		7:  "k_eSetTimerMode",
		8:  "k_eShareDeck",
		9:  "k_eSetGameMode",
		10: "k_eSetReady",
	}
	CMsgClientToGCPrivateLobbyAction_EAction_value = map[string]int32{
		"k_eSetTeam":         0,
		"k_eSetDeck":         1,
		"k_eKickUser":        3,
		"k_eCancelInvite":    4,
		"k_eCancelFindMatch": 5,
		"k_eSetDecksVisible": 6,
		"k_eSetTimerMode":    7,
		"k_eShareDeck":       8,
		"k_eSetGameMode":     9,
		"k_eSetReady":        10,
	}
)

func (x CMsgClientToGCPrivateLobbyAction_EAction) Enum() *CMsgClientToGCPrivateLobbyAction_EAction {
	p := new(CMsgClientToGCPrivateLobbyAction_EAction)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyAction_EAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyAction_EAction) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[19].Descriptor()
}

func (CMsgClientToGCPrivateLobbyAction_EAction) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[19]
}

func (x CMsgClientToGCPrivateLobbyAction_EAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyAction_EAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyAction_EAction(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyAction_EAction.Descriptor instead.
func (CMsgClientToGCPrivateLobbyAction_EAction) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{56, 0}
}

type CMsgClientToGCPrivateLobbyActionResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyActionResponse_k_eInternalError      CMsgClientToGCPrivateLobbyActionResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyActionResponse_k_eSuccess            CMsgClientToGCPrivateLobbyActionResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyActionResponse_k_eInvalidLobbyID     CMsgClientToGCPrivateLobbyActionResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyActionResponse_k_eInvalidPermissions CMsgClientToGCPrivateLobbyActionResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyActionResponse_k_eInvalidTarget      CMsgClientToGCPrivateLobbyActionResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyActionResponse_k_eInvalidValue       CMsgClientToGCPrivateLobbyActionResponse_EResponse = 5
	CMsgClientToGCPrivateLobbyActionResponse_k_eInMatchMaking      CMsgClientToGCPrivateLobbyActionResponse_EResponse = 6
	CMsgClientToGCPrivateLobbyActionResponse_k_eInMatch            CMsgClientToGCPrivateLobbyActionResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCPrivateLobbyActionResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyActionResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eInvalidLobbyID",
		3: "k_eInvalidPermissions",
		4: "k_eInvalidTarget",
		5: "k_eInvalidValue",
		6: "k_eInMatchMaking",
		7: "k_eInMatch",
	}
	CMsgClientToGCPrivateLobbyActionResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eInvalidLobbyID":     2,
		"k_eInvalidPermissions": 3,
		"k_eInvalidTarget":      4,
		"k_eInvalidValue":       5,
		"k_eInMatchMaking":      6,
		"k_eInMatch":            7,
	}
)

func (x CMsgClientToGCPrivateLobbyActionResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyActionResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyActionResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyActionResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyActionResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[20].Descriptor()
}

func (CMsgClientToGCPrivateLobbyActionResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[20]
}

func (x CMsgClientToGCPrivateLobbyActionResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyActionResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyActionResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyActionResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyActionResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{57, 0}
}

type CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInternalError      CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eSuccess            CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eDisabled           CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInvalidLobbyID     CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInvalidPermissions CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_ePlayersMissingDeck CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 5
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInMatchmaking      CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 6
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInMatch            CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 7
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eMissingPlayer      CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 8
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eUnownedCards       CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 9
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInvalidVersion     CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 10
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_ePlayersNotReady    CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 11
	CMsgClientToGCPrivateLobbyStartMatchResponse_k_eCannotSelectRegion CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse = 12
)

// Enum value maps for CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eInvalidLobbyID",
		4:  "k_eInvalidPermissions",
		5:  "k_ePlayersMissingDeck",
		6:  "k_eInMatchmaking",
		7:  "k_eInMatch",
		8:  "k_eMissingPlayer",
		9:  "k_eUnownedCards",
		10: "k_eInvalidVersion",
		11: "k_ePlayersNotReady",
		12: "k_eCannotSelectRegion",
	}
	CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eInvalidLobbyID":     3,
		"k_eInvalidPermissions": 4,
		"k_ePlayersMissingDeck": 5,
		"k_eInMatchmaking":      6,
		"k_eInMatch":            7,
		"k_eMissingPlayer":      8,
		"k_eUnownedCards":       9,
		"k_eInvalidVersion":     10,
		"k_ePlayersNotReady":    11,
		"k_eCannotSelectRegion": 12,
	}
)

func (x CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[21].Descriptor()
}

func (CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[21]
}

func (x CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{59, 0}
}

type CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eInternalError      CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eSuccess            CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eAlreadyInvited     CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eInvalidPermissions CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eInvalidLobbyID     CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eDisabled           CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 5
	CMsgClientToGCPrivateLobbyInviteUserResponse_k_eTooManyInvites     CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eAlreadyInvited",
		3: "k_eInvalidPermissions",
		4: "k_eInvalidLobbyID",
		5: "k_eDisabled",
		6: "k_eTooManyInvites",
	}
	CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eAlreadyInvited":     2,
		"k_eInvalidPermissions": 3,
		"k_eInvalidLobbyID":     4,
		"k_eDisabled":           5,
		"k_eTooManyInvites":     6,
	}
)

func (x CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[22].Descriptor()
}

func (CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[22]
}

func (x CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{61, 0}
}

type CMsgClientToGCPrivateLobbyChallengeResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eSuccess          CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eTargetNotFriends CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eTargetInMatch    CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eTargetOffline    CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eInternalError    CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 4
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eCannotMatchmake  CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 5
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eInvalidVersion   CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 6
	CMsgClientToGCPrivateLobbyChallengeResponse_k_eNoRegionPings    CMsgClientToGCPrivateLobbyChallengeResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCPrivateLobbyChallengeResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyChallengeResponse_EResponse_name = map[int32]string{
		0: "k_eSuccess",
		1: "k_eTargetNotFriends",
		2: "k_eTargetInMatch",
		3: "k_eTargetOffline",
		4: "k_eInternalError",
		5: "k_eCannotMatchmake",
		6: "k_eInvalidVersion",
		7: "k_eNoRegionPings",
	}
	CMsgClientToGCPrivateLobbyChallengeResponse_EResponse_value = map[string]int32{
		"k_eSuccess":          0,
		"k_eTargetNotFriends": 1,
		"k_eTargetInMatch":    2,
		"k_eTargetOffline":    3,
		"k_eInternalError":    4,
		"k_eCannotMatchmake":  5,
		"k_eInvalidVersion":   6,
		"k_eNoRegionPings":    7,
	}
)

func (x CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyChallengeResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyChallengeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[23].Descriptor()
}

func (CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[23]
}

func (x CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyChallengeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyChallengeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyChallengeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{63, 0}
}

type CMsgGCToClientPrivateLobbyEvent_EEvent int32

const (
	CMsgGCToClientPrivateLobbyEvent_k_ePlayerKicked                      CMsgGCToClientPrivateLobbyEvent_EEvent = 1
	CMsgGCToClientPrivateLobbyEvent_k_eDeckShared                        CMsgGCToClientPrivateLobbyEvent_EEvent = 2
	CMsgGCToClientPrivateLobbyEvent_k_eJoinedLobby                       CMsgGCToClientPrivateLobbyEvent_EEvent = 3
	CMsgGCToClientPrivateLobbyEvent_k_eMatchCompleted                    CMsgGCToClientPrivateLobbyEvent_EEvent = 4
	CMsgGCToClientPrivateLobbyEvent_k_eMatchMakingStopped_User           CMsgGCToClientPrivateLobbyEvent_EEvent = 5
	CMsgGCToClientPrivateLobbyEvent_k_eMatchMakingStopped_Version        CMsgGCToClientPrivateLobbyEvent_EEvent = 6
	CMsgGCToClientPrivateLobbyEvent_k_eMatchMakingStopped_NoServerRegion CMsgGCToClientPrivateLobbyEvent_EEvent = 7
	CMsgGCToClientPrivateLobbyEvent_k_eLeftLobby                         CMsgGCToClientPrivateLobbyEvent_EEvent = 8
	CMsgGCToClientPrivateLobbyEvent_k_eDeclinedInvite                    CMsgGCToClientPrivateLobbyEvent_EEvent = 9
)

// Enum value maps for CMsgGCToClientPrivateLobbyEvent_EEvent.
var (
	CMsgGCToClientPrivateLobbyEvent_EEvent_name = map[int32]string{
		1: "k_ePlayerKicked",
		2: "k_eDeckShared",
		3: "k_eJoinedLobby",
		4: "k_eMatchCompleted",
		5: "k_eMatchMakingStopped_User",
		6: "k_eMatchMakingStopped_Version",
		7: "k_eMatchMakingStopped_NoServerRegion",
		8: "k_eLeftLobby",
		9: "k_eDeclinedInvite",
	}
	CMsgGCToClientPrivateLobbyEvent_EEvent_value = map[string]int32{
		"k_ePlayerKicked":                      1,
		"k_eDeckShared":                        2,
		"k_eJoinedLobby":                       3,
		"k_eMatchCompleted":                    4,
		"k_eMatchMakingStopped_User":           5,
		"k_eMatchMakingStopped_Version":        6,
		"k_eMatchMakingStopped_NoServerRegion": 7,
		"k_eLeftLobby":                         8,
		"k_eDeclinedInvite":                    9,
	}
)

func (x CMsgGCToClientPrivateLobbyEvent_EEvent) Enum() *CMsgGCToClientPrivateLobbyEvent_EEvent {
	p := new(CMsgGCToClientPrivateLobbyEvent_EEvent)
	*p = x
	return p
}

func (x CMsgGCToClientPrivateLobbyEvent_EEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientPrivateLobbyEvent_EEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[24].Descriptor()
}

func (CMsgGCToClientPrivateLobbyEvent_EEvent) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[24]
}

func (x CMsgGCToClientPrivateLobbyEvent_EEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientPrivateLobbyEvent_EEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientPrivateLobbyEvent_EEvent(num)
	return nil
}

// Deprecated: Use CMsgGCToClientPrivateLobbyEvent_EEvent.Descriptor instead.
func (CMsgGCToClientPrivateLobbyEvent_EEvent) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{64, 0}
}

type CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse int32

const (
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eSuccess             CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse = 0
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eInternalError       CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse = 1
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eDisabled            CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse = 2
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eNoChatRoomAvailable CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse = 3
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eInvalidLobbyID      CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse.
var (
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse_name = map[int32]string{
		0: "k_eSuccess",
		1: "k_eInternalError",
		2: "k_eDisabled",
		3: "k_eNoChatRoomAvailable",
		4: "k_eInvalidLobbyID",
	}
	CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse_value = map[string]int32{
		"k_eSuccess":             0,
		"k_eInternalError":       1,
		"k_eDisabled":            2,
		"k_eNoChatRoomAvailable": 3,
		"k_eInvalidLobbyID":      4,
	}
)

func (x CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) Enum() *CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse {
	p := new(CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[25].Descriptor()
}

func (CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[25]
}

func (x CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{67, 0}
}

type CMsgClientToGCRecycleCardsResponse_EResponse int32

const (
	CMsgClientToGCRecycleCardsResponse_k_eInternalError    CMsgClientToGCRecycleCardsResponse_EResponse = 0
	CMsgClientToGCRecycleCardsResponse_k_eSuccess          CMsgClientToGCRecycleCardsResponse_EResponse = 1
	CMsgClientToGCRecycleCardsResponse_k_eMissingItems     CMsgClientToGCRecycleCardsResponse_EResponse = 2
	CMsgClientToGCRecycleCardsResponse_k_eIncorrectVersion CMsgClientToGCRecycleCardsResponse_EResponse = 3
	CMsgClientToGCRecycleCardsResponse_k_eDisabled         CMsgClientToGCRecycleCardsResponse_EResponse = 4
	CMsgClientToGCRecycleCardsResponse_k_eInvalidItem      CMsgClientToGCRecycleCardsResponse_EResponse = 5
	CMsgClientToGCRecycleCardsResponse_k_eTooManyItems     CMsgClientToGCRecycleCardsResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRecycleCardsResponse_EResponse.
var (
	CMsgClientToGCRecycleCardsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eMissingItems",
		3: "k_eIncorrectVersion",
		4: "k_eDisabled",
		5: "k_eInvalidItem",
		6: "k_eTooManyItems",
	}
	CMsgClientToGCRecycleCardsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eMissingItems":     2,
		"k_eIncorrectVersion": 3,
		"k_eDisabled":         4,
		"k_eInvalidItem":      5,
		"k_eTooManyItems":     6,
	}
)

func (x CMsgClientToGCRecycleCardsResponse_EResponse) Enum() *CMsgClientToGCRecycleCardsResponse_EResponse {
	p := new(CMsgClientToGCRecycleCardsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRecycleCardsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRecycleCardsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[26].Descriptor()
}

func (CMsgClientToGCRecycleCardsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[26]
}

func (x CMsgClientToGCRecycleCardsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRecycleCardsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRecycleCardsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRecycleCardsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRecycleCardsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{73, 0}
}

type CMsgClientToGCTourneyGetInfoResponse_EResponse int32

const (
	CMsgClientToGCTourneyGetInfoResponse_k_eInternalError     CMsgClientToGCTourneyGetInfoResponse_EResponse = 0
	CMsgClientToGCTourneyGetInfoResponse_k_eInvalidID         CMsgClientToGCTourneyGetInfoResponse_EResponse = 1
	CMsgClientToGCTourneyGetInfoResponse_k_eMissingPermission CMsgClientToGCTourneyGetInfoResponse_EResponse = 2
	CMsgClientToGCTourneyGetInfoResponse_k_eSuccess           CMsgClientToGCTourneyGetInfoResponse_EResponse = 3
	CMsgClientToGCTourneyGetInfoResponse_k_eTooBusy           CMsgClientToGCTourneyGetInfoResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyGetInfoResponse_EResponse.
var (
	CMsgClientToGCTourneyGetInfoResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eInvalidID",
		2: "k_eMissingPermission",
		3: "k_eSuccess",
		4: "k_eTooBusy",
	}
	CMsgClientToGCTourneyGetInfoResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eInvalidID":         1,
		"k_eMissingPermission": 2,
		"k_eSuccess":           3,
		"k_eTooBusy":           4,
	}
)

func (x CMsgClientToGCTourneyGetInfoResponse_EResponse) Enum() *CMsgClientToGCTourneyGetInfoResponse_EResponse {
	p := new(CMsgClientToGCTourneyGetInfoResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyGetInfoResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyGetInfoResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[27].Descriptor()
}

func (CMsgClientToGCTourneyGetInfoResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[27]
}

func (x CMsgClientToGCTourneyGetInfoResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyGetInfoResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyGetInfoResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyGetInfoResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyGetInfoResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{77, 0}
}

type CMsgCreateTourneyPhase_ESwissMatches int32

const (
	CMsgCreateTourneyPhase_k_eBestOfOne        CMsgCreateTourneyPhase_ESwissMatches = 0
	CMsgCreateTourneyPhase_k_eOneMatch         CMsgCreateTourneyPhase_ESwissMatches = 1
	CMsgCreateTourneyPhase_k_eTwoMatches       CMsgCreateTourneyPhase_ESwissMatches = 2
	CMsgCreateTourneyPhase_k_eBestOfThree      CMsgCreateTourneyPhase_ESwissMatches = 3
	CMsgCreateTourneyPhase_k_eBestOfThree_Ties CMsgCreateTourneyPhase_ESwissMatches = 4
	CMsgCreateTourneyPhase_k_eBestOfFive       CMsgCreateTourneyPhase_ESwissMatches = 5
	CMsgCreateTourneyPhase_k_eBestOfFive_Ties  CMsgCreateTourneyPhase_ESwissMatches = 6
)

// Enum value maps for CMsgCreateTourneyPhase_ESwissMatches.
var (
	CMsgCreateTourneyPhase_ESwissMatches_name = map[int32]string{
		0: "k_eBestOfOne",
		1: "k_eOneMatch",
		2: "k_eTwoMatches",
		3: "k_eBestOfThree",
		4: "k_eBestOfThree_Ties",
		5: "k_eBestOfFive",
		6: "k_eBestOfFive_Ties",
	}
	CMsgCreateTourneyPhase_ESwissMatches_value = map[string]int32{
		"k_eBestOfOne":        0,
		"k_eOneMatch":         1,
		"k_eTwoMatches":       2,
		"k_eBestOfThree":      3,
		"k_eBestOfThree_Ties": 4,
		"k_eBestOfFive":       5,
		"k_eBestOfFive_Ties":  6,
	}
)

func (x CMsgCreateTourneyPhase_ESwissMatches) Enum() *CMsgCreateTourneyPhase_ESwissMatches {
	p := new(CMsgCreateTourneyPhase_ESwissMatches)
	*p = x
	return p
}

func (x CMsgCreateTourneyPhase_ESwissMatches) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgCreateTourneyPhase_ESwissMatches) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[28].Descriptor()
}

func (CMsgCreateTourneyPhase_ESwissMatches) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[28]
}

func (x CMsgCreateTourneyPhase_ESwissMatches) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgCreateTourneyPhase_ESwissMatches) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgCreateTourneyPhase_ESwissMatches(num)
	return nil
}

// Deprecated: Use CMsgCreateTourneyPhase_ESwissMatches.Descriptor instead.
func (CMsgCreateTourneyPhase_ESwissMatches) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 0}
}

type CMsgCreateTourneyPhase_ESwissScoring int32

const (
	CMsgCreateTourneyPhase_k_eWinsThreePoints CMsgCreateTourneyPhase_ESwissScoring = 0
	CMsgCreateTourneyPhase_k_eWinsTwoPoints   CMsgCreateTourneyPhase_ESwissScoring = 1
)

// Enum value maps for CMsgCreateTourneyPhase_ESwissScoring.
var (
	CMsgCreateTourneyPhase_ESwissScoring_name = map[int32]string{
		0: "k_eWinsThreePoints",
		1: "k_eWinsTwoPoints",
	}
	CMsgCreateTourneyPhase_ESwissScoring_value = map[string]int32{
		"k_eWinsThreePoints": 0,
		"k_eWinsTwoPoints":   1,
	}
)

func (x CMsgCreateTourneyPhase_ESwissScoring) Enum() *CMsgCreateTourneyPhase_ESwissScoring {
	p := new(CMsgCreateTourneyPhase_ESwissScoring)
	*p = x
	return p
}

func (x CMsgCreateTourneyPhase_ESwissScoring) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgCreateTourneyPhase_ESwissScoring) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[29].Descriptor()
}

func (CMsgCreateTourneyPhase_ESwissScoring) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[29]
}

func (x CMsgCreateTourneyPhase_ESwissScoring) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgCreateTourneyPhase_ESwissScoring) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgCreateTourneyPhase_ESwissScoring(num)
	return nil
}

// Deprecated: Use CMsgCreateTourneyPhase_ESwissScoring.Descriptor instead.
func (CMsgCreateTourneyPhase_ESwissScoring) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 1}
}

type CMsgCreateTourneyPhase_EDeckMode int32

const (
	CMsgCreateTourneyPhase_k_eUsePreviousPhase  CMsgCreateTourneyPhase_EDeckMode = 0
	CMsgCreateTourneyPhase_k_eLimited           CMsgCreateTourneyPhase_EDeckMode = 1
	CMsgCreateTourneyPhase_k_eAdditionalLimited CMsgCreateTourneyPhase_EDeckMode = 2
	CMsgCreateTourneyPhase_k_eConstructed       CMsgCreateTourneyPhase_EDeckMode = 3
	CMsgCreateTourneyPhase_k_eRandom            CMsgCreateTourneyPhase_EDeckMode = 4
)

// Enum value maps for CMsgCreateTourneyPhase_EDeckMode.
var (
	CMsgCreateTourneyPhase_EDeckMode_name = map[int32]string{
		0: "k_eUsePreviousPhase",
		1: "k_eLimited",
		2: "k_eAdditionalLimited",
		3: "k_eConstructed",
		4: "k_eRandom",
	}
	CMsgCreateTourneyPhase_EDeckMode_value = map[string]int32{
		"k_eUsePreviousPhase":  0,
		"k_eLimited":           1,
		"k_eAdditionalLimited": 2,
		"k_eConstructed":       3,
		"k_eRandom":            4,
	}
)

func (x CMsgCreateTourneyPhase_EDeckMode) Enum() *CMsgCreateTourneyPhase_EDeckMode {
	p := new(CMsgCreateTourneyPhase_EDeckMode)
	*p = x
	return p
}

func (x CMsgCreateTourneyPhase_EDeckMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgCreateTourneyPhase_EDeckMode) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[30].Descriptor()
}

func (CMsgCreateTourneyPhase_EDeckMode) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[30]
}

func (x CMsgCreateTourneyPhase_EDeckMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgCreateTourneyPhase_EDeckMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgCreateTourneyPhase_EDeckMode(num)
	return nil
}

// Deprecated: Use CMsgCreateTourneyPhase_EDeckMode.Descriptor instead.
func (CMsgCreateTourneyPhase_EDeckMode) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 2}
}

type CMsgClientToGCCreateTourney_EPrivacy int32

const (
	CMsgClientToGCCreateTourney_k_ePrivacy_Default     CMsgClientToGCCreateTourney_EPrivacy = 0
	CMsgClientToGCCreateTourney_k_ePrivacy_Public      CMsgClientToGCCreateTourney_EPrivacy = 1
	CMsgClientToGCCreateTourney_k_ePrivacy_MembersOnly CMsgClientToGCCreateTourney_EPrivacy = 2
)

// Enum value maps for CMsgClientToGCCreateTourney_EPrivacy.
var (
	CMsgClientToGCCreateTourney_EPrivacy_name = map[int32]string{
		0: "k_ePrivacy_Default",
		1: "k_ePrivacy_Public",
		2: "k_ePrivacy_MembersOnly",
	}
	CMsgClientToGCCreateTourney_EPrivacy_value = map[string]int32{
		"k_ePrivacy_Default":     0,
		"k_ePrivacy_Public":      1,
		"k_ePrivacy_MembersOnly": 2,
	}
)

func (x CMsgClientToGCCreateTourney_EPrivacy) Enum() *CMsgClientToGCCreateTourney_EPrivacy {
	p := new(CMsgClientToGCCreateTourney_EPrivacy)
	*p = x
	return p
}

func (x CMsgClientToGCCreateTourney_EPrivacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreateTourney_EPrivacy) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[31].Descriptor()
}

func (CMsgClientToGCCreateTourney_EPrivacy) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[31]
}

func (x CMsgClientToGCCreateTourney_EPrivacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreateTourney_EPrivacy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreateTourney_EPrivacy(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreateTourney_EPrivacy.Descriptor instead.
func (CMsgClientToGCCreateTourney_EPrivacy) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{83, 0}
}

type CMsgClientToGCCreateTourneyResponse_EResponse int32

const (
	CMsgClientToGCCreateTourneyResponse_k_eInternalError     CMsgClientToGCCreateTourneyResponse_EResponse = 0
	CMsgClientToGCCreateTourneyResponse_k_eSuccess           CMsgClientToGCCreateTourneyResponse_EResponse = 1
	CMsgClientToGCCreateTourneyResponse_k_eRateLimited       CMsgClientToGCCreateTourneyResponse_EResponse = 2
	CMsgClientToGCCreateTourneyResponse_k_eInvalidParams     CMsgClientToGCCreateTourneyResponse_EResponse = 3
	CMsgClientToGCCreateTourneyResponse_k_eDisabled          CMsgClientToGCCreateTourneyResponse_EResponse = 4
	CMsgClientToGCCreateTourneyResponse_k_eInTooManyTourneys CMsgClientToGCCreateTourneyResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCCreateTourneyResponse_EResponse.
var (
	CMsgClientToGCCreateTourneyResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eRateLimited",
		3: "k_eInvalidParams",
		4: "k_eDisabled",
		5: "k_eInTooManyTourneys",
	}
	CMsgClientToGCCreateTourneyResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eSuccess":           1,
		"k_eRateLimited":       2,
		"k_eInvalidParams":     3,
		"k_eDisabled":          4,
		"k_eInTooManyTourneys": 5,
	}
)

func (x CMsgClientToGCCreateTourneyResponse_EResponse) Enum() *CMsgClientToGCCreateTourneyResponse_EResponse {
	p := new(CMsgClientToGCCreateTourneyResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCCreateTourneyResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreateTourneyResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[32].Descriptor()
}

func (CMsgClientToGCCreateTourneyResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[32]
}

func (x CMsgClientToGCCreateTourneyResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreateTourneyResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreateTourneyResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreateTourneyResponse_EResponse.Descriptor instead.
func (CMsgClientToGCCreateTourneyResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{84, 0}
}

type CMsgClientToGCTourneyAcceptInviteResponse_EResponse int32

const (
	CMsgClientToGCTourneyAcceptInviteResponse_k_eInternalError      CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 0
	CMsgClientToGCTourneyAcceptInviteResponse_k_eSuccess            CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 1
	CMsgClientToGCTourneyAcceptInviteResponse_k_eDisabled           CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 2
	CMsgClientToGCTourneyAcceptInviteResponse_k_eTourneyJoinClosed  CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 3
	CMsgClientToGCTourneyAcceptInviteResponse_k_eMissingPermissions CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 4
	CMsgClientToGCTourneyAcceptInviteResponse_k_eTourneyFull        CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 5
	CMsgClientToGCTourneyAcceptInviteResponse_k_eInTooManyTourneys  CMsgClientToGCTourneyAcceptInviteResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCTourneyAcceptInviteResponse_EResponse.
var (
	CMsgClientToGCTourneyAcceptInviteResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTourneyJoinClosed",
		4: "k_eMissingPermissions",
		5: "k_eTourneyFull",
		6: "k_eInTooManyTourneys",
	}
	CMsgClientToGCTourneyAcceptInviteResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eTourneyJoinClosed":  3,
		"k_eMissingPermissions": 4,
		"k_eTourneyFull":        5,
		"k_eInTooManyTourneys":  6,
	}
)

func (x CMsgClientToGCTourneyAcceptInviteResponse_EResponse) Enum() *CMsgClientToGCTourneyAcceptInviteResponse_EResponse {
	p := new(CMsgClientToGCTourneyAcceptInviteResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAcceptInviteResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAcceptInviteResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[33].Descriptor()
}

func (CMsgClientToGCTourneyAcceptInviteResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[33]
}

func (x CMsgClientToGCTourneyAcceptInviteResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAcceptInviteResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAcceptInviteResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAcceptInviteResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAcceptInviteResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{86, 0}
}

type CMsgClientToGCTourneyRejectInviteResponse_EResponse int32

const (
	CMsgClientToGCTourneyRejectInviteResponse_k_eInternalError CMsgClientToGCTourneyRejectInviteResponse_EResponse = 0
	CMsgClientToGCTourneyRejectInviteResponse_k_eSuccess       CMsgClientToGCTourneyRejectInviteResponse_EResponse = 1
	CMsgClientToGCTourneyRejectInviteResponse_k_eDisabled      CMsgClientToGCTourneyRejectInviteResponse_EResponse = 2
)

// Enum value maps for CMsgClientToGCTourneyRejectInviteResponse_EResponse.
var (
	CMsgClientToGCTourneyRejectInviteResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
	}
	CMsgClientToGCTourneyRejectInviteResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
	}
)

func (x CMsgClientToGCTourneyRejectInviteResponse_EResponse) Enum() *CMsgClientToGCTourneyRejectInviteResponse_EResponse {
	p := new(CMsgClientToGCTourneyRejectInviteResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRejectInviteResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRejectInviteResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[34].Descriptor()
}

func (CMsgClientToGCTourneyRejectInviteResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[34]
}

func (x CMsgClientToGCTourneyRejectInviteResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRejectInviteResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRejectInviteResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRejectInviteResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRejectInviteResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{88, 0}
}

type CMsgClientToGCTourneyRevokeInviteResponse_EResponse int32

const (
	CMsgClientToGCTourneyRevokeInviteResponse_k_eInternalError      CMsgClientToGCTourneyRevokeInviteResponse_EResponse = 0
	CMsgClientToGCTourneyRevokeInviteResponse_k_eSuccess            CMsgClientToGCTourneyRevokeInviteResponse_EResponse = 1
	CMsgClientToGCTourneyRevokeInviteResponse_k_eDisabled           CMsgClientToGCTourneyRevokeInviteResponse_EResponse = 2
	CMsgClientToGCTourneyRevokeInviteResponse_k_eMissingPermissions CMsgClientToGCTourneyRevokeInviteResponse_EResponse = 3
	CMsgClientToGCTourneyRevokeInviteResponse_k_eMissingInvite      CMsgClientToGCTourneyRevokeInviteResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyRevokeInviteResponse_EResponse.
var (
	CMsgClientToGCTourneyRevokeInviteResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eMissingInvite",
	}
	CMsgClientToGCTourneyRevokeInviteResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eMissingInvite":      4,
	}
)

func (x CMsgClientToGCTourneyRevokeInviteResponse_EResponse) Enum() *CMsgClientToGCTourneyRevokeInviteResponse_EResponse {
	p := new(CMsgClientToGCTourneyRevokeInviteResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRevokeInviteResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRevokeInviteResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[35].Descriptor()
}

func (CMsgClientToGCTourneyRevokeInviteResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[35]
}

func (x CMsgClientToGCTourneyRevokeInviteResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRevokeInviteResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRevokeInviteResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRevokeInviteResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRevokeInviteResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{90, 0}
}

type CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eInternalError       CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 0
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eSuccess             CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 1
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eDisabled            CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 2
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eMissingPermissions  CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 3
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eInsufficientPlayers CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 4
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eIncorrectStage      CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 5
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eInvalidTransition   CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 6
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eUnregisteredDecks   CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 7
	CMsgClientToGCTourneyAdminSwitchStageResponse_k_eMissingEntryFees    CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInsufficientPlayers",
		5: "k_eIncorrectStage",
		6: "k_eInvalidTransition",
		7: "k_eUnregisteredDecks",
		8: "k_eMissingEntryFees",
	}
	CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse_value = map[string]int32{
		"k_eInternalError":       0,
		"k_eSuccess":             1,
		"k_eDisabled":            2,
		"k_eMissingPermissions":  3,
		"k_eInsufficientPlayers": 4,
		"k_eIncorrectStage":      5,
		"k_eInvalidTransition":   6,
		"k_eUnregisteredDecks":   7,
		"k_eMissingEntryFees":    8,
	}
)

func (x CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[36].Descriptor()
}

func (CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[36]
}

func (x CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{92, 0}
}

type CMsgClientToGCTourneyAdminKickResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminKickResponse_k_eInternalError      CMsgClientToGCTourneyAdminKickResponse_EResponse = 0
	CMsgClientToGCTourneyAdminKickResponse_k_eSuccess            CMsgClientToGCTourneyAdminKickResponse_EResponse = 1
	CMsgClientToGCTourneyAdminKickResponse_k_eDisabled           CMsgClientToGCTourneyAdminKickResponse_EResponse = 2
	CMsgClientToGCTourneyAdminKickResponse_k_eMissingPermissions CMsgClientToGCTourneyAdminKickResponse_EResponse = 3
	CMsgClientToGCTourneyAdminKickResponse_k_eInvalidTarget      CMsgClientToGCTourneyAdminKickResponse_EResponse = 4
	CMsgClientToGCTourneyAdminKickResponse_k_eTourneyClosed      CMsgClientToGCTourneyAdminKickResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyAdminKickResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminKickResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidTarget",
		5: "k_eTourneyClosed",
	}
	CMsgClientToGCTourneyAdminKickResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidTarget":      4,
		"k_eTourneyClosed":      5,
	}
)

func (x CMsgClientToGCTourneyAdminKickResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminKickResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminKickResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminKickResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminKickResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[37].Descriptor()
}

func (CMsgClientToGCTourneyAdminKickResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[37]
}

func (x CMsgClientToGCTourneyAdminKickResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminKickResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminKickResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminKickResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminKickResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{94, 0}
}

type CMsgClientToGCTourneyAdminGrantWinResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eInternalError      CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 0
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eSuccess            CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 1
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eDisabled           CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 2
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eMissingPermissions CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 3
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eInvalidAccount     CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 4
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eSeriesCompleted    CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 5
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eSeriesNotReady     CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 6
	CMsgClientToGCTourneyAdminGrantWinResponse_k_eInvalidSeries      CMsgClientToGCTourneyAdminGrantWinResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCTourneyAdminGrantWinResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminGrantWinResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidAccount",
		5: "k_eSeriesCompleted",
		6: "k_eSeriesNotReady",
		7: "k_eInvalidSeries",
	}
	CMsgClientToGCTourneyAdminGrantWinResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidAccount":     4,
		"k_eSeriesCompleted":    5,
		"k_eSeriesNotReady":     6,
		"k_eInvalidSeries":      7,
	}
)

func (x CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminGrantWinResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminGrantWinResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[38].Descriptor()
}

func (CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[38]
}

func (x CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminGrantWinResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminGrantWinResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminGrantWinResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{96, 0}
}

type CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eInternalError      CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 0
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eSuccess            CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 1
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eDisabled           CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 2
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eInvalidAccount     CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 3
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eInvalidRights      CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 4
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eTourneyClosed      CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 5
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_ePlayerPoolIsFull   CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 6
	CMsgClientToGCTourneyAdminChangeRightsResponse_k_eCannotChangePlayer CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eInvalidAccount",
		4: "k_eInvalidRights",
		5: "k_eTourneyClosed",
		6: "k_ePlayerPoolIsFull",
		7: "k_eCannotChangePlayer",
	}
	CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eInvalidAccount":     3,
		"k_eInvalidRights":      4,
		"k_eTourneyClosed":      5,
		"k_ePlayerPoolIsFull":   6,
		"k_eCannotChangePlayer": 7,
	}
)

func (x CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[39].Descriptor()
}

func (CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[39]
}

func (x CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{98, 0}
}

type CMsgClientToGCTourneyRegisterDeckResponse_EResponse int32

const (
	CMsgClientToGCTourneyRegisterDeckResponse_k_eInternalError           CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 0
	CMsgClientToGCTourneyRegisterDeckResponse_k_eSuccess                 CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 1
	CMsgClientToGCTourneyRegisterDeckResponse_k_eDisabled                CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 2
	CMsgClientToGCTourneyRegisterDeckResponse_k_eMissingPermissions      CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 3
	CMsgClientToGCTourneyRegisterDeckResponse_k_eUnownedCards            CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 4
	CMsgClientToGCTourneyRegisterDeckResponse_k_eRegistrationClosed      CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 5
	CMsgClientToGCTourneyRegisterDeckResponse_k_eRegistrationNotRequired CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 6
	CMsgClientToGCTourneyRegisterDeckResponse_k_eInvalidDeck             CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 7
	CMsgClientToGCTourneyRegisterDeckResponse_k_eInvalidDeckIndex        CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 8
	CMsgClientToGCTourneyRegisterDeckResponse_k_eCannotRegisterForPhase  CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 9
	CMsgClientToGCTourneyRegisterDeckResponse_k_ePhaseNotReady           CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 10
	CMsgClientToGCTourneyRegisterDeckResponse_k_eInvalidSharedDeck       CMsgClientToGCTourneyRegisterDeckResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCTourneyRegisterDeckResponse_EResponse.
var (
	CMsgClientToGCTourneyRegisterDeckResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eMissingPermissions",
		4:  "k_eUnownedCards",
		5:  "k_eRegistrationClosed",
		6:  "k_eRegistrationNotRequired",
		7:  "k_eInvalidDeck",
		8:  "k_eInvalidDeckIndex",
		9:  "k_eCannotRegisterForPhase",
		10: "k_ePhaseNotReady",
		11: "k_eInvalidSharedDeck",
	}
	CMsgClientToGCTourneyRegisterDeckResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eDisabled":                2,
		"k_eMissingPermissions":      3,
		"k_eUnownedCards":            4,
		"k_eRegistrationClosed":      5,
		"k_eRegistrationNotRequired": 6,
		"k_eInvalidDeck":             7,
		"k_eInvalidDeckIndex":        8,
		"k_eCannotRegisterForPhase":  9,
		"k_ePhaseNotReady":           10,
		"k_eInvalidSharedDeck":       11,
	}
)

func (x CMsgClientToGCTourneyRegisterDeckResponse_EResponse) Enum() *CMsgClientToGCTourneyRegisterDeckResponse_EResponse {
	p := new(CMsgClientToGCTourneyRegisterDeckResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRegisterDeckResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRegisterDeckResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[40].Descriptor()
}

func (CMsgClientToGCTourneyRegisterDeckResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[40]
}

func (x CMsgClientToGCTourneyRegisterDeckResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRegisterDeckResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRegisterDeckResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRegisterDeckResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRegisterDeckResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{100, 0}
}

type CMsgClientToGCTourneyUserLeaveResponse_EResponse int32

const (
	CMsgClientToGCTourneyUserLeaveResponse_k_eInternalError      CMsgClientToGCTourneyUserLeaveResponse_EResponse = 0
	CMsgClientToGCTourneyUserLeaveResponse_k_eSuccess            CMsgClientToGCTourneyUserLeaveResponse_EResponse = 1
	CMsgClientToGCTourneyUserLeaveResponse_k_eDisabled           CMsgClientToGCTourneyUserLeaveResponse_EResponse = 2
	CMsgClientToGCTourneyUserLeaveResponse_k_eMissingPermissions CMsgClientToGCTourneyUserLeaveResponse_EResponse = 3
	CMsgClientToGCTourneyUserLeaveResponse_k_eLeaveNotAllowed    CMsgClientToGCTourneyUserLeaveResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCTourneyUserLeaveResponse_EResponse.
var (
	CMsgClientToGCTourneyUserLeaveResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		7: "k_eLeaveNotAllowed",
	}
	CMsgClientToGCTourneyUserLeaveResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eLeaveNotAllowed":    7,
	}
)

func (x CMsgClientToGCTourneyUserLeaveResponse_EResponse) Enum() *CMsgClientToGCTourneyUserLeaveResponse_EResponse {
	p := new(CMsgClientToGCTourneyUserLeaveResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyUserLeaveResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyUserLeaveResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[41].Descriptor()
}

func (CMsgClientToGCTourneyUserLeaveResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[41]
}

func (x CMsgClientToGCTourneyUserLeaveResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyUserLeaveResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyUserLeaveResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyUserLeaveResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyUserLeaveResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{102, 0}
}

type CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse int32

const (
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eInternalError      CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 0
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eSuccess            CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 1
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eDisabled           CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 2
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eMissingPermissions CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 3
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eInvalidSlot        CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 4
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eSlotInUse          CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 5
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eUnownedCards       CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 6
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eSharingClosed      CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 7
	CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eInvalidDeck        CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse.
var (
	CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidSlot",
		5: "k_eSlotInUse",
		6: "k_eUnownedCards",
		7: "k_eSharingClosed",
		8: "k_eInvalidDeck",
	}
	CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidSlot":        4,
		"k_eSlotInUse":          5,
		"k_eUnownedCards":       6,
		"k_eSharingClosed":      7,
		"k_eInvalidDeck":        8,
	}
)

func (x CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) Enum() *CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse {
	p := new(CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[42].Descriptor()
}

func (CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[42]
}

func (x CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{104, 0}
}

type CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse int32

const (
	CMsgClientToGCTourneyGetRegisteredDecksResponse_k_eInternalError      CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse = 0
	CMsgClientToGCTourneyGetRegisteredDecksResponse_k_eSuccess            CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse = 1
	CMsgClientToGCTourneyGetRegisteredDecksResponse_k_eDisabled           CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse = 2
	CMsgClientToGCTourneyGetRegisteredDecksResponse_k_eMissingPermissions CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse.
var (
	CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
	}
	CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
	}
)

func (x CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) Enum() *CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse {
	p := new(CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[43].Descriptor()
}

func (CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[43]
}

func (x CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{106, 0}
}

type CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse int32

const (
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eInternalError          CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 0
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eSuccess                CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 1
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eDisabled               CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 2
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eMissingPermissions     CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 3
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eInvalidUses            CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 4
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eInvalidStage           CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 5
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eInvalidRights          CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 6
	CMsgClientToGCTourneyCreateOpenInviteResponse_k_eTooManyOutstandingKeys CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse.
var (
	CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidUses",
		5: "k_eInvalidStage",
		6: "k_eInvalidRights",
		7: "k_eTooManyOutstandingKeys",
	}
	CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eDisabled":               2,
		"k_eMissingPermissions":     3,
		"k_eInvalidUses":            4,
		"k_eInvalidStage":           5,
		"k_eInvalidRights":          6,
		"k_eTooManyOutstandingKeys": 7,
	}
)

func (x CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) Enum() *CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse {
	p := new(CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[44].Descriptor()
}

func (CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[44]
}

func (x CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{108, 0}
}

type CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse int32

const (
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eInternalError      CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 0
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eSuccess            CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 1
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eDisabled           CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 2
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eMissingPermissions CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 3
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eInvalidKey         CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 4
	CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eInvalidStage       CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse.
var (
	CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidKey",
		5: "k_eInvalidStage",
	}
	CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidKey":         4,
		"k_eInvalidStage":       5,
	}
)

func (x CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) Enum() *CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse {
	p := new(CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[45].Descriptor()
}

func (CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[45]
}

func (x CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{110, 0}
}

type CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse int32

const (
	CMsgClientToGCTourneyGetOpenInvitesResponse_k_eInternalError      CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse = 0
	CMsgClientToGCTourneyGetOpenInvitesResponse_k_eSuccess            CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse = 1
	CMsgClientToGCTourneyGetOpenInvitesResponse_k_eDisabled           CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse = 2
	CMsgClientToGCTourneyGetOpenInvitesResponse_k_eMissingPermissions CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse = 3
	CMsgClientToGCTourneyGetOpenInvitesResponse_k_eInvalidStage       CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse.
var (
	CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidStage",
	}
	CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidStage":       4,
	}
)

func (x CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) Enum() *CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse {
	p := new(CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[46].Descriptor()
}

func (CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[46]
}

func (x CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{112, 0}
}

type CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eInternalError       CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 0
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eSuccess             CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 1
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eDisabled            CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 2
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eMissingPermissions  CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 3
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eInsufficientPlayers CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 4
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eIncorrectStage      CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 5
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eInvalidTransition   CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 6
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eUnregisteredDecks   CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInsufficientPlayers",
		5: "k_eIncorrectStage",
		6: "k_eInvalidTransition",
		7: "k_eUnregisteredDecks",
	}
	CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse_value = map[string]int32{
		"k_eInternalError":       0,
		"k_eSuccess":             1,
		"k_eDisabled":            2,
		"k_eMissingPermissions":  3,
		"k_eInsufficientPlayers": 4,
		"k_eIncorrectStage":      5,
		"k_eInvalidTransition":   6,
		"k_eUnregisteredDecks":   7,
	}
)

func (x CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[47].Descriptor()
}

func (CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[47]
}

func (x CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{114, 0}
}

type CMsgClientToGCTourneyGetOverviewResponse_EResponse int32

const (
	CMsgClientToGCTourneyGetOverviewResponse_k_eInternalError      CMsgClientToGCTourneyGetOverviewResponse_EResponse = 0
	CMsgClientToGCTourneyGetOverviewResponse_k_eSuccess            CMsgClientToGCTourneyGetOverviewResponse_EResponse = 1
	CMsgClientToGCTourneyGetOverviewResponse_k_eDisabled           CMsgClientToGCTourneyGetOverviewResponse_EResponse = 2
	CMsgClientToGCTourneyGetOverviewResponse_k_eMissingPermissions CMsgClientToGCTourneyGetOverviewResponse_EResponse = 3
	CMsgClientToGCTourneyGetOverviewResponse_k_eTooBusy            CMsgClientToGCTourneyGetOverviewResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyGetOverviewResponse_EResponse.
var (
	CMsgClientToGCTourneyGetOverviewResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eTooBusy",
	}
	CMsgClientToGCTourneyGetOverviewResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eTooBusy":            4,
	}
)

func (x CMsgClientToGCTourneyGetOverviewResponse_EResponse) Enum() *CMsgClientToGCTourneyGetOverviewResponse_EResponse {
	p := new(CMsgClientToGCTourneyGetOverviewResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyGetOverviewResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyGetOverviewResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[48].Descriptor()
}

func (CMsgClientToGCTourneyGetOverviewResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[48]
}

func (x CMsgClientToGCTourneyGetOverviewResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyGetOverviewResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyGetOverviewResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyGetOverviewResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyGetOverviewResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{116, 0}
}

type CMsgClientToGCTourneySetStatusResponse_EResponse int32

const (
	CMsgClientToGCTourneySetStatusResponse_k_eInternalError      CMsgClientToGCTourneySetStatusResponse_EResponse = 0
	CMsgClientToGCTourneySetStatusResponse_k_eSuccess            CMsgClientToGCTourneySetStatusResponse_EResponse = 1
	CMsgClientToGCTourneySetStatusResponse_k_eDisabled           CMsgClientToGCTourneySetStatusResponse_EResponse = 2
	CMsgClientToGCTourneySetStatusResponse_k_eMissingPermissions CMsgClientToGCTourneySetStatusResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCTourneySetStatusResponse_EResponse.
var (
	CMsgClientToGCTourneySetStatusResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
	}
	CMsgClientToGCTourneySetStatusResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
	}
)

func (x CMsgClientToGCTourneySetStatusResponse_EResponse) Enum() *CMsgClientToGCTourneySetStatusResponse_EResponse {
	p := new(CMsgClientToGCTourneySetStatusResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneySetStatusResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneySetStatusResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[49].Descriptor()
}

func (CMsgClientToGCTourneySetStatusResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[49]
}

func (x CMsgClientToGCTourneySetStatusResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneySetStatusResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneySetStatusResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneySetStatusResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneySetStatusResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{118, 0}
}

type CMsgClientToGCTourneyAddPhaseResponse_EResponse int32

const (
	CMsgClientToGCTourneyAddPhaseResponse_k_eInternalError      CMsgClientToGCTourneyAddPhaseResponse_EResponse = 0
	CMsgClientToGCTourneyAddPhaseResponse_k_eSuccess            CMsgClientToGCTourneyAddPhaseResponse_EResponse = 1
	CMsgClientToGCTourneyAddPhaseResponse_k_eDisabled           CMsgClientToGCTourneyAddPhaseResponse_EResponse = 2
	CMsgClientToGCTourneyAddPhaseResponse_k_eMissingPermissions CMsgClientToGCTourneyAddPhaseResponse_EResponse = 3
	CMsgClientToGCTourneyAddPhaseResponse_k_eTooManyPhases      CMsgClientToGCTourneyAddPhaseResponse_EResponse = 4
	CMsgClientToGCTourneyAddPhaseResponse_k_eInvalidParams      CMsgClientToGCTourneyAddPhaseResponse_EResponse = 5
	CMsgClientToGCTourneyAddPhaseResponse_k_eNotInConfigure     CMsgClientToGCTourneyAddPhaseResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCTourneyAddPhaseResponse_EResponse.
var (
	CMsgClientToGCTourneyAddPhaseResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eTooManyPhases",
		5: "k_eInvalidParams",
		6: "k_eNotInConfigure",
	}
	CMsgClientToGCTourneyAddPhaseResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eTooManyPhases":      4,
		"k_eInvalidParams":      5,
		"k_eNotInConfigure":     6,
	}
)

func (x CMsgClientToGCTourneyAddPhaseResponse_EResponse) Enum() *CMsgClientToGCTourneyAddPhaseResponse_EResponse {
	p := new(CMsgClientToGCTourneyAddPhaseResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAddPhaseResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAddPhaseResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[50].Descriptor()
}

func (CMsgClientToGCTourneyAddPhaseResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[50]
}

func (x CMsgClientToGCTourneyAddPhaseResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAddPhaseResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAddPhaseResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAddPhaseResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAddPhaseResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{120, 0}
}

type CMsgClientToGCTourneyRemovePhaseResponse_EResponse int32

const (
	CMsgClientToGCTourneyRemovePhaseResponse_k_eInternalError      CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 0
	CMsgClientToGCTourneyRemovePhaseResponse_k_eSuccess            CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 1
	CMsgClientToGCTourneyRemovePhaseResponse_k_eDisabled           CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 2
	CMsgClientToGCTourneyRemovePhaseResponse_k_eMissingPermissions CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 3
	CMsgClientToGCTourneyRemovePhaseResponse_k_eNotLastPhase       CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 4
	CMsgClientToGCTourneyRemovePhaseResponse_k_eNotInConfigure     CMsgClientToGCTourneyRemovePhaseResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyRemovePhaseResponse_EResponse.
var (
	CMsgClientToGCTourneyRemovePhaseResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eNotLastPhase",
		5: "k_eNotInConfigure",
	}
	CMsgClientToGCTourneyRemovePhaseResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eNotLastPhase":       4,
		"k_eNotInConfigure":     5,
	}
)

func (x CMsgClientToGCTourneyRemovePhaseResponse_EResponse) Enum() *CMsgClientToGCTourneyRemovePhaseResponse_EResponse {
	p := new(CMsgClientToGCTourneyRemovePhaseResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRemovePhaseResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRemovePhaseResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[51].Descriptor()
}

func (CMsgClientToGCTourneyRemovePhaseResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[51]
}

func (x CMsgClientToGCTourneyRemovePhaseResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRemovePhaseResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRemovePhaseResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRemovePhaseResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRemovePhaseResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{122, 0}
}

type CMsgClientToGCTourneySpectateMatchResponse_EResponse int32

const (
	CMsgClientToGCTourneySpectateMatchResponse_k_eSuccess            CMsgClientToGCTourneySpectateMatchResponse_EResponse = 1
	CMsgClientToGCTourneySpectateMatchResponse_k_eInternalError      CMsgClientToGCTourneySpectateMatchResponse_EResponse = 2
	CMsgClientToGCTourneySpectateMatchResponse_k_eInvalidSeries      CMsgClientToGCTourneySpectateMatchResponse_EResponse = 3
	CMsgClientToGCTourneySpectateMatchResponse_k_eMissingPermissions CMsgClientToGCTourneySpectateMatchResponse_EResponse = 4
	CMsgClientToGCTourneySpectateMatchResponse_k_eNotInMatch         CMsgClientToGCTourneySpectateMatchResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneySpectateMatchResponse_EResponse.
var (
	CMsgClientToGCTourneySpectateMatchResponse_EResponse_name = map[int32]string{
		1: "k_eSuccess",
		2: "k_eInternalError",
		3: "k_eInvalidSeries",
		4: "k_eMissingPermissions",
		5: "k_eNotInMatch",
	}
	CMsgClientToGCTourneySpectateMatchResponse_EResponse_value = map[string]int32{
		"k_eSuccess":            1,
		"k_eInternalError":      2,
		"k_eInvalidSeries":      3,
		"k_eMissingPermissions": 4,
		"k_eNotInMatch":         5,
	}
)

func (x CMsgClientToGCTourneySpectateMatchResponse_EResponse) Enum() *CMsgClientToGCTourneySpectateMatchResponse_EResponse {
	p := new(CMsgClientToGCTourneySpectateMatchResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneySpectateMatchResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneySpectateMatchResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[52].Descriptor()
}

func (CMsgClientToGCTourneySpectateMatchResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[52]
}

func (x CMsgClientToGCTourneySpectateMatchResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneySpectateMatchResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneySpectateMatchResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneySpectateMatchResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneySpectateMatchResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{124, 0}
}

type CMsgClientToGCTourneyInviteList_ELimit int32

const (
	CMsgClientToGCTourneyInviteList_k_eLimit_MaxAccounts CMsgClientToGCTourneyInviteList_ELimit = 32
)

// Enum value maps for CMsgClientToGCTourneyInviteList_ELimit.
var (
	CMsgClientToGCTourneyInviteList_ELimit_name = map[int32]string{
		32: "k_eLimit_MaxAccounts",
	}
	CMsgClientToGCTourneyInviteList_ELimit_value = map[string]int32{
		"k_eLimit_MaxAccounts": 32,
	}
)

func (x CMsgClientToGCTourneyInviteList_ELimit) Enum() *CMsgClientToGCTourneyInviteList_ELimit {
	p := new(CMsgClientToGCTourneyInviteList_ELimit)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyInviteList_ELimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyInviteList_ELimit) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[53].Descriptor()
}

func (CMsgClientToGCTourneyInviteList_ELimit) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[53]
}

func (x CMsgClientToGCTourneyInviteList_ELimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyInviteList_ELimit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyInviteList_ELimit(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyInviteList_ELimit.Descriptor instead.
func (CMsgClientToGCTourneyInviteList_ELimit) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{125, 0}
}

type CMsgClientToGCTourneyInviteListResponse_EResponse int32

const (
	CMsgClientToGCTourneyInviteListResponse_k_eInternalError      CMsgClientToGCTourneyInviteListResponse_EResponse = 0
	CMsgClientToGCTourneyInviteListResponse_k_eSuccess            CMsgClientToGCTourneyInviteListResponse_EResponse = 1
	CMsgClientToGCTourneyInviteListResponse_k_eTooManyInvites     CMsgClientToGCTourneyInviteListResponse_EResponse = 2
	CMsgClientToGCTourneyInviteListResponse_k_eRateLimited        CMsgClientToGCTourneyInviteListResponse_EResponse = 3
	CMsgClientToGCTourneyInviteListResponse_k_eDisabled           CMsgClientToGCTourneyInviteListResponse_EResponse = 4
	CMsgClientToGCTourneyInviteListResponse_k_eTooManyAccounts    CMsgClientToGCTourneyInviteListResponse_EResponse = 5
	CMsgClientToGCTourneyInviteListResponse_k_eTourneyJoinClosed  CMsgClientToGCTourneyInviteListResponse_EResponse = 6
	CMsgClientToGCTourneyInviteListResponse_k_eMissingPermissions CMsgClientToGCTourneyInviteListResponse_EResponse = 7
	CMsgClientToGCTourneyInviteListResponse_k_eTourneyFull        CMsgClientToGCTourneyInviteListResponse_EResponse = 8
	CMsgClientToGCTourneyInviteListResponse_k_eInvalidRights      CMsgClientToGCTourneyInviteListResponse_EResponse = 9
	CMsgClientToGCTourneyInviteListResponse_k_eNotFriends         CMsgClientToGCTourneyInviteListResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCTourneyInviteListResponse_EResponse.
var (
	CMsgClientToGCTourneyInviteListResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooManyInvites",
		3:  "k_eRateLimited",
		4:  "k_eDisabled",
		5:  "k_eTooManyAccounts",
		6:  "k_eTourneyJoinClosed",
		7:  "k_eMissingPermissions",
		8:  "k_eTourneyFull",
		9:  "k_eInvalidRights",
		10: "k_eNotFriends",
	}
	CMsgClientToGCTourneyInviteListResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eTooManyInvites":     2,
		"k_eRateLimited":        3,
		"k_eDisabled":           4,
		"k_eTooManyAccounts":    5,
		"k_eTourneyJoinClosed":  6,
		"k_eMissingPermissions": 7,
		"k_eTourneyFull":        8,
		"k_eInvalidRights":      9,
		"k_eNotFriends":         10,
	}
)

func (x CMsgClientToGCTourneyInviteListResponse_EResponse) Enum() *CMsgClientToGCTourneyInviteListResponse_EResponse {
	p := new(CMsgClientToGCTourneyInviteListResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyInviteListResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyInviteListResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[54].Descriptor()
}

func (CMsgClientToGCTourneyInviteListResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[54]
}

func (x CMsgClientToGCTourneyInviteListResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyInviteListResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyInviteListResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyInviteListResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyInviteListResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{126, 0}
}

type CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse int32

const (
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eInternalError      CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse = 0
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eSuccess            CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse = 1
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eDisabled           CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse = 2
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eMissingPermissions CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse = 3
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eInvalidStage       CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse.
var (
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		5: "k_eInvalidStage",
	}
	CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidStage":       5,
	}
)

func (x CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) Enum() *CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse {
	p := new(CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[55].Descriptor()
}

func (CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[55]
}

func (x CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{128, 0}
}

type CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse int32

const (
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eInternalError      CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 0
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eSuccess            CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 1
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eDisabled           CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 2
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eMissingPermissions CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 3
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_ePhaseNotInEdit     CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 4
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eInvalidAccountID   CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse.
var (
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_ePhaseNotInEdit",
		5: "k_eInvalidAccountID",
	}
	CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_ePhaseNotInEdit":     4,
		"k_eInvalidAccountID":   5,
	}
)

func (x CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) Enum() *CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse {
	p := new(CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[56].Descriptor()
}

func (CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[56]
}

func (x CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{130, 0}
}

type CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse int32

const (
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_eInternalError      CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 0
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_eSuccess            CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 1
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_eDisabled           CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 2
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_eMissingPermissions CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 3
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_eInvalidPlayer      CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 4
	CMsgClientToGCTourneyGetLimitedReplayResponse_k_ePhaseNotReady      CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse.
var (
	CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidPlayer",
		5: "k_ePhaseNotReady",
	}
	CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidPlayer":      4,
		"k_ePhaseNotReady":      5,
	}
)

func (x CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) Enum() *CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse {
	p := new(CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[57].Descriptor()
}

func (CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[57]
}

func (x CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{132, 0}
}

type CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse int32

const (
	CMsgClientToGCTourneyRejoinChatRoomResponse_k_eInternalError      CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse = 0
	CMsgClientToGCTourneyRejoinChatRoomResponse_k_eSuccess            CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse = 1
	CMsgClientToGCTourneyRejoinChatRoomResponse_k_eDisabled           CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse = 2
	CMsgClientToGCTourneyRejoinChatRoomResponse_k_eMissingPermissions CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse = 3
	CMsgClientToGCTourneyRejoinChatRoomResponse_k_eNoChatRoom         CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse.
var (
	CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eNoChatRoom",
	}
	CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eNoChatRoom":         4,
	}
)

func (x CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) Enum() *CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse {
	p := new(CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[58].Descriptor()
}

func (CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[58]
}

func (x CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{134, 0}
}

type CMsgClientToGCTourneyPayEntryFeeResponse_EResponse int32

const (
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eInternalError      CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 0
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eSuccess            CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 1
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eDisabled           CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 2
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eMissingPermissions CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 3
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eInvalidItem        CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 4
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eInvalidItemType    CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 5
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eItemAlreadyFilled  CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 6
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eInvalidTarget      CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 7
	CMsgClientToGCTourneyPayEntryFeeResponse_k_eInvalidStage       CMsgClientToGCTourneyPayEntryFeeResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCTourneyPayEntryFeeResponse_EResponse.
var (
	CMsgClientToGCTourneyPayEntryFeeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eInvalidItem",
		5: "k_eInvalidItemType",
		6: "k_eItemAlreadyFilled",
		7: "k_eInvalidTarget",
		8: "k_eInvalidStage",
	}
	CMsgClientToGCTourneyPayEntryFeeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eInvalidItem":        4,
		"k_eInvalidItemType":    5,
		"k_eItemAlreadyFilled":  6,
		"k_eInvalidTarget":      7,
		"k_eInvalidStage":       8,
	}
)

func (x CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) Enum() *CMsgClientToGCTourneyPayEntryFeeResponse_EResponse {
	p := new(CMsgClientToGCTourneyPayEntryFeeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[59].Descriptor()
}

func (CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[59]
}

func (x CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyPayEntryFeeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyPayEntryFeeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyPayEntryFeeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{137, 0}
}

type CMsgClientToGCTourneyPlayerAbandonResponse_EResponse int32

const (
	CMsgClientToGCTourneyPlayerAbandonResponse_k_eInternalError      CMsgClientToGCTourneyPlayerAbandonResponse_EResponse = 0
	CMsgClientToGCTourneyPlayerAbandonResponse_k_eSuccess            CMsgClientToGCTourneyPlayerAbandonResponse_EResponse = 1
	CMsgClientToGCTourneyPlayerAbandonResponse_k_eDisabled           CMsgClientToGCTourneyPlayerAbandonResponse_EResponse = 2
	CMsgClientToGCTourneyPlayerAbandonResponse_k_eMissingPermissions CMsgClientToGCTourneyPlayerAbandonResponse_EResponse = 3
	CMsgClientToGCTourneyPlayerAbandonResponse_k_eUnableToAbandon    CMsgClientToGCTourneyPlayerAbandonResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCTourneyPlayerAbandonResponse_EResponse.
var (
	CMsgClientToGCTourneyPlayerAbandonResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eMissingPermissions",
		4: "k_eUnableToAbandon",
	}
	CMsgClientToGCTourneyPlayerAbandonResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eMissingPermissions": 3,
		"k_eUnableToAbandon":    4,
	}
)

func (x CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) Enum() *CMsgClientToGCTourneyPlayerAbandonResponse_EResponse {
	p := new(CMsgClientToGCTourneyPlayerAbandonResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[60].Descriptor()
}

func (CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[60]
}

func (x CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyPlayerAbandonResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyPlayerAbandonResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyPlayerAbandonResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{139, 0}
}

type CMsgClientToGCTourneyChangeValue_EValueType int32

const (
	CMsgClientToGCTourneyChangeValue_k_eGlobal_SeedStage      CMsgClientToGCTourneyChangeValue_EValueType = 1
	CMsgClientToGCTourneyChangeValue_k_eGlobal_OpenSpectating CMsgClientToGCTourneyChangeValue_EValueType = 2
	CMsgClientToGCTourneyChangeValue_k_eGlobal_TimerMode      CMsgClientToGCTourneyChangeValue_EValueType = 3
	CMsgClientToGCTourneyChangeValue_k_ePhase_MaxPlayers      CMsgClientToGCTourneyChangeValue_EValueType = 50
	CMsgClientToGCTourneyChangeValue_k_ePhase_EditStage       CMsgClientToGCTourneyChangeValue_EValueType = 51
	CMsgClientToGCTourneyChangeValue_k_eSwiss_NumRounds       CMsgClientToGCTourneyChangeValue_EValueType = 100
	CMsgClientToGCTourneyChangeValue_k_eSwiss_Matches         CMsgClientToGCTourneyChangeValue_EValueType = 101
	CMsgClientToGCTourneyChangeValue_k_eBracket_BestOf        CMsgClientToGCTourneyChangeValue_EValueType = 150
	CMsgClientToGCTourneyChangeValue_k_eBracket_FinalsBestOf  CMsgClientToGCTourneyChangeValue_EValueType = 151
	CMsgClientToGCTourneyChangeValue_k_eFreeForAll_MaxGames   CMsgClientToGCTourneyChangeValue_EValueType = 200
)

// Enum value maps for CMsgClientToGCTourneyChangeValue_EValueType.
var (
	CMsgClientToGCTourneyChangeValue_EValueType_name = map[int32]string{
		1:   "k_eGlobal_SeedStage",
		2:   "k_eGlobal_OpenSpectating",
		3:   "k_eGlobal_TimerMode",
		50:  "k_ePhase_MaxPlayers",
		51:  "k_ePhase_EditStage",
		100: "k_eSwiss_NumRounds",
		101: "k_eSwiss_Matches",
		150: "k_eBracket_BestOf",
		151: "k_eBracket_FinalsBestOf",
		200: "k_eFreeForAll_MaxGames",
	}
	CMsgClientToGCTourneyChangeValue_EValueType_value = map[string]int32{
		"k_eGlobal_SeedStage":      1,
		"k_eGlobal_OpenSpectating": 2,
		"k_eGlobal_TimerMode":      3,
		"k_ePhase_MaxPlayers":      50,
		"k_ePhase_EditStage":       51,
		"k_eSwiss_NumRounds":       100,
		"k_eSwiss_Matches":         101,
		"k_eBracket_BestOf":        150,
		"k_eBracket_FinalsBestOf":  151,
		"k_eFreeForAll_MaxGames":   200,
	}
)

func (x CMsgClientToGCTourneyChangeValue_EValueType) Enum() *CMsgClientToGCTourneyChangeValue_EValueType {
	p := new(CMsgClientToGCTourneyChangeValue_EValueType)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyChangeValue_EValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyChangeValue_EValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[61].Descriptor()
}

func (CMsgClientToGCTourneyChangeValue_EValueType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[61]
}

func (x CMsgClientToGCTourneyChangeValue_EValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyChangeValue_EValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyChangeValue_EValueType(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyChangeValue_EValueType.Descriptor instead.
func (CMsgClientToGCTourneyChangeValue_EValueType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{140, 0}
}

type CMsgClientToGCTourneyChangeValueResponse_EResponse int32

const (
	CMsgClientToGCTourneyChangeValueResponse_k_eInternalError      CMsgClientToGCTourneyChangeValueResponse_EResponse = 0
	CMsgClientToGCTourneyChangeValueResponse_k_eSuccess            CMsgClientToGCTourneyChangeValueResponse_EResponse = 1
	CMsgClientToGCTourneyChangeValueResponse_k_eDisabled           CMsgClientToGCTourneyChangeValueResponse_EResponse = 2
	CMsgClientToGCTourneyChangeValueResponse_k_eInvalidPhase       CMsgClientToGCTourneyChangeValueResponse_EResponse = 3
	CMsgClientToGCTourneyChangeValueResponse_k_eInvalidValueType   CMsgClientToGCTourneyChangeValueResponse_EResponse = 4
	CMsgClientToGCTourneyChangeValueResponse_k_eValueIsLocked      CMsgClientToGCTourneyChangeValueResponse_EResponse = 5
	CMsgClientToGCTourneyChangeValueResponse_k_eInvalidValue       CMsgClientToGCTourneyChangeValueResponse_EResponse = 6
	CMsgClientToGCTourneyChangeValueResponse_k_ePlayerMismatch     CMsgClientToGCTourneyChangeValueResponse_EResponse = 8
	CMsgClientToGCTourneyChangeValueResponse_k_eMissingPermissions CMsgClientToGCTourneyChangeValueResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCTourneyChangeValueResponse_EResponse.
var (
	CMsgClientToGCTourneyChangeValueResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eInvalidPhase",
		4: "k_eInvalidValueType",
		5: "k_eValueIsLocked",
		6: "k_eInvalidValue",
		8: "k_ePlayerMismatch",
		9: "k_eMissingPermissions",
	}
	CMsgClientToGCTourneyChangeValueResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eInvalidPhase":       3,
		"k_eInvalidValueType":   4,
		"k_eValueIsLocked":      5,
		"k_eInvalidValue":       6,
		"k_ePlayerMismatch":     8,
		"k_eMissingPermissions": 9,
	}
)

func (x CMsgClientToGCTourneyChangeValueResponse_EResponse) Enum() *CMsgClientToGCTourneyChangeValueResponse_EResponse {
	p := new(CMsgClientToGCTourneyChangeValueResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyChangeValueResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyChangeValueResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[62].Descriptor()
}

func (CMsgClientToGCTourneyChangeValueResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[62]
}

func (x CMsgClientToGCTourneyChangeValueResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyChangeValueResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyChangeValueResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyChangeValueResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyChangeValueResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{141, 0}
}

type CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse int32

const (
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInternalError        CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 0
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eSuccess              CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 1
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eDisabled             CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 2
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInvalidMode          CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 3
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInvalidRequest       CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 4
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eTooBusy              CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 5
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eRateLimited          CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 6
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInTooManyOpenAlready CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 7
	CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInTooManyTotal       CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse.
var (
	CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eInvalidMode",
		4: "k_eInvalidRequest",
		5: "k_eTooBusy",
		6: "k_eRateLimited",
		7: "k_eInTooManyOpenAlready",
		8: "k_eInTooManyTotal",
	}
	CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse_value = map[string]int32{
		"k_eInternalError":        0,
		"k_eSuccess":              1,
		"k_eDisabled":             2,
		"k_eInvalidMode":          3,
		"k_eInvalidRequest":       4,
		"k_eTooBusy":              5,
		"k_eRateLimited":          6,
		"k_eInTooManyOpenAlready": 7,
		"k_eInTooManyTotal":       8,
	}
)

func (x CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) Enum() *CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse {
	p := new(CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_client_proto_enumTypes[63].Descriptor()
}

func (CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_client_proto_enumTypes[63]
}

func (x CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse.Descriptor instead.
func (CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{143, 0}
}

type CMsgClientToGCStartMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfo       *CMsgStartFindingMatchInfo `protobuf:"bytes,2,opt,name=match_info,json=matchInfo" json:"match_info,omitempty"`
	TourneyId       *uint64                    `protobuf:"varint,3,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TourneyPhaseId  *uint32                    `protobuf:"varint,4,opt,name=tourney_phase_id,json=tourneyPhaseId" json:"tourney_phase_id,omitempty"`
	TourneySeriesId *uint32                    `protobuf:"varint,5,opt,name=tourney_series_id,json=tourneySeriesId" json:"tourney_series_id,omitempty"`
	PingTimes       *CMsgRegionPingTimesClient `protobuf:"bytes,6,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgClientToGCStartMatchmaking) Reset() {
	*x = CMsgClientToGCStartMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStartMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStartMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCStartMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStartMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStartMatchmaking) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientToGCStartMatchmaking) GetMatchInfo() *CMsgStartFindingMatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *CMsgClientToGCStartMatchmaking) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCStartMatchmaking) GetTourneyPhaseId() uint32 {
	if x != nil && x.TourneyPhaseId != nil {
		return *x.TourneyPhaseId
	}
	return 0
}

func (x *CMsgClientToGCStartMatchmaking) GetTourneySeriesId() uint32 {
	if x != nil && x.TourneySeriesId != nil {
		return *x.TourneySeriesId
	}
	return 0
}

func (x *CMsgClientToGCStartMatchmaking) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CMsgClientToGCStartMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result               *CMsgClientToGCStartMatchmakingResponse_EResultCode `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCStartMatchmakingResponse_EResultCode,def=0" json:"result,omitempty"`
	TournamentOpponentId *uint32                                             `protobuf:"varint,2,opt,name=tournament_opponent_id,json=tournamentOpponentId" json:"tournament_opponent_id,omitempty"`
	DebugMessage         *string                                             `protobuf:"bytes,3,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
}

// Default values for CMsgClientToGCStartMatchmakingResponse fields.
const (
	Default_CMsgClientToGCStartMatchmakingResponse_Result = CMsgClientToGCStartMatchmakingResponse_k_EResult_OK
)

func (x *CMsgClientToGCStartMatchmakingResponse) Reset() {
	*x = CMsgClientToGCStartMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStartMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStartMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCStartMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStartMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStartMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientToGCStartMatchmakingResponse) GetResult() CMsgClientToGCStartMatchmakingResponse_EResultCode {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCStartMatchmakingResponse_Result
}

func (x *CMsgClientToGCStartMatchmakingResponse) GetTournamentOpponentId() uint32 {
	if x != nil && x.TournamentOpponentId != nil {
		return *x.TournamentOpponentId
	}
	return 0
}

func (x *CMsgClientToGCStartMatchmakingResponse) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

type CMsgClientToGCStopMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCStopMatchmaking) Reset() {
	*x = CMsgClientToGCStopMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStopMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStopMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCStopMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStopMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStopMatchmaking) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

type CMsgClientToGCStopMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgClientToGCStopMatchmakingResponse) Reset() {
	*x = CMsgClientToGCStopMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStopMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStopMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCStopMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStopMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStopMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientToGCStopMatchmakingResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCToClientMatchmakingStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *CMsgGCToClientMatchmakingStopped_EReason `protobuf:"varint,1,opt,name=reason,enum=artifact.CMsgGCToClientMatchmakingStopped_EReason,def=0" json:"reason,omitempty"`
}

// Default values for CMsgGCToClientMatchmakingStopped fields.
const (
	Default_CMsgGCToClientMatchmakingStopped_Reason = CMsgGCToClientMatchmakingStopped_k_EResult_Unspecified
)

func (x *CMsgGCToClientMatchmakingStopped) Reset() {
	*x = CMsgGCToClientMatchmakingStopped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientMatchmakingStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientMatchmakingStopped) ProtoMessage() {}

func (x *CMsgGCToClientMatchmakingStopped) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientMatchmakingStopped.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientMatchmakingStopped) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgGCToClientMatchmakingStopped) GetReason() CMsgGCToClientMatchmakingStopped_EReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CMsgGCToClientMatchmakingStopped_Reason
}

type CMsgClientToGCLeaveLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgClientToGCLeaveLobby) Reset() {
	*x = CMsgClientToGCLeaveLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveLobby) ProtoMessage() {}

func (x *CMsgClientToGCLeaveLobby) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveLobby) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientToGCLeaveLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgClientToGCLeaveLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCLeaveLobbyResponse) Reset() {
	*x = CMsgClientToGCLeaveLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveLobbyResponse) ProtoMessage() {}

func (x *CMsgClientToGCLeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{6}
}

type CMsgGCToClientDefaultValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator *CMsgDeckValidator `protobuf:"bytes,1,opt,name=validator" json:"validator,omitempty"`
}

func (x *CMsgGCToClientDefaultValidator) Reset() {
	*x = CMsgGCToClientDefaultValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientDefaultValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientDefaultValidator) ProtoMessage() {}

func (x *CMsgGCToClientDefaultValidator) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientDefaultValidator.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientDefaultValidator) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGCToClientDefaultValidator) GetValidator() *CMsgDeckValidator {
	if x != nil {
		return x.Validator
	}
	return nil
}

type CMsgClientWelcomeDCG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency      *uint32           `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	ExtraMessages []*CExtraMsgBlock `protobuf:"bytes,2,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
}

func (x *CMsgClientWelcomeDCG) Reset() {
	*x = CMsgClientWelcomeDCG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWelcomeDCG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWelcomeDCG) ProtoMessage() {}

func (x *CMsgClientWelcomeDCG) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWelcomeDCG.ProtoReflect.Descriptor instead.
func (*CMsgClientWelcomeDCG) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientWelcomeDCG) GetCurrency() uint32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgClientWelcomeDCG) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

type CMsgClientToGCJoinChatChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType     *EChatRoomType `protobuf:"varint,1,opt,name=room_type,json=roomType,enum=artifact.EChatRoomType,def=0" json:"room_type,omitempty"`
	RoomKey      *uint64        `protobuf:"varint,2,opt,name=room_key,json=roomKey" json:"room_key,omitempty"`
	SubRoomIndex *uint32        `protobuf:"varint,3,opt,name=sub_room_index,json=subRoomIndex" json:"sub_room_index,omitempty"`
	RequestId    *uint32        `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

// Default values for CMsgClientToGCJoinChatChannel fields.
const (
	Default_CMsgClientToGCJoinChatChannel_RoomType = EChatRoomType_k_EChatRoomType_Invalid
)

func (x *CMsgClientToGCJoinChatChannel) Reset() {
	*x = CMsgClientToGCJoinChatChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCJoinChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinChatChannel) ProtoMessage() {}

func (x *CMsgClientToGCJoinChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinChatChannel) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientToGCJoinChatChannel) GetRoomType() EChatRoomType {
	if x != nil && x.RoomType != nil {
		return *x.RoomType
	}
	return Default_CMsgClientToGCJoinChatChannel_RoomType
}

func (x *CMsgClientToGCJoinChatChannel) GetRoomKey() uint64 {
	if x != nil && x.RoomKey != nil {
		return *x.RoomKey
	}
	return 0
}

func (x *CMsgClientToGCJoinChatChannel) GetSubRoomIndex() uint32 {
	if x != nil && x.SubRoomIndex != nil {
		return *x.SubRoomIndex
	}
	return 0
}

func (x *CMsgClientToGCJoinChatChannel) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CMsgClientToGCJoinChatChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCJoinChatChannelResponse_EResult `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCJoinChatChannelResponse_EResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCJoinChatChannelResponse fields.
const (
	Default_CMsgClientToGCJoinChatChannelResponse_Result = CMsgClientToGCJoinChatChannelResponse_k_EResult_Success
)

func (x *CMsgClientToGCJoinChatChannelResponse) Reset() {
	*x = CMsgClientToGCJoinChatChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCJoinChatChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinChatChannelResponse) ProtoMessage() {}

func (x *CMsgClientToGCJoinChatChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinChatChannelResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinChatChannelResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientToGCJoinChatChannelResponse) GetResult() CMsgClientToGCJoinChatChannelResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCJoinChatChannelResponse_Result
}

type CMsgGCToClientChatChannelJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	RequestId      *uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ChatRoomId     *uint64 `protobuf:"fixed64,3,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
	SubRoomIndex   *uint32 `protobuf:"varint,4,opt,name=sub_room_index,json=subRoomIndex" json:"sub_room_index,omitempty"`
	AliasedUserIds *bool   `protobuf:"varint,5,opt,name=aliased_user_ids,json=aliasedUserIds" json:"aliased_user_ids,omitempty"`
	LocalAliasedId *uint32 `protobuf:"varint,6,opt,name=local_aliased_id,json=localAliasedId" json:"local_aliased_id,omitempty"`
}

func (x *CMsgGCToClientChatChannelJoined) Reset() {
	*x = CMsgGCToClientChatChannelJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientChatChannelJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientChatChannelJoined) ProtoMessage() {}

func (x *CMsgGCToClientChatChannelJoined) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientChatChannelJoined.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientChatChannelJoined) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgGCToClientChatChannelJoined) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgGCToClientChatChannelJoined) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgGCToClientChatChannelJoined) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

func (x *CMsgGCToClientChatChannelJoined) GetSubRoomIndex() uint32 {
	if x != nil && x.SubRoomIndex != nil {
		return *x.SubRoomIndex
	}
	return 0
}

func (x *CMsgGCToClientChatChannelJoined) GetAliasedUserIds() bool {
	if x != nil && x.AliasedUserIds != nil {
		return *x.AliasedUserIds
	}
	return false
}

func (x *CMsgGCToClientChatChannelJoined) GetLocalAliasedId() uint32 {
	if x != nil && x.LocalAliasedId != nil {
		return *x.LocalAliasedId
	}
	return 0
}

type CMsgClientToGCSendChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomId *uint64 `protobuf:"fixed64,1,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
	ChatMsg    *string `protobuf:"bytes,2,opt,name=chat_msg,json=chatMsg" json:"chat_msg,omitempty"`
}

func (x *CMsgClientToGCSendChatMessage) Reset() {
	*x = CMsgClientToGCSendChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSendChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSendChatMessage) ProtoMessage() {}

func (x *CMsgClientToGCSendChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSendChatMessage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSendChatMessage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientToGCSendChatMessage) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

func (x *CMsgClientToGCSendChatMessage) GetChatMsg() string {
	if x != nil && x.ChatMsg != nil {
		return *x.ChatMsg
	}
	return ""
}

type CMsgClientToGCSendChatMessageRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomId *uint64 `protobuf:"fixed64,1,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
	RollMin    *uint32 `protobuf:"varint,2,opt,name=roll_min,json=rollMin" json:"roll_min,omitempty"`
	RollMax    *uint32 `protobuf:"varint,3,opt,name=roll_max,json=rollMax" json:"roll_max,omitempty"`
}

func (x *CMsgClientToGCSendChatMessageRoll) Reset() {
	*x = CMsgClientToGCSendChatMessageRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSendChatMessageRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSendChatMessageRoll) ProtoMessage() {}

func (x *CMsgClientToGCSendChatMessageRoll) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSendChatMessageRoll.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSendChatMessageRoll) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientToGCSendChatMessageRoll) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

func (x *CMsgClientToGCSendChatMessageRoll) GetRollMin() uint32 {
	if x != nil && x.RollMin != nil {
		return *x.RollMin
	}
	return 0
}

func (x *CMsgClientToGCSendChatMessageRoll) GetRollMax() uint32 {
	if x != nil && x.RollMax != nil {
		return *x.RollMax
	}
	return 0
}

type CChatMessageAdditionalData_DiceRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollValue *uint32 `protobuf:"varint,1,opt,name=roll_value,json=rollValue" json:"roll_value,omitempty"`
	RollMin   *uint32 `protobuf:"varint,2,opt,name=roll_min,json=rollMin" json:"roll_min,omitempty"`
	RollMax   *uint32 `protobuf:"varint,3,opt,name=roll_max,json=rollMax" json:"roll_max,omitempty"`
}

func (x *CChatMessageAdditionalData_DiceRoll) Reset() {
	*x = CChatMessageAdditionalData_DiceRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatMessageAdditionalData_DiceRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatMessageAdditionalData_DiceRoll) ProtoMessage() {}

func (x *CChatMessageAdditionalData_DiceRoll) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatMessageAdditionalData_DiceRoll.ProtoReflect.Descriptor instead.
func (*CChatMessageAdditionalData_DiceRoll) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{14}
}

func (x *CChatMessageAdditionalData_DiceRoll) GetRollValue() uint32 {
	if x != nil && x.RollValue != nil {
		return *x.RollValue
	}
	return 0
}

func (x *CChatMessageAdditionalData_DiceRoll) GetRollMin() uint32 {
	if x != nil && x.RollMin != nil {
		return *x.RollMin
	}
	return 0
}

func (x *CChatMessageAdditionalData_DiceRoll) GetRollMax() uint32 {
	if x != nil && x.RollMax != nil {
		return *x.RollMax
	}
	return 0
}

type CMsgGCToClientChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomId     *uint64         `protobuf:"fixed64,1,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
	UserId         *uint32         `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ChatMsg        *string         `protobuf:"bytes,3,opt,name=chat_msg,json=chatMsg" json:"chat_msg,omitempty"`
	PersonaName    *string         `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	AdditionalData *CExtraMsgBlock `protobuf:"bytes,5,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	TimeStamp      *uint32         `protobuf:"varint,6,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
}

func (x *CMsgGCToClientChatMessage) Reset() {
	*x = CMsgGCToClientChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientChatMessage) ProtoMessage() {}

func (x *CMsgGCToClientChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientChatMessage.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientChatMessage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGCToClientChatMessage) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

func (x *CMsgGCToClientChatMessage) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CMsgGCToClientChatMessage) GetChatMsg() string {
	if x != nil && x.ChatMsg != nil {
		return *x.ChatMsg
	}
	return ""
}

func (x *CMsgGCToClientChatMessage) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgGCToClientChatMessage) GetAdditionalData() *CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgGCToClientChatMessage) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

type CMsgGCToClientUserJoinedChatChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomId         *uint64  `protobuf:"fixed64,1,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
	JoinedUserIds      []uint32 `protobuf:"varint,2,rep,name=joined_user_ids,json=joinedUserIds" json:"joined_user_ids,omitempty"`
	JoinedPersonaNames []string `protobuf:"bytes,3,rep,name=joined_persona_names,json=joinedPersonaNames" json:"joined_persona_names,omitempty"`
	LeftUserIds        []uint32 `protobuf:"varint,4,rep,name=left_user_ids,json=leftUserIds" json:"left_user_ids,omitempty"`
}

func (x *CMsgGCToClientUserJoinedChatChannel) Reset() {
	*x = CMsgGCToClientUserJoinedChatChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientUserJoinedChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientUserJoinedChatChannel) ProtoMessage() {}

func (x *CMsgGCToClientUserJoinedChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientUserJoinedChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientUserJoinedChatChannel) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgGCToClientUserJoinedChatChannel) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

func (x *CMsgGCToClientUserJoinedChatChannel) GetJoinedUserIds() []uint32 {
	if x != nil {
		return x.JoinedUserIds
	}
	return nil
}

func (x *CMsgGCToClientUserJoinedChatChannel) GetJoinedPersonaNames() []string {
	if x != nil {
		return x.JoinedPersonaNames
	}
	return nil
}

func (x *CMsgGCToClientUserJoinedChatChannel) GetLeftUserIds() []uint32 {
	if x != nil {
		return x.LeftUserIds
	}
	return nil
}

type CMsgClientToGCLeaveChatChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomId *uint64 `protobuf:"fixed64,1,opt,name=chat_room_id,json=chatRoomId" json:"chat_room_id,omitempty"`
}

func (x *CMsgClientToGCLeaveChatChannel) Reset() {
	*x = CMsgClientToGCLeaveChatChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveChatChannel) ProtoMessage() {}

func (x *CMsgClientToGCLeaveChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveChatChannel) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientToGCLeaveChatChannel) GetChatRoomId() uint64 {
	if x != nil && x.ChatRoomId != nil {
		return *x.ChatRoomId
	}
	return 0
}

type CMsgClientToGCLeaveChatChannelByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomType *EChatRoomType `protobuf:"varint,1,opt,name=room_type,json=roomType,enum=artifact.EChatRoomType,def=0" json:"room_type,omitempty"`
	RoomKey  *uint64        `protobuf:"varint,2,opt,name=room_key,json=roomKey" json:"room_key,omitempty"`
}

// Default values for CMsgClientToGCLeaveChatChannelByKey fields.
const (
	Default_CMsgClientToGCLeaveChatChannelByKey_RoomType = EChatRoomType_k_EChatRoomType_Invalid
)

func (x *CMsgClientToGCLeaveChatChannelByKey) Reset() {
	*x = CMsgClientToGCLeaveChatChannelByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveChatChannelByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveChatChannelByKey) ProtoMessage() {}

func (x *CMsgClientToGCLeaveChatChannelByKey) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveChatChannelByKey.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveChatChannelByKey) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientToGCLeaveChatChannelByKey) GetRoomType() EChatRoomType {
	if x != nil && x.RoomType != nil {
		return *x.RoomType
	}
	return Default_CMsgClientToGCLeaveChatChannelByKey_RoomType
}

func (x *CMsgClientToGCLeaveChatChannelByKey) GetRoomKey() uint64 {
	if x != nil && x.RoomKey != nil {
		return *x.RoomKey
	}
	return 0
}

type CMsgClientToGCIsInMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCIsInMatchmaking) Reset() {
	*x = CMsgClientToGCIsInMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCIsInMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCIsInMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCIsInMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCIsInMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCIsInMatchmaking) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{19}
}

type CMsgClientToGCIsInMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMatchmaking *bool `protobuf:"varint,1,opt,name=in_matchmaking,json=inMatchmaking" json:"in_matchmaking,omitempty"`
}

func (x *CMsgClientToGCIsInMatchmakingResponse) Reset() {
	*x = CMsgClientToGCIsInMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCIsInMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCIsInMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCIsInMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCIsInMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCIsInMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientToGCIsInMatchmakingResponse) GetInMatchmaking() bool {
	if x != nil && x.InMatchmaking != nil {
		return *x.InMatchmaking
	}
	return false
}

type CMsgClientToGCOpenPackItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgClientToGCOpenPackItem) Reset() {
	*x = CMsgClientToGCOpenPackItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCOpenPackItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOpenPackItem) ProtoMessage() {}

func (x *CMsgClientToGCOpenPackItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOpenPackItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOpenPackItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientToGCOpenPackItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgClientToGCOpenPackItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *CMsgClientToGCOpenPackItemResponse_EResponse    `protobuf:"varint,1,opt,name=response,enum=artifact.CMsgClientToGCOpenPackItemResponse_EResponse,def=1" json:"response,omitempty"`
	Items    []*CMsgClientToGCOpenPackItemResponse_OpenedItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for CMsgClientToGCOpenPackItemResponse fields.
const (
	Default_CMsgClientToGCOpenPackItemResponse_Response = CMsgClientToGCOpenPackItemResponse_k_eSuccess
)

func (x *CMsgClientToGCOpenPackItemResponse) Reset() {
	*x = CMsgClientToGCOpenPackItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCOpenPackItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOpenPackItemResponse) ProtoMessage() {}

func (x *CMsgClientToGCOpenPackItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOpenPackItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOpenPackItemResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientToGCOpenPackItemResponse) GetResponse() CMsgClientToGCOpenPackItemResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOpenPackItemResponse_Response
}

func (x *CMsgClientToGCOpenPackItemResponse) GetItems() []*CMsgClientToGCOpenPackItemResponse_OpenedItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CMsgClientToGCSpectateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpectateAccountId *uint32 `protobuf:"varint,1,opt,name=spectate_account_id,json=spectateAccountId" json:"spectate_account_id,omitempty"`
}

func (x *CMsgClientToGCSpectateUser) Reset() {
	*x = CMsgClientToGCSpectateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSpectateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSpectateUser) ProtoMessage() {}

func (x *CMsgClientToGCSpectateUser) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSpectateUser.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSpectateUser) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientToGCSpectateUser) GetSpectateAccountId() uint32 {
	if x != nil && x.SpectateAccountId != nil {
		return *x.SpectateAccountId
	}
	return 0
}

type CMsgClientToGCSpectateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCSpectateUserResponse_EResult `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCSpectateUserResponse_EResult,def=1" json:"result,omitempty"`
	MatchId        *uint64                                     `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId  *uint64                                     `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	SdrKey         []byte                                      `protobuf:"bytes,4,opt,name=sdr_key,json=sdrKey" json:"sdr_key,omitempty"`
	UdpConnectIp   *uint32                                     `protobuf:"varint,5,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort *uint32                                     `protobuf:"varint,6,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
}

// Default values for CMsgClientToGCSpectateUserResponse fields.
const (
	Default_CMsgClientToGCSpectateUserResponse_Result = CMsgClientToGCSpectateUserResponse_eResult_OK
)

func (x *CMsgClientToGCSpectateUserResponse) Reset() {
	*x = CMsgClientToGCSpectateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSpectateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSpectateUserResponse) ProtoMessage() {}

func (x *CMsgClientToGCSpectateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSpectateUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSpectateUserResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientToGCSpectateUserResponse) GetResult() CMsgClientToGCSpectateUserResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSpectateUserResponse_Result
}

func (x *CMsgClientToGCSpectateUserResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCSpectateUserResponse) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgClientToGCSpectateUserResponse) GetSdrKey() []byte {
	if x != nil {
		return x.SdrKey
	}
	return nil
}

func (x *CMsgClientToGCSpectateUserResponse) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CMsgClientToGCSpectateUserResponse) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

type CMsgClientToGCGetMatchHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCGetMatchHistory) Reset() {
	*x = CMsgClientToGCGetMatchHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistory) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistory) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistory) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientToGCGetMatchHistory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetMatchHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDetails []*CMsgClientToGCGetMatchHistoryResponse_MatchDetails `protobuf:"bytes,1,rep,name=match_details,json=matchDetails" json:"match_details,omitempty"`
}

func (x *CMsgClientToGCGetMatchHistoryResponse) Reset() {
	*x = CMsgClientToGCGetMatchHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistoryResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistoryResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientToGCGetMatchHistoryResponse) GetMatchDetails() []*CMsgClientToGCGetMatchHistoryResponse_MatchDetails {
	if x != nil {
		return x.MatchDetails
	}
	return nil
}

type CMsgClientToGCGetMatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgClientToGCGetMatchDetails) Reset() {
	*x = CMsgClientToGCGetMatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchDetails) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchDetails) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgClientToGCGetMatchDetails) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgClientToGCGetMatchDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1      *uint32                                        `protobuf:"varint,1,opt,name=player1" json:"player1,omitempty"`
	Player2      *uint32                                        `protobuf:"varint,2,opt,name=player2" json:"player2,omitempty"`
	StartTime    *uint32                                        `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration     *uint32                                        `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Turns        *uint32                                        `protobuf:"varint,5,opt,name=turns" json:"turns,omitempty"`
	MatchId      *uint64                                        `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Outcome      *uint32                                        `protobuf:"varint,7,opt,name=outcome" json:"outcome,omitempty"`
	MatchMode    *EDCGMatchMode                                 `protobuf:"varint,8,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
	TowerHealth1 []uint32                                       `protobuf:"varint,9,rep,name=tower_health1,json=towerHealth1" json:"tower_health1,omitempty"`
	TowerHealth2 []uint32                                       `protobuf:"varint,10,rep,name=tower_health2,json=towerHealth2" json:"tower_health2,omitempty"`
	Heroes1      []uint32                                       `protobuf:"varint,11,rep,name=heroes1" json:"heroes1,omitempty"`
	Heroes2      []uint32                                       `protobuf:"varint,12,rep,name=heroes2" json:"heroes2,omitempty"`
	Result       *CMsgClientToGCGetMatchDetailsResponse_EResult `protobuf:"varint,13,opt,name=result,enum=artifact.CMsgClientToGCGetMatchDetailsResponse_EResult,def=0" json:"result,omitempty"`
	ClusterId    *uint32                                        `protobuf:"varint,14,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ReplaySalt   *uint32                                        `protobuf:"varint,15,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
}

// Default values for CMsgClientToGCGetMatchDetailsResponse fields.
const (
	Default_CMsgClientToGCGetMatchDetailsResponse_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
	Default_CMsgClientToGCGetMatchDetailsResponse_Result    = CMsgClientToGCGetMatchDetailsResponse_eResult_Success
)

func (x *CMsgClientToGCGetMatchDetailsResponse) Reset() {
	*x = CMsgClientToGCGetMatchDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchDetailsResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchDetailsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetPlayer1() uint32 {
	if x != nil && x.Player1 != nil {
		return *x.Player1
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetPlayer2() uint32 {
	if x != nil && x.Player2 != nil {
		return *x.Player2
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetTurns() uint32 {
	if x != nil && x.Turns != nil {
		return *x.Turns
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetOutcome() uint32 {
	if x != nil && x.Outcome != nil {
		return *x.Outcome
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientToGCGetMatchDetailsResponse_MatchMode
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetTowerHealth1() []uint32 {
	if x != nil {
		return x.TowerHealth1
	}
	return nil
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetTowerHealth2() []uint32 {
	if x != nil {
		return x.TowerHealth2
	}
	return nil
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetHeroes1() []uint32 {
	if x != nil {
		return x.Heroes1
	}
	return nil
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetHeroes2() []uint32 {
	if x != nil {
		return x.Heroes2
	}
	return nil
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetResult() CMsgClientToGCGetMatchDetailsResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetMatchDetailsResponse_Result
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchDetailsResponse) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

type CMsgClientToGCGetAIVsAIMatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCGetAIVsAIMatchConfig) Reset() {
	*x = CMsgClientToGCGetAIVsAIMatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetAIVsAIMatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAIVsAIMatchConfig) ProtoMessage() {}

func (x *CMsgClientToGCGetAIVsAIMatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAIVsAIMatchConfig.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAIVsAIMatchConfig) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{29}
}

type CMsgClientToGCGetAIVsAIMatchConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	AiMatchId    *uint32 `protobuf:"varint,2,opt,name=ai_match_id,json=aiMatchId" json:"ai_match_id,omitempty"`
	Ai_0DeckCode *string `protobuf:"bytes,3,opt,name=ai_0_deck_code,json=ai0DeckCode" json:"ai_0_deck_code,omitempty"`
	Ai_1DeckCode *string `protobuf:"bytes,4,opt,name=ai_1_deck_code,json=ai1DeckCode" json:"ai_1_deck_code,omitempty"`
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) Reset() {
	*x = CMsgClientToGCGetAIVsAIMatchConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAIVsAIMatchConfigResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAIVsAIMatchConfigResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAIVsAIMatchConfigResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) GetAiMatchId() uint32 {
	if x != nil && x.AiMatchId != nil {
		return *x.AiMatchId
	}
	return 0
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) GetAi_0DeckCode() string {
	if x != nil && x.Ai_0DeckCode != nil {
		return *x.Ai_0DeckCode
	}
	return ""
}

func (x *CMsgClientToGCGetAIVsAIMatchConfigResponse) GetAi_1DeckCode() string {
	if x != nil && x.Ai_1DeckCode != nil {
		return *x.Ai_1DeckCode
	}
	return ""
}

type CMsgClientToGCGetAIVsAIMatchComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiMatchId     *uint32 `protobuf:"varint,1,opt,name=ai_match_id,json=aiMatchId" json:"ai_match_id,omitempty"`
	WinningPlayer *uint32 `protobuf:"varint,2,opt,name=winning_player,json=winningPlayer" json:"winning_player,omitempty"`
}

func (x *CMsgClientToGCGetAIVsAIMatchComplete) Reset() {
	*x = CMsgClientToGCGetAIVsAIMatchComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetAIVsAIMatchComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAIVsAIMatchComplete) ProtoMessage() {}

func (x *CMsgClientToGCGetAIVsAIMatchComplete) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAIVsAIMatchComplete.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAIVsAIMatchComplete) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientToGCGetAIVsAIMatchComplete) GetAiMatchId() uint32 {
	if x != nil && x.AiMatchId != nil {
		return *x.AiMatchId
	}
	return 0
}

func (x *CMsgClientToGCGetAIVsAIMatchComplete) GetWinningPlayer() uint32 {
	if x != nil && x.WinningPlayer != nil {
		return *x.WinningPlayer
	}
	return 0
}

type CMsgGCToClientGlobalPhantomLeagues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalDeckBytes []byte `protobuf:"bytes,3,opt,name=global_deck_bytes,json=globalDeckBytes" json:"global_deck_bytes,omitempty"`
}

func (x *CMsgGCToClientGlobalPhantomLeagues) Reset() {
	*x = CMsgGCToClientGlobalPhantomLeagues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientGlobalPhantomLeagues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGlobalPhantomLeagues) ProtoMessage() {}

func (x *CMsgGCToClientGlobalPhantomLeagues) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGlobalPhantomLeagues.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGlobalPhantomLeagues) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGCToClientGlobalPhantomLeagues) GetGlobalDeckBytes() []byte {
	if x != nil {
		return x.GlobalDeckBytes
	}
	return nil
}

type CMsgClientToGCJoinGauntlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId       *uint32  `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	DeckBytes        []byte   `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	EntryId          *uint32  `protobuf:"varint,3,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	EntryCosts       []uint64 `protobuf:"varint,4,rep,name=entry_costs,json=entryCosts" json:"entry_costs,omitempty"`
	SelectRandomDeck *bool    `protobuf:"varint,5,opt,name=select_random_deck,json=selectRandomDeck" json:"select_random_deck,omitempty"`
}

func (x *CMsgClientToGCJoinGauntlet) Reset() {
	*x = CMsgClientToGCJoinGauntlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCJoinGauntlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinGauntlet) ProtoMessage() {}

func (x *CMsgClientToGCJoinGauntlet) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinGauntlet.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinGauntlet) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientToGCJoinGauntlet) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgClientToGCJoinGauntlet) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CMsgClientToGCJoinGauntlet) GetEntryId() uint32 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CMsgClientToGCJoinGauntlet) GetEntryCosts() []uint64 {
	if x != nil {
		return x.EntryCosts
	}
	return nil
}

func (x *CMsgClientToGCJoinGauntlet) GetSelectRandomDeck() bool {
	if x != nil && x.SelectRandomDeck != nil {
		return *x.SelectRandomDeck
	}
	return false
}

type CMsgClientToGCJoinGauntletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCJoinGauntletResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCJoinGauntletResponse_EResponse,def=0" json:"result,omitempty"`
	AvailableAfter *uint32                                       `protobuf:"varint,2,opt,name=available_after,json=availableAfter" json:"available_after,omitempty"`
}

// Default values for CMsgClientToGCJoinGauntletResponse fields.
const (
	Default_CMsgClientToGCJoinGauntletResponse_Result = CMsgClientToGCJoinGauntletResponse_k_eInternalError
)

func (x *CMsgClientToGCJoinGauntletResponse) Reset() {
	*x = CMsgClientToGCJoinGauntletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCJoinGauntletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinGauntletResponse) ProtoMessage() {}

func (x *CMsgClientToGCJoinGauntletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinGauntletResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinGauntletResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientToGCJoinGauntletResponse) GetResult() CMsgClientToGCJoinGauntletResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCJoinGauntletResponse_Result
}

func (x *CMsgClientToGCJoinGauntletResponse) GetAvailableAfter() uint32 {
	if x != nil && x.AvailableAfter != nil {
		return *x.AvailableAfter
	}
	return 0
}

type CMsgClientToGCAbandonGauntlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId *uint32 `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
}

func (x *CMsgClientToGCAbandonGauntlet) Reset() {
	*x = CMsgClientToGCAbandonGauntlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAbandonGauntlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAbandonGauntlet) ProtoMessage() {}

func (x *CMsgClientToGCAbandonGauntlet) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAbandonGauntlet.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAbandonGauntlet) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientToGCAbandonGauntlet) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

type CMsgClientToGCAbandonGauntletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *CMsgClientToGCAbandonGauntletResponse_EResponse    `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCAbandonGauntletResponse_EResponse,def=0" json:"result,omitempty"`
	RewardItems []*CMsgClientToGCAbandonGauntletResponse_RewardItem `protobuf:"bytes,2,rep,name=reward_items,json=rewardItems" json:"reward_items,omitempty"`
}

// Default values for CMsgClientToGCAbandonGauntletResponse fields.
const (
	Default_CMsgClientToGCAbandonGauntletResponse_Result = CMsgClientToGCAbandonGauntletResponse_k_eInternalError
)

func (x *CMsgClientToGCAbandonGauntletResponse) Reset() {
	*x = CMsgClientToGCAbandonGauntletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAbandonGauntletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAbandonGauntletResponse) ProtoMessage() {}

func (x *CMsgClientToGCAbandonGauntletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAbandonGauntletResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAbandonGauntletResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgClientToGCAbandonGauntletResponse) GetResult() CMsgClientToGCAbandonGauntletResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCAbandonGauntletResponse_Result
}

func (x *CMsgClientToGCAbandonGauntletResponse) GetRewardItems() []*CMsgClientToGCAbandonGauntletResponse_RewardItem {
	if x != nil {
		return x.RewardItems
	}
	return nil
}

type CMsgClientToGCAIGauntletResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId     *uint32 `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	IsWin          *bool   `protobuf:"varint,2,opt,name=is_win,json=isWin" json:"is_win,omitempty"`
	SecretKey      *uint64 `protobuf:"fixed64,3,opt,name=secret_key,json=secretKey" json:"secret_key,omitempty"`
	ExpectedWins   *uint32 `protobuf:"varint,4,opt,name=expected_wins,json=expectedWins" json:"expected_wins,omitempty"`
	ExpectedLosses *uint32 `protobuf:"varint,5,opt,name=expected_losses,json=expectedLosses" json:"expected_losses,omitempty"`
}

func (x *CMsgClientToGCAIGauntletResult) Reset() {
	*x = CMsgClientToGCAIGauntletResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAIGauntletResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAIGauntletResult) ProtoMessage() {}

func (x *CMsgClientToGCAIGauntletResult) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAIGauntletResult.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAIGauntletResult) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgClientToGCAIGauntletResult) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgClientToGCAIGauntletResult) GetIsWin() bool {
	if x != nil && x.IsWin != nil {
		return *x.IsWin
	}
	return false
}

func (x *CMsgClientToGCAIGauntletResult) GetSecretKey() uint64 {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return 0
}

func (x *CMsgClientToGCAIGauntletResult) GetExpectedWins() uint32 {
	if x != nil && x.ExpectedWins != nil {
		return *x.ExpectedWins
	}
	return 0
}

func (x *CMsgClientToGCAIGauntletResult) GetExpectedLosses() uint32 {
	if x != nil && x.ExpectedLosses != nil {
		return *x.ExpectedLosses
	}
	return 0
}

type CMsgClientToGCAIGauntletResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCAIGauntletResultResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCAIGauntletResultResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCAIGauntletResultResponse fields.
const (
	Default_CMsgClientToGCAIGauntletResultResponse_Result = CMsgClientToGCAIGauntletResultResponse_k_eInternalError
)

func (x *CMsgClientToGCAIGauntletResultResponse) Reset() {
	*x = CMsgClientToGCAIGauntletResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAIGauntletResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAIGauntletResultResponse) ProtoMessage() {}

func (x *CMsgClientToGCAIGauntletResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAIGauntletResultResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAIGauntletResultResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgClientToGCAIGauntletResultResponse) GetResult() CMsgClientToGCAIGauntletResultResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCAIGauntletResultResponse_Result
}

type CMsgGCToClientAvailableGauntlets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableGauntlets []*CMsgGauntletConfig `protobuf:"bytes,1,rep,name=available_gauntlets,json=availableGauntlets" json:"available_gauntlets,omitempty"`
}

func (x *CMsgGCToClientAvailableGauntlets) Reset() {
	*x = CMsgGCToClientAvailableGauntlets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientAvailableGauntlets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientAvailableGauntlets) ProtoMessage() {}

func (x *CMsgGCToClientAvailableGauntlets) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientAvailableGauntlets.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientAvailableGauntlets) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgGCToClientAvailableGauntlets) GetAvailableGauntlets() []*CMsgGauntletConfig {
	if x != nil {
		return x.AvailableGauntlets
	}
	return nil
}

type CMsgClientToGCGetGauntletMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletInstanceId *uint64 `protobuf:"varint,1,opt,name=gauntlet_instance_id,json=gauntletInstanceId" json:"gauntlet_instance_id,omitempty"`
}

func (x *CMsgClientToGCGetGauntletMatches) Reset() {
	*x = CMsgClientToGCGetGauntletMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetGauntletMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetGauntletMatches) ProtoMessage() {}

func (x *CMsgClientToGCGetGauntletMatches) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetGauntletMatches.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetGauntletMatches) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgClientToGCGetGauntletMatches) GetGauntletInstanceId() uint64 {
	if x != nil && x.GauntletInstanceId != nil {
		return *x.GauntletInstanceId
	}
	return 0
}

type CMsgClientToGCGetGauntletMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*CMsgClientToGCGetGauntletMatchesResponse_Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (x *CMsgClientToGCGetGauntletMatchesResponse) Reset() {
	*x = CMsgClientToGCGetGauntletMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetGauntletMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetGauntletMatchesResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetGauntletMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetGauntletMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetGauntletMatchesResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgClientToGCGetGauntletMatchesResponse) GetMatches() []*CMsgClientToGCGetGauntletMatchesResponse_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgClientToGCRegisterGauntletDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId *uint32 `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	DeckBytes  []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
}

func (x *CMsgClientToGCRegisterGauntletDeck) Reset() {
	*x = CMsgClientToGCRegisterGauntletDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRegisterGauntletDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRegisterGauntletDeck) ProtoMessage() {}

func (x *CMsgClientToGCRegisterGauntletDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRegisterGauntletDeck.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRegisterGauntletDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgClientToGCRegisterGauntletDeck) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgClientToGCRegisterGauntletDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

type CMsgClientToGCRegisterGauntletDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCRegisterGauntletDeckResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCRegisterGauntletDeckResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCRegisterGauntletDeckResponse fields.
const (
	Default_CMsgClientToGCRegisterGauntletDeckResponse_Result = CMsgClientToGCRegisterGauntletDeckResponse_k_eInternalError
)

func (x *CMsgClientToGCRegisterGauntletDeckResponse) Reset() {
	*x = CMsgClientToGCRegisterGauntletDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRegisterGauntletDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRegisterGauntletDeckResponse) ProtoMessage() {}

func (x *CMsgClientToGCRegisterGauntletDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRegisterGauntletDeckResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRegisterGauntletDeckResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgClientToGCRegisterGauntletDeckResponse) GetResult() CMsgClientToGCRegisterGauntletDeckResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRegisterGauntletDeckResponse_Result
}

type CMsgClientToGCLimitedGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitedInstanceId *uint64 `protobuf:"varint,1,opt,name=limited_instance_id,json=limitedInstanceId" json:"limited_instance_id,omitempty"`
	GrantId           *uint32 `protobuf:"varint,2,opt,name=grant_id,json=grantId" json:"grant_id,omitempty"`
}

func (x *CMsgClientToGCLimitedGrant) Reset() {
	*x = CMsgClientToGCLimitedGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGrant) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGrant) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGrant.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGrant) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgClientToGCLimitedGrant) GetLimitedInstanceId() uint64 {
	if x != nil && x.LimitedInstanceId != nil {
		return *x.LimitedInstanceId
	}
	return 0
}

func (x *CMsgClientToGCLimitedGrant) GetGrantId() uint32 {
	if x != nil && x.GrantId != nil {
		return *x.GrantId
	}
	return 0
}

type CMsgClientToGCLimitedGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *CMsgClientToGCLimitedGrantResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCLimitedGrantResponse_EResponse,def=0" json:"result,omitempty"`
	ChoiceCount *uint32                                       `protobuf:"varint,2,opt,name=choice_count,json=choiceCount" json:"choice_count,omitempty"`
	DefIndex    []uint32                                      `protobuf:"varint,3,rep,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

// Default values for CMsgClientToGCLimitedGrantResponse fields.
const (
	Default_CMsgClientToGCLimitedGrantResponse_Result = CMsgClientToGCLimitedGrantResponse_k_eInternalError
)

func (x *CMsgClientToGCLimitedGrantResponse) Reset() {
	*x = CMsgClientToGCLimitedGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGrantResponse) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGrantResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGrantResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgClientToGCLimitedGrantResponse) GetResult() CMsgClientToGCLimitedGrantResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCLimitedGrantResponse_Result
}

func (x *CMsgClientToGCLimitedGrantResponse) GetChoiceCount() uint32 {
	if x != nil && x.ChoiceCount != nil {
		return *x.ChoiceCount
	}
	return 0
}

func (x *CMsgClientToGCLimitedGrantResponse) GetDefIndex() []uint32 {
	if x != nil {
		return x.DefIndex
	}
	return nil
}

type CMsgClientToGCLimitedGrantChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitedInstanceId *uint64  `protobuf:"varint,1,opt,name=limited_instance_id,json=limitedInstanceId" json:"limited_instance_id,omitempty"`
	GrantId           *uint32  `protobuf:"varint,2,opt,name=grant_id,json=grantId" json:"grant_id,omitempty"`
	ChoiceDefIndex    []uint32 `protobuf:"varint,3,rep,name=choice_def_index,json=choiceDefIndex" json:"choice_def_index,omitempty"`
}

func (x *CMsgClientToGCLimitedGrantChoice) Reset() {
	*x = CMsgClientToGCLimitedGrantChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGrantChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGrantChoice) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGrantChoice) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGrantChoice.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGrantChoice) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgClientToGCLimitedGrantChoice) GetLimitedInstanceId() uint64 {
	if x != nil && x.LimitedInstanceId != nil {
		return *x.LimitedInstanceId
	}
	return 0
}

func (x *CMsgClientToGCLimitedGrantChoice) GetGrantId() uint32 {
	if x != nil && x.GrantId != nil {
		return *x.GrantId
	}
	return 0
}

func (x *CMsgClientToGCLimitedGrantChoice) GetChoiceDefIndex() []uint32 {
	if x != nil {
		return x.ChoiceDefIndex
	}
	return nil
}

type CMsgClientToGCLimitedGrantChoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCLimitedGrantChoiceResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCLimitedGrantChoiceResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCLimitedGrantChoiceResponse fields.
const (
	Default_CMsgClientToGCLimitedGrantChoiceResponse_Result = CMsgClientToGCLimitedGrantChoiceResponse_k_eInternalError
)

func (x *CMsgClientToGCLimitedGrantChoiceResponse) Reset() {
	*x = CMsgClientToGCLimitedGrantChoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGrantChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGrantChoiceResponse) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGrantChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGrantChoiceResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGrantChoiceResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgClientToGCLimitedGrantChoiceResponse) GetResult() CMsgClientToGCLimitedGrantChoiceResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCLimitedGrantChoiceResponse_Result
}

type CMsgClientToGCLimitedGetFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitedFormat *uint32 `protobuf:"varint,1,opt,name=limited_format,json=limitedFormat" json:"limited_format,omitempty"`
}

func (x *CMsgClientToGCLimitedGetFormat) Reset() {
	*x = CMsgClientToGCLimitedGetFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGetFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGetFormat) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGetFormat) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGetFormat.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGetFormat) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgClientToGCLimitedGetFormat) GetLimitedFormat() uint32 {
	if x != nil && x.LimitedFormat != nil {
		return *x.LimitedFormat
	}
	return 0
}

type CMsgClientToGCLimitedGetFormatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      *bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	FormatConfig *CMsgLimitedFormat `protobuf:"bytes,2,opt,name=format_config,json=formatConfig" json:"format_config,omitempty"`
}

func (x *CMsgClientToGCLimitedGetFormatResponse) Reset() {
	*x = CMsgClientToGCLimitedGetFormatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLimitedGetFormatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLimitedGetFormatResponse) ProtoMessage() {}

func (x *CMsgClientToGCLimitedGetFormatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLimitedGetFormatResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLimitedGetFormatResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgClientToGCLimitedGetFormatResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgClientToGCLimitedGetFormatResponse) GetFormatConfig() *CMsgLimitedFormat {
	if x != nil {
		return x.FormatConfig
	}
	return nil
}

type CMsgClientToGCPrivateLobbyCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion *uint32                    `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PingTimes     *CMsgRegionPingTimesClient `protobuf:"bytes,2,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyCreate) Reset() {
	*x = CMsgClientToGCPrivateLobbyCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyCreate) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyCreate) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyCreate.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyCreate) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgClientToGCPrivateLobbyCreate) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyCreate) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CMsgClientToGCPrivateLobbyCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCPrivateLobbyCreateResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyCreateResponse_EResponse,def=0" json:"result,omitempty"`
	PrivateLobbyId *uint64                                             `protobuf:"fixed64,2,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyCreateResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyCreateResponse_Result = CMsgClientToGCPrivateLobbyCreateResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyCreateResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyCreateResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyCreateResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyCreateResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientToGCPrivateLobbyCreateResponse) GetResult() CMsgClientToGCPrivateLobbyCreateResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyCreateResponse_Result
}

func (x *CMsgClientToGCPrivateLobbyCreateResponse) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId *uint64 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyLeave) Reset() {
	*x = CMsgClientToGCPrivateLobbyLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyLeave) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyLeave) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyLeave.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyLeave) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgClientToGCPrivateLobbyLeave) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyLeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPrivateLobbyLeaveResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyLeaveResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyLeaveResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyLeaveResponse_Result = CMsgClientToGCPrivateLobbyLeaveResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyLeaveResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyLeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyLeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyLeaveResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyLeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyLeaveResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyLeaveResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgClientToGCPrivateLobbyLeaveResponse) GetResult() CMsgClientToGCPrivateLobbyLeaveResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyLeaveResponse_Result
}

type CMsgClientToGCPrivateLobbyJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId *uint64                    `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	ClientVersion  *uint32                    `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PingTimes      *CMsgRegionPingTimesClient `protobuf:"bytes,3,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
	LobbySalt      *uint64                    `protobuf:"fixed64,4,opt,name=lobby_salt,json=lobbySalt" json:"lobby_salt,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyJoin) Reset() {
	*x = CMsgClientToGCPrivateLobbyJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyJoin) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyJoin) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoin.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyJoin) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgClientToGCPrivateLobbyJoin) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyJoin) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyJoin) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

func (x *CMsgClientToGCPrivateLobbyJoin) GetLobbySalt() uint64 {
	if x != nil && x.LobbySalt != nil {
		return *x.LobbySalt
	}
	return 0
}

type CMsgClientToGCPrivateLobbyJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPrivateLobbyJoinResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyJoinResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyJoinResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyJoinResponse_Result = CMsgClientToGCPrivateLobbyJoinResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyJoinResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyJoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyJoinResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoinResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyJoinResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgClientToGCPrivateLobbyJoinResponse) GetResult() CMsgClientToGCPrivateLobbyJoinResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyJoinResponse_Result
}

type CMsgClientToGCPrivateLobbyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId  *uint64                                   `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	TargetAccountId *uint32                                   `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ActionId        *CMsgClientToGCPrivateLobbyAction_EAction `protobuf:"varint,3,opt,name=action_id,json=actionId,enum=artifact.CMsgClientToGCPrivateLobbyAction_EAction,def=0" json:"action_id,omitempty"`
	UintValue       *uint64                                   `protobuf:"varint,4,opt,name=uint_value,json=uintValue" json:"uint_value,omitempty"`
	BytesValue      []byte                                    `protobuf:"bytes,5,opt,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	BoolValue       *bool                                     `protobuf:"varint,6,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	SintValue       *int64                                    `protobuf:"zigzag64,7,opt,name=sint_value,json=sintValue" json:"sint_value,omitempty"`
	StrValue        *string                                   `protobuf:"bytes,8,opt,name=str_value,json=strValue" json:"str_value,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyAction fields.
const (
	Default_CMsgClientToGCPrivateLobbyAction_ActionId = CMsgClientToGCPrivateLobbyAction_k_eSetTeam
)

func (x *CMsgClientToGCPrivateLobbyAction) Reset() {
	*x = CMsgClientToGCPrivateLobbyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyAction) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyAction) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyAction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyAction) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientToGCPrivateLobbyAction) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyAction) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyAction) GetActionId() CMsgClientToGCPrivateLobbyAction_EAction {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return Default_CMsgClientToGCPrivateLobbyAction_ActionId
}

func (x *CMsgClientToGCPrivateLobbyAction) GetUintValue() uint64 {
	if x != nil && x.UintValue != nil {
		return *x.UintValue
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyAction) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *CMsgClientToGCPrivateLobbyAction) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *CMsgClientToGCPrivateLobbyAction) GetSintValue() int64 {
	if x != nil && x.SintValue != nil {
		return *x.SintValue
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyAction) GetStrValue() string {
	if x != nil && x.StrValue != nil {
		return *x.StrValue
	}
	return ""
}

type CMsgClientToGCPrivateLobbyActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPrivateLobbyActionResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyActionResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyActionResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyActionResponse_Result = CMsgClientToGCPrivateLobbyActionResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyActionResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyActionResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyActionResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgClientToGCPrivateLobbyActionResponse) GetResult() CMsgClientToGCPrivateLobbyActionResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyActionResponse_Result
}

type CMsgClientToGCPrivateLobbyStartMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId *uint64 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyStartMatch) Reset() {
	*x = CMsgClientToGCPrivateLobbyStartMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyStartMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyStartMatch) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyStartMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyStartMatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyStartMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgClientToGCPrivateLobbyStartMatch) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyStartMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse,def=0" json:"result,omitempty"`
	AccountId *uint32                                                 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyStartMatchResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyStartMatchResponse_Result = CMsgClientToGCPrivateLobbyStartMatchResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyStartMatchResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyStartMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyStartMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyStartMatchResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyStartMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyStartMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyStartMatchResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgClientToGCPrivateLobbyStartMatchResponse) GetResult() CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyStartMatchResponse_Result
}

func (x *CMsgClientToGCPrivateLobbyStartMatchResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyInviteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId  *uint64 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	InviteAccountId *uint32 `protobuf:"varint,2,opt,name=invite_account_id,json=inviteAccountId" json:"invite_account_id,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyInviteUser) Reset() {
	*x = CMsgClientToGCPrivateLobbyInviteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyInviteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyInviteUser) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyInviteUser) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyInviteUser.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyInviteUser) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgClientToGCPrivateLobbyInviteUser) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyInviteUser) GetInviteAccountId() uint32 {
	if x != nil && x.InviteAccountId != nil {
		return *x.InviteAccountId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyInviteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse,def=0" json:"result,omitempty"`
	UserOnline *bool                                                   `protobuf:"varint,2,opt,name=user_online,json=userOnline" json:"user_online,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyInviteUserResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyInviteUserResponse_Result = CMsgClientToGCPrivateLobbyInviteUserResponse_k_eInternalError
)

func (x *CMsgClientToGCPrivateLobbyInviteUserResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyInviteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyInviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyInviteUserResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyInviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyInviteUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyInviteUserResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgClientToGCPrivateLobbyInviteUserResponse) GetResult() CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyInviteUserResponse_Result
}

func (x *CMsgClientToGCPrivateLobbyInviteUserResponse) GetUserOnline() bool {
	if x != nil && x.UserOnline != nil {
		return *x.UserOnline
	}
	return false
}

type CMsgClientToGCPrivateLobbyChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeAccountId *uint32                    `protobuf:"varint,1,opt,name=challenge_account_id,json=challengeAccountId" json:"challenge_account_id,omitempty"`
	ClientVersion      *uint32                    `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PingTimes          *CMsgRegionPingTimesClient `protobuf:"bytes,3,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyChallenge) Reset() {
	*x = CMsgClientToGCPrivateLobbyChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyChallenge) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyChallenge) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgClientToGCPrivateLobbyChallenge) GetChallengeAccountId() uint32 {
	if x != nil && x.ChallengeAccountId != nil {
		return *x.ChallengeAccountId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyChallenge) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyChallenge) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CMsgClientToGCPrivateLobbyChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCPrivateLobbyChallengeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyChallengeResponse_EResponse,def=0" json:"result,omitempty"`
	PrivateLobbyId *uint64                                                `protobuf:"fixed64,2,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyChallengeResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyChallengeResponse_Result = CMsgClientToGCPrivateLobbyChallengeResponse_k_eSuccess
)

func (x *CMsgClientToGCPrivateLobbyChallengeResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyChallengeResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyChallengeResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgClientToGCPrivateLobbyChallengeResponse) GetResult() CMsgClientToGCPrivateLobbyChallengeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyChallengeResponse_Result
}

func (x *CMsgClientToGCPrivateLobbyChallengeResponse) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

type CMsgGCToClientPrivateLobbyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId     *uint64                                 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	Event              *CMsgGCToClientPrivateLobbyEvent_EEvent `protobuf:"varint,2,opt,name=event,enum=artifact.CMsgGCToClientPrivateLobbyEvent_EEvent,def=1" json:"event,omitempty"`
	InitiatorAccountId *uint32                                 `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	TargetAccountId    *uint32                                 `protobuf:"varint,4,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	BytesData          []byte                                  `protobuf:"bytes,5,opt,name=bytes_data,json=bytesData" json:"bytes_data,omitempty"`
	StrData            *string                                 `protobuf:"bytes,6,opt,name=str_data,json=strData" json:"str_data,omitempty"`
	UintData           *uint64                                 `protobuf:"varint,7,opt,name=uint_data,json=uintData" json:"uint_data,omitempty"`
}

// Default values for CMsgGCToClientPrivateLobbyEvent fields.
const (
	Default_CMsgGCToClientPrivateLobbyEvent_Event = CMsgGCToClientPrivateLobbyEvent_k_ePlayerKicked
)

func (x *CMsgGCToClientPrivateLobbyEvent) Reset() {
	*x = CMsgGCToClientPrivateLobbyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientPrivateLobbyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPrivateLobbyEvent) ProtoMessage() {}

func (x *CMsgGCToClientPrivateLobbyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPrivateLobbyEvent.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPrivateLobbyEvent) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetEvent() CMsgGCToClientPrivateLobbyEvent_EEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgGCToClientPrivateLobbyEvent_Event
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetInitiatorAccountId() uint32 {
	if x != nil && x.InitiatorAccountId != nil {
		return *x.InitiatorAccountId
	}
	return 0
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetBytesData() []byte {
	if x != nil {
		return x.BytesData
	}
	return nil
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetStrData() string {
	if x != nil && x.StrData != nil {
		return *x.StrData
	}
	return ""
}

func (x *CMsgGCToClientPrivateLobbyEvent) GetUintData() uint64 {
	if x != nil && x.UintData != nil {
		return *x.UintData
	}
	return 0
}

type CMsgClientToGCPrivateLobbyClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId *uint64 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	ClientVersion  *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyClientVersion) Reset() {
	*x = CMsgClientToGCPrivateLobbyClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyClientVersion) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyClientVersion.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyClientVersion) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgClientToGCPrivateLobbyClientVersion) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CMsgClientToGCPrivateLobbyClientVersion) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CMsgClientToGCPrivateLobbyJoinChatRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId *uint64 `protobuf:"fixed64,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoom) Reset() {
	*x = CMsgClientToGCPrivateLobbyJoinChatRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyJoinChatRoom) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoom) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoinChatRoom.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyJoinChatRoom) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoom) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

type CMsgClientToGCPrivateLobbyJoinChatRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPrivateLobbyJoinChatRoomResponse fields.
const (
	Default_CMsgClientToGCPrivateLobbyJoinChatRoomResponse_Result = CMsgClientToGCPrivateLobbyJoinChatRoomResponse_k_eSuccess
)

func (x *CMsgClientToGCPrivateLobbyJoinChatRoomResponse) Reset() {
	*x = CMsgClientToGCPrivateLobbyJoinChatRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateLobbyJoinChatRoomResponse) ProtoMessage() {}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateLobbyJoinChatRoomResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateLobbyJoinChatRoomResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgClientToGCPrivateLobbyJoinChatRoomResponse) GetResult() CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPrivateLobbyJoinChatRoomResponse_Result
}

type CMsgClientToGCMatchSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime      *uint32           `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Version        *uint32           `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	MatchMode      *EDCGMatchMode    `protobuf:"varint,3,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
	MatchData      *CMsgMatchData    `protobuf:"bytes,4,opt,name=match_data,json=matchData" json:"match_data,omitempty"`
	AdditionalData []*CExtraMsgBlock `protobuf:"bytes,5,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

// Default values for CMsgClientToGCMatchSignout fields.
const (
	Default_CMsgClientToGCMatchSignout_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgClientToGCMatchSignout) Reset() {
	*x = CMsgClientToGCMatchSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCMatchSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMatchSignout) ProtoMessage() {}

func (x *CMsgClientToGCMatchSignout) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMatchSignout.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMatchSignout) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientToGCMatchSignout) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgClientToGCMatchSignout) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientToGCMatchSignout) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientToGCMatchSignout_MatchMode
}

func (x *CMsgClientToGCMatchSignout) GetMatchData() *CMsgMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *CMsgClientToGCMatchSignout) GetAdditionalData() []*CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type CMsgGCToClientSDRTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
}

func (x *CMsgGCToClientSDRTicket) Reset() {
	*x = CMsgGCToClientSDRTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientSDRTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSDRTicket) ProtoMessage() {}

func (x *CMsgGCToClientSDRTicket) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSDRTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSDRTicket) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgGCToClientSDRTicket) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

type CMsgClientToGCReplacementSDRTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId *uint64 `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgClientToGCReplacementSDRTicket) Reset() {
	*x = CMsgClientToGCReplacementSDRTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCReplacementSDRTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCReplacementSDRTicket) ProtoMessage() {}

func (x *CMsgClientToGCReplacementSDRTicket) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCReplacementSDRTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCReplacementSDRTicket) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgClientToGCReplacementSDRTicket) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgClientToGCInitialGrantAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedDefIndex *uint32 `protobuf:"varint,1,opt,name=expected_def_index,json=expectedDefIndex" json:"expected_def_index,omitempty"`
}

func (x *CMsgClientToGCInitialGrantAck) Reset() {
	*x = CMsgClientToGCInitialGrantAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCInitialGrantAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCInitialGrantAck) ProtoMessage() {}

func (x *CMsgClientToGCInitialGrantAck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCInitialGrantAck.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCInitialGrantAck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgClientToGCInitialGrantAck) GetExpectedDefIndex() uint32 {
	if x != nil && x.ExpectedDefIndex != nil {
		return *x.ExpectedDefIndex
	}
	return 0
}

type CMsgClientToGCRecycleCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIds             []uint64 `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	RecycleOfferVersion *uint32  `protobuf:"varint,2,opt,name=recycle_offer_version,json=recycleOfferVersion" json:"recycle_offer_version,omitempty"`
}

func (x *CMsgClientToGCRecycleCards) Reset() {
	*x = CMsgClientToGCRecycleCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRecycleCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecycleCards) ProtoMessage() {}

func (x *CMsgClientToGCRecycleCards) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecycleCards.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecycleCards) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgClientToGCRecycleCards) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

func (x *CMsgClientToGCRecycleCards) GetRecycleOfferVersion() uint32 {
	if x != nil && x.RecycleOfferVersion != nil {
		return *x.RecycleOfferVersion
	}
	return 0
}

type CMsgClientToGCRecycleCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *CMsgClientToGCRecycleCardsResponse_EResponse     `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCRecycleCardsResponse_EResponse,def=0" json:"result,omitempty"`
	GrantedItems    []*CMsgClientToGCRecycleCardsResponse_GrantedItem `protobuf:"bytes,2,rep,name=granted_items,json=grantedItems" json:"granted_items,omitempty"`
	ResultingPoints *uint32                                           `protobuf:"varint,3,opt,name=resulting_points,json=resultingPoints" json:"resulting_points,omitempty"`
}

// Default values for CMsgClientToGCRecycleCardsResponse fields.
const (
	Default_CMsgClientToGCRecycleCardsResponse_Result = CMsgClientToGCRecycleCardsResponse_k_eInternalError
)

func (x *CMsgClientToGCRecycleCardsResponse) Reset() {
	*x = CMsgClientToGCRecycleCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRecycleCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecycleCardsResponse) ProtoMessage() {}

func (x *CMsgClientToGCRecycleCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecycleCardsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecycleCardsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgClientToGCRecycleCardsResponse) GetResult() CMsgClientToGCRecycleCardsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRecycleCardsResponse_Result
}

func (x *CMsgClientToGCRecycleCardsResponse) GetGrantedItems() []*CMsgClientToGCRecycleCardsResponse_GrantedItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *CMsgClientToGCRecycleCardsResponse) GetResultingPoints() uint32 {
	if x != nil && x.ResultingPoints != nil {
		return *x.ResultingPoints
	}
	return 0
}

type CMsgClientToGCSetPlayerBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBadge *uint32 `protobuf:"varint,1,opt,name=player_badge,json=playerBadge" json:"player_badge,omitempty"`
}

func (x *CMsgClientToGCSetPlayerBadge) Reset() {
	*x = CMsgClientToGCSetPlayerBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetPlayerBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetPlayerBadge) ProtoMessage() {}

func (x *CMsgClientToGCSetPlayerBadge) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetPlayerBadge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetPlayerBadge) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgClientToGCSetPlayerBadge) GetPlayerBadge() uint32 {
	if x != nil && x.PlayerBadge != nil {
		return *x.PlayerBadge
	}
	return 0
}

type CMsgClientToGCReplacementSDRTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       *string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) Reset() {
	*x = CMsgClientToGCReplacementSDRTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCReplacementSDRTicketResponse) ProtoMessage() {}

func (x *CMsgClientToGCReplacementSDRTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCReplacementSDRTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCReplacementSDRTicketResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type CMsgClientToGCTourneyGetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId   *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	Subscribe   *bool   `protobuf:"varint,2,opt,name=subscribe" json:"subscribe,omitempty"`
	TourneySalt *uint32 `protobuf:"varint,3,opt,name=tourney_salt,json=tourneySalt" json:"tourney_salt,omitempty"`
}

func (x *CMsgClientToGCTourneyGetInfo) Reset() {
	*x = CMsgClientToGCTourneyGetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetInfo) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgClientToGCTourneyGetInfo) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetInfo) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return false
}

func (x *CMsgClientToGCTourneyGetInfo) GetTourneySalt() uint32 {
	if x != nil && x.TourneySalt != nil {
		return *x.TourneySalt
	}
	return 0
}

type CMsgClientToGCTourneyGetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCTourneyGetInfoResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyGetInfoResponse_EResponse,def=0" json:"result,omitempty"`
	Tourney *CDCGTourney                                    `protobuf:"bytes,2,opt,name=tourney" json:"tourney,omitempty"`
}

// Default values for CMsgClientToGCTourneyGetInfoResponse fields.
const (
	Default_CMsgClientToGCTourneyGetInfoResponse_Result = CMsgClientToGCTourneyGetInfoResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyGetInfoResponse) Reset() {
	*x = CMsgClientToGCTourneyGetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetInfoResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetInfoResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgClientToGCTourneyGetInfoResponse) GetResult() CMsgClientToGCTourneyGetInfoResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyGetInfoResponse_Result
}

func (x *CMsgClientToGCTourneyGetInfoResponse) GetTourney() *CDCGTourney {
	if x != nil {
		return x.Tourney
	}
	return nil
}

type CMsgClientToGCTourneyUnsubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyUnsubscribe) Reset() {
	*x = CMsgClientToGCTourneyUnsubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyUnsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyUnsubscribe) ProtoMessage() {}

func (x *CMsgClientToGCTourneyUnsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyUnsubscribe.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyUnsubscribe) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgClientToGCTourneyUnsubscribe) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgGCToClientTourneyUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tourney *CDCGTourney `protobuf:"bytes,1,opt,name=tourney" json:"tourney,omitempty"`
}

func (x *CMsgGCToClientTourneyUpdated) Reset() {
	*x = CMsgGCToClientTourneyUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTourneyUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTourneyUpdated) ProtoMessage() {}

func (x *CMsgGCToClientTourneyUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTourneyUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTourneyUpdated) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgGCToClientTourneyUpdated) GetTourney() *CDCGTourney {
	if x != nil {
		return x.Tourney
	}
	return nil
}

type CMsgGCToClientTourneySeriesMatchReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId       *uint64  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId         *uint32  `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SeriesId        *uint32  `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	AccountsInMm    []uint32 `protobuf:"varint,4,rep,name=accounts_in_mm,json=accountsInMm" json:"accounts_in_mm,omitempty"`
	AccountsNotInMm []uint32 `protobuf:"varint,5,rep,name=accounts_not_in_mm,json=accountsNotInMm" json:"accounts_not_in_mm,omitempty"`
}

func (x *CMsgGCToClientTourneySeriesMatchReady) Reset() {
	*x = CMsgGCToClientTourneySeriesMatchReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTourneySeriesMatchReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTourneySeriesMatchReady) ProtoMessage() {}

func (x *CMsgGCToClientTourneySeriesMatchReady) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTourneySeriesMatchReady.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTourneySeriesMatchReady) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgGCToClientTourneySeriesMatchReady) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgGCToClientTourneySeriesMatchReady) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgGCToClientTourneySeriesMatchReady) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgGCToClientTourneySeriesMatchReady) GetAccountsInMm() []uint32 {
	if x != nil {
		return x.AccountsInMm
	}
	return nil
}

func (x *CMsgGCToClientTourneySeriesMatchReady) GetAccountsNotInMm() []uint32 {
	if x != nil {
		return x.AccountsNotInMm
	}
	return nil
}

type CMsgGCToClientTourneySeriesMatchNotReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SeriesId  *uint32 `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) Reset() {
	*x = CMsgGCToClientTourneySeriesMatchNotReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTourneySeriesMatchNotReady) ProtoMessage() {}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTourneySeriesMatchNotReady.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTourneySeriesMatchNotReady) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgGCToClientTourneySeriesMatchNotReady) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

type CMsgCreateTourneyPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format       *CDCGTourney_EFormat                 `protobuf:"varint,1,opt,name=format,enum=artifact.CDCGTourney_EFormat,def=0" json:"format,omitempty"`
	DeckSettings *CMsgCreateTourneyPhase_DeckSettings `protobuf:"bytes,2,opt,name=deck_settings,json=deckSettings" json:"deck_settings,omitempty"`
	MaxPlayers   *uint32                              `protobuf:"varint,3,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	EditStage    *bool                                `protobuf:"varint,5,opt,name=edit_stage,json=editStage" json:"edit_stage,omitempty"`
	Bracket      *CMsgCreateTourneyPhase_Bracket      `protobuf:"bytes,20,opt,name=bracket" json:"bracket,omitempty"`
	Swiss        *CMsgCreateTourneyPhase_Swiss        `protobuf:"bytes,21,opt,name=swiss" json:"swiss,omitempty"`
	FreeForAll   *CMsgCreateTourneyPhase_FreeForAll   `protobuf:"bytes,22,opt,name=free_for_all,json=freeForAll" json:"free_for_all,omitempty"`
}

// Default values for CMsgCreateTourneyPhase fields.
const (
	Default_CMsgCreateTourneyPhase_Format = CDCGTourney_k_eFormat_Invalid
)

func (x *CMsgCreateTourneyPhase) Reset() {
	*x = CMsgCreateTourneyPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateTourneyPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateTourneyPhase) ProtoMessage() {}

func (x *CMsgCreateTourneyPhase) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateTourneyPhase.ProtoReflect.Descriptor instead.
func (*CMsgCreateTourneyPhase) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgCreateTourneyPhase) GetFormat() CDCGTourney_EFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CMsgCreateTourneyPhase_Format
}

func (x *CMsgCreateTourneyPhase) GetDeckSettings() *CMsgCreateTourneyPhase_DeckSettings {
	if x != nil {
		return x.DeckSettings
	}
	return nil
}

func (x *CMsgCreateTourneyPhase) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgCreateTourneyPhase) GetEditStage() bool {
	if x != nil && x.EditStage != nil {
		return *x.EditStage
	}
	return false
}

func (x *CMsgCreateTourneyPhase) GetBracket() *CMsgCreateTourneyPhase_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgCreateTourneyPhase) GetSwiss() *CMsgCreateTourneyPhase_Swiss {
	if x != nil {
		return x.Swiss
	}
	return nil
}

func (x *CMsgCreateTourneyPhase) GetFreeForAll() *CMsgCreateTourneyPhase_FreeForAll {
	if x != nil {
		return x.FreeForAll
	}
	return nil
}

type CMsgClientToGCCreateTourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyName    *string                               `protobuf:"bytes,1,opt,name=tourney_name,json=tourneyName" json:"tourney_name,omitempty"`
	TourneyMsg     *string                               `protobuf:"bytes,2,opt,name=tourney_msg,json=tourneyMsg" json:"tourney_msg,omitempty"`
	TourneyStatus  *string                               `protobuf:"bytes,3,opt,name=tourney_status,json=tourneyStatus" json:"tourney_status,omitempty"`
	Phases         []*CMsgCreateTourneyPhase             `protobuf:"bytes,4,rep,name=phases" json:"phases,omitempty"`
	SeedStage      *bool                                 `protobuf:"varint,5,opt,name=seed_stage,json=seedStage" json:"seed_stage,omitempty"`
	AdvancedMode   *bool                                 `protobuf:"varint,6,opt,name=advanced_mode,json=advancedMode" json:"advanced_mode,omitempty"`
	PrivacyMode    *CMsgClientToGCCreateTourney_EPrivacy `protobuf:"varint,7,opt,name=privacy_mode,json=privacyMode,enum=artifact.CMsgClientToGCCreateTourney_EPrivacy,def=0" json:"privacy_mode,omitempty"`
	OpenSpectating *bool                                 `protobuf:"varint,8,opt,name=open_spectating,json=openSpectating" json:"open_spectating,omitempty"`
	TimerMode      *uint32                               `protobuf:"varint,9,opt,name=timer_mode,json=timerMode" json:"timer_mode,omitempty"`
}

// Default values for CMsgClientToGCCreateTourney fields.
const (
	Default_CMsgClientToGCCreateTourney_PrivacyMode = CMsgClientToGCCreateTourney_k_ePrivacy_Default
)

func (x *CMsgClientToGCCreateTourney) Reset() {
	*x = CMsgClientToGCCreateTourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCreateTourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateTourney) ProtoMessage() {}

func (x *CMsgClientToGCCreateTourney) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateTourney.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateTourney) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgClientToGCCreateTourney) GetTourneyName() string {
	if x != nil && x.TourneyName != nil {
		return *x.TourneyName
	}
	return ""
}

func (x *CMsgClientToGCCreateTourney) GetTourneyMsg() string {
	if x != nil && x.TourneyMsg != nil {
		return *x.TourneyMsg
	}
	return ""
}

func (x *CMsgClientToGCCreateTourney) GetTourneyStatus() string {
	if x != nil && x.TourneyStatus != nil {
		return *x.TourneyStatus
	}
	return ""
}

func (x *CMsgClientToGCCreateTourney) GetPhases() []*CMsgCreateTourneyPhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CMsgClientToGCCreateTourney) GetSeedStage() bool {
	if x != nil && x.SeedStage != nil {
		return *x.SeedStage
	}
	return false
}

func (x *CMsgClientToGCCreateTourney) GetAdvancedMode() bool {
	if x != nil && x.AdvancedMode != nil {
		return *x.AdvancedMode
	}
	return false
}

func (x *CMsgClientToGCCreateTourney) GetPrivacyMode() CMsgClientToGCCreateTourney_EPrivacy {
	if x != nil && x.PrivacyMode != nil {
		return *x.PrivacyMode
	}
	return Default_CMsgClientToGCCreateTourney_PrivacyMode
}

func (x *CMsgClientToGCCreateTourney) GetOpenSpectating() bool {
	if x != nil && x.OpenSpectating != nil {
		return *x.OpenSpectating
	}
	return false
}

func (x *CMsgClientToGCCreateTourney) GetTimerMode() uint32 {
	if x != nil && x.TimerMode != nil {
		return *x.TimerMode
	}
	return 0
}

type CMsgClientToGCCreateTourneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCCreateTourneyResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCCreateTourneyResponse_EResponse,def=0" json:"result,omitempty"`
	TourneyId *uint64                                        `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

// Default values for CMsgClientToGCCreateTourneyResponse fields.
const (
	Default_CMsgClientToGCCreateTourneyResponse_Result = CMsgClientToGCCreateTourneyResponse_k_eInternalError
)

func (x *CMsgClientToGCCreateTourneyResponse) Reset() {
	*x = CMsgClientToGCCreateTourneyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCreateTourneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateTourneyResponse) ProtoMessage() {}

func (x *CMsgClientToGCCreateTourneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateTourneyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateTourneyResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgClientToGCCreateTourneyResponse) GetResult() CMsgClientToGCCreateTourneyResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCreateTourneyResponse_Result
}

func (x *CMsgClientToGCCreateTourneyResponse) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyAcceptInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyAcceptInvite) Reset() {
	*x = CMsgClientToGCTourneyAcceptInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAcceptInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAcceptInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAcceptInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAcceptInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAcceptInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgClientToGCTourneyAcceptInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyAcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAcceptInviteResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAcceptInviteResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAcceptInviteResponse fields.
const (
	Default_CMsgClientToGCTourneyAcceptInviteResponse_Result = CMsgClientToGCTourneyAcceptInviteResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAcceptInviteResponse) Reset() {
	*x = CMsgClientToGCTourneyAcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAcceptInviteResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgClientToGCTourneyAcceptInviteResponse) GetResult() CMsgClientToGCTourneyAcceptInviteResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAcceptInviteResponse_Result
}

type CMsgClientToGCTourneyRejectInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyRejectInvite) Reset() {
	*x = CMsgClientToGCTourneyRejectInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRejectInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRejectInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRejectInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRejectInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRejectInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgClientToGCTourneyRejectInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyRejectInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRejectInviteResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRejectInviteResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRejectInviteResponse fields.
const (
	Default_CMsgClientToGCTourneyRejectInviteResponse_Result = CMsgClientToGCTourneyRejectInviteResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRejectInviteResponse) Reset() {
	*x = CMsgClientToGCTourneyRejectInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRejectInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRejectInviteResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRejectInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRejectInviteResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRejectInviteResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgClientToGCTourneyRejectInviteResponse) GetResult() CMsgClientToGCTourneyRejectInviteResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRejectInviteResponse_Result
}

type CMsgClientToGCTourneyRevokeInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	AccountId *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCTourneyRevokeInvite) Reset() {
	*x = CMsgClientToGCTourneyRevokeInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRevokeInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRevokeInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRevokeInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRevokeInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRevokeInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgClientToGCTourneyRevokeInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRevokeInvite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCTourneyRevokeInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRevokeInviteResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRevokeInviteResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRevokeInviteResponse fields.
const (
	Default_CMsgClientToGCTourneyRevokeInviteResponse_Result = CMsgClientToGCTourneyRevokeInviteResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRevokeInviteResponse) Reset() {
	*x = CMsgClientToGCTourneyRevokeInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRevokeInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRevokeInviteResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRevokeInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRevokeInviteResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRevokeInviteResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgClientToGCTourneyRevokeInviteResponse) GetResult() CMsgClientToGCTourneyRevokeInviteResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRevokeInviteResponse_Result
}

type CMsgClientToGCTourneyAdminSwitchStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId      *uint64             `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TransitionFrom *CDCGTourney_EStage `protobuf:"varint,2,opt,name=transition_from,json=transitionFrom,enum=artifact.CDCGTourney_EStage,def=10" json:"transition_from,omitempty"`
	TransitionTo   *CDCGTourney_EStage `protobuf:"varint,3,opt,name=transition_to,json=transitionTo,enum=artifact.CDCGTourney_EStage,def=10" json:"transition_to,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminSwitchStage fields.
const (
	Default_CMsgClientToGCTourneyAdminSwitchStage_TransitionFrom = CDCGTourney_k_eStage_Configure
	Default_CMsgClientToGCTourneyAdminSwitchStage_TransitionTo   = CDCGTourney_k_eStage_Configure
)

func (x *CMsgClientToGCTourneyAdminSwitchStage) Reset() {
	*x = CMsgClientToGCTourneyAdminSwitchStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSwitchStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSwitchStage) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSwitchStage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchStage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSwitchStage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgClientToGCTourneyAdminSwitchStage) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSwitchStage) GetTransitionFrom() CDCGTourney_EStage {
	if x != nil && x.TransitionFrom != nil {
		return *x.TransitionFrom
	}
	return Default_CMsgClientToGCTourneyAdminSwitchStage_TransitionFrom
}

func (x *CMsgClientToGCTourneyAdminSwitchStage) GetTransitionTo() CDCGTourney_EStage {
	if x != nil && x.TransitionTo != nil {
		return *x.TransitionTo
	}
	return Default_CMsgClientToGCTourneyAdminSwitchStage_TransitionTo
}

type CMsgClientToGCTourneyAdminSwitchStageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminSwitchStageResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminSwitchStageResponse_Result = CMsgClientToGCTourneyAdminSwitchStageResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminSwitchStageResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminSwitchStageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSwitchStageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSwitchStageResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSwitchStageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchStageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSwitchStageResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgClientToGCTourneyAdminSwitchStageResponse) GetResult() CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminSwitchStageResponse_Result
}

type CMsgClientToGCTourneyAdminKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	AccountId *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCTourneyAdminKick) Reset() {
	*x = CMsgClientToGCTourneyAdminKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminKick) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminKick) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminKick.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminKick) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientToGCTourneyAdminKick) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminKick) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCTourneyAdminKickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminKickResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminKickResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminKickResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminKickResponse_Result = CMsgClientToGCTourneyAdminKickResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminKickResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminKickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminKickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminKickResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminKickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminKickResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminKickResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgClientToGCTourneyAdminKickResponse) GetResult() CMsgClientToGCTourneyAdminKickResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminKickResponse_Result
}

type CMsgClientToGCTourneyAdminGrantWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SeriesId  *uint32 `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	GrantBye  *bool   `protobuf:"varint,4,opt,name=grant_bye,json=grantBye" json:"grant_bye,omitempty"`
	WinnerId  *uint32 `protobuf:"varint,5,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
}

func (x *CMsgClientToGCTourneyAdminGrantWin) Reset() {
	*x = CMsgClientToGCTourneyAdminGrantWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminGrantWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminGrantWin) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminGrantWin) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminGrantWin.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminGrantWin) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgClientToGCTourneyAdminGrantWin) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminGrantWin) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminGrantWin) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminGrantWin) GetGrantBye() bool {
	if x != nil && x.GrantBye != nil {
		return *x.GrantBye
	}
	return false
}

func (x *CMsgClientToGCTourneyAdminGrantWin) GetWinnerId() uint32 {
	if x != nil && x.WinnerId != nil {
		return *x.WinnerId
	}
	return 0
}

type CMsgClientToGCTourneyAdminGrantWinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminGrantWinResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminGrantWinResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminGrantWinResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminGrantWinResponse_Result = CMsgClientToGCTourneyAdminGrantWinResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminGrantWinResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminGrantWinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminGrantWinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminGrantWinResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminGrantWinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminGrantWinResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminGrantWinResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgClientToGCTourneyAdminGrantWinResponse) GetResult() CMsgClientToGCTourneyAdminGrantWinResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminGrantWinResponse_Result
}

type CMsgClientToGCTourneyAdminChangeRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId   *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	AccountId   *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RightsFlags *uint32 `protobuf:"varint,3,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
}

func (x *CMsgClientToGCTourneyAdminChangeRights) Reset() {
	*x = CMsgClientToGCTourneyAdminChangeRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminChangeRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminChangeRights) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminChangeRights) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminChangeRights.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminChangeRights) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgClientToGCTourneyAdminChangeRights) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminChangeRights) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminChangeRights) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

type CMsgClientToGCTourneyAdminChangeRightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminChangeRightsResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminChangeRightsResponse_Result = CMsgClientToGCTourneyAdminChangeRightsResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminChangeRightsResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminChangeRightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminChangeRightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminChangeRightsResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminChangeRightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminChangeRightsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminChangeRightsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgClientToGCTourneyAdminChangeRightsResponse) GetResult() CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminChangeRightsResponse_Result
}

type CMsgClientToGCTourneyRegisterDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	DeckBytes []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,3,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	DeckIndex *uint32 `protobuf:"varint,4,opt,name=deck_index,json=deckIndex" json:"deck_index,omitempty"`
	SharedBy  *uint32 `protobuf:"varint,5,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (x *CMsgClientToGCTourneyRegisterDeck) Reset() {
	*x = CMsgClientToGCTourneyRegisterDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRegisterDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRegisterDeck) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRegisterDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRegisterDeck.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRegisterDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgClientToGCTourneyRegisterDeck) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRegisterDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CMsgClientToGCTourneyRegisterDeck) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRegisterDeck) GetDeckIndex() uint32 {
	if x != nil && x.DeckIndex != nil {
		return *x.DeckIndex
	}
	return 0
}

func (x *CMsgClientToGCTourneyRegisterDeck) GetSharedBy() uint32 {
	if x != nil && x.SharedBy != nil {
		return *x.SharedBy
	}
	return 0
}

type CMsgClientToGCTourneyRegisterDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRegisterDeckResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRegisterDeckResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRegisterDeckResponse fields.
const (
	Default_CMsgClientToGCTourneyRegisterDeckResponse_Result = CMsgClientToGCTourneyRegisterDeckResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRegisterDeckResponse) Reset() {
	*x = CMsgClientToGCTourneyRegisterDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRegisterDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRegisterDeckResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRegisterDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRegisterDeckResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRegisterDeckResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgClientToGCTourneyRegisterDeckResponse) GetResult() CMsgClientToGCTourneyRegisterDeckResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRegisterDeckResponse_Result
}

type CMsgClientToGCTourneyUserLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyUserLeave) Reset() {
	*x = CMsgClientToGCTourneyUserLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyUserLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyUserLeave) ProtoMessage() {}

func (x *CMsgClientToGCTourneyUserLeave) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyUserLeave.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyUserLeave) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgClientToGCTourneyUserLeave) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyUserLeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyUserLeaveResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyUserLeaveResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyUserLeaveResponse fields.
const (
	Default_CMsgClientToGCTourneyUserLeaveResponse_Result = CMsgClientToGCTourneyUserLeaveResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyUserLeaveResponse) Reset() {
	*x = CMsgClientToGCTourneyUserLeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyUserLeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyUserLeaveResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyUserLeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyUserLeaveResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyUserLeaveResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgClientToGCTourneyUserLeaveResponse) GetResult() CMsgClientToGCTourneyUserLeaveResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyUserLeaveResponse_Result
}

type CMsgClientToGCTourneyRegisterSharedDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId  *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	DeckBytes  []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	SharedSlot *uint32 `protobuf:"varint,3,opt,name=shared_slot,json=sharedSlot" json:"shared_slot,omitempty"`
}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) Reset() {
	*x = CMsgClientToGCTourneyRegisterSharedDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRegisterSharedDeck) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRegisterSharedDeck.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRegisterSharedDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CMsgClientToGCTourneyRegisterSharedDeck) GetSharedSlot() uint32 {
	if x != nil && x.SharedSlot != nil {
		return *x.SharedSlot
	}
	return 0
}

type CMsgClientToGCTourneyRegisterSharedDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRegisterSharedDeckResponse fields.
const (
	Default_CMsgClientToGCTourneyRegisterSharedDeckResponse_Result = CMsgClientToGCTourneyRegisterSharedDeckResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRegisterSharedDeckResponse) Reset() {
	*x = CMsgClientToGCTourneyRegisterSharedDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRegisterSharedDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRegisterSharedDeckResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRegisterSharedDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRegisterSharedDeckResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRegisterSharedDeckResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgClientToGCTourneyRegisterSharedDeckResponse) GetResult() CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRegisterSharedDeckResponse_Result
}

type CMsgClientToGCTourneyGetRegisteredDecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyGetRegisteredDecks) Reset() {
	*x = CMsgClientToGCTourneyGetRegisteredDecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetRegisteredDecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetRegisteredDecks) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetRegisteredDecks) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetRegisteredDecks.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetRegisteredDecks) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgClientToGCTourneyGetRegisteredDecks) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyGetRegisteredDecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse,def=0" json:"result,omitempty"`
	Decks  []*CDCGTourney_PlayerDeck                                  `protobuf:"bytes,2,rep,name=decks" json:"decks,omitempty"`
}

// Default values for CMsgClientToGCTourneyGetRegisteredDecksResponse fields.
const (
	Default_CMsgClientToGCTourneyGetRegisteredDecksResponse_Result = CMsgClientToGCTourneyGetRegisteredDecksResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse) Reset() {
	*x = CMsgClientToGCTourneyGetRegisteredDecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetRegisteredDecksResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetRegisteredDecksResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetRegisteredDecksResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse) GetResult() CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyGetRegisteredDecksResponse_Result
}

func (x *CMsgClientToGCTourneyGetRegisteredDecksResponse) GetDecks() []*CDCGTourney_PlayerDeck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type CMsgClientToGCTourneyCreateOpenInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	MaxUses   *uint32  `protobuf:"varint,2,opt,name=max_uses,json=maxUses" json:"max_uses,omitempty"`
	Rights    []uint32 `protobuf:"varint,3,rep,name=rights" json:"rights,omitempty"`
}

func (x *CMsgClientToGCTourneyCreateOpenInvite) Reset() {
	*x = CMsgClientToGCTourneyCreateOpenInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyCreateOpenInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyCreateOpenInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyCreateOpenInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyCreateOpenInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyCreateOpenInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgClientToGCTourneyCreateOpenInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyCreateOpenInvite) GetMaxUses() uint32 {
	if x != nil && x.MaxUses != nil {
		return *x.MaxUses
	}
	return 0
}

func (x *CMsgClientToGCTourneyCreateOpenInvite) GetRights() []uint32 {
	if x != nil {
		return x.Rights
	}
	return nil
}

type CMsgClientToGCTourneyCreateOpenInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse,def=0" json:"result,omitempty"`
	InviteKey *uint64                                                  `protobuf:"fixed64,2,opt,name=invite_key,json=inviteKey" json:"invite_key,omitempty"`
}

// Default values for CMsgClientToGCTourneyCreateOpenInviteResponse fields.
const (
	Default_CMsgClientToGCTourneyCreateOpenInviteResponse_Result = CMsgClientToGCTourneyCreateOpenInviteResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyCreateOpenInviteResponse) Reset() {
	*x = CMsgClientToGCTourneyCreateOpenInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyCreateOpenInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyCreateOpenInviteResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyCreateOpenInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyCreateOpenInviteResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyCreateOpenInviteResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgClientToGCTourneyCreateOpenInviteResponse) GetResult() CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyCreateOpenInviteResponse_Result
}

func (x *CMsgClientToGCTourneyCreateOpenInviteResponse) GetInviteKey() uint64 {
	if x != nil && x.InviteKey != nil {
		return *x.InviteKey
	}
	return 0
}

type CMsgClientToGCTourneyRevokeOpenInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	InviteKey *uint64 `protobuf:"fixed64,2,opt,name=invite_key,json=inviteKey" json:"invite_key,omitempty"`
}

func (x *CMsgClientToGCTourneyRevokeOpenInvite) Reset() {
	*x = CMsgClientToGCTourneyRevokeOpenInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRevokeOpenInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRevokeOpenInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRevokeOpenInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRevokeOpenInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRevokeOpenInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgClientToGCTourneyRevokeOpenInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRevokeOpenInvite) GetInviteKey() uint64 {
	if x != nil && x.InviteKey != nil {
		return *x.InviteKey
	}
	return 0
}

type CMsgClientToGCTourneyRevokeOpenInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRevokeOpenInviteResponse fields.
const (
	Default_CMsgClientToGCTourneyRevokeOpenInviteResponse_Result = CMsgClientToGCTourneyRevokeOpenInviteResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRevokeOpenInviteResponse) Reset() {
	*x = CMsgClientToGCTourneyRevokeOpenInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRevokeOpenInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRevokeOpenInviteResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRevokeOpenInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRevokeOpenInviteResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRevokeOpenInviteResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgClientToGCTourneyRevokeOpenInviteResponse) GetResult() CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRevokeOpenInviteResponse_Result
}

type CMsgClientToGCTourneyGetOpenInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyGetOpenInvites) Reset() {
	*x = CMsgClientToGCTourneyGetOpenInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetOpenInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetOpenInvites) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetOpenInvites) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetOpenInvites.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetOpenInvites) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgClientToGCTourneyGetOpenInvites) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyGetOpenInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse    `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse,def=0" json:"result,omitempty"`
	OpenInvites []*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite `protobuf:"bytes,2,rep,name=open_invites,json=openInvites" json:"open_invites,omitempty"`
}

// Default values for CMsgClientToGCTourneyGetOpenInvitesResponse fields.
const (
	Default_CMsgClientToGCTourneyGetOpenInvitesResponse_Result = CMsgClientToGCTourneyGetOpenInvitesResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse) Reset() {
	*x = CMsgClientToGCTourneyGetOpenInvitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetOpenInvitesResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetOpenInvitesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetOpenInvitesResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse) GetResult() CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyGetOpenInvitesResponse_Result
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse) GetOpenInvites() []*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite {
	if x != nil {
		return x.OpenInvites
	}
	return nil
}

type CMsgClientToGCTourneyAdminSwitchPhaseStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId      *uint64                  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId        *uint32                  `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	TransitionFrom *CDCGTourney_EPhaseStage `protobuf:"varint,3,opt,name=transition_from,json=transitionFrom,enum=artifact.CDCGTourney_EPhaseStage,def=10" json:"transition_from,omitempty"`
	TransitionTo   *CDCGTourney_EPhaseStage `protobuf:"varint,4,opt,name=transition_to,json=transitionTo,enum=artifact.CDCGTourney_EPhaseStage,def=10" json:"transition_to,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminSwitchPhaseStage fields.
const (
	Default_CMsgClientToGCTourneyAdminSwitchPhaseStage_TransitionFrom = CDCGTourney_k_ePhaseStage_Pending
	Default_CMsgClientToGCTourneyAdminSwitchPhaseStage_TransitionTo   = CDCGTourney_k_ePhaseStage_Pending
)

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) Reset() {
	*x = CMsgClientToGCTourneyAdminSwitchPhaseStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSwitchPhaseStage) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchPhaseStage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSwitchPhaseStage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) GetTransitionFrom() CDCGTourney_EPhaseStage {
	if x != nil && x.TransitionFrom != nil {
		return *x.TransitionFrom
	}
	return Default_CMsgClientToGCTourneyAdminSwitchPhaseStage_TransitionFrom
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStage) GetTransitionTo() CDCGTourney_EPhaseStage {
	if x != nil && x.TransitionTo != nil {
		return *x.TransitionTo
	}
	return Default_CMsgClientToGCTourneyAdminSwitchPhaseStage_TransitionTo
}

type CMsgClientToGCTourneyAdminSwitchPhaseStageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminSwitchPhaseStageResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_Result = CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminSwitchPhaseStageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSwitchPhaseStageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgClientToGCTourneyAdminSwitchPhaseStageResponse) GetResult() CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_Result
}

type CMsgClientToGCTourneyGetOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyGetOverview) Reset() {
	*x = CMsgClientToGCTourneyGetOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetOverview) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetOverview) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetOverview.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetOverview) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgClientToGCTourneyGetOverview) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyGetOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *CMsgClientToGCTourneyGetOverviewResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyGetOverviewResponse_EResponse,def=0" json:"result,omitempty"`
	TourneyName *string                                             `protobuf:"bytes,2,opt,name=tourney_name,json=tourneyName" json:"tourney_name,omitempty"`
	CreatedBy   *uint32                                             `protobuf:"varint,3,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
}

// Default values for CMsgClientToGCTourneyGetOverviewResponse fields.
const (
	Default_CMsgClientToGCTourneyGetOverviewResponse_Result = CMsgClientToGCTourneyGetOverviewResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyGetOverviewResponse) Reset() {
	*x = CMsgClientToGCTourneyGetOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetOverviewResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetOverviewResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetOverviewResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgClientToGCTourneyGetOverviewResponse) GetResult() CMsgClientToGCTourneyGetOverviewResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyGetOverviewResponse_Result
}

func (x *CMsgClientToGCTourneyGetOverviewResponse) GetTourneyName() string {
	if x != nil && x.TourneyName != nil {
		return *x.TourneyName
	}
	return ""
}

func (x *CMsgClientToGCTourneyGetOverviewResponse) GetCreatedBy() uint32 {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return 0
}

type CMsgClientToGCTourneySetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId     *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TourneyStatus *string `protobuf:"bytes,2,opt,name=tourney_status,json=tourneyStatus" json:"tourney_status,omitempty"`
}

func (x *CMsgClientToGCTourneySetStatus) Reset() {
	*x = CMsgClientToGCTourneySetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneySetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneySetStatus) ProtoMessage() {}

func (x *CMsgClientToGCTourneySetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneySetStatus.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneySetStatus) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgClientToGCTourneySetStatus) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneySetStatus) GetTourneyStatus() string {
	if x != nil && x.TourneyStatus != nil {
		return *x.TourneyStatus
	}
	return ""
}

type CMsgClientToGCTourneySetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneySetStatusResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneySetStatusResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneySetStatusResponse fields.
const (
	Default_CMsgClientToGCTourneySetStatusResponse_Result = CMsgClientToGCTourneySetStatusResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneySetStatusResponse) Reset() {
	*x = CMsgClientToGCTourneySetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneySetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneySetStatusResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneySetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneySetStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneySetStatusResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgClientToGCTourneySetStatusResponse) GetResult() CMsgClientToGCTourneySetStatusResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneySetStatusResponse_Result
}

type CMsgClientToGCTourneyAddPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64                 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	Phase     *CMsgCreateTourneyPhase `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
}

func (x *CMsgClientToGCTourneyAddPhase) Reset() {
	*x = CMsgClientToGCTourneyAddPhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAddPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAddPhase) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAddPhase) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAddPhase.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAddPhase) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgClientToGCTourneyAddPhase) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAddPhase) GetPhase() *CMsgCreateTourneyPhase {
	if x != nil {
		return x.Phase
	}
	return nil
}

type CMsgClientToGCTourneyAddPhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAddPhaseResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAddPhaseResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAddPhaseResponse fields.
const (
	Default_CMsgClientToGCTourneyAddPhaseResponse_Result = CMsgClientToGCTourneyAddPhaseResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAddPhaseResponse) Reset() {
	*x = CMsgClientToGCTourneyAddPhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAddPhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAddPhaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAddPhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAddPhaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAddPhaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgClientToGCTourneyAddPhaseResponse) GetResult() CMsgClientToGCTourneyAddPhaseResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAddPhaseResponse_Result
}

type CMsgClientToGCTourneyRemovePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
}

func (x *CMsgClientToGCTourneyRemovePhase) Reset() {
	*x = CMsgClientToGCTourneyRemovePhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRemovePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRemovePhase) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRemovePhase) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRemovePhase.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRemovePhase) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgClientToGCTourneyRemovePhase) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyRemovePhase) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

type CMsgClientToGCTourneyRemovePhaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRemovePhaseResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRemovePhaseResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRemovePhaseResponse fields.
const (
	Default_CMsgClientToGCTourneyRemovePhaseResponse_Result = CMsgClientToGCTourneyRemovePhaseResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRemovePhaseResponse) Reset() {
	*x = CMsgClientToGCTourneyRemovePhaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRemovePhaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRemovePhaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRemovePhaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRemovePhaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRemovePhaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgClientToGCTourneyRemovePhaseResponse) GetResult() CMsgClientToGCTourneyRemovePhaseResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRemovePhaseResponse_Result
}

type CMsgClientToGCTourneySpectateMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId           *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId             *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SeriesId            *uint32 `protobuf:"varint,3,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	Player_1Perspective *bool   `protobuf:"varint,4,opt,name=player_1_perspective,json=player1Perspective" json:"player_1_perspective,omitempty"`
}

func (x *CMsgClientToGCTourneySpectateMatch) Reset() {
	*x = CMsgClientToGCTourneySpectateMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneySpectateMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneySpectateMatch) ProtoMessage() {}

func (x *CMsgClientToGCTourneySpectateMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneySpectateMatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneySpectateMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgClientToGCTourneySpectateMatch) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatch) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatch) GetPlayer_1Perspective() bool {
	if x != nil && x.Player_1Perspective != nil {
		return *x.Player_1Perspective
	}
	return false
}

type CMsgClientToGCTourneySpectateMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCTourneySpectateMatchResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneySpectateMatchResponse_EResponse,def=1" json:"result,omitempty"`
	MatchId        *uint64                                               `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId  *uint64                                               `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	SdrKey         []byte                                                `protobuf:"bytes,4,opt,name=sdr_key,json=sdrKey" json:"sdr_key,omitempty"`
	UdpConnectIp   *uint32                                               `protobuf:"varint,5,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort *uint32                                               `protobuf:"varint,6,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
}

// Default values for CMsgClientToGCTourneySpectateMatchResponse fields.
const (
	Default_CMsgClientToGCTourneySpectateMatchResponse_Result = CMsgClientToGCTourneySpectateMatchResponse_k_eSuccess
)

func (x *CMsgClientToGCTourneySpectateMatchResponse) Reset() {
	*x = CMsgClientToGCTourneySpectateMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneySpectateMatchResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneySpectateMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneySpectateMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneySpectateMatchResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetResult() CMsgClientToGCTourneySpectateMatchResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneySpectateMatchResponse_Result
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetSdrKey() []byte {
	if x != nil {
		return x.SdrKey
	}
	return nil
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CMsgClientToGCTourneySpectateMatchResponse) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

type CMsgClientToGCTourneyInviteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId  *uint64  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	AccountIds []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	Rights     []uint32 `protobuf:"varint,3,rep,name=rights" json:"rights,omitempty"`
}

func (x *CMsgClientToGCTourneyInviteList) Reset() {
	*x = CMsgClientToGCTourneyInviteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyInviteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyInviteList) ProtoMessage() {}

func (x *CMsgClientToGCTourneyInviteList) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyInviteList.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyInviteList) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgClientToGCTourneyInviteList) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyInviteList) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CMsgClientToGCTourneyInviteList) GetRights() []uint32 {
	if x != nil {
		return x.Rights
	}
	return nil
}

type CMsgClientToGCTourneyInviteListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result           *CMsgClientToGCTourneyInviteListResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyInviteListResponse_EResponse,def=0" json:"result,omitempty"`
	InvitedId        []uint32                                           `protobuf:"varint,2,rep,name=invited_id,json=invitedId" json:"invited_id,omitempty"`
	AlreadyInvitedId []uint32                                           `protobuf:"varint,3,rep,name=already_invited_id,json=alreadyInvitedId" json:"already_invited_id,omitempty"`
}

// Default values for CMsgClientToGCTourneyInviteListResponse fields.
const (
	Default_CMsgClientToGCTourneyInviteListResponse_Result = CMsgClientToGCTourneyInviteListResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyInviteListResponse) Reset() {
	*x = CMsgClientToGCTourneyInviteListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyInviteListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyInviteListResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyInviteListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyInviteListResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyInviteListResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgClientToGCTourneyInviteListResponse) GetResult() CMsgClientToGCTourneyInviteListResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyInviteListResponse_Result
}

func (x *CMsgClientToGCTourneyInviteListResponse) GetInvitedId() []uint32 {
	if x != nil {
		return x.InvitedId
	}
	return nil
}

func (x *CMsgClientToGCTourneyInviteListResponse) GetAlreadyInvitedId() []uint32 {
	if x != nil {
		return x.AlreadyInvitedId
	}
	return nil
}

type CMsgClientToGCTourneyAdminSetSeedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId   *uint64                                               `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PlayerSeeds []*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed `protobuf:"bytes,2,rep,name=player_seeds,json=playerSeeds" json:"player_seeds,omitempty"`
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues) Reset() {
	*x = CMsgClientToGCTourneyAdminSetSeedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSetSeedValues) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSetSeedValues) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSetSeedValues.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSetSeedValues) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues) GetPlayerSeeds() []*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed {
	if x != nil {
		return x.PlayerSeeds
	}
	return nil
}

type CMsgClientToGCTourneyAdminSetSeedValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyAdminSetSeedValuesResponse fields.
const (
	Default_CMsgClientToGCTourneyAdminSetSeedValuesResponse_Result = CMsgClientToGCTourneyAdminSetSeedValuesResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyAdminSetSeedValuesResponse) Reset() {
	*x = CMsgClientToGCTourneyAdminSetSeedValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSetSeedValuesResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSetSeedValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSetSeedValuesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSetSeedValuesResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{128}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValuesResponse) GetResult() CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyAdminSetSeedValuesResponse_Result
}

type CMsgClientToGCTourneyEditStageSwapPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId     *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId       *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	AccountToSwap *uint32 `protobuf:"varint,3,opt,name=account_to_swap,json=accountToSwap" json:"account_to_swap,omitempty"`
	SwapWith      *uint32 `protobuf:"varint,4,opt,name=swap_with,json=swapWith" json:"swap_with,omitempty"`
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) Reset() {
	*x = CMsgClientToGCTourneyEditStageSwapPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyEditStageSwapPlayers) ProtoMessage() {}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyEditStageSwapPlayers.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyEditStageSwapPlayers) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) GetAccountToSwap() uint32 {
	if x != nil && x.AccountToSwap != nil {
		return *x.AccountToSwap
	}
	return 0
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayers) GetSwapWith() uint32 {
	if x != nil && x.SwapWith != nil {
		return *x.SwapWith
	}
	return 0
}

type CMsgClientToGCTourneyEditStageSwapPlayersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyEditStageSwapPlayersResponse fields.
const (
	Default_CMsgClientToGCTourneyEditStageSwapPlayersResponse_Result = CMsgClientToGCTourneyEditStageSwapPlayersResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyEditStageSwapPlayersResponse) Reset() {
	*x = CMsgClientToGCTourneyEditStageSwapPlayersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyEditStageSwapPlayersResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyEditStageSwapPlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyEditStageSwapPlayersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyEditStageSwapPlayersResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgClientToGCTourneyEditStageSwapPlayersResponse) GetResult() CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyEditStageSwapPlayersResponse_Result
}

type CMsgClientToGCTourneyGetLimitedReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	AccountId *uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCTourneyGetLimitedReplay) Reset() {
	*x = CMsgClientToGCTourneyGetLimitedReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetLimitedReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetLimitedReplay) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetLimitedReplay) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetLimitedReplay.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetLimitedReplay) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgClientToGCTourneyGetLimitedReplay) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetLimitedReplay) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetLimitedReplay) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCTourneyGetLimitedReplayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse      `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse,def=0" json:"result,omitempty"`
	Stages []*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
	Format *CMsgLimitedFormat                                            `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
}

// Default values for CMsgClientToGCTourneyGetLimitedReplayResponse fields.
const (
	Default_CMsgClientToGCTourneyGetLimitedReplayResponse_Result = CMsgClientToGCTourneyGetLimitedReplayResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) Reset() {
	*x = CMsgClientToGCTourneyGetLimitedReplayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetLimitedReplayResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetLimitedReplayResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetLimitedReplayResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) GetResult() CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyGetLimitedReplayResponse_Result
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) GetStages() []*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse) GetFormat() *CMsgLimitedFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type CMsgClientToGCTourneyRejoinChatRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyRejoinChatRoom) Reset() {
	*x = CMsgClientToGCTourneyRejoinChatRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRejoinChatRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRejoinChatRoom) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRejoinChatRoom) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRejoinChatRoom.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRejoinChatRoom) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgClientToGCTourneyRejoinChatRoom) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyRejoinChatRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyRejoinChatRoomResponse fields.
const (
	Default_CMsgClientToGCTourneyRejoinChatRoomResponse_Result = CMsgClientToGCTourneyRejoinChatRoomResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyRejoinChatRoomResponse) Reset() {
	*x = CMsgClientToGCTourneyRejoinChatRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyRejoinChatRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyRejoinChatRoomResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyRejoinChatRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyRejoinChatRoomResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyRejoinChatRoomResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgClientToGCTourneyRejoinChatRoomResponse) GetResult() CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyRejoinChatRoomResponse_Result
}

type CMsgGCToClientTourneyMembersMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId    *uint64  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	AccountsInMm []uint32 `protobuf:"varint,2,rep,packed,name=accounts_in_mm,json=accountsInMm" json:"accounts_in_mm,omitempty"`
}

func (x *CMsgGCToClientTourneyMembersMatchmaking) Reset() {
	*x = CMsgGCToClientTourneyMembersMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientTourneyMembersMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTourneyMembersMatchmaking) ProtoMessage() {}

func (x *CMsgGCToClientTourneyMembersMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTourneyMembersMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTourneyMembersMatchmaking) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{135}
}

func (x *CMsgGCToClientTourneyMembersMatchmaking) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgGCToClientTourneyMembersMatchmaking) GetAccountsInMm() []uint32 {
	if x != nil {
		return x.AccountsInMm
	}
	return nil
}

type CMsgClientToGCTourneyPayEntryFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId       *uint64  `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TargetAccountId *uint32  `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ItemIds         []uint64 `protobuf:"varint,3,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
}

func (x *CMsgClientToGCTourneyPayEntryFee) Reset() {
	*x = CMsgClientToGCTourneyPayEntryFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyPayEntryFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyPayEntryFee) ProtoMessage() {}

func (x *CMsgClientToGCTourneyPayEntryFee) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyPayEntryFee.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyPayEntryFee) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{136}
}

func (x *CMsgClientToGCTourneyPayEntryFee) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyPayEntryFee) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgClientToGCTourneyPayEntryFee) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type CMsgClientToGCTourneyPayEntryFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyPayEntryFeeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyPayEntryFeeResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyPayEntryFeeResponse fields.
const (
	Default_CMsgClientToGCTourneyPayEntryFeeResponse_Result = CMsgClientToGCTourneyPayEntryFeeResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyPayEntryFeeResponse) Reset() {
	*x = CMsgClientToGCTourneyPayEntryFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyPayEntryFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyPayEntryFeeResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyPayEntryFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyPayEntryFeeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyPayEntryFeeResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{137}
}

func (x *CMsgClientToGCTourneyPayEntryFeeResponse) GetResult() CMsgClientToGCTourneyPayEntryFeeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyPayEntryFeeResponse_Result
}

type CMsgClientToGCTourneyPlayerAbandon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64 `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgClientToGCTourneyPlayerAbandon) Reset() {
	*x = CMsgClientToGCTourneyPlayerAbandon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyPlayerAbandon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyPlayerAbandon) ProtoMessage() {}

func (x *CMsgClientToGCTourneyPlayerAbandon) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyPlayerAbandon.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyPlayerAbandon) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{138}
}

func (x *CMsgClientToGCTourneyPlayerAbandon) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgClientToGCTourneyPlayerAbandonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyPlayerAbandonResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyPlayerAbandonResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyPlayerAbandonResponse fields.
const (
	Default_CMsgClientToGCTourneyPlayerAbandonResponse_Result = CMsgClientToGCTourneyPlayerAbandonResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyPlayerAbandonResponse) Reset() {
	*x = CMsgClientToGCTourneyPlayerAbandonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyPlayerAbandonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyPlayerAbandonResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyPlayerAbandonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyPlayerAbandonResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyPlayerAbandonResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{139}
}

func (x *CMsgClientToGCTourneyPlayerAbandonResponse) GetResult() CMsgClientToGCTourneyPlayerAbandonResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyPlayerAbandonResponse_Result
}

type CMsgClientToGCTourneyChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId *uint64                                      `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32                                      `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	ValueType *CMsgClientToGCTourneyChangeValue_EValueType `protobuf:"varint,3,opt,name=value_type,json=valueType,enum=artifact.CMsgClientToGCTourneyChangeValue_EValueType,def=1" json:"value_type,omitempty"`
	IntValue  *uint32                                      `protobuf:"varint,4,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
}

// Default values for CMsgClientToGCTourneyChangeValue fields.
const (
	Default_CMsgClientToGCTourneyChangeValue_ValueType = CMsgClientToGCTourneyChangeValue_k_eGlobal_SeedStage
)

func (x *CMsgClientToGCTourneyChangeValue) Reset() {
	*x = CMsgClientToGCTourneyChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyChangeValue) ProtoMessage() {}

func (x *CMsgClientToGCTourneyChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyChangeValue.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyChangeValue) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{140}
}

func (x *CMsgClientToGCTourneyChangeValue) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyChangeValue) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CMsgClientToGCTourneyChangeValue) GetValueType() CMsgClientToGCTourneyChangeValue_EValueType {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return Default_CMsgClientToGCTourneyChangeValue_ValueType
}

func (x *CMsgClientToGCTourneyChangeValue) GetIntValue() uint32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

type CMsgClientToGCTourneyChangeValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCTourneyChangeValueResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyChangeValueResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCTourneyChangeValueResponse fields.
const (
	Default_CMsgClientToGCTourneyChangeValueResponse_Result = CMsgClientToGCTourneyChangeValueResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyChangeValueResponse) Reset() {
	*x = CMsgClientToGCTourneyChangeValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyChangeValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyChangeValueResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyChangeValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyChangeValueResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyChangeValueResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgClientToGCTourneyChangeValueResponse) GetResult() CMsgClientToGCTourneyChangeValueResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyChangeValueResponse_Result
}

type CMsgClientToGCTourneyJoinOpenTourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language        *uint32 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	CommunityKey    *string `protobuf:"bytes,2,opt,name=community_key,json=communityKey" json:"community_key,omitempty"`
	OpenTourneyMode *uint32 `protobuf:"varint,3,opt,name=open_tourney_mode,json=openTourneyMode" json:"open_tourney_mode,omitempty"`
}

func (x *CMsgClientToGCTourneyJoinOpenTourney) Reset() {
	*x = CMsgClientToGCTourneyJoinOpenTourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyJoinOpenTourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyJoinOpenTourney) ProtoMessage() {}

func (x *CMsgClientToGCTourneyJoinOpenTourney) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyJoinOpenTourney.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyJoinOpenTourney) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{142}
}

func (x *CMsgClientToGCTourneyJoinOpenTourney) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CMsgClientToGCTourneyJoinOpenTourney) GetCommunityKey() string {
	if x != nil && x.CommunityKey != nil {
		return *x.CommunityKey
	}
	return ""
}

func (x *CMsgClientToGCTourneyJoinOpenTourney) GetOpenTourneyMode() uint32 {
	if x != nil && x.OpenTourneyMode != nil {
		return *x.OpenTourneyMode
	}
	return 0
}

type CMsgClientToGCTourneyJoinOpenTourneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse,def=0" json:"result,omitempty"`
	JoinedTourneyId   *uint64                                                 `protobuf:"varint,2,opt,name=joined_tourney_id,json=joinedTourneyId" json:"joined_tourney_id,omitempty"`
	CooldownTimeAfter *uint32                                                 `protobuf:"varint,3,opt,name=cooldown_time_after,json=cooldownTimeAfter" json:"cooldown_time_after,omitempty"`
}

// Default values for CMsgClientToGCTourneyJoinOpenTourneyResponse fields.
const (
	Default_CMsgClientToGCTourneyJoinOpenTourneyResponse_Result = CMsgClientToGCTourneyJoinOpenTourneyResponse_k_eInternalError
)

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) Reset() {
	*x = CMsgClientToGCTourneyJoinOpenTourneyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyJoinOpenTourneyResponse) ProtoMessage() {}

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyJoinOpenTourneyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyJoinOpenTourneyResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) GetResult() CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCTourneyJoinOpenTourneyResponse_Result
}

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) GetJoinedTourneyId() uint64 {
	if x != nil && x.JoinedTourneyId != nil {
		return *x.JoinedTourneyId
	}
	return 0
}

func (x *CMsgClientToGCTourneyJoinOpenTourneyResponse) GetCooldownTimeAfter() uint32 {
	if x != nil && x.CooldownTimeAfter != nil {
		return *x.CooldownTimeAfter
	}
	return 0
}

type CMsgClientToGCOpenPackItemResponse_OpenedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32                                       `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ItemId   *uint64                                       `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	SlotType *CMsgClientToGCOpenPackItemResponse_ESlotType `protobuf:"varint,3,opt,name=slot_type,json=slotType,enum=artifact.CMsgClientToGCOpenPackItemResponse_ESlotType,def=0" json:"slot_type,omitempty"`
}

// Default values for CMsgClientToGCOpenPackItemResponse_OpenedItem fields.
const (
	Default_CMsgClientToGCOpenPackItemResponse_OpenedItem_SlotType = CMsgClientToGCOpenPackItemResponse_k_eSlot_Unspecified
)

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) Reset() {
	*x = CMsgClientToGCOpenPackItemResponse_OpenedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOpenPackItemResponse_OpenedItem) ProtoMessage() {}

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOpenPackItemResponse_OpenedItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOpenPackItemResponse_OpenedItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgClientToGCOpenPackItemResponse_OpenedItem) GetSlotType() CMsgClientToGCOpenPackItemResponse_ESlotType {
	if x != nil && x.SlotType != nil {
		return *x.SlotType
	}
	return Default_CMsgClientToGCOpenPackItemResponse_OpenedItem_SlotType
}

type CMsgClientToGCGetMatchHistoryResponse_MatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1     *uint32        `protobuf:"varint,1,opt,name=player1" json:"player1,omitempty"`
	Player2     *uint32        `protobuf:"varint,2,opt,name=player2" json:"player2,omitempty"`
	StartTime   *uint32        `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration    *uint32        `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	Turns       *uint32        `protobuf:"varint,5,opt,name=turns" json:"turns,omitempty"`
	MatchId     *uint64        `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Outcome     *uint32        `protobuf:"varint,7,opt,name=outcome" json:"outcome,omitempty"`
	MatchMode   *EDCGMatchMode `protobuf:"varint,8,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
	TowerHealth []uint32       `protobuf:"varint,9,rep,name=tower_health,json=towerHealth" json:"tower_health,omitempty"`
	Heroes      []uint32       `protobuf:"varint,10,rep,name=heroes" json:"heroes,omitempty"`
}

// Default values for CMsgClientToGCGetMatchHistoryResponse_MatchDetails fields.
const (
	Default_CMsgClientToGCGetMatchHistoryResponse_MatchDetails_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) Reset() {
	*x = CMsgClientToGCGetMatchHistoryResponse_MatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistoryResponse_MatchDetails) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse_MatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistoryResponse_MatchDetails) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetPlayer1() uint32 {
	if x != nil && x.Player1 != nil {
		return *x.Player1
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetPlayer2() uint32 {
	if x != nil && x.Player2 != nil {
		return *x.Player2
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetTurns() uint32 {
	if x != nil && x.Turns != nil {
		return *x.Turns
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetOutcome() uint32 {
	if x != nil && x.Outcome != nil {
		return *x.Outcome
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientToGCGetMatchHistoryResponse_MatchDetails_MatchMode
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetTowerHealth() []uint32 {
	if x != nil {
		return x.TowerHealth
	}
	return nil
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchDetails) GetHeroes() []uint32 {
	if x != nil {
		return x.Heroes
	}
	return nil
}

type CMsgClientToGCAbandonGauntletResponse_RewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CMsgClientToGCAbandonGauntletResponse_RewardItem) Reset() {
	*x = CMsgClientToGCAbandonGauntletResponse_RewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAbandonGauntletResponse_RewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAbandonGauntletResponse_RewardItem) ProtoMessage() {}

func (x *CMsgClientToGCAbandonGauntletResponse_RewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAbandonGauntletResponse_RewardItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAbandonGauntletResponse_RewardItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CMsgClientToGCAbandonGauntletResponse_RewardItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CMsgClientToGCGetGauntletMatchesResponse_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Win     *bool   `protobuf:"varint,2,opt,name=win" json:"win,omitempty"`
}

func (x *CMsgClientToGCGetGauntletMatchesResponse_Match) Reset() {
	*x = CMsgClientToGCGetGauntletMatchesResponse_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetGauntletMatchesResponse_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetGauntletMatchesResponse_Match) ProtoMessage() {}

func (x *CMsgClientToGCGetGauntletMatchesResponse_Match) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetGauntletMatchesResponse_Match.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetGauntletMatchesResponse_Match) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CMsgClientToGCGetGauntletMatchesResponse_Match) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCGetGauntletMatchesResponse_Match) GetWin() bool {
	if x != nil && x.Win != nil {
		return *x.Win
	}
	return false
}

type CMsgClientToGCRecycleCardsResponse_GrantedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ItemId   *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgClientToGCRecycleCardsResponse_GrantedItem) Reset() {
	*x = CMsgClientToGCRecycleCardsResponse_GrantedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRecycleCardsResponse_GrantedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecycleCardsResponse_GrantedItem) ProtoMessage() {}

func (x *CMsgClientToGCRecycleCardsResponse_GrantedItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecycleCardsResponse_GrantedItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecycleCardsResponse_GrantedItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{73, 0}
}

func (x *CMsgClientToGCRecycleCardsResponse_GrantedItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCRecycleCardsResponse_GrantedItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgCreateTourneyPhase_DeckSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckMode      *CMsgCreateTourneyPhase_EDeckMode `protobuf:"varint,1,opt,name=deck_mode,json=deckMode,enum=artifact.CMsgCreateTourneyPhase_EDeckMode,def=0" json:"deck_mode,omitempty"`
	RandomColors  *uint32                           `protobuf:"varint,2,opt,name=random_colors,json=randomColors" json:"random_colors,omitempty"`
	LimitedFormat *uint32                           `protobuf:"varint,3,opt,name=limited_format,json=limitedFormat" json:"limited_format,omitempty"`
	RegisterDecks *bool                             `protobuf:"varint,4,opt,name=register_decks,json=registerDecks" json:"register_decks,omitempty"`
	ValidatorId   *uint32                           `protobuf:"varint,5,opt,name=validator_id,json=validatorId" json:"validator_id,omitempty"`
}

// Default values for CMsgCreateTourneyPhase_DeckSettings fields.
const (
	Default_CMsgCreateTourneyPhase_DeckSettings_DeckMode = CMsgCreateTourneyPhase_k_eUsePreviousPhase
)

func (x *CMsgCreateTourneyPhase_DeckSettings) Reset() {
	*x = CMsgCreateTourneyPhase_DeckSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateTourneyPhase_DeckSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateTourneyPhase_DeckSettings) ProtoMessage() {}

func (x *CMsgCreateTourneyPhase_DeckSettings) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateTourneyPhase_DeckSettings.ProtoReflect.Descriptor instead.
func (*CMsgCreateTourneyPhase_DeckSettings) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 0}
}

func (x *CMsgCreateTourneyPhase_DeckSettings) GetDeckMode() CMsgCreateTourneyPhase_EDeckMode {
	if x != nil && x.DeckMode != nil {
		return *x.DeckMode
	}
	return Default_CMsgCreateTourneyPhase_DeckSettings_DeckMode
}

func (x *CMsgCreateTourneyPhase_DeckSettings) GetRandomColors() uint32 {
	if x != nil && x.RandomColors != nil {
		return *x.RandomColors
	}
	return 0
}

func (x *CMsgCreateTourneyPhase_DeckSettings) GetLimitedFormat() uint32 {
	if x != nil && x.LimitedFormat != nil {
		return *x.LimitedFormat
	}
	return 0
}

func (x *CMsgCreateTourneyPhase_DeckSettings) GetRegisterDecks() bool {
	if x != nil && x.RegisterDecks != nil {
		return *x.RegisterDecks
	}
	return false
}

func (x *CMsgCreateTourneyPhase_DeckSettings) GetValidatorId() uint32 {
	if x != nil && x.ValidatorId != nil {
		return *x.ValidatorId
	}
	return 0
}

type CMsgCreateTourneyPhase_Swiss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwissMatches       *CMsgCreateTourneyPhase_ESwissMatches `protobuf:"varint,1,opt,name=swiss_matches,json=swissMatches,enum=artifact.CMsgCreateTourneyPhase_ESwissMatches,def=0" json:"swiss_matches,omitempty"`
	SwissScoring       *CMsgCreateTourneyPhase_ESwissScoring `protobuf:"varint,2,opt,name=swiss_scoring,json=swissScoring,enum=artifact.CMsgCreateTourneyPhase_ESwissScoring,def=0" json:"swiss_scoring,omitempty"`
	NumRounds          *uint32                               `protobuf:"varint,3,opt,name=num_rounds,json=numRounds" json:"num_rounds,omitempty"`
	ContinuePriorPhase *bool                                 `protobuf:"varint,4,opt,name=continue_prior_phase,json=continuePriorPhase" json:"continue_prior_phase,omitempty"`
}

// Default values for CMsgCreateTourneyPhase_Swiss fields.
const (
	Default_CMsgCreateTourneyPhase_Swiss_SwissMatches = CMsgCreateTourneyPhase_k_eBestOfOne
	Default_CMsgCreateTourneyPhase_Swiss_SwissScoring = CMsgCreateTourneyPhase_k_eWinsThreePoints
)

func (x *CMsgCreateTourneyPhase_Swiss) Reset() {
	*x = CMsgCreateTourneyPhase_Swiss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateTourneyPhase_Swiss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateTourneyPhase_Swiss) ProtoMessage() {}

func (x *CMsgCreateTourneyPhase_Swiss) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateTourneyPhase_Swiss.ProtoReflect.Descriptor instead.
func (*CMsgCreateTourneyPhase_Swiss) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 1}
}

func (x *CMsgCreateTourneyPhase_Swiss) GetSwissMatches() CMsgCreateTourneyPhase_ESwissMatches {
	if x != nil && x.SwissMatches != nil {
		return *x.SwissMatches
	}
	return Default_CMsgCreateTourneyPhase_Swiss_SwissMatches
}

func (x *CMsgCreateTourneyPhase_Swiss) GetSwissScoring() CMsgCreateTourneyPhase_ESwissScoring {
	if x != nil && x.SwissScoring != nil {
		return *x.SwissScoring
	}
	return Default_CMsgCreateTourneyPhase_Swiss_SwissScoring
}

func (x *CMsgCreateTourneyPhase_Swiss) GetNumRounds() uint32 {
	if x != nil && x.NumRounds != nil {
		return *x.NumRounds
	}
	return 0
}

func (x *CMsgCreateTourneyPhase_Swiss) GetContinuePriorPhase() bool {
	if x != nil && x.ContinuePriorPhase != nil {
		return *x.ContinuePriorPhase
	}
	return false
}

type CMsgCreateTourneyPhase_Bracket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestOf       *uint32 `protobuf:"varint,1,opt,name=best_of,json=bestOf" json:"best_of,omitempty"`
	FinalsBestOf *uint32 `protobuf:"varint,2,opt,name=finals_best_of,json=finalsBestOf" json:"finals_best_of,omitempty"`
}

func (x *CMsgCreateTourneyPhase_Bracket) Reset() {
	*x = CMsgCreateTourneyPhase_Bracket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateTourneyPhase_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateTourneyPhase_Bracket) ProtoMessage() {}

func (x *CMsgCreateTourneyPhase_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateTourneyPhase_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgCreateTourneyPhase_Bracket) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 2}
}

func (x *CMsgCreateTourneyPhase_Bracket) GetBestOf() uint32 {
	if x != nil && x.BestOf != nil {
		return *x.BestOf
	}
	return 0
}

func (x *CMsgCreateTourneyPhase_Bracket) GetFinalsBestOf() uint32 {
	if x != nil && x.FinalsBestOf != nil {
		return *x.FinalsBestOf
	}
	return 0
}

type CMsgCreateTourneyPhase_FreeForAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxGamesPerPlayer *uint32 `protobuf:"varint,1,opt,name=max_games_per_player,json=maxGamesPerPlayer" json:"max_games_per_player,omitempty"`
	AutoAdvanceAfterS *uint32 `protobuf:"varint,2,opt,name=auto_advance_after_s,json=autoAdvanceAfterS" json:"auto_advance_after_s,omitempty"`
}

func (x *CMsgCreateTourneyPhase_FreeForAll) Reset() {
	*x = CMsgCreateTourneyPhase_FreeForAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCreateTourneyPhase_FreeForAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCreateTourneyPhase_FreeForAll) ProtoMessage() {}

func (x *CMsgCreateTourneyPhase_FreeForAll) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCreateTourneyPhase_FreeForAll.ProtoReflect.Descriptor instead.
func (*CMsgCreateTourneyPhase_FreeForAll) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{82, 3}
}

func (x *CMsgCreateTourneyPhase_FreeForAll) GetMaxGamesPerPlayer() uint32 {
	if x != nil && x.MaxGamesPerPlayer != nil {
		return *x.MaxGamesPerPlayer
	}
	return 0
}

func (x *CMsgCreateTourneyPhase_FreeForAll) GetAutoAdvanceAfterS() uint32 {
	if x != nil && x.AutoAdvanceAfterS != nil {
		return *x.AutoAdvanceAfterS
	}
	return 0
}

type CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteKey    *uint64 `protobuf:"fixed64,1,opt,name=invite_key,json=inviteKey" json:"invite_key,omitempty"`
	CreatedBy    *uint32 `protobuf:"varint,2,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	MaxUses      *uint32 `protobuf:"varint,3,opt,name=max_uses,json=maxUses" json:"max_uses,omitempty"`
	TimesUsed    *uint32 `protobuf:"varint,4,opt,name=times_used,json=timesUsed" json:"times_used,omitempty"`
	InviteRights *uint32 `protobuf:"varint,5,opt,name=invite_rights,json=inviteRights" json:"invite_rights,omitempty"`
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) Reset() {
	*x = CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{112, 0}
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) GetInviteKey() uint64 {
	if x != nil && x.InviteKey != nil {
		return *x.InviteKey
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) GetCreatedBy() uint32 {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) GetMaxUses() uint32 {
	if x != nil && x.MaxUses != nil {
		return *x.MaxUses
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) GetTimesUsed() uint32 {
	if x != nil && x.TimesUsed != nil {
		return *x.TimesUsed
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite) GetInviteRights() uint32 {
	if x != nil && x.InviteRights != nil {
		return *x.InviteRights
	}
	return 0
}

type CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	InitialSeed  *uint32 `protobuf:"varint,2,opt,name=initial_seed,json=initialSeed" json:"initial_seed,omitempty"`
	InitialGroup *uint32 `protobuf:"varint,3,opt,name=initial_group,json=initialGroup" json:"initial_group,omitempty"`
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) Reset() {
	*x = CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) ProtoMessage() {}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{127, 0}
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) GetInitialSeed() uint32 {
	if x != nil && x.InitialSeed != nil {
		return *x.InitialSeed
	}
	return 0
}

func (x *CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed) GetInitialGroup() uint32 {
	if x != nil && x.InitialGroup != nil {
		return *x.InitialGroup
	}
	return 0
}

type CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId   *uint32 `protobuf:"varint,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
	ChoiceSet []byte  `protobuf:"bytes,2,opt,name=choice_set,json=choiceSet" json:"choice_set,omitempty"`
	Choices   []byte  `protobuf:"bytes,3,opt,name=choices" json:"choices,omitempty"`
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) Reset() {
	*x = CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) ProtoMessage() {}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_client_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_client_proto_rawDescGZIP(), []int{132, 0}
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) GetStageId() uint32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) GetChoiceSet() []byte {
	if x != nil {
		return x.ChoiceSet
	}
	return nil
}

func (x *CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage) GetChoices() []byte {
	if x != nil {
		return x.Choices
	}
	return nil
}

var File_artifact_dcg_gcmessages_client_proto protoreflect.FileDescriptor

var file_artifact_dcg_gcmessages_client_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x1a, 0x24, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xab, 0x05, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a,
	0x0c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xc1, 0x03, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x06, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x65, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x10, 0x0e, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x61, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x82, 0x01, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x55, 0x70,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x10, 0x03, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x73, 0x0a,
	0x14, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x44, 0x43, 0x47, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x11, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xa1, 0x02, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x6f, 0x6f,
	0x4d, 0x61, 0x6e, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x10, 0x09, 0x22, 0xf6, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x64, 0x49, 0x64, 0x22, 0x5c,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x7b, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x22, 0x7a, 0x0a, 0x23, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x22, 0xf6, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc5,
	0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17,
	0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x1f, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73,
	0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x4e, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49,
	0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x35, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0xc7, 0x05, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x0a, 0x4f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x68, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52,
	0x08, 0x73, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x6b, 0x5f, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10,
	0x06, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x45, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x61,
	0x72, 0x65, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f,
	0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f,
	0x52, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x52, 0x61, 0x72, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x06, 0x22, 0x4c,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x0a, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x64, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12,
	0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x4b, 0x0a, 0x07, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0x3e, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x03, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xd5, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44,
	0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45,
	0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xc3, 0x05, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x31, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x65,
	0x73, 0x31, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x32, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x32, 0x12, 0x60, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x0f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x22, 0x6e, 0x0a,
	0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x41, 0x49, 0x56, 0x73, 0x41, 0x49, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xb0, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x49, 0x56, 0x73, 0x41, 0x49, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x69, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e,
	0x61, 0x69, 0x5f, 0x30, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x30, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0e, 0x61, 0x69, 0x5f, 0x31, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x31, 0x44, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x49, 0x56, 0x73, 0x41,
	0x49, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x68, 0x61,
	0x6e, 0x74, 0x6f, 0x6d, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65,
	0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75,
	0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x22, 0xc0, 0x03, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x65, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x10, 0x0b, 0x22, 0x40, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x47, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x82, 0x03, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x47,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x47, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x29, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6a,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x22, 0xc5, 0x01, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x49, 0x47,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x49, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x49, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x42, 0x75,
	0x73, 0x79, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4b, 0x65, 0x79, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0x06, 0x22,
	0x71, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x73, 0x22, 0x54, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x34, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x22,
	0x64, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x65, 0x44, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x06, 0x22, 0x67, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa6,
	0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5e, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22, 0x97, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x89, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x04, 0x22, 0x47, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8d, 0x01,
	0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc5, 0x02,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x6e, 0x67, 0x73, 0x10, 0x05, 0x22, 0x4b, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x22, 0xd4, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x10, 0x07, 0x22, 0xbe, 0x04, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x5b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x09, 0x73, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x07, 0x45, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x6b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x73,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x08,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x0a, 0x22, 0xc9, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x07, 0x22, 0x50, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xaa, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x08, 0x12, 0x13, 0x0a,
	0x0f, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x0b, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x22, 0x7c, 0x0a, 0x24,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x2c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x4d, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0x06, 0x22, 0xc2, 0x01,
	0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49,
	0x64, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x07, 0x22,
	0xcd, 0x04, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0f,
	0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x75, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x06,
	0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b,
	0x5f, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x09, 0x22,
	0x7a, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22,
	0x8f, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x44, 0x10,
	0x04, 0x22, 0xa2, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73,
	0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3f, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6b, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x03, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x5d, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x0b, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x99,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d,
	0x61, 0x6e, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x06, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x22, 0x69, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x04, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x07, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x25, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6d, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x6d,
	0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4d, 0x6d, 0x22, 0x81, 0x01,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x64, 0x22, 0xff, 0x0b, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x2e, 0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x11, 0x6b, 0x5f, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x64, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x62, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x77, 0x69, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x73, 0x73, 0x52, 0x05, 0x73, 0x77, 0x69, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x52,
	0x0a, 0x66, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x1a, 0x82, 0x02, 0x0a, 0x0c,
	0x44, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x44, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x65,
	0x55, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x1a, 0xa4, 0x02, 0x0a, 0x05, 0x53, 0x77, 0x69, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x77,
	0x69, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x2e, 0x45, 0x53, 0x77, 0x69, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x3a, 0x0c, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x4f, 0x6e, 0x65, 0x52,
	0x0c, 0x73, 0x77, 0x69, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x67, 0x0a,
	0x0d, 0x73, 0x77, 0x69, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x53, 0x77, 0x69, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x57, 0x69, 0x6e, 0x73, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x77, 0x69, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x1a, 0x48, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x42, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x1a, 0x6e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x45, 0x53, 0x77, 0x69, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66,
	0x4f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4f, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x54, 0x77, 0x6f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x65, 0x5f,
	0x54, 0x69, 0x65, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x46, 0x69, 0x76, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65,
	0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x69, 0x65, 0x73, 0x10,
	0x06, 0x22, 0x3d, 0x0a, 0x0d, 0x45, 0x53, 0x77, 0x69, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x57, 0x69, 0x6e, 0x73, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x57, 0x69, 0x6e, 0x73, 0x54, 0x77, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x01,
	0x22, 0x71, 0x0a, 0x09, 0x45, 0x44, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x65, 0x55, 0x73, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x10, 0x04, 0x22, 0x8c, 0x04, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38,
	0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x70,
	0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x08, 0x45,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x02, 0x22, 0xb0, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x73, 0x10, 0x05, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x29, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xa5, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x10, 0x06, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a,
	0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0x61, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x29, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x73, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x10, 0x04, 0x22, 0xf8, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x59, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e,
	0x45, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x55, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43,
	0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a,
	0x12, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x22, 0xfc, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xdd, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x73, 0x10, 0x08,
	0x22, 0x5e, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x69,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x9a, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x05, 0x22, 0xb5, 0x01,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x57, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x79, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x07, 0x22, 0x89, 0x01, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x43,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0x07, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x22, 0xc0,
	0x03, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10,
	0x09, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10,
	0x0b, 0x22, 0x3f, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x07, 0x22, 0x88, 0x01, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x6b, 0x5f, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10, 0x08, 0x22, 0x48, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x64, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x64, 0x65, 0x63,
	0x6b, 0x73, 0x22, 0x5d, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x03, 0x22, 0x79, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xf9, 0x02, 0x0a,
	0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x65, 0x73, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x10, 0x07, 0x22, 0x65, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0xa4, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x85,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x05, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x9d, 0x04, 0x0a,
	0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0xa9, 0x01, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x04, 0x22, 0xa8, 0x02, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x3a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x5d, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x3a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc4, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x10, 0x07, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x28, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x22, 0x6d, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04,
	0x22, 0x66, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x22, 0x76, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x41, 0x64, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x22, 0xaf, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x64, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x64, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa0, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x73, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x10, 0x06, 0x22, 0x5c, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x22, 0x9e, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x10,
	0x05, 0x22, 0xad, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0xb3, 0x03, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x64, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x75, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x05, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x06, 0x45, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x20, 0x22, 0xd7, 0x03, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10,
	0x0a, 0x22, 0x9e, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x73, 0x1a, 0x73, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x94, 0x02, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x05, 0x22, 0xaa, 0x01, 0x0a, 0x29, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x22, 0xb4, 0x02, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x64, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x45, 0x64,
	0x69, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x05, 0x22, 0x80, 0x01,
	0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x9f, 0x04, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x1a, 0x62, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x05, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x70, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x10, 0x04, 0x22, 0x72, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x50, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x61,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x50, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x08, 0x22, 0x43, 0x0a, 0x22, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x8d, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x55, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x10, 0x04, 0x22,
	0xf5, 0x03, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x69,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x53, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x45, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x53, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x32, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x45, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x77, 0x69,
	0x73, 0x73, 0x5f, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x10, 0x64, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x77, 0x69, 0x73, 0x73, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x10, 0x65, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x10, 0x96, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x6b, 0x5f, 0x65, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x73, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x10, 0x97, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x5f, 0x4d, 0x61, 0x78, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x10, 0xc8, 0x01, 0x22, 0xe2, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcd, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x08, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x09, 0x22, 0x93, 0x01, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x10, 0x08, 0x2a, 0x8d, 0x31, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x44, 0x43, 0x47, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x10, 0xb2, 0x46, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xb3, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xb4, 0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xb5, 0x46, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0xb6, 0x46, 0x12,
	0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0xb7, 0x46,
	0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb8, 0x46, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xbb, 0x46,
	0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0xbf, 0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xc0, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc1, 0x46, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc2, 0x46, 0x12, 0x2a, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xc3, 0x46, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xc4, 0x46, 0x12,
	0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0xc5, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xc6, 0x46, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc7, 0x46, 0x12, 0x21, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xcc, 0x46, 0x12, 0x29,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x46, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x10, 0xd0, 0x46, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x10, 0xd1, 0x46, 0x12,
	0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0xd4, 0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xd5, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0xd6, 0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd7, 0x46, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0xd8, 0x46, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xd9, 0x46, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x10, 0xda, 0x46, 0x12, 0x2f,
	0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xdb, 0x46, 0x12,
	0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x10, 0xdc, 0x46, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xdd, 0x46, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x49, 0x56, 0x73,
	0x41, 0x49, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0xf4, 0x46,
	0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x49, 0x56, 0x73, 0x41, 0x49, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xf5, 0x46, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x49, 0x56, 0x73, 0x41, 0x49,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xf6, 0x46,
	0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f,
	0x6d, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x10, 0xf9, 0x46, 0x12, 0x26, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x88, 0x47, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x10, 0x89, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8a,
	0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x47, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x10, 0x8b, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x8c, 0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x73, 0x10, 0x8d, 0x47, 0x12, 0x27,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x10, 0x8e, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8f, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b,
	0x10, 0x90, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x91, 0x47, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x49, 0x47, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x92, 0x47, 0x12, 0x2d, 0x0a,
	0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x41, 0x49, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x93, 0x47, 0x12, 0x27, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x10, 0x96, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x97, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0x98, 0x47, 0x12, 0x2e,
	0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x99, 0x47, 0x12, 0x25,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x10, 0x9a, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x9b, 0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9c, 0x47, 0x12, 0x2f, 0x0a,
	0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d, 0x47, 0x12, 0x2b,
	0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x9e, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9f, 0x47,
	0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0xa0, 0x47, 0x12, 0x33, 0x0a,
	0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xa1, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0xa2, 0x47, 0x12, 0x32,
	0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xa3, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xa4, 0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xa5, 0x47, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x44,
	0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0xa6, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x10, 0xa7, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa8, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xa9, 0x47, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xaa, 0x47, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x10, 0xad,
	0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x63, 0x6b, 0x10, 0xae, 0x47, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0xaf, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xb0, 0x47, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x10, 0xb1, 0x47, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x9c, 0x4a, 0x12,
	0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d, 0x4a, 0x12, 0x27, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x10, 0x9e, 0x4a, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x9f, 0x4a, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xa2, 0x4a, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0xa3, 0x4a, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x10, 0xa4, 0x4a, 0x12, 0x2a, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa5, 0x4a, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x10, 0xa8, 0x4a, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xa9, 0x4a, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xaa, 0x4a, 0x12,
	0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xab,
	0x4a, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xac, 0x4a, 0x12, 0x30, 0x0a, 0x2b, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xad, 0x4a, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0xae, 0x4a, 0x12, 0x34, 0x0a, 0x2f, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xaf,
	0x4a, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x10, 0xb0, 0x4a, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb1, 0x4a, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x10,
	0xb2, 0x4a, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xb3, 0x4a, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x10, 0xb4, 0x4a, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb5, 0x4a, 0x12, 0x28, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x63, 0x6b, 0x10, 0xb6, 0x4a, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb7, 0x4a, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0xb8, 0x4a, 0x12, 0x2d,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb9, 0x4a, 0x12, 0x2e, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x10, 0xba, 0x4a, 0x12, 0x36, 0x0a,
	0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xbb, 0x4a, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63,
	0x6b, 0x73, 0x10, 0xbc, 0x4a, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbd, 0x4a, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xc0, 0x4a, 0x12, 0x34, 0x0a, 0x2f, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc1,
	0x4a, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xc2, 0x4a, 0x12,
	0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xc3, 0x4a, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0xc4,
	0x4a, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xc5, 0x4a, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0xc6, 0x4a, 0x12, 0x39, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xc7, 0x4a, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x10, 0xc8, 0x4a, 0x12, 0x2f, 0x0a, 0x2a,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc9, 0x4a, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xca, 0x4a, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xcb, 0x4a, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x64,
	0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0xcc, 0x4a, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x41, 0x64, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x4a, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0xce, 0x4a,
	0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcf,
	0x4a, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xd0, 0x4a, 0x12, 0x31, 0x0a, 0x2c,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd1, 0x4a, 0x12,
	0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x10, 0xd2, 0x4a, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd3, 0x4a, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0xd4, 0x4a, 0x12, 0x36, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd5, 0x4a, 0x12,
	0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0xd6,
	0x4a, 0x12, 0x38, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd7, 0x4a, 0x12, 0x2c, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x10, 0xd8, 0x4a, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd9, 0x4a, 0x12,
	0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xda, 0x4a, 0x12, 0x32, 0x0a, 0x2d, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xdb, 0x4a, 0x12,
	0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xdc, 0x4a, 0x12,
	0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x61, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x46, 0x65, 0x65, 0x10, 0xdd, 0x4a, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x50, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xde, 0x4a, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x10, 0xdf, 0x4a, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe0, 0x4a, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0xe1, 0x4a,
	0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe2,
	0x4a, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x10, 0xe3, 0x4a, 0x12, 0x33,
	0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xe4, 0x4a, 0x2a, 0x8a, 0x02, 0x0a, 0x0d, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x61, 0x62, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x10, 0x15,
	0x2a, 0x6e, 0x0a, 0x1a, 0x45, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x10, 0x01,
	0x42, 0x3c, 0x48, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x70, 0x62, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x80, 0x01, 0x00,
}

var (
	file_artifact_dcg_gcmessages_client_proto_rawDescOnce sync.Once
	file_artifact_dcg_gcmessages_client_proto_rawDescData = file_artifact_dcg_gcmessages_client_proto_rawDesc
)

func file_artifact_dcg_gcmessages_client_proto_rawDescGZIP() []byte {
	file_artifact_dcg_gcmessages_client_proto_rawDescOnce.Do(func() {
		file_artifact_dcg_gcmessages_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_dcg_gcmessages_client_proto_rawDescData)
	})
	return file_artifact_dcg_gcmessages_client_proto_rawDescData
}

var file_artifact_dcg_gcmessages_client_proto_enumTypes = make([]protoimpl.EnumInfo, 64)
var file_artifact_dcg_gcmessages_client_proto_msgTypes = make([]protoimpl.MessageInfo, 156)
var file_artifact_dcg_gcmessages_client_proto_goTypes = []interface{}{
	(EGCDCGClientMessages)(0),                                          // 0: artifact.EGCDCGClientMessages
	(EChatRoomType)(0),                                                 // 1: artifact.EChatRoomType
	(EChatMessageAdditionalData)(0),                                    // 2: artifact.EChatMessageAdditionalData
	(CMsgClientToGCStartMatchmakingResponse_EResultCode)(0),            // 3: artifact.CMsgClientToGCStartMatchmakingResponse.EResultCode
	(CMsgGCToClientMatchmakingStopped_EReason)(0),                      // 4: artifact.CMsgGCToClientMatchmakingStopped.EReason
	(CMsgClientToGCJoinChatChannelResponse_EResult)(0),                 // 5: artifact.CMsgClientToGCJoinChatChannelResponse.EResult
	(CMsgClientToGCOpenPackItemResponse_EResponse)(0),                  // 6: artifact.CMsgClientToGCOpenPackItemResponse.EResponse
	(CMsgClientToGCOpenPackItemResponse_ESlotType)(0),                  // 7: artifact.CMsgClientToGCOpenPackItemResponse.ESlotType
	(CMsgClientToGCSpectateUserResponse_EResult)(0),                    // 8: artifact.CMsgClientToGCSpectateUserResponse.EResult
	(CMsgClientToGCGetMatchDetailsResponse_EResult)(0),                 // 9: artifact.CMsgClientToGCGetMatchDetailsResponse.EResult
	(CMsgClientToGCJoinGauntletResponse_EResponse)(0),                  // 10: artifact.CMsgClientToGCJoinGauntletResponse.EResponse
	(CMsgClientToGCAbandonGauntletResponse_EResponse)(0),               // 11: artifact.CMsgClientToGCAbandonGauntletResponse.EResponse
	(CMsgClientToGCAIGauntletResultResponse_EResponse)(0),              // 12: artifact.CMsgClientToGCAIGauntletResultResponse.EResponse
	(CMsgClientToGCRegisterGauntletDeckResponse_EResponse)(0),          // 13: artifact.CMsgClientToGCRegisterGauntletDeckResponse.EResponse
	(CMsgClientToGCLimitedGrantResponse_EResponse)(0),                  // 14: artifact.CMsgClientToGCLimitedGrantResponse.EResponse
	(CMsgClientToGCLimitedGrantChoiceResponse_EResponse)(0),            // 15: artifact.CMsgClientToGCLimitedGrantChoiceResponse.EResponse
	(CMsgClientToGCPrivateLobbyCreateResponse_EResponse)(0),            // 16: artifact.CMsgClientToGCPrivateLobbyCreateResponse.EResponse
	(CMsgClientToGCPrivateLobbyLeaveResponse_EResponse)(0),             // 17: artifact.CMsgClientToGCPrivateLobbyLeaveResponse.EResponse
	(CMsgClientToGCPrivateLobbyJoinResponse_EResponse)(0),              // 18: artifact.CMsgClientToGCPrivateLobbyJoinResponse.EResponse
	(CMsgClientToGCPrivateLobbyAction_EAction)(0),                      // 19: artifact.CMsgClientToGCPrivateLobbyAction.EAction
	(CMsgClientToGCPrivateLobbyActionResponse_EResponse)(0),            // 20: artifact.CMsgClientToGCPrivateLobbyActionResponse.EResponse
	(CMsgClientToGCPrivateLobbyStartMatchResponse_EResponse)(0),        // 21: artifact.CMsgClientToGCPrivateLobbyStartMatchResponse.EResponse
	(CMsgClientToGCPrivateLobbyInviteUserResponse_EResponse)(0),        // 22: artifact.CMsgClientToGCPrivateLobbyInviteUserResponse.EResponse
	(CMsgClientToGCPrivateLobbyChallengeResponse_EResponse)(0),         // 23: artifact.CMsgClientToGCPrivateLobbyChallengeResponse.EResponse
	(CMsgGCToClientPrivateLobbyEvent_EEvent)(0),                        // 24: artifact.CMsgGCToClientPrivateLobbyEvent.EEvent
	(CMsgClientToGCPrivateLobbyJoinChatRoomResponse_EResponse)(0),      // 25: artifact.CMsgClientToGCPrivateLobbyJoinChatRoomResponse.EResponse
	(CMsgClientToGCRecycleCardsResponse_EResponse)(0),                  // 26: artifact.CMsgClientToGCRecycleCardsResponse.EResponse
	(CMsgClientToGCTourneyGetInfoResponse_EResponse)(0),                // 27: artifact.CMsgClientToGCTourneyGetInfoResponse.EResponse
	(CMsgCreateTourneyPhase_ESwissMatches)(0),                          // 28: artifact.CMsgCreateTourneyPhase.ESwissMatches
	(CMsgCreateTourneyPhase_ESwissScoring)(0),                          // 29: artifact.CMsgCreateTourneyPhase.ESwissScoring
	(CMsgCreateTourneyPhase_EDeckMode)(0),                              // 30: artifact.CMsgCreateTourneyPhase.EDeckMode
	(CMsgClientToGCCreateTourney_EPrivacy)(0),                          // 31: artifact.CMsgClientToGCCreateTourney.EPrivacy
	(CMsgClientToGCCreateTourneyResponse_EResponse)(0),                 // 32: artifact.CMsgClientToGCCreateTourneyResponse.EResponse
	(CMsgClientToGCTourneyAcceptInviteResponse_EResponse)(0),           // 33: artifact.CMsgClientToGCTourneyAcceptInviteResponse.EResponse
	(CMsgClientToGCTourneyRejectInviteResponse_EResponse)(0),           // 34: artifact.CMsgClientToGCTourneyRejectInviteResponse.EResponse
	(CMsgClientToGCTourneyRevokeInviteResponse_EResponse)(0),           // 35: artifact.CMsgClientToGCTourneyRevokeInviteResponse.EResponse
	(CMsgClientToGCTourneyAdminSwitchStageResponse_EResponse)(0),       // 36: artifact.CMsgClientToGCTourneyAdminSwitchStageResponse.EResponse
	(CMsgClientToGCTourneyAdminKickResponse_EResponse)(0),              // 37: artifact.CMsgClientToGCTourneyAdminKickResponse.EResponse
	(CMsgClientToGCTourneyAdminGrantWinResponse_EResponse)(0),          // 38: artifact.CMsgClientToGCTourneyAdminGrantWinResponse.EResponse
	(CMsgClientToGCTourneyAdminChangeRightsResponse_EResponse)(0),      // 39: artifact.CMsgClientToGCTourneyAdminChangeRightsResponse.EResponse
	(CMsgClientToGCTourneyRegisterDeckResponse_EResponse)(0),           // 40: artifact.CMsgClientToGCTourneyRegisterDeckResponse.EResponse
	(CMsgClientToGCTourneyUserLeaveResponse_EResponse)(0),              // 41: artifact.CMsgClientToGCTourneyUserLeaveResponse.EResponse
	(CMsgClientToGCTourneyRegisterSharedDeckResponse_EResponse)(0),     // 42: artifact.CMsgClientToGCTourneyRegisterSharedDeckResponse.EResponse
	(CMsgClientToGCTourneyGetRegisteredDecksResponse_EResponse)(0),     // 43: artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse.EResponse
	(CMsgClientToGCTourneyCreateOpenInviteResponse_EResponse)(0),       // 44: artifact.CMsgClientToGCTourneyCreateOpenInviteResponse.EResponse
	(CMsgClientToGCTourneyRevokeOpenInviteResponse_EResponse)(0),       // 45: artifact.CMsgClientToGCTourneyRevokeOpenInviteResponse.EResponse
	(CMsgClientToGCTourneyGetOpenInvitesResponse_EResponse)(0),         // 46: artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.EResponse
	(CMsgClientToGCTourneyAdminSwitchPhaseStageResponse_EResponse)(0),  // 47: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStageResponse.EResponse
	(CMsgClientToGCTourneyGetOverviewResponse_EResponse)(0),            // 48: artifact.CMsgClientToGCTourneyGetOverviewResponse.EResponse
	(CMsgClientToGCTourneySetStatusResponse_EResponse)(0),              // 49: artifact.CMsgClientToGCTourneySetStatusResponse.EResponse
	(CMsgClientToGCTourneyAddPhaseResponse_EResponse)(0),               // 50: artifact.CMsgClientToGCTourneyAddPhaseResponse.EResponse
	(CMsgClientToGCTourneyRemovePhaseResponse_EResponse)(0),            // 51: artifact.CMsgClientToGCTourneyRemovePhaseResponse.EResponse
	(CMsgClientToGCTourneySpectateMatchResponse_EResponse)(0),          // 52: artifact.CMsgClientToGCTourneySpectateMatchResponse.EResponse
	(CMsgClientToGCTourneyInviteList_ELimit)(0),                        // 53: artifact.CMsgClientToGCTourneyInviteList.ELimit
	(CMsgClientToGCTourneyInviteListResponse_EResponse)(0),             // 54: artifact.CMsgClientToGCTourneyInviteListResponse.EResponse
	(CMsgClientToGCTourneyAdminSetSeedValuesResponse_EResponse)(0),     // 55: artifact.CMsgClientToGCTourneyAdminSetSeedValuesResponse.EResponse
	(CMsgClientToGCTourneyEditStageSwapPlayersResponse_EResponse)(0),   // 56: artifact.CMsgClientToGCTourneyEditStageSwapPlayersResponse.EResponse
	(CMsgClientToGCTourneyGetLimitedReplayResponse_EResponse)(0),       // 57: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.EResponse
	(CMsgClientToGCTourneyRejoinChatRoomResponse_EResponse)(0),         // 58: artifact.CMsgClientToGCTourneyRejoinChatRoomResponse.EResponse
	(CMsgClientToGCTourneyPayEntryFeeResponse_EResponse)(0),            // 59: artifact.CMsgClientToGCTourneyPayEntryFeeResponse.EResponse
	(CMsgClientToGCTourneyPlayerAbandonResponse_EResponse)(0),          // 60: artifact.CMsgClientToGCTourneyPlayerAbandonResponse.EResponse
	(CMsgClientToGCTourneyChangeValue_EValueType)(0),                   // 61: artifact.CMsgClientToGCTourneyChangeValue.EValueType
	(CMsgClientToGCTourneyChangeValueResponse_EResponse)(0),            // 62: artifact.CMsgClientToGCTourneyChangeValueResponse.EResponse
	(CMsgClientToGCTourneyJoinOpenTourneyResponse_EResponse)(0),        // 63: artifact.CMsgClientToGCTourneyJoinOpenTourneyResponse.EResponse
	(*CMsgClientToGCStartMatchmaking)(nil),                             // 64: artifact.CMsgClientToGCStartMatchmaking
	(*CMsgClientToGCStartMatchmakingResponse)(nil),                     // 65: artifact.CMsgClientToGCStartMatchmakingResponse
	(*CMsgClientToGCStopMatchmaking)(nil),                              // 66: artifact.CMsgClientToGCStopMatchmaking
	(*CMsgClientToGCStopMatchmakingResponse)(nil),                      // 67: artifact.CMsgClientToGCStopMatchmakingResponse
	(*CMsgGCToClientMatchmakingStopped)(nil),                           // 68: artifact.CMsgGCToClientMatchmakingStopped
	(*CMsgClientToGCLeaveLobby)(nil),                                   // 69: artifact.CMsgClientToGCLeaveLobby
	(*CMsgClientToGCLeaveLobbyResponse)(nil),                           // 70: artifact.CMsgClientToGCLeaveLobbyResponse
	(*CMsgGCToClientDefaultValidator)(nil),                             // 71: artifact.CMsgGCToClientDefaultValidator
	(*CMsgClientWelcomeDCG)(nil),                                       // 72: artifact.CMsgClientWelcomeDCG
	(*CMsgClientToGCJoinChatChannel)(nil),                              // 73: artifact.CMsgClientToGCJoinChatChannel
	(*CMsgClientToGCJoinChatChannelResponse)(nil),                      // 74: artifact.CMsgClientToGCJoinChatChannelResponse
	(*CMsgGCToClientChatChannelJoined)(nil),                            // 75: artifact.CMsgGCToClientChatChannelJoined
	(*CMsgClientToGCSendChatMessage)(nil),                              // 76: artifact.CMsgClientToGCSendChatMessage
	(*CMsgClientToGCSendChatMessageRoll)(nil),                          // 77: artifact.CMsgClientToGCSendChatMessageRoll
	(*CChatMessageAdditionalData_DiceRoll)(nil),                        // 78: artifact.CChatMessageAdditionalData_DiceRoll
	(*CMsgGCToClientChatMessage)(nil),                                  // 79: artifact.CMsgGCToClientChatMessage
	(*CMsgGCToClientUserJoinedChatChannel)(nil),                        // 80: artifact.CMsgGCToClientUserJoinedChatChannel
	(*CMsgClientToGCLeaveChatChannel)(nil),                             // 81: artifact.CMsgClientToGCLeaveChatChannel
	(*CMsgClientToGCLeaveChatChannelByKey)(nil),                        // 82: artifact.CMsgClientToGCLeaveChatChannelByKey
	(*CMsgClientToGCIsInMatchmaking)(nil),                              // 83: artifact.CMsgClientToGCIsInMatchmaking
	(*CMsgClientToGCIsInMatchmakingResponse)(nil),                      // 84: artifact.CMsgClientToGCIsInMatchmakingResponse
	(*CMsgClientToGCOpenPackItem)(nil),                                 // 85: artifact.CMsgClientToGCOpenPackItem
	(*CMsgClientToGCOpenPackItemResponse)(nil),                         // 86: artifact.CMsgClientToGCOpenPackItemResponse
	(*CMsgClientToGCSpectateUser)(nil),                                 // 87: artifact.CMsgClientToGCSpectateUser
	(*CMsgClientToGCSpectateUserResponse)(nil),                         // 88: artifact.CMsgClientToGCSpectateUserResponse
	(*CMsgClientToGCGetMatchHistory)(nil),                              // 89: artifact.CMsgClientToGCGetMatchHistory
	(*CMsgClientToGCGetMatchHistoryResponse)(nil),                      // 90: artifact.CMsgClientToGCGetMatchHistoryResponse
	(*CMsgClientToGCGetMatchDetails)(nil),                              // 91: artifact.CMsgClientToGCGetMatchDetails
	(*CMsgClientToGCGetMatchDetailsResponse)(nil),                      // 92: artifact.CMsgClientToGCGetMatchDetailsResponse
	(*CMsgClientToGCGetAIVsAIMatchConfig)(nil),                         // 93: artifact.CMsgClientToGCGetAIVsAIMatchConfig
	(*CMsgClientToGCGetAIVsAIMatchConfigResponse)(nil),                 // 94: artifact.CMsgClientToGCGetAIVsAIMatchConfigResponse
	(*CMsgClientToGCGetAIVsAIMatchComplete)(nil),                       // 95: artifact.CMsgClientToGCGetAIVsAIMatchComplete
	(*CMsgGCToClientGlobalPhantomLeagues)(nil),                         // 96: artifact.CMsgGCToClientGlobalPhantomLeagues
	(*CMsgClientToGCJoinGauntlet)(nil),                                 // 97: artifact.CMsgClientToGCJoinGauntlet
	(*CMsgClientToGCJoinGauntletResponse)(nil),                         // 98: artifact.CMsgClientToGCJoinGauntletResponse
	(*CMsgClientToGCAbandonGauntlet)(nil),                              // 99: artifact.CMsgClientToGCAbandonGauntlet
	(*CMsgClientToGCAbandonGauntletResponse)(nil),                      // 100: artifact.CMsgClientToGCAbandonGauntletResponse
	(*CMsgClientToGCAIGauntletResult)(nil),                             // 101: artifact.CMsgClientToGCAIGauntletResult
	(*CMsgClientToGCAIGauntletResultResponse)(nil),                     // 102: artifact.CMsgClientToGCAIGauntletResultResponse
	(*CMsgGCToClientAvailableGauntlets)(nil),                           // 103: artifact.CMsgGCToClientAvailableGauntlets
	(*CMsgClientToGCGetGauntletMatches)(nil),                           // 104: artifact.CMsgClientToGCGetGauntletMatches
	(*CMsgClientToGCGetGauntletMatchesResponse)(nil),                   // 105: artifact.CMsgClientToGCGetGauntletMatchesResponse
	(*CMsgClientToGCRegisterGauntletDeck)(nil),                         // 106: artifact.CMsgClientToGCRegisterGauntletDeck
	(*CMsgClientToGCRegisterGauntletDeckResponse)(nil),                 // 107: artifact.CMsgClientToGCRegisterGauntletDeckResponse
	(*CMsgClientToGCLimitedGrant)(nil),                                 // 108: artifact.CMsgClientToGCLimitedGrant
	(*CMsgClientToGCLimitedGrantResponse)(nil),                         // 109: artifact.CMsgClientToGCLimitedGrantResponse
	(*CMsgClientToGCLimitedGrantChoice)(nil),                           // 110: artifact.CMsgClientToGCLimitedGrantChoice
	(*CMsgClientToGCLimitedGrantChoiceResponse)(nil),                   // 111: artifact.CMsgClientToGCLimitedGrantChoiceResponse
	(*CMsgClientToGCLimitedGetFormat)(nil),                             // 112: artifact.CMsgClientToGCLimitedGetFormat
	(*CMsgClientToGCLimitedGetFormatResponse)(nil),                     // 113: artifact.CMsgClientToGCLimitedGetFormatResponse
	(*CMsgClientToGCPrivateLobbyCreate)(nil),                           // 114: artifact.CMsgClientToGCPrivateLobbyCreate
	(*CMsgClientToGCPrivateLobbyCreateResponse)(nil),                   // 115: artifact.CMsgClientToGCPrivateLobbyCreateResponse
	(*CMsgClientToGCPrivateLobbyLeave)(nil),                            // 116: artifact.CMsgClientToGCPrivateLobbyLeave
	(*CMsgClientToGCPrivateLobbyLeaveResponse)(nil),                    // 117: artifact.CMsgClientToGCPrivateLobbyLeaveResponse
	(*CMsgClientToGCPrivateLobbyJoin)(nil),                             // 118: artifact.CMsgClientToGCPrivateLobbyJoin
	(*CMsgClientToGCPrivateLobbyJoinResponse)(nil),                     // 119: artifact.CMsgClientToGCPrivateLobbyJoinResponse
	(*CMsgClientToGCPrivateLobbyAction)(nil),                           // 120: artifact.CMsgClientToGCPrivateLobbyAction
	(*CMsgClientToGCPrivateLobbyActionResponse)(nil),                   // 121: artifact.CMsgClientToGCPrivateLobbyActionResponse
	(*CMsgClientToGCPrivateLobbyStartMatch)(nil),                       // 122: artifact.CMsgClientToGCPrivateLobbyStartMatch
	(*CMsgClientToGCPrivateLobbyStartMatchResponse)(nil),               // 123: artifact.CMsgClientToGCPrivateLobbyStartMatchResponse
	(*CMsgClientToGCPrivateLobbyInviteUser)(nil),                       // 124: artifact.CMsgClientToGCPrivateLobbyInviteUser
	(*CMsgClientToGCPrivateLobbyInviteUserResponse)(nil),               // 125: artifact.CMsgClientToGCPrivateLobbyInviteUserResponse
	(*CMsgClientToGCPrivateLobbyChallenge)(nil),                        // 126: artifact.CMsgClientToGCPrivateLobbyChallenge
	(*CMsgClientToGCPrivateLobbyChallengeResponse)(nil),                // 127: artifact.CMsgClientToGCPrivateLobbyChallengeResponse
	(*CMsgGCToClientPrivateLobbyEvent)(nil),                            // 128: artifact.CMsgGCToClientPrivateLobbyEvent
	(*CMsgClientToGCPrivateLobbyClientVersion)(nil),                    // 129: artifact.CMsgClientToGCPrivateLobbyClientVersion
	(*CMsgClientToGCPrivateLobbyJoinChatRoom)(nil),                     // 130: artifact.CMsgClientToGCPrivateLobbyJoinChatRoom
	(*CMsgClientToGCPrivateLobbyJoinChatRoomResponse)(nil),             // 131: artifact.CMsgClientToGCPrivateLobbyJoinChatRoomResponse
	(*CMsgClientToGCMatchSignout)(nil),                                 // 132: artifact.CMsgClientToGCMatchSignout
	(*CMsgGCToClientSDRTicket)(nil),                                    // 133: artifact.CMsgGCToClientSDRTicket
	(*CMsgClientToGCReplacementSDRTicket)(nil),                         // 134: artifact.CMsgClientToGCReplacementSDRTicket
	(*CMsgClientToGCInitialGrantAck)(nil),                              // 135: artifact.CMsgClientToGCInitialGrantAck
	(*CMsgClientToGCRecycleCards)(nil),                                 // 136: artifact.CMsgClientToGCRecycleCards
	(*CMsgClientToGCRecycleCardsResponse)(nil),                         // 137: artifact.CMsgClientToGCRecycleCardsResponse
	(*CMsgClientToGCSetPlayerBadge)(nil),                               // 138: artifact.CMsgClientToGCSetPlayerBadge
	(*CMsgClientToGCReplacementSDRTicketResponse)(nil),                 // 139: artifact.CMsgClientToGCReplacementSDRTicketResponse
	(*CMsgClientToGCTourneyGetInfo)(nil),                               // 140: artifact.CMsgClientToGCTourneyGetInfo
	(*CMsgClientToGCTourneyGetInfoResponse)(nil),                       // 141: artifact.CMsgClientToGCTourneyGetInfoResponse
	(*CMsgClientToGCTourneyUnsubscribe)(nil),                           // 142: artifact.CMsgClientToGCTourneyUnsubscribe
	(*CMsgGCToClientTourneyUpdated)(nil),                               // 143: artifact.CMsgGCToClientTourneyUpdated
	(*CMsgGCToClientTourneySeriesMatchReady)(nil),                      // 144: artifact.CMsgGCToClientTourneySeriesMatchReady
	(*CMsgGCToClientTourneySeriesMatchNotReady)(nil),                   // 145: artifact.CMsgGCToClientTourneySeriesMatchNotReady
	(*CMsgCreateTourneyPhase)(nil),                                     // 146: artifact.CMsgCreateTourneyPhase
	(*CMsgClientToGCCreateTourney)(nil),                                // 147: artifact.CMsgClientToGCCreateTourney
	(*CMsgClientToGCCreateTourneyResponse)(nil),                        // 148: artifact.CMsgClientToGCCreateTourneyResponse
	(*CMsgClientToGCTourneyAcceptInvite)(nil),                          // 149: artifact.CMsgClientToGCTourneyAcceptInvite
	(*CMsgClientToGCTourneyAcceptInviteResponse)(nil),                  // 150: artifact.CMsgClientToGCTourneyAcceptInviteResponse
	(*CMsgClientToGCTourneyRejectInvite)(nil),                          // 151: artifact.CMsgClientToGCTourneyRejectInvite
	(*CMsgClientToGCTourneyRejectInviteResponse)(nil),                  // 152: artifact.CMsgClientToGCTourneyRejectInviteResponse
	(*CMsgClientToGCTourneyRevokeInvite)(nil),                          // 153: artifact.CMsgClientToGCTourneyRevokeInvite
	(*CMsgClientToGCTourneyRevokeInviteResponse)(nil),                  // 154: artifact.CMsgClientToGCTourneyRevokeInviteResponse
	(*CMsgClientToGCTourneyAdminSwitchStage)(nil),                      // 155: artifact.CMsgClientToGCTourneyAdminSwitchStage
	(*CMsgClientToGCTourneyAdminSwitchStageResponse)(nil),              // 156: artifact.CMsgClientToGCTourneyAdminSwitchStageResponse
	(*CMsgClientToGCTourneyAdminKick)(nil),                             // 157: artifact.CMsgClientToGCTourneyAdminKick
	(*CMsgClientToGCTourneyAdminKickResponse)(nil),                     // 158: artifact.CMsgClientToGCTourneyAdminKickResponse
	(*CMsgClientToGCTourneyAdminGrantWin)(nil),                         // 159: artifact.CMsgClientToGCTourneyAdminGrantWin
	(*CMsgClientToGCTourneyAdminGrantWinResponse)(nil),                 // 160: artifact.CMsgClientToGCTourneyAdminGrantWinResponse
	(*CMsgClientToGCTourneyAdminChangeRights)(nil),                     // 161: artifact.CMsgClientToGCTourneyAdminChangeRights
	(*CMsgClientToGCTourneyAdminChangeRightsResponse)(nil),             // 162: artifact.CMsgClientToGCTourneyAdminChangeRightsResponse
	(*CMsgClientToGCTourneyRegisterDeck)(nil),                          // 163: artifact.CMsgClientToGCTourneyRegisterDeck
	(*CMsgClientToGCTourneyRegisterDeckResponse)(nil),                  // 164: artifact.CMsgClientToGCTourneyRegisterDeckResponse
	(*CMsgClientToGCTourneyUserLeave)(nil),                             // 165: artifact.CMsgClientToGCTourneyUserLeave
	(*CMsgClientToGCTourneyUserLeaveResponse)(nil),                     // 166: artifact.CMsgClientToGCTourneyUserLeaveResponse
	(*CMsgClientToGCTourneyRegisterSharedDeck)(nil),                    // 167: artifact.CMsgClientToGCTourneyRegisterSharedDeck
	(*CMsgClientToGCTourneyRegisterSharedDeckResponse)(nil),            // 168: artifact.CMsgClientToGCTourneyRegisterSharedDeckResponse
	(*CMsgClientToGCTourneyGetRegisteredDecks)(nil),                    // 169: artifact.CMsgClientToGCTourneyGetRegisteredDecks
	(*CMsgClientToGCTourneyGetRegisteredDecksResponse)(nil),            // 170: artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse
	(*CMsgClientToGCTourneyCreateOpenInvite)(nil),                      // 171: artifact.CMsgClientToGCTourneyCreateOpenInvite
	(*CMsgClientToGCTourneyCreateOpenInviteResponse)(nil),              // 172: artifact.CMsgClientToGCTourneyCreateOpenInviteResponse
	(*CMsgClientToGCTourneyRevokeOpenInvite)(nil),                      // 173: artifact.CMsgClientToGCTourneyRevokeOpenInvite
	(*CMsgClientToGCTourneyRevokeOpenInviteResponse)(nil),              // 174: artifact.CMsgClientToGCTourneyRevokeOpenInviteResponse
	(*CMsgClientToGCTourneyGetOpenInvites)(nil),                        // 175: artifact.CMsgClientToGCTourneyGetOpenInvites
	(*CMsgClientToGCTourneyGetOpenInvitesResponse)(nil),                // 176: artifact.CMsgClientToGCTourneyGetOpenInvitesResponse
	(*CMsgClientToGCTourneyAdminSwitchPhaseStage)(nil),                 // 177: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStage
	(*CMsgClientToGCTourneyAdminSwitchPhaseStageResponse)(nil),         // 178: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStageResponse
	(*CMsgClientToGCTourneyGetOverview)(nil),                           // 179: artifact.CMsgClientToGCTourneyGetOverview
	(*CMsgClientToGCTourneyGetOverviewResponse)(nil),                   // 180: artifact.CMsgClientToGCTourneyGetOverviewResponse
	(*CMsgClientToGCTourneySetStatus)(nil),                             // 181: artifact.CMsgClientToGCTourneySetStatus
	(*CMsgClientToGCTourneySetStatusResponse)(nil),                     // 182: artifact.CMsgClientToGCTourneySetStatusResponse
	(*CMsgClientToGCTourneyAddPhase)(nil),                              // 183: artifact.CMsgClientToGCTourneyAddPhase
	(*CMsgClientToGCTourneyAddPhaseResponse)(nil),                      // 184: artifact.CMsgClientToGCTourneyAddPhaseResponse
	(*CMsgClientToGCTourneyRemovePhase)(nil),                           // 185: artifact.CMsgClientToGCTourneyRemovePhase
	(*CMsgClientToGCTourneyRemovePhaseResponse)(nil),                   // 186: artifact.CMsgClientToGCTourneyRemovePhaseResponse
	(*CMsgClientToGCTourneySpectateMatch)(nil),                         // 187: artifact.CMsgClientToGCTourneySpectateMatch
	(*CMsgClientToGCTourneySpectateMatchResponse)(nil),                 // 188: artifact.CMsgClientToGCTourneySpectateMatchResponse
	(*CMsgClientToGCTourneyInviteList)(nil),                            // 189: artifact.CMsgClientToGCTourneyInviteList
	(*CMsgClientToGCTourneyInviteListResponse)(nil),                    // 190: artifact.CMsgClientToGCTourneyInviteListResponse
	(*CMsgClientToGCTourneyAdminSetSeedValues)(nil),                    // 191: artifact.CMsgClientToGCTourneyAdminSetSeedValues
	(*CMsgClientToGCTourneyAdminSetSeedValuesResponse)(nil),            // 192: artifact.CMsgClientToGCTourneyAdminSetSeedValuesResponse
	(*CMsgClientToGCTourneyEditStageSwapPlayers)(nil),                  // 193: artifact.CMsgClientToGCTourneyEditStageSwapPlayers
	(*CMsgClientToGCTourneyEditStageSwapPlayersResponse)(nil),          // 194: artifact.CMsgClientToGCTourneyEditStageSwapPlayersResponse
	(*CMsgClientToGCTourneyGetLimitedReplay)(nil),                      // 195: artifact.CMsgClientToGCTourneyGetLimitedReplay
	(*CMsgClientToGCTourneyGetLimitedReplayResponse)(nil),              // 196: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse
	(*CMsgClientToGCTourneyRejoinChatRoom)(nil),                        // 197: artifact.CMsgClientToGCTourneyRejoinChatRoom
	(*CMsgClientToGCTourneyRejoinChatRoomResponse)(nil),                // 198: artifact.CMsgClientToGCTourneyRejoinChatRoomResponse
	(*CMsgGCToClientTourneyMembersMatchmaking)(nil),                    // 199: artifact.CMsgGCToClientTourneyMembersMatchmaking
	(*CMsgClientToGCTourneyPayEntryFee)(nil),                           // 200: artifact.CMsgClientToGCTourneyPayEntryFee
	(*CMsgClientToGCTourneyPayEntryFeeResponse)(nil),                   // 201: artifact.CMsgClientToGCTourneyPayEntryFeeResponse
	(*CMsgClientToGCTourneyPlayerAbandon)(nil),                         // 202: artifact.CMsgClientToGCTourneyPlayerAbandon
	(*CMsgClientToGCTourneyPlayerAbandonResponse)(nil),                 // 203: artifact.CMsgClientToGCTourneyPlayerAbandonResponse
	(*CMsgClientToGCTourneyChangeValue)(nil),                           // 204: artifact.CMsgClientToGCTourneyChangeValue
	(*CMsgClientToGCTourneyChangeValueResponse)(nil),                   // 205: artifact.CMsgClientToGCTourneyChangeValueResponse
	(*CMsgClientToGCTourneyJoinOpenTourney)(nil),                       // 206: artifact.CMsgClientToGCTourneyJoinOpenTourney
	(*CMsgClientToGCTourneyJoinOpenTourneyResponse)(nil),               // 207: artifact.CMsgClientToGCTourneyJoinOpenTourneyResponse
	(*CMsgClientToGCOpenPackItemResponse_OpenedItem)(nil),              // 208: artifact.CMsgClientToGCOpenPackItemResponse.OpenedItem
	(*CMsgClientToGCGetMatchHistoryResponse_MatchDetails)(nil),         // 209: artifact.CMsgClientToGCGetMatchHistoryResponse.MatchDetails
	(*CMsgClientToGCAbandonGauntletResponse_RewardItem)(nil),           // 210: artifact.CMsgClientToGCAbandonGauntletResponse.RewardItem
	(*CMsgClientToGCGetGauntletMatchesResponse_Match)(nil),             // 211: artifact.CMsgClientToGCGetGauntletMatchesResponse.Match
	(*CMsgClientToGCRecycleCardsResponse_GrantedItem)(nil),             // 212: artifact.CMsgClientToGCRecycleCardsResponse.GrantedItem
	(*CMsgCreateTourneyPhase_DeckSettings)(nil),                        // 213: artifact.CMsgCreateTourneyPhase.DeckSettings
	(*CMsgCreateTourneyPhase_Swiss)(nil),                               // 214: artifact.CMsgCreateTourneyPhase.Swiss
	(*CMsgCreateTourneyPhase_Bracket)(nil),                             // 215: artifact.CMsgCreateTourneyPhase.Bracket
	(*CMsgCreateTourneyPhase_FreeForAll)(nil),                          // 216: artifact.CMsgCreateTourneyPhase.FreeForAll
	(*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite)(nil),     // 217: artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.OpenInvite
	(*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed)(nil),         // 218: artifact.CMsgClientToGCTourneyAdminSetSeedValues.PlayerSeed
	(*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage)(nil), // 219: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.LimitedStage
	(*CMsgStartFindingMatchInfo)(nil),                                  // 220: artifact.CMsgStartFindingMatchInfo
	(*CMsgRegionPingTimesClient)(nil),                                  // 221: artifact.CMsgRegionPingTimesClient
	(*CMsgDeckValidator)(nil),                                          // 222: artifact.CMsgDeckValidator
	(*CExtraMsgBlock)(nil),                                             // 223: artifact.CExtraMsgBlock
	(EDCGMatchMode)(0),                                                 // 224: artifact.EDCGMatchMode
	(*CMsgGauntletConfig)(nil),                                         // 225: artifact.CMsgGauntletConfig
	(*CMsgLimitedFormat)(nil),                                          // 226: artifact.CMsgLimitedFormat
	(*CMsgMatchData)(nil),                                              // 227: artifact.CMsgMatchData
	(*CDCGTourney)(nil),                                                // 228: artifact.CDCGTourney
	(CDCGTourney_EFormat)(0),                                           // 229: artifact.CDCGTourney.EFormat
	(CDCGTourney_EStage)(0),                                            // 230: artifact.CDCGTourney.EStage
	(*CDCGTourney_PlayerDeck)(nil),                                     // 231: artifact.CDCGTourney.PlayerDeck
	(CDCGTourney_EPhaseStage)(0),                                       // 232: artifact.CDCGTourney.EPhaseStage
}
var file_artifact_dcg_gcmessages_client_proto_depIdxs = []int32{
	220, // 0: artifact.CMsgClientToGCStartMatchmaking.match_info:type_name -> artifact.CMsgStartFindingMatchInfo
	221, // 1: artifact.CMsgClientToGCStartMatchmaking.ping_times:type_name -> artifact.CMsgRegionPingTimesClient
	3,   // 2: artifact.CMsgClientToGCStartMatchmakingResponse.result:type_name -> artifact.CMsgClientToGCStartMatchmakingResponse.EResultCode
	4,   // 3: artifact.CMsgGCToClientMatchmakingStopped.reason:type_name -> artifact.CMsgGCToClientMatchmakingStopped.EReason
	222, // 4: artifact.CMsgGCToClientDefaultValidator.validator:type_name -> artifact.CMsgDeckValidator
	223, // 5: artifact.CMsgClientWelcomeDCG.extra_messages:type_name -> artifact.CExtraMsgBlock
	1,   // 6: artifact.CMsgClientToGCJoinChatChannel.room_type:type_name -> artifact.EChatRoomType
	5,   // 7: artifact.CMsgClientToGCJoinChatChannelResponse.result:type_name -> artifact.CMsgClientToGCJoinChatChannelResponse.EResult
	223, // 8: artifact.CMsgGCToClientChatMessage.additional_data:type_name -> artifact.CExtraMsgBlock
	1,   // 9: artifact.CMsgClientToGCLeaveChatChannelByKey.room_type:type_name -> artifact.EChatRoomType
	6,   // 10: artifact.CMsgClientToGCOpenPackItemResponse.response:type_name -> artifact.CMsgClientToGCOpenPackItemResponse.EResponse
	208, // 11: artifact.CMsgClientToGCOpenPackItemResponse.items:type_name -> artifact.CMsgClientToGCOpenPackItemResponse.OpenedItem
	8,   // 12: artifact.CMsgClientToGCSpectateUserResponse.result:type_name -> artifact.CMsgClientToGCSpectateUserResponse.EResult
	209, // 13: artifact.CMsgClientToGCGetMatchHistoryResponse.match_details:type_name -> artifact.CMsgClientToGCGetMatchHistoryResponse.MatchDetails
	224, // 14: artifact.CMsgClientToGCGetMatchDetailsResponse.match_mode:type_name -> artifact.EDCGMatchMode
	9,   // 15: artifact.CMsgClientToGCGetMatchDetailsResponse.result:type_name -> artifact.CMsgClientToGCGetMatchDetailsResponse.EResult
	10,  // 16: artifact.CMsgClientToGCJoinGauntletResponse.result:type_name -> artifact.CMsgClientToGCJoinGauntletResponse.EResponse
	11,  // 17: artifact.CMsgClientToGCAbandonGauntletResponse.result:type_name -> artifact.CMsgClientToGCAbandonGauntletResponse.EResponse
	210, // 18: artifact.CMsgClientToGCAbandonGauntletResponse.reward_items:type_name -> artifact.CMsgClientToGCAbandonGauntletResponse.RewardItem
	12,  // 19: artifact.CMsgClientToGCAIGauntletResultResponse.result:type_name -> artifact.CMsgClientToGCAIGauntletResultResponse.EResponse
	225, // 20: artifact.CMsgGCToClientAvailableGauntlets.available_gauntlets:type_name -> artifact.CMsgGauntletConfig
	211, // 21: artifact.CMsgClientToGCGetGauntletMatchesResponse.matches:type_name -> artifact.CMsgClientToGCGetGauntletMatchesResponse.Match
	13,  // 22: artifact.CMsgClientToGCRegisterGauntletDeckResponse.result:type_name -> artifact.CMsgClientToGCRegisterGauntletDeckResponse.EResponse
	14,  // 23: artifact.CMsgClientToGCLimitedGrantResponse.result:type_name -> artifact.CMsgClientToGCLimitedGrantResponse.EResponse
	15,  // 24: artifact.CMsgClientToGCLimitedGrantChoiceResponse.result:type_name -> artifact.CMsgClientToGCLimitedGrantChoiceResponse.EResponse
	226, // 25: artifact.CMsgClientToGCLimitedGetFormatResponse.format_config:type_name -> artifact.CMsgLimitedFormat
	221, // 26: artifact.CMsgClientToGCPrivateLobbyCreate.ping_times:type_name -> artifact.CMsgRegionPingTimesClient
	16,  // 27: artifact.CMsgClientToGCPrivateLobbyCreateResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyCreateResponse.EResponse
	17,  // 28: artifact.CMsgClientToGCPrivateLobbyLeaveResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyLeaveResponse.EResponse
	221, // 29: artifact.CMsgClientToGCPrivateLobbyJoin.ping_times:type_name -> artifact.CMsgRegionPingTimesClient
	18,  // 30: artifact.CMsgClientToGCPrivateLobbyJoinResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyJoinResponse.EResponse
	19,  // 31: artifact.CMsgClientToGCPrivateLobbyAction.action_id:type_name -> artifact.CMsgClientToGCPrivateLobbyAction.EAction
	20,  // 32: artifact.CMsgClientToGCPrivateLobbyActionResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyActionResponse.EResponse
	21,  // 33: artifact.CMsgClientToGCPrivateLobbyStartMatchResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyStartMatchResponse.EResponse
	22,  // 34: artifact.CMsgClientToGCPrivateLobbyInviteUserResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyInviteUserResponse.EResponse
	221, // 35: artifact.CMsgClientToGCPrivateLobbyChallenge.ping_times:type_name -> artifact.CMsgRegionPingTimesClient
	23,  // 36: artifact.CMsgClientToGCPrivateLobbyChallengeResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyChallengeResponse.EResponse
	24,  // 37: artifact.CMsgGCToClientPrivateLobbyEvent.event:type_name -> artifact.CMsgGCToClientPrivateLobbyEvent.EEvent
	25,  // 38: artifact.CMsgClientToGCPrivateLobbyJoinChatRoomResponse.result:type_name -> artifact.CMsgClientToGCPrivateLobbyJoinChatRoomResponse.EResponse
	224, // 39: artifact.CMsgClientToGCMatchSignout.match_mode:type_name -> artifact.EDCGMatchMode
	227, // 40: artifact.CMsgClientToGCMatchSignout.match_data:type_name -> artifact.CMsgMatchData
	223, // 41: artifact.CMsgClientToGCMatchSignout.additional_data:type_name -> artifact.CExtraMsgBlock
	26,  // 42: artifact.CMsgClientToGCRecycleCardsResponse.result:type_name -> artifact.CMsgClientToGCRecycleCardsResponse.EResponse
	212, // 43: artifact.CMsgClientToGCRecycleCardsResponse.granted_items:type_name -> artifact.CMsgClientToGCRecycleCardsResponse.GrantedItem
	27,  // 44: artifact.CMsgClientToGCTourneyGetInfoResponse.result:type_name -> artifact.CMsgClientToGCTourneyGetInfoResponse.EResponse
	228, // 45: artifact.CMsgClientToGCTourneyGetInfoResponse.tourney:type_name -> artifact.CDCGTourney
	228, // 46: artifact.CMsgGCToClientTourneyUpdated.tourney:type_name -> artifact.CDCGTourney
	229, // 47: artifact.CMsgCreateTourneyPhase.format:type_name -> artifact.CDCGTourney.EFormat
	213, // 48: artifact.CMsgCreateTourneyPhase.deck_settings:type_name -> artifact.CMsgCreateTourneyPhase.DeckSettings
	215, // 49: artifact.CMsgCreateTourneyPhase.bracket:type_name -> artifact.CMsgCreateTourneyPhase.Bracket
	214, // 50: artifact.CMsgCreateTourneyPhase.swiss:type_name -> artifact.CMsgCreateTourneyPhase.Swiss
	216, // 51: artifact.CMsgCreateTourneyPhase.free_for_all:type_name -> artifact.CMsgCreateTourneyPhase.FreeForAll
	146, // 52: artifact.CMsgClientToGCCreateTourney.phases:type_name -> artifact.CMsgCreateTourneyPhase
	31,  // 53: artifact.CMsgClientToGCCreateTourney.privacy_mode:type_name -> artifact.CMsgClientToGCCreateTourney.EPrivacy
	32,  // 54: artifact.CMsgClientToGCCreateTourneyResponse.result:type_name -> artifact.CMsgClientToGCCreateTourneyResponse.EResponse
	33,  // 55: artifact.CMsgClientToGCTourneyAcceptInviteResponse.result:type_name -> artifact.CMsgClientToGCTourneyAcceptInviteResponse.EResponse
	34,  // 56: artifact.CMsgClientToGCTourneyRejectInviteResponse.result:type_name -> artifact.CMsgClientToGCTourneyRejectInviteResponse.EResponse
	35,  // 57: artifact.CMsgClientToGCTourneyRevokeInviteResponse.result:type_name -> artifact.CMsgClientToGCTourneyRevokeInviteResponse.EResponse
	230, // 58: artifact.CMsgClientToGCTourneyAdminSwitchStage.transition_from:type_name -> artifact.CDCGTourney.EStage
	230, // 59: artifact.CMsgClientToGCTourneyAdminSwitchStage.transition_to:type_name -> artifact.CDCGTourney.EStage
	36,  // 60: artifact.CMsgClientToGCTourneyAdminSwitchStageResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminSwitchStageResponse.EResponse
	37,  // 61: artifact.CMsgClientToGCTourneyAdminKickResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminKickResponse.EResponse
	38,  // 62: artifact.CMsgClientToGCTourneyAdminGrantWinResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminGrantWinResponse.EResponse
	39,  // 63: artifact.CMsgClientToGCTourneyAdminChangeRightsResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminChangeRightsResponse.EResponse
	40,  // 64: artifact.CMsgClientToGCTourneyRegisterDeckResponse.result:type_name -> artifact.CMsgClientToGCTourneyRegisterDeckResponse.EResponse
	41,  // 65: artifact.CMsgClientToGCTourneyUserLeaveResponse.result:type_name -> artifact.CMsgClientToGCTourneyUserLeaveResponse.EResponse
	42,  // 66: artifact.CMsgClientToGCTourneyRegisterSharedDeckResponse.result:type_name -> artifact.CMsgClientToGCTourneyRegisterSharedDeckResponse.EResponse
	43,  // 67: artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse.result:type_name -> artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse.EResponse
	231, // 68: artifact.CMsgClientToGCTourneyGetRegisteredDecksResponse.decks:type_name -> artifact.CDCGTourney.PlayerDeck
	44,  // 69: artifact.CMsgClientToGCTourneyCreateOpenInviteResponse.result:type_name -> artifact.CMsgClientToGCTourneyCreateOpenInviteResponse.EResponse
	45,  // 70: artifact.CMsgClientToGCTourneyRevokeOpenInviteResponse.result:type_name -> artifact.CMsgClientToGCTourneyRevokeOpenInviteResponse.EResponse
	46,  // 71: artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.result:type_name -> artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.EResponse
	217, // 72: artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.open_invites:type_name -> artifact.CMsgClientToGCTourneyGetOpenInvitesResponse.OpenInvite
	232, // 73: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStage.transition_from:type_name -> artifact.CDCGTourney.EPhaseStage
	232, // 74: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStage.transition_to:type_name -> artifact.CDCGTourney.EPhaseStage
	47,  // 75: artifact.CMsgClientToGCTourneyAdminSwitchPhaseStageResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminSwitchPhaseStageResponse.EResponse
	48,  // 76: artifact.CMsgClientToGCTourneyGetOverviewResponse.result:type_name -> artifact.CMsgClientToGCTourneyGetOverviewResponse.EResponse
	49,  // 77: artifact.CMsgClientToGCTourneySetStatusResponse.result:type_name -> artifact.CMsgClientToGCTourneySetStatusResponse.EResponse
	146, // 78: artifact.CMsgClientToGCTourneyAddPhase.phase:type_name -> artifact.CMsgCreateTourneyPhase
	50,  // 79: artifact.CMsgClientToGCTourneyAddPhaseResponse.result:type_name -> artifact.CMsgClientToGCTourneyAddPhaseResponse.EResponse
	51,  // 80: artifact.CMsgClientToGCTourneyRemovePhaseResponse.result:type_name -> artifact.CMsgClientToGCTourneyRemovePhaseResponse.EResponse
	52,  // 81: artifact.CMsgClientToGCTourneySpectateMatchResponse.result:type_name -> artifact.CMsgClientToGCTourneySpectateMatchResponse.EResponse
	54,  // 82: artifact.CMsgClientToGCTourneyInviteListResponse.result:type_name -> artifact.CMsgClientToGCTourneyInviteListResponse.EResponse
	218, // 83: artifact.CMsgClientToGCTourneyAdminSetSeedValues.player_seeds:type_name -> artifact.CMsgClientToGCTourneyAdminSetSeedValues.PlayerSeed
	55,  // 84: artifact.CMsgClientToGCTourneyAdminSetSeedValuesResponse.result:type_name -> artifact.CMsgClientToGCTourneyAdminSetSeedValuesResponse.EResponse
	56,  // 85: artifact.CMsgClientToGCTourneyEditStageSwapPlayersResponse.result:type_name -> artifact.CMsgClientToGCTourneyEditStageSwapPlayersResponse.EResponse
	57,  // 86: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.result:type_name -> artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.EResponse
	219, // 87: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.stages:type_name -> artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.LimitedStage
	226, // 88: artifact.CMsgClientToGCTourneyGetLimitedReplayResponse.format:type_name -> artifact.CMsgLimitedFormat
	58,  // 89: artifact.CMsgClientToGCTourneyRejoinChatRoomResponse.result:type_name -> artifact.CMsgClientToGCTourneyRejoinChatRoomResponse.EResponse
	59,  // 90: artifact.CMsgClientToGCTourneyPayEntryFeeResponse.result:type_name -> artifact.CMsgClientToGCTourneyPayEntryFeeResponse.EResponse
	60,  // 91: artifact.CMsgClientToGCTourneyPlayerAbandonResponse.result:type_name -> artifact.CMsgClientToGCTourneyPlayerAbandonResponse.EResponse
	61,  // 92: artifact.CMsgClientToGCTourneyChangeValue.value_type:type_name -> artifact.CMsgClientToGCTourneyChangeValue.EValueType
	62,  // 93: artifact.CMsgClientToGCTourneyChangeValueResponse.result:type_name -> artifact.CMsgClientToGCTourneyChangeValueResponse.EResponse
	63,  // 94: artifact.CMsgClientToGCTourneyJoinOpenTourneyResponse.result:type_name -> artifact.CMsgClientToGCTourneyJoinOpenTourneyResponse.EResponse
	7,   // 95: artifact.CMsgClientToGCOpenPackItemResponse.OpenedItem.slot_type:type_name -> artifact.CMsgClientToGCOpenPackItemResponse.ESlotType
	224, // 96: artifact.CMsgClientToGCGetMatchHistoryResponse.MatchDetails.match_mode:type_name -> artifact.EDCGMatchMode
	30,  // 97: artifact.CMsgCreateTourneyPhase.DeckSettings.deck_mode:type_name -> artifact.CMsgCreateTourneyPhase.EDeckMode
	28,  // 98: artifact.CMsgCreateTourneyPhase.Swiss.swiss_matches:type_name -> artifact.CMsgCreateTourneyPhase.ESwissMatches
	29,  // 99: artifact.CMsgCreateTourneyPhase.Swiss.swiss_scoring:type_name -> artifact.CMsgCreateTourneyPhase.ESwissScoring
	100, // [100:100] is the sub-list for method output_type
	100, // [100:100] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_artifact_dcg_gcmessages_client_proto_init() }
func file_artifact_dcg_gcmessages_client_proto_init() {
	if File_artifact_dcg_gcmessages_client_proto != nil {
		return
	}
	file_artifact_dcg_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_artifact_dcg_gcmessages_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStartMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStartMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStopMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStopMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientMatchmakingStopped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientDefaultValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWelcomeDCG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCJoinChatChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCJoinChatChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientChatChannelJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSendChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSendChatMessageRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatMessageAdditionalData_DiceRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientUserJoinedChatChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveChatChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveChatChannelByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCIsInMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCIsInMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCOpenPackItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCOpenPackItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSpectateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSpectateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetAIVsAIMatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetAIVsAIMatchConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetAIVsAIMatchComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientGlobalPhantomLeagues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCJoinGauntlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCJoinGauntletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAbandonGauntlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAbandonGauntletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAIGauntletResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAIGauntletResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientAvailableGauntlets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetGauntletMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetGauntletMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRegisterGauntletDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRegisterGauntletDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGrantChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGrantChoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGetFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLimitedGetFormatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyLeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyJoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyStartMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyStartMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyInviteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyInviteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientPrivateLobbyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyJoinChatRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPrivateLobbyJoinChatRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCMatchSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientSDRTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCReplacementSDRTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCInitialGrantAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRecycleCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRecycleCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetPlayerBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCReplacementSDRTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyUnsubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTourneyUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTourneySeriesMatchReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTourneySeriesMatchNotReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateTourneyPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCreateTourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCreateTourneyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAcceptInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRejectInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRejectInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRevokeInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRevokeInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSwitchStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSwitchStageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminKickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminGrantWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminGrantWinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminChangeRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminChangeRightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRegisterDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRegisterDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyUserLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyUserLeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRegisterSharedDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRegisterSharedDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetRegisteredDecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetRegisteredDecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyCreateOpenInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyCreateOpenInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRevokeOpenInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRevokeOpenInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetOpenInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetOpenInvitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSwitchPhaseStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSwitchPhaseStageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneySetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneySetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAddPhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAddPhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRemovePhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRemovePhaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneySpectateMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneySpectateMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyInviteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyInviteListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSetSeedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSetSeedValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyEditStageSwapPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyEditStageSwapPlayersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetLimitedReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetLimitedReplayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRejoinChatRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyRejoinChatRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientTourneyMembersMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyPayEntryFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyPayEntryFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyPlayerAbandon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyPlayerAbandonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyChangeValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyJoinOpenTourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyJoinOpenTourneyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCOpenPackItemResponse_OpenedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistoryResponse_MatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAbandonGauntletResponse_RewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetGauntletMatchesResponse_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRecycleCardsResponse_GrantedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateTourneyPhase_DeckSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateTourneyPhase_Swiss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateTourneyPhase_Bracket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCreateTourneyPhase_FreeForAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetOpenInvitesResponse_OpenInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyAdminSetSeedValues_PlayerSeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_client_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCTourneyGetLimitedReplayResponse_LimitedStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_dcg_gcmessages_client_proto_rawDesc,
			NumEnums:      64,
			NumMessages:   156,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_dcg_gcmessages_client_proto_goTypes,
		DependencyIndexes: file_artifact_dcg_gcmessages_client_proto_depIdxs,
		EnumInfos:         file_artifact_dcg_gcmessages_client_proto_enumTypes,
		MessageInfos:      file_artifact_dcg_gcmessages_client_proto_msgTypes,
	}.Build()
	File_artifact_dcg_gcmessages_client_proto = out.File
	file_artifact_dcg_gcmessages_client_proto_rawDesc = nil
	file_artifact_dcg_gcmessages_client_proto_goTypes = nil
	file_artifact_dcg_gcmessages_client_proto_depIdxs = nil
}
