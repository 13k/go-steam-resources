// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: artifact/dcg_gcmessages_server.proto

package artifact

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDCGServerMessages int32

const (
	EGCDCGServerMessages_k_EMsgServerToGCMatchSignoutPermission         EGCDCGServerMessages = 10012
	EGCDCGServerMessages_k_EMsgServerToGCMatchSignoutPermissionResponse EGCDCGServerMessages = 10013
	EGCDCGServerMessages_k_EMsgServerToGCMatchSignout                   EGCDCGServerMessages = 10014
	EGCDCGServerMessages_k_EMsgServerToGCMatchSignoutResponse           EGCDCGServerMessages = 10015
	EGCDCGServerMessages_k_EMsgServerToGCIdlePing                       EGCDCGServerMessages = 10018
	EGCDCGServerMessages_k_EMsgGCToServerRequestPing                    EGCDCGServerMessages = 10019
	EGCDCGServerMessages_k_EMsgGCToServerAllocateForMatch               EGCDCGServerMessages = 10021
	EGCDCGServerMessages_k_EMsgGCToServerAllocateForMatchResponse       EGCDCGServerMessages = 10022
	EGCDCGServerMessages_k_EMsgServerToGCEnterMatchmaking               EGCDCGServerMessages = 10023
	EGCDCGServerMessages_k_EMsgGCToServerCancelAllocateForMatch         EGCDCGServerMessages = 10024
	EGCDCGServerMessages_k_EMsgServerToGCUpdateLobbyServerState         EGCDCGServerMessages = 10025
	EGCDCGServerMessages_k_EMsgServerToGCAbandonMatch                   EGCDCGServerMessages = 10026
	EGCDCGServerMessages_k_EMsgServerToGCAbandonMatchResponse           EGCDCGServerMessages = 10027
	EGCDCGServerMessages_k_EMsgServerToGCTestConnection                 EGCDCGServerMessages = 10028
	EGCDCGServerMessages_k_EMsgServerToGCTestConnectionResponse         EGCDCGServerMessages = 10029
	EGCDCGServerMessages_k_EMsgGCToServerRunTests                       EGCDCGServerMessages = 10031
	EGCDCGServerMessages_k_EMsgGCToServerRunTestsResponse               EGCDCGServerMessages = 10032
	EGCDCGServerMessages_k_EMsgServerToGCTestResults                    EGCDCGServerMessages = 10033
	EGCDCGServerMessages_k_EMsgGCToServerAddTourneySpectator            EGCDCGServerMessages = 10034
	EGCDCGServerMessages_k_EMsgGCToServerAddTourneySpectatorResponse    EGCDCGServerMessages = 10035
)

// Enum value maps for EGCDCGServerMessages.
var (
	EGCDCGServerMessages_name = map[int32]string{
		10012: "k_EMsgServerToGCMatchSignoutPermission",
		10013: "k_EMsgServerToGCMatchSignoutPermissionResponse",
		10014: "k_EMsgServerToGCMatchSignout",
		10015: "k_EMsgServerToGCMatchSignoutResponse",
		10018: "k_EMsgServerToGCIdlePing",
		10019: "k_EMsgGCToServerRequestPing",
		10021: "k_EMsgGCToServerAllocateForMatch",
		10022: "k_EMsgGCToServerAllocateForMatchResponse",
		10023: "k_EMsgServerToGCEnterMatchmaking",
		10024: "k_EMsgGCToServerCancelAllocateForMatch",
		10025: "k_EMsgServerToGCUpdateLobbyServerState",
		10026: "k_EMsgServerToGCAbandonMatch",
		10027: "k_EMsgServerToGCAbandonMatchResponse",
		10028: "k_EMsgServerToGCTestConnection",
		10029: "k_EMsgServerToGCTestConnectionResponse",
		10031: "k_EMsgGCToServerRunTests",
		10032: "k_EMsgGCToServerRunTestsResponse",
		10033: "k_EMsgServerToGCTestResults",
		10034: "k_EMsgGCToServerAddTourneySpectator",
		10035: "k_EMsgGCToServerAddTourneySpectatorResponse",
	}
	EGCDCGServerMessages_value = map[string]int32{
		"k_EMsgServerToGCMatchSignoutPermission":         10012,
		"k_EMsgServerToGCMatchSignoutPermissionResponse": 10013,
		"k_EMsgServerToGCMatchSignout":                   10014,
		"k_EMsgServerToGCMatchSignoutResponse":           10015,
		"k_EMsgServerToGCIdlePing":                       10018,
		"k_EMsgGCToServerRequestPing":                    10019,
		"k_EMsgGCToServerAllocateForMatch":               10021,
		"k_EMsgGCToServerAllocateForMatchResponse":       10022,
		"k_EMsgServerToGCEnterMatchmaking":               10023,
		"k_EMsgGCToServerCancelAllocateForMatch":         10024,
		"k_EMsgServerToGCUpdateLobbyServerState":         10025,
		"k_EMsgServerToGCAbandonMatch":                   10026,
		"k_EMsgServerToGCAbandonMatchResponse":           10027,
		"k_EMsgServerToGCTestConnection":                 10028,
		"k_EMsgServerToGCTestConnectionResponse":         10029,
		"k_EMsgGCToServerRunTests":                       10031,
		"k_EMsgGCToServerRunTestsResponse":               10032,
		"k_EMsgServerToGCTestResults":                    10033,
		"k_EMsgGCToServerAddTourneySpectator":            10034,
		"k_EMsgGCToServerAddTourneySpectatorResponse":    10035,
	}
)

func (x EGCDCGServerMessages) Enum() *EGCDCGServerMessages {
	p := new(EGCDCGServerMessages)
	*p = x
	return p
}

func (x EGCDCGServerMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDCGServerMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[0].Descriptor()
}

func (EGCDCGServerMessages) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[0]
}

func (x EGCDCGServerMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDCGServerMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDCGServerMessages(num)
	return nil
}

// Deprecated: Use EGCDCGServerMessages.Descriptor instead.
func (EGCDCGServerMessages) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

type EGCServerLobbyData int32

const (
	EGCServerLobbyData_k_EServerLobbyData_DeckValidator    EGCServerLobbyData = 1
	EGCServerLobbyData_k_EServerLobbyData_DraftCards       EGCServerLobbyData = 3
	EGCServerLobbyData_k_EServerLobbyData_PlayerDeck       EGCServerLobbyData = 4
	EGCServerLobbyData_k_EServerLobbyData_PlayerMMR        EGCServerLobbyData = 5
	EGCServerLobbyData_k_EServerLobbyData_CardAchievements EGCServerLobbyData = 6
	EGCServerLobbyData_k_EServerLobbyData_GauntletInfo     EGCServerLobbyData = 7
	EGCServerLobbyData_k_EServerLobbyData_PlayerInfo       EGCServerLobbyData = 8
)

// Enum value maps for EGCServerLobbyData.
var (
	EGCServerLobbyData_name = map[int32]string{
		1: "k_EServerLobbyData_DeckValidator",
		3: "k_EServerLobbyData_DraftCards",
		4: "k_EServerLobbyData_PlayerDeck",
		5: "k_EServerLobbyData_PlayerMMR",
		6: "k_EServerLobbyData_CardAchievements",
		7: "k_EServerLobbyData_GauntletInfo",
		8: "k_EServerLobbyData_PlayerInfo",
	}
	EGCServerLobbyData_value = map[string]int32{
		"k_EServerLobbyData_DeckValidator":    1,
		"k_EServerLobbyData_DraftCards":       3,
		"k_EServerLobbyData_PlayerDeck":       4,
		"k_EServerLobbyData_PlayerMMR":        5,
		"k_EServerLobbyData_CardAchievements": 6,
		"k_EServerLobbyData_GauntletInfo":     7,
		"k_EServerLobbyData_PlayerInfo":       8,
	}
)

func (x EGCServerLobbyData) Enum() *EGCServerLobbyData {
	p := new(EGCServerLobbyData)
	*p = x
	return p
}

func (x EGCServerLobbyData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerLobbyData) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[1].Descriptor()
}

func (EGCServerLobbyData) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[1]
}

func (x EGCServerLobbyData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerLobbyData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerLobbyData(num)
	return nil
}

// Deprecated: Use EGCServerLobbyData.Descriptor instead.
func (EGCServerLobbyData) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

type EGCServerSignoutData int32

const (
	EGCServerSignoutData_k_EServerSignoutData_PlayerProgress   EGCServerSignoutData = 1
	EGCServerSignoutData_k_EServerSignoutData_PlayerDecks      EGCServerSignoutData = 2
	EGCServerSignoutData_k_EServerSignoutData_LobbyInfo        EGCServerSignoutData = 4
	EGCServerSignoutData_k_EServerSignoutData_GameOptions      EGCServerSignoutData = 9
	EGCServerSignoutData_k_EServerSignoutData_CardAchievements EGCServerSignoutData = 11
	EGCServerSignoutData_k_EServerSignoutData_PerformanceStats EGCServerSignoutData = 12
	EGCServerSignoutData_k_EServerSignoutData_Disconnections   EGCServerSignoutData = 13
	EGCServerSignoutData_k_EServerSignoutData_MatchChatStats   EGCServerSignoutData = 14
)

// Enum value maps for EGCServerSignoutData.
var (
	EGCServerSignoutData_name = map[int32]string{
		1:  "k_EServerSignoutData_PlayerProgress",
		2:  "k_EServerSignoutData_PlayerDecks",
		4:  "k_EServerSignoutData_LobbyInfo",
		9:  "k_EServerSignoutData_GameOptions",
		11: "k_EServerSignoutData_CardAchievements",
		12: "k_EServerSignoutData_PerformanceStats",
		13: "k_EServerSignoutData_Disconnections",
		14: "k_EServerSignoutData_MatchChatStats",
	}
	EGCServerSignoutData_value = map[string]int32{
		"k_EServerSignoutData_PlayerProgress":   1,
		"k_EServerSignoutData_PlayerDecks":      2,
		"k_EServerSignoutData_LobbyInfo":        4,
		"k_EServerSignoutData_GameOptions":      9,
		"k_EServerSignoutData_CardAchievements": 11,
		"k_EServerSignoutData_PerformanceStats": 12,
		"k_EServerSignoutData_Disconnections":   13,
		"k_EServerSignoutData_MatchChatStats":   14,
	}
)

func (x EGCServerSignoutData) Enum() *EGCServerSignoutData {
	p := new(EGCServerSignoutData)
	*p = x
	return p
}

func (x EGCServerSignoutData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerSignoutData) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[2].Descriptor()
}

func (EGCServerSignoutData) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[2]
}

func (x EGCServerSignoutData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerSignoutData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerSignoutData(num)
	return nil
}

// Deprecated: Use EGCServerSignoutData.Descriptor instead.
func (EGCServerSignoutData) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

type CMsgServerSignoutData_CardAchievements_EAchievementGrantType int32

const (
	CMsgServerSignoutData_CardAchievements_k_EAchievementGrant_Add CMsgServerSignoutData_CardAchievements_EAchievementGrantType = 0
	CMsgServerSignoutData_CardAchievements_k_EAchievementGrant_Max CMsgServerSignoutData_CardAchievements_EAchievementGrantType = 1
	CMsgServerSignoutData_CardAchievements_k_EAchievementGrant_Set CMsgServerSignoutData_CardAchievements_EAchievementGrantType = 2
)

// Enum value maps for CMsgServerSignoutData_CardAchievements_EAchievementGrantType.
var (
	CMsgServerSignoutData_CardAchievements_EAchievementGrantType_name = map[int32]string{
		0: "k_EAchievementGrant_Add",
		1: "k_EAchievementGrant_Max",
		2: "k_EAchievementGrant_Set",
	}
	CMsgServerSignoutData_CardAchievements_EAchievementGrantType_value = map[string]int32{
		"k_EAchievementGrant_Add": 0,
		"k_EAchievementGrant_Max": 1,
		"k_EAchievementGrant_Set": 2,
	}
)

func (x CMsgServerSignoutData_CardAchievements_EAchievementGrantType) Enum() *CMsgServerSignoutData_CardAchievements_EAchievementGrantType {
	p := new(CMsgServerSignoutData_CardAchievements_EAchievementGrantType)
	*p = x
	return p
}

func (x CMsgServerSignoutData_CardAchievements_EAchievementGrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerSignoutData_CardAchievements_EAchievementGrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[3].Descriptor()
}

func (CMsgServerSignoutData_CardAchievements_EAchievementGrantType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[3]
}

func (x CMsgServerSignoutData_CardAchievements_EAchievementGrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerSignoutData_CardAchievements_EAchievementGrantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerSignoutData_CardAchievements_EAchievementGrantType(num)
	return nil
}

// Deprecated: Use CMsgServerSignoutData_CardAchievements_EAchievementGrantType.Descriptor instead.
func (CMsgServerSignoutData_CardAchievements_EAchievementGrantType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgServerToGCMatchSignoutResponse_ESignoutResult int32

const (
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry             CMsgServerToGCMatchSignoutResponse_ESignoutResult = 1
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_NoRetry           CMsgServerToGCMatchSignoutResponse_ESignoutResult = 2
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_InFlight          CMsgServerToGCMatchSignoutResponse_ESignoutResult = 3
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success                  CMsgServerToGCMatchSignoutResponse_ESignoutResult = 4
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success_AlreadySignedOut CMsgServerToGCMatchSignoutResponse_ESignoutResult = 5
)

// Enum value maps for CMsgServerToGCMatchSignoutResponse_ESignoutResult.
var (
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_name = map[int32]string{
		1: "k_ESignout_Failed_Retry",
		2: "k_ESignout_Failed_NoRetry",
		3: "k_ESignout_Failed_InFlight",
		4: "k_ESignout_Success",
		5: "k_ESignout_Success_AlreadySignedOut",
	}
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_value = map[string]int32{
		"k_ESignout_Failed_Retry":             1,
		"k_ESignout_Failed_NoRetry":           2,
		"k_ESignout_Failed_InFlight":          3,
		"k_ESignout_Success":                  4,
		"k_ESignout_Success_AlreadySignedOut": 5,
	}
)

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Enum() *CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	p := new(CMsgServerToGCMatchSignoutResponse_ESignoutResult)
	*p = x
	return p
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[4].Descriptor()
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[4]
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCMatchSignoutResponse_ESignoutResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCMatchSignoutResponse_ESignoutResult(num)
	return nil
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse_ESignoutResult.Descriptor instead.
func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{22, 0}
}

type CMsgServerToGCAbandonMatch_EReason int32

const (
	CMsgServerToGCAbandonMatch_eReason_ServerCrash            CMsgServerToGCAbandonMatch_EReason = 1
	CMsgServerToGCAbandonMatch_eReason_ClientsFailedToConnect CMsgServerToGCAbandonMatch_EReason = 2
)

// Enum value maps for CMsgServerToGCAbandonMatch_EReason.
var (
	CMsgServerToGCAbandonMatch_EReason_name = map[int32]string{
		1: "eReason_ServerCrash",
		2: "eReason_ClientsFailedToConnect",
	}
	CMsgServerToGCAbandonMatch_EReason_value = map[string]int32{
		"eReason_ServerCrash":            1,
		"eReason_ClientsFailedToConnect": 2,
	}
)

func (x CMsgServerToGCAbandonMatch_EReason) Enum() *CMsgServerToGCAbandonMatch_EReason {
	p := new(CMsgServerToGCAbandonMatch_EReason)
	*p = x
	return p
}

func (x CMsgServerToGCAbandonMatch_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCAbandonMatch_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[5].Descriptor()
}

func (CMsgServerToGCAbandonMatch_EReason) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[5]
}

func (x CMsgServerToGCAbandonMatch_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCAbandonMatch_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCAbandonMatch_EReason(num)
	return nil
}

// Deprecated: Use CMsgServerToGCAbandonMatch_EReason.Descriptor instead.
func (CMsgServerToGCAbandonMatch_EReason) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgServerToGCTestResults_ETestResult int32

const (
	CMsgServerToGCTestResults_eResult_Failure  CMsgServerToGCTestResults_ETestResult = 0
	CMsgServerToGCTestResults_eResult_Success  CMsgServerToGCTestResults_ETestResult = 1
	CMsgServerToGCTestResults_eResult_Disabled CMsgServerToGCTestResults_ETestResult = 2
)

// Enum value maps for CMsgServerToGCTestResults_ETestResult.
var (
	CMsgServerToGCTestResults_ETestResult_name = map[int32]string{
		0: "eResult_Failure",
		1: "eResult_Success",
		2: "eResult_Disabled",
	}
	CMsgServerToGCTestResults_ETestResult_value = map[string]int32{
		"eResult_Failure":  0,
		"eResult_Success":  1,
		"eResult_Disabled": 2,
	}
)

func (x CMsgServerToGCTestResults_ETestResult) Enum() *CMsgServerToGCTestResults_ETestResult {
	p := new(CMsgServerToGCTestResults_ETestResult)
	*p = x
	return p
}

func (x CMsgServerToGCTestResults_ETestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCTestResults_ETestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_server_proto_enumTypes[6].Descriptor()
}

func (CMsgServerToGCTestResults_ETestResult) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_server_proto_enumTypes[6]
}

func (x CMsgServerToGCTestResults_ETestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCTestResults_ETestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCTestResults_ETestResult(num)
	return nil
}

// Deprecated: Use CMsgServerToGCTestResults_ETestResult.Descriptor instead.
func (CMsgServerToGCTestResults_ETestResult) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{39, 0}
}

type CMsgServerCrashSentinelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             *uint32                                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ServerSteamId       *uint64                                  `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerPublicIpAddr  *uint32                                  `protobuf:"fixed32,3,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPort          *uint32                                  `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerCluster       *uint32                                  `protobuf:"varint,5,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	Pid                 *uint32                                  `protobuf:"varint,6,opt,name=pid" json:"pid,omitempty"`
	SavedTime           *uint32                                  `protobuf:"varint,7,opt,name=saved_time,json=savedTime" json:"saved_time,omitempty"`
	ServerVersion       *uint32                                  `protobuf:"varint,8,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	DcgInfo             *CMsgServerCrashSentinelFile_DCGGameInfo `protobuf:"bytes,9,opt,name=dcg_info,json=dcgInfo" json:"dcg_info,omitempty"`
	ServerPrivateIpAddr *uint32                                  `protobuf:"varint,10,opt,name=server_private_ip_addr,json=serverPrivateIpAddr" json:"server_private_ip_addr,omitempty"`
	InstanceId          *uint32                                  `protobuf:"varint,11,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (x *CMsgServerCrashSentinelFile) Reset() {
	*x = CMsgServerCrashSentinelFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgServerCrashSentinelFile) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetSavedTime() uint32 {
	if x != nil && x.SavedTime != nil {
		return *x.SavedTime
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetDcgInfo() *CMsgServerCrashSentinelFile_DCGGameInfo {
	if x != nil {
		return x.DcgInfo
	}
	return nil
}

func (x *CMsgServerCrashSentinelFile) GetServerPrivateIpAddr() uint32 {
	if x != nil && x.ServerPrivateIpAddr != nil {
		return *x.ServerPrivateIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

type CServerLobbyData_CardAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AchievementIds []uint32 `protobuf:"varint,2,rep,packed,name=achievement_ids,json=achievementIds" json:"achievement_ids,omitempty"`
	Progress       []uint32 `protobuf:"varint,3,rep,packed,name=progress" json:"progress,omitempty"`
}

func (x *CServerLobbyData_CardAchievements) Reset() {
	*x = CServerLobbyData_CardAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_CardAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_CardAchievements) ProtoMessage() {}

func (x *CServerLobbyData_CardAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_CardAchievements.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_CardAchievements) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

func (x *CServerLobbyData_CardAchievements) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_CardAchievements) GetAchievementIds() []uint32 {
	if x != nil {
		return x.AchievementIds
	}
	return nil
}

func (x *CServerLobbyData_CardAchievements) GetProgress() []uint32 {
	if x != nil {
		return x.Progress
	}
	return nil
}

type CServerDraftCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CServerDraftCard) Reset() {
	*x = CServerDraftCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerDraftCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerDraftCard) ProtoMessage() {}

func (x *CServerDraftCard) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerDraftCard.ProtoReflect.Descriptor instead.
func (*CServerDraftCard) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

func (x *CServerDraftCard) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CServerLobbyData_DraftCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CServerLobbyData_DraftCards_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CServerLobbyData_DraftCards) Reset() {
	*x = CServerLobbyData_DraftCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_DraftCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_DraftCards) ProtoMessage() {}

func (x *CServerLobbyData_DraftCards) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_DraftCards.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_DraftCards) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

func (x *CServerLobbyData_DraftCards) GetPlayers() []*CServerLobbyData_DraftCards_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CServerLobbyData_PlayerDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckData []byte `protobuf:"bytes,1,opt,name=deck_data,json=deckData" json:"deck_data,omitempty"`
}

func (x *CServerLobbyData_PlayerDeck) Reset() {
	*x = CServerLobbyData_PlayerDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerDeck) ProtoMessage() {}

func (x *CServerLobbyData_PlayerDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerDeck.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

func (x *CServerLobbyData_PlayerDeck) GetDeckData() []byte {
	if x != nil {
		return x.DeckData
	}
	return nil
}

type CServerLobbyData_PlayerMMR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CServerLobbyData_PlayerMMR_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR) Reset() {
	*x = CServerLobbyData_PlayerMMR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{5}
}

func (x *CServerLobbyData_PlayerMMR) GetPlayers() []*CServerLobbyData_PlayerMMR_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CServerLobbyData_GauntletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletConfig *CMsgGauntletConfig `protobuf:"bytes,1,opt,name=gauntlet_config,json=gauntletConfig" json:"gauntlet_config,omitempty"`
}

func (x *CServerLobbyData_GauntletInfo) Reset() {
	*x = CServerLobbyData_GauntletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_GauntletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_GauntletInfo) ProtoMessage() {}

func (x *CServerLobbyData_GauntletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_GauntletInfo.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_GauntletInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{6}
}

func (x *CServerLobbyData_GauntletInfo) GetGauntletConfig() *CMsgGauntletConfig {
	if x != nil {
		return x.GauntletConfig
	}
	return nil
}

type CServerLobbyData_DeckValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckValidator *CMsgDeckValidator `protobuf:"bytes,1,opt,name=deck_validator,json=deckValidator" json:"deck_validator,omitempty"`
}

func (x *CServerLobbyData_DeckValidator) Reset() {
	*x = CServerLobbyData_DeckValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_DeckValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_DeckValidator) ProtoMessage() {}

func (x *CServerLobbyData_DeckValidator) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_DeckValidator.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_DeckValidator) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{7}
}

func (x *CServerLobbyData_DeckValidator) GetDeckValidator() *CMsgDeckValidator {
	if x != nil {
		return x.DeckValidator
	}
	return nil
}

type CServerLobbyData_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ProgressLevel    *uint32 `protobuf:"varint,2,opt,name=progress_level,json=progressLevel" json:"progress_level,omitempty"`
	ProgressXp       *uint32 `protobuf:"varint,3,opt,name=progress_xp,json=progressXp" json:"progress_xp,omitempty"`
	MmrLevel         *uint32 `protobuf:"varint,4,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	LastWinBonusTime *uint32 `protobuf:"varint,5,opt,name=last_win_bonus_time,json=lastWinBonusTime" json:"last_win_bonus_time,omitempty"`
	WinStreak        *uint32 `protobuf:"varint,6,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BonusPeriodWins  *uint32 `protobuf:"varint,7,opt,name=bonus_period_wins,json=bonusPeriodWins" json:"bonus_period_wins,omitempty"`
	PlayerBadge      *uint32 `protobuf:"varint,8,opt,name=player_badge,json=playerBadge" json:"player_badge,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo) Reset() {
	*x = CServerLobbyData_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{8}
}

func (x *CServerLobbyData_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetProgressLevel() uint32 {
	if x != nil && x.ProgressLevel != nil {
		return *x.ProgressLevel
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetProgressXp() uint32 {
	if x != nil && x.ProgressXp != nil {
		return *x.ProgressXp
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetLastWinBonusTime() uint32 {
	if x != nil && x.LastWinBonusTime != nil {
		return *x.LastWinBonusTime
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetBonusPeriodWins() uint32 {
	if x != nil && x.BonusPeriodWins != nil {
		return *x.BonusPeriodWins
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetPlayerBadge() uint32 {
	if x != nil && x.PlayerBadge != nil {
		return *x.PlayerBadge
	}
	return 0
}

type CSODCGServerLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraMessages  []*CExtraMsgBlock `protobuf:"bytes,1,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId  *uint64           `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId        *uint64           `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReplaySalt     *uint32           `protobuf:"fixed32,4,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	PrivateLobbyId *uint64           `protobuf:"fixed64,5,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	TimerMode      *EDCGLobbyTimer   `protobuf:"varint,6,opt,name=timer_mode,json=timerMode,enum=artifact.EDCGLobbyTimer,def=0" json:"timer_mode,omitempty"`
}

// Default values for CSODCGServerLobby fields.
const (
	Default_CSODCGServerLobby_TimerMode = EDCGLobbyTimer_k_eDCGLobbyTimer_Unspecified
)

func (x *CSODCGServerLobby) Reset() {
	*x = CSODCGServerLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGServerLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGServerLobby) ProtoMessage() {}

func (x *CSODCGServerLobby) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGServerLobby.ProtoReflect.Descriptor instead.
func (*CSODCGServerLobby) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{9}
}

func (x *CSODCGServerLobby) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODCGServerLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSODCGServerLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODCGServerLobby) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CSODCGServerLobby) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CSODCGServerLobby) GetTimerMode() EDCGLobbyTimer {
	if x != nil && x.TimerMode != nil {
		return *x.TimerMode
	}
	return Default_CSODCGServerLobby_TimerMode
}

type CMsgServerSignoutData_MatchChatStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatStats []*CMsgServerSignoutData_MatchChatStats_ChatStats `protobuf:"bytes,1,rep,name=chat_stats,json=chatStats" json:"chat_stats,omitempty"`
}

func (x *CMsgServerSignoutData_MatchChatStats) Reset() {
	*x = CMsgServerSignoutData_MatchChatStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_MatchChatStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_MatchChatStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_MatchChatStats) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_MatchChatStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_MatchChatStats) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgServerSignoutData_MatchChatStats) GetChatStats() []*CMsgServerSignoutData_MatchChatStats_ChatStats {
	if x != nil {
		return x.ChatStats
	}
	return nil
}

type CMsgServerSignoutData_LobbyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       *uint64        `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime     *uint32        `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	GauntletId    *uint32        `protobuf:"varint,3,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ServerVersion *uint32        `protobuf:"varint,4,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	ReplaySalt    *uint32        `protobuf:"varint,5,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	MatchMode     *EDCGMatchMode `protobuf:"varint,6,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
}

// Default values for CMsgServerSignoutData_LobbyInfo fields.
const (
	Default_CMsgServerSignoutData_LobbyInfo_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgServerSignoutData_LobbyInfo) Reset() {
	*x = CMsgServerSignoutData_LobbyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_LobbyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_LobbyInfo) ProtoMessage() {}

func (x *CMsgServerSignoutData_LobbyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_LobbyInfo.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_LobbyInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgServerSignoutData_LobbyInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerSignoutData_LobbyInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgServerSignoutData_LobbyInfo) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgServerSignoutData_LobbyInfo) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerSignoutData_LobbyInfo) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CMsgServerSignoutData_LobbyInfo) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgServerSignoutData_LobbyInfo_MatchMode
}

type CMsgServerSignoutData_PlayerDecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players      []*CMsgServerSignoutData_PlayerDecks_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	StatsVersion *uint32                                     `protobuf:"varint,2,opt,name=stats_version,json=statsVersion" json:"stats_version,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerDecks) Reset() {
	*x = CMsgServerSignoutData_PlayerDecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerDecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerDecks) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerDecks) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerDecks.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerDecks) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgServerSignoutData_PlayerDecks) GetPlayers() []*CMsgServerSignoutData_PlayerDecks_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerSignoutData_PlayerDecks) GetStatsVersion() uint32 {
	if x != nil && x.StatsVersion != nil {
		return *x.StatsVersion
	}
	return 0
}

type CMsgServerSignoutData_PlayerProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32                                            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XpToGrant            *uint32                                            `protobuf:"varint,2,opt,name=xp_to_grant,json=xpToGrant" json:"xp_to_grant,omitempty"`
	Bonuses              []*CMsgServerSignoutData_PlayerProgress_PointBonus `protobuf:"bytes,3,rep,name=bonuses" json:"bonuses,omitempty"`
	WeeklyBonusResetTime *uint32                                            `protobuf:"varint,5,opt,name=weekly_bonus_reset_time,json=weeklyBonusResetTime" json:"weekly_bonus_reset_time,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerProgress) Reset() {
	*x = CMsgServerSignoutData_PlayerProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerProgress) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerProgress) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerProgress.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerProgress) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgServerSignoutData_PlayerProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerProgress) GetXpToGrant() uint32 {
	if x != nil && x.XpToGrant != nil {
		return *x.XpToGrant
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerProgress) GetBonuses() []*CMsgServerSignoutData_PlayerProgress_PointBonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *CMsgServerSignoutData_PlayerProgress) GetWeeklyBonusResetTime() uint32 {
	if x != nil && x.WeeklyBonusResetTime != nil {
		return *x.WeeklyBonusResetTime
	}
	return 0
}

type CMsgServerToGCMatchSignoutPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignoutStart *uint32        `protobuf:"varint,1,opt,name=signout_start,json=signoutStart" json:"signout_start,omitempty"`
	MatchId      *uint64        `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchMode    *EDCGMatchMode `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
}

// Default values for CMsgServerToGCMatchSignoutPermission fields.
const (
	Default_CMsgServerToGCMatchSignoutPermission_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgServerToGCMatchSignoutPermission) Reset() {
	*x = CMsgServerToGCMatchSignoutPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermission) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermission) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermission.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermission) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgServerToGCMatchSignoutPermission) GetSignoutStart() uint32 {
	if x != nil && x.SignoutStart != nil {
		return *x.SignoutStart
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgServerToGCMatchSignoutPermission_MatchMode
}

type CMsgServerToGCMatchSignoutPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSignOut    *bool                  `protobuf:"varint,1,opt,name=can_sign_out,json=canSignOut" json:"can_sign_out,omitempty"`
	RetryTimeS    *uint32                `protobuf:"varint,2,opt,name=retry_time_s,json=retryTimeS" json:"retry_time_s,omitempty"`
	RequestedData []EGCServerSignoutData `protobuf:"varint,3,rep,name=requested_data,json=requestedData,enum=artifact.EGCServerSignoutData" json:"requested_data,omitempty"`
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermissionResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermissionResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetCanSignOut() bool {
	if x != nil && x.CanSignOut != nil {
		return *x.CanSignOut
	}
	return false
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRetryTimeS() uint32 {
	if x != nil && x.RetryTimeS != nil {
		return *x.RetryTimeS
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRequestedData() []EGCServerSignoutData {
	if x != nil {
		return x.RequestedData
	}
	return nil
}

type CMsgServerSignoutData_CardAchievements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32                                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AchievementIds []uint32                                                       `protobuf:"varint,2,rep,packed,name=achievement_ids,json=achievementIds" json:"achievement_ids,omitempty"`
	GrantAmounts   []uint32                                                       `protobuf:"varint,3,rep,packed,name=grant_amounts,json=grantAmounts" json:"grant_amounts,omitempty"`
	GrantTypes     []CMsgServerSignoutData_CardAchievements_EAchievementGrantType `protobuf:"varint,4,rep,packed,name=grant_types,json=grantTypes,enum=artifact.CMsgServerSignoutData_CardAchievements_EAchievementGrantType" json:"grant_types,omitempty"`
}

func (x *CMsgServerSignoutData_CardAchievements) Reset() {
	*x = CMsgServerSignoutData_CardAchievements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_CardAchievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_CardAchievements) ProtoMessage() {}

func (x *CMsgServerSignoutData_CardAchievements) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_CardAchievements.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_CardAchievements) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgServerSignoutData_CardAchievements) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_CardAchievements) GetAchievementIds() []uint32 {
	if x != nil {
		return x.AchievementIds
	}
	return nil
}

func (x *CMsgServerSignoutData_CardAchievements) GetGrantAmounts() []uint32 {
	if x != nil {
		return x.GrantAmounts
	}
	return nil
}

func (x *CMsgServerSignoutData_CardAchievements) GetGrantTypes() []CMsgServerSignoutData_CardAchievements_EAchievementGrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

type CMsgServerSignoutData_PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartMemoryBytes    *uint32 `protobuf:"varint,1,opt,name=start_memory_bytes,json=startMemoryBytes" json:"start_memory_bytes,omitempty"`
	PeakMemoryBytes     *uint32 `protobuf:"varint,2,opt,name=peak_memory_bytes,json=peakMemoryBytes" json:"peak_memory_bytes,omitempty"`
	EndMemoryBytes      *uint32 `protobuf:"varint,3,opt,name=end_memory_bytes,json=endMemoryBytes" json:"end_memory_bytes,omitempty"`
	TotalUpdateTimeMs   *uint32 `protobuf:"varint,4,opt,name=total_update_time_ms,json=totalUpdateTimeMs" json:"total_update_time_ms,omitempty"`
	TotalMatchTimeMs    *uint32 `protobuf:"varint,5,opt,name=total_match_time_ms,json=totalMatchTimeMs" json:"total_match_time_ms,omitempty"`
	SentMessages        *uint32 `protobuf:"varint,6,opt,name=sent_messages,json=sentMessages" json:"sent_messages,omitempty"`
	ReceivedMessages    *uint32 `protobuf:"varint,7,opt,name=received_messages,json=receivedMessages" json:"received_messages,omitempty"`
	SentBytes           *uint32 `protobuf:"varint,8,opt,name=sent_bytes,json=sentBytes" json:"sent_bytes,omitempty"`
	ReceivedBytes       *uint32 `protobuf:"varint,9,opt,name=received_bytes,json=receivedBytes" json:"received_bytes,omitempty"`
	MaxUpdateTimeMicros *uint32 `protobuf:"varint,10,opt,name=max_update_time_micros,json=maxUpdateTimeMicros" json:"max_update_time_micros,omitempty"`
	NumUpdates          *uint32 `protobuf:"varint,11,opt,name=num_updates,json=numUpdates" json:"num_updates,omitempty"`
	ReplaySizeBytes     *uint32 `protobuf:"varint,12,opt,name=replay_size_bytes,json=replaySizeBytes" json:"replay_size_bytes,omitempty"`
}

func (x *CMsgServerSignoutData_PerformanceStats) Reset() {
	*x = CMsgServerSignoutData_PerformanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PerformanceStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PerformanceStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PerformanceStats) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgServerSignoutData_PerformanceStats) GetStartMemoryBytes() uint32 {
	if x != nil && x.StartMemoryBytes != nil {
		return *x.StartMemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetPeakMemoryBytes() uint32 {
	if x != nil && x.PeakMemoryBytes != nil {
		return *x.PeakMemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetEndMemoryBytes() uint32 {
	if x != nil && x.EndMemoryBytes != nil {
		return *x.EndMemoryBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetTotalUpdateTimeMs() uint32 {
	if x != nil && x.TotalUpdateTimeMs != nil {
		return *x.TotalUpdateTimeMs
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetTotalMatchTimeMs() uint32 {
	if x != nil && x.TotalMatchTimeMs != nil {
		return *x.TotalMatchTimeMs
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetSentMessages() uint32 {
	if x != nil && x.SentMessages != nil {
		return *x.SentMessages
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetReceivedMessages() uint32 {
	if x != nil && x.ReceivedMessages != nil {
		return *x.ReceivedMessages
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetSentBytes() uint32 {
	if x != nil && x.SentBytes != nil {
		return *x.SentBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetReceivedBytes() uint32 {
	if x != nil && x.ReceivedBytes != nil {
		return *x.ReceivedBytes
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetMaxUpdateTimeMicros() uint32 {
	if x != nil && x.MaxUpdateTimeMicros != nil {
		return *x.MaxUpdateTimeMicros
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetNumUpdates() uint32 {
	if x != nil && x.NumUpdates != nil {
		return *x.NumUpdates
	}
	return 0
}

func (x *CMsgServerSignoutData_PerformanceStats) GetReplaySizeBytes() uint32 {
	if x != nil && x.ReplaySizeBytes != nil {
		return *x.ReplaySizeBytes
	}
	return 0
}

type CMsgServerSignoutData_GameOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameOptions []*CMsgServerSignoutData_GameOptions_GameOption `protobuf:"bytes,1,rep,name=game_options,json=gameOptions" json:"game_options,omitempty"`
}

func (x *CMsgServerSignoutData_GameOptions) Reset() {
	*x = CMsgServerSignoutData_GameOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_GameOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_GameOptions) ProtoMessage() {}

func (x *CMsgServerSignoutData_GameOptions) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_GameOptions.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_GameOptions) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgServerSignoutData_GameOptions) GetGameOptions() []*CMsgServerSignoutData_GameOptions_GameOption {
	if x != nil {
		return x.GameOptions
	}
	return nil
}

type CMsgMatchDisconnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisconnectTime  *uint32 `protobuf:"varint,2,opt,name=disconnect_time,json=disconnectTime" json:"disconnect_time,omitempty"`
	ConnectionState *uint32 `protobuf:"varint,3,opt,name=connection_state,json=connectionState" json:"connection_state,omitempty"`
	ReasonCode      *uint32 `protobuf:"varint,4,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	ReconnectDelay  *uint32 `protobuf:"varint,5,opt,name=reconnect_delay,json=reconnectDelay" json:"reconnect_delay,omitempty"`
}

func (x *CMsgMatchDisconnection) Reset() {
	*x = CMsgMatchDisconnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchDisconnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchDisconnection) ProtoMessage() {}

func (x *CMsgMatchDisconnection) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchDisconnection.ProtoReflect.Descriptor instead.
func (*CMsgMatchDisconnection) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgMatchDisconnection) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetDisconnectTime() uint32 {
	if x != nil && x.DisconnectTime != nil {
		return *x.DisconnectTime
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetConnectionState() uint32 {
	if x != nil && x.ConnectionState != nil {
		return *x.ConnectionState
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetReconnectDelay() uint32 {
	if x != nil && x.ReconnectDelay != nil {
		return *x.ReconnectDelay
	}
	return 0
}

type CMsgServerSignoutData_Disconnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disconnections []*CMsgMatchDisconnection `protobuf:"bytes,1,rep,name=disconnections" json:"disconnections,omitempty"`
}

func (x *CMsgServerSignoutData_Disconnections) Reset() {
	*x = CMsgServerSignoutData_Disconnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_Disconnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_Disconnections) ProtoMessage() {}

func (x *CMsgServerSignoutData_Disconnections) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_Disconnections.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_Disconnections) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgServerSignoutData_Disconnections) GetDisconnections() []*CMsgMatchDisconnection {
	if x != nil {
		return x.Disconnections
	}
	return nil
}

type CMsgServerToGCMatchSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalData []*CExtraMsgBlock `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	SignoutAttempt *uint32           `protobuf:"varint,2,opt,name=signout_attempt,json=signoutAttempt" json:"signout_attempt,omitempty"`
	LobbyId        *uint64           `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClusterId      *uint32           `protobuf:"varint,9,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	MatchData      *CMsgMatchData    `protobuf:"bytes,10,opt,name=match_data,json=matchData" json:"match_data,omitempty"`
}

func (x *CMsgServerToGCMatchSignout) Reset() {
	*x = CMsgServerToGCMatchSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignout) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignout) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignout.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignout) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgServerToGCMatchSignout) GetAdditionalData() []*CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout) GetSignoutAttempt() uint32 {
	if x != nil && x.SignoutAttempt != nil {
		return *x.SignoutAttempt
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetMatchData() *CMsgMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

type CMsgServerToGCMatchSignoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgServerToGCMatchSignoutResponse_ESignoutResult `protobuf:"varint,1,opt,name=result,enum=artifact.CMsgServerToGCMatchSignoutResponse_ESignoutResult,def=1" json:"result,omitempty"`
}

// Default values for CMsgServerToGCMatchSignoutResponse fields.
const (
	Default_CMsgServerToGCMatchSignoutResponse_Result = CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry
)

func (x *CMsgServerToGCMatchSignoutResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgServerToGCMatchSignoutResponse) GetResult() CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgServerToGCMatchSignoutResponse_Result
}

type CMsgServerWelcomeDCG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerWelcomeDCG) Reset() {
	*x = CMsgServerWelcomeDCG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerWelcomeDCG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerWelcomeDCG) ProtoMessage() {}

func (x *CMsgServerWelcomeDCG) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerWelcomeDCG.ProtoReflect.Descriptor instead.
func (*CMsgServerWelcomeDCG) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{23}
}

type CMsgServerToGCIdlePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
}

func (x *CMsgServerToGCIdlePing) Reset() {
	*x = CMsgServerToGCIdlePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCIdlePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCIdlePing) ProtoMessage() {}

func (x *CMsgServerToGCIdlePing) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCIdlePing.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCIdlePing) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgServerToGCIdlePing) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgGCToServerRequestPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToServerRequestPing) Reset() {
	*x = CMsgGCToServerRequestPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRequestPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRequestPing) ProtoMessage() {}

func (x *CMsgGCToServerRequestPing) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRequestPing.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRequestPing) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{25}
}

type CMsgGCToServerAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatch) Reset() {
	*x = CMsgGCToServerAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgGCToServerAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCToServerAllocateForMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatchResponse) Reset() {
	*x = CMsgGCToServerAllocateForMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatchResponse) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatchResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgGCToServerAllocateForMatchResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgServerToGCEnterMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion   *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	SearchKey       *string `protobuf:"bytes,2,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	RegionId        *uint32 `protobuf:"varint,3,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	ClusterId       *uint32 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ServerPublicIp  *uint32 `protobuf:"varint,5,opt,name=server_public_ip,json=serverPublicIp" json:"server_public_ip,omitempty"`
	ServerPrivateIp *uint32 `protobuf:"varint,6,opt,name=server_private_ip,json=serverPrivateIp" json:"server_private_ip,omitempty"`
	ServerPort      *uint32 `protobuf:"varint,7,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SdrAddress      []byte  `protobuf:"bytes,9,opt,name=sdr_address,json=sdrAddress" json:"sdr_address,omitempty"`
}

func (x *CMsgServerToGCEnterMatchmaking) Reset() {
	*x = CMsgServerToGCEnterMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCEnterMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCEnterMatchmaking) ProtoMessage() {}

func (x *CMsgServerToGCEnterMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCEnterMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCEnterMatchmaking) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgServerToGCEnterMatchmaking) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPublicIp() uint32 {
	if x != nil && x.ServerPublicIp != nil {
		return *x.ServerPublicIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPrivateIp() uint32 {
	if x != nil && x.ServerPrivateIp != nil {
		return *x.ServerPrivateIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSdrAddress() []byte {
	if x != nil {
		return x.SdrAddress
	}
	return nil
}

type CMsgGCToServerCancelAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerCancelAllocateForMatch) Reset() {
	*x = CMsgGCToServerCancelAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerCancelAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCancelAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerCancelAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCancelAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCancelAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgGCToServerCancelAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgServerToGCUpdateLobbyServerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId     *uint64            `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ServerState *ELobbyServerState `protobuf:"varint,2,opt,name=server_state,json=serverState,enum=artifact.ELobbyServerState,def=0" json:"server_state,omitempty"`
}

// Default values for CMsgServerToGCUpdateLobbyServerState fields.
const (
	Default_CMsgServerToGCUpdateLobbyServerState_ServerState = ELobbyServerState_k_eLobbyServerState_Assign
)

func (x *CMsgServerToGCUpdateLobbyServerState) Reset() {
	*x = CMsgServerToGCUpdateLobbyServerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCUpdateLobbyServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCUpdateLobbyServerState) ProtoMessage() {}

func (x *CMsgServerToGCUpdateLobbyServerState) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCUpdateLobbyServerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCUpdateLobbyServerState) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return Default_CMsgServerToGCUpdateLobbyServerState_ServerState
}

type CMsgServerToGCAbandonMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId    *uint64                              `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId          *uint64                              `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClusterId        *uint32                              `protobuf:"varint,3,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ReasonCode       *CMsgServerToGCAbandonMatch_EReason  `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,enum=artifact.CMsgServerToGCAbandonMatch_EReason,def=1" json:"reason_code,omitempty"`
	AdditionalData   *uint64                              `protobuf:"varint,5,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	MatchId          *uint64                              `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GauntletId       *uint32                              `protobuf:"varint,7,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	Players          []*CMsgServerToGCAbandonMatch_Player `protobuf:"bytes,8,rep,name=players" json:"players,omitempty"`
	PublicIpAddress  *uint32                              `protobuf:"fixed32,9,opt,name=public_ip_address,json=publicIpAddress" json:"public_ip_address,omitempty"`
	Port             *uint32                              `protobuf:"varint,10,opt,name=port" json:"port,omitempty"`
	ServerVersion    *uint32                              `protobuf:"varint,11,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	Pid              *uint32                              `protobuf:"varint,12,opt,name=pid" json:"pid,omitempty"`
	InstanceId       *uint32                              `protobuf:"varint,13,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	PrivateIpAddress *uint32                              `protobuf:"varint,14,opt,name=private_ip_address,json=privateIpAddress" json:"private_ip_address,omitempty"`
}

// Default values for CMsgServerToGCAbandonMatch fields.
const (
	Default_CMsgServerToGCAbandonMatch_ReasonCode = CMsgServerToGCAbandonMatch_eReason_ServerCrash
)

func (x *CMsgServerToGCAbandonMatch) Reset() {
	*x = CMsgServerToGCAbandonMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgServerToGCAbandonMatch) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetReasonCode() CMsgServerToGCAbandonMatch_EReason {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return Default_CMsgServerToGCAbandonMatch_ReasonCode
}

func (x *CMsgServerToGCAbandonMatch) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPlayers() []*CMsgServerToGCAbandonMatch_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerToGCAbandonMatch) GetPublicIpAddress() uint32 {
	if x != nil && x.PublicIpAddress != nil {
		return *x.PublicIpAddress
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPrivateIpAddress() uint32 {
	if x != nil && x.PrivateIpAddress != nil {
		return *x.PrivateIpAddress
	}
	return 0
}

type CMsgServerToGCAbandonMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCAbandonMatchResponse) Reset() {
	*x = CMsgServerToGCAbandonMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatchResponse) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatchResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{32}
}

type CMsgServerToGCTestConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCTestConnection) Reset() {
	*x = CMsgServerToGCTestConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnection) ProtoMessage() {}

func (x *CMsgServerToGCTestConnection) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnection.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnection) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{33}
}

type CMsgServerToGCTestConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	LobbyId *uint64 `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgServerToGCTestConnectionResponse) Reset() {
	*x = CMsgServerToGCTestConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnectionResponse) ProtoMessage() {}

func (x *CMsgServerToGCTestConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnectionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnectionResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgServerToGCTestConnectionResponse) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CMsgServerToGCTestConnectionResponse) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCToServerAddTourneySpectator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId             *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AccountId           *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AccountToSpectateId *uint32 `protobuf:"varint,3,opt,name=account_to_spectate_id,json=accountToSpectateId" json:"account_to_spectate_id,omitempty"`
	TourneyId           *uint64 `protobuf:"varint,4,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgGCToServerAddTourneySpectator) Reset() {
	*x = CMsgGCToServerAddTourneySpectator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddTourneySpectator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddTourneySpectator) ProtoMessage() {}

func (x *CMsgGCToServerAddTourneySpectator) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddTourneySpectator.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddTourneySpectator) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCToServerAddTourneySpectator) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGCToServerAddTourneySpectator) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToServerAddTourneySpectator) GetAccountToSpectateId() uint32 {
	if x != nil && x.AccountToSpectateId != nil {
		return *x.AccountToSpectateId
	}
	return 0
}

func (x *CMsgGCToServerAddTourneySpectator) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgGCToServerAddTourneySpectatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	TourneyId *uint64 `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
}

func (x *CMsgGCToServerAddTourneySpectatorResponse) Reset() {
	*x = CMsgGCToServerAddTourneySpectatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddTourneySpectatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddTourneySpectatorResponse) ProtoMessage() {}

func (x *CMsgGCToServerAddTourneySpectatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddTourneySpectatorResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddTourneySpectatorResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGCToServerAddTourneySpectatorResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgGCToServerAddTourneySpectatorResponse) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

type CMsgGCToServerRunTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedVersion *uint32 `protobuf:"varint,1,opt,name=expected_version,json=expectedVersion" json:"expected_version,omitempty"`
}

func (x *CMsgGCToServerRunTests) Reset() {
	*x = CMsgGCToServerRunTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRunTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRunTests) ProtoMessage() {}

func (x *CMsgGCToServerRunTests) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRunTests.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRunTests) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCToServerRunTests) GetExpectedVersion() uint32 {
	if x != nil && x.ExpectedVersion != nil {
		return *x.ExpectedVersion
	}
	return 0
}

type CMsgGCToServerRunTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningTests *bool `protobuf:"varint,1,opt,name=running_tests,json=runningTests" json:"running_tests,omitempty"`
}

func (x *CMsgGCToServerRunTestsResponse) Reset() {
	*x = CMsgGCToServerRunTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRunTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRunTestsResponse) ProtoMessage() {}

func (x *CMsgGCToServerRunTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRunTestsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRunTestsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGCToServerRunTestsResponse) GetRunningTests() bool {
	if x != nil && x.RunningTests != nil {
		return *x.RunningTests
	}
	return false
}

type CMsgServerToGCTestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results       []*CMsgServerToGCTestResults_TestResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	ServerVersion *uint32                                 `protobuf:"varint,2,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
}

func (x *CMsgServerToGCTestResults) Reset() {
	*x = CMsgServerToGCTestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestResults) ProtoMessage() {}

func (x *CMsgServerToGCTestResults) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestResults.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestResults) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgServerToGCTestResults) GetResults() []*CMsgServerToGCTestResults_TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CMsgServerToGCTestResults) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgServerCrashSentinelFile_DCGGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId          *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId          *uint64  `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GauntletId       *uint32  `protobuf:"varint,3,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ServerState      *uint32  `protobuf:"varint,4,opt,name=server_state,json=serverState" json:"server_state,omitempty"`
	ClientAccountIds []uint32 `protobuf:"varint,5,rep,name=client_account_ids,json=clientAccountIds" json:"client_account_ids,omitempty"`
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) Reset() {
	*x = CMsgServerCrashSentinelFile_DCGGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile_DCGGameInfo) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile_DCGGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile_DCGGameInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) GetServerState() uint32 {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_DCGGameInfo) GetClientAccountIds() []uint32 {
	if x != nil {
		return x.ClientAccountIds
	}
	return nil
}

type CServerLobbyData_DraftCards_Pack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackItemId *uint64             `protobuf:"varint,1,opt,name=pack_item_id,json=packItemId" json:"pack_item_id,omitempty"`
	PackCards  []*CServerDraftCard `protobuf:"bytes,2,rep,name=pack_cards,json=packCards" json:"pack_cards,omitempty"`
}

func (x *CServerLobbyData_DraftCards_Pack) Reset() {
	*x = CServerLobbyData_DraftCards_Pack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_DraftCards_Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_DraftCards_Pack) ProtoMessage() {}

func (x *CServerLobbyData_DraftCards_Pack) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_DraftCards_Pack.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_DraftCards_Pack) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CServerLobbyData_DraftCards_Pack) GetPackItemId() uint64 {
	if x != nil && x.PackItemId != nil {
		return *x.PackItemId
	}
	return 0
}

func (x *CServerLobbyData_DraftCards_Pack) GetPackCards() []*CServerDraftCard {
	if x != nil {
		return x.PackCards
	}
	return nil
}

type CServerLobbyData_DraftCards_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32                             `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Packs                []*CServerLobbyData_DraftCards_Pack `protobuf:"bytes,2,rep,name=packs" json:"packs,omitempty"`
	CannotTrade          *bool                               `protobuf:"varint,3,opt,name=cannot_trade,json=cannotTrade" json:"cannot_trade,omitempty"`
	TradeRestrictionTime *uint32                             `protobuf:"varint,4,opt,name=trade_restriction_time,json=tradeRestrictionTime" json:"trade_restriction_time,omitempty"`
}

func (x *CServerLobbyData_DraftCards_Player) Reset() {
	*x = CServerLobbyData_DraftCards_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_DraftCards_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_DraftCards_Player) ProtoMessage() {}

func (x *CServerLobbyData_DraftCards_Player) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_DraftCards_Player.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_DraftCards_Player) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CServerLobbyData_DraftCards_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_DraftCards_Player) GetPacks() []*CServerLobbyData_DraftCards_Pack {
	if x != nil {
		return x.Packs
	}
	return nil
}

func (x *CServerLobbyData_DraftCards_Player) GetCannotTrade() bool {
	if x != nil && x.CannotTrade != nil {
		return *x.CannotTrade
	}
	return false
}

func (x *CServerLobbyData_DraftCards_Player) GetTradeRestrictionTime() uint32 {
	if x != nil && x.TradeRestrictionTime != nil {
		return *x.TradeRestrictionTime
	}
	return 0
}

type CServerLobbyData_PlayerMMR_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Mmr         *uint32 `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	Uncertainty *uint32 `protobuf:"varint,3,opt,name=uncertainty" json:"uncertainty,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR_Player) Reset() {
	*x = CServerLobbyData_PlayerMMR_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR_Player) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR_Player) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR_Player.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR_Player) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CServerLobbyData_PlayerMMR_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetUncertainty() uint32 {
	if x != nil && x.Uncertainty != nil {
		return *x.Uncertainty
	}
	return 0
}

type CMsgServerSignoutData_MatchChatStats_ChatStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                               *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TotalMessages                           *uint32 `protobuf:"varint,2,opt,name=total_messages,json=totalMessages" json:"total_messages,omitempty"`
	TotalCustomMessages                     *uint32 `protobuf:"varint,3,opt,name=total_custom_messages,json=totalCustomMessages" json:"total_custom_messages,omitempty"`
	UserSentCustomMessageBeforeMute         *bool   `protobuf:"varint,4,opt,name=user_sent_custom_message_before_mute,json=userSentCustomMessageBeforeMute" json:"user_sent_custom_message_before_mute,omitempty"`
	TotalMessagesSentWhileMuted             *uint32 `protobuf:"varint,5,opt,name=total_messages_sent_while_muted,json=totalMessagesSentWhileMuted" json:"total_messages_sent_while_muted,omitempty"`
	NumTimesSquelched                       *uint32 `protobuf:"varint,6,opt,name=num_times_squelched,json=numTimesSquelched" json:"num_times_squelched,omitempty"`
	UserMutedOpponentBeforeReceivingMessage *bool   `protobuf:"varint,7,opt,name=user_muted_opponent_before_receiving_message,json=userMutedOpponentBeforeReceivingMessage" json:"user_muted_opponent_before_receiving_message,omitempty"`
	UserWasMutedThenWasUnmuted              *bool   `protobuf:"varint,8,opt,name=user_was_muted_then_was_unmuted,json=userWasMutedThenWasUnmuted" json:"user_was_muted_then_was_unmuted,omitempty"`
	UserWasMutedAtMatchEnd                  *bool   `protobuf:"varint,9,opt,name=user_was_muted_at_match_end,json=userWasMutedAtMatchEnd" json:"user_was_muted_at_match_end,omitempty"`
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) Reset() {
	*x = CMsgServerSignoutData_MatchChatStats_ChatStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_MatchChatStats_ChatStats) ProtoMessage() {}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_MatchChatStats_ChatStats.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_MatchChatStats_ChatStats) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetTotalMessages() uint32 {
	if x != nil && x.TotalMessages != nil {
		return *x.TotalMessages
	}
	return 0
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetTotalCustomMessages() uint32 {
	if x != nil && x.TotalCustomMessages != nil {
		return *x.TotalCustomMessages
	}
	return 0
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetUserSentCustomMessageBeforeMute() bool {
	if x != nil && x.UserSentCustomMessageBeforeMute != nil {
		return *x.UserSentCustomMessageBeforeMute
	}
	return false
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetTotalMessagesSentWhileMuted() uint32 {
	if x != nil && x.TotalMessagesSentWhileMuted != nil {
		return *x.TotalMessagesSentWhileMuted
	}
	return 0
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetNumTimesSquelched() uint32 {
	if x != nil && x.NumTimesSquelched != nil {
		return *x.NumTimesSquelched
	}
	return 0
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetUserMutedOpponentBeforeReceivingMessage() bool {
	if x != nil && x.UserMutedOpponentBeforeReceivingMessage != nil {
		return *x.UserMutedOpponentBeforeReceivingMessage
	}
	return false
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetUserWasMutedThenWasUnmuted() bool {
	if x != nil && x.UserWasMutedThenWasUnmuted != nil {
		return *x.UserWasMutedThenWasUnmuted
	}
	return false
}

func (x *CMsgServerSignoutData_MatchChatStats_ChatStats) GetUserWasMutedAtMatchEnd() bool {
	if x != nil && x.UserWasMutedAtMatchEnd != nil {
		return *x.UserWasMutedAtMatchEnd
	}
	return false
}

type CMsgServerSignoutData_PlayerDecks_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     *uint32                                          `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Cards        []*CMsgServerSignoutData_PlayerDecks_Player_Card `protobuf:"bytes,2,rep,name=cards" json:"cards,omitempty"`
	Heroes       []*CMsgServerSignoutData_PlayerDecks_Player_Hero `protobuf:"bytes,3,rep,name=heroes" json:"heroes,omitempty"`
	CriticalLife *uint32                                          `protobuf:"varint,6,opt,name=critical_life,json=criticalLife" json:"critical_life,omitempty"`
	TotalGold    *uint32                                          `protobuf:"varint,7,opt,name=total_gold,json=totalGold" json:"total_gold,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) Reset() {
	*x = CMsgServerSignoutData_PlayerDecks_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerDecks_Player) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerDecks_Player) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerDecks_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerDecks_Player) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) GetPlayerId() uint32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) GetCards() []*CMsgServerSignoutData_PlayerDecks_Player_Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) GetHeroes() []*CMsgServerSignoutData_PlayerDecks_Player_Hero {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) GetCriticalLife() uint32 {
	if x != nil && x.CriticalLife != nil {
		return *x.CriticalLife
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player) GetTotalGold() uint32 {
	if x != nil && x.TotalGold != nil {
		return *x.TotalGold
	}
	return 0
}

type CMsgServerSignoutData_PlayerDecks_Player_Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId   *uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	HeroSlot *uint32 `protobuf:"varint,2,opt,name=hero_slot,json=heroSlot" json:"hero_slot,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Hero) Reset() {
	*x = CMsgServerSignoutData_PlayerDecks_Player_Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerDecks_Player_Hero) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerDecks_Player_Hero.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerDecks_Player_Hero) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Hero) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Hero) GetHeroSlot() uint32 {
	if x != nil && x.HeroSlot != nil {
		return *x.HeroSlot
	}
	return 0
}

type CMsgServerSignoutData_PlayerDecks_Player_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    *uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	NumInDeck *uint32 `protobuf:"varint,2,opt,name=num_in_deck,json=numInDeck" json:"num_in_deck,omitempty"`
	NumInHand *uint32 `protobuf:"varint,3,opt,name=num_in_hand,json=numInHand" json:"num_in_hand,omitempty"`
	NumPlayed *uint32 `protobuf:"varint,4,opt,name=num_played,json=numPlayed" json:"num_played,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) Reset() {
	*x = CMsgServerSignoutData_PlayerDecks_Player_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerDecks_Player_Card) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerDecks_Player_Card.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerDecks_Player_Card) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{12, 0, 1}
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) GetNumInDeck() uint32 {
	if x != nil && x.NumInDeck != nil {
		return *x.NumInDeck
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) GetNumInHand() uint32 {
	if x != nil && x.NumInHand != nil {
		return *x.NumInHand
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerDecks_Player_Card) GetNumPlayed() uint32 {
	if x != nil && x.NumPlayed != nil {
		return *x.NumPlayed
	}
	return 0
}

type CMsgServerSignoutData_PlayerProgress_PointBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusId     *uint32 `protobuf:"varint,1,opt,name=bonus_id,json=bonusId" json:"bonus_id,omitempty"`
	BonusPoints *uint32 `protobuf:"varint,2,opt,name=bonus_points,json=bonusPoints" json:"bonus_points,omitempty"`
}

func (x *CMsgServerSignoutData_PlayerProgress_PointBonus) Reset() {
	*x = CMsgServerSignoutData_PlayerProgress_PointBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_PlayerProgress_PointBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_PlayerProgress_PointBonus) ProtoMessage() {}

func (x *CMsgServerSignoutData_PlayerProgress_PointBonus) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_PlayerProgress_PointBonus.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_PlayerProgress_PointBonus) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgServerSignoutData_PlayerProgress_PointBonus) GetBonusId() uint32 {
	if x != nil && x.BonusId != nil {
		return *x.BonusId
	}
	return 0
}

func (x *CMsgServerSignoutData_PlayerProgress_PointBonus) GetBonusPoints() uint32 {
	if x != nil && x.BonusPoints != nil {
		return *x.BonusPoints
	}
	return 0
}

type CMsgServerSignoutData_GameOptions_GameOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgServerSignoutData_GameOptions_GameOption) Reset() {
	*x = CMsgServerSignoutData_GameOptions_GameOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerSignoutData_GameOptions_GameOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerSignoutData_GameOptions_GameOption) ProtoMessage() {}

func (x *CMsgServerSignoutData_GameOptions_GameOption) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerSignoutData_GameOptions_GameOption.ProtoReflect.Descriptor instead.
func (*CMsgServerSignoutData_GameOptions_GameOption) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgServerSignoutData_GameOptions_GameOption) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgServerSignoutData_GameOptions_GameOption) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgServerToGCAbandonMatch_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AdditionalData *uint64 `protobuf:"varint,2,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (x *CMsgServerToGCAbandonMatch_Player) Reset() {
	*x = CMsgServerToGCAbandonMatch_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch_Player) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch_Player) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch_Player) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

type CMsgServerToGCTestResults_TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestName   *string                                `protobuf:"bytes,1,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	TestGroup  *string                                `protobuf:"bytes,2,opt,name=test_group,json=testGroup" json:"test_group,omitempty"`
	TestResult *CMsgServerToGCTestResults_ETestResult `protobuf:"varint,3,opt,name=test_result,json=testResult,enum=artifact.CMsgServerToGCTestResults_ETestResult,def=0" json:"test_result,omitempty"`
}

// Default values for CMsgServerToGCTestResults_TestResult fields.
const (
	Default_CMsgServerToGCTestResults_TestResult_TestResult = CMsgServerToGCTestResults_eResult_Failure
)

func (x *CMsgServerToGCTestResults_TestResult) Reset() {
	*x = CMsgServerToGCTestResults_TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestResults_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestResults_TestResult) ProtoMessage() {}

func (x *CMsgServerToGCTestResults_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestResults_TestResult.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestResults_TestResult) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_server_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CMsgServerToGCTestResults_TestResult) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

func (x *CMsgServerToGCTestResults_TestResult) GetTestGroup() string {
	if x != nil && x.TestGroup != nil {
		return *x.TestGroup
	}
	return ""
}

func (x *CMsgServerToGCTestResults_TestResult) GetTestResult() CMsgServerToGCTestResults_ETestResult {
	if x != nil && x.TestResult != nil {
		return *x.TestResult
	}
	return Default_CMsgServerToGCTestResults_TestResult_TestResult
}

var File_artifact_dcg_gcmessages_server_proto protoreflect.FileDescriptor

var file_artifact_dcg_gcmessages_server_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x1a, 0x24, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x05, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x64,
	0x63, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x64, 0x63, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a,
	0xb5, 0x01, 0x0a, 0x0b, 0x44, 0x43, 0x47, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x43, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8f, 0x03, 0x0a, 0x1b, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x1a, 0x63, 0x0a, 0x04, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x70, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x1b,
	0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x5b,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x6d, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x1d, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0f,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x64, 0x0a, 0x1e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63,
	0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x43, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x43,
	0x53, 0x4f, 0x44, 0x43, 0x47, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45,
	0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x3a, 0x1c, 0x6b,
	0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x57, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xab, 0x04, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x24, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x57, 0x68, 0x69, 0x6c, 0x65,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x5f, 0x73, 0x71, 0x75, 0x65, 0x6c, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x71, 0x75, 0x65,
	0x6c, 0x63, 0x68, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x75, 0x73, 0x65,
	0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x73, 0x5f,
	0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6e, 0x57,
	0x61, 0x73, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43,
	0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44,
	0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xe0, 0x04, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x63, 0x6b, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc7, 0x03, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x4f, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x6f, 0x6c, 0x64, 0x1a, 0x3c, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x6c,
	0x6f, 0x74, 0x1a, 0x7e, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x44,
	0x65, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x78, 0x70, 0x54, 0x6f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x02, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x15, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x53, 0x65, 0x74, 0x10, 0x02, 0x22, 0xa6, 0x04, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xb4, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x34, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x70,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x12,
	0x41, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x02,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x10, 0x05, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x43, 0x47, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x64, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x05, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x13, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x50, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x13, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x02, 0x22, 0x24, 0x0a, 0x22,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x64, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x89, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0xab, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x45, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x0f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d,
	0x0a, 0x0b, 0x45, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a,
	0x0f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xc2, 0x06,
	0x0a, 0x14, 0x45, 0x47, 0x43, 0x44, 0x43, 0x47, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x9c, 0x4e, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x10, 0x9e, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x9f, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x64, 0x6c, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x10, 0xa2, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x69, 0x6e, 0x67, 0x10, 0xa3, 0x4e, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xa5, 0x4e, 0x12, 0x2d,
	0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa6, 0x4e, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x10, 0xa7, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xa8,
	0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa9, 0x4e, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f,
	0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xaa,
	0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xab, 0x4e, 0x12, 0x23, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xac,
	0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xad, 0x4e, 0x12, 0x1d,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x10, 0xaf, 0x4e, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xb0, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x10, 0xb1, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x10, 0xb2, 0x4e,
	0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xb3, 0x4e, 0x2a, 0x93, 0x02, 0x0a, 0x12, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x65, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x4d, 0x52, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x06,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x08, 0x2a, 0xd7, 0x02, 0x0a, 0x14, 0x45, 0x47, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x0c,
	0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x10, 0x0e, 0x42, 0x39, 0x48, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70,
	0x62, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x80, 0x01, 0x00,
}

var (
	file_artifact_dcg_gcmessages_server_proto_rawDescOnce sync.Once
	file_artifact_dcg_gcmessages_server_proto_rawDescData = file_artifact_dcg_gcmessages_server_proto_rawDesc
)

func file_artifact_dcg_gcmessages_server_proto_rawDescGZIP() []byte {
	file_artifact_dcg_gcmessages_server_proto_rawDescOnce.Do(func() {
		file_artifact_dcg_gcmessages_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_dcg_gcmessages_server_proto_rawDescData)
	})
	return file_artifact_dcg_gcmessages_server_proto_rawDescData
}

var file_artifact_dcg_gcmessages_server_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_artifact_dcg_gcmessages_server_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_artifact_dcg_gcmessages_server_proto_goTypes = []interface{}{
	(EGCDCGServerMessages)(0), // 0: artifact.EGCDCGServerMessages
	(EGCServerLobbyData)(0),   // 1: artifact.EGCServerLobbyData
	(EGCServerSignoutData)(0), // 2: artifact.EGCServerSignoutData
	(CMsgServerSignoutData_CardAchievements_EAchievementGrantType)(0), // 3: artifact.CMsgServerSignoutData_CardAchievements.EAchievementGrantType
	(CMsgServerToGCMatchSignoutResponse_ESignoutResult)(0),            // 4: artifact.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	(CMsgServerToGCAbandonMatch_EReason)(0),                           // 5: artifact.CMsgServerToGCAbandonMatch.EReason
	(CMsgServerToGCTestResults_ETestResult)(0),                        // 6: artifact.CMsgServerToGCTestResults.ETestResult
	(*CMsgServerCrashSentinelFile)(nil),                               // 7: artifact.CMsgServerCrashSentinelFile
	(*CServerLobbyData_CardAchievements)(nil),                         // 8: artifact.CServerLobbyData_CardAchievements
	(*CServerDraftCard)(nil),                                          // 9: artifact.CServerDraftCard
	(*CServerLobbyData_DraftCards)(nil),                               // 10: artifact.CServerLobbyData_DraftCards
	(*CServerLobbyData_PlayerDeck)(nil),                               // 11: artifact.CServerLobbyData_PlayerDeck
	(*CServerLobbyData_PlayerMMR)(nil),                                // 12: artifact.CServerLobbyData_PlayerMMR
	(*CServerLobbyData_GauntletInfo)(nil),                             // 13: artifact.CServerLobbyData_GauntletInfo
	(*CServerLobbyData_DeckValidator)(nil),                            // 14: artifact.CServerLobbyData_DeckValidator
	(*CServerLobbyData_PlayerInfo)(nil),                               // 15: artifact.CServerLobbyData_PlayerInfo
	(*CSODCGServerLobby)(nil),                                         // 16: artifact.CSODCGServerLobby
	(*CMsgServerSignoutData_MatchChatStats)(nil),                      // 17: artifact.CMsgServerSignoutData_MatchChatStats
	(*CMsgServerSignoutData_LobbyInfo)(nil),                           // 18: artifact.CMsgServerSignoutData_LobbyInfo
	(*CMsgServerSignoutData_PlayerDecks)(nil),                         // 19: artifact.CMsgServerSignoutData_PlayerDecks
	(*CMsgServerSignoutData_PlayerProgress)(nil),                      // 20: artifact.CMsgServerSignoutData_PlayerProgress
	(*CMsgServerToGCMatchSignoutPermission)(nil),                      // 21: artifact.CMsgServerToGCMatchSignoutPermission
	(*CMsgServerToGCMatchSignoutPermissionResponse)(nil),              // 22: artifact.CMsgServerToGCMatchSignoutPermissionResponse
	(*CMsgServerSignoutData_CardAchievements)(nil),                    // 23: artifact.CMsgServerSignoutData_CardAchievements
	(*CMsgServerSignoutData_PerformanceStats)(nil),                    // 24: artifact.CMsgServerSignoutData_PerformanceStats
	(*CMsgServerSignoutData_GameOptions)(nil),                         // 25: artifact.CMsgServerSignoutData_GameOptions
	(*CMsgMatchDisconnection)(nil),                                    // 26: artifact.CMsgMatchDisconnection
	(*CMsgServerSignoutData_Disconnections)(nil),                      // 27: artifact.CMsgServerSignoutData_Disconnections
	(*CMsgServerToGCMatchSignout)(nil),                                // 28: artifact.CMsgServerToGCMatchSignout
	(*CMsgServerToGCMatchSignoutResponse)(nil),                        // 29: artifact.CMsgServerToGCMatchSignoutResponse
	(*CMsgServerWelcomeDCG)(nil),                                      // 30: artifact.CMsgServerWelcomeDCG
	(*CMsgServerToGCIdlePing)(nil),                                    // 31: artifact.CMsgServerToGCIdlePing
	(*CMsgGCToServerRequestPing)(nil),                                 // 32: artifact.CMsgGCToServerRequestPing
	(*CMsgGCToServerAllocateForMatch)(nil),                            // 33: artifact.CMsgGCToServerAllocateForMatch
	(*CMsgGCToServerAllocateForMatchResponse)(nil),                    // 34: artifact.CMsgGCToServerAllocateForMatchResponse
	(*CMsgServerToGCEnterMatchmaking)(nil),                            // 35: artifact.CMsgServerToGCEnterMatchmaking
	(*CMsgGCToServerCancelAllocateForMatch)(nil),                      // 36: artifact.CMsgGCToServerCancelAllocateForMatch
	(*CMsgServerToGCUpdateLobbyServerState)(nil),                      // 37: artifact.CMsgServerToGCUpdateLobbyServerState
	(*CMsgServerToGCAbandonMatch)(nil),                                // 38: artifact.CMsgServerToGCAbandonMatch
	(*CMsgServerToGCAbandonMatchResponse)(nil),                        // 39: artifact.CMsgServerToGCAbandonMatchResponse
	(*CMsgServerToGCTestConnection)(nil),                              // 40: artifact.CMsgServerToGCTestConnection
	(*CMsgServerToGCTestConnectionResponse)(nil),                      // 41: artifact.CMsgServerToGCTestConnectionResponse
	(*CMsgGCToServerAddTourneySpectator)(nil),                         // 42: artifact.CMsgGCToServerAddTourneySpectator
	(*CMsgGCToServerAddTourneySpectatorResponse)(nil),                 // 43: artifact.CMsgGCToServerAddTourneySpectatorResponse
	(*CMsgGCToServerRunTests)(nil),                                    // 44: artifact.CMsgGCToServerRunTests
	(*CMsgGCToServerRunTestsResponse)(nil),                            // 45: artifact.CMsgGCToServerRunTestsResponse
	(*CMsgServerToGCTestResults)(nil),                                 // 46: artifact.CMsgServerToGCTestResults
	(*CMsgServerCrashSentinelFile_DCGGameInfo)(nil),                   // 47: artifact.CMsgServerCrashSentinelFile.DCGGameInfo
	(*CServerLobbyData_DraftCards_Pack)(nil),                          // 48: artifact.CServerLobbyData_DraftCards.Pack
	(*CServerLobbyData_DraftCards_Player)(nil),                        // 49: artifact.CServerLobbyData_DraftCards.Player
	(*CServerLobbyData_PlayerMMR_Player)(nil),                         // 50: artifact.CServerLobbyData_PlayerMMR.Player
	(*CMsgServerSignoutData_MatchChatStats_ChatStats)(nil),            // 51: artifact.CMsgServerSignoutData_MatchChatStats.ChatStats
	(*CMsgServerSignoutData_PlayerDecks_Player)(nil),                  // 52: artifact.CMsgServerSignoutData_PlayerDecks.Player
	(*CMsgServerSignoutData_PlayerDecks_Player_Hero)(nil),             // 53: artifact.CMsgServerSignoutData_PlayerDecks.Player.Hero
	(*CMsgServerSignoutData_PlayerDecks_Player_Card)(nil),             // 54: artifact.CMsgServerSignoutData_PlayerDecks.Player.Card
	(*CMsgServerSignoutData_PlayerProgress_PointBonus)(nil),           // 55: artifact.CMsgServerSignoutData_PlayerProgress.PointBonus
	(*CMsgServerSignoutData_GameOptions_GameOption)(nil),              // 56: artifact.CMsgServerSignoutData_GameOptions.GameOption
	(*CMsgServerToGCAbandonMatch_Player)(nil),                         // 57: artifact.CMsgServerToGCAbandonMatch.Player
	(*CMsgServerToGCTestResults_TestResult)(nil),                      // 58: artifact.CMsgServerToGCTestResults.TestResult
	(*CMsgGauntletConfig)(nil),                                        // 59: artifact.CMsgGauntletConfig
	(*CMsgDeckValidator)(nil),                                         // 60: artifact.CMsgDeckValidator
	(*CExtraMsgBlock)(nil),                                            // 61: artifact.CExtraMsgBlock
	(EDCGLobbyTimer)(0),                                               // 62: artifact.EDCGLobbyTimer
	(EDCGMatchMode)(0),                                                // 63: artifact.EDCGMatchMode
	(*CMsgMatchData)(nil),                                             // 64: artifact.CMsgMatchData
	(ELobbyServerState)(0),                                            // 65: artifact.ELobbyServerState
}
var file_artifact_dcg_gcmessages_server_proto_depIdxs = []int32{
	47, // 0: artifact.CMsgServerCrashSentinelFile.dcg_info:type_name -> artifact.CMsgServerCrashSentinelFile.DCGGameInfo
	49, // 1: artifact.CServerLobbyData_DraftCards.players:type_name -> artifact.CServerLobbyData_DraftCards.Player
	50, // 2: artifact.CServerLobbyData_PlayerMMR.players:type_name -> artifact.CServerLobbyData_PlayerMMR.Player
	59, // 3: artifact.CServerLobbyData_GauntletInfo.gauntlet_config:type_name -> artifact.CMsgGauntletConfig
	60, // 4: artifact.CServerLobbyData_DeckValidator.deck_validator:type_name -> artifact.CMsgDeckValidator
	61, // 5: artifact.CSODCGServerLobby.extra_messages:type_name -> artifact.CExtraMsgBlock
	62, // 6: artifact.CSODCGServerLobby.timer_mode:type_name -> artifact.EDCGLobbyTimer
	51, // 7: artifact.CMsgServerSignoutData_MatchChatStats.chat_stats:type_name -> artifact.CMsgServerSignoutData_MatchChatStats.ChatStats
	63, // 8: artifact.CMsgServerSignoutData_LobbyInfo.match_mode:type_name -> artifact.EDCGMatchMode
	52, // 9: artifact.CMsgServerSignoutData_PlayerDecks.players:type_name -> artifact.CMsgServerSignoutData_PlayerDecks.Player
	55, // 10: artifact.CMsgServerSignoutData_PlayerProgress.bonuses:type_name -> artifact.CMsgServerSignoutData_PlayerProgress.PointBonus
	63, // 11: artifact.CMsgServerToGCMatchSignoutPermission.match_mode:type_name -> artifact.EDCGMatchMode
	2,  // 12: artifact.CMsgServerToGCMatchSignoutPermissionResponse.requested_data:type_name -> artifact.EGCServerSignoutData
	3,  // 13: artifact.CMsgServerSignoutData_CardAchievements.grant_types:type_name -> artifact.CMsgServerSignoutData_CardAchievements.EAchievementGrantType
	56, // 14: artifact.CMsgServerSignoutData_GameOptions.game_options:type_name -> artifact.CMsgServerSignoutData_GameOptions.GameOption
	26, // 15: artifact.CMsgServerSignoutData_Disconnections.disconnections:type_name -> artifact.CMsgMatchDisconnection
	61, // 16: artifact.CMsgServerToGCMatchSignout.additional_data:type_name -> artifact.CExtraMsgBlock
	64, // 17: artifact.CMsgServerToGCMatchSignout.match_data:type_name -> artifact.CMsgMatchData
	4,  // 18: artifact.CMsgServerToGCMatchSignoutResponse.result:type_name -> artifact.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	65, // 19: artifact.CMsgServerToGCUpdateLobbyServerState.server_state:type_name -> artifact.ELobbyServerState
	5,  // 20: artifact.CMsgServerToGCAbandonMatch.reason_code:type_name -> artifact.CMsgServerToGCAbandonMatch.EReason
	57, // 21: artifact.CMsgServerToGCAbandonMatch.players:type_name -> artifact.CMsgServerToGCAbandonMatch.Player
	58, // 22: artifact.CMsgServerToGCTestResults.results:type_name -> artifact.CMsgServerToGCTestResults.TestResult
	9,  // 23: artifact.CServerLobbyData_DraftCards.Pack.pack_cards:type_name -> artifact.CServerDraftCard
	48, // 24: artifact.CServerLobbyData_DraftCards.Player.packs:type_name -> artifact.CServerLobbyData_DraftCards.Pack
	54, // 25: artifact.CMsgServerSignoutData_PlayerDecks.Player.cards:type_name -> artifact.CMsgServerSignoutData_PlayerDecks.Player.Card
	53, // 26: artifact.CMsgServerSignoutData_PlayerDecks.Player.heroes:type_name -> artifact.CMsgServerSignoutData_PlayerDecks.Player.Hero
	6,  // 27: artifact.CMsgServerToGCTestResults.TestResult.test_result:type_name -> artifact.CMsgServerToGCTestResults.ETestResult
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_artifact_dcg_gcmessages_server_proto_init() }
func file_artifact_dcg_gcmessages_server_proto_init() {
	if File_artifact_dcg_gcmessages_server_proto != nil {
		return
	}
	file_artifact_dcg_gcmessages_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_artifact_dcg_gcmessages_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerCrashSentinelFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_CardAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerDraftCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_DraftCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerMMR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_GauntletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_DeckValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGServerLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_MatchChatStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_LobbyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerDecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_CardAchievements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PerformanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_GameOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchDisconnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_Disconnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerWelcomeDCG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCIdlePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRequestPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAllocateForMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCEnterMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerCancelAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCUpdateLobbyServerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAddTourneySpectator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAddTourneySpectatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRunTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRunTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerCrashSentinelFile_DCGGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_DraftCards_Pack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_DraftCards_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerMMR_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_MatchChatStats_ChatStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerDecks_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerDecks_Player_Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerDecks_Player_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_PlayerProgress_PointBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerSignoutData_GameOptions_GameOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatch_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestResults_TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_dcg_gcmessages_server_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_dcg_gcmessages_server_proto_goTypes,
		DependencyIndexes: file_artifact_dcg_gcmessages_server_proto_depIdxs,
		EnumInfos:         file_artifact_dcg_gcmessages_server_proto_enumTypes,
		MessageInfos:      file_artifact_dcg_gcmessages_server_proto_msgTypes,
	}.Build()
	File_artifact_dcg_gcmessages_server_proto = out.File
	file_artifact_dcg_gcmessages_server_proto_rawDesc = nil
	file_artifact_dcg_gcmessages_server_proto_goTypes = nil
	file_artifact_dcg_gcmessages_server_proto_depIdxs = nil
}
