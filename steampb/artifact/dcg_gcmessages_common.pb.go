// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: artifact/dcg_gcmessages_common.proto

package artifact

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDCGCommonMessages int32

const (
	EGCDCGCommonMessages_k_EMsgAnyToGCReportAsserts         EGCDCGCommonMessages = 7000
	EGCDCGCommonMessages_k_EMsgAnyToGCReportAssertsResponse EGCDCGCommonMessages = 7001
)

// Enum value maps for EGCDCGCommonMessages.
var (
	EGCDCGCommonMessages_name = map[int32]string{
		7000: "k_EMsgAnyToGCReportAsserts",
		7001: "k_EMsgAnyToGCReportAssertsResponse",
	}
	EGCDCGCommonMessages_value = map[string]int32{
		"k_EMsgAnyToGCReportAsserts":         7000,
		"k_EMsgAnyToGCReportAssertsResponse": 7001,
	}
)

func (x EGCDCGCommonMessages) Enum() *EGCDCGCommonMessages {
	p := new(EGCDCGCommonMessages)
	*p = x
	return p
}

func (x EGCDCGCommonMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDCGCommonMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[0].Descriptor()
}

func (EGCDCGCommonMessages) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[0]
}

func (x EGCDCGCommonMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDCGCommonMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDCGCommonMessages(num)
	return nil
}

// Deprecated: Use EGCDCGCommonMessages.Descriptor instead.
func (EGCDCGCommonMessages) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

type EDCGMatchMode int32

const (
	EDCGMatchMode_k_EDCGMatchMode_Unranked     EDCGMatchMode = 2
	EDCGMatchMode_k_EDCGMatchMode_Gauntlet     EDCGMatchMode = 3
	EDCGMatchMode_k_EDCGMatchMode_PrivateLobby EDCGMatchMode = 6
	EDCGMatchMode_k_EDCGMatchMode_Puzzle       EDCGMatchMode = 7
	EDCGMatchMode_k_EDCGMatchMode_AI           EDCGMatchMode = 8
	EDCGMatchMode_k_EDCGMatchMode_Tournament   EDCGMatchMode = 9
)

// Enum value maps for EDCGMatchMode.
var (
	EDCGMatchMode_name = map[int32]string{
		2: "k_EDCGMatchMode_Unranked",
		3: "k_EDCGMatchMode_Gauntlet",
		6: "k_EDCGMatchMode_PrivateLobby",
		7: "k_EDCGMatchMode_Puzzle",
		8: "k_EDCGMatchMode_AI",
		9: "k_EDCGMatchMode_Tournament",
	}
	EDCGMatchMode_value = map[string]int32{
		"k_EDCGMatchMode_Unranked":     2,
		"k_EDCGMatchMode_Gauntlet":     3,
		"k_EDCGMatchMode_PrivateLobby": 6,
		"k_EDCGMatchMode_Puzzle":       7,
		"k_EDCGMatchMode_AI":           8,
		"k_EDCGMatchMode_Tournament":   9,
	}
)

func (x EDCGMatchMode) Enum() *EDCGMatchMode {
	p := new(EDCGMatchMode)
	*p = x
	return p
}

func (x EDCGMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDCGMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[1].Descriptor()
}

func (EDCGMatchMode) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[1]
}

func (x EDCGMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDCGMatchMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDCGMatchMode(num)
	return nil
}

// Deprecated: Use EDCGMatchMode.Descriptor instead.
func (EDCGMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

type EDCGLobbyTeam int32

const (
	EDCGLobbyTeam_k_EDCGLobbyTeam_Team0     EDCGLobbyTeam = 0
	EDCGLobbyTeam_k_EDCGLobbyTeam_Team1     EDCGLobbyTeam = 1
	EDCGLobbyTeam_k_EDCGLobbyTeam_Spectator EDCGLobbyTeam = 16
)

// Enum value maps for EDCGLobbyTeam.
var (
	EDCGLobbyTeam_name = map[int32]string{
		0:  "k_EDCGLobbyTeam_Team0",
		1:  "k_EDCGLobbyTeam_Team1",
		16: "k_EDCGLobbyTeam_Spectator",
	}
	EDCGLobbyTeam_value = map[string]int32{
		"k_EDCGLobbyTeam_Team0":     0,
		"k_EDCGLobbyTeam_Team1":     1,
		"k_EDCGLobbyTeam_Spectator": 16,
	}
)

func (x EDCGLobbyTeam) Enum() *EDCGLobbyTeam {
	p := new(EDCGLobbyTeam)
	*p = x
	return p
}

func (x EDCGLobbyTeam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDCGLobbyTeam) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[2].Descriptor()
}

func (EDCGLobbyTeam) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[2]
}

func (x EDCGLobbyTeam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDCGLobbyTeam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDCGLobbyTeam(num)
	return nil
}

// Deprecated: Use EDCGLobbyTeam.Descriptor instead.
func (EDCGLobbyTeam) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

type EDCGLobbyTimer int32

const (
	EDCGLobbyTimer_k_eDCGLobbyTimer_Unspecified   EDCGLobbyTimer = 0
	EDCGLobbyTimer_k_eDCGLobbyTimer_Disabled      EDCGLobbyTimer = 1
	EDCGLobbyTimer_k_eDCGLobbyTimer_Default       EDCGLobbyTimer = 2
	EDCGLobbyTimer_k_eDCGLobbyTimer_Tournament    EDCGLobbyTimer = 3
	EDCGLobbyTimer_k_eDCGLobbyTimer_TimeAttack    EDCGLobbyTimer = 4
	EDCGLobbyTimer_k_eDCGLobbyTimer_ShotClockOnly EDCGLobbyTimer = 5
)

// Enum value maps for EDCGLobbyTimer.
var (
	EDCGLobbyTimer_name = map[int32]string{
		0: "k_eDCGLobbyTimer_Unspecified",
		1: "k_eDCGLobbyTimer_Disabled",
		2: "k_eDCGLobbyTimer_Default",
		3: "k_eDCGLobbyTimer_Tournament",
		4: "k_eDCGLobbyTimer_TimeAttack",
		5: "k_eDCGLobbyTimer_ShotClockOnly",
	}
	EDCGLobbyTimer_value = map[string]int32{
		"k_eDCGLobbyTimer_Unspecified":   0,
		"k_eDCGLobbyTimer_Disabled":      1,
		"k_eDCGLobbyTimer_Default":       2,
		"k_eDCGLobbyTimer_Tournament":    3,
		"k_eDCGLobbyTimer_TimeAttack":    4,
		"k_eDCGLobbyTimer_ShotClockOnly": 5,
	}
)

func (x EDCGLobbyTimer) Enum() *EDCGLobbyTimer {
	p := new(EDCGLobbyTimer)
	*p = x
	return p
}

func (x EDCGLobbyTimer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDCGLobbyTimer) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[3].Descriptor()
}

func (EDCGLobbyTimer) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[3]
}

func (x EDCGLobbyTimer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDCGLobbyTimer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDCGLobbyTimer(num)
	return nil
}

// Deprecated: Use EDCGLobbyTimer.Descriptor instead.
func (EDCGLobbyTimer) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

type ELobbyServerState int32

const (
	ELobbyServerState_k_eLobbyServerState_Assign    ELobbyServerState = 0
	ELobbyServerState_k_eLobbyServerState_InGame    ELobbyServerState = 1
	ELobbyServerState_k_eLobbyServerState_PostMatch ELobbyServerState = 2
	ELobbyServerState_k_eLobbyServerState_SignedOut ELobbyServerState = 3
	ELobbyServerState_k_eLobbyServerState_Abandoned ELobbyServerState = 4
)

// Enum value maps for ELobbyServerState.
var (
	ELobbyServerState_name = map[int32]string{
		0: "k_eLobbyServerState_Assign",
		1: "k_eLobbyServerState_InGame",
		2: "k_eLobbyServerState_PostMatch",
		3: "k_eLobbyServerState_SignedOut",
		4: "k_eLobbyServerState_Abandoned",
	}
	ELobbyServerState_value = map[string]int32{
		"k_eLobbyServerState_Assign":    0,
		"k_eLobbyServerState_InGame":    1,
		"k_eLobbyServerState_PostMatch": 2,
		"k_eLobbyServerState_SignedOut": 3,
		"k_eLobbyServerState_Abandoned": 4,
	}
)

func (x ELobbyServerState) Enum() *ELobbyServerState {
	p := new(ELobbyServerState)
	*p = x
	return p
}

func (x ELobbyServerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELobbyServerState) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[4].Descriptor()
}

func (ELobbyServerState) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[4]
}

func (x ELobbyServerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELobbyServerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELobbyServerState(num)
	return nil
}

// Deprecated: Use ELobbyServerState.Descriptor instead.
func (ELobbyServerState) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

type EGCLobbyData int32

const (
	EGCLobbyData_k_ELobbyData_PostMatchSurvey EGCLobbyData = 1
)

// Enum value maps for EGCLobbyData.
var (
	EGCLobbyData_name = map[int32]string{
		1: "k_ELobbyData_PostMatchSurvey",
	}
	EGCLobbyData_value = map[string]int32{
		"k_ELobbyData_PostMatchSurvey": 1,
	}
)

func (x EGCLobbyData) Enum() *EGCLobbyData {
	p := new(EGCLobbyData)
	*p = x
	return p
}

func (x EGCLobbyData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCLobbyData) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[5].Descriptor()
}

func (EGCLobbyData) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[5]
}

func (x EGCLobbyData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCLobbyData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCLobbyData(num)
	return nil
}

// Deprecated: Use EGCLobbyData.Descriptor instead.
func (EGCLobbyData) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

type DCG_COMBATLOG_TYPES int32

const (
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_INVALID                       DCG_COMBATLOG_TYPES = -1
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DAMAGE                        DCG_COMBATLOG_TYPES = 0
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_HEAL                          DCG_COMBATLOG_TYPES = 1
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DRAW                          DCG_COMBATLOG_TYPES = 2
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PASS                          DCG_COMBATLOG_TYPES = 3
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_COMBAT                        DCG_COMBATLOG_TYPES = 4
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_CREEP                    DCG_COMBATLOG_TYPES = 5
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_IMPROVEMENT              DCG_COMBATLOG_TYPES = 6
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_SPELL                    DCG_COMBATLOG_TYPES = 7
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_EQUIPMENT                DCG_COMBATLOG_TYPES = 8
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_PLAY_ABILITY                  DCG_COMBATLOG_TYPES = 9
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_GAIN_GOLD                     DCG_COMBATLOG_TYPES = 10
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BUY_ITEM                      DCG_COMBATLOG_TYPES = 11
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DISCARD                       DCG_COMBATLOG_TYPES = 12
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_ADD_MODIFIER                  DCG_COMBATLOG_TYPES = 13
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_REMOVE_MODIFIER               DCG_COMBATLOG_TYPES = 14
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_KILL                          DCG_COMBATLOG_TYPES = 15
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_CARD_MOVE                     DCG_COMBATLOG_TYPES = 16
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_CREEP_SPAWN                   DCG_COMBATLOG_TYPES = 17
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_DEATH                         DCG_COMBATLOG_TYPES = 18
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_COMBAT_OVER                   DCG_COMBATLOG_TYPES = 19
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING     DCG_COMBATLOG_TYPES = 20
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END DCG_COMBATLOG_TYPES = 21
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_UNIT_ENTERING_COMBAT          DCG_COMBATLOG_TYPES = 22
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_UNIT_LEAVING_COMBAT           DCG_COMBATLOG_TYPES = 23
	DCG_COMBATLOG_TYPES_DCG_COMBATLOG_TRIGGER_TRIGGERED             DCG_COMBATLOG_TYPES = 24
)

// Enum value maps for DCG_COMBATLOG_TYPES.
var (
	DCG_COMBATLOG_TYPES_name = map[int32]string{
		-1: "DCG_COMBATLOG_INVALID",
		0:  "DCG_COMBATLOG_DAMAGE",
		1:  "DCG_COMBATLOG_HEAL",
		2:  "DCG_COMBATLOG_DRAW",
		3:  "DCG_COMBATLOG_PASS",
		4:  "DCG_COMBATLOG_COMBAT",
		5:  "DCG_COMBATLOG_PLAY_CREEP",
		6:  "DCG_COMBATLOG_PLAY_IMPROVEMENT",
		7:  "DCG_COMBATLOG_PLAY_SPELL",
		8:  "DCG_COMBATLOG_PLAY_EQUIPMENT",
		9:  "DCG_COMBATLOG_PLAY_ABILITY",
		10: "DCG_COMBATLOG_GAIN_GOLD",
		11: "DCG_COMBATLOG_BUY_ITEM",
		12: "DCG_COMBATLOG_DISCARD",
		13: "DCG_COMBATLOG_ADD_MODIFIER",
		14: "DCG_COMBATLOG_REMOVE_MODIFIER",
		15: "DCG_COMBATLOG_KILL",
		16: "DCG_COMBATLOG_CARD_MOVE",
		17: "DCG_COMBATLOG_CREEP_SPAWN",
		18: "DCG_COMBATLOG_DEATH",
		19: "DCG_COMBATLOG_COMBAT_OVER",
		20: "DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING",
		21: "DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END",
		22: "DCG_COMBATLOG_UNIT_ENTERING_COMBAT",
		23: "DCG_COMBATLOG_UNIT_LEAVING_COMBAT",
		24: "DCG_COMBATLOG_TRIGGER_TRIGGERED",
	}
	DCG_COMBATLOG_TYPES_value = map[string]int32{
		"DCG_COMBATLOG_INVALID":                       -1,
		"DCG_COMBATLOG_DAMAGE":                        0,
		"DCG_COMBATLOG_HEAL":                          1,
		"DCG_COMBATLOG_DRAW":                          2,
		"DCG_COMBATLOG_PASS":                          3,
		"DCG_COMBATLOG_COMBAT":                        4,
		"DCG_COMBATLOG_PLAY_CREEP":                    5,
		"DCG_COMBATLOG_PLAY_IMPROVEMENT":              6,
		"DCG_COMBATLOG_PLAY_SPELL":                    7,
		"DCG_COMBATLOG_PLAY_EQUIPMENT":                8,
		"DCG_COMBATLOG_PLAY_ABILITY":                  9,
		"DCG_COMBATLOG_GAIN_GOLD":                     10,
		"DCG_COMBATLOG_BUY_ITEM":                      11,
		"DCG_COMBATLOG_DISCARD":                       12,
		"DCG_COMBATLOG_ADD_MODIFIER":                  13,
		"DCG_COMBATLOG_REMOVE_MODIFIER":               14,
		"DCG_COMBATLOG_KILL":                          15,
		"DCG_COMBATLOG_CARD_MOVE":                     16,
		"DCG_COMBATLOG_CREEP_SPAWN":                   17,
		"DCG_COMBATLOG_DEATH":                         18,
		"DCG_COMBATLOG_COMBAT_OVER":                   19,
		"DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING":     20,
		"DCG_COMBATLOG_BEGGINING_OF_SPELLCASTING_END": 21,
		"DCG_COMBATLOG_UNIT_ENTERING_COMBAT":          22,
		"DCG_COMBATLOG_UNIT_LEAVING_COMBAT":           23,
		"DCG_COMBATLOG_TRIGGER_TRIGGERED":             24,
	}
)

func (x DCG_COMBATLOG_TYPES) Enum() *DCG_COMBATLOG_TYPES {
	p := new(DCG_COMBATLOG_TYPES)
	*p = x
	return p
}

func (x DCG_COMBATLOG_TYPES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DCG_COMBATLOG_TYPES) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[6].Descriptor()
}

func (DCG_COMBATLOG_TYPES) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[6]
}

func (x DCG_COMBATLOG_TYPES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DCG_COMBATLOG_TYPES) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DCG_COMBATLOG_TYPES(num)
	return nil
}

// Deprecated: Use DCG_COMBATLOG_TYPES.Descriptor instead.
func (DCG_COMBATLOG_TYPES) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

type CSOGameAccountClient_EFlags int32

const (
	CSOGameAccountClient_k_eDeveloper CSOGameAccountClient_EFlags = 1
)

// Enum value maps for CSOGameAccountClient_EFlags.
var (
	CSOGameAccountClient_EFlags_name = map[int32]string{
		1: "k_eDeveloper",
	}
	CSOGameAccountClient_EFlags_value = map[string]int32{
		"k_eDeveloper": 1,
	}
)

func (x CSOGameAccountClient_EFlags) Enum() *CSOGameAccountClient_EFlags {
	p := new(CSOGameAccountClient_EFlags)
	*p = x
	return p
}

func (x CSOGameAccountClient_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOGameAccountClient_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[7].Descriptor()
}

func (CSOGameAccountClient_EFlags) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[7]
}

func (x CSOGameAccountClient_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOGameAccountClient_EFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOGameAccountClient_EFlags(num)
	return nil
}

// Deprecated: Use CSOGameAccountClient_EFlags.Descriptor instead.
func (CSOGameAccountClient_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{3, 0}
}

type CSOTourneyMembership_EStatus int32

const (
	CSOTourneyMembership_k_eConfigure          CSOTourneyMembership_EStatus = 1
	CSOTourneyMembership_k_eInvites            CSOTourneyMembership_EStatus = 2
	CSOTourneyMembership_k_eSeeding            CSOTourneyMembership_EStatus = 3
	CSOTourneyMembership_k_eLimited            CSOTourneyMembership_EStatus = 4
	CSOTourneyMembership_k_eEditPhase          CSOTourneyMembership_EStatus = 5
	CSOTourneyMembership_k_ePlaying            CSOTourneyMembership_EStatus = 6
	CSOTourneyMembership_k_eWaiting            CSOTourneyMembership_EStatus = 7
	CSOTourneyMembership_k_eClosed             CSOTourneyMembership_EStatus = 8
	CSOTourneyMembership_k_eInvites_Registered CSOTourneyMembership_EStatus = 9
	CSOTourneyMembership_k_eLimited_Registered CSOTourneyMembership_EStatus = 10
)

// Enum value maps for CSOTourneyMembership_EStatus.
var (
	CSOTourneyMembership_EStatus_name = map[int32]string{
		1:  "k_eConfigure",
		2:  "k_eInvites",
		3:  "k_eSeeding",
		4:  "k_eLimited",
		5:  "k_eEditPhase",
		6:  "k_ePlaying",
		7:  "k_eWaiting",
		8:  "k_eClosed",
		9:  "k_eInvites_Registered",
		10: "k_eLimited_Registered",
	}
	CSOTourneyMembership_EStatus_value = map[string]int32{
		"k_eConfigure":          1,
		"k_eInvites":            2,
		"k_eSeeding":            3,
		"k_eLimited":            4,
		"k_eEditPhase":          5,
		"k_ePlaying":            6,
		"k_eWaiting":            7,
		"k_eClosed":             8,
		"k_eInvites_Registered": 9,
		"k_eLimited_Registered": 10,
	}
)

func (x CSOTourneyMembership_EStatus) Enum() *CSOTourneyMembership_EStatus {
	p := new(CSOTourneyMembership_EStatus)
	*p = x
	return p
}

func (x CSOTourneyMembership_EStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSOTourneyMembership_EStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[8].Descriptor()
}

func (CSOTourneyMembership_EStatus) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[8]
}

func (x CSOTourneyMembership_EStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSOTourneyMembership_EStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSOTourneyMembership_EStatus(num)
	return nil
}

// Deprecated: Use CSOTourneyMembership_EStatus.Descriptor instead.
func (CSOTourneyMembership_EStatus) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{8, 0}
}

type CMsgDeckValidator_ERarity int32

const (
	CMsgDeckValidator_eRarity_Common   CMsgDeckValidator_ERarity = 1
	CMsgDeckValidator_eRarity_Uncommon CMsgDeckValidator_ERarity = 2
	CMsgDeckValidator_eRarity_Rare     CMsgDeckValidator_ERarity = 3
)

// Enum value maps for CMsgDeckValidator_ERarity.
var (
	CMsgDeckValidator_ERarity_name = map[int32]string{
		1: "eRarity_Common",
		2: "eRarity_Uncommon",
		3: "eRarity_Rare",
	}
	CMsgDeckValidator_ERarity_value = map[string]int32{
		"eRarity_Common":   1,
		"eRarity_Uncommon": 2,
		"eRarity_Rare":     3,
	}
)

func (x CMsgDeckValidator_ERarity) Enum() *CMsgDeckValidator_ERarity {
	p := new(CMsgDeckValidator_ERarity)
	*p = x
	return p
}

func (x CMsgDeckValidator_ERarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDeckValidator_ERarity) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[9].Descriptor()
}

func (CMsgDeckValidator_ERarity) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[9]
}

func (x CMsgDeckValidator_ERarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDeckValidator_ERarity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDeckValidator_ERarity(num)
	return nil
}

// Deprecated: Use CMsgDeckValidator_ERarity.Descriptor instead.
func (CMsgDeckValidator_ERarity) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{12, 0}
}

type CMsgDeckValidator_EColor int32

const (
	CMsgDeckValidator_eColor_Red   CMsgDeckValidator_EColor = 0
	CMsgDeckValidator_eColor_Blue  CMsgDeckValidator_EColor = 1
	CMsgDeckValidator_eColor_Green CMsgDeckValidator_EColor = 2
	CMsgDeckValidator_eColor_Black CMsgDeckValidator_EColor = 3
)

// Enum value maps for CMsgDeckValidator_EColor.
var (
	CMsgDeckValidator_EColor_name = map[int32]string{
		0: "eColor_Red",
		1: "eColor_Blue",
		2: "eColor_Green",
		3: "eColor_Black",
	}
	CMsgDeckValidator_EColor_value = map[string]int32{
		"eColor_Red":   0,
		"eColor_Blue":  1,
		"eColor_Green": 2,
		"eColor_Black": 3,
	}
)

func (x CMsgDeckValidator_EColor) Enum() *CMsgDeckValidator_EColor {
	p := new(CMsgDeckValidator_EColor)
	*p = x
	return p
}

func (x CMsgDeckValidator_EColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDeckValidator_EColor) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[10].Descriptor()
}

func (CMsgDeckValidator_EColor) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[10]
}

func (x CMsgDeckValidator_EColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDeckValidator_EColor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDeckValidator_EColor(num)
	return nil
}

// Deprecated: Use CMsgDeckValidator_EColor.Descriptor instead.
func (CMsgDeckValidator_EColor) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{12, 1}
}

type CMsgLimitedFormat_EGrantType int32

const (
	CMsgLimitedFormat_kGrant_Unknown CMsgLimitedFormat_EGrantType = 0
	CMsgLimitedFormat_kGrant_Hero    CMsgLimitedFormat_EGrantType = 1
	CMsgLimitedFormat_kGrant_Card    CMsgLimitedFormat_EGrantType = 2
	CMsgLimitedFormat_kGrant_Item    CMsgLimitedFormat_EGrantType = 3
	CMsgLimitedFormat_kGrant_Pack    CMsgLimitedFormat_EGrantType = 4
)

// Enum value maps for CMsgLimitedFormat_EGrantType.
var (
	CMsgLimitedFormat_EGrantType_name = map[int32]string{
		0: "kGrant_Unknown",
		1: "kGrant_Hero",
		2: "kGrant_Card",
		3: "kGrant_Item",
		4: "kGrant_Pack",
	}
	CMsgLimitedFormat_EGrantType_value = map[string]int32{
		"kGrant_Unknown": 0,
		"kGrant_Hero":    1,
		"kGrant_Card":    2,
		"kGrant_Item":    3,
		"kGrant_Pack":    4,
	}
)

func (x CMsgLimitedFormat_EGrantType) Enum() *CMsgLimitedFormat_EGrantType {
	p := new(CMsgLimitedFormat_EGrantType)
	*p = x
	return p
}

func (x CMsgLimitedFormat_EGrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgLimitedFormat_EGrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[11].Descriptor()
}

func (CMsgLimitedFormat_EGrantType) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[11]
}

func (x CMsgLimitedFormat_EGrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgLimitedFormat_EGrantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgLimitedFormat_EGrantType(num)
	return nil
}

// Deprecated: Use CMsgLimitedFormat_EGrantType.Descriptor instead.
func (CMsgLimitedFormat_EGrantType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{16, 0}
}

type CDCGTourney_EStage int32

const (
	CDCGTourney_k_eStage_Configure  CDCGTourney_EStage = 10
	CDCGTourney_k_eStage_Invites    CDCGTourney_EStage = 20
	CDCGTourney_k_eStage_Seeding    CDCGTourney_EStage = 30
	CDCGTourney_k_eStage_PlayPhases CDCGTourney_EStage = 40
	CDCGTourney_k_eStage_Closed     CDCGTourney_EStage = 50
)

// Enum value maps for CDCGTourney_EStage.
var (
	CDCGTourney_EStage_name = map[int32]string{
		10: "k_eStage_Configure",
		20: "k_eStage_Invites",
		30: "k_eStage_Seeding",
		40: "k_eStage_PlayPhases",
		50: "k_eStage_Closed",
	}
	CDCGTourney_EStage_value = map[string]int32{
		"k_eStage_Configure":  10,
		"k_eStage_Invites":    20,
		"k_eStage_Seeding":    30,
		"k_eStage_PlayPhases": 40,
		"k_eStage_Closed":     50,
	}
)

func (x CDCGTourney_EStage) Enum() *CDCGTourney_EStage {
	p := new(CDCGTourney_EStage)
	*p = x
	return p
}

func (x CDCGTourney_EStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCGTourney_EStage) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[12].Descriptor()
}

func (CDCGTourney_EStage) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[12]
}

func (x CDCGTourney_EStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCGTourney_EStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCGTourney_EStage(num)
	return nil
}

// Deprecated: Use CDCGTourney_EStage.Descriptor instead.
func (CDCGTourney_EStage) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 0}
}

type CDCGTourney_EPhaseStage int32

const (
	CDCGTourney_k_ePhaseStage_Pending  CDCGTourney_EPhaseStage = 10
	CDCGTourney_k_ePhaseStage_Limited  CDCGTourney_EPhaseStage = 20
	CDCGTourney_k_ePhaseStage_Edit     CDCGTourney_EPhaseStage = 30
	CDCGTourney_k_ePhaseStage_Playing  CDCGTourney_EPhaseStage = 40
	CDCGTourney_k_ePhaseStage_Complete CDCGTourney_EPhaseStage = 50
)

// Enum value maps for CDCGTourney_EPhaseStage.
var (
	CDCGTourney_EPhaseStage_name = map[int32]string{
		10: "k_ePhaseStage_Pending",
		20: "k_ePhaseStage_Limited",
		30: "k_ePhaseStage_Edit",
		40: "k_ePhaseStage_Playing",
		50: "k_ePhaseStage_Complete",
	}
	CDCGTourney_EPhaseStage_value = map[string]int32{
		"k_ePhaseStage_Pending":  10,
		"k_ePhaseStage_Limited":  20,
		"k_ePhaseStage_Edit":     30,
		"k_ePhaseStage_Playing":  40,
		"k_ePhaseStage_Complete": 50,
	}
)

func (x CDCGTourney_EPhaseStage) Enum() *CDCGTourney_EPhaseStage {
	p := new(CDCGTourney_EPhaseStage)
	*p = x
	return p
}

func (x CDCGTourney_EPhaseStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCGTourney_EPhaseStage) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[13].Descriptor()
}

func (CDCGTourney_EPhaseStage) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[13]
}

func (x CDCGTourney_EPhaseStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCGTourney_EPhaseStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCGTourney_EPhaseStage(num)
	return nil
}

// Deprecated: Use CDCGTourney_EPhaseStage.Descriptor instead.
func (CDCGTourney_EPhaseStage) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 1}
}

type CDCGTourney_EFormat int32

const (
	CDCGTourney_k_eFormat_Invalid            CDCGTourney_EFormat = 0
	CDCGTourney_k_eFormat_Bracket_SingleElim CDCGTourney_EFormat = 1
	CDCGTourney_k_eFormat_Swiss              CDCGTourney_EFormat = 2
	CDCGTourney_k_eFormat_FreeForAll         CDCGTourney_EFormat = 3
)

// Enum value maps for CDCGTourney_EFormat.
var (
	CDCGTourney_EFormat_name = map[int32]string{
		0: "k_eFormat_Invalid",
		1: "k_eFormat_Bracket_SingleElim",
		2: "k_eFormat_Swiss",
		3: "k_eFormat_FreeForAll",
	}
	CDCGTourney_EFormat_value = map[string]int32{
		"k_eFormat_Invalid":            0,
		"k_eFormat_Bracket_SingleElim": 1,
		"k_eFormat_Swiss":              2,
		"k_eFormat_FreeForAll":         3,
	}
)

func (x CDCGTourney_EFormat) Enum() *CDCGTourney_EFormat {
	p := new(CDCGTourney_EFormat)
	*p = x
	return p
}

func (x CDCGTourney_EFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCGTourney_EFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[14].Descriptor()
}

func (CDCGTourney_EFormat) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[14]
}

func (x CDCGTourney_EFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCGTourney_EFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCGTourney_EFormat(num)
	return nil
}

// Deprecated: Use CDCGTourney_EFormat.Descriptor instead.
func (CDCGTourney_EFormat) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 2}
}

type CMsgMatchData_EEndReason int32

const (
	CMsgMatchData_k_EEndReason_TeamWin              CMsgMatchData_EEndReason = 0
	CMsgMatchData_k_EEndReason_Tie                  CMsgMatchData_EEndReason = 1
	CMsgMatchData_k_EEndReason_AllAbandoned         CMsgMatchData_EEndReason = 2
	CMsgMatchData_k_EEndReason_NetworkIssues        CMsgMatchData_EEndReason = 3
	CMsgMatchData_k_EEndReason_MatchLength          CMsgMatchData_EEndReason = 4
	CMsgMatchData_k_EEndReason_PlayerNeverConnected CMsgMatchData_EEndReason = 5
)

// Enum value maps for CMsgMatchData_EEndReason.
var (
	CMsgMatchData_EEndReason_name = map[int32]string{
		0: "k_EEndReason_TeamWin",
		1: "k_EEndReason_Tie",
		2: "k_EEndReason_AllAbandoned",
		3: "k_EEndReason_NetworkIssues",
		4: "k_EEndReason_MatchLength",
		5: "k_EEndReason_PlayerNeverConnected",
	}
	CMsgMatchData_EEndReason_value = map[string]int32{
		"k_EEndReason_TeamWin":              0,
		"k_EEndReason_Tie":                  1,
		"k_EEndReason_AllAbandoned":         2,
		"k_EEndReason_NetworkIssues":        3,
		"k_EEndReason_MatchLength":          4,
		"k_EEndReason_PlayerNeverConnected": 5,
	}
)

func (x CMsgMatchData_EEndReason) Enum() *CMsgMatchData_EEndReason {
	p := new(CMsgMatchData_EEndReason)
	*p = x
	return p
}

func (x CMsgMatchData_EEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgMatchData_EEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_dcg_gcmessages_common_proto_enumTypes[15].Descriptor()
}

func (CMsgMatchData_EEndReason) Type() protoreflect.EnumType {
	return &file_artifact_dcg_gcmessages_common_proto_enumTypes[15]
}

func (x CMsgMatchData_EEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgMatchData_EEndReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgMatchData_EEndReason(num)
	return nil
}

// Deprecated: Use CMsgMatchData_EEndReason.Descriptor instead.
func (CMsgMatchData_EEndReason) EnumDescriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{23, 0}
}

type CExtraMsgBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType      *uint32 `protobuf:"varint,1,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	Contents     []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	MsgKey       *uint64 `protobuf:"varint,3,opt,name=msg_key,json=msgKey" json:"msg_key,omitempty"`
	IsCompressed *bool   `protobuf:"varint,4,opt,name=is_compressed,json=isCompressed" json:"is_compressed,omitempty"`
}

func (x *CExtraMsgBlock) Reset() {
	*x = CExtraMsgBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CExtraMsgBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CExtraMsgBlock) ProtoMessage() {}

func (x *CExtraMsgBlock) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CExtraMsgBlock.ProtoReflect.Descriptor instead.
func (*CExtraMsgBlock) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

func (x *CExtraMsgBlock) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *CExtraMsgBlock) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *CExtraMsgBlock) GetMsgKey() uint64 {
	if x != nil && x.MsgKey != nil {
		return *x.MsgKey
	}
	return 0
}

func (x *CExtraMsgBlock) GetIsCompressed() bool {
	if x != nil && x.IsCompressed != nil {
		return *x.IsCompressed
	}
	return false
}

type CSODCGLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members         []*CSODCGLobby_Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	ExtraMessages   []*CExtraMsgBlock     `protobuf:"bytes,2,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId   *uint64               `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId         *uint64               `protobuf:"varint,5,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId         *uint64               `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GauntletId      *uint32               `protobuf:"varint,7,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ServerState     *ELobbyServerState    `protobuf:"varint,8,opt,name=server_state,json=serverState,enum=artifact.ELobbyServerState,def=0" json:"server_state,omitempty"`
	ReplaySalt      *uint32               `protobuf:"fixed32,9,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	MatchMode       *EDCGMatchMode        `protobuf:"varint,10,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
	UdpConnectIp    *uint32               `protobuf:"varint,11,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort  *uint32               `protobuf:"varint,12,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
	TourneyId       *uint64               `protobuf:"varint,13,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TourneyPhaseId  *uint32               `protobuf:"varint,14,opt,name=tourney_phase_id,json=tourneyPhaseId" json:"tourney_phase_id,omitempty"`
	TourneySeriesId *uint32               `protobuf:"varint,15,opt,name=tourney_series_id,json=tourneySeriesId" json:"tourney_series_id,omitempty"`
}

// Default values for CSODCGLobby fields.
const (
	Default_CSODCGLobby_ServerState = ELobbyServerState_k_eLobbyServerState_Assign
	Default_CSODCGLobby_MatchMode   = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CSODCGLobby) Reset() {
	*x = CSODCGLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGLobby) ProtoMessage() {}

func (x *CSODCGLobby) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGLobby.ProtoReflect.Descriptor instead.
func (*CSODCGLobby) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

func (x *CSODCGLobby) GetMembers() []*CSODCGLobby_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODCGLobby) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODCGLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSODCGLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODCGLobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODCGLobby) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CSODCGLobby) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return Default_CSODCGLobby_ServerState
}

func (x *CSODCGLobby) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CSODCGLobby) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CSODCGLobby_MatchMode
}

func (x *CSODCGLobby) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CSODCGLobby) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

func (x *CSODCGLobby) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CSODCGLobby) GetTourneyPhaseId() uint32 {
	if x != nil && x.TourneyPhaseId != nil {
		return *x.TourneyPhaseId
	}
	return 0
}

func (x *CSODCGLobby) GetTourneySeriesId() uint32 {
	if x != nil && x.TourneySeriesId != nil {
		return *x.TourneySeriesId
	}
	return 0
}

type CLobbyData_PostMatchSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surveys []*CLobbyData_PostMatchSurvey_PlayerSurvey `protobuf:"bytes,1,rep,name=surveys" json:"surveys,omitempty"`
}

func (x *CLobbyData_PostMatchSurvey) Reset() {
	*x = CLobbyData_PostMatchSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyData_PostMatchSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyData_PostMatchSurvey) ProtoMessage() {}

func (x *CLobbyData_PostMatchSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyData_PostMatchSurvey.ProtoReflect.Descriptor instead.
func (*CLobbyData_PostMatchSurvey) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

func (x *CLobbyData_PostMatchSurvey) GetSurveys() []*CLobbyData_PostMatchSurvey_PlayerSurvey {
	if x != nil {
		return x.Surveys
	}
	return nil
}

type CSOGameAccountClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Flags               *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	InitialGrantAckDef  *uint32 `protobuf:"varint,5,opt,name=initial_grant_ack_def,json=initialGrantAckDef" json:"initial_grant_ack_def,omitempty"`
	RecyclingProgress   *uint32 `protobuf:"varint,6,opt,name=recycling_progress,json=recyclingProgress" json:"recycling_progress,omitempty"`
	ProgressLevel       *uint32 `protobuf:"varint,7,opt,name=progress_level,json=progressLevel" json:"progress_level,omitempty"`
	ProgressXp          *uint32 `protobuf:"varint,8,opt,name=progress_xp,json=progressXp" json:"progress_xp,omitempty"`
	ConstructedMmrLevel *uint32 `protobuf:"varint,9,opt,name=constructed_mmr_level,json=constructedMmrLevel" json:"constructed_mmr_level,omitempty"`
	LastWinBounusTime   *uint32 `protobuf:"varint,10,opt,name=last_win_bounus_time,json=lastWinBounusTime" json:"last_win_bounus_time,omitempty"`
	MatchWinStreak      *uint32 `protobuf:"varint,11,opt,name=match_win_streak,json=matchWinStreak" json:"match_win_streak,omitempty"`
	BonusPeriodWins     *uint32 `protobuf:"varint,12,opt,name=bonus_period_wins,json=bonusPeriodWins" json:"bonus_period_wins,omitempty"`
	PlayerBadge         *uint32 `protobuf:"varint,13,opt,name=player_badge,json=playerBadge" json:"player_badge,omitempty"`
	DraftMmrLevel       *uint32 `protobuf:"varint,14,opt,name=draft_mmr_level,json=draftMmrLevel" json:"draft_mmr_level,omitempty"`
}

func (x *CSOGameAccountClient) Reset() {
	*x = CSOGameAccountClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOGameAccountClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOGameAccountClient) ProtoMessage() {}

func (x *CSOGameAccountClient) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOGameAccountClient.ProtoReflect.Descriptor instead.
func (*CSOGameAccountClient) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

func (x *CSOGameAccountClient) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOGameAccountClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSOGameAccountClient) GetInitialGrantAckDef() uint32 {
	if x != nil && x.InitialGrantAckDef != nil {
		return *x.InitialGrantAckDef
	}
	return 0
}

func (x *CSOGameAccountClient) GetRecyclingProgress() uint32 {
	if x != nil && x.RecyclingProgress != nil {
		return *x.RecyclingProgress
	}
	return 0
}

func (x *CSOGameAccountClient) GetProgressLevel() uint32 {
	if x != nil && x.ProgressLevel != nil {
		return *x.ProgressLevel
	}
	return 0
}

func (x *CSOGameAccountClient) GetProgressXp() uint32 {
	if x != nil && x.ProgressXp != nil {
		return *x.ProgressXp
	}
	return 0
}

func (x *CSOGameAccountClient) GetConstructedMmrLevel() uint32 {
	if x != nil && x.ConstructedMmrLevel != nil {
		return *x.ConstructedMmrLevel
	}
	return 0
}

func (x *CSOGameAccountClient) GetLastWinBounusTime() uint32 {
	if x != nil && x.LastWinBounusTime != nil {
		return *x.LastWinBounusTime
	}
	return 0
}

func (x *CSOGameAccountClient) GetMatchWinStreak() uint32 {
	if x != nil && x.MatchWinStreak != nil {
		return *x.MatchWinStreak
	}
	return 0
}

func (x *CSOGameAccountClient) GetBonusPeriodWins() uint32 {
	if x != nil && x.BonusPeriodWins != nil {
		return *x.BonusPeriodWins
	}
	return 0
}

func (x *CSOGameAccountClient) GetPlayerBadge() uint32 {
	if x != nil && x.PlayerBadge != nil {
		return *x.PlayerBadge
	}
	return 0
}

func (x *CSOGameAccountClient) GetDraftMmrLevel() uint32 {
	if x != nil && x.DraftMmrLevel != nil {
		return *x.DraftMmrLevel
	}
	return 0
}

type CSOGauntlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GauntletId       *uint32 `protobuf:"varint,2,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ActiveLobbyId    *uint64 `protobuf:"varint,3,opt,name=active_lobby_id,json=activeLobbyId" json:"active_lobby_id,omitempty"`
	AbandonedTime    *uint32 `protobuf:"varint,4,opt,name=abandoned_time,json=abandonedTime" json:"abandoned_time,omitempty"`
	DeckBytes        []byte  `protobuf:"bytes,5,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	GauntletInstance *uint64 `protobuf:"varint,9,opt,name=gauntlet_instance,json=gauntletInstance" json:"gauntlet_instance,omitempty"`
	EntryType        *uint32 `protobuf:"varint,10,opt,name=entry_type,json=entryType" json:"entry_type,omitempty"`
	LimitedInstance  *uint64 `protobuf:"varint,11,opt,name=limited_instance,json=limitedInstance" json:"limited_instance,omitempty"`
	Wins             *uint32 `protobuf:"varint,12,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32 `protobuf:"varint,13,opt,name=losses" json:"losses,omitempty"`
	WinsMask         *uint64 `protobuf:"varint,14,opt,name=wins_mask,json=winsMask" json:"wins_mask,omitempty"`
	SelectRandomDeck *bool   `protobuf:"varint,15,opt,name=select_random_deck,json=selectRandomDeck" json:"select_random_deck,omitempty"`
}

func (x *CSOGauntlet) Reset() {
	*x = CSOGauntlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOGauntlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOGauntlet) ProtoMessage() {}

func (x *CSOGauntlet) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOGauntlet.ProtoReflect.Descriptor instead.
func (*CSOGauntlet) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

func (x *CSOGauntlet) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOGauntlet) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CSOGauntlet) GetActiveLobbyId() uint64 {
	if x != nil && x.ActiveLobbyId != nil {
		return *x.ActiveLobbyId
	}
	return 0
}

func (x *CSOGauntlet) GetAbandonedTime() uint32 {
	if x != nil && x.AbandonedTime != nil {
		return *x.AbandonedTime
	}
	return 0
}

func (x *CSOGauntlet) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CSOGauntlet) GetGauntletInstance() uint64 {
	if x != nil && x.GauntletInstance != nil {
		return *x.GauntletInstance
	}
	return 0
}

func (x *CSOGauntlet) GetEntryType() uint32 {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return 0
}

func (x *CSOGauntlet) GetLimitedInstance() uint64 {
	if x != nil && x.LimitedInstance != nil {
		return *x.LimitedInstance
	}
	return 0
}

func (x *CSOGauntlet) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CSOGauntlet) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CSOGauntlet) GetWinsMask() uint64 {
	if x != nil && x.WinsMask != nil {
		return *x.WinsMask
	}
	return 0
}

func (x *CSOGauntlet) GetSelectRandomDeck() bool {
	if x != nil && x.SelectRandomDeck != nil {
		return *x.SelectRandomDeck
	}
	return false
}

type CSOPhantomItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LimitedPool *uint64 `protobuf:"varint,2,opt,name=limited_pool,json=limitedPool" json:"limited_pool,omitempty"`
	DefIndex    *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	PhantomId   *uint64 `protobuf:"varint,4,opt,name=phantom_id,json=phantomId" json:"phantom_id,omitempty"`
}

func (x *CSOPhantomItem) Reset() {
	*x = CSOPhantomItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOPhantomItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOPhantomItem) ProtoMessage() {}

func (x *CSOPhantomItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOPhantomItem.ProtoReflect.Descriptor instead.
func (*CSOPhantomItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

func (x *CSOPhantomItem) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOPhantomItem) GetLimitedPool() uint64 {
	if x != nil && x.LimitedPool != nil {
		return *x.LimitedPool
	}
	return 0
}

func (x *CSOPhantomItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CSOPhantomItem) GetPhantomId() uint64 {
	if x != nil && x.PhantomId != nil {
		return *x.PhantomId
	}
	return 0
}

type CSOCardAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AchievementId *uint32 `protobuf:"varint,2,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Progress      *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
}

func (x *CSOCardAchievement) Reset() {
	*x = CSOCardAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOCardAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOCardAchievement) ProtoMessage() {}

func (x *CSOCardAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOCardAchievement.ProtoReflect.Descriptor instead.
func (*CSOCardAchievement) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

func (x *CSOCardAchievement) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOCardAchievement) GetAchievementId() uint32 {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return 0
}

func (x *CSOCardAchievement) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CSOPlayerLimitedProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LimitedInstanceId *uint64 `protobuf:"varint,2,opt,name=limited_instance_id,json=limitedInstanceId" json:"limited_instance_id,omitempty"`
	LimitedPoolId     *uint64 `protobuf:"varint,3,opt,name=limited_pool_id,json=limitedPoolId" json:"limited_pool_id,omitempty"`
	LimitedFormat     *uint32 `protobuf:"varint,4,opt,name=limited_format,json=limitedFormat" json:"limited_format,omitempty"`
	Progress          *uint32 `protobuf:"varint,5,opt,name=progress" json:"progress,omitempty"`
	Flags             *uint32 `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
}

func (x *CSOPlayerLimitedProgress) Reset() {
	*x = CSOPlayerLimitedProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOPlayerLimitedProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOPlayerLimitedProgress) ProtoMessage() {}

func (x *CSOPlayerLimitedProgress) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOPlayerLimitedProgress.ProtoReflect.Descriptor instead.
func (*CSOPlayerLimitedProgress) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

func (x *CSOPlayerLimitedProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOPlayerLimitedProgress) GetLimitedInstanceId() uint64 {
	if x != nil && x.LimitedInstanceId != nil {
		return *x.LimitedInstanceId
	}
	return 0
}

func (x *CSOPlayerLimitedProgress) GetLimitedPoolId() uint64 {
	if x != nil && x.LimitedPoolId != nil {
		return *x.LimitedPoolId
	}
	return 0
}

func (x *CSOPlayerLimitedProgress) GetLimitedFormat() uint32 {
	if x != nil && x.LimitedFormat != nil {
		return *x.LimitedFormat
	}
	return 0
}

func (x *CSOPlayerLimitedProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CSOPlayerLimitedProgress) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CSOTourneyMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32                       `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TourneyId     *uint64                       `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PlayerStatus  *uint32                       `protobuf:"varint,3,opt,name=player_status,json=playerStatus" json:"player_status,omitempty"`
	TourneyStatus *CSOTourneyMembership_EStatus `protobuf:"varint,4,opt,name=tourney_status,json=tourneyStatus,enum=artifact.CSOTourneyMembership_EStatus,def=1" json:"tourney_status,omitempty"`
	JoinedTime    *uint32                       `protobuf:"varint,5,opt,name=joined_time,json=joinedTime" json:"joined_time,omitempty"`
	OpenTourney   *uint32                       `protobuf:"varint,6,opt,name=open_tourney,json=openTourney" json:"open_tourney,omitempty"`
}

// Default values for CSOTourneyMembership fields.
const (
	Default_CSOTourneyMembership_TourneyStatus = CSOTourneyMembership_k_eConfigure
)

func (x *CSOTourneyMembership) Reset() {
	*x = CSOTourneyMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTourneyMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTourneyMembership) ProtoMessage() {}

func (x *CSOTourneyMembership) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTourneyMembership.ProtoReflect.Descriptor instead.
func (*CSOTourneyMembership) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

func (x *CSOTourneyMembership) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTourneyMembership) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CSOTourneyMembership) GetPlayerStatus() uint32 {
	if x != nil && x.PlayerStatus != nil {
		return *x.PlayerStatus
	}
	return 0
}

func (x *CSOTourneyMembership) GetTourneyStatus() CSOTourneyMembership_EStatus {
	if x != nil && x.TourneyStatus != nil {
		return *x.TourneyStatus
	}
	return Default_CSOTourneyMembership_TourneyStatus
}

func (x *CSOTourneyMembership) GetJoinedTime() uint32 {
	if x != nil && x.JoinedTime != nil {
		return *x.JoinedTime
	}
	return 0
}

func (x *CSOTourneyMembership) GetOpenTourney() uint32 {
	if x != nil && x.OpenTourney != nil {
		return *x.OpenTourney
	}
	return 0
}

type CSOTourneyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TourneyId   *uint64 `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	IsFull      *bool   `protobuf:"varint,3,opt,name=is_full,json=isFull" json:"is_full,omitempty"`
	InvitedBy   *uint32 `protobuf:"varint,4,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	RightsFlags *uint32 `protobuf:"varint,5,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
}

func (x *CSOTourneyInvite) Reset() {
	*x = CSOTourneyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOTourneyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOTourneyInvite) ProtoMessage() {}

func (x *CSOTourneyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOTourneyInvite.ProtoReflect.Descriptor instead.
func (*CSOTourneyInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

func (x *CSOTourneyInvite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOTourneyInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CSOTourneyInvite) GetIsFull() bool {
	if x != nil && x.IsFull != nil {
		return *x.IsFull
	}
	return false
}

func (x *CSOTourneyInvite) GetInvitedBy() uint32 {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return 0
}

func (x *CSOTourneyInvite) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

type CMsgStartFindingMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId      *uint32        `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ServerSearchKey *string        `protobuf:"bytes,2,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	ClientVersion   *uint32        `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	MatchMode       *EDCGMatchMode `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=artifact.EDCGMatchMode,def=2" json:"match_mode,omitempty"`
	DeckData        []byte         `protobuf:"bytes,5,opt,name=deck_data,json=deckData" json:"deck_data,omitempty"`
	IsAnonymous     *bool          `protobuf:"varint,6,opt,name=is_anonymous,json=isAnonymous" json:"is_anonymous,omitempty"`
}

// Default values for CMsgStartFindingMatchInfo fields.
const (
	Default_CMsgStartFindingMatchInfo_MatchMode = EDCGMatchMode_k_EDCGMatchMode_Unranked
)

func (x *CMsgStartFindingMatchInfo) Reset() {
	*x = CMsgStartFindingMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStartFindingMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStartFindingMatchInfo) ProtoMessage() {}

func (x *CMsgStartFindingMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStartFindingMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgStartFindingMatchInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgStartFindingMatchInfo) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgStartFindingMatchInfo) GetServerSearchKey() string {
	if x != nil && x.ServerSearchKey != nil {
		return *x.ServerSearchKey
	}
	return ""
}

func (x *CMsgStartFindingMatchInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgStartFindingMatchInfo) GetMatchMode() EDCGMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgStartFindingMatchInfo_MatchMode
}

func (x *CMsgStartFindingMatchInfo) GetDeckData() []byte {
	if x != nil {
		return x.DeckData
	}
	return nil
}

func (x *CMsgStartFindingMatchInfo) GetIsAnonymous() bool {
	if x != nil && x.IsAnonymous != nil {
		return *x.IsAnonymous
	}
	return false
}

type CMsgDCGCombatLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *DCG_COMBATLOG_TYPES `protobuf:"varint,1,opt,name=type,enum=artifact.DCG_COMBATLOG_TYPES,def=-1" json:"type,omitempty"`
	TargetCardId         *uint32              `protobuf:"varint,2,opt,name=target_card_id,json=targetCardId" json:"target_card_id,omitempty"`
	TargetObjectId       *uint32              `protobuf:"varint,3,opt,name=target_object_id,json=targetObjectId" json:"target_object_id,omitempty"`
	TargetOwner          *uint32              `protobuf:"varint,4,opt,name=target_owner,json=targetOwner" json:"target_owner,omitempty"`
	SourceCardId         *uint32              `protobuf:"varint,5,opt,name=source_card_id,json=sourceCardId" json:"source_card_id,omitempty"`
	SourceObjectId       *uint32              `protobuf:"varint,6,opt,name=source_object_id,json=sourceObjectId" json:"source_object_id,omitempty"`
	SourceOwner          *uint32              `protobuf:"varint,7,opt,name=source_owner,json=sourceOwner" json:"source_owner,omitempty"`
	Value                *uint32              `protobuf:"varint,8,opt,name=value" json:"value,omitempty"`
	TargetAttack         *int32               `protobuf:"varint,9,opt,name=target_attack,json=targetAttack" json:"target_attack,omitempty"`
	TargetArmor          *int32               `protobuf:"varint,10,opt,name=target_armor,json=targetArmor" json:"target_armor,omitempty"`
	TargetHealth         *int32               `protobuf:"varint,11,opt,name=target_health,json=targetHealth" json:"target_health,omitempty"`
	SourceAttack         *int32               `protobuf:"varint,12,opt,name=source_attack,json=sourceAttack" json:"source_attack,omitempty"`
	SourceArmor          *int32               `protobuf:"varint,13,opt,name=source_armor,json=sourceArmor" json:"source_armor,omitempty"`
	SourceHealth         *int32               `protobuf:"varint,14,opt,name=source_health,json=sourceHealth" json:"source_health,omitempty"`
	Turnstamp            *uint32              `protobuf:"varint,15,opt,name=turnstamp" json:"turnstamp,omitempty"`
	SourceLane           *uint32              `protobuf:"varint,16,opt,name=source_lane,json=sourceLane" json:"source_lane,omitempty"`
	TargetLane           *uint32              `protobuf:"varint,17,opt,name=target_lane,json=targetLane" json:"target_lane,omitempty"`
	SourceParentCardId   *uint32              `protobuf:"varint,18,opt,name=source_parent_card_id,json=sourceParentCardId" json:"source_parent_card_id,omitempty"`
	SourceParentObjectId *uint32              `protobuf:"varint,19,opt,name=source_parent_object_id,json=sourceParentObjectId" json:"source_parent_object_id,omitempty"`
	ModifierType         *uint32              `protobuf:"varint,20,opt,name=modifier_type,json=modifierType" json:"modifier_type,omitempty"`
	Piercing             *bool                `protobuf:"varint,21,opt,name=piercing" json:"piercing,omitempty"`
	EffectName           *string              `protobuf:"bytes,22,opt,name=effect_name,json=effectName" json:"effect_name,omitempty"`
	TargetCombatPosition *uint32              `protobuf:"varint,23,opt,name=target_combat_position,json=targetCombatPosition" json:"target_combat_position,omitempty"`
}

// Default values for CMsgDCGCombatLogEntry fields.
const (
	Default_CMsgDCGCombatLogEntry_Type = DCG_COMBATLOG_TYPES_DCG_COMBATLOG_INVALID
)

func (x *CMsgDCGCombatLogEntry) Reset() {
	*x = CMsgDCGCombatLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDCGCombatLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDCGCombatLogEntry) ProtoMessage() {}

func (x *CMsgDCGCombatLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDCGCombatLogEntry.ProtoReflect.Descriptor instead.
func (*CMsgDCGCombatLogEntry) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDCGCombatLogEntry) GetType() DCG_COMBATLOG_TYPES {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgDCGCombatLogEntry_Type
}

func (x *CMsgDCGCombatLogEntry) GetTargetCardId() uint32 {
	if x != nil && x.TargetCardId != nil {
		return *x.TargetCardId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetObjectId() uint32 {
	if x != nil && x.TargetObjectId != nil {
		return *x.TargetObjectId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetOwner() uint32 {
	if x != nil && x.TargetOwner != nil {
		return *x.TargetOwner
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceCardId() uint32 {
	if x != nil && x.SourceCardId != nil {
		return *x.SourceCardId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceObjectId() uint32 {
	if x != nil && x.SourceObjectId != nil {
		return *x.SourceObjectId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceOwner() uint32 {
	if x != nil && x.SourceOwner != nil {
		return *x.SourceOwner
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetAttack() int32 {
	if x != nil && x.TargetAttack != nil {
		return *x.TargetAttack
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetArmor() int32 {
	if x != nil && x.TargetArmor != nil {
		return *x.TargetArmor
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetHealth() int32 {
	if x != nil && x.TargetHealth != nil {
		return *x.TargetHealth
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceAttack() int32 {
	if x != nil && x.SourceAttack != nil {
		return *x.SourceAttack
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceArmor() int32 {
	if x != nil && x.SourceArmor != nil {
		return *x.SourceArmor
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceHealth() int32 {
	if x != nil && x.SourceHealth != nil {
		return *x.SourceHealth
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTurnstamp() uint32 {
	if x != nil && x.Turnstamp != nil {
		return *x.Turnstamp
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceLane() uint32 {
	if x != nil && x.SourceLane != nil {
		return *x.SourceLane
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetTargetLane() uint32 {
	if x != nil && x.TargetLane != nil {
		return *x.TargetLane
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceParentCardId() uint32 {
	if x != nil && x.SourceParentCardId != nil {
		return *x.SourceParentCardId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetSourceParentObjectId() uint32 {
	if x != nil && x.SourceParentObjectId != nil {
		return *x.SourceParentObjectId
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetModifierType() uint32 {
	if x != nil && x.ModifierType != nil {
		return *x.ModifierType
	}
	return 0
}

func (x *CMsgDCGCombatLogEntry) GetPiercing() bool {
	if x != nil && x.Piercing != nil {
		return *x.Piercing
	}
	return false
}

func (x *CMsgDCGCombatLogEntry) GetEffectName() string {
	if x != nil && x.EffectName != nil {
		return *x.EffectName
	}
	return ""
}

func (x *CMsgDCGCombatLogEntry) GetTargetCombatPosition() uint32 {
	if x != nil && x.TargetCombatPosition != nil {
		return *x.TargetCombatPosition
	}
	return 0
}

type CMsgDeckValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           *uint32                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	MustOwnCards      *bool                          `protobuf:"varint,2,opt,name=must_own_cards,json=mustOwnCards" json:"must_own_cards,omitempty"`
	SetIds            []uint32                       `protobuf:"varint,4,rep,name=set_ids,json=setIds" json:"set_ids,omitempty"`
	MainMin           *uint32                        `protobuf:"varint,5,opt,name=main_min,json=mainMin" json:"main_min,omitempty"`
	MainMax           *uint32                        `protobuf:"varint,6,opt,name=main_max,json=mainMax" json:"main_max,omitempty"`
	ItemsMin          *uint32                        `protobuf:"varint,7,opt,name=items_min,json=itemsMin" json:"items_min,omitempty"`
	ItemsMax          *uint32                        `protobuf:"varint,8,opt,name=items_max,json=itemsMax" json:"items_max,omitempty"`
	MainMaxInstances  *uint32                        `protobuf:"varint,9,opt,name=main_max_instances,json=mainMaxInstances" json:"main_max_instances,omitempty"`
	ItemsMaxInstances *uint32                        `protobuf:"varint,10,opt,name=items_max_instances,json=itemsMaxInstances" json:"items_max_instances,omitempty"`
	HeroMaxInstances  *uint32                        `protobuf:"varint,11,opt,name=hero_max_instances,json=heroMaxInstances" json:"hero_max_instances,omitempty"`
	CardLimits        []*CMsgDeckValidator_CardLimit `protobuf:"bytes,12,rep,name=card_limits,json=cardLimits" json:"card_limits,omitempty"`
	RequiredCards     []*CMsgDeckValidator_CardLimit `protobuf:"bytes,13,rep,name=required_cards,json=requiredCards" json:"required_cards,omitempty"`
	IncludeActiveSets *bool                          `protobuf:"varint,14,opt,name=include_active_sets,json=includeActiveSets" json:"include_active_sets,omitempty"`
	BlockedRarities   []CMsgDeckValidator_ERarity    `protobuf:"varint,15,rep,name=blocked_rarities,json=blockedRarities,enum=artifact.CMsgDeckValidator_ERarity" json:"blocked_rarities,omitempty"`
	MinDeckColors     *uint32                        `protobuf:"varint,16,opt,name=min_deck_colors,json=minDeckColors" json:"min_deck_colors,omitempty"`
	MaxDeckColors     *uint32                        `protobuf:"varint,17,opt,name=max_deck_colors,json=maxDeckColors" json:"max_deck_colors,omitempty"`
	BlockedColors     []CMsgDeckValidator_EColor     `protobuf:"varint,18,rep,name=blocked_colors,json=blockedColors,enum=artifact.CMsgDeckValidator_EColor" json:"blocked_colors,omitempty"`
	RandomDecks       *bool                          `protobuf:"varint,19,opt,name=random_decks,json=randomDecks" json:"random_decks,omitempty"`
	DeckChoices       []*CMsgDeckValidator_Deck      `protobuf:"bytes,20,rep,name=deck_choices,json=deckChoices" json:"deck_choices,omitempty"`
}

func (x *CMsgDeckValidator) Reset() {
	*x = CMsgDeckValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDeckValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDeckValidator) ProtoMessage() {}

func (x *CMsgDeckValidator) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDeckValidator.ProtoReflect.Descriptor instead.
func (*CMsgDeckValidator) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDeckValidator) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgDeckValidator) GetMustOwnCards() bool {
	if x != nil && x.MustOwnCards != nil {
		return *x.MustOwnCards
	}
	return false
}

func (x *CMsgDeckValidator) GetSetIds() []uint32 {
	if x != nil {
		return x.SetIds
	}
	return nil
}

func (x *CMsgDeckValidator) GetMainMin() uint32 {
	if x != nil && x.MainMin != nil {
		return *x.MainMin
	}
	return 0
}

func (x *CMsgDeckValidator) GetMainMax() uint32 {
	if x != nil && x.MainMax != nil {
		return *x.MainMax
	}
	return 0
}

func (x *CMsgDeckValidator) GetItemsMin() uint32 {
	if x != nil && x.ItemsMin != nil {
		return *x.ItemsMin
	}
	return 0
}

func (x *CMsgDeckValidator) GetItemsMax() uint32 {
	if x != nil && x.ItemsMax != nil {
		return *x.ItemsMax
	}
	return 0
}

func (x *CMsgDeckValidator) GetMainMaxInstances() uint32 {
	if x != nil && x.MainMaxInstances != nil {
		return *x.MainMaxInstances
	}
	return 0
}

func (x *CMsgDeckValidator) GetItemsMaxInstances() uint32 {
	if x != nil && x.ItemsMaxInstances != nil {
		return *x.ItemsMaxInstances
	}
	return 0
}

func (x *CMsgDeckValidator) GetHeroMaxInstances() uint32 {
	if x != nil && x.HeroMaxInstances != nil {
		return *x.HeroMaxInstances
	}
	return 0
}

func (x *CMsgDeckValidator) GetCardLimits() []*CMsgDeckValidator_CardLimit {
	if x != nil {
		return x.CardLimits
	}
	return nil
}

func (x *CMsgDeckValidator) GetRequiredCards() []*CMsgDeckValidator_CardLimit {
	if x != nil {
		return x.RequiredCards
	}
	return nil
}

func (x *CMsgDeckValidator) GetIncludeActiveSets() bool {
	if x != nil && x.IncludeActiveSets != nil {
		return *x.IncludeActiveSets
	}
	return false
}

func (x *CMsgDeckValidator) GetBlockedRarities() []CMsgDeckValidator_ERarity {
	if x != nil {
		return x.BlockedRarities
	}
	return nil
}

func (x *CMsgDeckValidator) GetMinDeckColors() uint32 {
	if x != nil && x.MinDeckColors != nil {
		return *x.MinDeckColors
	}
	return 0
}

func (x *CMsgDeckValidator) GetMaxDeckColors() uint32 {
	if x != nil && x.MaxDeckColors != nil {
		return *x.MaxDeckColors
	}
	return 0
}

func (x *CMsgDeckValidator) GetBlockedColors() []CMsgDeckValidator_EColor {
	if x != nil {
		return x.BlockedColors
	}
	return nil
}

func (x *CMsgDeckValidator) GetRandomDecks() bool {
	if x != nil && x.RandomDecks != nil {
		return *x.RandomDecks
	}
	return false
}

func (x *CMsgDeckValidator) GetDeckChoices() []*CMsgDeckValidator_Deck {
	if x != nil {
		return x.DeckChoices
	}
	return nil
}

type CMsgAnyToGCReportAsserts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32                                   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Asserts []*CMsgAnyToGCReportAsserts_TrackedAssert `protobuf:"bytes,2,rep,name=asserts" json:"asserts,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts) Reset() {
	*x = CMsgAnyToGCReportAsserts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgAnyToGCReportAsserts) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts) GetAsserts() []*CMsgAnyToGCReportAsserts_TrackedAssert {
	if x != nil {
		return x.Asserts
	}
	return nil
}

type CMsgAnyToGCReportAssertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgAnyToGCReportAssertsResponse) Reset() {
	*x = CMsgAnyToGCReportAssertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAssertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAssertsResponse) ProtoMessage() {}

func (x *CMsgAnyToGCReportAssertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAssertsResponse.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAssertsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgAnyToGCReportAssertsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGauntletConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GauntletId                 *uint32                                         `protobuf:"varint,1,opt,name=gauntlet_id,json=gauntletId" json:"gauntlet_id,omitempty"`
	ActivateTime               *uint32                                         `protobuf:"varint,2,opt,name=activate_time,json=activateTime" json:"activate_time,omitempty"`
	MaxWins                    *uint32                                         `protobuf:"varint,3,opt,name=max_wins,json=maxWins" json:"max_wins,omitempty"`
	MaxLosses                  *uint32                                         `protobuf:"varint,4,opt,name=max_losses,json=maxLosses" json:"max_losses,omitempty"`
	MaxGames                   *uint32                                         `protobuf:"varint,5,opt,name=max_games,json=maxGames" json:"max_games,omitempty"`
	Rewards                    []*CMsgGauntletConfig_RewardTier                `protobuf:"bytes,7,rep,name=rewards" json:"rewards,omitempty"`
	Validator                  *CMsgDeckValidator                              `protobuf:"bytes,8,opt,name=validator" json:"validator,omitempty"`
	RegisterDeck               *bool                                           `protobuf:"varint,10,opt,name=register_deck,json=registerDeck" json:"register_deck,omitempty"`
	AutoPopulateDeck           *bool                                           `protobuf:"varint,12,opt,name=auto_populate_deck,json=autoPopulateDeck" json:"auto_populate_deck,omitempty"`
	CanModifyDeck              *bool                                           `protobuf:"varint,14,opt,name=can_modify_deck,json=canModifyDeck" json:"can_modify_deck,omitempty"`
	IsActive                   *bool                                           `protobuf:"varint,15,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsFeatured                 *bool                                           `protobuf:"varint,16,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	EntryTypes                 []*CMsgGauntletConfig_EntryType                 `protobuf:"bytes,17,rep,name=entry_types,json=entryTypes" json:"entry_types,omitempty"`
	LimitedFormat              *uint32                                         `protobuf:"varint,18,opt,name=limited_format,json=limitedFormat" json:"limited_format,omitempty"`
	ExpirationTime             *uint32                                         `protobuf:"varint,19,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	CloseJoinTime              *uint32                                         `protobuf:"varint,20,opt,name=close_join_time,json=closeJoinTime" json:"close_join_time,omitempty"`
	CloseMmTime                *uint32                                         `protobuf:"varint,21,opt,name=close_mm_time,json=closeMmTime" json:"close_mm_time,omitempty"`
	MaxWinsTrophyId            *uint32                                         `protobuf:"varint,22,opt,name=max_wins_trophy_id,json=maxWinsTrophyId" json:"max_wins_trophy_id,omitempty"`
	CooldownTime               *uint32                                         `protobuf:"varint,23,opt,name=cooldown_time,json=cooldownTime" json:"cooldown_time,omitempty"`
	MaxWinsPerDeckTrophyId     *uint32                                         `protobuf:"varint,24,opt,name=max_wins_per_deck_trophy_id,json=maxWinsPerDeckTrophyId" json:"max_wins_per_deck_trophy_id,omitempty"`
	MaxWinsRandomModeTrophyId  *uint32                                         `protobuf:"varint,25,opt,name=max_wins_random_mode_trophy_id,json=maxWinsRandomModeTrophyId" json:"max_wins_random_mode_trophy_id,omitempty"`
	IsAiGauntlet               *uint32                                         `protobuf:"varint,26,opt,name=is_ai_gauntlet,json=isAiGauntlet" json:"is_ai_gauntlet,omitempty"`
	AiValidators               []*CMsgDeckValidator                            `protobuf:"bytes,27,rep,name=ai_validators,json=aiValidators" json:"ai_validators,omitempty"`
	GauntletPointsLeaderboards []*CMsgGauntletConfig_GauntletPointsLeaderboard `protobuf:"bytes,29,rep,name=gauntlet_points_leaderboards,json=gauntletPointsLeaderboards" json:"gauntlet_points_leaderboards,omitempty"`
	Timer                      *string                                         `protobuf:"bytes,30,opt,name=timer" json:"timer,omitempty"`
}

func (x *CMsgGauntletConfig) Reset() {
	*x = CMsgGauntletConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig) ProtoMessage() {}

func (x *CMsgGauntletConfig) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGauntletConfig) GetGauntletId() uint32 {
	if x != nil && x.GauntletId != nil {
		return *x.GauntletId
	}
	return 0
}

func (x *CMsgGauntletConfig) GetActivateTime() uint32 {
	if x != nil && x.ActivateTime != nil {
		return *x.ActivateTime
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxWins() uint32 {
	if x != nil && x.MaxWins != nil {
		return *x.MaxWins
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxLosses() uint32 {
	if x != nil && x.MaxLosses != nil {
		return *x.MaxLosses
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxGames() uint32 {
	if x != nil && x.MaxGames != nil {
		return *x.MaxGames
	}
	return 0
}

func (x *CMsgGauntletConfig) GetRewards() []*CMsgGauntletConfig_RewardTier {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *CMsgGauntletConfig) GetValidator() *CMsgDeckValidator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *CMsgGauntletConfig) GetRegisterDeck() bool {
	if x != nil && x.RegisterDeck != nil {
		return *x.RegisterDeck
	}
	return false
}

func (x *CMsgGauntletConfig) GetAutoPopulateDeck() bool {
	if x != nil && x.AutoPopulateDeck != nil {
		return *x.AutoPopulateDeck
	}
	return false
}

func (x *CMsgGauntletConfig) GetCanModifyDeck() bool {
	if x != nil && x.CanModifyDeck != nil {
		return *x.CanModifyDeck
	}
	return false
}

func (x *CMsgGauntletConfig) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CMsgGauntletConfig) GetIsFeatured() bool {
	if x != nil && x.IsFeatured != nil {
		return *x.IsFeatured
	}
	return false
}

func (x *CMsgGauntletConfig) GetEntryTypes() []*CMsgGauntletConfig_EntryType {
	if x != nil {
		return x.EntryTypes
	}
	return nil
}

func (x *CMsgGauntletConfig) GetLimitedFormat() uint32 {
	if x != nil && x.LimitedFormat != nil {
		return *x.LimitedFormat
	}
	return 0
}

func (x *CMsgGauntletConfig) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *CMsgGauntletConfig) GetCloseJoinTime() uint32 {
	if x != nil && x.CloseJoinTime != nil {
		return *x.CloseJoinTime
	}
	return 0
}

func (x *CMsgGauntletConfig) GetCloseMmTime() uint32 {
	if x != nil && x.CloseMmTime != nil {
		return *x.CloseMmTime
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxWinsTrophyId() uint32 {
	if x != nil && x.MaxWinsTrophyId != nil {
		return *x.MaxWinsTrophyId
	}
	return 0
}

func (x *CMsgGauntletConfig) GetCooldownTime() uint32 {
	if x != nil && x.CooldownTime != nil {
		return *x.CooldownTime
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxWinsPerDeckTrophyId() uint32 {
	if x != nil && x.MaxWinsPerDeckTrophyId != nil {
		return *x.MaxWinsPerDeckTrophyId
	}
	return 0
}

func (x *CMsgGauntletConfig) GetMaxWinsRandomModeTrophyId() uint32 {
	if x != nil && x.MaxWinsRandomModeTrophyId != nil {
		return *x.MaxWinsRandomModeTrophyId
	}
	return 0
}

func (x *CMsgGauntletConfig) GetIsAiGauntlet() uint32 {
	if x != nil && x.IsAiGauntlet != nil {
		return *x.IsAiGauntlet
	}
	return 0
}

func (x *CMsgGauntletConfig) GetAiValidators() []*CMsgDeckValidator {
	if x != nil {
		return x.AiValidators
	}
	return nil
}

func (x *CMsgGauntletConfig) GetGauntletPointsLeaderboards() []*CMsgGauntletConfig_GauntletPointsLeaderboard {
	if x != nil {
		return x.GauntletPointsLeaderboards
	}
	return nil
}

func (x *CMsgGauntletConfig) GetTimer() string {
	if x != nil && x.Timer != nil {
		return *x.Timer
	}
	return ""
}

type CMsgLimitedFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitedFormatId  *uint32                           `protobuf:"varint,1,opt,name=limited_format_id,json=limitedFormatId" json:"limited_format_id,omitempty"`
	GrantStages      *uint32                           `protobuf:"varint,2,opt,name=grant_stages,json=grantStages" json:"grant_stages,omitempty"`
	GrantStageInfo   []*CMsgLimitedFormat_LimitedStage `protobuf:"bytes,3,rep,name=grant_stage_info,json=grantStageInfo" json:"grant_stage_info,omitempty"`
	CreateRealCopies *bool                             `protobuf:"varint,4,opt,name=create_real_copies,json=createRealCopies" json:"create_real_copies,omitempty"`
}

func (x *CMsgLimitedFormat) Reset() {
	*x = CMsgLimitedFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLimitedFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLimitedFormat) ProtoMessage() {}

func (x *CMsgLimitedFormat) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLimitedFormat.ProtoReflect.Descriptor instead.
func (*CMsgLimitedFormat) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgLimitedFormat) GetLimitedFormatId() uint32 {
	if x != nil && x.LimitedFormatId != nil {
		return *x.LimitedFormatId
	}
	return 0
}

func (x *CMsgLimitedFormat) GetGrantStages() uint32 {
	if x != nil && x.GrantStages != nil {
		return *x.GrantStages
	}
	return 0
}

func (x *CMsgLimitedFormat) GetGrantStageInfo() []*CMsgLimitedFormat_LimitedStage {
	if x != nil {
		return x.GrantStageInfo
	}
	return nil
}

func (x *CMsgLimitedFormat) GetCreateRealCopies() bool {
	if x != nil && x.CreateRealCopies != nil {
		return *x.CreateRealCopies
	}
	return false
}

type CSODCGPrivateLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateLobbyId   *uint64                          `protobuf:"varint,1,opt,name=private_lobby_id,json=privateLobbyId" json:"private_lobby_id,omitempty"`
	Members          []*CSODCGPrivateLobby_Member     `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Invites          []*CSODCGPrivateLobby_Invite     `protobuf:"bytes,3,rep,name=invites" json:"invites,omitempty"`
	ExtraMessages    []*CExtraMsgBlock                `protobuf:"bytes,4,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	InMatchMaking    *bool                            `protobuf:"varint,5,opt,name=in_match_making,json=inMatchMaking" json:"in_match_making,omitempty"`
	ServerSearchKey  *string                          `protobuf:"bytes,6,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	AreDecksVisible  *bool                            `protobuf:"varint,7,opt,name=are_decks_visible,json=areDecksVisible" json:"are_decks_visible,omitempty"`
	MatchList        []*CSODCGPrivateLobby_Match      `protobuf:"bytes,8,rep,name=match_list,json=matchList" json:"match_list,omitempty"`
	TimerMode        *EDCGLobbyTimer                  `protobuf:"varint,9,opt,name=timer_mode,json=timerMode,enum=artifact.EDCGLobbyTimer,def=0" json:"timer_mode,omitempty"`
	MatchLobbyId     *uint64                          `protobuf:"fixed64,10,opt,name=match_lobby_id,json=matchLobbyId" json:"match_lobby_id,omitempty"`
	SharedDecks      []*CSODCGPrivateLobby_SharedDeck `protobuf:"bytes,11,rep,name=shared_decks,json=sharedDecks" json:"shared_decks,omitempty"`
	DeckValidator    *CMsgDeckValidator               `protobuf:"bytes,12,opt,name=deck_validator,json=deckValidator" json:"deck_validator,omitempty"`
	MinClientVersion *uint32                          `protobuf:"varint,15,opt,name=min_client_version,json=minClientVersion" json:"min_client_version,omitempty"`
	MaxClientVersion *uint32                          `protobuf:"varint,16,opt,name=max_client_version,json=maxClientVersion" json:"max_client_version,omitempty"`
	SteamChatGroupId *uint64                          `protobuf:"varint,17,opt,name=steam_chat_group_id,json=steamChatGroupId" json:"steam_chat_group_id,omitempty"`
	LobbySalt        *uint64                          `protobuf:"fixed64,18,opt,name=lobby_salt,json=lobbySalt" json:"lobby_salt,omitempty"`
	ValidatorId      *uint32                          `protobuf:"varint,19,opt,name=validator_id,json=validatorId" json:"validator_id,omitempty"`
}

// Default values for CSODCGPrivateLobby fields.
const (
	Default_CSODCGPrivateLobby_TimerMode = EDCGLobbyTimer_k_eDCGLobbyTimer_Unspecified
)

func (x *CSODCGPrivateLobby) Reset() {
	*x = CSODCGPrivateLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGPrivateLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGPrivateLobby) ProtoMessage() {}

func (x *CSODCGPrivateLobby) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGPrivateLobby.ProtoReflect.Descriptor instead.
func (*CSODCGPrivateLobby) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{17}
}

func (x *CSODCGPrivateLobby) GetPrivateLobbyId() uint64 {
	if x != nil && x.PrivateLobbyId != nil {
		return *x.PrivateLobbyId
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetMembers() []*CSODCGPrivateLobby_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetInvites() []*CSODCGPrivateLobby_Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetInMatchMaking() bool {
	if x != nil && x.InMatchMaking != nil {
		return *x.InMatchMaking
	}
	return false
}

func (x *CSODCGPrivateLobby) GetServerSearchKey() string {
	if x != nil && x.ServerSearchKey != nil {
		return *x.ServerSearchKey
	}
	return ""
}

func (x *CSODCGPrivateLobby) GetAreDecksVisible() bool {
	if x != nil && x.AreDecksVisible != nil {
		return *x.AreDecksVisible
	}
	return false
}

func (x *CSODCGPrivateLobby) GetMatchList() []*CSODCGPrivateLobby_Match {
	if x != nil {
		return x.MatchList
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetTimerMode() EDCGLobbyTimer {
	if x != nil && x.TimerMode != nil {
		return *x.TimerMode
	}
	return Default_CSODCGPrivateLobby_TimerMode
}

func (x *CSODCGPrivateLobby) GetMatchLobbyId() uint64 {
	if x != nil && x.MatchLobbyId != nil {
		return *x.MatchLobbyId
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetSharedDecks() []*CSODCGPrivateLobby_SharedDeck {
	if x != nil {
		return x.SharedDecks
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetDeckValidator() *CMsgDeckValidator {
	if x != nil {
		return x.DeckValidator
	}
	return nil
}

func (x *CSODCGPrivateLobby) GetMinClientVersion() uint32 {
	if x != nil && x.MinClientVersion != nil {
		return *x.MinClientVersion
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetMaxClientVersion() uint32 {
	if x != nil && x.MaxClientVersion != nil {
		return *x.MaxClientVersion
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetSteamChatGroupId() uint64 {
	if x != nil && x.SteamChatGroupId != nil {
		return *x.SteamChatGroupId
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetLobbySalt() uint64 {
	if x != nil && x.LobbySalt != nil {
		return *x.LobbySalt
	}
	return 0
}

func (x *CSODCGPrivateLobby) GetValidatorId() uint32 {
	if x != nil && x.ValidatorId != nil {
		return *x.ValidatorId
	}
	return 0
}

type CSODCGTourneyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TourneyId *uint64 `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	IsFull    *bool   `protobuf:"varint,3,opt,name=is_full,json=isFull" json:"is_full,omitempty"`
}

func (x *CSODCGTourneyInvite) Reset() {
	*x = CSODCGTourneyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGTourneyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGTourneyInvite) ProtoMessage() {}

func (x *CSODCGTourneyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGTourneyInvite.ProtoReflect.Descriptor instead.
func (*CSODCGTourneyInvite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{18}
}

func (x *CSODCGTourneyInvite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODCGTourneyInvite) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CSODCGTourneyInvite) GetIsFull() bool {
	if x != nil && x.IsFull != nil {
		return *x.IsFull
	}
	return false
}

type CSODCGTourneyNextMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TourneyId *uint64 `protobuf:"varint,2,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,3,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SeriesId  *uint32 `protobuf:"varint,4,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
}

func (x *CSODCGTourneyNextMatch) Reset() {
	*x = CSODCGTourneyNextMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGTourneyNextMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGTourneyNextMatch) ProtoMessage() {}

func (x *CSODCGTourneyNextMatch) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGTourneyNextMatch.ProtoReflect.Descriptor instead.
func (*CSODCGTourneyNextMatch) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{19}
}

func (x *CSODCGTourneyNextMatch) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODCGTourneyNextMatch) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CSODCGTourneyNextMatch) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CSODCGTourneyNextMatch) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

type CDCGTourney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourneyId       *uint64                      `protobuf:"varint,1,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	Stage           *CDCGTourney_EStage          `protobuf:"varint,2,opt,name=stage,enum=artifact.CDCGTourney_EStage,def=10" json:"stage,omitempty"`
	Validators      []*CDCGTourney_Validator     `protobuf:"bytes,3,rep,name=validators" json:"validators,omitempty"`
	StageTime       *uint32                      `protobuf:"varint,4,opt,name=stage_time,json=stageTime" json:"stage_time,omitempty"`
	StatsSalt       *uint32                      `protobuf:"varint,5,opt,name=stats_salt,json=statsSalt" json:"stats_salt,omitempty"`
	TourneyMsg      *string                      `protobuf:"bytes,6,opt,name=tourney_msg,json=tourneyMsg" json:"tourney_msg,omitempty"`
	TourneyStatus   *string                      `protobuf:"bytes,7,opt,name=tourney_status,json=tourneyStatus" json:"tourney_status,omitempty"`
	Phases          []*CDCGTourney_Phase         `protobuf:"bytes,8,rep,name=phases" json:"phases,omitempty"`
	ConfigVals      []*CDCGTourney_ConfigVals    `protobuf:"bytes,9,rep,name=config_vals,json=configVals" json:"config_vals,omitempty"`
	Invites         []*CDCGTourney_Invite        `protobuf:"bytes,10,rep,name=invites" json:"invites,omitempty"`
	Members         []*CDCGTourney_Member        `protobuf:"bytes,11,rep,name=members" json:"members,omitempty"`
	TourneyName     *string                      `protobuf:"bytes,12,opt,name=tourney_name,json=tourneyName" json:"tourney_name,omitempty"`
	SharedDecks     []*CDCGTourney_SharedDeck    `protobuf:"bytes,13,rep,name=shared_decks,json=sharedDecks" json:"shared_decks,omitempty"`
	CreatedBy       *uint32                      `protobuf:"varint,14,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	AutoCloseTime   *uint32                      `protobuf:"varint,15,opt,name=auto_close_time,json=autoCloseTime" json:"auto_close_time,omitempty"`
	SteamChatRoomId *uint64                      `protobuf:"varint,16,opt,name=steam_chat_room_id,json=steamChatRoomId" json:"steam_chat_room_id,omitempty"`
	PaidEntryItems  []*CDCGTourney_PaidEntryItem `protobuf:"bytes,17,rep,name=paid_entry_items,json=paidEntryItems" json:"paid_entry_items,omitempty"`
	EntryItems      []*CDCGTourney_EntryItem     `protobuf:"bytes,18,rep,name=entry_items,json=entryItems" json:"entry_items,omitempty"`
	CreatedTime     *uint32                      `protobuf:"varint,19,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
}

// Default values for CDCGTourney fields.
const (
	Default_CDCGTourney_Stage = CDCGTourney_k_eStage_Configure
)

func (x *CDCGTourney) Reset() {
	*x = CDCGTourney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney) ProtoMessage() {}

func (x *CDCGTourney) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney.ProtoReflect.Descriptor instead.
func (*CDCGTourney) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20}
}

func (x *CDCGTourney) GetTourneyId() uint64 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CDCGTourney) GetStage() CDCGTourney_EStage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Default_CDCGTourney_Stage
}

func (x *CDCGTourney) GetValidators() []*CDCGTourney_Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *CDCGTourney) GetStageTime() uint32 {
	if x != nil && x.StageTime != nil {
		return *x.StageTime
	}
	return 0
}

func (x *CDCGTourney) GetStatsSalt() uint32 {
	if x != nil && x.StatsSalt != nil {
		return *x.StatsSalt
	}
	return 0
}

func (x *CDCGTourney) GetTourneyMsg() string {
	if x != nil && x.TourneyMsg != nil {
		return *x.TourneyMsg
	}
	return ""
}

func (x *CDCGTourney) GetTourneyStatus() string {
	if x != nil && x.TourneyStatus != nil {
		return *x.TourneyStatus
	}
	return ""
}

func (x *CDCGTourney) GetPhases() []*CDCGTourney_Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CDCGTourney) GetConfigVals() []*CDCGTourney_ConfigVals {
	if x != nil {
		return x.ConfigVals
	}
	return nil
}

func (x *CDCGTourney) GetInvites() []*CDCGTourney_Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *CDCGTourney) GetMembers() []*CDCGTourney_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CDCGTourney) GetTourneyName() string {
	if x != nil && x.TourneyName != nil {
		return *x.TourneyName
	}
	return ""
}

func (x *CDCGTourney) GetSharedDecks() []*CDCGTourney_SharedDeck {
	if x != nil {
		return x.SharedDecks
	}
	return nil
}

func (x *CDCGTourney) GetCreatedBy() uint32 {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return 0
}

func (x *CDCGTourney) GetAutoCloseTime() uint32 {
	if x != nil && x.AutoCloseTime != nil {
		return *x.AutoCloseTime
	}
	return 0
}

func (x *CDCGTourney) GetSteamChatRoomId() uint64 {
	if x != nil && x.SteamChatRoomId != nil {
		return *x.SteamChatRoomId
	}
	return 0
}

func (x *CDCGTourney) GetPaidEntryItems() []*CDCGTourney_PaidEntryItem {
	if x != nil {
		return x.PaidEntryItems
	}
	return nil
}

func (x *CDCGTourney) GetEntryItems() []*CDCGTourney_EntryItem {
	if x != nil {
		return x.EntryItems
	}
	return nil
}

func (x *CDCGTourney) GetCreatedTime() uint32 {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return 0
}

type CMsgRegionPingTimesClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterCodes []uint32 `protobuf:"fixed32,1,rep,packed,name=data_center_codes,json=dataCenterCodes" json:"data_center_codes,omitempty"`
	PingTimes       []uint32 `protobuf:"varint,2,rep,packed,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgRegionPingTimesClient) Reset() {
	*x = CMsgRegionPingTimesClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRegionPingTimesClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRegionPingTimesClient) ProtoMessage() {}

func (x *CMsgRegionPingTimesClient) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRegionPingTimesClient.ProtoReflect.Descriptor instead.
func (*CMsgRegionPingTimesClient) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgRegionPingTimesClient) GetDataCenterCodes() []uint32 {
	if x != nil {
		return x.DataCenterCodes
	}
	return nil
}

func (x *CMsgRegionPingTimesClient) GetPingTimes() []uint32 {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CMsgMarketPrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp       *uint32  `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	CurrencyId      *uint32  `protobuf:"varint,2,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	DefIndices      []uint32 `protobuf:"varint,3,rep,packed,name=def_indices,json=defIndices" json:"def_indices,omitempty"`
	PurchasePrice   []uint64 `protobuf:"varint,4,rep,packed,name=purchase_price,json=purchasePrice" json:"purchase_price,omitempty"`
	SellPrice       []uint64 `protobuf:"varint,5,rep,packed,name=sell_price,json=sellPrice" json:"sell_price,omitempty"`
	RequestUpToDate *bool    `protobuf:"varint,6,opt,name=request_up_to_date,json=requestUpToDate" json:"request_up_to_date,omitempty"`
	ValidThrough    *uint32  `protobuf:"varint,7,opt,name=valid_through,json=validThrough" json:"valid_through,omitempty"`
}

func (x *CMsgMarketPrices) Reset() {
	*x = CMsgMarketPrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMarketPrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMarketPrices) ProtoMessage() {}

func (x *CMsgMarketPrices) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMarketPrices.ProtoReflect.Descriptor instead.
func (*CMsgMarketPrices) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgMarketPrices) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgMarketPrices) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgMarketPrices) GetDefIndices() []uint32 {
	if x != nil {
		return x.DefIndices
	}
	return nil
}

func (x *CMsgMarketPrices) GetPurchasePrice() []uint64 {
	if x != nil {
		return x.PurchasePrice
	}
	return nil
}

func (x *CMsgMarketPrices) GetSellPrice() []uint64 {
	if x != nil {
		return x.SellPrice
	}
	return nil
}

func (x *CMsgMarketPrices) GetRequestUpToDate() bool {
	if x != nil && x.RequestUpToDate != nil {
		return *x.RequestUpToDate
	}
	return false
}

func (x *CMsgMarketPrices) GetValidThrough() uint32 {
	if x != nil && x.ValidThrough != nil {
		return *x.ValidThrough
	}
	return 0
}

type CMsgMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDurationS *uint32                     `protobuf:"varint,4,opt,name=match_duration_s,json=matchDurationS" json:"match_duration_s,omitempty"`
	GameTurns      *uint32                     `protobuf:"varint,5,opt,name=game_turns,json=gameTurns" json:"game_turns,omitempty"`
	EndReason      *CMsgMatchData_EEndReason   `protobuf:"varint,6,opt,name=end_reason,json=endReason,enum=artifact.CMsgMatchData_EEndReason,def=0" json:"end_reason,omitempty"`
	WinningTeam    *EDCGLobbyTeam              `protobuf:"varint,7,opt,name=winning_team,json=winningTeam,enum=artifact.EDCGLobbyTeam,def=0" json:"winning_team,omitempty"`
	Players        []*CMsgMatchData_PlayerInfo `protobuf:"bytes,8,rep,name=players" json:"players,omitempty"`
}

// Default values for CMsgMatchData fields.
const (
	Default_CMsgMatchData_EndReason   = CMsgMatchData_k_EEndReason_TeamWin
	Default_CMsgMatchData_WinningTeam = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0
)

func (x *CMsgMatchData) Reset() {
	*x = CMsgMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchData) ProtoMessage() {}

func (x *CMsgMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchData.ProtoReflect.Descriptor instead.
func (*CMsgMatchData) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgMatchData) GetMatchDurationS() uint32 {
	if x != nil && x.MatchDurationS != nil {
		return *x.MatchDurationS
	}
	return 0
}

func (x *CMsgMatchData) GetGameTurns() uint32 {
	if x != nil && x.GameTurns != nil {
		return *x.GameTurns
	}
	return 0
}

func (x *CMsgMatchData) GetEndReason() CMsgMatchData_EEndReason {
	if x != nil && x.EndReason != nil {
		return *x.EndReason
	}
	return Default_CMsgMatchData_EndReason
}

func (x *CMsgMatchData) GetWinningTeam() EDCGLobbyTeam {
	if x != nil && x.WinningTeam != nil {
		return *x.WinningTeam
	}
	return Default_CMsgMatchData_WinningTeam
}

func (x *CMsgMatchData) GetPlayers() []*CMsgMatchData_PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

type CSODCGLobby_GauntletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wins   *uint32 `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Losses *uint32 `protobuf:"varint,2,opt,name=losses" json:"losses,omitempty"`
}

func (x *CSODCGLobby_GauntletInfo) Reset() {
	*x = CSODCGLobby_GauntletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGLobby_GauntletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGLobby_GauntletInfo) ProtoMessage() {}

func (x *CSODCGLobby_GauntletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGLobby_GauntletInfo.ProtoReflect.Descriptor instead.
func (*CSODCGLobby_GauntletInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CSODCGLobby_GauntletInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CSODCGLobby_GauntletInfo) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

type CSODCGLobby_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    *uint32                   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName  *string                   `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team         *EDCGLobbyTeam            `protobuf:"varint,3,opt,name=team,enum=artifact.EDCGLobbyTeam,def=0" json:"team,omitempty"`
	HasLeft      *bool                     `protobuf:"varint,4,opt,name=has_left,json=hasLeft" json:"has_left,omitempty"`
	IsAnonymous  *bool                     `protobuf:"varint,5,opt,name=is_anonymous,json=isAnonymous" json:"is_anonymous,omitempty"`
	GauntletInfo *CSODCGLobby_GauntletInfo `protobuf:"bytes,6,opt,name=gauntlet_info,json=gauntletInfo" json:"gauntlet_info,omitempty"`
}

// Default values for CSODCGLobby_Member fields.
const (
	Default_CSODCGLobby_Member_Team = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0
)

func (x *CSODCGLobby_Member) Reset() {
	*x = CSODCGLobby_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGLobby_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGLobby_Member) ProtoMessage() {}

func (x *CSODCGLobby_Member) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGLobby_Member.ProtoReflect.Descriptor instead.
func (*CSODCGLobby_Member) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CSODCGLobby_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODCGLobby_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODCGLobby_Member) GetTeam() EDCGLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CSODCGLobby_Member_Team
}

func (x *CSODCGLobby_Member) GetHasLeft() bool {
	if x != nil && x.HasLeft != nil {
		return *x.HasLeft
	}
	return false
}

func (x *CSODCGLobby_Member) GetIsAnonymous() bool {
	if x != nil && x.IsAnonymous != nil {
		return *x.IsAnonymous
	}
	return false
}

func (x *CSODCGLobby_Member) GetGauntletInfo() *CSODCGLobby_GauntletInfo {
	if x != nil {
		return x.GauntletInfo
	}
	return nil
}

type CLobbyData_PostMatchSurvey_PlayerSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	QuestionId *uint32 `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) Reset() {
	*x = CLobbyData_PostMatchSurvey_PlayerSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyData_PostMatchSurvey_PlayerSurvey) ProtoMessage() {}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyData_PostMatchSurvey_PlayerSurvey.ProtoReflect.Descriptor instead.
func (*CLobbyData_PostMatchSurvey_PlayerSurvey) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CLobbyData_PostMatchSurvey_PlayerSurvey) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

type CMsgDeckValidator_Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckBytes []byte  `protobuf:"bytes,1,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	DeckName  *string `protobuf:"bytes,2,opt,name=deck_name,json=deckName" json:"deck_name,omitempty"`
	DeckId    *uint32 `protobuf:"varint,3,opt,name=deck_id,json=deckId" json:"deck_id,omitempty"`
}

func (x *CMsgDeckValidator_Deck) Reset() {
	*x = CMsgDeckValidator_Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDeckValidator_Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDeckValidator_Deck) ProtoMessage() {}

func (x *CMsgDeckValidator_Deck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDeckValidator_Deck.ProtoReflect.Descriptor instead.
func (*CMsgDeckValidator_Deck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgDeckValidator_Deck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CMsgDeckValidator_Deck) GetDeckName() string {
	if x != nil && x.DeckName != nil {
		return *x.DeckName
	}
	return ""
}

func (x *CMsgDeckValidator_Deck) GetDeckId() uint32 {
	if x != nil && x.DeckId != nil {
		return *x.DeckId
	}
	return 0
}

type CMsgDeckValidator_CardLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId    *uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	CardCount *uint32 `protobuf:"varint,2,opt,name=card_count,json=cardCount" json:"card_count,omitempty"`
}

func (x *CMsgDeckValidator_CardLimit) Reset() {
	*x = CMsgDeckValidator_CardLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDeckValidator_CardLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDeckValidator_CardLimit) ProtoMessage() {}

func (x *CMsgDeckValidator_CardLimit) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDeckValidator_CardLimit.ProtoReflect.Descriptor instead.
func (*CMsgDeckValidator_CardLimit) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{12, 1}
}

func (x *CMsgDeckValidator_CardLimit) GetCardId() uint32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CMsgDeckValidator_CardLimit) GetCardCount() uint32 {
	if x != nil && x.CardCount != nil {
		return *x.CardCount
	}
	return 0
}

type CMsgAnyToGCReportAsserts_TrackedAssert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	LineNumber   *uint32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	SampleMsg    *string `protobuf:"bytes,3,opt,name=sample_msg,json=sampleMsg" json:"sample_msg,omitempty"`
	SampleStack  *string `protobuf:"bytes,4,opt,name=sample_stack,json=sampleStack" json:"sample_stack,omitempty"`
	TimesFired   *uint32 `protobuf:"varint,5,opt,name=times_fired,json=timesFired" json:"times_fired,omitempty"`
	FunctionName *string `protobuf:"bytes,6,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Condition    *string `protobuf:"bytes,7,opt,name=condition" json:"condition,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) Reset() {
	*x = CMsgAnyToGCReportAsserts_TrackedAssert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts_TrackedAssert) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts_TrackedAssert.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts_TrackedAssert) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleMsg() string {
	if x != nil && x.SampleMsg != nil {
		return *x.SampleMsg
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleStack() string {
	if x != nil && x.SampleStack != nil {
		return *x.SampleStack
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetTimesFired() uint32 {
	if x != nil && x.TimesFired != nil {
		return *x.TimesFired
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

type CMsgGauntletConfig_RewardTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrophyGrant   []*CMsgGauntletConfig_RewardTier_Grant `protobuf:"bytes,1,rep,name=trophy_grant,json=trophyGrant" json:"trophy_grant,omitempty"`
	ItemGrant     []*CMsgGauntletConfig_RewardTier_Grant `protobuf:"bytes,2,rep,name=item_grant,json=itemGrant" json:"item_grant,omitempty"`
	MinWins       *uint32                                `protobuf:"varint,3,opt,name=min_wins,json=minWins" json:"min_wins,omitempty"`
	LootListRolls []string                               `protobuf:"bytes,4,rep,name=loot_list_rolls,json=lootListRolls" json:"loot_list_rolls,omitempty"`
}

func (x *CMsgGauntletConfig_RewardTier) Reset() {
	*x = CMsgGauntletConfig_RewardTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig_RewardTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig_RewardTier) ProtoMessage() {}

func (x *CMsgGauntletConfig_RewardTier) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig_RewardTier.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig_RewardTier) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgGauntletConfig_RewardTier) GetTrophyGrant() []*CMsgGauntletConfig_RewardTier_Grant {
	if x != nil {
		return x.TrophyGrant
	}
	return nil
}

func (x *CMsgGauntletConfig_RewardTier) GetItemGrant() []*CMsgGauntletConfig_RewardTier_Grant {
	if x != nil {
		return x.ItemGrant
	}
	return nil
}

func (x *CMsgGauntletConfig_RewardTier) GetMinWins() uint32 {
	if x != nil && x.MinWins != nil {
		return *x.MinWins
	}
	return 0
}

func (x *CMsgGauntletConfig_RewardTier) GetLootListRolls() []string {
	if x != nil {
		return x.LootListRolls
	}
	return nil
}

type CMsgGauntletConfig_EntryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId              *uint32                                  `protobuf:"varint,1,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	ItemCosts            []*CMsgGauntletConfig_EntryType_ItemCost `protobuf:"bytes,2,rep,name=item_costs,json=itemCosts" json:"item_costs,omitempty"`
	LimitedFormatOveride *uint32                                  `protobuf:"varint,3,opt,name=limited_format_overide,json=limitedFormatOveride" json:"limited_format_overide,omitempty"`
}

func (x *CMsgGauntletConfig_EntryType) Reset() {
	*x = CMsgGauntletConfig_EntryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig_EntryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig_EntryType) ProtoMessage() {}

func (x *CMsgGauntletConfig_EntryType) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig_EntryType.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig_EntryType) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15, 1}
}

func (x *CMsgGauntletConfig_EntryType) GetEntryId() uint32 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CMsgGauntletConfig_EntryType) GetItemCosts() []*CMsgGauntletConfig_EntryType_ItemCost {
	if x != nil {
		return x.ItemCosts
	}
	return nil
}

func (x *CMsgGauntletConfig_EntryType) GetLimitedFormatOveride() uint32 {
	if x != nil && x.LimitedFormatOveride != nil {
		return *x.LimitedFormatOveride
	}
	return 0
}

type CMsgGauntletConfig_GauntletPointsLeaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationTime *uint32 `protobuf:"varint,1,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

func (x *CMsgGauntletConfig_GauntletPointsLeaderboard) Reset() {
	*x = CMsgGauntletConfig_GauntletPointsLeaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig_GauntletPointsLeaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig_GauntletPointsLeaderboard) ProtoMessage() {}

func (x *CMsgGauntletConfig_GauntletPointsLeaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig_GauntletPointsLeaderboard.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig_GauntletPointsLeaderboard) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15, 2}
}

func (x *CMsgGauntletConfig_GauntletPointsLeaderboard) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CMsgGauntletConfig_RewardTier_Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantId  *uint32 `protobuf:"varint,1,opt,name=grant_id,json=grantId" json:"grant_id,omitempty"`
	Quantity *uint32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (x *CMsgGauntletConfig_RewardTier_Grant) Reset() {
	*x = CMsgGauntletConfig_RewardTier_Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig_RewardTier_Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig_RewardTier_Grant) ProtoMessage() {}

func (x *CMsgGauntletConfig_RewardTier_Grant) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig_RewardTier_Grant.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig_RewardTier_Grant) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *CMsgGauntletConfig_RewardTier_Grant) GetGrantId() uint32 {
	if x != nil && x.GrantId != nil {
		return *x.GrantId
	}
	return 0
}

func (x *CMsgGauntletConfig_RewardTier_Grant) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type CMsgGauntletConfig_EntryType_ItemCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Quantity *uint32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (x *CMsgGauntletConfig_EntryType_ItemCost) Reset() {
	*x = CMsgGauntletConfig_EntryType_ItemCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGauntletConfig_EntryType_ItemCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGauntletConfig_EntryType_ItemCost) ProtoMessage() {}

func (x *CMsgGauntletConfig_EntryType_ItemCost) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGauntletConfig_EntryType_ItemCost.ProtoReflect.Descriptor instead.
func (*CMsgGauntletConfig_EntryType_ItemCost) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{15, 1, 0}
}

func (x *CMsgGauntletConfig_EntryType_ItemCost) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGauntletConfig_EntryType_ItemCost) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type CMsgLimitedFormat_LimitedStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantType   *CMsgLimitedFormat_EGrantType `protobuf:"varint,1,opt,name=grant_type,json=grantType,enum=artifact.CMsgLimitedFormat_EGrantType,def=0" json:"grant_type,omitempty"`
	GrantCount  *uint32                       `protobuf:"varint,2,opt,name=grant_count,json=grantCount" json:"grant_count,omitempty"`
	RepeatCount *uint32                       `protobuf:"varint,3,opt,name=repeat_count,json=repeatCount" json:"repeat_count,omitempty"`
	DisplayMsg  *string                       `protobuf:"bytes,4,opt,name=display_msg,json=displayMsg" json:"display_msg,omitempty"`
}

// Default values for CMsgLimitedFormat_LimitedStage fields.
const (
	Default_CMsgLimitedFormat_LimitedStage_GrantType = CMsgLimitedFormat_kGrant_Unknown
)

func (x *CMsgLimitedFormat_LimitedStage) Reset() {
	*x = CMsgLimitedFormat_LimitedStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLimitedFormat_LimitedStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLimitedFormat_LimitedStage) ProtoMessage() {}

func (x *CMsgLimitedFormat_LimitedStage) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLimitedFormat_LimitedStage.ProtoReflect.Descriptor instead.
func (*CMsgLimitedFormat_LimitedStage) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgLimitedFormat_LimitedStage) GetGrantType() CMsgLimitedFormat_EGrantType {
	if x != nil && x.GrantType != nil {
		return *x.GrantType
	}
	return Default_CMsgLimitedFormat_LimitedStage_GrantType
}

func (x *CMsgLimitedFormat_LimitedStage) GetGrantCount() uint32 {
	if x != nil && x.GrantCount != nil {
		return *x.GrantCount
	}
	return 0
}

func (x *CMsgLimitedFormat_LimitedStage) GetRepeatCount() uint32 {
	if x != nil && x.RepeatCount != nil {
		return *x.RepeatCount
	}
	return 0
}

func (x *CMsgLimitedFormat_LimitedStage) GetDisplayMsg() string {
	if x != nil && x.DisplayMsg != nil {
		return *x.DisplayMsg
	}
	return ""
}

type CSODCGPrivateLobby_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32                    `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName   *string                    `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team          *EDCGLobbyTeam             `protobuf:"varint,3,opt,name=team,enum=artifact.EDCGLobbyTeam,def=0" json:"team,omitempty"`
	IsReady       *bool                      `protobuf:"varint,4,opt,name=is_ready,json=isReady" json:"is_ready,omitempty"`
	DeckBytes     []byte                     `protobuf:"bytes,5,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	HasDeck       *bool                      `protobuf:"varint,7,opt,name=has_deck,json=hasDeck" json:"has_deck,omitempty"`
	ClientVersion *uint32                    `protobuf:"varint,8,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PingTimes     *CMsgRegionPingTimesClient `protobuf:"bytes,9,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

// Default values for CSODCGPrivateLobby_Member fields.
const (
	Default_CSODCGPrivateLobby_Member_Team = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0
)

func (x *CSODCGPrivateLobby_Member) Reset() {
	*x = CSODCGPrivateLobby_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGPrivateLobby_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGPrivateLobby_Member) ProtoMessage() {}

func (x *CSODCGPrivateLobby_Member) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGPrivateLobby_Member.ProtoReflect.Descriptor instead.
func (*CSODCGPrivateLobby_Member) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CSODCGPrivateLobby_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODCGPrivateLobby_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODCGPrivateLobby_Member) GetTeam() EDCGLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CSODCGPrivateLobby_Member_Team
}

func (x *CSODCGPrivateLobby_Member) GetIsReady() bool {
	if x != nil && x.IsReady != nil {
		return *x.IsReady
	}
	return false
}

func (x *CSODCGPrivateLobby_Member) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CSODCGPrivateLobby_Member) GetHasDeck() bool {
	if x != nil && x.HasDeck != nil {
		return *x.HasDeck
	}
	return false
}

func (x *CSODCGPrivateLobby_Member) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CSODCGPrivateLobby_Member) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CSODCGPrivateLobby_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	InvitedBy   *uint32 `protobuf:"varint,3,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
}

func (x *CSODCGPrivateLobby_Invite) Reset() {
	*x = CSODCGPrivateLobby_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGPrivateLobby_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGPrivateLobby_Invite) ProtoMessage() {}

func (x *CSODCGPrivateLobby_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGPrivateLobby_Invite.ProtoReflect.Descriptor instead.
func (*CSODCGPrivateLobby_Invite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{17, 1}
}

func (x *CSODCGPrivateLobby_Invite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODCGPrivateLobby_Invite) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODCGPrivateLobby_Invite) GetInvitedBy() uint32 {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return 0
}

type CSODCGPrivateLobby_SharedDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedByAccountId *uint32 `protobuf:"varint,1,opt,name=shared_by_account_id,json=sharedByAccountId" json:"shared_by_account_id,omitempty"`
	DeckBytes         []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	DeckName          *string `protobuf:"bytes,3,opt,name=deck_name,json=deckName" json:"deck_name,omitempty"`
}

func (x *CSODCGPrivateLobby_SharedDeck) Reset() {
	*x = CSODCGPrivateLobby_SharedDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGPrivateLobby_SharedDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGPrivateLobby_SharedDeck) ProtoMessage() {}

func (x *CSODCGPrivateLobby_SharedDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGPrivateLobby_SharedDeck.ProtoReflect.Descriptor instead.
func (*CSODCGPrivateLobby_SharedDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{17, 2}
}

func (x *CSODCGPrivateLobby_SharedDeck) GetSharedByAccountId() uint32 {
	if x != nil && x.SharedByAccountId != nil {
		return *x.SharedByAccountId
	}
	return 0
}

func (x *CSODCGPrivateLobby_SharedDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CSODCGPrivateLobby_SharedDeck) GetDeckName() string {
	if x != nil && x.DeckName != nil {
		return *x.DeckName
	}
	return ""
}

type CSODCGPrivateLobby_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId          *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	WinningAccountId *uint32 `protobuf:"varint,2,opt,name=winning_account_id,json=winningAccountId" json:"winning_account_id,omitempty"`
}

func (x *CSODCGPrivateLobby_Match) Reset() {
	*x = CSODCGPrivateLobby_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODCGPrivateLobby_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODCGPrivateLobby_Match) ProtoMessage() {}

func (x *CSODCGPrivateLobby_Match) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODCGPrivateLobby_Match.ProtoReflect.Descriptor instead.
func (*CSODCGPrivateLobby_Match) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{17, 3}
}

func (x *CSODCGPrivateLobby_Match) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODCGPrivateLobby_Match) GetWinningAccountId() uint32 {
	if x != nil && x.WinningAccountId != nil {
		return *x.WinningAccountId
	}
	return 0
}

type CDCGTourney_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CDCGTourney_Match) Reset() {
	*x = CDCGTourney_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Match) ProtoMessage() {}

func (x *CDCGTourney_Match) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Match.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Match) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CDCGTourney_Match) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CDCGTourney_Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId  *uint32              `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	Account_1 *uint32              `protobuf:"varint,2,opt,name=account_1,json=account1" json:"account_1,omitempty"`
	Wins_1    *uint32              `protobuf:"varint,3,opt,name=wins_1,json=wins1" json:"wins_1,omitempty"`
	Account_2 *uint32              `protobuf:"varint,4,opt,name=account_2,json=account2" json:"account_2,omitempty"`
	Wins_2    *uint32              `protobuf:"varint,5,opt,name=wins_2,json=wins2" json:"wins_2,omitempty"`
	Ties      *uint32              `protobuf:"varint,6,opt,name=ties" json:"ties,omitempty"`
	Status    *uint32              `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	Matches   []*CDCGTourney_Match `protobuf:"bytes,8,rep,name=matches" json:"matches,omitempty"`
	LobbyId   *uint64              `protobuf:"fixed64,9,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CDCGTourney_Series) Reset() {
	*x = CDCGTourney_Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Series) ProtoMessage() {}

func (x *CDCGTourney_Series) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Series.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Series) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 1}
}

func (x *CDCGTourney_Series) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CDCGTourney_Series) GetAccount_1() uint32 {
	if x != nil && x.Account_1 != nil {
		return *x.Account_1
	}
	return 0
}

func (x *CDCGTourney_Series) GetWins_1() uint32 {
	if x != nil && x.Wins_1 != nil {
		return *x.Wins_1
	}
	return 0
}

func (x *CDCGTourney_Series) GetAccount_2() uint32 {
	if x != nil && x.Account_2 != nil {
		return *x.Account_2
	}
	return 0
}

func (x *CDCGTourney_Series) GetWins_2() uint32 {
	if x != nil && x.Wins_2 != nil {
		return *x.Wins_2
	}
	return 0
}

func (x *CDCGTourney_Series) GetTies() uint32 {
	if x != nil && x.Ties != nil {
		return *x.Ties
	}
	return 0
}

func (x *CDCGTourney_Series) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CDCGTourney_Series) GetMatches() []*CDCGTourney_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CDCGTourney_Series) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CDCGTourney_Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId           *uint32                  `protobuf:"varint,1,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	Format            *CDCGTourney_EFormat     `protobuf:"varint,2,opt,name=format,enum=artifact.CDCGTourney_EFormat,def=0" json:"format,omitempty"`
	Stage             *CDCGTourney_EPhaseStage `protobuf:"varint,3,opt,name=stage,enum=artifact.CDCGTourney_EPhaseStage,def=10" json:"stage,omitempty"`
	Series            []*CDCGTourney_Series    `protobuf:"bytes,4,rep,name=series" json:"series,omitempty"`
	LimitedFormat     *uint32                  `protobuf:"varint,5,opt,name=limited_format,json=limitedFormat" json:"limited_format,omitempty"`
	LimitedInstanceId *uint64                  `protobuf:"varint,6,opt,name=limited_instance_id,json=limitedInstanceId" json:"limited_instance_id,omitempty"`
	LimitedPoolId     *uint64                  `protobuf:"varint,7,opt,name=limited_pool_id,json=limitedPoolId" json:"limited_pool_id,omitempty"`
	AutoAdvanceTime   *uint32                  `protobuf:"varint,9,opt,name=auto_advance_time,json=autoAdvanceTime" json:"auto_advance_time,omitempty"`
}

// Default values for CDCGTourney_Phase fields.
const (
	Default_CDCGTourney_Phase_Format = CDCGTourney_k_eFormat_Invalid
	Default_CDCGTourney_Phase_Stage  = CDCGTourney_k_ePhaseStage_Pending
)

func (x *CDCGTourney_Phase) Reset() {
	*x = CDCGTourney_Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Phase) ProtoMessage() {}

func (x *CDCGTourney_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Phase.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Phase) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 2}
}

func (x *CDCGTourney_Phase) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CDCGTourney_Phase) GetFormat() CDCGTourney_EFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CDCGTourney_Phase_Format
}

func (x *CDCGTourney_Phase) GetStage() CDCGTourney_EPhaseStage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Default_CDCGTourney_Phase_Stage
}

func (x *CDCGTourney_Phase) GetSeries() []*CDCGTourney_Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *CDCGTourney_Phase) GetLimitedFormat() uint32 {
	if x != nil && x.LimitedFormat != nil {
		return *x.LimitedFormat
	}
	return 0
}

func (x *CDCGTourney_Phase) GetLimitedInstanceId() uint64 {
	if x != nil && x.LimitedInstanceId != nil {
		return *x.LimitedInstanceId
	}
	return 0
}

func (x *CDCGTourney_Phase) GetLimitedPoolId() uint64 {
	if x != nil && x.LimitedPoolId != nil {
		return *x.LimitedPoolId
	}
	return 0
}

func (x *CDCGTourney_Phase) GetAutoAdvanceTime() uint32 {
	if x != nil && x.AutoAdvanceTime != nil {
		return *x.AutoAdvanceTime
	}
	return 0
}

type CDCGTourney_PlayerDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckIndex *uint32 `protobuf:"varint,1,opt,name=deck_index,json=deckIndex" json:"deck_index,omitempty"`
	DeckBytes []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	PhaseId   *uint32 `protobuf:"varint,3,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SharedBy  *uint32 `protobuf:"varint,4,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
}

func (x *CDCGTourney_PlayerDeck) Reset() {
	*x = CDCGTourney_PlayerDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_PlayerDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_PlayerDeck) ProtoMessage() {}

func (x *CDCGTourney_PlayerDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_PlayerDeck.ProtoReflect.Descriptor instead.
func (*CDCGTourney_PlayerDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 3}
}

func (x *CDCGTourney_PlayerDeck) GetDeckIndex() uint32 {
	if x != nil && x.DeckIndex != nil {
		return *x.DeckIndex
	}
	return 0
}

func (x *CDCGTourney_PlayerDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CDCGTourney_PlayerDeck) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CDCGTourney_PlayerDeck) GetSharedBy() uint32 {
	if x != nil && x.SharedBy != nil {
		return *x.SharedBy
	}
	return 0
}

type CDCGTourney_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             *uint32                   `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RightsFlags           *uint32                   `protobuf:"varint,2,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
	PublicRegisteredDecks []*CDCGTourney_PlayerDeck `protobuf:"bytes,3,rep,name=public_registered_decks,json=publicRegisteredDecks" json:"public_registered_decks,omitempty"`
	InitialSeed           *uint32                   `protobuf:"varint,4,opt,name=initial_seed,json=initialSeed" json:"initial_seed,omitempty"`
	InitialGroup          *uint32                   `protobuf:"varint,5,opt,name=initial_group,json=initialGroup" json:"initial_group,omitempty"`
}

func (x *CDCGTourney_Member) Reset() {
	*x = CDCGTourney_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Member) ProtoMessage() {}

func (x *CDCGTourney_Member) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Member.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Member) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 4}
}

func (x *CDCGTourney_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDCGTourney_Member) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

func (x *CDCGTourney_Member) GetPublicRegisteredDecks() []*CDCGTourney_PlayerDeck {
	if x != nil {
		return x.PublicRegisteredDecks
	}
	return nil
}

func (x *CDCGTourney_Member) GetInitialSeed() uint32 {
	if x != nil && x.InitialSeed != nil {
		return *x.InitialSeed
	}
	return 0
}

func (x *CDCGTourney_Member) GetInitialGroup() uint32 {
	if x != nil && x.InitialGroup != nil {
		return *x.InitialGroup
	}
	return 0
}

type CDCGTourney_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	InvitedBy   *uint32 `protobuf:"varint,2,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
	InviteTime  *uint32 `protobuf:"varint,3,opt,name=invite_time,json=inviteTime" json:"invite_time,omitempty"`
	RightsFlags *uint32 `protobuf:"varint,4,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
}

func (x *CDCGTourney_Invite) Reset() {
	*x = CDCGTourney_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Invite) ProtoMessage() {}

func (x *CDCGTourney_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Invite.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Invite) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 5}
}

func (x *CDCGTourney_Invite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CDCGTourney_Invite) GetInvitedBy() uint32 {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return 0
}

func (x *CDCGTourney_Invite) GetInviteTime() uint32 {
	if x != nil && x.InviteTime != nil {
		return *x.InviteTime
	}
	return 0
}

func (x *CDCGTourney_Invite) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

type CDCGTourney_ConfigVals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValId   *uint32 `protobuf:"varint,1,opt,name=val_id,json=valId" json:"val_id,omitempty"`
	PhaseId *uint32 `protobuf:"varint,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	Value   *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *CDCGTourney_ConfigVals) Reset() {
	*x = CDCGTourney_ConfigVals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_ConfigVals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_ConfigVals) ProtoMessage() {}

func (x *CDCGTourney_ConfigVals) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_ConfigVals.ProtoReflect.Descriptor instead.
func (*CDCGTourney_ConfigVals) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 6}
}

func (x *CDCGTourney_ConfigVals) GetValId() uint32 {
	if x != nil && x.ValId != nil {
		return *x.ValId
	}
	return 0
}

func (x *CDCGTourney_ConfigVals) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CDCGTourney_ConfigVals) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CDCGTourney_SharedDeck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedBy   *uint32 `protobuf:"varint,1,opt,name=shared_by,json=sharedBy" json:"shared_by,omitempty"`
	DeckBytes  []byte  `protobuf:"bytes,2,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
	SharedSlot *uint32 `protobuf:"varint,3,opt,name=shared_slot,json=sharedSlot" json:"shared_slot,omitempty"`
}

func (x *CDCGTourney_SharedDeck) Reset() {
	*x = CDCGTourney_SharedDeck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_SharedDeck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_SharedDeck) ProtoMessage() {}

func (x *CDCGTourney_SharedDeck) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_SharedDeck.ProtoReflect.Descriptor instead.
func (*CDCGTourney_SharedDeck) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 7}
}

func (x *CDCGTourney_SharedDeck) GetSharedBy() uint32 {
	if x != nil && x.SharedBy != nil {
		return *x.SharedBy
	}
	return 0
}

func (x *CDCGTourney_SharedDeck) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

func (x *CDCGTourney_SharedDeck) GetSharedSlot() uint32 {
	if x != nil && x.SharedSlot != nil {
		return *x.SharedSlot
	}
	return 0
}

type CDCGTourney_EntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex  *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Quantity  *uint32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	PerMember *bool   `protobuf:"varint,3,opt,name=per_member,json=perMember" json:"per_member,omitempty"`
}

func (x *CDCGTourney_EntryItem) Reset() {
	*x = CDCGTourney_EntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_EntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_EntryItem) ProtoMessage() {}

func (x *CDCGTourney_EntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_EntryItem.ProtoReflect.Descriptor instead.
func (*CDCGTourney_EntryItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 8}
}

func (x *CDCGTourney_EntryItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CDCGTourney_EntryItem) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CDCGTourney_EntryItem) GetPerMember() bool {
	if x != nil && x.PerMember != nil {
		return *x.PerMember
	}
	return false
}

type CDCGTourney_PaidEntryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex        *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	TargetAccountId *uint32 `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	OwnerAccountId  *uint32 `protobuf:"varint,3,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
}

func (x *CDCGTourney_PaidEntryItem) Reset() {
	*x = CDCGTourney_PaidEntryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_PaidEntryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_PaidEntryItem) ProtoMessage() {}

func (x *CDCGTourney_PaidEntryItem) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_PaidEntryItem.ProtoReflect.Descriptor instead.
func (*CDCGTourney_PaidEntryItem) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 9}
}

func (x *CDCGTourney_PaidEntryItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CDCGTourney_PaidEntryItem) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CDCGTourney_PaidEntryItem) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

type CDCGTourney_Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId       *uint32            `protobuf:"varint,1,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	DeckValidator *CMsgDeckValidator `protobuf:"bytes,2,opt,name=deck_validator,json=deckValidator" json:"deck_validator,omitempty"`
}

func (x *CDCGTourney_Validator) Reset() {
	*x = CDCGTourney_Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCGTourney_Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCGTourney_Validator) ProtoMessage() {}

func (x *CDCGTourney_Validator) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCGTourney_Validator.ProtoReflect.Descriptor instead.
func (*CDCGTourney_Validator) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{20, 10}
}

func (x *CDCGTourney_Validator) GetPhaseId() uint32 {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return 0
}

func (x *CDCGTourney_Validator) GetDeckValidator() *CMsgDeckValidator {
	if x != nil {
		return x.DeckValidator
	}
	return nil
}

type CMsgMatchData_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Team           *EDCGLobbyTeam `protobuf:"varint,2,opt,name=team,enum=artifact.EDCGLobbyTeam,def=0" json:"team,omitempty"`
	PlayerSlot     *uint32        `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroLineup     []uint32       `protobuf:"varint,4,rep,name=hero_lineup,json=heroLineup" json:"hero_lineup,omitempty"`
	TowerHealth    []uint32       `protobuf:"varint,5,rep,name=tower_health,json=towerHealth" json:"tower_health,omitempty"`
	AncientHealth  *uint32        `protobuf:"varint,6,opt,name=ancient_health,json=ancientHealth" json:"ancient_health,omitempty"`
	Conceded       *bool          `protobuf:"varint,8,opt,name=conceded" json:"conceded,omitempty"`
	GameClock      *uint32        `protobuf:"varint,9,opt,name=game_clock,json=gameClock" json:"game_clock,omitempty"`
	HeroIds        []uint32       `protobuf:"varint,10,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
	Mmr            *uint32        `protobuf:"varint,11,opt,name=mmr" json:"mmr,omitempty"`
	MmrUncertainty *uint32        `protobuf:"varint,12,opt,name=mmr_uncertainty,json=mmrUncertainty" json:"mmr_uncertainty,omitempty"`
	DeckBytes      []byte         `protobuf:"bytes,13,opt,name=deck_bytes,json=deckBytes" json:"deck_bytes,omitempty"`
}

// Default values for CMsgMatchData_PlayerInfo fields.
const (
	Default_CMsgMatchData_PlayerInfo_Team = EDCGLobbyTeam_k_EDCGLobbyTeam_Team0
)

func (x *CMsgMatchData_PlayerInfo) Reset() {
	*x = CMsgMatchData_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchData_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchData_PlayerInfo) ProtoMessage() {}

func (x *CMsgMatchData_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_dcg_gcmessages_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchData_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchData_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_artifact_dcg_gcmessages_common_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CMsgMatchData_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetTeam() EDCGLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CMsgMatchData_PlayerInfo_Team
}

func (x *CMsgMatchData_PlayerInfo) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroLineup() []uint32 {
	if x != nil {
		return x.HeroLineup
	}
	return nil
}

func (x *CMsgMatchData_PlayerInfo) GetTowerHealth() []uint32 {
	if x != nil {
		return x.TowerHealth
	}
	return nil
}

func (x *CMsgMatchData_PlayerInfo) GetAncientHealth() uint32 {
	if x != nil && x.AncientHealth != nil {
		return *x.AncientHealth
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetConceded() bool {
	if x != nil && x.Conceded != nil {
		return *x.Conceded
	}
	return false
}

func (x *CMsgMatchData_PlayerInfo) GetGameClock() uint32 {
	if x != nil && x.GameClock != nil {
		return *x.GameClock
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetHeroIds() []uint32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

func (x *CMsgMatchData_PlayerInfo) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetMmrUncertainty() uint32 {
	if x != nil && x.MmrUncertainty != nil {
		return *x.MmrUncertainty
	}
	return 0
}

func (x *CMsgMatchData_PlayerInfo) GetDeckBytes() []byte {
	if x != nil {
		return x.DeckBytes
	}
	return nil
}

var File_artifact_dcg_gcmessages_common_proto protoreflect.FileDescriptor

var file_artifact_dcg_gcmessages_common_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x63, 0x67, 0x5f, 0x67,
	0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x1a, 0x1c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85,
	0x01, 0x0a, 0x0e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xed, 0x07, 0x0a, 0x0b, 0x43, 0x53, 0x4f, 0x44, 0x43,
	0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75,
	0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x95,
	0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x47, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x43, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x07, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x9d, 0x04, 0x0a, 0x14, 0x43, 0x53, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x44, 0x65, 0x66, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58, 0x70,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x6d, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x75,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6d,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x1a, 0x0a, 0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x10, 0x01, 0x22, 0xb5, 0x03, 0x0a, 0x0b, 0x43, 0x53, 0x4f, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c,
	0x65, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6,
	0x1d, 0x01, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x43,
	0x53, 0x4f, 0x50, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x12, 0x43,
	0x53, 0x4f, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x43, 0x53, 0x4f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0xdf, 0x03, 0x0a, 0x14, 0x43, 0x53, 0x4f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x0e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x53, 0x4f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0c, 0x6b, 0x5f,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x22, 0xc2, 0x01,
	0x0a, 0x07, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b,
	0x5f, 0x65, 0x45, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x6b, 0x5f, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x10, 0x0a, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x43, 0x53, 0x4f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0xa1, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x22, 0x99, 0x07, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x43, 0x47,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42,
	0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x3a, 0x15, 0x44, 0x43, 0x47,
	0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb9, 0x09, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x4f, 0x77,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4d,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x65, 0x72, 0x6f, 0x4d,
	0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x49, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6b, 0x49,
	0x64, 0x1a, 0x43, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x07, 0x45, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x65,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x72, 0x65, 0x10, 0x03, 0x22, 0x4d, 0x0a,
	0x06, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x52, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x22, 0xf5, 0x02, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x1a,
	0xf2, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x46, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54,
	0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x83, 0x0e, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x75,
	0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x74,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x57, 0x69,
	0x6e, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x57, 0x69,
	0x6e, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x69, 0x5f, 0x67, 0x61,
	0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73,
	0x41, 0x69, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x69,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c,
	0x61, 0x69, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x1c,
	0x67, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x1a, 0x67, 0x61, 0x75, 0x6e,
	0x74, 0x6c, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x1a, 0xaf, 0x02, 0x0a,
	0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x74,
	0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x1a, 0x3e,
	0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xf1,
	0x01, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x75, 0x6e, 0x74,
	0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x43, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x1a, 0x44, 0x0a, 0x19, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x11, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x1a,
	0xca, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x55, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x6b, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x64, 0x0a, 0x0a,
	0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x50, 0x61, 0x63, 0x6b,
	0x10, 0x04, 0x22, 0xa3, 0x0c, 0x0a, 0x12, 0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x53, 0x4f, 0x44, 0x43, 0x47, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x3a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a,
	0xce, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x1a, 0x69, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x79, 0x0a, 0x0a, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x50, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x13, 0x43, 0x53, 0x4f, 0x44,
	0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x53, 0x4f, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52,
	0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0xa1, 0x18, 0x0a, 0x0b,
	0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x2e, 0x45, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d,
	0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44,
	0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x10, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x70, 0x61,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43,
	0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x22, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x8b, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x73, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x73,
	0x31, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x15,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x77, 0x69, 0x6e, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44,
	0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x1a, 0x9d, 0x03, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e,
	0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x11, 0x6b, 0x5f, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44, 0x43,
	0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x45, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x3a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x44,
	0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x65,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x1a, 0xec, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x43, 0x44, 0x43, 0x47, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x8a, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x1a, 0x54, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x69, 0x0a, 0x0a, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x63, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x82, 0x01, 0x0a, 0x0d, 0x50,
	0x61, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x6a, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6b, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x65, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64, 0x65,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x06, 0x45,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x10, 0x0a, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x53, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73,
	0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x32, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x45, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x14, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x45,
	0x64, 0x69, 0x74, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x28,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x32, 0x22, 0x71, 0x0a, 0x07,
	0x45, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x42, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6c, 0x69, 0x6d, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x77,
	0x69, 0x73, 0x73, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x10, 0x03, 0x22,
	0x6e, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0a,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x97, 0x02, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0xb3, 0x07, 0x0a, 0x0d, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x14, 0x6b, 0x5f,
	0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x57,
	0x69, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45,
	0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f,
	0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65,
	0x61, 0x6d, 0x30, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x3c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xab,
	0x03, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x6d, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6d, 0x72, 0x5f, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x6d, 0x72, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a,
	0x0a, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x54, 0x69, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x41, 0x6c, 0x6c, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f,
	0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x45, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x65, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x2a,
	0x60, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x44, 0x43, 0x47, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x73, 0x10, 0xd8, 0x36, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd9,
	0x36, 0x2a, 0xc1, 0x01, 0x0a, 0x0d, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x61, 0x75, 0x6e, 0x74, 0x6c, 0x65, 0x74, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x49, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x09, 0x2a, 0x64, 0x0a, 0x0d, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x10, 0x2a, 0xd5, 0x01, 0x0a, 0x0e,
	0x45, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x44, 0x43, 0x47, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x05, 0x2a, 0xbc, 0x01, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64,
	0x10, 0x04, 0x2a, 0x30, 0x0a, 0x0c, 0x45, 0x47, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x10, 0x01, 0x2a, 0xcc, 0x06, 0x0a, 0x13, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d,
	0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x12, 0x22, 0x0a, 0x15,
	0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f,
	0x47, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x45, 0x50, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x43,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f,
	0x47, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x43, 0x47, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d,
	0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x43,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x45,
	0x50, 0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x43, 0x47,
	0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48,
	0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x13, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c,
	0x4f, 0x47, 0x5f, 0x42, 0x45, 0x47, 0x47, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x50, 0x45, 0x4c, 0x4c, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x2f,
	0x0a, 0x2b, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f,
	0x42, 0x45, 0x47, 0x47, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45,
	0x4c, 0x4c, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x15, 0x12,
	0x26, 0x0a, 0x22, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x41, 0x54, 0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x43, 0x47, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x10, 0x17, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x43, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x18, 0x42, 0x39, 0x48, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x70, 0x62, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x80, 0x01, 0x00,
}

var (
	file_artifact_dcg_gcmessages_common_proto_rawDescOnce sync.Once
	file_artifact_dcg_gcmessages_common_proto_rawDescData = file_artifact_dcg_gcmessages_common_proto_rawDesc
)

func file_artifact_dcg_gcmessages_common_proto_rawDescGZIP() []byte {
	file_artifact_dcg_gcmessages_common_proto_rawDescOnce.Do(func() {
		file_artifact_dcg_gcmessages_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_dcg_gcmessages_common_proto_rawDescData)
	})
	return file_artifact_dcg_gcmessages_common_proto_rawDescData
}

var file_artifact_dcg_gcmessages_common_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_artifact_dcg_gcmessages_common_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_artifact_dcg_gcmessages_common_proto_goTypes = []interface{}{
	(EGCDCGCommonMessages)(0),                            // 0: artifact.EGCDCGCommonMessages
	(EDCGMatchMode)(0),                                   // 1: artifact.EDCGMatchMode
	(EDCGLobbyTeam)(0),                                   // 2: artifact.EDCGLobbyTeam
	(EDCGLobbyTimer)(0),                                  // 3: artifact.EDCGLobbyTimer
	(ELobbyServerState)(0),                               // 4: artifact.ELobbyServerState
	(EGCLobbyData)(0),                                    // 5: artifact.EGCLobbyData
	(DCG_COMBATLOG_TYPES)(0),                             // 6: artifact.DCG_COMBATLOG_TYPES
	(CSOGameAccountClient_EFlags)(0),                     // 7: artifact.CSOGameAccountClient.EFlags
	(CSOTourneyMembership_EStatus)(0),                    // 8: artifact.CSOTourneyMembership.EStatus
	(CMsgDeckValidator_ERarity)(0),                       // 9: artifact.CMsgDeckValidator.ERarity
	(CMsgDeckValidator_EColor)(0),                        // 10: artifact.CMsgDeckValidator.EColor
	(CMsgLimitedFormat_EGrantType)(0),                    // 11: artifact.CMsgLimitedFormat.EGrantType
	(CDCGTourney_EStage)(0),                              // 12: artifact.CDCGTourney.EStage
	(CDCGTourney_EPhaseStage)(0),                         // 13: artifact.CDCGTourney.EPhaseStage
	(CDCGTourney_EFormat)(0),                             // 14: artifact.CDCGTourney.EFormat
	(CMsgMatchData_EEndReason)(0),                        // 15: artifact.CMsgMatchData.EEndReason
	(*CExtraMsgBlock)(nil),                               // 16: artifact.CExtraMsgBlock
	(*CSODCGLobby)(nil),                                  // 17: artifact.CSODCGLobby
	(*CLobbyData_PostMatchSurvey)(nil),                   // 18: artifact.CLobbyData_PostMatchSurvey
	(*CSOGameAccountClient)(nil),                         // 19: artifact.CSOGameAccountClient
	(*CSOGauntlet)(nil),                                  // 20: artifact.CSOGauntlet
	(*CSOPhantomItem)(nil),                               // 21: artifact.CSOPhantomItem
	(*CSOCardAchievement)(nil),                           // 22: artifact.CSOCardAchievement
	(*CSOPlayerLimitedProgress)(nil),                     // 23: artifact.CSOPlayerLimitedProgress
	(*CSOTourneyMembership)(nil),                         // 24: artifact.CSOTourneyMembership
	(*CSOTourneyInvite)(nil),                             // 25: artifact.CSOTourneyInvite
	(*CMsgStartFindingMatchInfo)(nil),                    // 26: artifact.CMsgStartFindingMatchInfo
	(*CMsgDCGCombatLogEntry)(nil),                        // 27: artifact.CMsgDCGCombatLogEntry
	(*CMsgDeckValidator)(nil),                            // 28: artifact.CMsgDeckValidator
	(*CMsgAnyToGCReportAsserts)(nil),                     // 29: artifact.CMsgAnyToGCReportAsserts
	(*CMsgAnyToGCReportAssertsResponse)(nil),             // 30: artifact.CMsgAnyToGCReportAssertsResponse
	(*CMsgGauntletConfig)(nil),                           // 31: artifact.CMsgGauntletConfig
	(*CMsgLimitedFormat)(nil),                            // 32: artifact.CMsgLimitedFormat
	(*CSODCGPrivateLobby)(nil),                           // 33: artifact.CSODCGPrivateLobby
	(*CSODCGTourneyInvite)(nil),                          // 34: artifact.CSODCGTourneyInvite
	(*CSODCGTourneyNextMatch)(nil),                       // 35: artifact.CSODCGTourneyNextMatch
	(*CDCGTourney)(nil),                                  // 36: artifact.CDCGTourney
	(*CMsgRegionPingTimesClient)(nil),                    // 37: artifact.CMsgRegionPingTimesClient
	(*CMsgMarketPrices)(nil),                             // 38: artifact.CMsgMarketPrices
	(*CMsgMatchData)(nil),                                // 39: artifact.CMsgMatchData
	(*CSODCGLobby_GauntletInfo)(nil),                     // 40: artifact.CSODCGLobby.GauntletInfo
	(*CSODCGLobby_Member)(nil),                           // 41: artifact.CSODCGLobby.Member
	(*CLobbyData_PostMatchSurvey_PlayerSurvey)(nil),      // 42: artifact.CLobbyData_PostMatchSurvey.PlayerSurvey
	(*CMsgDeckValidator_Deck)(nil),                       // 43: artifact.CMsgDeckValidator.Deck
	(*CMsgDeckValidator_CardLimit)(nil),                  // 44: artifact.CMsgDeckValidator.CardLimit
	(*CMsgAnyToGCReportAsserts_TrackedAssert)(nil),       // 45: artifact.CMsgAnyToGCReportAsserts.TrackedAssert
	(*CMsgGauntletConfig_RewardTier)(nil),                // 46: artifact.CMsgGauntletConfig.RewardTier
	(*CMsgGauntletConfig_EntryType)(nil),                 // 47: artifact.CMsgGauntletConfig.EntryType
	(*CMsgGauntletConfig_GauntletPointsLeaderboard)(nil), // 48: artifact.CMsgGauntletConfig.GauntletPointsLeaderboard
	(*CMsgGauntletConfig_RewardTier_Grant)(nil),          // 49: artifact.CMsgGauntletConfig.RewardTier.Grant
	(*CMsgGauntletConfig_EntryType_ItemCost)(nil),        // 50: artifact.CMsgGauntletConfig.EntryType.ItemCost
	(*CMsgLimitedFormat_LimitedStage)(nil),               // 51: artifact.CMsgLimitedFormat.LimitedStage
	(*CSODCGPrivateLobby_Member)(nil),                    // 52: artifact.CSODCGPrivateLobby.Member
	(*CSODCGPrivateLobby_Invite)(nil),                    // 53: artifact.CSODCGPrivateLobby.Invite
	(*CSODCGPrivateLobby_SharedDeck)(nil),                // 54: artifact.CSODCGPrivateLobby.SharedDeck
	(*CSODCGPrivateLobby_Match)(nil),                     // 55: artifact.CSODCGPrivateLobby.Match
	(*CDCGTourney_Match)(nil),                            // 56: artifact.CDCGTourney.Match
	(*CDCGTourney_Series)(nil),                           // 57: artifact.CDCGTourney.Series
	(*CDCGTourney_Phase)(nil),                            // 58: artifact.CDCGTourney.Phase
	(*CDCGTourney_PlayerDeck)(nil),                       // 59: artifact.CDCGTourney.PlayerDeck
	(*CDCGTourney_Member)(nil),                           // 60: artifact.CDCGTourney.Member
	(*CDCGTourney_Invite)(nil),                           // 61: artifact.CDCGTourney.Invite
	(*CDCGTourney_ConfigVals)(nil),                       // 62: artifact.CDCGTourney.ConfigVals
	(*CDCGTourney_SharedDeck)(nil),                       // 63: artifact.CDCGTourney.SharedDeck
	(*CDCGTourney_EntryItem)(nil),                        // 64: artifact.CDCGTourney.EntryItem
	(*CDCGTourney_PaidEntryItem)(nil),                    // 65: artifact.CDCGTourney.PaidEntryItem
	(*CDCGTourney_Validator)(nil),                        // 66: artifact.CDCGTourney.Validator
	(*CMsgMatchData_PlayerInfo)(nil),                     // 67: artifact.CMsgMatchData.PlayerInfo
}
var file_artifact_dcg_gcmessages_common_proto_depIdxs = []int32{
	41, // 0: artifact.CSODCGLobby.members:type_name -> artifact.CSODCGLobby.Member
	16, // 1: artifact.CSODCGLobby.extra_messages:type_name -> artifact.CExtraMsgBlock
	4,  // 2: artifact.CSODCGLobby.server_state:type_name -> artifact.ELobbyServerState
	1,  // 3: artifact.CSODCGLobby.match_mode:type_name -> artifact.EDCGMatchMode
	42, // 4: artifact.CLobbyData_PostMatchSurvey.surveys:type_name -> artifact.CLobbyData_PostMatchSurvey.PlayerSurvey
	8,  // 5: artifact.CSOTourneyMembership.tourney_status:type_name -> artifact.CSOTourneyMembership.EStatus
	1,  // 6: artifact.CMsgStartFindingMatchInfo.match_mode:type_name -> artifact.EDCGMatchMode
	6,  // 7: artifact.CMsgDCGCombatLogEntry.type:type_name -> artifact.DCG_COMBATLOG_TYPES
	44, // 8: artifact.CMsgDeckValidator.card_limits:type_name -> artifact.CMsgDeckValidator.CardLimit
	44, // 9: artifact.CMsgDeckValidator.required_cards:type_name -> artifact.CMsgDeckValidator.CardLimit
	9,  // 10: artifact.CMsgDeckValidator.blocked_rarities:type_name -> artifact.CMsgDeckValidator.ERarity
	10, // 11: artifact.CMsgDeckValidator.blocked_colors:type_name -> artifact.CMsgDeckValidator.EColor
	43, // 12: artifact.CMsgDeckValidator.deck_choices:type_name -> artifact.CMsgDeckValidator.Deck
	45, // 13: artifact.CMsgAnyToGCReportAsserts.asserts:type_name -> artifact.CMsgAnyToGCReportAsserts.TrackedAssert
	46, // 14: artifact.CMsgGauntletConfig.rewards:type_name -> artifact.CMsgGauntletConfig.RewardTier
	28, // 15: artifact.CMsgGauntletConfig.validator:type_name -> artifact.CMsgDeckValidator
	47, // 16: artifact.CMsgGauntletConfig.entry_types:type_name -> artifact.CMsgGauntletConfig.EntryType
	28, // 17: artifact.CMsgGauntletConfig.ai_validators:type_name -> artifact.CMsgDeckValidator
	48, // 18: artifact.CMsgGauntletConfig.gauntlet_points_leaderboards:type_name -> artifact.CMsgGauntletConfig.GauntletPointsLeaderboard
	51, // 19: artifact.CMsgLimitedFormat.grant_stage_info:type_name -> artifact.CMsgLimitedFormat.LimitedStage
	52, // 20: artifact.CSODCGPrivateLobby.members:type_name -> artifact.CSODCGPrivateLobby.Member
	53, // 21: artifact.CSODCGPrivateLobby.invites:type_name -> artifact.CSODCGPrivateLobby.Invite
	16, // 22: artifact.CSODCGPrivateLobby.extra_messages:type_name -> artifact.CExtraMsgBlock
	55, // 23: artifact.CSODCGPrivateLobby.match_list:type_name -> artifact.CSODCGPrivateLobby.Match
	3,  // 24: artifact.CSODCGPrivateLobby.timer_mode:type_name -> artifact.EDCGLobbyTimer
	54, // 25: artifact.CSODCGPrivateLobby.shared_decks:type_name -> artifact.CSODCGPrivateLobby.SharedDeck
	28, // 26: artifact.CSODCGPrivateLobby.deck_validator:type_name -> artifact.CMsgDeckValidator
	12, // 27: artifact.CDCGTourney.stage:type_name -> artifact.CDCGTourney.EStage
	66, // 28: artifact.CDCGTourney.validators:type_name -> artifact.CDCGTourney.Validator
	58, // 29: artifact.CDCGTourney.phases:type_name -> artifact.CDCGTourney.Phase
	62, // 30: artifact.CDCGTourney.config_vals:type_name -> artifact.CDCGTourney.ConfigVals
	61, // 31: artifact.CDCGTourney.invites:type_name -> artifact.CDCGTourney.Invite
	60, // 32: artifact.CDCGTourney.members:type_name -> artifact.CDCGTourney.Member
	63, // 33: artifact.CDCGTourney.shared_decks:type_name -> artifact.CDCGTourney.SharedDeck
	65, // 34: artifact.CDCGTourney.paid_entry_items:type_name -> artifact.CDCGTourney.PaidEntryItem
	64, // 35: artifact.CDCGTourney.entry_items:type_name -> artifact.CDCGTourney.EntryItem
	15, // 36: artifact.CMsgMatchData.end_reason:type_name -> artifact.CMsgMatchData.EEndReason
	2,  // 37: artifact.CMsgMatchData.winning_team:type_name -> artifact.EDCGLobbyTeam
	67, // 38: artifact.CMsgMatchData.players:type_name -> artifact.CMsgMatchData.PlayerInfo
	2,  // 39: artifact.CSODCGLobby.Member.team:type_name -> artifact.EDCGLobbyTeam
	40, // 40: artifact.CSODCGLobby.Member.gauntlet_info:type_name -> artifact.CSODCGLobby.GauntletInfo
	49, // 41: artifact.CMsgGauntletConfig.RewardTier.trophy_grant:type_name -> artifact.CMsgGauntletConfig.RewardTier.Grant
	49, // 42: artifact.CMsgGauntletConfig.RewardTier.item_grant:type_name -> artifact.CMsgGauntletConfig.RewardTier.Grant
	50, // 43: artifact.CMsgGauntletConfig.EntryType.item_costs:type_name -> artifact.CMsgGauntletConfig.EntryType.ItemCost
	11, // 44: artifact.CMsgLimitedFormat.LimitedStage.grant_type:type_name -> artifact.CMsgLimitedFormat.EGrantType
	2,  // 45: artifact.CSODCGPrivateLobby.Member.team:type_name -> artifact.EDCGLobbyTeam
	37, // 46: artifact.CSODCGPrivateLobby.Member.ping_times:type_name -> artifact.CMsgRegionPingTimesClient
	56, // 47: artifact.CDCGTourney.Series.matches:type_name -> artifact.CDCGTourney.Match
	14, // 48: artifact.CDCGTourney.Phase.format:type_name -> artifact.CDCGTourney.EFormat
	13, // 49: artifact.CDCGTourney.Phase.stage:type_name -> artifact.CDCGTourney.EPhaseStage
	57, // 50: artifact.CDCGTourney.Phase.series:type_name -> artifact.CDCGTourney.Series
	59, // 51: artifact.CDCGTourney.Member.public_registered_decks:type_name -> artifact.CDCGTourney.PlayerDeck
	28, // 52: artifact.CDCGTourney.Validator.deck_validator:type_name -> artifact.CMsgDeckValidator
	2,  // 53: artifact.CMsgMatchData.PlayerInfo.team:type_name -> artifact.EDCGLobbyTeam
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_artifact_dcg_gcmessages_common_proto_init() }
func file_artifact_dcg_gcmessages_common_proto_init() {
	if File_artifact_dcg_gcmessages_common_proto != nil {
		return
	}
	file_artifact_steammessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_artifact_dcg_gcmessages_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CExtraMsgBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyData_PostMatchSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOGameAccountClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOGauntlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOPhantomItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOCardAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOPlayerLimitedProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTourneyMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOTourneyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStartFindingMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDCGCombatLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDeckValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAsserts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAssertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLimitedFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGPrivateLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGTourneyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGTourneyNextMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRegionPingTimesClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMarketPrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGLobby_GauntletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGLobby_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyData_PostMatchSurvey_PlayerSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDeckValidator_Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDeckValidator_CardLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAsserts_TrackedAssert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig_RewardTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig_EntryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig_GauntletPointsLeaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig_RewardTier_Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGauntletConfig_EntryType_ItemCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLimitedFormat_LimitedStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGPrivateLobby_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGPrivateLobby_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGPrivateLobby_SharedDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODCGPrivateLobby_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_PlayerDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_ConfigVals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_SharedDeck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_EntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_PaidEntryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCGTourney_Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_dcg_gcmessages_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchData_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_dcg_gcmessages_common_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_dcg_gcmessages_common_proto_goTypes,
		DependencyIndexes: file_artifact_dcg_gcmessages_common_proto_depIdxs,
		EnumInfos:         file_artifact_dcg_gcmessages_common_proto_enumTypes,
		MessageInfos:      file_artifact_dcg_gcmessages_common_proto_msgTypes,
	}.Build()
	File_artifact_dcg_gcmessages_common_proto = out.File
	file_artifact_dcg_gcmessages_common_proto_rawDesc = nil
	file_artifact_dcg_gcmessages_common_proto_goTypes = nil
	file_artifact_dcg_gcmessages_common_proto_depIdxs = nil
}
