// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: csgo/gcsystemmsgs.proto

package csgo

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCSystemMsg int32

const (
	EGCSystemMsg_k_EGCMsgInvalid                                  EGCSystemMsg = 0
	EGCSystemMsg_k_EGCMsgMulti                                    EGCSystemMsg = 1
	EGCSystemMsg_k_EGCMsgGenericReply                             EGCSystemMsg = 10
	EGCSystemMsg_k_EGCMsgSystemBase                               EGCSystemMsg = 50
	EGCSystemMsg_k_EGCMsgAchievementAwarded                       EGCSystemMsg = 51
	EGCSystemMsg_k_EGCMsgConCommand                               EGCSystemMsg = 52
	EGCSystemMsg_k_EGCMsgStartPlaying                             EGCSystemMsg = 53
	EGCSystemMsg_k_EGCMsgStopPlaying                              EGCSystemMsg = 54
	EGCSystemMsg_k_EGCMsgStartGameserver                          EGCSystemMsg = 55
	EGCSystemMsg_k_EGCMsgStopGameserver                           EGCSystemMsg = 56
	EGCSystemMsg_k_EGCMsgWGRequest                                EGCSystemMsg = 57
	EGCSystemMsg_k_EGCMsgWGResponse                               EGCSystemMsg = 58
	EGCSystemMsg_k_EGCMsgGetUserGameStatsSchema                   EGCSystemMsg = 59
	EGCSystemMsg_k_EGCMsgGetUserGameStatsSchemaResponse           EGCSystemMsg = 60
	EGCSystemMsg_k_EGCMsgGetUserStatsDEPRECATED                   EGCSystemMsg = 61
	EGCSystemMsg_k_EGCMsgGetUserStatsResponse                     EGCSystemMsg = 62
	EGCSystemMsg_k_EGCMsgAppInfoUpdated                           EGCSystemMsg = 63
	EGCSystemMsg_k_EGCMsgValidateSession                          EGCSystemMsg = 64
	EGCSystemMsg_k_EGCMsgValidateSessionResponse                  EGCSystemMsg = 65
	EGCSystemMsg_k_EGCMsgLookupAccountFromInput                   EGCSystemMsg = 66
	EGCSystemMsg_k_EGCMsgSendHTTPRequest                          EGCSystemMsg = 67
	EGCSystemMsg_k_EGCMsgSendHTTPRequestResponse                  EGCSystemMsg = 68
	EGCSystemMsg_k_EGCMsgPreTestSetup                             EGCSystemMsg = 69
	EGCSystemMsg_k_EGCMsgRecordSupportAction                      EGCSystemMsg = 70
	EGCSystemMsg_k_EGCMsgGetAccountDetails_DEPRECATED             EGCSystemMsg = 71
	EGCSystemMsg_k_EGCMsgReceiveInterAppMessage                   EGCSystemMsg = 73
	EGCSystemMsg_k_EGCMsgFindAccounts                             EGCSystemMsg = 74
	EGCSystemMsg_k_EGCMsgPostAlert                                EGCSystemMsg = 75
	EGCSystemMsg_k_EGCMsgGetLicenses                              EGCSystemMsg = 76
	EGCSystemMsg_k_EGCMsgGetUserStats                             EGCSystemMsg = 77
	EGCSystemMsg_k_EGCMsgGetCommands                              EGCSystemMsg = 78
	EGCSystemMsg_k_EGCMsgGetCommandsResponse                      EGCSystemMsg = 79
	EGCSystemMsg_k_EGCMsgAddFreeLicense                           EGCSystemMsg = 80
	EGCSystemMsg_k_EGCMsgAddFreeLicenseResponse                   EGCSystemMsg = 81
	EGCSystemMsg_k_EGCMsgGetIPLocation                            EGCSystemMsg = 82
	EGCSystemMsg_k_EGCMsgGetIPLocationResponse                    EGCSystemMsg = 83
	EGCSystemMsg_k_EGCMsgSystemStatsSchema                        EGCSystemMsg = 84
	EGCSystemMsg_k_EGCMsgGetSystemStats                           EGCSystemMsg = 85
	EGCSystemMsg_k_EGCMsgGetSystemStatsResponse                   EGCSystemMsg = 86
	EGCSystemMsg_k_EGCMsgSendEmail                                EGCSystemMsg = 87
	EGCSystemMsg_k_EGCMsgSendEmailResponse                        EGCSystemMsg = 88
	EGCSystemMsg_k_EGCMsgGetEmailTemplate                         EGCSystemMsg = 89
	EGCSystemMsg_k_EGCMsgGetEmailTemplateResponse                 EGCSystemMsg = 90
	EGCSystemMsg_k_EGCMsgGrantGuestPass                           EGCSystemMsg = 91
	EGCSystemMsg_k_EGCMsgGrantGuestPassResponse                   EGCSystemMsg = 92
	EGCSystemMsg_k_EGCMsgGetAccountDetails                        EGCSystemMsg = 93
	EGCSystemMsg_k_EGCMsgGetAccountDetailsResponse                EGCSystemMsg = 94
	EGCSystemMsg_k_EGCMsgGetPersonaNames                          EGCSystemMsg = 95
	EGCSystemMsg_k_EGCMsgGetPersonaNamesResponse                  EGCSystemMsg = 96
	EGCSystemMsg_k_EGCMsgMultiplexMsg                             EGCSystemMsg = 97
	EGCSystemMsg_k_EGCMsgMultiplexMsgResponse                     EGCSystemMsg = 98
	EGCSystemMsg_k_EGCMsgWebAPIRegisterInterfaces                 EGCSystemMsg = 101
	EGCSystemMsg_k_EGCMsgWebAPIJobRequest                         EGCSystemMsg = 102
	EGCSystemMsg_k_EGCMsgWebAPIJobRequestHttpResponse             EGCSystemMsg = 104
	EGCSystemMsg_k_EGCMsgWebAPIJobRequestForwardResponse          EGCSystemMsg = 105
	EGCSystemMsg_k_EGCMsgMemCachedGet                             EGCSystemMsg = 200
	EGCSystemMsg_k_EGCMsgMemCachedGetResponse                     EGCSystemMsg = 201
	EGCSystemMsg_k_EGCMsgMemCachedSet                             EGCSystemMsg = 202
	EGCSystemMsg_k_EGCMsgMemCachedDelete                          EGCSystemMsg = 203
	EGCSystemMsg_k_EGCMsgMemCachedStats                           EGCSystemMsg = 204
	EGCSystemMsg_k_EGCMsgMemCachedStatsResponse                   EGCSystemMsg = 205
	EGCSystemMsg_k_EGCMsgMasterSetDirectory                       EGCSystemMsg = 220
	EGCSystemMsg_k_EGCMsgMasterSetDirectoryResponse               EGCSystemMsg = 221
	EGCSystemMsg_k_EGCMsgMasterSetWebAPIRouting                   EGCSystemMsg = 222
	EGCSystemMsg_k_EGCMsgMasterSetWebAPIRoutingResponse           EGCSystemMsg = 223
	EGCSystemMsg_k_EGCMsgMasterSetClientMsgRouting                EGCSystemMsg = 224
	EGCSystemMsg_k_EGCMsgMasterSetClientMsgRoutingResponse        EGCSystemMsg = 225
	EGCSystemMsg_k_EGCMsgSetOptions                               EGCSystemMsg = 226
	EGCSystemMsg_k_EGCMsgSetOptionsResponse                       EGCSystemMsg = 227
	EGCSystemMsg_k_EGCMsgSystemBase2                              EGCSystemMsg = 500
	EGCSystemMsg_k_EGCMsgGetPurchaseTrustStatus                   EGCSystemMsg = 501
	EGCSystemMsg_k_EGCMsgGetPurchaseTrustStatusResponse           EGCSystemMsg = 502
	EGCSystemMsg_k_EGCMsgUpdateSession                            EGCSystemMsg = 503
	EGCSystemMsg_k_EGCMsgGCAccountVacStatusChange                 EGCSystemMsg = 504
	EGCSystemMsg_k_EGCMsgCheckFriendship                          EGCSystemMsg = 505
	EGCSystemMsg_k_EGCMsgCheckFriendshipResponse                  EGCSystemMsg = 506
	EGCSystemMsg_k_EGCMsgGetPartnerAccountLink                    EGCSystemMsg = 507
	EGCSystemMsg_k_EGCMsgGetPartnerAccountLinkResponse            EGCSystemMsg = 508
	EGCSystemMsg_k_EGCMsgDPPartnerMicroTxns                       EGCSystemMsg = 512
	EGCSystemMsg_k_EGCMsgDPPartnerMicroTxnsResponse               EGCSystemMsg = 513
	EGCSystemMsg_k_EGCMsgVacVerificationChange                    EGCSystemMsg = 518
	EGCSystemMsg_k_EGCMsgAccountPhoneNumberChange                 EGCSystemMsg = 519
	EGCSystemMsg_k_EGCMsgInviteUserToLobby                        EGCSystemMsg = 523
	EGCSystemMsg_k_EGCMsgGetGamePersonalDataCategoriesRequest     EGCSystemMsg = 524
	EGCSystemMsg_k_EGCMsgGetGamePersonalDataCategoriesResponse    EGCSystemMsg = 525
	EGCSystemMsg_k_EGCMsgGetGamePersonalDataEntriesRequest        EGCSystemMsg = 526
	EGCSystemMsg_k_EGCMsgGetGamePersonalDataEntriesResponse       EGCSystemMsg = 527
	EGCSystemMsg_k_EGCMsgTerminateGamePersonalDataEntriesRequest  EGCSystemMsg = 528
	EGCSystemMsg_k_EGCMsgTerminateGamePersonalDataEntriesResponse EGCSystemMsg = 529
)

// Enum value maps for EGCSystemMsg.
var (
	EGCSystemMsg_name = map[int32]string{
		0:   "k_EGCMsgInvalid",
		1:   "k_EGCMsgMulti",
		10:  "k_EGCMsgGenericReply",
		50:  "k_EGCMsgSystemBase",
		51:  "k_EGCMsgAchievementAwarded",
		52:  "k_EGCMsgConCommand",
		53:  "k_EGCMsgStartPlaying",
		54:  "k_EGCMsgStopPlaying",
		55:  "k_EGCMsgStartGameserver",
		56:  "k_EGCMsgStopGameserver",
		57:  "k_EGCMsgWGRequest",
		58:  "k_EGCMsgWGResponse",
		59:  "k_EGCMsgGetUserGameStatsSchema",
		60:  "k_EGCMsgGetUserGameStatsSchemaResponse",
		61:  "k_EGCMsgGetUserStatsDEPRECATED",
		62:  "k_EGCMsgGetUserStatsResponse",
		63:  "k_EGCMsgAppInfoUpdated",
		64:  "k_EGCMsgValidateSession",
		65:  "k_EGCMsgValidateSessionResponse",
		66:  "k_EGCMsgLookupAccountFromInput",
		67:  "k_EGCMsgSendHTTPRequest",
		68:  "k_EGCMsgSendHTTPRequestResponse",
		69:  "k_EGCMsgPreTestSetup",
		70:  "k_EGCMsgRecordSupportAction",
		71:  "k_EGCMsgGetAccountDetails_DEPRECATED",
		73:  "k_EGCMsgReceiveInterAppMessage",
		74:  "k_EGCMsgFindAccounts",
		75:  "k_EGCMsgPostAlert",
		76:  "k_EGCMsgGetLicenses",
		77:  "k_EGCMsgGetUserStats",
		78:  "k_EGCMsgGetCommands",
		79:  "k_EGCMsgGetCommandsResponse",
		80:  "k_EGCMsgAddFreeLicense",
		81:  "k_EGCMsgAddFreeLicenseResponse",
		82:  "k_EGCMsgGetIPLocation",
		83:  "k_EGCMsgGetIPLocationResponse",
		84:  "k_EGCMsgSystemStatsSchema",
		85:  "k_EGCMsgGetSystemStats",
		86:  "k_EGCMsgGetSystemStatsResponse",
		87:  "k_EGCMsgSendEmail",
		88:  "k_EGCMsgSendEmailResponse",
		89:  "k_EGCMsgGetEmailTemplate",
		90:  "k_EGCMsgGetEmailTemplateResponse",
		91:  "k_EGCMsgGrantGuestPass",
		92:  "k_EGCMsgGrantGuestPassResponse",
		93:  "k_EGCMsgGetAccountDetails",
		94:  "k_EGCMsgGetAccountDetailsResponse",
		95:  "k_EGCMsgGetPersonaNames",
		96:  "k_EGCMsgGetPersonaNamesResponse",
		97:  "k_EGCMsgMultiplexMsg",
		98:  "k_EGCMsgMultiplexMsgResponse",
		101: "k_EGCMsgWebAPIRegisterInterfaces",
		102: "k_EGCMsgWebAPIJobRequest",
		104: "k_EGCMsgWebAPIJobRequestHttpResponse",
		105: "k_EGCMsgWebAPIJobRequestForwardResponse",
		200: "k_EGCMsgMemCachedGet",
		201: "k_EGCMsgMemCachedGetResponse",
		202: "k_EGCMsgMemCachedSet",
		203: "k_EGCMsgMemCachedDelete",
		204: "k_EGCMsgMemCachedStats",
		205: "k_EGCMsgMemCachedStatsResponse",
		220: "k_EGCMsgMasterSetDirectory",
		221: "k_EGCMsgMasterSetDirectoryResponse",
		222: "k_EGCMsgMasterSetWebAPIRouting",
		223: "k_EGCMsgMasterSetWebAPIRoutingResponse",
		224: "k_EGCMsgMasterSetClientMsgRouting",
		225: "k_EGCMsgMasterSetClientMsgRoutingResponse",
		226: "k_EGCMsgSetOptions",
		227: "k_EGCMsgSetOptionsResponse",
		500: "k_EGCMsgSystemBase2",
		501: "k_EGCMsgGetPurchaseTrustStatus",
		502: "k_EGCMsgGetPurchaseTrustStatusResponse",
		503: "k_EGCMsgUpdateSession",
		504: "k_EGCMsgGCAccountVacStatusChange",
		505: "k_EGCMsgCheckFriendship",
		506: "k_EGCMsgCheckFriendshipResponse",
		507: "k_EGCMsgGetPartnerAccountLink",
		508: "k_EGCMsgGetPartnerAccountLinkResponse",
		512: "k_EGCMsgDPPartnerMicroTxns",
		513: "k_EGCMsgDPPartnerMicroTxnsResponse",
		518: "k_EGCMsgVacVerificationChange",
		519: "k_EGCMsgAccountPhoneNumberChange",
		523: "k_EGCMsgInviteUserToLobby",
		524: "k_EGCMsgGetGamePersonalDataCategoriesRequest",
		525: "k_EGCMsgGetGamePersonalDataCategoriesResponse",
		526: "k_EGCMsgGetGamePersonalDataEntriesRequest",
		527: "k_EGCMsgGetGamePersonalDataEntriesResponse",
		528: "k_EGCMsgTerminateGamePersonalDataEntriesRequest",
		529: "k_EGCMsgTerminateGamePersonalDataEntriesResponse",
	}
	EGCSystemMsg_value = map[string]int32{
		"k_EGCMsgInvalid":                                  0,
		"k_EGCMsgMulti":                                    1,
		"k_EGCMsgGenericReply":                             10,
		"k_EGCMsgSystemBase":                               50,
		"k_EGCMsgAchievementAwarded":                       51,
		"k_EGCMsgConCommand":                               52,
		"k_EGCMsgStartPlaying":                             53,
		"k_EGCMsgStopPlaying":                              54,
		"k_EGCMsgStartGameserver":                          55,
		"k_EGCMsgStopGameserver":                           56,
		"k_EGCMsgWGRequest":                                57,
		"k_EGCMsgWGResponse":                               58,
		"k_EGCMsgGetUserGameStatsSchema":                   59,
		"k_EGCMsgGetUserGameStatsSchemaResponse":           60,
		"k_EGCMsgGetUserStatsDEPRECATED":                   61,
		"k_EGCMsgGetUserStatsResponse":                     62,
		"k_EGCMsgAppInfoUpdated":                           63,
		"k_EGCMsgValidateSession":                          64,
		"k_EGCMsgValidateSessionResponse":                  65,
		"k_EGCMsgLookupAccountFromInput":                   66,
		"k_EGCMsgSendHTTPRequest":                          67,
		"k_EGCMsgSendHTTPRequestResponse":                  68,
		"k_EGCMsgPreTestSetup":                             69,
		"k_EGCMsgRecordSupportAction":                      70,
		"k_EGCMsgGetAccountDetails_DEPRECATED":             71,
		"k_EGCMsgReceiveInterAppMessage":                   73,
		"k_EGCMsgFindAccounts":                             74,
		"k_EGCMsgPostAlert":                                75,
		"k_EGCMsgGetLicenses":                              76,
		"k_EGCMsgGetUserStats":                             77,
		"k_EGCMsgGetCommands":                              78,
		"k_EGCMsgGetCommandsResponse":                      79,
		"k_EGCMsgAddFreeLicense":                           80,
		"k_EGCMsgAddFreeLicenseResponse":                   81,
		"k_EGCMsgGetIPLocation":                            82,
		"k_EGCMsgGetIPLocationResponse":                    83,
		"k_EGCMsgSystemStatsSchema":                        84,
		"k_EGCMsgGetSystemStats":                           85,
		"k_EGCMsgGetSystemStatsResponse":                   86,
		"k_EGCMsgSendEmail":                                87,
		"k_EGCMsgSendEmailResponse":                        88,
		"k_EGCMsgGetEmailTemplate":                         89,
		"k_EGCMsgGetEmailTemplateResponse":                 90,
		"k_EGCMsgGrantGuestPass":                           91,
		"k_EGCMsgGrantGuestPassResponse":                   92,
		"k_EGCMsgGetAccountDetails":                        93,
		"k_EGCMsgGetAccountDetailsResponse":                94,
		"k_EGCMsgGetPersonaNames":                          95,
		"k_EGCMsgGetPersonaNamesResponse":                  96,
		"k_EGCMsgMultiplexMsg":                             97,
		"k_EGCMsgMultiplexMsgResponse":                     98,
		"k_EGCMsgWebAPIRegisterInterfaces":                 101,
		"k_EGCMsgWebAPIJobRequest":                         102,
		"k_EGCMsgWebAPIJobRequestHttpResponse":             104,
		"k_EGCMsgWebAPIJobRequestForwardResponse":          105,
		"k_EGCMsgMemCachedGet":                             200,
		"k_EGCMsgMemCachedGetResponse":                     201,
		"k_EGCMsgMemCachedSet":                             202,
		"k_EGCMsgMemCachedDelete":                          203,
		"k_EGCMsgMemCachedStats":                           204,
		"k_EGCMsgMemCachedStatsResponse":                   205,
		"k_EGCMsgMasterSetDirectory":                       220,
		"k_EGCMsgMasterSetDirectoryResponse":               221,
		"k_EGCMsgMasterSetWebAPIRouting":                   222,
		"k_EGCMsgMasterSetWebAPIRoutingResponse":           223,
		"k_EGCMsgMasterSetClientMsgRouting":                224,
		"k_EGCMsgMasterSetClientMsgRoutingResponse":        225,
		"k_EGCMsgSetOptions":                               226,
		"k_EGCMsgSetOptionsResponse":                       227,
		"k_EGCMsgSystemBase2":                              500,
		"k_EGCMsgGetPurchaseTrustStatus":                   501,
		"k_EGCMsgGetPurchaseTrustStatusResponse":           502,
		"k_EGCMsgUpdateSession":                            503,
		"k_EGCMsgGCAccountVacStatusChange":                 504,
		"k_EGCMsgCheckFriendship":                          505,
		"k_EGCMsgCheckFriendshipResponse":                  506,
		"k_EGCMsgGetPartnerAccountLink":                    507,
		"k_EGCMsgGetPartnerAccountLinkResponse":            508,
		"k_EGCMsgDPPartnerMicroTxns":                       512,
		"k_EGCMsgDPPartnerMicroTxnsResponse":               513,
		"k_EGCMsgVacVerificationChange":                    518,
		"k_EGCMsgAccountPhoneNumberChange":                 519,
		"k_EGCMsgInviteUserToLobby":                        523,
		"k_EGCMsgGetGamePersonalDataCategoriesRequest":     524,
		"k_EGCMsgGetGamePersonalDataCategoriesResponse":    525,
		"k_EGCMsgGetGamePersonalDataEntriesRequest":        526,
		"k_EGCMsgGetGamePersonalDataEntriesResponse":       527,
		"k_EGCMsgTerminateGamePersonalDataEntriesRequest":  528,
		"k_EGCMsgTerminateGamePersonalDataEntriesResponse": 529,
	}
)

func (x EGCSystemMsg) Enum() *EGCSystemMsg {
	p := new(EGCSystemMsg)
	*p = x
	return p
}

func (x EGCSystemMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCSystemMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[0].Descriptor()
}

func (EGCSystemMsg) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[0]
}

func (x EGCSystemMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCSystemMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCSystemMsg(num)
	return nil
}

// Deprecated: Use EGCSystemMsg.Descriptor instead.
func (EGCSystemMsg) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{0}
}

type ESOMsg int32

const (
	ESOMsg_k_ESOMsg_Create                   ESOMsg = 21
	ESOMsg_k_ESOMsg_Update                   ESOMsg = 22
	ESOMsg_k_ESOMsg_Destroy                  ESOMsg = 23
	ESOMsg_k_ESOMsg_CacheSubscribed          ESOMsg = 24
	ESOMsg_k_ESOMsg_CacheUnsubscribed        ESOMsg = 25
	ESOMsg_k_ESOMsg_UpdateMultiple           ESOMsg = 26
	ESOMsg_k_ESOMsg_CacheSubscriptionCheck   ESOMsg = 27
	ESOMsg_k_ESOMsg_CacheSubscriptionRefresh ESOMsg = 28
)

// Enum value maps for ESOMsg.
var (
	ESOMsg_name = map[int32]string{
		21: "k_ESOMsg_Create",
		22: "k_ESOMsg_Update",
		23: "k_ESOMsg_Destroy",
		24: "k_ESOMsg_CacheSubscribed",
		25: "k_ESOMsg_CacheUnsubscribed",
		26: "k_ESOMsg_UpdateMultiple",
		27: "k_ESOMsg_CacheSubscriptionCheck",
		28: "k_ESOMsg_CacheSubscriptionRefresh",
	}
	ESOMsg_value = map[string]int32{
		"k_ESOMsg_Create":                   21,
		"k_ESOMsg_Update":                   22,
		"k_ESOMsg_Destroy":                  23,
		"k_ESOMsg_CacheSubscribed":          24,
		"k_ESOMsg_CacheUnsubscribed":        25,
		"k_ESOMsg_UpdateMultiple":           26,
		"k_ESOMsg_CacheSubscriptionCheck":   27,
		"k_ESOMsg_CacheSubscriptionRefresh": 28,
	}
)

func (x ESOMsg) Enum() *ESOMsg {
	p := new(ESOMsg)
	*p = x
	return p
}

func (x ESOMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESOMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[1].Descriptor()
}

func (ESOMsg) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[1]
}

func (x ESOMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESOMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESOMsg(num)
	return nil
}

// Deprecated: Use ESOMsg.Descriptor instead.
func (ESOMsg) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{1}
}

type EGCBaseClientMsg int32

const (
	EGCBaseClientMsg_k_EMsgGCClientWelcome          EGCBaseClientMsg = 4004
	EGCBaseClientMsg_k_EMsgGCServerWelcome          EGCBaseClientMsg = 4005
	EGCBaseClientMsg_k_EMsgGCClientHello            EGCBaseClientMsg = 4006
	EGCBaseClientMsg_k_EMsgGCServerHello            EGCBaseClientMsg = 4007
	EGCBaseClientMsg_k_EMsgGCClientConnectionStatus EGCBaseClientMsg = 4009
	EGCBaseClientMsg_k_EMsgGCServerConnectionStatus EGCBaseClientMsg = 4010
	EGCBaseClientMsg_k_EMsgGCClientHelloPartner     EGCBaseClientMsg = 4011
	EGCBaseClientMsg_k_EMsgGCClientHelloPW          EGCBaseClientMsg = 4012
	EGCBaseClientMsg_k_EMsgGCClientHelloR2          EGCBaseClientMsg = 4013
	EGCBaseClientMsg_k_EMsgGCClientHelloR3          EGCBaseClientMsg = 4014
	EGCBaseClientMsg_k_EMsgGCClientHelloR4          EGCBaseClientMsg = 4015
)

// Enum value maps for EGCBaseClientMsg.
var (
	EGCBaseClientMsg_name = map[int32]string{
		4004: "k_EMsgGCClientWelcome",
		4005: "k_EMsgGCServerWelcome",
		4006: "k_EMsgGCClientHello",
		4007: "k_EMsgGCServerHello",
		4009: "k_EMsgGCClientConnectionStatus",
		4010: "k_EMsgGCServerConnectionStatus",
		4011: "k_EMsgGCClientHelloPartner",
		4012: "k_EMsgGCClientHelloPW",
		4013: "k_EMsgGCClientHelloR2",
		4014: "k_EMsgGCClientHelloR3",
		4015: "k_EMsgGCClientHelloR4",
	}
	EGCBaseClientMsg_value = map[string]int32{
		"k_EMsgGCClientWelcome":          4004,
		"k_EMsgGCServerWelcome":          4005,
		"k_EMsgGCClientHello":            4006,
		"k_EMsgGCServerHello":            4007,
		"k_EMsgGCClientConnectionStatus": 4009,
		"k_EMsgGCServerConnectionStatus": 4010,
		"k_EMsgGCClientHelloPartner":     4011,
		"k_EMsgGCClientHelloPW":          4012,
		"k_EMsgGCClientHelloR2":          4013,
		"k_EMsgGCClientHelloR3":          4014,
		"k_EMsgGCClientHelloR4":          4015,
	}
)

func (x EGCBaseClientMsg) Enum() *EGCBaseClientMsg {
	p := new(EGCBaseClientMsg)
	*p = x
	return p
}

func (x EGCBaseClientMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCBaseClientMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[2].Descriptor()
}

func (EGCBaseClientMsg) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[2]
}

func (x EGCBaseClientMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCBaseClientMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCBaseClientMsg(num)
	return nil
}

// Deprecated: Use EGCBaseClientMsg.Descriptor instead.
func (EGCBaseClientMsg) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{2}
}

type EGCToGCMsg int32

const (
	EGCToGCMsg_k_EGCToGCMsgMasterAck             EGCToGCMsg = 150
	EGCToGCMsg_k_EGCToGCMsgMasterAckResponse     EGCToGCMsg = 151
	EGCToGCMsg_k_EGCToGCMsgRouted                EGCToGCMsg = 152
	EGCToGCMsg_k_EGCToGCMsgRoutedReply           EGCToGCMsg = 153
	EGCToGCMsg_k_EMsgUpdateSessionIP             EGCToGCMsg = 154
	EGCToGCMsg_k_EMsgRequestSessionIP            EGCToGCMsg = 155
	EGCToGCMsg_k_EMsgRequestSessionIPResponse    EGCToGCMsg = 156
	EGCToGCMsg_k_EGCToGCMsgMasterStartupComplete EGCToGCMsg = 157
)

// Enum value maps for EGCToGCMsg.
var (
	EGCToGCMsg_name = map[int32]string{
		150: "k_EGCToGCMsgMasterAck",
		151: "k_EGCToGCMsgMasterAckResponse",
		152: "k_EGCToGCMsgRouted",
		153: "k_EGCToGCMsgRoutedReply",
		154: "k_EMsgUpdateSessionIP",
		155: "k_EMsgRequestSessionIP",
		156: "k_EMsgRequestSessionIPResponse",
		157: "k_EGCToGCMsgMasterStartupComplete",
	}
	EGCToGCMsg_value = map[string]int32{
		"k_EGCToGCMsgMasterAck":             150,
		"k_EGCToGCMsgMasterAckResponse":     151,
		"k_EGCToGCMsgRouted":                152,
		"k_EGCToGCMsgRoutedReply":           153,
		"k_EMsgUpdateSessionIP":             154,
		"k_EMsgRequestSessionIP":            155,
		"k_EMsgRequestSessionIPResponse":    156,
		"k_EGCToGCMsgMasterStartupComplete": 157,
	}
)

func (x EGCToGCMsg) Enum() *EGCToGCMsg {
	p := new(EGCToGCMsg)
	*p = x
	return p
}

func (x EGCToGCMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCToGCMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[3].Descriptor()
}

func (EGCToGCMsg) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[3]
}

func (x EGCToGCMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCToGCMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCToGCMsg(num)
	return nil
}

// Deprecated: Use EGCToGCMsg.Descriptor instead.
func (EGCToGCMsg) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{3}
}

type ECommunityItemClass int32

const (
	ECommunityItemClass_k_ECommunityItemClass_Invalid           ECommunityItemClass = 0
	ECommunityItemClass_k_ECommunityItemClass_Badge             ECommunityItemClass = 1
	ECommunityItemClass_k_ECommunityItemClass_GameCard          ECommunityItemClass = 2
	ECommunityItemClass_k_ECommunityItemClass_ProfileBackground ECommunityItemClass = 3
	ECommunityItemClass_k_ECommunityItemClass_Emoticon          ECommunityItemClass = 4
	ECommunityItemClass_k_ECommunityItemClass_BoosterPack       ECommunityItemClass = 5
	ECommunityItemClass_k_ECommunityItemClass_Consumable        ECommunityItemClass = 6
	ECommunityItemClass_k_ECommunityItemClass_GameGoo           ECommunityItemClass = 7
	ECommunityItemClass_k_ECommunityItemClass_ProfileModifier   ECommunityItemClass = 8
	ECommunityItemClass_k_ECommunityItemClass_Scene             ECommunityItemClass = 9
	ECommunityItemClass_k_ECommunityItemClass_SalienItem        ECommunityItemClass = 10
)

// Enum value maps for ECommunityItemClass.
var (
	ECommunityItemClass_name = map[int32]string{
		0:  "k_ECommunityItemClass_Invalid",
		1:  "k_ECommunityItemClass_Badge",
		2:  "k_ECommunityItemClass_GameCard",
		3:  "k_ECommunityItemClass_ProfileBackground",
		4:  "k_ECommunityItemClass_Emoticon",
		5:  "k_ECommunityItemClass_BoosterPack",
		6:  "k_ECommunityItemClass_Consumable",
		7:  "k_ECommunityItemClass_GameGoo",
		8:  "k_ECommunityItemClass_ProfileModifier",
		9:  "k_ECommunityItemClass_Scene",
		10: "k_ECommunityItemClass_SalienItem",
	}
	ECommunityItemClass_value = map[string]int32{
		"k_ECommunityItemClass_Invalid":           0,
		"k_ECommunityItemClass_Badge":             1,
		"k_ECommunityItemClass_GameCard":          2,
		"k_ECommunityItemClass_ProfileBackground": 3,
		"k_ECommunityItemClass_Emoticon":          4,
		"k_ECommunityItemClass_BoosterPack":       5,
		"k_ECommunityItemClass_Consumable":        6,
		"k_ECommunityItemClass_GameGoo":           7,
		"k_ECommunityItemClass_ProfileModifier":   8,
		"k_ECommunityItemClass_Scene":             9,
		"k_ECommunityItemClass_SalienItem":        10,
	}
)

func (x ECommunityItemClass) Enum() *ECommunityItemClass {
	p := new(ECommunityItemClass)
	*p = x
	return p
}

func (x ECommunityItemClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommunityItemClass) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[4].Descriptor()
}

func (ECommunityItemClass) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[4]
}

func (x ECommunityItemClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECommunityItemClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECommunityItemClass(num)
	return nil
}

// Deprecated: Use ECommunityItemClass.Descriptor instead.
func (ECommunityItemClass) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{4}
}

type ECommunityItemAttribute int32

const (
	ECommunityItemAttribute_k_ECommunityItemAttribute_Invalid               ECommunityItemAttribute = 0
	ECommunityItemAttribute_k_ECommunityItemAttribute_CardBorder            ECommunityItemAttribute = 1
	ECommunityItemAttribute_k_ECommunityItemAttribute_Level                 ECommunityItemAttribute = 2
	ECommunityItemAttribute_k_ECommunityItemAttribute_IssueNumber           ECommunityItemAttribute = 3
	ECommunityItemAttribute_k_ECommunityItemAttribute_TradableTime          ECommunityItemAttribute = 4
	ECommunityItemAttribute_k_ECommunityItemAttribute_StorePackageID        ECommunityItemAttribute = 5
	ECommunityItemAttribute_k_ECommunityItemAttribute_CommunityItemAppID    ECommunityItemAttribute = 6
	ECommunityItemAttribute_k_ECommunityItemAttribute_CommunityItemType     ECommunityItemAttribute = 7
	ECommunityItemAttribute_k_ECommunityItemAttribute_ProfileModiferEnabled ECommunityItemAttribute = 8
	ECommunityItemAttribute_k_ECommunityItemAttribute_ExpiryTime            ECommunityItemAttribute = 9
)

// Enum value maps for ECommunityItemAttribute.
var (
	ECommunityItemAttribute_name = map[int32]string{
		0: "k_ECommunityItemAttribute_Invalid",
		1: "k_ECommunityItemAttribute_CardBorder",
		2: "k_ECommunityItemAttribute_Level",
		3: "k_ECommunityItemAttribute_IssueNumber",
		4: "k_ECommunityItemAttribute_TradableTime",
		5: "k_ECommunityItemAttribute_StorePackageID",
		6: "k_ECommunityItemAttribute_CommunityItemAppID",
		7: "k_ECommunityItemAttribute_CommunityItemType",
		8: "k_ECommunityItemAttribute_ProfileModiferEnabled",
		9: "k_ECommunityItemAttribute_ExpiryTime",
	}
	ECommunityItemAttribute_value = map[string]int32{
		"k_ECommunityItemAttribute_Invalid":               0,
		"k_ECommunityItemAttribute_CardBorder":            1,
		"k_ECommunityItemAttribute_Level":                 2,
		"k_ECommunityItemAttribute_IssueNumber":           3,
		"k_ECommunityItemAttribute_TradableTime":          4,
		"k_ECommunityItemAttribute_StorePackageID":        5,
		"k_ECommunityItemAttribute_CommunityItemAppID":    6,
		"k_ECommunityItemAttribute_CommunityItemType":     7,
		"k_ECommunityItemAttribute_ProfileModiferEnabled": 8,
		"k_ECommunityItemAttribute_ExpiryTime":            9,
	}
)

func (x ECommunityItemAttribute) Enum() *ECommunityItemAttribute {
	p := new(ECommunityItemAttribute)
	*p = x
	return p
}

func (x ECommunityItemAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommunityItemAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_gcsystemmsgs_proto_enumTypes[5].Descriptor()
}

func (ECommunityItemAttribute) Type() protoreflect.EnumType {
	return &file_csgo_gcsystemmsgs_proto_enumTypes[5]
}

func (x ECommunityItemAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECommunityItemAttribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECommunityItemAttribute(num)
	return nil
}

// Deprecated: Use ECommunityItemAttribute.Descriptor instead.
func (ECommunityItemAttribute) EnumDescriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{5}
}

type CMsgGCHVacVerificationChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid      *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	IsVerified *bool   `protobuf:"varint,3,opt,name=is_verified,json=isVerified" json:"is_verified,omitempty"`
}

func (x *CMsgGCHVacVerificationChange) Reset() {
	*x = CMsgGCHVacVerificationChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCHVacVerificationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCHVacVerificationChange) ProtoMessage() {}

func (x *CMsgGCHVacVerificationChange) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCHVacVerificationChange.ProtoReflect.Descriptor instead.
func (*CMsgGCHVacVerificationChange) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgGCHVacVerificationChange) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGCHVacVerificationChange) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgGCHVacVerificationChange) GetIsVerified() bool {
	if x != nil && x.IsVerified != nil {
		return *x.IsVerified
	}
	return false
}

type CMsgGCHAccountPhoneNumberChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid       *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid         *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	PhoneId       *uint64 `protobuf:"varint,3,opt,name=phone_id,json=phoneId" json:"phone_id,omitempty"`
	IsVerified    *bool   `protobuf:"varint,4,opt,name=is_verified,json=isVerified" json:"is_verified,omitempty"`
	IsIdentifying *bool   `protobuf:"varint,5,opt,name=is_identifying,json=isIdentifying" json:"is_identifying,omitempty"`
}

func (x *CMsgGCHAccountPhoneNumberChange) Reset() {
	*x = CMsgGCHAccountPhoneNumberChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCHAccountPhoneNumberChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCHAccountPhoneNumberChange) ProtoMessage() {}

func (x *CMsgGCHAccountPhoneNumberChange) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCHAccountPhoneNumberChange.ProtoReflect.Descriptor instead.
func (*CMsgGCHAccountPhoneNumberChange) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgGCHAccountPhoneNumberChange) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGCHAccountPhoneNumberChange) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgGCHAccountPhoneNumberChange) GetPhoneId() uint64 {
	if x != nil && x.PhoneId != nil {
		return *x.PhoneId
	}
	return 0
}

func (x *CMsgGCHAccountPhoneNumberChange) GetIsVerified() bool {
	if x != nil && x.IsVerified != nil {
		return *x.IsVerified
	}
	return false
}

func (x *CMsgGCHAccountPhoneNumberChange) GetIsIdentifying() bool {
	if x != nil && x.IsIdentifying != nil {
		return *x.IsIdentifying
	}
	return false
}

type CMsgGCHInviteUserToLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid        *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid          *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	SteamidInvited *uint64 `protobuf:"fixed64,3,opt,name=steamid_invited,json=steamidInvited" json:"steamid_invited,omitempty"`
	SteamidLobby   *uint64 `protobuf:"fixed64,4,opt,name=steamid_lobby,json=steamidLobby" json:"steamid_lobby,omitempty"`
}

func (x *CMsgGCHInviteUserToLobby) Reset() {
	*x = CMsgGCHInviteUserToLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCHInviteUserToLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCHInviteUserToLobby) ProtoMessage() {}

func (x *CMsgGCHInviteUserToLobby) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCHInviteUserToLobby.ProtoReflect.Descriptor instead.
func (*CMsgGCHInviteUserToLobby) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGCHInviteUserToLobby) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGCHInviteUserToLobby) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgGCHInviteUserToLobby) GetSteamidInvited() uint64 {
	if x != nil && x.SteamidInvited != nil {
		return *x.SteamidInvited
	}
	return 0
}

func (x *CMsgGCHInviteUserToLobby) GetSteamidLobby() uint64 {
	if x != nil && x.SteamidLobby != nil {
		return *x.SteamidLobby
	}
	return 0
}

type CQuest_PublisherAddCommunityItemsToPlayer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid        *uint64                                                        `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid          *uint32                                                        `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	MatchItemType  *uint32                                                        `protobuf:"varint,3,opt,name=match_item_type,json=matchItemType" json:"match_item_type,omitempty"`
	MatchItemClass *uint32                                                        `protobuf:"varint,4,opt,name=match_item_class,json=matchItemClass" json:"match_item_class,omitempty"`
	PrefixItemName *string                                                        `protobuf:"bytes,5,opt,name=prefix_item_name,json=prefixItemName" json:"prefix_item_name,omitempty"`
	Attributes     []*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
	Note           *string                                                        `protobuf:"bytes,7,opt,name=note" json:"note,omitempty"`
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) Reset() {
	*x = CQuest_PublisherAddCommunityItemsToPlayer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQuest_PublisherAddCommunityItemsToPlayer_Request) ProtoMessage() {}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQuest_PublisherAddCommunityItemsToPlayer_Request.ProtoReflect.Descriptor instead.
func (*CQuest_PublisherAddCommunityItemsToPlayer_Request) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{3}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetMatchItemType() uint32 {
	if x != nil && x.MatchItemType != nil {
		return *x.MatchItemType
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetMatchItemClass() uint32 {
	if x != nil && x.MatchItemClass != nil {
		return *x.MatchItemClass
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetPrefixItemName() string {
	if x != nil && x.PrefixItemName != nil {
		return *x.PrefixItemName
	}
	return ""
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetAttributes() []*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type CQuest_PublisherAddCommunityItemsToPlayer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsMatched *uint32 `protobuf:"varint,1,opt,name=items_matched,json=itemsMatched" json:"items_matched,omitempty"`
	ItemsGranted *uint32 `protobuf:"varint,2,opt,name=items_granted,json=itemsGranted" json:"items_granted,omitempty"`
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Response) Reset() {
	*x = CQuest_PublisherAddCommunityItemsToPlayer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQuest_PublisherAddCommunityItemsToPlayer_Response) ProtoMessage() {}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQuest_PublisherAddCommunityItemsToPlayer_Response.ProtoReflect.Descriptor instead.
func (*CQuest_PublisherAddCommunityItemsToPlayer_Response) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{4}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Response) GetItemsMatched() uint32 {
	if x != nil && x.ItemsMatched != nil {
		return *x.ItemsMatched
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Response) GetItemsGranted() uint32 {
	if x != nil && x.ItemsGranted != nil {
		return *x.ItemsGranted
	}
	return 0
}

type CCommunity_GamePersonalDataCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	LocalizationToken *string `protobuf:"bytes,2,opt,name=localization_token,json=localizationToken" json:"localization_token,omitempty"`
	TemplateFile      *string `protobuf:"bytes,3,opt,name=template_file,json=templateFile" json:"template_file,omitempty"`
}

func (x *CCommunity_GamePersonalDataCategoryInfo) Reset() {
	*x = CCommunity_GamePersonalDataCategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GamePersonalDataCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GamePersonalDataCategoryInfo) ProtoMessage() {}

func (x *CCommunity_GamePersonalDataCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GamePersonalDataCategoryInfo.ProtoReflect.Descriptor instead.
func (*CCommunity_GamePersonalDataCategoryInfo) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{5}
}

func (x *CCommunity_GamePersonalDataCategoryInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CCommunity_GamePersonalDataCategoryInfo) GetLocalizationToken() string {
	if x != nil && x.LocalizationToken != nil {
		return *x.LocalizationToken
	}
	return ""
}

func (x *CCommunity_GamePersonalDataCategoryInfo) GetTemplateFile() string {
	if x != nil && x.TemplateFile != nil {
		return *x.TemplateFile
	}
	return ""
}

type CCommunity_GetGamePersonalDataCategories_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCommunity_GetGamePersonalDataCategories_Request) Reset() {
	*x = CCommunity_GetGamePersonalDataCategories_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetGamePersonalDataCategories_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetGamePersonalDataCategories_Request) ProtoMessage() {}

func (x *CCommunity_GetGamePersonalDataCategories_Request) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetGamePersonalDataCategories_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetGamePersonalDataCategories_Request) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{6}
}

func (x *CCommunity_GetGamePersonalDataCategories_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_GetGamePersonalDataCategories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories        []*CCommunity_GamePersonalDataCategoryInfo `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
	AppAssetsBasename *string                                    `protobuf:"bytes,2,opt,name=app_assets_basename,json=appAssetsBasename" json:"app_assets_basename,omitempty"`
}

func (x *CCommunity_GetGamePersonalDataCategories_Response) Reset() {
	*x = CCommunity_GetGamePersonalDataCategories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetGamePersonalDataCategories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetGamePersonalDataCategories_Response) ProtoMessage() {}

func (x *CCommunity_GetGamePersonalDataCategories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetGamePersonalDataCategories_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetGamePersonalDataCategories_Response) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{7}
}

func (x *CCommunity_GetGamePersonalDataCategories_Response) GetCategories() []*CCommunity_GamePersonalDataCategoryInfo {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CCommunity_GetGamePersonalDataCategories_Response) GetAppAssetsBasename() string {
	if x != nil && x.AppAssetsBasename != nil {
		return *x.AppAssetsBasename
	}
	return ""
}

type CCommunity_GetGamePersonalDataEntries_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Steamid       *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Type          *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	ContinueToken *string `protobuf:"bytes,4,opt,name=continue_token,json=continueToken" json:"continue_token,omitempty"`
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) Reset() {
	*x = CCommunity_GetGamePersonalDataEntries_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetGamePersonalDataEntries_Request) ProtoMessage() {}

func (x *CCommunity_GetGamePersonalDataEntries_Request) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetGamePersonalDataEntries_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetGamePersonalDataEntries_Request) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{8}
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CCommunity_GetGamePersonalDataEntries_Request) GetContinueToken() string {
	if x != nil && x.ContinueToken != nil {
		return *x.ContinueToken
	}
	return ""
}

type CCommunity_GetGamePersonalDataEntries_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gceresult     *uint32  `protobuf:"varint,1,opt,name=gceresult" json:"gceresult,omitempty"`
	Entries       []string `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	ContinueToken *string  `protobuf:"bytes,3,opt,name=continue_token,json=continueToken" json:"continue_token,omitempty"`
}

func (x *CCommunity_GetGamePersonalDataEntries_Response) Reset() {
	*x = CCommunity_GetGamePersonalDataEntries_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_GetGamePersonalDataEntries_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetGamePersonalDataEntries_Response) ProtoMessage() {}

func (x *CCommunity_GetGamePersonalDataEntries_Response) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetGamePersonalDataEntries_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetGamePersonalDataEntries_Response) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{9}
}

func (x *CCommunity_GetGamePersonalDataEntries_Response) GetGceresult() uint32 {
	if x != nil && x.Gceresult != nil {
		return *x.Gceresult
	}
	return 0
}

func (x *CCommunity_GetGamePersonalDataEntries_Response) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CCommunity_GetGamePersonalDataEntries_Response) GetContinueToken() string {
	if x != nil && x.ContinueToken != nil {
		return *x.ContinueToken
	}
	return ""
}

type CCommunity_TerminateGamePersonalDataEntries_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Steamid *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Request) Reset() {
	*x = CCommunity_TerminateGamePersonalDataEntries_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_TerminateGamePersonalDataEntries_Request) ProtoMessage() {}

func (x *CCommunity_TerminateGamePersonalDataEntries_Request) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_TerminateGamePersonalDataEntries_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_TerminateGamePersonalDataEntries_Request) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{10}
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CCommunity_TerminateGamePersonalDataEntries_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gceresult *uint32 `protobuf:"varint,1,opt,name=gceresult" json:"gceresult,omitempty"`
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Response) Reset() {
	*x = CCommunity_TerminateGamePersonalDataEntries_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_TerminateGamePersonalDataEntries_Response) ProtoMessage() {}

func (x *CCommunity_TerminateGamePersonalDataEntries_Response) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_TerminateGamePersonalDataEntries_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_TerminateGamePersonalDataEntries_Response) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{11}
}

func (x *CCommunity_TerminateGamePersonalDataEntries_Response) GetGceresult() uint32 {
	if x != nil && x.Gceresult != nil {
		return *x.Gceresult
	}
	return 0
}

type CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *uint32 `protobuf:"varint,1,opt,name=attribute" json:"attribute,omitempty"`
	Value     *uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) Reset() {
	*x = CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_gcsystemmsgs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) ProtoMessage() {}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_gcsystemmsgs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute.ProtoReflect.Descriptor instead.
func (*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) Descriptor() ([]byte, []int) {
	return file_csgo_gcsystemmsgs_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) GetAttribute() uint32 {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return 0
}

func (x *CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

var File_csgo_gcsystemmsgs_proto protoreflect.FileDescriptor

var file_csgo_gcsystemmsgs_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x73, 0x67, 0x6f, 0x2f, 0x67, 0x63, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d,
	0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x22,
	0x6f, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x48, 0x56, 0x61, 0x63, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x22, 0xb4, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x48, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x48, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x22, 0x97, 0x03, 0x0a, 0x31, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e,
	0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x09, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x32,
	0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x91, 0x01, 0x0a,
	0x27, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x48, 0x0a, 0x30, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x31, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70,
	0x70, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x61, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x2d, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a,
	0x2e, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x63, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x67, 0x63, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65,
	0x0a, 0x33, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x34, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x63, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x67, 0x63, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0xc6, 0x17, 0x0a, 0x0c,
	0x45, 0x47, 0x43, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x13, 0x0a, 0x0f,
	0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0a, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x73, 0x65, 0x10, 0x32, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x34, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10,
	0x36, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x37, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x38, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x47, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x39, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x47, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x3a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x3b, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x3c, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x3d, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x3e, 0x12,
	0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x40, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x41, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10,
	0x42, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x43, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x10, 0x45, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x46, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x47, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14,
	0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x10, 0x4a, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x4b, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x10, 0x4c, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x4d,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x10, 0x4e, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x4f, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x10, 0x50, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x51, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x52, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x65, 0x74, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x53, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x54, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0x55, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x56, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x57, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x58, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x59, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x5a, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x10, 0x5b, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x5c, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x5d,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x5e, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x10, 0x5f, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x60, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x73,
	0x67, 0x10, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x62, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x66, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x68, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x69,
	0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x47, 0x65, 0x74, 0x10, 0xc8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x65, 0x74, 0x10, 0xca, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0xcb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x4d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0xcc, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x4d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xdc, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xdd, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xde, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x65, 0x62,
	0x41, 0x50, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xdf, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xe0, 0x01, 0x12, 0x2e, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe1, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0xe2, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe3, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x32, 0x10, 0xf4,
	0x03, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0xf5, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xf6, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xf7, 0x03, 0x12,
	0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x10, 0xf8, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x10, 0xf9, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfa, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xfb, 0x03, 0x12, 0x2a,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfc, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x54, 0x78, 0x6e, 0x73, 0x10, 0x80, 0x04, 0x12, 0x27, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x54, 0x78, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x81, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x61, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x86, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x87, 0x04, 0x12,
	0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x8b, 0x04, 0x12,
	0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x8c, 0x04, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x8d, 0x04, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x8e, 0x04, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8f, 0x04, 0x12, 0x34, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x47, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x90, 0x04, 0x12, 0x35, 0x0a,
	0x30, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x91, 0x04, 0x2a, 0xef, 0x01, 0x0a, 0x06, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x12,
	0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45,
	0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x10, 0x17, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x10, 0x18, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x10, 0x19, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x10, 0x1a, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x1b, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x4f, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x10, 0x1c, 0x2a, 0xd9, 0x02, 0x0a, 0x10, 0x45, 0x47, 0x43, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x15, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x10, 0xa4, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x10, 0xa5, 0x1f, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x10, 0xa6, 0x1f, 0x12, 0x18, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x10, 0xa7, 0x1f, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xa9, 0x1f, 0x12, 0x23, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xaa,
	0x1f, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10,
	0xab, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x57, 0x10, 0xac, 0x1f, 0x12, 0x1a,
	0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x32, 0x10, 0xad, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x33, 0x10, 0xae, 0x1f, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x34, 0x10,
	0xaf, 0x1f, 0x2a, 0x89, 0x02, 0x0a, 0x0a, 0x45, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x10, 0x96, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x97,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x73,
	0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x10, 0x98, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x99, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x50, 0x10, 0x9a, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x10, 0x9b,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x9c, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x9d, 0x01, 0x2a, 0xb0,
	0x03, 0x0a, 0x13, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x42, 0x61, 0x64, 0x67, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x6f, 0x6f, 0x10, 0x07, 0x12,
	0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x61, 0x6c, 0x69, 0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x0a, 0x2a, 0xd6, 0x03, 0x0a, 0x17, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x2a,
	0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x44, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f,
	0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x6b,
	0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x09, 0x42, 0x38, 0x48, 0x01, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x63, 0x73, 0x67,
	0x6f, 0x80, 0x01, 0x00,
}

var (
	file_csgo_gcsystemmsgs_proto_rawDescOnce sync.Once
	file_csgo_gcsystemmsgs_proto_rawDescData = file_csgo_gcsystemmsgs_proto_rawDesc
)

func file_csgo_gcsystemmsgs_proto_rawDescGZIP() []byte {
	file_csgo_gcsystemmsgs_proto_rawDescOnce.Do(func() {
		file_csgo_gcsystemmsgs_proto_rawDescData = protoimpl.X.CompressGZIP(file_csgo_gcsystemmsgs_proto_rawDescData)
	})
	return file_csgo_gcsystemmsgs_proto_rawDescData
}

var file_csgo_gcsystemmsgs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_csgo_gcsystemmsgs_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_csgo_gcsystemmsgs_proto_goTypes = []interface{}{
	(EGCSystemMsg)(0),                                                   // 0: csgo.EGCSystemMsg
	(ESOMsg)(0),                                                         // 1: csgo.ESOMsg
	(EGCBaseClientMsg)(0),                                               // 2: csgo.EGCBaseClientMsg
	(EGCToGCMsg)(0),                                                     // 3: csgo.EGCToGCMsg
	(ECommunityItemClass)(0),                                            // 4: csgo.ECommunityItemClass
	(ECommunityItemAttribute)(0),                                        // 5: csgo.ECommunityItemAttribute
	(*CMsgGCHVacVerificationChange)(nil),                                // 6: csgo.CMsgGCHVacVerificationChange
	(*CMsgGCHAccountPhoneNumberChange)(nil),                             // 7: csgo.CMsgGCHAccountPhoneNumberChange
	(*CMsgGCHInviteUserToLobby)(nil),                                    // 8: csgo.CMsgGCHInviteUserToLobby
	(*CQuest_PublisherAddCommunityItemsToPlayer_Request)(nil),           // 9: csgo.CQuest_PublisherAddCommunityItemsToPlayer_Request
	(*CQuest_PublisherAddCommunityItemsToPlayer_Response)(nil),          // 10: csgo.CQuest_PublisherAddCommunityItemsToPlayer_Response
	(*CCommunity_GamePersonalDataCategoryInfo)(nil),                     // 11: csgo.CCommunity_GamePersonalDataCategoryInfo
	(*CCommunity_GetGamePersonalDataCategories_Request)(nil),            // 12: csgo.CCommunity_GetGamePersonalDataCategories_Request
	(*CCommunity_GetGamePersonalDataCategories_Response)(nil),           // 13: csgo.CCommunity_GetGamePersonalDataCategories_Response
	(*CCommunity_GetGamePersonalDataEntries_Request)(nil),               // 14: csgo.CCommunity_GetGamePersonalDataEntries_Request
	(*CCommunity_GetGamePersonalDataEntries_Response)(nil),              // 15: csgo.CCommunity_GetGamePersonalDataEntries_Response
	(*CCommunity_TerminateGamePersonalDataEntries_Request)(nil),         // 16: csgo.CCommunity_TerminateGamePersonalDataEntries_Request
	(*CCommunity_TerminateGamePersonalDataEntries_Response)(nil),        // 17: csgo.CCommunity_TerminateGamePersonalDataEntries_Response
	(*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute)(nil), // 18: csgo.CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute
}
var file_csgo_gcsystemmsgs_proto_depIdxs = []int32{
	18, // 0: csgo.CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes:type_name -> csgo.CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute
	11, // 1: csgo.CCommunity_GetGamePersonalDataCategories_Response.categories:type_name -> csgo.CCommunity_GamePersonalDataCategoryInfo
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_csgo_gcsystemmsgs_proto_init() }
func file_csgo_gcsystemmsgs_proto_init() {
	if File_csgo_gcsystemmsgs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_csgo_gcsystemmsgs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCHVacVerificationChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCHAccountPhoneNumberChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCHInviteUserToLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQuest_PublisherAddCommunityItemsToPlayer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQuest_PublisherAddCommunityItemsToPlayer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GamePersonalDataCategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetGamePersonalDataCategories_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetGamePersonalDataCategories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetGamePersonalDataEntries_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_GetGamePersonalDataEntries_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_TerminateGamePersonalDataEntries_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCommunity_TerminateGamePersonalDataEntries_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_gcsystemmsgs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_csgo_gcsystemmsgs_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_csgo_gcsystemmsgs_proto_goTypes,
		DependencyIndexes: file_csgo_gcsystemmsgs_proto_depIdxs,
		EnumInfos:         file_csgo_gcsystemmsgs_proto_enumTypes,
		MessageInfos:      file_csgo_gcsystemmsgs_proto_msgTypes,
	}.Build()
	File_csgo_gcsystemmsgs_proto = out.File
	file_csgo_gcsystemmsgs_proto_rawDesc = nil
	file_csgo_gcsystemmsgs_proto_goTypes = nil
	file_csgo_gcsystemmsgs_proto_depIdxs = nil
}
