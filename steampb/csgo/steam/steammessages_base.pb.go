// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: csgo/steam/steammessages_base.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgProtoBufHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ClientSessionid   *int32  `protobuf:"varint,2,opt,name=client_sessionid,json=clientSessionid" json:"client_sessionid,omitempty"`
	RoutingAppid      *uint32 `protobuf:"varint,3,opt,name=routing_appid,json=routingAppid" json:"routing_appid,omitempty"`
	JobidSource       *uint64 `protobuf:"fixed64,10,opt,name=jobid_source,json=jobidSource,def=18446744073709551615" json:"jobid_source,omitempty"`
	JobidTarget       *uint64 `protobuf:"fixed64,11,opt,name=jobid_target,json=jobidTarget,def=18446744073709551615" json:"jobid_target,omitempty"`
	TargetJobName     *string `protobuf:"bytes,12,opt,name=target_job_name,json=targetJobName" json:"target_job_name,omitempty"`
	SeqNum            *int32  `protobuf:"varint,24,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	Eresult           *int32  `protobuf:"varint,13,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ErrorMessage      *string `protobuf:"bytes,14,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Ip                *uint32 `protobuf:"varint,15,opt,name=ip" json:"ip,omitempty"`
	AuthAccountFlags  *uint32 `protobuf:"varint,16,opt,name=auth_account_flags,json=authAccountFlags" json:"auth_account_flags,omitempty"`
	TokenSource       *uint32 `protobuf:"varint,22,opt,name=token_source,json=tokenSource" json:"token_source,omitempty"`
	AdminSpoofingUser *bool   `protobuf:"varint,23,opt,name=admin_spoofing_user,json=adminSpoofingUser" json:"admin_spoofing_user,omitempty"`
	TransportError    *int32  `protobuf:"varint,17,opt,name=transport_error,json=transportError,def=1" json:"transport_error,omitempty"`
	Messageid         *uint64 `protobuf:"varint,18,opt,name=messageid,def=18446744073709551615" json:"messageid,omitempty"`
	PublisherGroupId  *uint32 `protobuf:"varint,19,opt,name=publisher_group_id,json=publisherGroupId" json:"publisher_group_id,omitempty"`
	Sysid             *uint32 `protobuf:"varint,20,opt,name=sysid" json:"sysid,omitempty"`
	TraceTag          *uint64 `protobuf:"varint,21,opt,name=trace_tag,json=traceTag" json:"trace_tag,omitempty"`
	WebapiKeyId       *uint32 `protobuf:"varint,25,opt,name=webapi_key_id,json=webapiKeyId" json:"webapi_key_id,omitempty"`
}

// Default values for CMsgProtoBufHeader fields.
const (
	Default_CMsgProtoBufHeader_JobidSource    = uint64(18446744073709551615)
	Default_CMsgProtoBufHeader_JobidTarget    = uint64(18446744073709551615)
	Default_CMsgProtoBufHeader_Eresult        = int32(2)
	Default_CMsgProtoBufHeader_TransportError = int32(1)
	Default_CMsgProtoBufHeader_Messageid      = uint64(18446744073709551615)
)

func (x *CMsgProtoBufHeader) Reset() {
	*x = CMsgProtoBufHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtoBufHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtoBufHeader) ProtoMessage() {}

func (x *CMsgProtoBufHeader) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtoBufHeader.ProtoReflect.Descriptor instead.
func (*CMsgProtoBufHeader) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgProtoBufHeader) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetClientSessionid() int32 {
	if x != nil && x.ClientSessionid != nil {
		return *x.ClientSessionid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetRoutingAppid() uint32 {
	if x != nil && x.RoutingAppid != nil {
		return *x.RoutingAppid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetJobidSource() uint64 {
	if x != nil && x.JobidSource != nil {
		return *x.JobidSource
	}
	return Default_CMsgProtoBufHeader_JobidSource
}

func (x *CMsgProtoBufHeader) GetJobidTarget() uint64 {
	if x != nil && x.JobidTarget != nil {
		return *x.JobidTarget
	}
	return Default_CMsgProtoBufHeader_JobidTarget
}

func (x *CMsgProtoBufHeader) GetTargetJobName() string {
	if x != nil && x.TargetJobName != nil {
		return *x.TargetJobName
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetSeqNum() int32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgProtoBufHeader_Eresult
}

func (x *CMsgProtoBufHeader) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *CMsgProtoBufHeader) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetAuthAccountFlags() uint32 {
	if x != nil && x.AuthAccountFlags != nil {
		return *x.AuthAccountFlags
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTokenSource() uint32 {
	if x != nil && x.TokenSource != nil {
		return *x.TokenSource
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetAdminSpoofingUser() bool {
	if x != nil && x.AdminSpoofingUser != nil {
		return *x.AdminSpoofingUser
	}
	return false
}

func (x *CMsgProtoBufHeader) GetTransportError() int32 {
	if x != nil && x.TransportError != nil {
		return *x.TransportError
	}
	return Default_CMsgProtoBufHeader_TransportError
}

func (x *CMsgProtoBufHeader) GetMessageid() uint64 {
	if x != nil && x.Messageid != nil {
		return *x.Messageid
	}
	return Default_CMsgProtoBufHeader_Messageid
}

func (x *CMsgProtoBufHeader) GetPublisherGroupId() uint32 {
	if x != nil && x.PublisherGroupId != nil {
		return *x.PublisherGroupId
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetSysid() uint32 {
	if x != nil && x.Sysid != nil {
		return *x.Sysid
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetTraceTag() uint64 {
	if x != nil && x.TraceTag != nil {
		return *x.TraceTag
	}
	return 0
}

func (x *CMsgProtoBufHeader) GetWebapiKeyId() uint32 {
	if x != nil && x.WebapiKeyId != nil {
		return *x.WebapiKeyId
	}
	return 0
}

type CMsgMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeUnzipped *uint32 `protobuf:"varint,1,opt,name=size_unzipped,json=sizeUnzipped" json:"size_unzipped,omitempty"`
	MessageBody  []byte  `protobuf:"bytes,2,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (x *CMsgMulti) Reset() {
	*x = CMsgMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMulti) ProtoMessage() {}

func (x *CMsgMulti) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMulti.ProtoReflect.Descriptor instead.
func (*CMsgMulti) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgMulti) GetSizeUnzipped() uint32 {
	if x != nil && x.SizeUnzipped != nil {
		return *x.SizeUnzipped
	}
	return 0
}

func (x *CMsgMulti) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

type CMsgProtobufWrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBody []byte `protobuf:"bytes,1,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
}

func (x *CMsgProtobufWrapped) Reset() {
	*x = CMsgProtobufWrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgProtobufWrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProtobufWrapped) ProtoMessage() {}

func (x *CMsgProtobufWrapped) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProtobufWrapped.ProtoReflect.Descriptor instead.
func (*CMsgProtobufWrapped) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgProtobufWrapped) GetMessageBody() []byte {
	if x != nil {
		return x.MessageBody
	}
	return nil
}

type CMsgAuthTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estate     *uint32 `protobuf:"varint,1,opt,name=estate" json:"estate,omitempty"`
	Eresult    *uint32 `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Steamid    *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Gameid     *uint64 `protobuf:"fixed64,4,opt,name=gameid" json:"gameid,omitempty"`
	HSteamPipe *uint32 `protobuf:"varint,5,opt,name=h_steam_pipe,json=hSteamPipe" json:"h_steam_pipe,omitempty"`
	TicketCrc  *uint32 `protobuf:"varint,6,opt,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	Ticket     []byte  `protobuf:"bytes,7,opt,name=ticket" json:"ticket,omitempty"`
}

// Default values for CMsgAuthTicket fields.
const (
	Default_CMsgAuthTicket_Eresult = uint32(2)
)

func (x *CMsgAuthTicket) Reset() {
	*x = CMsgAuthTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAuthTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAuthTicket) ProtoMessage() {}

func (x *CMsgAuthTicket) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAuthTicket.ProtoReflect.Descriptor instead.
func (*CMsgAuthTicket) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgAuthTicket) GetEstate() uint32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgAuthTicket) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgAuthTicket_Eresult
}

func (x *CMsgAuthTicket) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgAuthTicket) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgAuthTicket) GetHSteamPipe() uint32 {
	if x != nil && x.HSteamPipe != nil {
		return *x.HSteamPipe
	}
	return 0
}

func (x *CMsgAuthTicket) GetTicketCrc() uint32 {
	if x != nil && x.TicketCrc != nil {
		return *x.TicketCrc
	}
	return 0
}

func (x *CMsgAuthTicket) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type CCDDBAppDetailCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                 *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name                  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon                  *string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Logo                  *string `protobuf:"bytes,4,opt,name=logo" json:"logo,omitempty"`
	LogoSmall             *string `protobuf:"bytes,5,opt,name=logo_small,json=logoSmall" json:"logo_small,omitempty"`
	Tool                  *bool   `protobuf:"varint,6,opt,name=tool" json:"tool,omitempty"`
	Demo                  *bool   `protobuf:"varint,7,opt,name=demo" json:"demo,omitempty"`
	Media                 *bool   `protobuf:"varint,8,opt,name=media" json:"media,omitempty"`
	CommunityVisibleStats *bool   `protobuf:"varint,9,opt,name=community_visible_stats,json=communityVisibleStats" json:"community_visible_stats,omitempty"`
	FriendlyName          *string `protobuf:"bytes,10,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Propagation           *string `protobuf:"bytes,11,opt,name=propagation" json:"propagation,omitempty"`
	HasAdultContent       *bool   `protobuf:"varint,12,opt,name=has_adult_content,json=hasAdultContent" json:"has_adult_content,omitempty"`
}

func (x *CCDDBAppDetailCommon) Reset() {
	*x = CCDDBAppDetailCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCDDBAppDetailCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCDDBAppDetailCommon) ProtoMessage() {}

func (x *CCDDBAppDetailCommon) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCDDBAppDetailCommon.ProtoReflect.Descriptor instead.
func (*CCDDBAppDetailCommon) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{4}
}

func (x *CCDDBAppDetailCommon) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCDDBAppDetailCommon) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetLogoSmall() string {
	if x != nil && x.LogoSmall != nil {
		return *x.LogoSmall
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetTool() bool {
	if x != nil && x.Tool != nil {
		return *x.Tool
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetDemo() bool {
	if x != nil && x.Demo != nil {
		return *x.Demo
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetMedia() bool {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetCommunityVisibleStats() bool {
	if x != nil && x.CommunityVisibleStats != nil {
		return *x.CommunityVisibleStats
	}
	return false
}

func (x *CCDDBAppDetailCommon) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetPropagation() string {
	if x != nil && x.Propagation != nil {
		return *x.Propagation
	}
	return ""
}

func (x *CCDDBAppDetailCommon) GetHasAdultContent() bool {
	if x != nil && x.HasAdultContent != nil {
		return *x.HasAdultContent
	}
	return false
}

type CMsgAppRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditInfo                 *bool `protobuf:"varint,1,opt,name=edit_info,json=editInfo" json:"edit_info,omitempty"`
	Publish                  *bool `protobuf:"varint,2,opt,name=publish" json:"publish,omitempty"`
	ViewErrorData            *bool `protobuf:"varint,3,opt,name=view_error_data,json=viewErrorData" json:"view_error_data,omitempty"`
	Download                 *bool `protobuf:"varint,4,opt,name=download" json:"download,omitempty"`
	UploadCdkeys             *bool `protobuf:"varint,5,opt,name=upload_cdkeys,json=uploadCdkeys" json:"upload_cdkeys,omitempty"`
	GenerateCdkeys           *bool `protobuf:"varint,6,opt,name=generate_cdkeys,json=generateCdkeys" json:"generate_cdkeys,omitempty"`
	ViewFinancials           *bool `protobuf:"varint,7,opt,name=view_financials,json=viewFinancials" json:"view_financials,omitempty"`
	ManageCeg                *bool `protobuf:"varint,8,opt,name=manage_ceg,json=manageCeg" json:"manage_ceg,omitempty"`
	ManageSigning            *bool `protobuf:"varint,9,opt,name=manage_signing,json=manageSigning" json:"manage_signing,omitempty"`
	ManageCdkeys             *bool `protobuf:"varint,10,opt,name=manage_cdkeys,json=manageCdkeys" json:"manage_cdkeys,omitempty"`
	EditMarketing            *bool `protobuf:"varint,11,opt,name=edit_marketing,json=editMarketing" json:"edit_marketing,omitempty"`
	EconomySupport           *bool `protobuf:"varint,12,opt,name=economy_support,json=economySupport" json:"economy_support,omitempty"`
	EconomySupportSupervisor *bool `protobuf:"varint,13,opt,name=economy_support_supervisor,json=economySupportSupervisor" json:"economy_support_supervisor,omitempty"`
	ManagePricing            *bool `protobuf:"varint,14,opt,name=manage_pricing,json=managePricing" json:"manage_pricing,omitempty"`
	BroadcastLive            *bool `protobuf:"varint,15,opt,name=broadcast_live,json=broadcastLive" json:"broadcast_live,omitempty"`
}

func (x *CMsgAppRights) Reset() {
	*x = CMsgAppRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_steammessages_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAppRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAppRights) ProtoMessage() {}

func (x *CMsgAppRights) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_steammessages_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAppRights.ProtoReflect.Descriptor instead.
func (*CMsgAppRights) Descriptor() ([]byte, []int) {
	return file_csgo_steam_steammessages_base_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgAppRights) GetEditInfo() bool {
	if x != nil && x.EditInfo != nil {
		return *x.EditInfo
	}
	return false
}

func (x *CMsgAppRights) GetPublish() bool {
	if x != nil && x.Publish != nil {
		return *x.Publish
	}
	return false
}

func (x *CMsgAppRights) GetViewErrorData() bool {
	if x != nil && x.ViewErrorData != nil {
		return *x.ViewErrorData
	}
	return false
}

func (x *CMsgAppRights) GetDownload() bool {
	if x != nil && x.Download != nil {
		return *x.Download
	}
	return false
}

func (x *CMsgAppRights) GetUploadCdkeys() bool {
	if x != nil && x.UploadCdkeys != nil {
		return *x.UploadCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetGenerateCdkeys() bool {
	if x != nil && x.GenerateCdkeys != nil {
		return *x.GenerateCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetViewFinancials() bool {
	if x != nil && x.ViewFinancials != nil {
		return *x.ViewFinancials
	}
	return false
}

func (x *CMsgAppRights) GetManageCeg() bool {
	if x != nil && x.ManageCeg != nil {
		return *x.ManageCeg
	}
	return false
}

func (x *CMsgAppRights) GetManageSigning() bool {
	if x != nil && x.ManageSigning != nil {
		return *x.ManageSigning
	}
	return false
}

func (x *CMsgAppRights) GetManageCdkeys() bool {
	if x != nil && x.ManageCdkeys != nil {
		return *x.ManageCdkeys
	}
	return false
}

func (x *CMsgAppRights) GetEditMarketing() bool {
	if x != nil && x.EditMarketing != nil {
		return *x.EditMarketing
	}
	return false
}

func (x *CMsgAppRights) GetEconomySupport() bool {
	if x != nil && x.EconomySupport != nil {
		return *x.EconomySupport
	}
	return false
}

func (x *CMsgAppRights) GetEconomySupportSupervisor() bool {
	if x != nil && x.EconomySupportSupervisor != nil {
		return *x.EconomySupportSupervisor
	}
	return false
}

func (x *CMsgAppRights) GetManagePricing() bool {
	if x != nil && x.ManagePricing != nil {
		return *x.ManagePricing
	}
	return false
}

func (x *CMsgAppRights) GetBroadcastLive() bool {
	if x != nil && x.BroadcastLive != nil {
		return *x.BroadcastLive
	}
	return false
}

var file_csgo_steam_steammessages_base_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50000,
		Name:          "csgo.steam.msgpool_soft_limit",
		Tag:           "varint,50000,opt,name=msgpool_soft_limit,def=32",
		Filename:      "csgo/steam/steammessages_base.proto",
	},
	{
		ExtendedType:  (*descriptor.MessageOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50001,
		Name:          "csgo.steam.msgpool_hard_limit",
		Tag:           "varint,50001,opt,name=msgpool_hard_limit,def=384",
		Filename:      "csgo/steam/steammessages_base.proto",
	},
}

// Extension fields to descriptor.MessageOptions.
var (
	// optional int32 msgpool_soft_limit = 50000;
	E_MsgpoolSoftLimit = &file_csgo_steam_steammessages_base_proto_extTypes[0]
	// optional int32 msgpool_hard_limit = 50001;
	E_MsgpoolHardLimit = &file_csgo_steam_steammessages_base_proto_extTypes[1]
)

var File_csgo_steam_steammessages_base_proto protoreflect.FileDescriptor

var file_csgo_steam_steammessages_base_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x73, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x05, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x75, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34,
	0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33,
	0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x69, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x70,
	0x6f, 0x6f, 0x66, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36,
	0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x79, 0x73, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x79, 0x73, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x77,
	0x65, 0x62, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x09, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x6e, 0x7a, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x7a, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x38, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xd0,
	0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xf0, 0x02, 0x0a, 0x14, 0x43, 0x43, 0x44, 0x44, 0x42, 0x41, 0x70, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x65, 0x6d, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x04, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x64, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x65, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x64, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x64, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x3a,
	0x53, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x33, 0x32, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x6f, 0x66, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x3a, 0x54, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x03, 0x33, 0x38, 0x34, 0x52, 0x10, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3e, 0x48, 0x01, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x63, 0x73, 0x67,
	0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_csgo_steam_steammessages_base_proto_rawDescOnce sync.Once
	file_csgo_steam_steammessages_base_proto_rawDescData = file_csgo_steam_steammessages_base_proto_rawDesc
)

func file_csgo_steam_steammessages_base_proto_rawDescGZIP() []byte {
	file_csgo_steam_steammessages_base_proto_rawDescOnce.Do(func() {
		file_csgo_steam_steammessages_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_csgo_steam_steammessages_base_proto_rawDescData)
	})
	return file_csgo_steam_steammessages_base_proto_rawDescData
}

var file_csgo_steam_steammessages_base_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_csgo_steam_steammessages_base_proto_goTypes = []interface{}{
	(*CMsgProtoBufHeader)(nil),        // 0: csgo.steam.CMsgProtoBufHeader
	(*CMsgMulti)(nil),                 // 1: csgo.steam.CMsgMulti
	(*CMsgProtobufWrapped)(nil),       // 2: csgo.steam.CMsgProtobufWrapped
	(*CMsgAuthTicket)(nil),            // 3: csgo.steam.CMsgAuthTicket
	(*CCDDBAppDetailCommon)(nil),      // 4: csgo.steam.CCDDBAppDetailCommon
	(*CMsgAppRights)(nil),             // 5: csgo.steam.CMsgAppRights
	(*descriptor.MessageOptions)(nil), // 6: google.protobuf.MessageOptions
}
var file_csgo_steam_steammessages_base_proto_depIdxs = []int32{
	6, // 0: csgo.steam.msgpool_soft_limit:extendee -> google.protobuf.MessageOptions
	6, // 1: csgo.steam.msgpool_hard_limit:extendee -> google.protobuf.MessageOptions
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	0, // [0:2] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_csgo_steam_steammessages_base_proto_init() }
func file_csgo_steam_steammessages_base_proto_init() {
	if File_csgo_steam_steammessages_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_csgo_steam_steammessages_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProtoBufHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_steammessages_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_steammessages_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgProtobufWrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_steammessages_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAuthTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_steammessages_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCDDBAppDetailCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_steammessages_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAppRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_csgo_steam_steammessages_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_csgo_steam_steammessages_base_proto_goTypes,
		DependencyIndexes: file_csgo_steam_steammessages_base_proto_depIdxs,
		MessageInfos:      file_csgo_steam_steammessages_base_proto_msgTypes,
		ExtensionInfos:    file_csgo_steam_steammessages_base_proto_extTypes,
	}.Build()
	File_csgo_steam_steammessages_base_proto = out.File
	file_csgo_steam_steammessages_base_proto_rawDesc = nil
	file_csgo_steam_steammessages_base_proto_goTypes = nil
	file_csgo_steam_steammessages_base_proto_depIdxs = nil
}
