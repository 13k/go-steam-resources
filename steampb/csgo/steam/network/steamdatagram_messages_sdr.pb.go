// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: csgo/steam/network/steamdatagram_messages_sdr.proto

package network

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Invalid                       ESteamDatagramMsgID = 0
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest             ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply               ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest         ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_LegacyGameserverPingReply     ESteamDatagramMsgID = 4
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest      ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished  ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                     ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                    ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter            ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer            ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter            ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient            ESteamDatagramMsgID = 12
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Stats                         ESteamDatagramMsgID = 13
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleRequest       ESteamDatagramMsgID = 14
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleReply         ESteamDatagramMsgID = 15
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary ESteamDatagramMsgID = 16
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayHealth                   ESteamDatagramMsgID = 17
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectRequest                ESteamDatagramMsgID = 18
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectOK                     ESteamDatagramMsgID = 19
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectionClosed              ESteamDatagramMsgID = 20
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoConnection                  ESteamDatagramMsgID = 21
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingRequest       ESteamDatagramMsgID = 22
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingReply         ESteamDatagramMsgID = 23
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionRequest             ESteamDatagramMsgID = 24
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionEstablished         ESteamDatagramMsgID = 25
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsClient                ESteamDatagramMsgID = 26
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsRelay                 ESteamDatagramMsgID = 27
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PBadRoute                   ESteamDatagramMsgID = 28
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply           ESteamDatagramMsgID = 29
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverRegistration        ESteamDatagramMsgID = 30
)

// Enum value maps for ESteamDatagramMsgID.
var (
	ESteamDatagramMsgID_name = map[int32]string{
		0:  "k_ESteamDatagramMsg_Invalid",
		1:  "k_ESteamDatagramMsg_RouterPingRequest",
		2:  "k_ESteamDatagramMsg_RouterPingReply",
		3:  "k_ESteamDatagramMsg_GameserverPingRequest",
		4:  "k_ESteamDatagramMsg_LegacyGameserverPingReply",
		5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
		6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
		7:  "k_ESteamDatagramMsg_NoSession",
		8:  "k_ESteamDatagramMsg_Diagnostic",
		9:  "k_ESteamDatagramMsg_DataClientToRouter",
		10: "k_ESteamDatagramMsg_DataRouterToServer",
		11: "k_ESteamDatagramMsg_DataServerToRouter",
		12: "k_ESteamDatagramMsg_DataRouterToClient",
		13: "k_ESteamDatagramMsg_Stats",
		14: "k_ESteamDatagramMsg_ClientPingSampleRequest",
		15: "k_ESteamDatagramMsg_ClientPingSampleReply",
		16: "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
		17: "k_ESteamDatagramMsg_RelayHealth",
		18: "k_ESteamDatagramMsg_ConnectRequest",
		19: "k_ESteamDatagramMsg_ConnectOK",
		20: "k_ESteamDatagramMsg_ConnectionClosed",
		21: "k_ESteamDatagramMsg_NoConnection",
		22: "k_ESteamDatagramMsg_RelayToRelayPingRequest",
		23: "k_ESteamDatagramMsg_RelayToRelayPingReply",
		24: "k_ESteamDatagramMsg_P2PSessionRequest",
		25: "k_ESteamDatagramMsg_P2PSessionEstablished",
		26: "k_ESteamDatagramMsg_P2PStatsClient",
		27: "k_ESteamDatagramMsg_P2PStatsRelay",
		28: "k_ESteamDatagramMsg_P2PBadRoute",
		29: "k_ESteamDatagramMsg_GameserverPingReply",
		30: "k_ESteamDatagramMsg_GameserverRegistration",
	}
	ESteamDatagramMsgID_value = map[string]int32{
		"k_ESteamDatagramMsg_Invalid":                       0,
		"k_ESteamDatagramMsg_RouterPingRequest":             1,
		"k_ESteamDatagramMsg_RouterPingReply":               2,
		"k_ESteamDatagramMsg_GameserverPingRequest":         3,
		"k_ESteamDatagramMsg_LegacyGameserverPingReply":     4,
		"k_ESteamDatagramMsg_GameserverSessionRequest":      5,
		"k_ESteamDatagramMsg_GameserverSessionEstablished":  6,
		"k_ESteamDatagramMsg_NoSession":                     7,
		"k_ESteamDatagramMsg_Diagnostic":                    8,
		"k_ESteamDatagramMsg_DataClientToRouter":            9,
		"k_ESteamDatagramMsg_DataRouterToServer":            10,
		"k_ESteamDatagramMsg_DataServerToRouter":            11,
		"k_ESteamDatagramMsg_DataRouterToClient":            12,
		"k_ESteamDatagramMsg_Stats":                         13,
		"k_ESteamDatagramMsg_ClientPingSampleRequest":       14,
		"k_ESteamDatagramMsg_ClientPingSampleReply":         15,
		"k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary": 16,
		"k_ESteamDatagramMsg_RelayHealth":                   17,
		"k_ESteamDatagramMsg_ConnectRequest":                18,
		"k_ESteamDatagramMsg_ConnectOK":                     19,
		"k_ESteamDatagramMsg_ConnectionClosed":              20,
		"k_ESteamDatagramMsg_NoConnection":                  21,
		"k_ESteamDatagramMsg_RelayToRelayPingRequest":       22,
		"k_ESteamDatagramMsg_RelayToRelayPingReply":         23,
		"k_ESteamDatagramMsg_P2PSessionRequest":             24,
		"k_ESteamDatagramMsg_P2PSessionEstablished":         25,
		"k_ESteamDatagramMsg_P2PStatsClient":                26,
		"k_ESteamDatagramMsg_P2PStatsRelay":                 27,
		"k_ESteamDatagramMsg_P2PBadRoute":                   28,
		"k_ESteamDatagramMsg_GameserverPingReply":           29,
		"k_ESteamDatagramMsg_GameserverRegistration":        30,
	}
)

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}

func (x ESteamDatagramMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDatagramMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[0].Descriptor()
}

func (ESteamDatagramMsgID) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[0]
}

func (x ESteamDatagramMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDatagramMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(num)
	return nil
}

// Deprecated: Use ESteamDatagramMsgID.Descriptor instead.
func (ESteamDatagramMsgID) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamDatagramConnectionClosed_ERelayMode int32

const (
	CMsgSteamDatagramConnectionClosed_None         CMsgSteamDatagramConnectionClosed_ERelayMode = 0
	CMsgSteamDatagramConnectionClosed_EndToEnd     CMsgSteamDatagramConnectionClosed_ERelayMode = 1
	CMsgSteamDatagramConnectionClosed_ClosedByPeer CMsgSteamDatagramConnectionClosed_ERelayMode = 2
)

// Enum value maps for CMsgSteamDatagramConnectionClosed_ERelayMode.
var (
	CMsgSteamDatagramConnectionClosed_ERelayMode_name = map[int32]string{
		0: "None",
		1: "EndToEnd",
		2: "ClosedByPeer",
	}
	CMsgSteamDatagramConnectionClosed_ERelayMode_value = map[string]int32{
		"None":         0,
		"EndToEnd":     1,
		"ClosedByPeer": 2,
	}
)

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Enum() *CMsgSteamDatagramConnectionClosed_ERelayMode {
	p := new(CMsgSteamDatagramConnectionClosed_ERelayMode)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[1]
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionClosed_ERelayMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionClosed_ERelayMode(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed_ERelayMode.Descriptor instead.
func (CMsgSteamDatagramConnectionClosed_ERelayMode) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgSteamDatagramConnectionStatsClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[2].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[2]
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[3].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[3]
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToServer_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToServer_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[4].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[4]
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToServer_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToServer_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgSteamDatagramConnectionStatsServerToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsServerToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[5].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[5]
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsServerToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsServerToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{18, 0}
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[6].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[6]
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{24, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[7].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[7]
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{25, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[8].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) Type() protoreflect.EnumType {
	return &file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes[8]
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{32, 0}
}

type CMsgSteamDatagramRouterPingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientTimestamp            *uint32                                            `protobuf:"fixed32,1,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LatencyDatacenterIds       []uint32                                           `protobuf:"fixed32,2,rep,packed,name=latency_datacenter_ids,json=latencyDatacenterIds" json:"latency_datacenter_ids,omitempty"`
	LatencyPingMs              []uint32                                           `protobuf:"varint,3,rep,packed,name=latency_ping_ms,json=latencyPingMs" json:"latency_ping_ms,omitempty"`
	YourPublicIp               *uint32                                            `protobuf:"fixed32,4,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime                 *uint32                                            `protobuf:"fixed32,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge                  *uint64                                            `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown       *uint32                                            `protobuf:"varint,7,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	ClientCookie               *uint32                                            `protobuf:"fixed32,8,opt,name=client_cookie,json=clientCookie" json:"client_cookie,omitempty"`
	ScoringPenaltyRelayCluster *uint32                                            `protobuf:"varint,9,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	RouteExceptions            []*CMsgSteamDatagramRouterPingReply_RouteException `protobuf:"bytes,10,rep,name=route_exceptions,json=routeExceptions" json:"route_exceptions,omitempty"`
}

func (x *CMsgSteamDatagramRouterPingReply) Reset() {
	*x = CMsgSteamDatagramRouterPingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterPingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIds() []uint32 {
	if x != nil {
		return x.LatencyDatacenterIds
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if x != nil {
		return x.LatencyPingMs
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientCookie() uint32 {
	if x != nil && x.ClientCookie != nil {
		return *x.ClientCookie
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetRouteExceptions() []*CMsgSteamDatagramRouterPingReply_RouteException {
	if x != nil {
		return x.RouteExceptions
	}
	return nil
}

type CMsgSteamDatagramGameserverPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YourPublicIp    *uint32 `protobuf:"fixed32,1,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime      *uint32 `protobuf:"fixed32,2,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge       *uint64 `protobuf:"fixed64,3,opt,name=challenge" json:"challenge,omitempty"`
	RouterTimestamp *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp,json=routerTimestamp" json:"router_timestamp,omitempty"`
}

func (x *CMsgSteamDatagramGameserverPingRequest) Reset() {
	*x = CMsgSteamDatagramGameserverPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingRequest) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramGameserverPingRequest) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequest) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequest) GetRouterTimestamp() uint32 {
	if x != nil && x.RouterTimestamp != nil {
		return *x.RouterTimestamp
	}
	return 0
}

type CMsgSteamDatagramLegacyGameserverPingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterTimestamp *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp,json=routerTimestamp" json:"router_timestamp,omitempty"`
	DummyPad        *uint64 `protobuf:"fixed64,99,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
}

func (x *CMsgSteamDatagramLegacyGameserverPingReply) Reset() {
	*x = CMsgSteamDatagramLegacyGameserverPingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramLegacyGameserverPingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLegacyGameserverPingReply) ProtoMessage() {}

func (x *CMsgSteamDatagramLegacyGameserverPingReply) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLegacyGameserverPingReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLegacyGameserverPingReply) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramLegacyGameserverPingReply) GetRouterTimestamp() uint32 {
	if x != nil && x.RouterTimestamp != nil {
		return *x.RouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramLegacyGameserverPingReply) GetDummyPad() uint64 {
	if x != nil && x.DummyPad != nil {
		return *x.DummyPad
	}
	return 0
}

type CMsgSteamDatagramGameserverPingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert       *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	SignedData []byte                              `protobuf:"bytes,2,opt,name=signed_data,json=signedData" json:"signed_data,omitempty"`
	Signature  []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgSteamDatagramGameserverPingReply) Reset() {
	*x = CMsgSteamDatagramGameserverPingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverPingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingReply) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingReply) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingReply) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramGameserverPingReply) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingReply) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingReply) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramNoSessionRelayToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId         *uint32 `protobuf:"fixed32,7,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	YourPublicIp         *uint32 `protobuf:"fixed32,2,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime           *uint32 `protobuf:"fixed32,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToClient) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToClient) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyRelaySessionId *uint32 `protobuf:"varint,1,opt,name=legacy_relay_session_id,json=legacyRelaySessionId" json:"legacy_relay_session_id,omitempty"`
	FromRelaySessionId   *uint32 `protobuf:"fixed32,2,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromConnectionId     *uint32 `protobuf:"fixed32,7,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	KludgePad            *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToPeer) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToPeer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToPeer) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetLegacyRelaySessionId() uint32 {
	if x != nil && x.LegacyRelaySessionId != nil {
		return *x.LegacyRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleRequest) Reset() {
	*x = CMsgSteamDatagramClientPingSampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleRequest) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamDatagramClientPingSampleRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId    *uint32                                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	RoutingClusters []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster `protobuf:"bytes,2,rep,name=routing_clusters,json=routingClusters" json:"routing_clusters,omitempty"`
	DataCenters     []*CMsgSteamDatagramClientPingSampleReply_DataCenter     `protobuf:"bytes,3,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetRoutingClusters() []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster {
	if x != nil {
		return x.RoutingClusters
	}
	return nil
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetDataCenters() []*CMsgSteamDatagramClientPingSampleReply_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type CMsgSteamDatagramClientSwitchedPrimary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId          *uint32                                               `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FromIp                *uint32                                               `protobuf:"fixed32,2,opt,name=from_ip,json=fromIp" json:"from_ip,omitempty"`
	FromPort              *uint32                                               `protobuf:"varint,3,opt,name=from_port,json=fromPort" json:"from_port,omitempty"`
	FromRouterCluster     *uint32                                               `protobuf:"fixed32,4,opt,name=from_router_cluster,json=fromRouterCluster" json:"from_router_cluster,omitempty"`
	FromActiveTime        *uint32                                               `protobuf:"varint,5,opt,name=from_active_time,json=fromActiveTime" json:"from_active_time,omitempty"`
	FromActivePacketsRecv *uint32                                               `protobuf:"varint,6,opt,name=from_active_packets_recv,json=fromActivePacketsRecv" json:"from_active_packets_recv,omitempty"`
	FromDroppedReason     *string                                               `protobuf:"bytes,7,opt,name=from_dropped_reason,json=fromDroppedReason" json:"from_dropped_reason,omitempty"`
	GapMs                 *uint32                                               `protobuf:"varint,8,opt,name=gap_ms,json=gapMs" json:"gap_ms,omitempty"`
	FromQualityNow        *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,9,opt,name=from_quality_now,json=fromQualityNow" json:"from_quality_now,omitempty"`
	ToQualityNow          *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,10,opt,name=to_quality_now,json=toQualityNow" json:"to_quality_now,omitempty"`
	FromQualityThen       *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,11,opt,name=from_quality_then,json=fromQualityThen" json:"from_quality_then,omitempty"`
	ToQualityThen         *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,12,opt,name=to_quality_then,json=toQualityThen" json:"to_quality_then,omitempty"`
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromIp() uint32 {
	if x != nil && x.FromIp != nil {
		return *x.FromIp
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromPort() uint32 {
	if x != nil && x.FromPort != nil {
		return *x.FromPort
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromRouterCluster() uint32 {
	if x != nil && x.FromRouterCluster != nil {
		return *x.FromRouterCluster
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActiveTime() uint32 {
	if x != nil && x.FromActiveTime != nil {
		return *x.FromActiveTime
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActivePacketsRecv() uint32 {
	if x != nil && x.FromActivePacketsRecv != nil {
		return *x.FromActivePacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromDroppedReason() string {
	if x != nil && x.FromDroppedReason != nil {
		return *x.FromDroppedReason
	}
	return ""
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetGapMs() uint32 {
	if x != nil && x.GapMs != nil {
		return *x.GapMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityThen
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityThen
	}
	return nil
}

type CMsgSteamDatagramConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId             *uint32                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp              *uint64                                  `protobuf:"fixed64,4,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs                *uint32                                  `protobuf:"varint,5,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	VirtualPort              *uint32                                  `protobuf:"varint,9,opt,name=virtual_port,json=virtualPort" json:"virtual_port,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	RoutingSecret            *uint64                                  `protobuf:"fixed64,10,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	LegacyClientSteamId      *uint64                                  `protobuf:"fixed64,3,opt,name=legacy_client_steam_id,json=legacyClientSteamId" json:"legacy_client_steam_id,omitempty"`
}

func (x *CMsgSteamDatagramConnectRequest) Reset() {
	*x = CMsgSteamDatagramConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectRequest) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamDatagramConnectRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetVirtualPort() uint32 {
	if x != nil && x.VirtualPort != nil {
		return *x.VirtualPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetLegacyClientSteamId() uint64 {
	if x != nil && x.LegacyClientSteamId != nil {
		return *x.LegacyClientSteamId
	}
	return 0
}

type CMsgSteamDatagramConnectOK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientConnectionId       *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId       *uint32                                  `protobuf:"fixed32,7,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp            *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec            *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
}

func (x *CMsgSteamDatagramConnectOK) Reset() {
	*x = CMsgSteamDatagramConnectOK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectOK) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectOK) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSteamDatagramConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

type CMsgSteamDatagramConnectionClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToConnectionId                 *uint32                                       `protobuf:"fixed32,7,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32                                       `protobuf:"fixed32,8,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	FromIdentity                   *CMsgSteamNetworkingIdentity                  `protobuf:"bytes,13,opt,name=from_identity,json=fromIdentity" json:"from_identity,omitempty"`
	LegacyFromSteamId              *uint64                                       `protobuf:"fixed64,3,opt,name=legacy_from_steam_id,json=legacyFromSteamId" json:"legacy_from_steam_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32                                       `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32                                       `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32                                       `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	ForwardTargetRelayRoutingToken []byte                                        `protobuf:"bytes,11,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                                       `protobuf:"varint,12,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	RelayMode                      *CMsgSteamDatagramConnectionClosed_ERelayMode `protobuf:"varint,4,opt,name=relay_mode,json=relayMode,enum=csgo.steam.network.CMsgSteamDatagramConnectionClosed_ERelayMode,def=0" json:"relay_mode,omitempty"`
	Debug                          *string                                       `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode                     *uint32                                       `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	RoutingSecret                  *uint64                                       `protobuf:"fixed64,14,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
}

// Default values for CMsgSteamDatagramConnectionClosed fields.
const (
	Default_CMsgSteamDatagramConnectionClosed_RelayMode = CMsgSteamDatagramConnectionClosed_None
)

func (x *CMsgSteamDatagramConnectionClosed) Reset() {
	*x = CMsgSteamDatagramConnectionClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionClosed) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSteamDatagramConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromIdentity() *CMsgSteamNetworkingIdentity {
	if x != nil {
		return x.FromIdentity
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyFromSteamId() uint64 {
	if x != nil && x.LegacyFromSteamId != nil {
		return *x.LegacyFromSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyGameserverRelaySessionId() uint32 {
	if x != nil && x.LegacyGameserverRelaySessionId != nil {
		return *x.LegacyGameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetToRelaySessionId() uint32 {
	if x != nil && x.ToRelaySessionId != nil {
		return *x.ToRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetForwardTargetRelayRoutingToken() []byte {
	if x != nil {
		return x.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetForwardTargetRevision() uint32 {
	if x != nil && x.ForwardTargetRevision != nil {
		return *x.ForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetRelayMode() CMsgSteamDatagramConnectionClosed_ERelayMode {
	if x != nil && x.RelayMode != nil {
		return *x.RelayMode
	}
	return Default_CMsgSteamDatagramConnectionClosed_RelayMode
}

func (x *CMsgSteamDatagramConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamDatagramConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

type CMsgSteamDatagramNoConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToConnectionId                 *uint32 `protobuf:"fixed32,5,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32 `protobuf:"fixed32,6,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32 `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32 `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32 `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromSteamId                    *uint64 `protobuf:"fixed64,3,opt,name=from_steam_id,json=fromSteamId" json:"from_steam_id,omitempty"`
	EndToEnd                       *bool   `protobuf:"varint,4,opt,name=end_to_end,json=endToEnd" json:"end_to_end,omitempty"`
	DummyPad                       *uint32 `protobuf:"fixed32,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	RoutingSecret                  *uint64 `protobuf:"fixed64,11,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
}

func (x *CMsgSteamDatagramNoConnection) Reset() {
	*x = CMsgSteamDatagramNoConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramNoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoConnection) ProtoMessage() {}

func (x *CMsgSteamDatagramNoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoConnection) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSteamDatagramNoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetLegacyGameserverRelaySessionId() uint32 {
	if x != nil && x.LegacyGameserverRelaySessionId != nil {
		return *x.LegacyGameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetToRelaySessionId() uint32 {
	if x != nil && x.ToRelaySessionId != nil {
		return *x.ToRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromSteamId() uint64 {
	if x != nil && x.FromSteamId != nil {
		return *x.FromSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetEndToEnd() bool {
	if x != nil && x.EndToEnd != nil {
		return *x.EndToEnd
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetDummyPad() uint32 {
	if x != nil && x.DummyPad != nil {
		return *x.DummyPad
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket               []byte  `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ChallengeTime        *uint32 `protobuf:"fixed32,3,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId   *uint32 `protobuf:"fixed32,5,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32 `protobuf:"fixed32,8,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,6,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (x *CMsgSteamDatagramGameserverSessionRequest) Reset() {
	*x = CMsgSteamDatagramGameserverSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionRequest) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetNetworkConfigVersion() uint32 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionEstablished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	GameserverSteamId    *uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,4,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,6,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) Reset() {
	*x = CMsgSteamDatagramGameserverSessionEstablished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionEstablished) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverSteamId() uint64 {
	if x != nil && x.GameserverSteamId != nil {
		return *x.GameserverSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsClientToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,4,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E       []uint32                            `protobuf:"fixed32,5,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,8,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumC2R          *uint32                             `protobuf:"varint,9,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumE2E          *uint32                             `protobuf:"varint,10,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsClientToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsClientToRouter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,6,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,10,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,11,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,12,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,13,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E               []uint32                            `protobuf:"fixed32,14,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,15,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId         *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,8,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumE2E                  *uint32                             `protobuf:"varint,9,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToClient) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,10,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E       []uint32                            `protobuf:"fixed32,11,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	SeqNumR2S          *uint32                             `protobuf:"varint,5,opt,name=seq_num_r2s,json=seqNumR2s" json:"seq_num_r2s,omitempty"`
	SeqNumE2E          *uint32                             `protobuf:"varint,6,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	ClientSteamId      *uint64                             `protobuf:"fixed64,7,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,8,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,9,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,13,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	RoutingSecret      *uint64                             `protobuf:"fixed64,14,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToServer) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToServer) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumR2S() uint32 {
	if x != nil && x.SeqNumR2S != nil {
		return *x.SeqNumR2S
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsServerToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,8,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E       []uint32                            `protobuf:"fixed32,9,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	SeqNumS2R          *uint32                             `protobuf:"varint,3,opt,name=seq_num_s2r,json=seqNumS2r" json:"seq_num_s2r,omitempty"`
	SeqNumE2E          *uint32                             `protobuf:"varint,4,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	ClientSteamId      *uint64                             `protobuf:"fixed64,5,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,6,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,11,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsServerToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsServerToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsServerToRouter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2R() uint32 {
	if x != nil && x.SeqNumS2R != nil {
		return *x.SeqNumS2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientSteamId() uint64 {
	if x != nil && x.ClientSteamId != nil {
		return *x.ClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTime        *uint32 `protobuf:"fixed32,1,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId   *uint32 `protobuf:"fixed32,3,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	PeerSteamId          *uint64 `protobuf:"fixed64,4,opt,name=peer_steam_id,json=peerSteamId" json:"peer_steam_id,omitempty"`
	PeerConnectionId     *uint32 `protobuf:"fixed32,5,opt,name=peer_connection_id,json=peerConnectionId" json:"peer_connection_id,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,9,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	PublicIp             *uint32 `protobuf:"fixed32,10,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequestBody) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequestBody.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequestBody) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerSteamId() uint64 {
	if x != nil && x.PeerSteamId != nil {
		return *x.PeerSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerConnectionId() uint32 {
	if x != nil && x.PeerConnectionId != nil {
		return *x.PeerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetNetworkConfigVersion() uint32 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPublicIp() uint32 {
	if x != nil && x.PublicIp != nil {
		return *x.PublicIp
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert      *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Body      []byte                              `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Signature []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionRequest) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequest) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramP2PSessionEstablished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	RelayRoutingToken    []byte  `protobuf:"bytes,4,opt,name=relay_routing_token,json=relayRoutingToken" json:"relay_routing_token,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,5,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
}

func (x *CMsgSteamDatagramP2PSessionEstablished) Reset() {
	*x = CMsgSteamDatagramP2PSessionEstablished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionEstablished) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetRelayRoutingToken() []byte {
	if x != nil {
		return x.RelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayClusters []*CMsgSteamDatagramP2PRoutes_RelayCluster `protobuf:"bytes,1,rep,name=relay_clusters,json=relayClusters" json:"relay_clusters,omitempty"`
	Routes        []*CMsgSteamDatagramP2PRoutes_Route        `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`
	Revision      *uint32                                    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes) Reset() {
	*x = CMsgSteamDatagramP2PRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgSteamDatagramP2PRoutes) GetRelayClusters() []*CMsgSteamDatagramP2PRoutes_RelayCluster {
	if x != nil {
		return x.RelayClusters
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRoutes() []*CMsgSteamDatagramP2PRoutes_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

type CMsgSteamDatagramP2PRendezvous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToConnectionId          *uint32                            `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	Routes                  *CMsgSteamDatagramP2PRoutes        `protobuf:"bytes,2,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision   *uint32                            `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectRequest          *CMsgSteamDatagramConnectRequest   `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk               *CMsgSteamDatagramConnectOK        `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed        *CMsgSteamDatagramConnectionClosed `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
	FailedRelayRoutingToken []byte                             `protobuf:"bytes,7,opt,name=failed_relay_routing_token,json=failedRelayRoutingToken" json:"failed_relay_routing_token,omitempty"`
}

func (x *CMsgSteamDatagramP2PRendezvous) Reset() {
	*x = CMsgSteamDatagramP2PRendezvous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRendezvous) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRendezvous.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRendezvous) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgSteamDatagramP2PRendezvous) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRendezvous) GetRoutes() *CMsgSteamDatagramP2PRoutes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectRequest() *CMsgSteamDatagramConnectRequest {
	if x != nil {
		return x.ConnectRequest
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectOk() *CMsgSteamDatagramConnectOK {
	if x != nil {
		return x.ConnectOk
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetConnectionClosed() *CMsgSteamDatagramConnectionClosed {
	if x != nil {
		return x.ConnectionClosed
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRendezvous) GetFailedRelayRoutingToken() []byte {
	if x != nil {
		return x.FailedRelayRoutingToken
	}
	return nil
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                     *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay                       []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E                   []uint32                            `protobuf:"fixed32,4,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                          *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ForwardTargetRelayRoutingToken []byte                              `protobuf:"bytes,6,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                             `protobuf:"varint,7,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	Routes                         []byte                              `protobuf:"bytes,8,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision          *uint32                             `protobuf:"varint,9,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId                   *uint32                             `protobuf:"fixed32,10,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumC2R                      *uint32                             `protobuf:"varint,11,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumE2E                      *uint32                             `protobuf:"varint,12,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRelayRoutingToken() []byte {
	if x != nil {
		return x.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRevision() uint32 {
	if x != nil && x.ForwardTargetRevision != nil {
		return *x.ForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetRoutes() []byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,4,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,5,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,6,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,7,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E               []uint32                            `protobuf:"fixed32,8,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision   *uint32                             `protobuf:"varint,10,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                     []byte                              `protobuf:"bytes,11,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision      *uint32                             `protobuf:"varint,12,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId               *uint32                             `protobuf:"fixed32,13,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,14,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumE2E                  *uint32                             `protobuf:"varint,15,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetRoutes() []byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramP2PBadRouteRouterToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId             *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FailedRelayRoutingToken  []byte  `protobuf:"bytes,2,opt,name=failed_relay_routing_token,json=failedRelayRoutingToken" json:"failed_relay_routing_token,omitempty"`
	AckForwardTargetRevision *uint32 `protobuf:"varint,3,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	KludgePad                *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) Reset() {
	*x = CMsgSteamDatagramP2PBadRouteRouterToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PBadRouteRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PBadRouteRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PBadRouteRouterToClient) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetFailedRelayRoutingToken() []byte {
	if x != nil {
		return x.FailedRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgSteamDatagramGameServerSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 *uint32 `protobuf:"fixed32,1,opt,name=ipv4" json:"ipv4,omitempty"`
	Port *uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (x *CMsgSteamDatagramGameServerSample) Reset() {
	*x = CMsgSteamDatagramGameServerSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameServerSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameServerSample) ProtoMessage() {}

func (x *CMsgSteamDatagramGameServerSample) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameServerSample.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameServerSample) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgSteamDatagramGameServerSample) GetIpv4() uint32 {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return 0
}

func (x *CMsgSteamDatagramGameServerSample) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type CMsgSteamDatagramGameServerSampleDataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId *uint32                              `protobuf:"fixed32,1,opt,name=datacenter_id,json=datacenterId" json:"datacenter_id,omitempty"`
	Servers      []*CMsgSteamDatagramGameServerSample `protobuf:"bytes,3,rep,name=servers" json:"servers,omitempty"`
}

func (x *CMsgSteamDatagramGameServerSampleDataCenter) Reset() {
	*x = CMsgSteamDatagramGameServerSampleDataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameServerSampleDataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameServerSampleDataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramGameServerSampleDataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameServerSampleDataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameServerSampleDataCenter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgSteamDatagramGameServerSampleDataCenter) GetDatacenterId() uint32 {
	if x != nil && x.DatacenterId != nil {
		return *x.DatacenterId
	}
	return 0
}

func (x *CMsgSteamDatagramGameServerSampleDataCenter) GetServers() []*CMsgSteamDatagramGameServerSample {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CMsgSteamDatagramRelayToRelayPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestTimestamp *uint32                                        `protobuf:"fixed32,1,opt,name=request_timestamp,json=requestTimestamp" json:"request_timestamp,omitempty"`
	RequestDate      *uint32                                        `protobuf:"fixed32,2,opt,name=request_date,json=requestDate" json:"request_date,omitempty"`
	MyPopId          *uint32                                        `protobuf:"fixed32,3,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId        *uint32                                        `protobuf:"fixed32,4,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Checksum         *uint32                                        `protobuf:"fixed32,5,opt,name=checksum" json:"checksum,omitempty"`
	DataCenters      []*CMsgSteamDatagramGameServerSampleDataCenter `protobuf:"bytes,6,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (x *CMsgSteamDatagramRelayToRelayPing) Reset() {
	*x = CMsgSteamDatagramRelayToRelayPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRelayToRelayPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRelayToRelayPing) ProtoMessage() {}

func (x *CMsgSteamDatagramRelayToRelayPing) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRelayToRelayPing.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRelayToRelayPing) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetRequestTimestamp() uint32 {
	if x != nil && x.RequestTimestamp != nil {
		return *x.RequestTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetRequestDate() uint32 {
	if x != nil && x.RequestDate != nil {
		return *x.RequestDate
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetMyPopId() uint32 {
	if x != nil && x.MyPopId != nil {
		return *x.MyPopId
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetYourPopId() uint32 {
	if x != nil && x.YourPopId != nil {
		return *x.YourPopId
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetChecksum() uint32 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

func (x *CMsgSteamDatagramRelayToRelayPing) GetDataCenters() []*CMsgSteamDatagramGameServerSampleDataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type CMsgSteamDatagramDataCenterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenters []*CMsgSteamDatagramDataCenterState_DataCenter `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState) Reset() {
	*x = CMsgSteamDatagramDataCenterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgSteamDatagramDataCenterState) GetDataCenters() []*CMsgSteamDatagramDataCenterState_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type CMsgSteamDatagramRouterHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuLoad              *float32                                    `protobuf:"fixed32,1,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	ActiveSessions       *uint32                                     `protobuf:"varint,2,opt,name=active_sessions,json=activeSessions" json:"active_sessions,omitempty"`
	DataPktsSec          *uint32                                     `protobuf:"varint,3,opt,name=data_pkts_sec,json=dataPktsSec" json:"data_pkts_sec,omitempty"`
	OtherPktsSec         *uint32                                     `protobuf:"varint,4,opt,name=other_pkts_sec,json=otherPktsSec" json:"other_pkts_sec,omitempty"`
	SecondsUntilShutdown *uint32                                     `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	CpuCostPerUser       *float32                                    `protobuf:"fixed32,8,opt,name=cpu_cost_per_user,json=cpuCostPerUser" json:"cpu_cost_per_user,omitempty"`
	CpuCostPerPacket     *float32                                    `protobuf:"fixed32,9,opt,name=cpu_cost_per_packet,json=cpuCostPerPacket" json:"cpu_cost_per_packet,omitempty"`
	DataCenters          []*CMsgSteamDatagramRouterHealth_DataCenter `protobuf:"bytes,6,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
	Magic                *uint64                                     `protobuf:"fixed64,7,opt,name=magic" json:"magic,omitempty"`
}

func (x *CMsgSteamDatagramRouterHealth) Reset() {
	*x = CMsgSteamDatagramRouterHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterHealth) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterHealth) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterHealth.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterHealth) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuLoad() float32 {
	if x != nil && x.CpuLoad != nil {
		return *x.CpuLoad
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetActiveSessions() uint32 {
	if x != nil && x.ActiveSessions != nil {
		return *x.ActiveSessions
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetDataPktsSec() uint32 {
	if x != nil && x.DataPktsSec != nil {
		return *x.DataPktsSec
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetOtherPktsSec() uint32 {
	if x != nil && x.OtherPktsSec != nil {
		return *x.OtherPktsSec
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuCostPerUser() float32 {
	if x != nil && x.CpuCostPerUser != nil {
		return *x.CpuCostPerUser
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetCpuCostPerPacket() float32 {
	if x != nil && x.CpuCostPerPacket != nil {
		return *x.CpuCostPerPacket
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth) GetDataCenters() []*CMsgSteamDatagramRouterHealth_DataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

func (x *CMsgSteamDatagramRouterHealth) GetMagic() uint64 {
	if x != nil && x.Magic != nil {
		return *x.Magic
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityRelay             *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay                 []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E             []uint32                            `protobuf:"fixed32,4,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                    *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision *uint32                             `protobuf:"varint,6,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                   []byte                              `protobuf:"bytes,7,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision    *uint32                             `protobuf:"varint,8,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	SeqNumR2R                *uint32                             `protobuf:"varint,26,opt,name=seq_num_r2r,json=seqNumR2r" json:"seq_num_r2r,omitempty"`
	SeqNumE2E                *uint32                             `protobuf:"varint,27,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	FromRelaySessionId       *uint32                             `protobuf:"fixed32,22,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	ToRelaySessionId         *uint32                             `protobuf:"fixed32,25,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PRouterToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PRouterToRouter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetRoutes() []byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetSeqNumR2R() uint32 {
	if x != nil && x.SeqNumR2R != nil {
		return *x.SeqNumR2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetToRelaySessionId() uint32 {
	if x != nil && x.ToRelaySessionId != nil {
		return *x.ToRelaySessionId
	}
	return 0
}

type CMsgSteamDatagramP2PBadRouteRouterToRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRelaySessionId *uint32 `protobuf:"fixed32,1,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	KludgePad          *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToRouter) Reset() {
	*x = CMsgSteamDatagramP2PBadRouteRouterToRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PBadRouteRouterToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PBadRouteRouterToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PBadRouteRouterToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PBadRouteRouterToRouter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToRouter) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToRouter) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgSteamDatagramRouterPingReply_RouteException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Flags        *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Penalty      *uint32 `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) Reset() {
	*x = CMsgSteamDatagramRouterPingReply_RouteException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply_RouteException) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_RouteException.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply_RouteException) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type CMsgSteamDatagramGameserverPingReply_SignedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeTime   *uint32 `protobuf:"fixed32,2,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge       *uint64 `protobuf:"fixed64,3,opt,name=challenge" json:"challenge,omitempty"`
	RouterTimestamp *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp,json=routerTimestamp" json:"router_timestamp,omitempty"`
	DataCenterId    *uint32 `protobuf:"fixed32,5,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Appid           *uint32 `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) Reset() {
	*x = CMsgSteamDatagramGameserverPingReply_SignedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingReply_SignedData) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingReply_SignedData.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingReply_SignedData) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) GetRouterTimestamp() uint32 {
	if x != nil && x.RouterTimestamp != nil {
		return *x.RouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReply_SignedData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_RoutingCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"fixed32,1,opt,name=id" json:"id,omitempty"`
	FrontPingMs *uint32 `protobuf:"varint,2,opt,name=front_ping_ms,json=frontPingMs" json:"front_ping_ms,omitempty"`
	E2EPingMs   *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_RoutingCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_RoutingCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetFrontPingMs() uint32 {
	if x != nil && x.FrontPingMs != nil {
		return *x.FrontPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetE2EPingMs() uint32 {
	if x != nil && x.E2EPingMs != nil {
		return *x.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	ViaRelayId   *uint32 `protobuf:"fixed32,2,opt,name=via_relay_id,json=viaRelayId" json:"via_relay_id,omitempty"`
	E2EPingMs    *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetViaRelayId() uint32 {
	if x != nil && x.ViaRelayId != nil {
		return *x.ViaRelayId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetE2EPingMs() uint32 {
	if x != nil && x.E2EPingMs != nil {
		return *x.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientSwitchedPrimary_RouterQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            *uint32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	FrontPing        *uint32 `protobuf:"varint,2,opt,name=front_ping,json=frontPing" json:"front_ping,omitempty"`
	BackPing         *uint32 `protobuf:"varint,3,opt,name=back_ping,json=backPing" json:"back_ping,omitempty"`
	SecondsUntilDown *uint32 `protobuf:"varint,4,opt,name=seconds_until_down,json=secondsUntilDown" json:"seconds_until_down,omitempty"`
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary_RouterQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetFrontPing() uint32 {
	if x != nil && x.FrontPing != nil {
		return *x.FrontPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetBackPing() uint32 {
	if x != nil && x.BackPing != nil {
		return *x.BackPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetSecondsUntilDown() uint32 {
	if x != nil && x.SecondsUntilDown != nil {
		return *x.SecondsUntilDown
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes_RelayCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PopId                    *uint32 `protobuf:"fixed32,1,opt,name=pop_id,json=popId" json:"pop_id,omitempty"`
	PingMs                   *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	ScorePenalty             *uint32 `protobuf:"varint,3,opt,name=score_penalty,json=scorePenalty" json:"score_penalty,omitempty"`
	SessionRelayRoutingToken []byte  `protobuf:"bytes,4,opt,name=session_relay_routing_token,json=sessionRelayRoutingToken" json:"session_relay_routing_token,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_RelayCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_RelayCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_RelayCluster) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPopId() uint32 {
	if x != nil && x.PopId != nil {
		return *x.PopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetScorePenalty() uint32 {
	if x != nil && x.ScorePenalty != nil {
		return *x.ScorePenalty
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetSessionRelayRoutingToken() []byte {
	if x != nil {
		return x.SessionRelayRoutingToken
	}
	return nil
}

type CMsgSteamDatagramP2PRoutes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyPopId   *uint32 `protobuf:"fixed32,1,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId *uint32 `protobuf:"fixed32,2,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Score     *uint32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgSteamDatagramP2PRoutes_Route) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramP2PRoutes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_Route) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_Route.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_Route) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{22, 1}
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetMyPopId() uint32 {
	if x != nil && x.MyPopId != nil {
		return *x.MyPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetYourPopId() uint32 {
	if x != nil && x.YourPopId != nil {
		return *x.YourPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgSteamDatagramDataCenterState_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PingMs  *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState_Server) Reset() {
	*x = CMsgSteamDatagramDataCenterState_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState_Server) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState_Server) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState_Server.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState_Server) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30, 0}
}

func (x *CMsgSteamDatagramDataCenterState_Server) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CMsgSteamDatagramDataCenterState_Server) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

type CMsgSteamDatagramDataCenterState_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         *string                                    `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	ServerSample []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,2,rep,name=server_sample,json=serverSample" json:"server_sample,omitempty"`
	RelaySample  []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,3,rep,name=relay_sample,json=relaySample" json:"relay_sample,omitempty"`
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) Reset() {
	*x = CMsgSteamDatagramDataCenterState_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDataCenterState_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDataCenterState_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDataCenterState_DataCenter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30, 1}
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetServerSample() []*CMsgSteamDatagramDataCenterState_Server {
	if x != nil {
		return x.ServerSample
	}
	return nil
}

func (x *CMsgSteamDatagramDataCenterState_DataCenter) GetRelaySample() []*CMsgSteamDatagramDataCenterState_Server {
	if x != nil {
		return x.RelaySample
	}
	return nil
}

type CMsgSteamDatagramRouterHealth_DataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId *uint32                              `protobuf:"fixed32,1,opt,name=datacenter_id,json=datacenterId" json:"datacenter_id,omitempty"`
	State        *uint32                              `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	Servers      []*CMsgSteamDatagramGameServerSample `protobuf:"bytes,3,rep,name=servers" json:"servers,omitempty"`
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) Reset() {
	*x = CMsgSteamDatagramRouterHealth_DataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterHealth_DataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterHealth_DataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterHealth_DataCenter) Descriptor() ([]byte, []int) {
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) GetDatacenterId() uint32 {
	if x != nil && x.DatacenterId != nil {
		return *x.DatacenterId
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CMsgSteamDatagramRouterHealth_DataCenter) GetServers() []*CMsgSteamDatagramGameServerSample {
	if x != nil {
		return x.Servers
	}
	return nil
}

var File_csgo_steam_network_steamdatagram_messages_sdr_proto protoreflect.FileDescriptor

var file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x73, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x64, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x3e, 0x63, 0x73, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x73, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x05, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x79, 0x6f, 0x75, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x66, 0x0a, 0x0e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x79, 0x6f, 0x75, 0x72, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x74, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x5f, 0x70, 0x61, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x50, 0x61, 0x64, 0x22, 0xec, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x0a, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x79,
	0x6f, 0x75, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x22, 0xde, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x64,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65, 0x50, 0x61,
	0x64, 0x22, 0x4f, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x89, 0x04, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69,
	0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x74, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63,
	0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x64, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x32, 0x65, 0x5f,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x32, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x1a, 0x74, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x76, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0a, 0x76, 0x69, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x65, 0x32, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x32, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x22, 0xbb,
	0x07, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x61, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x61, 0x70, 0x4d, 0x73, 0x12, 0x72,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x77, 0x12, 0x6e, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x74, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x77, 0x12, 0x74, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x70, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x65, 0x6e, 0x1a, 0x8f, 0x01, 0x0a, 0x0d, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xe6, 0x03, 0x0a,
	0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6d, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x67, 0x6f,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4a, 0x0a,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73,
	0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xad, 0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4f, 0x4b, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x79, 0x6f, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x05, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0xb1, 0x06, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x10, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x36, 0x0a, 0x0a, 0x45, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x10, 0x02, 0x22, 0xac, 0x03, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x74, 0x6f,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x70, 0x61, 0x64,
	0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x61,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xcd, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x32, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x52, 0x32, 0x63, 0x22, 0x81, 0x04, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x32, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45, 0x32,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x45, 0x32, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xda, 0x05, 0x0a, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x32, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x07,
	0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45, 0x32, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x45, 0x32, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xac, 0x05, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73,
	0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x32, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45,
	0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x45, 0x32, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0x85, 0x05, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x32, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45, 0x32,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x32, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x53, 0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x71, 0x4e, 0x75, 0x6d, 0x45, 0x32, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xef, 0x02,
	0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x10, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22,
	0xa2, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x63, 0x22, 0xea, 0x03, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x70, 0x6f, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x59, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x6d, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x6d, 0x79, 0x50, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x79, 0x6f, 0x75, 0x72, 0x50, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6f,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4f, 0x6b, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xcc, 0x05, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x32, 0x50, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73,
	0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x32, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45,
	0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x32,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43,
	0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x32,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x45,
	0x32, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45,
	0x10, 0x04, 0x22, 0xe0, 0x06, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x32, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x32, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61,
	0x63, 0x6b, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x6b, 0x45, 0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x6b, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x32, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x52, 0x32, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x65, 0x32, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x45, 0x32, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xec, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x32, 0x50, 0x42, 0x61,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x63, 0x6b,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x6b, 0x6c, 0x75, 0x64, 0x67,
	0x65, 0x50, 0x61, 0x64, 0x22, 0x4b, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xa3, 0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x09, 0x6d, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x6d, 0x79, 0x50, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x6f, 0x75,
	0x72, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09,
	0x79, 0x6f, 0x75, 0x72, 0x50, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x62, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x73,
	0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x1a,
	0xe2, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x67, 0x6f,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x22, 0xcf, 0x04, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x70, 0x75, 0x4c, 0x6f, 0x61,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6b, 0x74, 0x73, 0x53, 0x65, 0x63, 0x12, 0x24,
	0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6b, 0x74,
	0x73, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x73, 0x67,
	0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x1a, 0x98, 0x01, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xc4, 0x05, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x32, 0x50, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x32, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x32,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x41,
	0x63, 0x6b, 0x45, 0x32, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61,
	0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x32, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x52, 0x32, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x32, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x45, 0x32, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x74, 0x6f, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x32, 0x45,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0x7e, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x50, 0x32, 0x50, 0x42, 0x61, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x6b, 0x6c, 0x75, 0x64, 0x67, 0x65, 0x50, 0x61, 0x64, 0x2a, 0xcc, 0x0a,
	0x0a, 0x13, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73,
	0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67,
	0x5f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x34,
	0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x4e, 0x6f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x0b, 0x12,
	0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10,
	0x10, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x12, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x4b, 0x10,
	0x13, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x15, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x6f,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10,
	0x17, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d,
	0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x32, 0x50, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x73,
	0x67, 0x5f, 0x50, 0x32, 0x50, 0x42, 0x61, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x10, 0x1c, 0x12,
	0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x1d, 0x12, 0x2e, 0x0a, 0x2a,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x73, 0x67, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x42, 0x43, 0x48, 0x01,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b,
	0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x63, 0x73, 0x67, 0x6f,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x80, 0x01,
	0x00,
}

var (
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescOnce sync.Once
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescData = file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDesc
)

func file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescGZIP() []byte {
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescOnce.Do(func() {
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescData = protoimpl.X.CompressGZIP(file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescData)
	})
	return file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDescData
}

var file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_csgo_steam_network_steamdatagram_messages_sdr_proto_goTypes = []interface{}{
	(ESteamDatagramMsgID)(0),                                      // 0: csgo.steam.network.ESteamDatagramMsgID
	(CMsgSteamDatagramConnectionClosed_ERelayMode)(0),             // 1: csgo.steam.network.CMsgSteamDatagramConnectionClosed.ERelayMode
	(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)(0),     // 2: csgo.steam.network.CMsgSteamDatagramConnectionStatsClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)(0),     // 3: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToClient.Flags
	(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)(0),     // 4: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToServer.Flags
	(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)(0),     // 5: csgo.steam.network.CMsgSteamDatagramConnectionStatsServerToRouter.Flags
	(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)(0),  // 6: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)(0),  // 7: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags
	(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags)(0),  // 8: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.Flags
	(*CMsgSteamDatagramRouterPingReply)(nil),                      // 9: csgo.steam.network.CMsgSteamDatagramRouterPingReply
	(*CMsgSteamDatagramGameserverPingRequest)(nil),                // 10: csgo.steam.network.CMsgSteamDatagramGameserverPingRequest
	(*CMsgSteamDatagramLegacyGameserverPingReply)(nil),            // 11: csgo.steam.network.CMsgSteamDatagramLegacyGameserverPingReply
	(*CMsgSteamDatagramGameserverPingReply)(nil),                  // 12: csgo.steam.network.CMsgSteamDatagramGameserverPingReply
	(*CMsgSteamDatagramNoSessionRelayToClient)(nil),               // 13: csgo.steam.network.CMsgSteamDatagramNoSessionRelayToClient
	(*CMsgSteamDatagramNoSessionRelayToPeer)(nil),                 // 14: csgo.steam.network.CMsgSteamDatagramNoSessionRelayToPeer
	(*CMsgSteamDatagramClientPingSampleRequest)(nil),              // 15: csgo.steam.network.CMsgSteamDatagramClientPingSampleRequest
	(*CMsgSteamDatagramClientPingSampleReply)(nil),                // 16: csgo.steam.network.CMsgSteamDatagramClientPingSampleReply
	(*CMsgSteamDatagramClientSwitchedPrimary)(nil),                // 17: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary
	(*CMsgSteamDatagramConnectRequest)(nil),                       // 18: csgo.steam.network.CMsgSteamDatagramConnectRequest
	(*CMsgSteamDatagramConnectOK)(nil),                            // 19: csgo.steam.network.CMsgSteamDatagramConnectOK
	(*CMsgSteamDatagramConnectionClosed)(nil),                     // 20: csgo.steam.network.CMsgSteamDatagramConnectionClosed
	(*CMsgSteamDatagramNoConnection)(nil),                         // 21: csgo.steam.network.CMsgSteamDatagramNoConnection
	(*CMsgSteamDatagramGameserverSessionRequest)(nil),             // 22: csgo.steam.network.CMsgSteamDatagramGameserverSessionRequest
	(*CMsgSteamDatagramGameserverSessionEstablished)(nil),         // 23: csgo.steam.network.CMsgSteamDatagramGameserverSessionEstablished
	(*CMsgSteamDatagramConnectionStatsClientToRouter)(nil),        // 24: csgo.steam.network.CMsgSteamDatagramConnectionStatsClientToRouter
	(*CMsgSteamDatagramConnectionStatsRouterToClient)(nil),        // 25: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToClient
	(*CMsgSteamDatagramConnectionStatsRouterToServer)(nil),        // 26: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToServer
	(*CMsgSteamDatagramConnectionStatsServerToRouter)(nil),        // 27: csgo.steam.network.CMsgSteamDatagramConnectionStatsServerToRouter
	(*CMsgSteamDatagramP2PSessionRequestBody)(nil),                // 28: csgo.steam.network.CMsgSteamDatagramP2PSessionRequestBody
	(*CMsgSteamDatagramP2PSessionRequest)(nil),                    // 29: csgo.steam.network.CMsgSteamDatagramP2PSessionRequest
	(*CMsgSteamDatagramP2PSessionEstablished)(nil),                // 30: csgo.steam.network.CMsgSteamDatagramP2PSessionEstablished
	(*CMsgSteamDatagramP2PRoutes)(nil),                            // 31: csgo.steam.network.CMsgSteamDatagramP2PRoutes
	(*CMsgSteamDatagramP2PRendezvous)(nil),                        // 32: csgo.steam.network.CMsgSteamDatagramP2PRendezvous
	(*CMsgSteamDatagramConnectionStatsP2PClientToRouter)(nil),     // 33: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PClientToRouter
	(*CMsgSteamDatagramConnectionStatsP2PRouterToClient)(nil),     // 34: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToClient
	(*CMsgSteamDatagramP2PBadRouteRouterToClient)(nil),            // 35: csgo.steam.network.CMsgSteamDatagramP2PBadRouteRouterToClient
	(*CMsgSteamDatagramGameServerSample)(nil),                     // 36: csgo.steam.network.CMsgSteamDatagramGameServerSample
	(*CMsgSteamDatagramGameServerSampleDataCenter)(nil),           // 37: csgo.steam.network.CMsgSteamDatagramGameServerSampleDataCenter
	(*CMsgSteamDatagramRelayToRelayPing)(nil),                     // 38: csgo.steam.network.CMsgSteamDatagramRelayToRelayPing
	(*CMsgSteamDatagramDataCenterState)(nil),                      // 39: csgo.steam.network.CMsgSteamDatagramDataCenterState
	(*CMsgSteamDatagramRouterHealth)(nil),                         // 40: csgo.steam.network.CMsgSteamDatagramRouterHealth
	(*CMsgSteamDatagramConnectionStatsP2PRouterToRouter)(nil),     // 41: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToRouter
	(*CMsgSteamDatagramP2PBadRouteRouterToRouter)(nil),            // 42: csgo.steam.network.CMsgSteamDatagramP2PBadRouteRouterToRouter
	(*CMsgSteamDatagramRouterPingReply_RouteException)(nil),       // 43: csgo.steam.network.CMsgSteamDatagramRouterPingReply.RouteException
	(*CMsgSteamDatagramGameserverPingReply_SignedData)(nil),       // 44: csgo.steam.network.CMsgSteamDatagramGameserverPingReply.SignedData
	(*CMsgSteamDatagramClientPingSampleReply_RoutingCluster)(nil), // 45: csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.RoutingCluster
	(*CMsgSteamDatagramClientPingSampleReply_DataCenter)(nil),     // 46: csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.DataCenter
	(*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)(nil),  // 47: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	(*CMsgSteamDatagramP2PRoutes_RelayCluster)(nil),               // 48: csgo.steam.network.CMsgSteamDatagramP2PRoutes.RelayCluster
	(*CMsgSteamDatagramP2PRoutes_Route)(nil),                      // 49: csgo.steam.network.CMsgSteamDatagramP2PRoutes.Route
	(*CMsgSteamDatagramDataCenterState_Server)(nil),               // 50: csgo.steam.network.CMsgSteamDatagramDataCenterState.Server
	(*CMsgSteamDatagramDataCenterState_DataCenter)(nil),           // 51: csgo.steam.network.CMsgSteamDatagramDataCenterState.DataCenter
	(*CMsgSteamDatagramRouterHealth_DataCenter)(nil),              // 52: csgo.steam.network.CMsgSteamDatagramRouterHealth.DataCenter
	(*CMsgSteamDatagramCertificateSigned)(nil),                    // 53: csgo.steam.network.CMsgSteamDatagramCertificateSigned
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil),               // 54: csgo.steam.network.CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamNetworkingIdentity)(nil),                           // 55: csgo.steam.network.CMsgSteamNetworkingIdentity
	(*CMsgSteamDatagramConnectionQuality)(nil),                    // 56: csgo.steam.network.CMsgSteamDatagramConnectionQuality
}
var file_csgo_steam_network_steamdatagram_messages_sdr_proto_depIdxs = []int32{
	43, // 0: csgo.steam.network.CMsgSteamDatagramRouterPingReply.route_exceptions:type_name -> csgo.steam.network.CMsgSteamDatagramRouterPingReply.RouteException
	53, // 1: csgo.steam.network.CMsgSteamDatagramGameserverPingReply.cert:type_name -> csgo.steam.network.CMsgSteamDatagramCertificateSigned
	45, // 2: csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.routing_clusters:type_name -> csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.RoutingCluster
	46, // 3: csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.data_centers:type_name -> csgo.steam.network.CMsgSteamDatagramClientPingSampleReply.DataCenter
	47, // 4: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.from_quality_now:type_name -> csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	47, // 5: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.to_quality_now:type_name -> csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	47, // 6: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.from_quality_then:type_name -> csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	47, // 7: csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.to_quality_then:type_name -> csgo.steam.network.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	54, // 8: csgo.steam.network.CMsgSteamDatagramConnectRequest.crypt:type_name -> csgo.steam.network.CMsgSteamDatagramSessionCryptInfoSigned
	53, // 9: csgo.steam.network.CMsgSteamDatagramConnectRequest.cert:type_name -> csgo.steam.network.CMsgSteamDatagramCertificateSigned
	54, // 10: csgo.steam.network.CMsgSteamDatagramConnectOK.crypt:type_name -> csgo.steam.network.CMsgSteamDatagramSessionCryptInfoSigned
	53, // 11: csgo.steam.network.CMsgSteamDatagramConnectOK.cert:type_name -> csgo.steam.network.CMsgSteamDatagramCertificateSigned
	55, // 12: csgo.steam.network.CMsgSteamDatagramConnectionClosed.from_identity:type_name -> csgo.steam.network.CMsgSteamNetworkingIdentity
	1,  // 13: csgo.steam.network.CMsgSteamDatagramConnectionClosed.relay_mode:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionClosed.ERelayMode
	56, // 14: csgo.steam.network.CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 15: csgo.steam.network.CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 16: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 17: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 18: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 19: csgo.steam.network.CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 20: csgo.steam.network.CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 21: csgo.steam.network.CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	53, // 22: csgo.steam.network.CMsgSteamDatagramP2PSessionRequest.cert:type_name -> csgo.steam.network.CMsgSteamDatagramCertificateSigned
	48, // 23: csgo.steam.network.CMsgSteamDatagramP2PRoutes.relay_clusters:type_name -> csgo.steam.network.CMsgSteamDatagramP2PRoutes.RelayCluster
	49, // 24: csgo.steam.network.CMsgSteamDatagramP2PRoutes.routes:type_name -> csgo.steam.network.CMsgSteamDatagramP2PRoutes.Route
	31, // 25: csgo.steam.network.CMsgSteamDatagramP2PRendezvous.routes:type_name -> csgo.steam.network.CMsgSteamDatagramP2PRoutes
	18, // 26: csgo.steam.network.CMsgSteamDatagramP2PRendezvous.connect_request:type_name -> csgo.steam.network.CMsgSteamDatagramConnectRequest
	19, // 27: csgo.steam.network.CMsgSteamDatagramP2PRendezvous.connect_ok:type_name -> csgo.steam.network.CMsgSteamDatagramConnectOK
	20, // 28: csgo.steam.network.CMsgSteamDatagramP2PRendezvous.connection_closed:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionClosed
	56, // 29: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 30: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 31: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 32: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	36, // 33: csgo.steam.network.CMsgSteamDatagramGameServerSampleDataCenter.servers:type_name -> csgo.steam.network.CMsgSteamDatagramGameServerSample
	37, // 34: csgo.steam.network.CMsgSteamDatagramRelayToRelayPing.data_centers:type_name -> csgo.steam.network.CMsgSteamDatagramGameServerSampleDataCenter
	51, // 35: csgo.steam.network.CMsgSteamDatagramDataCenterState.data_centers:type_name -> csgo.steam.network.CMsgSteamDatagramDataCenterState.DataCenter
	52, // 36: csgo.steam.network.CMsgSteamDatagramRouterHealth.data_centers:type_name -> csgo.steam.network.CMsgSteamDatagramRouterHealth.DataCenter
	56, // 37: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_relay:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	56, // 38: csgo.steam.network.CMsgSteamDatagramConnectionStatsP2PRouterToRouter.quality_e2e:type_name -> csgo.steam.network.CMsgSteamDatagramConnectionQuality
	50, // 39: csgo.steam.network.CMsgSteamDatagramDataCenterState.DataCenter.server_sample:type_name -> csgo.steam.network.CMsgSteamDatagramDataCenterState.Server
	50, // 40: csgo.steam.network.CMsgSteamDatagramDataCenterState.DataCenter.relay_sample:type_name -> csgo.steam.network.CMsgSteamDatagramDataCenterState.Server
	36, // 41: csgo.steam.network.CMsgSteamDatagramRouterHealth.DataCenter.servers:type_name -> csgo.steam.network.CMsgSteamDatagramGameServerSample
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_csgo_steam_network_steamdatagram_messages_sdr_proto_init() }
func file_csgo_steam_network_steamdatagram_messages_sdr_proto_init() {
	if File_csgo_steam_network_steamdatagram_messages_sdr_proto != nil {
		return
	}
	file_csgo_steam_network_steamnetworkingsockets_messages_certs_proto_init()
	file_csgo_steam_network_steamnetworkingsockets_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramRouterPingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameserverPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramLegacyGameserverPingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameserverPingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramNoSessionRelayToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramNoSessionRelayToPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientPingSampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientSwitchedPrimary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectOK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramNoConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameserverSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameserverSessionEstablished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsClientToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsRouterToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsRouterToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsServerToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PSessionRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PSessionEstablished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PRendezvous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsP2PClientToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsP2PRouterToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PBadRouteRouterToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameServerSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameServerSampleDataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramRelayToRelayPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramDataCenterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramRouterHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramConnectionStatsP2PRouterToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PBadRouteRouterToRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramRouterPingReply_RouteException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramGameserverPingReply_SignedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply_RoutingCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientPingSampleReply_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PRoutes_RelayCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramP2PRoutes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramDataCenterState_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramDataCenterState_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSteamDatagramRouterHealth_DataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_csgo_steam_network_steamdatagram_messages_sdr_proto_goTypes,
		DependencyIndexes: file_csgo_steam_network_steamdatagram_messages_sdr_proto_depIdxs,
		EnumInfos:         file_csgo_steam_network_steamdatagram_messages_sdr_proto_enumTypes,
		MessageInfos:      file_csgo_steam_network_steamdatagram_messages_sdr_proto_msgTypes,
	}.Build()
	File_csgo_steam_network_steamdatagram_messages_sdr_proto = out.File
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_rawDesc = nil
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_goTypes = nil
	file_csgo_steam_network_steamdatagram_messages_sdr_proto_depIdxs = nil
}
