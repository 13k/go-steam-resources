// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/steammessages_remoteclient_service_messages.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CRemoteClient_CreateSession_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_CreateSession_Request) Reset() {
	*x = CRemoteClient_CreateSession_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{0}
}

type CRemoteClient_CreateSession_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Euniverse *int32  `protobuf:"varint,2,opt,name=euniverse" json:"euniverse,omitempty"`
}

func (x *CRemoteClient_CreateSession_Response) Reset() {
	*x = CRemoteClient_CreateSession_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CRemoteClient_CreateSession_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_CreateSession_Response) GetEuniverse() int32 {
	if x != nil && x.Euniverse != nil {
		return *x.Euniverse
	}
	return 0
}

type CRemoteClient_StartPairing_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_StartPairing_Request) Reset() {
	*x = CRemoteClient_StartPairing_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_StartPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CRemoteClient_StartPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_StartPairing_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin *uint32 `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
}

func (x *CRemoteClient_StartPairing_Response) Reset() {
	*x = CRemoteClient_StartPairing_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_StartPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CRemoteClient_StartPairing_Response) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_SetPairingInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request   []byte  `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (x *CRemoteClient_SetPairingInfo_Request) Reset() {
	*x = CRemoteClient_SetPairingInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CRemoteClient_SetPairingInfo_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_SetPairingInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_SetPairingInfo_Response) Reset() {
	*x = CRemoteClient_SetPairingInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{5}
}

type CRemoteClient_GetPairingInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin *uint32 `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Request) Reset() {
	*x = CRemoteClient_GetPairingInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CRemoteClient_GetPairingInfo_Request) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_GetPairingInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request   []byte  `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Response) Reset() {
	*x = CRemoteClient_GetPairingInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CRemoteClient_GetPairingInfo_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_CancelPairing_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_CancelPairing_Request) Reset() {
	*x = CRemoteClient_CancelPairing_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CancelPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CRemoteClient_CancelPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_CancelPairing_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_CancelPairing_Response) Reset() {
	*x = CRemoteClient_CancelPairing_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CancelPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{9}
}

type CRemoteClient_RegisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_RegisterStatusUpdate_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RegisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RegisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RegisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{10}
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

type CRemoteClient_UnregisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_UnregisterStatusUpdate_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_UnregisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_UnregisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_UnregisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemoteClient_Online_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemoteClient_Online_Notification) Reset() {
	*x = CRemoteClient_Online_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_Online_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_Online_Notification) ProtoMessage() {}

func (x *CRemoteClient_Online_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_Online_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_Online_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CRemoteClient_Online_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemoteClient_RemotePacket_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Payload   []byte  `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_RemotePacket_Notification) Reset() {
	*x = CRemoteClient_RemotePacket_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_RemotePacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RemotePacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_RemotePacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RemotePacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RemotePacket_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{13}
}

func (x *CRemoteClient_RemotePacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_ReplyPacket_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Payload   []byte  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_ReplyPacket_Notification) Reset() {
	*x = CRemoteClient_ReplyPacket_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_ReplyPacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ReplyPacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_ReplyPacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ReplyPacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ReplyPacket_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CRemoteClient_ReplyPacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_ReplyPacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_GetReplies_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_GetReplies_Request) Reset() {
	*x = CRemoteClient_GetReplies_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetReplies_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Request) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CRemoteClient_GetReplies_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_GetReplies_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload [][]byte `protobuf:"bytes,1,rep,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_GetReplies_Response) Reset() {
	*x = CRemoteClient_GetReplies_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetReplies_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Response) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CRemoteClient_GetReplies_Response) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_AllocateTURNServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellid      *uint32 `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	Credentials *string `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (x *CRemoteClient_AllocateTURNServer_Request) Reset() {
	*x = CRemoteClient_AllocateTURNServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateTURNServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateTURNServer_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateTURNServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateTURNServer_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateTURNServer_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CRemoteClient_AllocateTURNServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CRemoteClient_AllocateTURNServer_Request) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

type CRemoteClient_AllocateTURNServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnServer *string `protobuf:"bytes,1,opt,name=turn_server,json=turnServer" json:"turn_server,omitempty"`
}

func (x *CRemoteClient_AllocateTURNServer_Response) Reset() {
	*x = CRemoteClient_AllocateTURNServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateTURNServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateTURNServer_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateTURNServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateTURNServer_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateTURNServer_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CRemoteClient_AllocateTURNServer_Response) GetTurnServer() string {
	if x != nil && x.TurnServer != nil {
		return *x.TurnServer
	}
	return ""
}

type CRemoteClient_AllocateRelayServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellid      *uint32 `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	Credentials *string `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Request) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{19}
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

type CRemoteClient_AllocateRelayServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayServer *string `protobuf:"bytes,1,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Response) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{20}
}

func (x *CRemoteClient_AllocateRelayServer_Response) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

type CRemoteClient_AllocateSDR_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CRemoteClient_AllocateSDR_Request) Reset() {
	*x = CRemoteClient_AllocateSDR_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{21}
}

func (x *CRemoteClient_AllocateSDR_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CRemoteClient_AllocateSDR_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_AllocateSDR_Response) Reset() {
	*x = CRemoteClient_AllocateSDR_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{22}
}

type CRemoteClient_SteamBroadcast_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Clientid *uint64 `protobuf:"fixed64,2,opt,name=clientid" json:"clientid,omitempty"`
	Payload  []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_SteamBroadcast_Notification) Reset() {
	*x = CRemoteClient_SteamBroadcast_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SteamBroadcast_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamBroadcast_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamBroadcast_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamBroadcast_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamBroadcast_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetClientid() uint64 {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_SteamToSteam_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid          *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SrcClientid      *uint64 `protobuf:"fixed64,2,opt,name=src_clientid,json=srcClientid" json:"src_clientid,omitempty"`
	DstClientid      *uint64 `protobuf:"fixed64,3,opt,name=dst_clientid,json=dstClientid" json:"dst_clientid,omitempty"`
	Secretid         *uint32 `protobuf:"varint,4,opt,name=secretid" json:"secretid,omitempty"`
	EncryptedPayload []byte  `protobuf:"bytes,5,opt,name=encrypted_payload,json=encryptedPayload" json:"encrypted_payload,omitempty"`
}

func (x *CRemoteClient_SteamToSteam_Notification) Reset() {
	*x = CRemoteClient_SteamToSteam_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SteamToSteam_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamToSteam_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamToSteam_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamToSteam_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamToSteam_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{24}
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSrcClientid() uint64 {
	if x != nil && x.SrcClientid != nil {
		return *x.SrcClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetDstClientid() uint64 {
	if x != nil && x.DstClientid != nil {
		return *x.DstClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSecretid() uint32 {
	if x != nil && x.Secretid != nil {
		return *x.Secretid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

type CRemotePlay_SessionStarted_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAccountId    *uint32 `protobuf:"varint,1,opt,name=host_account_id,json=hostAccountId" json:"host_account_id,omitempty"`
	ClientAccountId  *uint32 `protobuf:"varint,2,opt,name=client_account_id,json=clientAccountId" json:"client_account_id,omitempty"`
	Appid            *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	DeviceFormFactor *int32  `protobuf:"varint,4,opt,name=device_form_factor,json=deviceFormFactor" json:"device_form_factor,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Request) Reset() {
	*x = CRemotePlay_SessionStarted_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Request) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Request.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Request) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{25}
}

func (x *CRemotePlay_SessionStarted_Request) GetHostAccountId() uint32 {
	if x != nil && x.HostAccountId != nil {
		return *x.HostAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetClientAccountId() uint32 {
	if x != nil && x.ClientAccountId != nil {
		return *x.ClientAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetDeviceFormFactor() int32 {
	if x != nil && x.DeviceFormFactor != nil {
		return *x.DeviceFormFactor
	}
	return 0
}

type CRemotePlay_SessionStarted_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *uint64 `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Response) Reset() {
	*x = CRemotePlay_SessionStarted_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Response) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Response.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Response) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CRemotePlay_SessionStarted_Response) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type CRemotePlay_SessionStopped_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *uint64 `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
	UsedX264 *bool   `protobuf:"varint,2,opt,name=used_x264,json=usedX264" json:"used_x264,omitempty"`
	UsedH264 *bool   `protobuf:"varint,3,opt,name=used_h264,json=usedH264" json:"used_h264,omitempty"`
	UsedHevc *bool   `protobuf:"varint,4,opt,name=used_hevc,json=usedHevc" json:"used_hevc,omitempty"`
}

func (x *CRemotePlay_SessionStopped_Notification) Reset() {
	*x = CRemotePlay_SessionStopped_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStopped_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStopped_Notification) ProtoMessage() {}

func (x *CRemotePlay_SessionStopped_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStopped_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStopped_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27}
}

func (x *CRemotePlay_SessionStopped_Notification) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedX264() bool {
	if x != nil && x.UsedX264 != nil {
		return *x.UsedX264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedH264() bool {
	if x != nil && x.UsedH264 != nil {
		return *x.UsedH264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedHevc() bool {
	if x != nil && x.UsedHevc != nil {
		return *x.UsedHevc
	}
	return false
}

type CRemotePlayTogether_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	// Types that are assignable to Message:
	//	*CRemotePlayTogether_Notification_GroupUpdated_
	Message isCRemotePlayTogether_Notification_Message `protobuf_oneof:"Message"`
}

func (x *CRemotePlayTogether_Notification) Reset() {
	*x = CRemotePlayTogether_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{28}
}

func (x *CRemotePlayTogether_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (m *CRemotePlayTogether_Notification) GetMessage() isCRemotePlayTogether_Notification_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CRemotePlayTogether_Notification) GetGroupUpdated() *CRemotePlayTogether_Notification_GroupUpdated {
	if x, ok := x.GetMessage().(*CRemotePlayTogether_Notification_GroupUpdated_); ok {
		return x.GroupUpdated
	}
	return nil
}

type isCRemotePlayTogether_Notification_Message interface {
	isCRemotePlayTogether_Notification_Message()
}

type CRemotePlayTogether_Notification_GroupUpdated_ struct {
	GroupUpdated *CRemotePlayTogether_Notification_GroupUpdated `protobuf:"bytes,2,opt,name=group_updated,json=groupUpdated,oneof"`
}

func (*CRemotePlayTogether_Notification_GroupUpdated_) isCRemotePlayTogether_Notification_Message() {}

type CRemotePlayTogether_Notification_ControllerSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slotid  *uint32 `protobuf:"varint,1,opt,name=slotid" json:"slotid,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemotePlayTogether_Notification_ControllerSlots) Reset() {
	*x = CRemotePlayTogether_Notification_ControllerSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_ControllerSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_ControllerSlots) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_ControllerSlots) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_ControllerSlots.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_ControllerSlots) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CRemotePlayTogether_Notification_ControllerSlots) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_ControllerSlots) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemotePlayTogether_Notification_GroupUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostSteamid     *uint64                                             `protobuf:"fixed64,1,opt,name=host_steamid,json=hostSteamid" json:"host_steamid,omitempty"`
	HostClientid    *uint64                                             `protobuf:"fixed64,2,opt,name=host_clientid,json=hostClientid" json:"host_clientid,omitempty"`
	Players         []uint64                                            `protobuf:"fixed64,3,rep,name=players" json:"players,omitempty"`
	HostGameid      *uint64                                             `protobuf:"fixed64,4,opt,name=host_gameid,json=hostGameid" json:"host_gameid,omitempty"`
	ControllerSlots []*CRemotePlayTogether_Notification_ControllerSlots `protobuf:"bytes,5,rep,name=controller_slots,json=controllerSlots" json:"controller_slots,omitempty"`
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) Reset() {
	*x = CRemotePlayTogether_Notification_GroupUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_GroupUpdated) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_GroupUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_GroupUpdated.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_GroupUpdated) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{28, 1}
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostSteamid() uint64 {
	if x != nil && x.HostSteamid != nil {
		return *x.HostSteamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostClientid() uint64 {
	if x != nil && x.HostClientid != nil {
		return *x.HostClientid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetPlayers() []uint64 {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostGameid() uint64 {
	if x != nil && x.HostGameid != nil {
		return *x.HostGameid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetControllerSlots() []*CRemotePlayTogether_Notification_ControllerSlots {
	if x != nil {
		return x.ControllerSlots
	}
	return nil
}

var File_steam_steammessages_remoteclient_service_messages_proto protoreflect.FileDescriptor

var file_steam_steammessages_remoteclient_service_messages_proto_rawDesc = []byte{
	0x0a, 0x37, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x22, 0x25, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x22,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x37, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x7c, 0x0a, 0x24, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x25, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x26, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x2f, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x31, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22,
	0x7c, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x61, 0x0a,
	0x26, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x41, 0x0a, 0x20, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x64, 0x0a, 0x28, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x54, 0x55, 0x52, 0x4e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x29, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x55, 0x52, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x72, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x29, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x4f, 0x0a,
	0x2a, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x39,
	0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7b, 0x0a, 0x29, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd2, 0x01, 0x0a,
	0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x64, 0x73, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xbc, 0x01, 0x0a, 0x22, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x42, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x78, 0x32, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x58, 0x32, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x68, 0x32, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x64, 0x48, 0x32, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x68, 0x65, 0x76, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64,
	0x48, 0x65, 0x76, 0x63, 0x22, 0xe1, 0x03, 0x0a, 0x20, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x1a, 0x43, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x1a, 0xf5, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x68,
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
}

var (
	file_steam_steammessages_remoteclient_service_messages_proto_rawDescOnce sync.Once
	file_steam_steammessages_remoteclient_service_messages_proto_rawDescData = file_steam_steammessages_remoteclient_service_messages_proto_rawDesc
)

func file_steam_steammessages_remoteclient_service_messages_proto_rawDescGZIP() []byte {
	file_steam_steammessages_remoteclient_service_messages_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_remoteclient_service_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_remoteclient_service_messages_proto_rawDescData)
	})
	return file_steam_steammessages_remoteclient_service_messages_proto_rawDescData
}

var file_steam_steammessages_remoteclient_service_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_steam_steammessages_remoteclient_service_messages_proto_goTypes = []interface{}{
	(*CRemoteClient_CreateSession_Request)(nil),               // 0: steam.CRemoteClient_CreateSession_Request
	(*CRemoteClient_CreateSession_Response)(nil),              // 1: steam.CRemoteClient_CreateSession_Response
	(*CRemoteClient_StartPairing_Request)(nil),                // 2: steam.CRemoteClient_StartPairing_Request
	(*CRemoteClient_StartPairing_Response)(nil),               // 3: steam.CRemoteClient_StartPairing_Response
	(*CRemoteClient_SetPairingInfo_Request)(nil),              // 4: steam.CRemoteClient_SetPairingInfo_Request
	(*CRemoteClient_SetPairingInfo_Response)(nil),             // 5: steam.CRemoteClient_SetPairingInfo_Response
	(*CRemoteClient_GetPairingInfo_Request)(nil),              // 6: steam.CRemoteClient_GetPairingInfo_Request
	(*CRemoteClient_GetPairingInfo_Response)(nil),             // 7: steam.CRemoteClient_GetPairingInfo_Response
	(*CRemoteClient_CancelPairing_Request)(nil),               // 8: steam.CRemoteClient_CancelPairing_Request
	(*CRemoteClient_CancelPairing_Response)(nil),              // 9: steam.CRemoteClient_CancelPairing_Response
	(*CRemoteClient_RegisterStatusUpdate_Notification)(nil),   // 10: steam.CRemoteClient_RegisterStatusUpdate_Notification
	(*CRemoteClient_UnregisterStatusUpdate_Notification)(nil), // 11: steam.CRemoteClient_UnregisterStatusUpdate_Notification
	(*CRemoteClient_Online_Notification)(nil),                 // 12: steam.CRemoteClient_Online_Notification
	(*CRemoteClient_RemotePacket_Notification)(nil),           // 13: steam.CRemoteClient_RemotePacket_Notification
	(*CRemoteClient_ReplyPacket_Notification)(nil),            // 14: steam.CRemoteClient_ReplyPacket_Notification
	(*CRemoteClient_GetReplies_Request)(nil),                  // 15: steam.CRemoteClient_GetReplies_Request
	(*CRemoteClient_GetReplies_Response)(nil),                 // 16: steam.CRemoteClient_GetReplies_Response
	(*CRemoteClient_AllocateTURNServer_Request)(nil),          // 17: steam.CRemoteClient_AllocateTURNServer_Request
	(*CRemoteClient_AllocateTURNServer_Response)(nil),         // 18: steam.CRemoteClient_AllocateTURNServer_Response
	(*CRemoteClient_AllocateRelayServer_Request)(nil),         // 19: steam.CRemoteClient_AllocateRelayServer_Request
	(*CRemoteClient_AllocateRelayServer_Response)(nil),        // 20: steam.CRemoteClient_AllocateRelayServer_Response
	(*CRemoteClient_AllocateSDR_Request)(nil),                 // 21: steam.CRemoteClient_AllocateSDR_Request
	(*CRemoteClient_AllocateSDR_Response)(nil),                // 22: steam.CRemoteClient_AllocateSDR_Response
	(*CRemoteClient_SteamBroadcast_Notification)(nil),         // 23: steam.CRemoteClient_SteamBroadcast_Notification
	(*CRemoteClient_SteamToSteam_Notification)(nil),           // 24: steam.CRemoteClient_SteamToSteam_Notification
	(*CRemotePlay_SessionStarted_Request)(nil),                // 25: steam.CRemotePlay_SessionStarted_Request
	(*CRemotePlay_SessionStarted_Response)(nil),               // 26: steam.CRemotePlay_SessionStarted_Response
	(*CRemotePlay_SessionStopped_Notification)(nil),           // 27: steam.CRemotePlay_SessionStopped_Notification
	(*CRemotePlayTogether_Notification)(nil),                  // 28: steam.CRemotePlayTogether_Notification
	(*CRemotePlayTogether_Notification_ControllerSlots)(nil),  // 29: steam.CRemotePlayTogether_Notification.ControllerSlots
	(*CRemotePlayTogether_Notification_GroupUpdated)(nil),     // 30: steam.CRemotePlayTogether_Notification.GroupUpdated
}
var file_steam_steammessages_remoteclient_service_messages_proto_depIdxs = []int32{
	30, // 0: steam.CRemotePlayTogether_Notification.group_updated:type_name -> steam.CRemotePlayTogether_Notification.GroupUpdated
	29, // 1: steam.CRemotePlayTogether_Notification.GroupUpdated.controller_slots:type_name -> steam.CRemotePlayTogether_Notification.ControllerSlots
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_steam_steammessages_remoteclient_service_messages_proto_init() }
func file_steam_steammessages_remoteclient_service_messages_proto_init() {
	if File_steam_steammessages_remoteclient_service_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateSession_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateSession_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_StartPairing_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_StartPairing_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SetPairingInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SetPairingInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetPairingInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetPairingInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CancelPairing_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CancelPairing_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_RegisterStatusUpdate_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_UnregisterStatusUpdate_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_Online_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_RemotePacket_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_ReplyPacket_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetReplies_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetReplies_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateTURNServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateTURNServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateSDR_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateSDR_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SteamBroadcast_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SteamToSteam_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStarted_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStarted_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStopped_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_ControllerSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_GroupUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steam_steammessages_remoteclient_service_messages_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*CRemotePlayTogether_Notification_GroupUpdated_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_remoteclient_service_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_remoteclient_service_messages_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_remoteclient_service_messages_proto_depIdxs,
		MessageInfos:      file_steam_steammessages_remoteclient_service_messages_proto_msgTypes,
	}.Build()
	File_steam_steammessages_remoteclient_service_messages_proto = out.File
	file_steam_steammessages_remoteclient_service_messages_proto_rawDesc = nil
	file_steam_steammessages_remoteclient_service_messages_proto_goTypes = nil
	file_steam_steammessages_remoteclient_service_messages_proto_depIdxs = nil
}
