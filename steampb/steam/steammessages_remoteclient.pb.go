// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/steammessages_remoteclient.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgRemoteClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   *uint64                          `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	InstanceId *uint64                          `protobuf:"varint,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status     *CMsgRemoteClientBroadcastStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *CMsgRemoteClientStatus) Reset() {
	*x = CMsgRemoteClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientStatus) ProtoMessage() {}

func (x *CMsgRemoteClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientStatus.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgRemoteClientStatus) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CMsgRemoteClientStatus) GetInstanceId() uint64 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CMsgRemoteClientStatus) GetStatus() *CMsgRemoteClientBroadcastStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CMsgRemoteClientAppStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusUpdates []*CMsgRemoteClientAppStatus_AppStatus `protobuf:"bytes,1,rep,name=status_updates,json=statusUpdates" json:"status_updates,omitempty"`
}

func (x *CMsgRemoteClientAppStatus) Reset() {
	*x = CMsgRemoteClientAppStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientAppStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientAppStatus) ProtoMessage() {}

func (x *CMsgRemoteClientAppStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientAppStatus.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientAppStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgRemoteClientAppStatus) GetStatusUpdates() []*CMsgRemoteClientAppStatus_AppStatus {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

type CMsgRemoteClientStartStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32                                        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Environment        *int32                                         `protobuf:"varint,2,opt,name=environment" json:"environment,omitempty"`
	GamepadCount       *int32                                         `protobuf:"varint,3,opt,name=gamepad_count,json=gamepadCount" json:"gamepad_count,omitempty"`
	LaunchOption       *int32                                         `protobuf:"varint,4,opt,name=launch_option,json=launchOption,def=-1" json:"launch_option,omitempty"`
	LockParentalLock   *bool                                          `protobuf:"varint,5,opt,name=lock_parental_lock,json=lockParentalLock,def=0" json:"lock_parental_lock,omitempty"`
	UnlockParentalLock *string                                        `protobuf:"bytes,6,opt,name=unlock_parental_lock,json=unlockParentalLock" json:"unlock_parental_lock,omitempty"`
	MaximumResolutionX *int32                                         `protobuf:"varint,7,opt,name=maximum_resolution_x,json=maximumResolutionX" json:"maximum_resolution_x,omitempty"`
	MaximumResolutionY *int32                                         `protobuf:"varint,8,opt,name=maximum_resolution_y,json=maximumResolutionY" json:"maximum_resolution_y,omitempty"`
	Gamepads           []*CMsgRemoteClientStartStream_ReservedGamepad `protobuf:"bytes,9,rep,name=gamepads" json:"gamepads,omitempty"`
	AudioChannelCount  *int32                                         `protobuf:"varint,10,opt,name=audio_channel_count,json=audioChannelCount,def=2" json:"audio_channel_count,omitempty"`
	SupportedTransport []EStreamTransport                             `protobuf:"varint,11,rep,name=supported_transport,json=supportedTransport,enum=steam.EStreamTransport" json:"supported_transport,omitempty"`
}

// Default values for CMsgRemoteClientStartStream fields.
const (
	Default_CMsgRemoteClientStartStream_LaunchOption      = int32(-1)
	Default_CMsgRemoteClientStartStream_LockParentalLock  = bool(false)
	Default_CMsgRemoteClientStartStream_AudioChannelCount = int32(2)
)

func (x *CMsgRemoteClientStartStream) Reset() {
	*x = CMsgRemoteClientStartStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientStartStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientStartStream) ProtoMessage() {}

func (x *CMsgRemoteClientStartStream) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientStartStream.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientStartStream) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgRemoteClientStartStream) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgRemoteClientStartStream) GetEnvironment() int32 {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return 0
}

func (x *CMsgRemoteClientStartStream) GetGamepadCount() int32 {
	if x != nil && x.GamepadCount != nil {
		return *x.GamepadCount
	}
	return 0
}

func (x *CMsgRemoteClientStartStream) GetLaunchOption() int32 {
	if x != nil && x.LaunchOption != nil {
		return *x.LaunchOption
	}
	return Default_CMsgRemoteClientStartStream_LaunchOption
}

func (x *CMsgRemoteClientStartStream) GetLockParentalLock() bool {
	if x != nil && x.LockParentalLock != nil {
		return *x.LockParentalLock
	}
	return Default_CMsgRemoteClientStartStream_LockParentalLock
}

func (x *CMsgRemoteClientStartStream) GetUnlockParentalLock() string {
	if x != nil && x.UnlockParentalLock != nil {
		return *x.UnlockParentalLock
	}
	return ""
}

func (x *CMsgRemoteClientStartStream) GetMaximumResolutionX() int32 {
	if x != nil && x.MaximumResolutionX != nil {
		return *x.MaximumResolutionX
	}
	return 0
}

func (x *CMsgRemoteClientStartStream) GetMaximumResolutionY() int32 {
	if x != nil && x.MaximumResolutionY != nil {
		return *x.MaximumResolutionY
	}
	return 0
}

func (x *CMsgRemoteClientStartStream) GetGamepads() []*CMsgRemoteClientStartStream_ReservedGamepad {
	if x != nil {
		return x.Gamepads
	}
	return nil
}

func (x *CMsgRemoteClientStartStream) GetAudioChannelCount() int32 {
	if x != nil && x.AudioChannelCount != nil {
		return *x.AudioChannelCount
	}
	return Default_CMsgRemoteClientStartStream_AudioChannelCount
}

func (x *CMsgRemoteClientStartStream) GetSupportedTransport() []EStreamTransport {
	if x != nil {
		return x.SupportedTransport
	}
	return nil
}

type CMsgRemoteClientStartStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ELaunchResult    *int32            `protobuf:"varint,1,opt,name=e_launch_result,json=eLaunchResult,def=2" json:"e_launch_result,omitempty"`
	StreamPort       *uint32           `protobuf:"varint,2,opt,name=stream_port,json=streamPort" json:"stream_port,omitempty"`
	LaunchOptions    []int32           `protobuf:"varint,3,rep,name=launch_options,json=launchOptions" json:"launch_options,omitempty"`
	AuthToken        []byte            `protobuf:"bytes,4,opt,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	Transport        *EStreamTransport `protobuf:"varint,5,opt,name=transport,enum=steam.EStreamTransport,def=1" json:"transport,omitempty"`
	RelayServer      *string           `protobuf:"bytes,6,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
	LaunchTask       *string           `protobuf:"bytes,7,opt,name=launch_task,json=launchTask" json:"launch_task,omitempty"`
	LaunchTaskDetail *string           `protobuf:"bytes,8,opt,name=launch_task_detail,json=launchTaskDetail" json:"launch_task_detail,omitempty"`
	LaunchTasksDone  *int32            `protobuf:"varint,9,opt,name=launch_tasks_done,json=launchTasksDone" json:"launch_tasks_done,omitempty"`
	LaunchTasksTotal *int32            `protobuf:"varint,10,opt,name=launch_tasks_total,json=launchTasksTotal" json:"launch_tasks_total,omitempty"`
}

// Default values for CMsgRemoteClientStartStreamResponse fields.
const (
	Default_CMsgRemoteClientStartStreamResponse_ELaunchResult = int32(2)
	Default_CMsgRemoteClientStartStreamResponse_Transport     = EStreamTransport_k_EStreamTransportUDP
)

func (x *CMsgRemoteClientStartStreamResponse) Reset() {
	*x = CMsgRemoteClientStartStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientStartStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientStartStreamResponse) ProtoMessage() {}

func (x *CMsgRemoteClientStartStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientStartStreamResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientStartStreamResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgRemoteClientStartStreamResponse) GetELaunchResult() int32 {
	if x != nil && x.ELaunchResult != nil {
		return *x.ELaunchResult
	}
	return Default_CMsgRemoteClientStartStreamResponse_ELaunchResult
}

func (x *CMsgRemoteClientStartStreamResponse) GetStreamPort() uint32 {
	if x != nil && x.StreamPort != nil {
		return *x.StreamPort
	}
	return 0
}

func (x *CMsgRemoteClientStartStreamResponse) GetLaunchOptions() []int32 {
	if x != nil {
		return x.LaunchOptions
	}
	return nil
}

func (x *CMsgRemoteClientStartStreamResponse) GetAuthToken() []byte {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *CMsgRemoteClientStartStreamResponse) GetTransport() EStreamTransport {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return Default_CMsgRemoteClientStartStreamResponse_Transport
}

func (x *CMsgRemoteClientStartStreamResponse) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

func (x *CMsgRemoteClientStartStreamResponse) GetLaunchTask() string {
	if x != nil && x.LaunchTask != nil {
		return *x.LaunchTask
	}
	return ""
}

func (x *CMsgRemoteClientStartStreamResponse) GetLaunchTaskDetail() string {
	if x != nil && x.LaunchTaskDetail != nil {
		return *x.LaunchTaskDetail
	}
	return ""
}

func (x *CMsgRemoteClientStartStreamResponse) GetLaunchTasksDone() int32 {
	if x != nil && x.LaunchTasksDone != nil {
		return *x.LaunchTasksDone
	}
	return 0
}

func (x *CMsgRemoteClientStartStreamResponse) GetLaunchTasksTotal() int32 {
	if x != nil && x.LaunchTasksTotal != nil {
		return *x.LaunchTasksTotal
	}
	return 0
}

type CMsgRemoteClientPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgRemoteClientPing) Reset() {
	*x = CMsgRemoteClientPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientPing) ProtoMessage() {}

func (x *CMsgRemoteClientPing) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientPing.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientPing) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{4}
}

type CMsgRemoteClientPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgRemoteClientPingResponse) Reset() {
	*x = CMsgRemoteClientPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientPingResponse) ProtoMessage() {}

func (x *CMsgRemoteClientPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientPingResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientPingResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{5}
}

type CMsgRemoteClientAcceptEULA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId []uint32 `protobuf:"varint,1,rep,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgRemoteClientAcceptEULA) Reset() {
	*x = CMsgRemoteClientAcceptEULA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientAcceptEULA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientAcceptEULA) ProtoMessage() {}

func (x *CMsgRemoteClientAcceptEULA) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientAcceptEULA.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientAcceptEULA) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgRemoteClientAcceptEULA) GetAppId() []uint32 {
	if x != nil {
		return x.AppId
	}
	return nil
}

type CMsgRemoteClientGetControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ControllerIndex *uint32 `protobuf:"varint,3,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
}

func (x *CMsgRemoteClientGetControllerConfig) Reset() {
	*x = CMsgRemoteClientGetControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientGetControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientGetControllerConfig) ProtoMessage() {}

func (x *CMsgRemoteClientGetControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientGetControllerConfig.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientGetControllerConfig) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgRemoteClientGetControllerConfig) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgRemoteClientGetControllerConfig) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

type CMsgRemoteClientGetControllerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult   *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ConfigVdf []byte `protobuf:"bytes,2,opt,name=config_vdf,json=configVdf" json:"config_vdf,omitempty"`
}

// Default values for CMsgRemoteClientGetControllerConfigResponse fields.
const (
	Default_CMsgRemoteClientGetControllerConfigResponse_Eresult = int32(2)
)

func (x *CMsgRemoteClientGetControllerConfigResponse) Reset() {
	*x = CMsgRemoteClientGetControllerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientGetControllerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientGetControllerConfigResponse) ProtoMessage() {}

func (x *CMsgRemoteClientGetControllerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientGetControllerConfigResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientGetControllerConfigResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgRemoteClientGetControllerConfigResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgRemoteClientGetControllerConfigResponse_Eresult
}

func (x *CMsgRemoteClientGetControllerConfigResponse) GetConfigVdf() []byte {
	if x != nil {
		return x.ConfigVdf
	}
	return nil
}

type CMsgRemoteClientStreamingEnabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
}

func (x *CMsgRemoteClientStreamingEnabled) Reset() {
	*x = CMsgRemoteClientStreamingEnabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientStreamingEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientStreamingEnabled) ProtoMessage() {}

func (x *CMsgRemoteClientStreamingEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientStreamingEnabled.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientStreamingEnabled) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgRemoteClientStreamingEnabled) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CMsgRemoteClientAppStatus_AppUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUpdateStart           *uint32 `protobuf:"fixed32,1,opt,name=time_update_start,json=timeUpdateStart" json:"time_update_start,omitempty"`
	BytesToDownload           *uint64 `protobuf:"varint,2,opt,name=bytes_to_download,json=bytesToDownload" json:"bytes_to_download,omitempty"`
	BytesDownloaded           *uint64 `protobuf:"varint,3,opt,name=bytes_downloaded,json=bytesDownloaded" json:"bytes_downloaded,omitempty"`
	BytesToProcess            *uint64 `protobuf:"varint,4,opt,name=bytes_to_process,json=bytesToProcess" json:"bytes_to_process,omitempty"`
	BytesProcessed            *uint64 `protobuf:"varint,5,opt,name=bytes_processed,json=bytesProcessed" json:"bytes_processed,omitempty"`
	EstimatedSecondsRemaining *int32  `protobuf:"varint,6,opt,name=estimated_seconds_remaining,json=estimatedSecondsRemaining,def=-1" json:"estimated_seconds_remaining,omitempty"`
	UpdateResult              *int32  `protobuf:"varint,7,opt,name=update_result,json=updateResult" json:"update_result,omitempty"`
	UpdateState               *uint32 `protobuf:"varint,8,opt,name=update_state,json=updateState" json:"update_state,omitempty"`
}

// Default values for CMsgRemoteClientAppStatus_AppUpdateInfo fields.
const (
	Default_CMsgRemoteClientAppStatus_AppUpdateInfo_EstimatedSecondsRemaining = int32(-1)
)

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) Reset() {
	*x = CMsgRemoteClientAppStatus_AppUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientAppStatus_AppUpdateInfo) ProtoMessage() {}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientAppStatus_AppUpdateInfo.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientAppStatus_AppUpdateInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetTimeUpdateStart() uint32 {
	if x != nil && x.TimeUpdateStart != nil {
		return *x.TimeUpdateStart
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetBytesToDownload() uint64 {
	if x != nil && x.BytesToDownload != nil {
		return *x.BytesToDownload
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetBytesToProcess() uint64 {
	if x != nil && x.BytesToProcess != nil {
		return *x.BytesToProcess
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetBytesProcessed() uint64 {
	if x != nil && x.BytesProcessed != nil {
		return *x.BytesProcessed
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetEstimatedSecondsRemaining() int32 {
	if x != nil && x.EstimatedSecondsRemaining != nil {
		return *x.EstimatedSecondsRemaining
	}
	return Default_CMsgRemoteClientAppStatus_AppUpdateInfo_EstimatedSecondsRemaining
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetUpdateResult() int32 {
	if x != nil && x.UpdateResult != nil {
		return *x.UpdateResult
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppUpdateInfo) GetUpdateState() uint32 {
	if x != nil && x.UpdateState != nil {
		return *x.UpdateState
	}
	return 0
}

type CMsgRemoteClientAppStatus_ShortcutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Icon       *string  `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Categories []string `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
	Exepath    *string  `protobuf:"bytes,4,opt,name=exepath" json:"exepath,omitempty"`
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) Reset() {
	*x = CMsgRemoteClientAppStatus_ShortcutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientAppStatus_ShortcutInfo) ProtoMessage() {}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientAppStatus_ShortcutInfo.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientAppStatus_ShortcutInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CMsgRemoteClientAppStatus_ShortcutInfo) GetExepath() string {
	if x != nil && x.Exepath != nil {
		return *x.Exepath
	}
	return ""
}

type CMsgRemoteClientAppStatus_AppStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32                                  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AppState        *uint32                                  `protobuf:"varint,2,opt,name=app_state,json=appState" json:"app_state,omitempty"`
	UpdateInfo      *CMsgRemoteClientAppStatus_AppUpdateInfo `protobuf:"bytes,3,opt,name=update_info,json=updateInfo" json:"update_info,omitempty"`
	ShortcutInfo    *CMsgRemoteClientAppStatus_ShortcutInfo  `protobuf:"bytes,4,opt,name=shortcut_info,json=shortcutInfo" json:"shortcut_info,omitempty"`
	LaunchAvailable *bool                                    `protobuf:"varint,5,opt,name=launch_available,json=launchAvailable,def=1" json:"launch_available,omitempty"`
}

// Default values for CMsgRemoteClientAppStatus_AppStatus fields.
const (
	Default_CMsgRemoteClientAppStatus_AppStatus_LaunchAvailable = bool(true)
)

func (x *CMsgRemoteClientAppStatus_AppStatus) Reset() {
	*x = CMsgRemoteClientAppStatus_AppStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientAppStatus_AppStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientAppStatus_AppStatus) ProtoMessage() {}

func (x *CMsgRemoteClientAppStatus_AppStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientAppStatus_AppStatus.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientAppStatus_AppStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CMsgRemoteClientAppStatus_AppStatus) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppStatus) GetAppState() uint32 {
	if x != nil && x.AppState != nil {
		return *x.AppState
	}
	return 0
}

func (x *CMsgRemoteClientAppStatus_AppStatus) GetUpdateInfo() *CMsgRemoteClientAppStatus_AppUpdateInfo {
	if x != nil {
		return x.UpdateInfo
	}
	return nil
}

func (x *CMsgRemoteClientAppStatus_AppStatus) GetShortcutInfo() *CMsgRemoteClientAppStatus_ShortcutInfo {
	if x != nil {
		return x.ShortcutInfo
	}
	return nil
}

func (x *CMsgRemoteClientAppStatus_AppStatus) GetLaunchAvailable() bool {
	if x != nil && x.LaunchAvailable != nil {
		return *x.LaunchAvailable
	}
	return Default_CMsgRemoteClientAppStatus_AppStatus_LaunchAvailable
}

type CMsgRemoteClientStartStream_ReservedGamepad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerType    *uint32 `protobuf:"varint,1,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
	ControllerSubtype *uint32 `protobuf:"varint,2,opt,name=controller_subtype,json=controllerSubtype" json:"controller_subtype,omitempty"`
}

func (x *CMsgRemoteClientStartStream_ReservedGamepad) Reset() {
	*x = CMsgRemoteClientStartStream_ReservedGamepad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientStartStream_ReservedGamepad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientStartStream_ReservedGamepad) ProtoMessage() {}

func (x *CMsgRemoteClientStartStream_ReservedGamepad) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientStartStream_ReservedGamepad.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientStartStream_ReservedGamepad) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgRemoteClientStartStream_ReservedGamepad) GetControllerType() uint32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

func (x *CMsgRemoteClientStartStream_ReservedGamepad) GetControllerSubtype() uint32 {
	if x != nil && x.ControllerSubtype != nil {
		return *x.ControllerSubtype
	}
	return 0
}

var File_steam_steammessages_remoteclient_proto protoreflect.FileDescriptor

var file_steam_steammessages_remoteclient_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x1a,
	0x1e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x30, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x06, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xf1, 0x02, 0x0a, 0x0d,
	0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x19, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x70, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x1a, 0x95, 0x02, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa7, 0x05, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x4e, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x11, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x65,
	0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x0d, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x44, 0x50,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22,
	0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x55, 0x4c, 0x41, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x69, 0x0a,
	0x2b, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32,
	0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x76, 0x64, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x64, 0x66, 0x22, 0x3c, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x39, 0x48, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01,
	0x00,
}

var (
	file_steam_steammessages_remoteclient_proto_rawDescOnce sync.Once
	file_steam_steammessages_remoteclient_proto_rawDescData = file_steam_steammessages_remoteclient_proto_rawDesc
)

func file_steam_steammessages_remoteclient_proto_rawDescGZIP() []byte {
	file_steam_steammessages_remoteclient_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_remoteclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_remoteclient_proto_rawDescData)
	})
	return file_steam_steammessages_remoteclient_proto_rawDescData
}

var file_steam_steammessages_remoteclient_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_steam_steammessages_remoteclient_proto_goTypes = []interface{}{
	(*CMsgRemoteClientStatus)(nil),                      // 0: steam.CMsgRemoteClientStatus
	(*CMsgRemoteClientAppStatus)(nil),                   // 1: steam.CMsgRemoteClientAppStatus
	(*CMsgRemoteClientStartStream)(nil),                 // 2: steam.CMsgRemoteClientStartStream
	(*CMsgRemoteClientStartStreamResponse)(nil),         // 3: steam.CMsgRemoteClientStartStreamResponse
	(*CMsgRemoteClientPing)(nil),                        // 4: steam.CMsgRemoteClientPing
	(*CMsgRemoteClientPingResponse)(nil),                // 5: steam.CMsgRemoteClientPingResponse
	(*CMsgRemoteClientAcceptEULA)(nil),                  // 6: steam.CMsgRemoteClientAcceptEULA
	(*CMsgRemoteClientGetControllerConfig)(nil),         // 7: steam.CMsgRemoteClientGetControllerConfig
	(*CMsgRemoteClientGetControllerConfigResponse)(nil), // 8: steam.CMsgRemoteClientGetControllerConfigResponse
	(*CMsgRemoteClientStreamingEnabled)(nil),            // 9: steam.CMsgRemoteClientStreamingEnabled
	(*CMsgRemoteClientAppStatus_AppUpdateInfo)(nil),     // 10: steam.CMsgRemoteClientAppStatus.AppUpdateInfo
	(*CMsgRemoteClientAppStatus_ShortcutInfo)(nil),      // 11: steam.CMsgRemoteClientAppStatus.ShortcutInfo
	(*CMsgRemoteClientAppStatus_AppStatus)(nil),         // 12: steam.CMsgRemoteClientAppStatus.AppStatus
	(*CMsgRemoteClientStartStream_ReservedGamepad)(nil), // 13: steam.CMsgRemoteClientStartStream.ReservedGamepad
	(*CMsgRemoteClientBroadcastStatus)(nil),             // 14: steam.CMsgRemoteClientBroadcastStatus
	(EStreamTransport)(0),                               // 15: steam.EStreamTransport
}
var file_steam_steammessages_remoteclient_proto_depIdxs = []int32{
	14, // 0: steam.CMsgRemoteClientStatus.status:type_name -> steam.CMsgRemoteClientBroadcastStatus
	12, // 1: steam.CMsgRemoteClientAppStatus.status_updates:type_name -> steam.CMsgRemoteClientAppStatus.AppStatus
	13, // 2: steam.CMsgRemoteClientStartStream.gamepads:type_name -> steam.CMsgRemoteClientStartStream.ReservedGamepad
	15, // 3: steam.CMsgRemoteClientStartStream.supported_transport:type_name -> steam.EStreamTransport
	15, // 4: steam.CMsgRemoteClientStartStreamResponse.transport:type_name -> steam.EStreamTransport
	10, // 5: steam.CMsgRemoteClientAppStatus.AppStatus.update_info:type_name -> steam.CMsgRemoteClientAppStatus.AppUpdateInfo
	11, // 6: steam.CMsgRemoteClientAppStatus.AppStatus.shortcut_info:type_name -> steam.CMsgRemoteClientAppStatus.ShortcutInfo
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steam_steammessages_remoteclient_proto_init() }
func file_steam_steammessages_remoteclient_proto_init() {
	if File_steam_steammessages_remoteclient_proto != nil {
		return
	}
	file_steam_steammessages_base_proto_init()
	file_steam_steammessages_remoteclient_discovery_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_remoteclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientAppStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientStartStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientStartStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientAcceptEULA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientGetControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientGetControllerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientStreamingEnabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientAppStatus_AppUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientAppStatus_ShortcutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientAppStatus_AppStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientStartStream_ReservedGamepad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_remoteclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_remoteclient_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_remoteclient_proto_depIdxs,
		MessageInfos:      file_steam_steammessages_remoteclient_proto_msgTypes,
	}.Build()
	File_steam_steammessages_remoteclient_proto = out.File
	file_steam_steammessages_remoteclient_proto_rawDesc = nil
	file_steam_steammessages_remoteclient_proto_goTypes = nil
	file_steam_steammessages_remoteclient_proto_depIdxs = nil
}
