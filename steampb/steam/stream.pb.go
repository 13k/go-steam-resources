// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/stream.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EStreamChannel int32

const (
	EStreamChannel_k_EStreamChannelInvalid          EStreamChannel = -1
	EStreamChannel_k_EStreamChannelDiscovery        EStreamChannel = 0
	EStreamChannel_k_EStreamChannelControl          EStreamChannel = 1
	EStreamChannel_k_EStreamChannelStats            EStreamChannel = 2
	EStreamChannel_k_EStreamChannelDataChannelStart EStreamChannel = 3
)

// Enum value maps for EStreamChannel.
var (
	EStreamChannel_name = map[int32]string{
		-1: "k_EStreamChannelInvalid",
		0:  "k_EStreamChannelDiscovery",
		1:  "k_EStreamChannelControl",
		2:  "k_EStreamChannelStats",
		3:  "k_EStreamChannelDataChannelStart",
	}
	EStreamChannel_value = map[string]int32{
		"k_EStreamChannelInvalid":          -1,
		"k_EStreamChannelDiscovery":        0,
		"k_EStreamChannelControl":          1,
		"k_EStreamChannelStats":            2,
		"k_EStreamChannelDataChannelStart": 3,
	}
)

func (x EStreamChannel) Enum() *EStreamChannel {
	p := new(EStreamChannel)
	*p = x
	return p
}

func (x EStreamChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[0].Descriptor()
}

func (EStreamChannel) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[0]
}

func (x EStreamChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamChannel(num)
	return nil
}

// Deprecated: Use EStreamChannel.Descriptor instead.
func (EStreamChannel) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{0}
}

type EStreamDiscoveryMessage int32

const (
	EStreamDiscoveryMessage_k_EStreamDiscoveryPingRequest  EStreamDiscoveryMessage = 1
	EStreamDiscoveryMessage_k_EStreamDiscoveryPingResponse EStreamDiscoveryMessage = 2
)

// Enum value maps for EStreamDiscoveryMessage.
var (
	EStreamDiscoveryMessage_name = map[int32]string{
		1: "k_EStreamDiscoveryPingRequest",
		2: "k_EStreamDiscoveryPingResponse",
	}
	EStreamDiscoveryMessage_value = map[string]int32{
		"k_EStreamDiscoveryPingRequest":  1,
		"k_EStreamDiscoveryPingResponse": 2,
	}
)

func (x EStreamDiscoveryMessage) Enum() *EStreamDiscoveryMessage {
	p := new(EStreamDiscoveryMessage)
	*p = x
	return p
}

func (x EStreamDiscoveryMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamDiscoveryMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[1].Descriptor()
}

func (EStreamDiscoveryMessage) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[1]
}

func (x EStreamDiscoveryMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamDiscoveryMessage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamDiscoveryMessage(num)
	return nil
}

// Deprecated: Use EStreamDiscoveryMessage.Descriptor instead.
func (EStreamDiscoveryMessage) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{1}
}

type EStreamControlMessage int32

const (
	EStreamControlMessage_k_EStreamControlAuthenticationRequest                    EStreamControlMessage = 1
	EStreamControlMessage_k_EStreamControlAuthenticationResponse                   EStreamControlMessage = 2
	EStreamControlMessage_k_EStreamControlNegotiationInit                          EStreamControlMessage = 3
	EStreamControlMessage_k_EStreamControlNegotiationSetConfig                     EStreamControlMessage = 4
	EStreamControlMessage_k_EStreamControlNegotiationComplete                      EStreamControlMessage = 5
	EStreamControlMessage_k_EStreamControlClientHandshake                          EStreamControlMessage = 6
	EStreamControlMessage_k_EStreamControlServerHandshake                          EStreamControlMessage = 7
	EStreamControlMessage_k_EStreamControlStartNetworkTest                         EStreamControlMessage = 8
	EStreamControlMessage_k_EStreamControlKeepAlive                                EStreamControlMessage = 9
	EStreamControlMessage_k_EStreamControl_LAST_SETUP_MESSAGE                      EStreamControlMessage = 15
	EStreamControlMessage_k_EStreamControlStartAudioData                           EStreamControlMessage = 50
	EStreamControlMessage_k_EStreamControlStopAudioData                            EStreamControlMessage = 51
	EStreamControlMessage_k_EStreamControlStartVideoData                           EStreamControlMessage = 52
	EStreamControlMessage_k_EStreamControlStopVideoData                            EStreamControlMessage = 53
	EStreamControlMessage_k_EStreamControlInputMouseMotion                         EStreamControlMessage = 54
	EStreamControlMessage_k_EStreamControlInputMouseWheel                          EStreamControlMessage = 55
	EStreamControlMessage_k_EStreamControlInputMouseDown                           EStreamControlMessage = 56
	EStreamControlMessage_k_EStreamControlInputMouseUp                             EStreamControlMessage = 57
	EStreamControlMessage_k_EStreamControlInputKeyDown                             EStreamControlMessage = 58
	EStreamControlMessage_k_EStreamControlInputKeyUp                               EStreamControlMessage = 59
	EStreamControlMessage_k_EStreamControlInputGamepadAttached_OBSOLETE            EStreamControlMessage = 60
	EStreamControlMessage_k_EStreamControlInputGamepadEvent_OBSOLETE               EStreamControlMessage = 61
	EStreamControlMessage_k_EStreamControlInputGamepadDetached_OBSOLETE            EStreamControlMessage = 62
	EStreamControlMessage_k_EStreamControlShowCursor                               EStreamControlMessage = 63
	EStreamControlMessage_k_EStreamControlHideCursor                               EStreamControlMessage = 64
	EStreamControlMessage_k_EStreamControlSetCursor                                EStreamControlMessage = 65
	EStreamControlMessage_k_EStreamControlGetCursorImage                           EStreamControlMessage = 66
	EStreamControlMessage_k_EStreamControlSetCursorImage                           EStreamControlMessage = 67
	EStreamControlMessage_k_EStreamControlDeleteCursor                             EStreamControlMessage = 68
	EStreamControlMessage_k_EStreamControlSetTargetFramerate                       EStreamControlMessage = 69
	EStreamControlMessage_k_EStreamControlInputLatencyTest                         EStreamControlMessage = 70
	EStreamControlMessage_k_EStreamControlGamepadRumble_OBSOLETE                   EStreamControlMessage = 71
	EStreamControlMessage_k_EStreamControlOverlayEnabled                           EStreamControlMessage = 74
	EStreamControlMessage_k_EStreamControlInputControllerAttached_OBSOLETE         EStreamControlMessage = 75
	EStreamControlMessage_k_EStreamControlInputControllerState_OBSOLETE            EStreamControlMessage = 76
	EStreamControlMessage_k_EStreamControlTriggerHapticPulse_OBSOLETE              EStreamControlMessage = 77
	EStreamControlMessage_k_EStreamControlInputControllerDetached_OBSOLETE         EStreamControlMessage = 78
	EStreamControlMessage_k_EStreamControlVideoDecoderInfo                         EStreamControlMessage = 80
	EStreamControlMessage_k_EStreamControlSetTitle                                 EStreamControlMessage = 81
	EStreamControlMessage_k_EStreamControlSetIcon                                  EStreamControlMessage = 82
	EStreamControlMessage_k_EStreamControlQuitRequest                              EStreamControlMessage = 83
	EStreamControlMessage_k_EStreamControlSetQoS                                   EStreamControlMessage = 87
	EStreamControlMessage_k_EStreamControlInputControllerWirelessPresence_OBSOLETE EStreamControlMessage = 88
	EStreamControlMessage_k_EStreamControlSetGammaRamp                             EStreamControlMessage = 89
	EStreamControlMessage_k_EStreamControlVideoEncoderInfo                         EStreamControlMessage = 90
	EStreamControlMessage_k_EStreamControlInputControllerStateHID_OBSOLETE         EStreamControlMessage = 93
	EStreamControlMessage_k_EStreamControlSetTargetBitrate                         EStreamControlMessage = 94
	EStreamControlMessage_k_EStreamControlSetControllerPairingEnabled_OBSOLETE     EStreamControlMessage = 95
	EStreamControlMessage_k_EStreamControlSetControllerPairingResult_OBSOLETE      EStreamControlMessage = 96
	EStreamControlMessage_k_EStreamControlTriggerControllerDisconnect_OBSOLETE     EStreamControlMessage = 97
	EStreamControlMessage_k_EStreamControlSetActivity                              EStreamControlMessage = 98
	EStreamControlMessage_k_EStreamControlSetStreamingClientConfig                 EStreamControlMessage = 99
	EStreamControlMessage_k_EStreamControlSystemSuspend                            EStreamControlMessage = 100
	EStreamControlMessage_k_EStreamControlSetControllerSettings_OBSOLETE           EStreamControlMessage = 101
	EStreamControlMessage_k_EStreamControlVirtualHereRequest                       EStreamControlMessage = 102
	EStreamControlMessage_k_EStreamControlVirtualHereReady                         EStreamControlMessage = 103
	EStreamControlMessage_k_EStreamControlVirtualHereShareDevice                   EStreamControlMessage = 104
	EStreamControlMessage_k_EStreamControlSetSpectatorMode                         EStreamControlMessage = 105
	EStreamControlMessage_k_EStreamControlRemoteHID                                EStreamControlMessage = 106
	EStreamControlMessage_k_EStreamControlStartMicrophoneData                      EStreamControlMessage = 107
	EStreamControlMessage_k_EStreamControlStopMicrophoneData                       EStreamControlMessage = 108
	EStreamControlMessage_k_EStreamControlInputText                                EStreamControlMessage = 109
	EStreamControlMessage_k_EStreamControlTouchConfigActive                        EStreamControlMessage = 110
	EStreamControlMessage_k_EStreamControlGetTouchConfigData                       EStreamControlMessage = 111
	EStreamControlMessage_k_EStreamControlSetTouchConfigData                       EStreamControlMessage = 112
	EStreamControlMessage_k_EStreamControlSaveTouchConfigLayout                    EStreamControlMessage = 113
	EStreamControlMessage_k_EStreamControlTouchActionSetActive                     EStreamControlMessage = 114
	EStreamControlMessage_k_EStreamControlGetTouchIconData                         EStreamControlMessage = 115
	EStreamControlMessage_k_EStreamControlSetTouchIconData                         EStreamControlMessage = 116
	EStreamControlMessage_k_EStreamControlInputTouchFingerDown                     EStreamControlMessage = 117
	EStreamControlMessage_k_EStreamControlInputTouchFingerMotion                   EStreamControlMessage = 118
	EStreamControlMessage_k_EStreamControlInputTouchFingerUp                       EStreamControlMessage = 119
	EStreamControlMessage_k_EStreamControlSetCaptureSize                           EStreamControlMessage = 120
	EStreamControlMessage_k_EStreamControlSetFlashState                            EStreamControlMessage = 121
	EStreamControlMessage_k_EStreamControlPause                                    EStreamControlMessage = 122
	EStreamControlMessage_k_EStreamControlResume                                   EStreamControlMessage = 123
	EStreamControlMessage_k_EStreamControlEnableHighResCapture                     EStreamControlMessage = 124
	EStreamControlMessage_k_EStreamControlDisableHighResCapture                    EStreamControlMessage = 125
	EStreamControlMessage_k_EStreamControlToggleMagnification                      EStreamControlMessage = 126
	EStreamControlMessage_k_EStreamControlSetCapslock                              EStreamControlMessage = 127
	EStreamControlMessage_k_EStreamControlSetKeymap                                EStreamControlMessage = 128
	EStreamControlMessage_k_EStreamControlStopRequest                              EStreamControlMessage = 129
	EStreamControlMessage_k_EStreamControlTouchActionSetLayerAdded                 EStreamControlMessage = 130
	EStreamControlMessage_k_EStreamControlTouchActionSetLayerRemoved               EStreamControlMessage = 131
)

// Enum value maps for EStreamControlMessage.
var (
	EStreamControlMessage_name = map[int32]string{
		1:   "k_EStreamControlAuthenticationRequest",
		2:   "k_EStreamControlAuthenticationResponse",
		3:   "k_EStreamControlNegotiationInit",
		4:   "k_EStreamControlNegotiationSetConfig",
		5:   "k_EStreamControlNegotiationComplete",
		6:   "k_EStreamControlClientHandshake",
		7:   "k_EStreamControlServerHandshake",
		8:   "k_EStreamControlStartNetworkTest",
		9:   "k_EStreamControlKeepAlive",
		15:  "k_EStreamControl_LAST_SETUP_MESSAGE",
		50:  "k_EStreamControlStartAudioData",
		51:  "k_EStreamControlStopAudioData",
		52:  "k_EStreamControlStartVideoData",
		53:  "k_EStreamControlStopVideoData",
		54:  "k_EStreamControlInputMouseMotion",
		55:  "k_EStreamControlInputMouseWheel",
		56:  "k_EStreamControlInputMouseDown",
		57:  "k_EStreamControlInputMouseUp",
		58:  "k_EStreamControlInputKeyDown",
		59:  "k_EStreamControlInputKeyUp",
		60:  "k_EStreamControlInputGamepadAttached_OBSOLETE",
		61:  "k_EStreamControlInputGamepadEvent_OBSOLETE",
		62:  "k_EStreamControlInputGamepadDetached_OBSOLETE",
		63:  "k_EStreamControlShowCursor",
		64:  "k_EStreamControlHideCursor",
		65:  "k_EStreamControlSetCursor",
		66:  "k_EStreamControlGetCursorImage",
		67:  "k_EStreamControlSetCursorImage",
		68:  "k_EStreamControlDeleteCursor",
		69:  "k_EStreamControlSetTargetFramerate",
		70:  "k_EStreamControlInputLatencyTest",
		71:  "k_EStreamControlGamepadRumble_OBSOLETE",
		74:  "k_EStreamControlOverlayEnabled",
		75:  "k_EStreamControlInputControllerAttached_OBSOLETE",
		76:  "k_EStreamControlInputControllerState_OBSOLETE",
		77:  "k_EStreamControlTriggerHapticPulse_OBSOLETE",
		78:  "k_EStreamControlInputControllerDetached_OBSOLETE",
		80:  "k_EStreamControlVideoDecoderInfo",
		81:  "k_EStreamControlSetTitle",
		82:  "k_EStreamControlSetIcon",
		83:  "k_EStreamControlQuitRequest",
		87:  "k_EStreamControlSetQoS",
		88:  "k_EStreamControlInputControllerWirelessPresence_OBSOLETE",
		89:  "k_EStreamControlSetGammaRamp",
		90:  "k_EStreamControlVideoEncoderInfo",
		93:  "k_EStreamControlInputControllerStateHID_OBSOLETE",
		94:  "k_EStreamControlSetTargetBitrate",
		95:  "k_EStreamControlSetControllerPairingEnabled_OBSOLETE",
		96:  "k_EStreamControlSetControllerPairingResult_OBSOLETE",
		97:  "k_EStreamControlTriggerControllerDisconnect_OBSOLETE",
		98:  "k_EStreamControlSetActivity",
		99:  "k_EStreamControlSetStreamingClientConfig",
		100: "k_EStreamControlSystemSuspend",
		101: "k_EStreamControlSetControllerSettings_OBSOLETE",
		102: "k_EStreamControlVirtualHereRequest",
		103: "k_EStreamControlVirtualHereReady",
		104: "k_EStreamControlVirtualHereShareDevice",
		105: "k_EStreamControlSetSpectatorMode",
		106: "k_EStreamControlRemoteHID",
		107: "k_EStreamControlStartMicrophoneData",
		108: "k_EStreamControlStopMicrophoneData",
		109: "k_EStreamControlInputText",
		110: "k_EStreamControlTouchConfigActive",
		111: "k_EStreamControlGetTouchConfigData",
		112: "k_EStreamControlSetTouchConfigData",
		113: "k_EStreamControlSaveTouchConfigLayout",
		114: "k_EStreamControlTouchActionSetActive",
		115: "k_EStreamControlGetTouchIconData",
		116: "k_EStreamControlSetTouchIconData",
		117: "k_EStreamControlInputTouchFingerDown",
		118: "k_EStreamControlInputTouchFingerMotion",
		119: "k_EStreamControlInputTouchFingerUp",
		120: "k_EStreamControlSetCaptureSize",
		121: "k_EStreamControlSetFlashState",
		122: "k_EStreamControlPause",
		123: "k_EStreamControlResume",
		124: "k_EStreamControlEnableHighResCapture",
		125: "k_EStreamControlDisableHighResCapture",
		126: "k_EStreamControlToggleMagnification",
		127: "k_EStreamControlSetCapslock",
		128: "k_EStreamControlSetKeymap",
		129: "k_EStreamControlStopRequest",
		130: "k_EStreamControlTouchActionSetLayerAdded",
		131: "k_EStreamControlTouchActionSetLayerRemoved",
	}
	EStreamControlMessage_value = map[string]int32{
		"k_EStreamControlAuthenticationRequest":                    1,
		"k_EStreamControlAuthenticationResponse":                   2,
		"k_EStreamControlNegotiationInit":                          3,
		"k_EStreamControlNegotiationSetConfig":                     4,
		"k_EStreamControlNegotiationComplete":                      5,
		"k_EStreamControlClientHandshake":                          6,
		"k_EStreamControlServerHandshake":                          7,
		"k_EStreamControlStartNetworkTest":                         8,
		"k_EStreamControlKeepAlive":                                9,
		"k_EStreamControl_LAST_SETUP_MESSAGE":                      15,
		"k_EStreamControlStartAudioData":                           50,
		"k_EStreamControlStopAudioData":                            51,
		"k_EStreamControlStartVideoData":                           52,
		"k_EStreamControlStopVideoData":                            53,
		"k_EStreamControlInputMouseMotion":                         54,
		"k_EStreamControlInputMouseWheel":                          55,
		"k_EStreamControlInputMouseDown":                           56,
		"k_EStreamControlInputMouseUp":                             57,
		"k_EStreamControlInputKeyDown":                             58,
		"k_EStreamControlInputKeyUp":                               59,
		"k_EStreamControlInputGamepadAttached_OBSOLETE":            60,
		"k_EStreamControlInputGamepadEvent_OBSOLETE":               61,
		"k_EStreamControlInputGamepadDetached_OBSOLETE":            62,
		"k_EStreamControlShowCursor":                               63,
		"k_EStreamControlHideCursor":                               64,
		"k_EStreamControlSetCursor":                                65,
		"k_EStreamControlGetCursorImage":                           66,
		"k_EStreamControlSetCursorImage":                           67,
		"k_EStreamControlDeleteCursor":                             68,
		"k_EStreamControlSetTargetFramerate":                       69,
		"k_EStreamControlInputLatencyTest":                         70,
		"k_EStreamControlGamepadRumble_OBSOLETE":                   71,
		"k_EStreamControlOverlayEnabled":                           74,
		"k_EStreamControlInputControllerAttached_OBSOLETE":         75,
		"k_EStreamControlInputControllerState_OBSOLETE":            76,
		"k_EStreamControlTriggerHapticPulse_OBSOLETE":              77,
		"k_EStreamControlInputControllerDetached_OBSOLETE":         78,
		"k_EStreamControlVideoDecoderInfo":                         80,
		"k_EStreamControlSetTitle":                                 81,
		"k_EStreamControlSetIcon":                                  82,
		"k_EStreamControlQuitRequest":                              83,
		"k_EStreamControlSetQoS":                                   87,
		"k_EStreamControlInputControllerWirelessPresence_OBSOLETE": 88,
		"k_EStreamControlSetGammaRamp":                             89,
		"k_EStreamControlVideoEncoderInfo":                         90,
		"k_EStreamControlInputControllerStateHID_OBSOLETE":         93,
		"k_EStreamControlSetTargetBitrate":                         94,
		"k_EStreamControlSetControllerPairingEnabled_OBSOLETE":     95,
		"k_EStreamControlSetControllerPairingResult_OBSOLETE":      96,
		"k_EStreamControlTriggerControllerDisconnect_OBSOLETE":     97,
		"k_EStreamControlSetActivity":                              98,
		"k_EStreamControlSetStreamingClientConfig":                 99,
		"k_EStreamControlSystemSuspend":                            100,
		"k_EStreamControlSetControllerSettings_OBSOLETE":           101,
		"k_EStreamControlVirtualHereRequest":                       102,
		"k_EStreamControlVirtualHereReady":                         103,
		"k_EStreamControlVirtualHereShareDevice":                   104,
		"k_EStreamControlSetSpectatorMode":                         105,
		"k_EStreamControlRemoteHID":                                106,
		"k_EStreamControlStartMicrophoneData":                      107,
		"k_EStreamControlStopMicrophoneData":                       108,
		"k_EStreamControlInputText":                                109,
		"k_EStreamControlTouchConfigActive":                        110,
		"k_EStreamControlGetTouchConfigData":                       111,
		"k_EStreamControlSetTouchConfigData":                       112,
		"k_EStreamControlSaveTouchConfigLayout":                    113,
		"k_EStreamControlTouchActionSetActive":                     114,
		"k_EStreamControlGetTouchIconData":                         115,
		"k_EStreamControlSetTouchIconData":                         116,
		"k_EStreamControlInputTouchFingerDown":                     117,
		"k_EStreamControlInputTouchFingerMotion":                   118,
		"k_EStreamControlInputTouchFingerUp":                       119,
		"k_EStreamControlSetCaptureSize":                           120,
		"k_EStreamControlSetFlashState":                            121,
		"k_EStreamControlPause":                                    122,
		"k_EStreamControlResume":                                   123,
		"k_EStreamControlEnableHighResCapture":                     124,
		"k_EStreamControlDisableHighResCapture":                    125,
		"k_EStreamControlToggleMagnification":                      126,
		"k_EStreamControlSetCapslock":                              127,
		"k_EStreamControlSetKeymap":                                128,
		"k_EStreamControlStopRequest":                              129,
		"k_EStreamControlTouchActionSetLayerAdded":                 130,
		"k_EStreamControlTouchActionSetLayerRemoved":               131,
	}
)

func (x EStreamControlMessage) Enum() *EStreamControlMessage {
	p := new(EStreamControlMessage)
	*p = x
	return p
}

func (x EStreamControlMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamControlMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[2].Descriptor()
}

func (EStreamControlMessage) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[2]
}

func (x EStreamControlMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamControlMessage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamControlMessage(num)
	return nil
}

// Deprecated: Use EStreamControlMessage.Descriptor instead.
func (EStreamControlMessage) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{2}
}

type EStreamVersion int32

const (
	EStreamVersion_k_EStreamVersionNone    EStreamVersion = 0
	EStreamVersion_k_EStreamVersionCurrent EStreamVersion = 1
)

// Enum value maps for EStreamVersion.
var (
	EStreamVersion_name = map[int32]string{
		0: "k_EStreamVersionNone",
		1: "k_EStreamVersionCurrent",
	}
	EStreamVersion_value = map[string]int32{
		"k_EStreamVersionNone":    0,
		"k_EStreamVersionCurrent": 1,
	}
)

func (x EStreamVersion) Enum() *EStreamVersion {
	p := new(EStreamVersion)
	*p = x
	return p
}

func (x EStreamVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[3].Descriptor()
}

func (EStreamVersion) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[3]
}

func (x EStreamVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamVersion(num)
	return nil
}

// Deprecated: Use EStreamVersion.Descriptor instead.
func (EStreamVersion) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{3}
}

type EStreamAudioCodec int32

const (
	EStreamAudioCodec_k_EStreamAudioCodecNone   EStreamAudioCodec = 0
	EStreamAudioCodec_k_EStreamAudioCodecRaw    EStreamAudioCodec = 1
	EStreamAudioCodec_k_EStreamAudioCodecVorbis EStreamAudioCodec = 2
	EStreamAudioCodec_k_EStreamAudioCodecOpus   EStreamAudioCodec = 3
	EStreamAudioCodec_k_EStreamAudioCodecMP3    EStreamAudioCodec = 4
	EStreamAudioCodec_k_EStreamAudioCodecAAC    EStreamAudioCodec = 5
)

// Enum value maps for EStreamAudioCodec.
var (
	EStreamAudioCodec_name = map[int32]string{
		0: "k_EStreamAudioCodecNone",
		1: "k_EStreamAudioCodecRaw",
		2: "k_EStreamAudioCodecVorbis",
		3: "k_EStreamAudioCodecOpus",
		4: "k_EStreamAudioCodecMP3",
		5: "k_EStreamAudioCodecAAC",
	}
	EStreamAudioCodec_value = map[string]int32{
		"k_EStreamAudioCodecNone":   0,
		"k_EStreamAudioCodecRaw":    1,
		"k_EStreamAudioCodecVorbis": 2,
		"k_EStreamAudioCodecOpus":   3,
		"k_EStreamAudioCodecMP3":    4,
		"k_EStreamAudioCodecAAC":    5,
	}
)

func (x EStreamAudioCodec) Enum() *EStreamAudioCodec {
	p := new(EStreamAudioCodec)
	*p = x
	return p
}

func (x EStreamAudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamAudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[4].Descriptor()
}

func (EStreamAudioCodec) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[4]
}

func (x EStreamAudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamAudioCodec) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamAudioCodec(num)
	return nil
}

// Deprecated: Use EStreamAudioCodec.Descriptor instead.
func (EStreamAudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{4}
}

type EStreamVideoCodec int32

const (
	EStreamVideoCodec_k_EStreamVideoCodecNone  EStreamVideoCodec = 0
	EStreamVideoCodec_k_EStreamVideoCodecRaw   EStreamVideoCodec = 1
	EStreamVideoCodec_k_EStreamVideoCodecVP8   EStreamVideoCodec = 2
	EStreamVideoCodec_k_EStreamVideoCodecVP9   EStreamVideoCodec = 3
	EStreamVideoCodec_k_EStreamVideoCodecH264  EStreamVideoCodec = 4
	EStreamVideoCodec_k_EStreamVideoCodecHEVC  EStreamVideoCodec = 5
	EStreamVideoCodec_k_EStreamVideoCodecORBX1 EStreamVideoCodec = 6
	EStreamVideoCodec_k_EStreamVideoCodecORBX2 EStreamVideoCodec = 7
)

// Enum value maps for EStreamVideoCodec.
var (
	EStreamVideoCodec_name = map[int32]string{
		0: "k_EStreamVideoCodecNone",
		1: "k_EStreamVideoCodecRaw",
		2: "k_EStreamVideoCodecVP8",
		3: "k_EStreamVideoCodecVP9",
		4: "k_EStreamVideoCodecH264",
		5: "k_EStreamVideoCodecHEVC",
		6: "k_EStreamVideoCodecORBX1",
		7: "k_EStreamVideoCodecORBX2",
	}
	EStreamVideoCodec_value = map[string]int32{
		"k_EStreamVideoCodecNone":  0,
		"k_EStreamVideoCodecRaw":   1,
		"k_EStreamVideoCodecVP8":   2,
		"k_EStreamVideoCodecVP9":   3,
		"k_EStreamVideoCodecH264":  4,
		"k_EStreamVideoCodecHEVC":  5,
		"k_EStreamVideoCodecORBX1": 6,
		"k_EStreamVideoCodecORBX2": 7,
	}
)

func (x EStreamVideoCodec) Enum() *EStreamVideoCodec {
	p := new(EStreamVideoCodec)
	*p = x
	return p
}

func (x EStreamVideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamVideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[5].Descriptor()
}

func (EStreamVideoCodec) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[5]
}

func (x EStreamVideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamVideoCodec) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamVideoCodec(num)
	return nil
}

// Deprecated: Use EStreamVideoCodec.Descriptor instead.
func (EStreamVideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{5}
}

type EStreamQualityPreference int32

const (
	EStreamQualityPreference_k_EStreamQualityFast      EStreamQualityPreference = 1
	EStreamQualityPreference_k_EStreamQualityBalanced  EStreamQualityPreference = 2
	EStreamQualityPreference_k_EStreamQualityBeautiful EStreamQualityPreference = 3
)

// Enum value maps for EStreamQualityPreference.
var (
	EStreamQualityPreference_name = map[int32]string{
		1: "k_EStreamQualityFast",
		2: "k_EStreamQualityBalanced",
		3: "k_EStreamQualityBeautiful",
	}
	EStreamQualityPreference_value = map[string]int32{
		"k_EStreamQualityFast":      1,
		"k_EStreamQualityBalanced":  2,
		"k_EStreamQualityBeautiful": 3,
	}
)

func (x EStreamQualityPreference) Enum() *EStreamQualityPreference {
	p := new(EStreamQualityPreference)
	*p = x
	return p
}

func (x EStreamQualityPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamQualityPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[6].Descriptor()
}

func (EStreamQualityPreference) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[6]
}

func (x EStreamQualityPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamQualityPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamQualityPreference(num)
	return nil
}

// Deprecated: Use EStreamQualityPreference.Descriptor instead.
func (EStreamQualityPreference) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{6}
}

type EStreamBitrate int32

const (
	EStreamBitrate_k_EStreamBitrateAutodetect EStreamBitrate = -1
	EStreamBitrate_k_EStreamBitrateUnlimited  EStreamBitrate = 0
)

// Enum value maps for EStreamBitrate.
var (
	EStreamBitrate_name = map[int32]string{
		-1: "k_EStreamBitrateAutodetect",
		0:  "k_EStreamBitrateUnlimited",
	}
	EStreamBitrate_value = map[string]int32{
		"k_EStreamBitrateAutodetect": -1,
		"k_EStreamBitrateUnlimited":  0,
	}
)

func (x EStreamBitrate) Enum() *EStreamBitrate {
	p := new(EStreamBitrate)
	*p = x
	return p
}

func (x EStreamBitrate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamBitrate) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[7].Descriptor()
}

func (EStreamBitrate) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[7]
}

func (x EStreamBitrate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamBitrate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamBitrate(num)
	return nil
}

// Deprecated: Use EStreamBitrate.Descriptor instead.
func (EStreamBitrate) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{7}
}

type EStreamHostPlayAudioPreference int32

const (
	EStreamHostPlayAudioPreference_k_EStreamHostPlayAudioDefault EStreamHostPlayAudioPreference = 0
	EStreamHostPlayAudioPreference_k_EStreamHostPlayAudioAlways  EStreamHostPlayAudioPreference = 1
)

// Enum value maps for EStreamHostPlayAudioPreference.
var (
	EStreamHostPlayAudioPreference_name = map[int32]string{
		0: "k_EStreamHostPlayAudioDefault",
		1: "k_EStreamHostPlayAudioAlways",
	}
	EStreamHostPlayAudioPreference_value = map[string]int32{
		"k_EStreamHostPlayAudioDefault": 0,
		"k_EStreamHostPlayAudioAlways":  1,
	}
)

func (x EStreamHostPlayAudioPreference) Enum() *EStreamHostPlayAudioPreference {
	p := new(EStreamHostPlayAudioPreference)
	*p = x
	return p
}

func (x EStreamHostPlayAudioPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamHostPlayAudioPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[8].Descriptor()
}

func (EStreamHostPlayAudioPreference) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[8]
}

func (x EStreamHostPlayAudioPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamHostPlayAudioPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamHostPlayAudioPreference(num)
	return nil
}

// Deprecated: Use EStreamHostPlayAudioPreference.Descriptor instead.
func (EStreamHostPlayAudioPreference) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{8}
}

type EStreamingDataType int32

const (
	EStreamingDataType_k_EStreamingAudioData      EStreamingDataType = 0
	EStreamingDataType_k_EStreamingVideoData      EStreamingDataType = 1
	EStreamingDataType_k_EStreamingMicrophoneData EStreamingDataType = 2
)

// Enum value maps for EStreamingDataType.
var (
	EStreamingDataType_name = map[int32]string{
		0: "k_EStreamingAudioData",
		1: "k_EStreamingVideoData",
		2: "k_EStreamingMicrophoneData",
	}
	EStreamingDataType_value = map[string]int32{
		"k_EStreamingAudioData":      0,
		"k_EStreamingVideoData":      1,
		"k_EStreamingMicrophoneData": 2,
	}
)

func (x EStreamingDataType) Enum() *EStreamingDataType {
	p := new(EStreamingDataType)
	*p = x
	return p
}

func (x EStreamingDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamingDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[9].Descriptor()
}

func (EStreamingDataType) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[9]
}

func (x EStreamingDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamingDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamingDataType(num)
	return nil
}

// Deprecated: Use EStreamingDataType.Descriptor instead.
func (EStreamingDataType) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{9}
}

type EStreamMouseButton int32

const (
	EStreamMouseButton_k_EStreamMouseButtonLeft    EStreamMouseButton = 1
	EStreamMouseButton_k_EStreamMouseButtonRight   EStreamMouseButton = 2
	EStreamMouseButton_k_EStreamMouseButtonMiddle  EStreamMouseButton = 16
	EStreamMouseButton_k_EStreamMouseButtonX1      EStreamMouseButton = 32
	EStreamMouseButton_k_EStreamMouseButtonX2      EStreamMouseButton = 64
	EStreamMouseButton_k_EStreamMouseButtonUnknown EStreamMouseButton = 4096
)

// Enum value maps for EStreamMouseButton.
var (
	EStreamMouseButton_name = map[int32]string{
		1:    "k_EStreamMouseButtonLeft",
		2:    "k_EStreamMouseButtonRight",
		16:   "k_EStreamMouseButtonMiddle",
		32:   "k_EStreamMouseButtonX1",
		64:   "k_EStreamMouseButtonX2",
		4096: "k_EStreamMouseButtonUnknown",
	}
	EStreamMouseButton_value = map[string]int32{
		"k_EStreamMouseButtonLeft":    1,
		"k_EStreamMouseButtonRight":   2,
		"k_EStreamMouseButtonMiddle":  16,
		"k_EStreamMouseButtonX1":      32,
		"k_EStreamMouseButtonX2":      64,
		"k_EStreamMouseButtonUnknown": 4096,
	}
)

func (x EStreamMouseButton) Enum() *EStreamMouseButton {
	p := new(EStreamMouseButton)
	*p = x
	return p
}

func (x EStreamMouseButton) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamMouseButton) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[10].Descriptor()
}

func (EStreamMouseButton) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[10]
}

func (x EStreamMouseButton) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamMouseButton) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamMouseButton(num)
	return nil
}

// Deprecated: Use EStreamMouseButton.Descriptor instead.
func (EStreamMouseButton) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{10}
}

type EStreamMouseWheelDirection int32

const (
	EStreamMouseWheelDirection_k_EStreamMouseWheelUp    EStreamMouseWheelDirection = 120
	EStreamMouseWheelDirection_k_EStreamMouseWheelDown  EStreamMouseWheelDirection = -120
	EStreamMouseWheelDirection_k_EStreamMouseWheelLeft  EStreamMouseWheelDirection = 3
	EStreamMouseWheelDirection_k_EStreamMouseWheelRight EStreamMouseWheelDirection = 4
)

// Enum value maps for EStreamMouseWheelDirection.
var (
	EStreamMouseWheelDirection_name = map[int32]string{
		120:  "k_EStreamMouseWheelUp",
		-120: "k_EStreamMouseWheelDown",
		3:    "k_EStreamMouseWheelLeft",
		4:    "k_EStreamMouseWheelRight",
	}
	EStreamMouseWheelDirection_value = map[string]int32{
		"k_EStreamMouseWheelUp":    120,
		"k_EStreamMouseWheelDown":  -120,
		"k_EStreamMouseWheelLeft":  3,
		"k_EStreamMouseWheelRight": 4,
	}
)

func (x EStreamMouseWheelDirection) Enum() *EStreamMouseWheelDirection {
	p := new(EStreamMouseWheelDirection)
	*p = x
	return p
}

func (x EStreamMouseWheelDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamMouseWheelDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[11].Descriptor()
}

func (EStreamMouseWheelDirection) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[11]
}

func (x EStreamMouseWheelDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamMouseWheelDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamMouseWheelDirection(num)
	return nil
}

// Deprecated: Use EStreamMouseWheelDirection.Descriptor instead.
func (EStreamMouseWheelDirection) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{11}
}

type EStreamFramerateLimiter int32

const (
	EStreamFramerateLimiter_k_EStreamFramerateSlowCapture EStreamFramerateLimiter = 1
	EStreamFramerateLimiter_k_EStreamFramerateSlowConvert EStreamFramerateLimiter = 2
	EStreamFramerateLimiter_k_EStreamFramerateSlowEncode  EStreamFramerateLimiter = 4
	EStreamFramerateLimiter_k_EStreamFramerateSlowNetwork EStreamFramerateLimiter = 8
	EStreamFramerateLimiter_k_EStreamFramerateSlowDecode  EStreamFramerateLimiter = 16
	EStreamFramerateLimiter_k_EStreamFramerateSlowGame    EStreamFramerateLimiter = 32
	EStreamFramerateLimiter_k_EStreamFramerateSlowDisplay EStreamFramerateLimiter = 64
)

// Enum value maps for EStreamFramerateLimiter.
var (
	EStreamFramerateLimiter_name = map[int32]string{
		1:  "k_EStreamFramerateSlowCapture",
		2:  "k_EStreamFramerateSlowConvert",
		4:  "k_EStreamFramerateSlowEncode",
		8:  "k_EStreamFramerateSlowNetwork",
		16: "k_EStreamFramerateSlowDecode",
		32: "k_EStreamFramerateSlowGame",
		64: "k_EStreamFramerateSlowDisplay",
	}
	EStreamFramerateLimiter_value = map[string]int32{
		"k_EStreamFramerateSlowCapture": 1,
		"k_EStreamFramerateSlowConvert": 2,
		"k_EStreamFramerateSlowEncode":  4,
		"k_EStreamFramerateSlowNetwork": 8,
		"k_EStreamFramerateSlowDecode":  16,
		"k_EStreamFramerateSlowGame":    32,
		"k_EStreamFramerateSlowDisplay": 64,
	}
)

func (x EStreamFramerateLimiter) Enum() *EStreamFramerateLimiter {
	p := new(EStreamFramerateLimiter)
	*p = x
	return p
}

func (x EStreamFramerateLimiter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamFramerateLimiter) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[12].Descriptor()
}

func (EStreamFramerateLimiter) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[12]
}

func (x EStreamFramerateLimiter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamFramerateLimiter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamFramerateLimiter(num)
	return nil
}

// Deprecated: Use EStreamFramerateLimiter.Descriptor instead.
func (EStreamFramerateLimiter) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{12}
}

type EStreamActivity int32

const (
	EStreamActivity_k_EStreamActivityIdle          EStreamActivity = 1
	EStreamActivity_k_EStreamActivityGame          EStreamActivity = 2
	EStreamActivity_k_EStreamActivityDesktop       EStreamActivity = 3
	EStreamActivity_k_EStreamActivitySecureDesktop EStreamActivity = 4
)

// Enum value maps for EStreamActivity.
var (
	EStreamActivity_name = map[int32]string{
		1: "k_EStreamActivityIdle",
		2: "k_EStreamActivityGame",
		3: "k_EStreamActivityDesktop",
		4: "k_EStreamActivitySecureDesktop",
	}
	EStreamActivity_value = map[string]int32{
		"k_EStreamActivityIdle":          1,
		"k_EStreamActivityGame":          2,
		"k_EStreamActivityDesktop":       3,
		"k_EStreamActivitySecureDesktop": 4,
	}
)

func (x EStreamActivity) Enum() *EStreamActivity {
	p := new(EStreamActivity)
	*p = x
	return p
}

func (x EStreamActivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamActivity) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[13].Descriptor()
}

func (EStreamActivity) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[13]
}

func (x EStreamActivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamActivity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamActivity(num)
	return nil
}

// Deprecated: Use EStreamActivity.Descriptor instead.
func (EStreamActivity) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{13}
}

type EStreamDataMessage int32

const (
	EStreamDataMessage_k_EStreamDataPacket EStreamDataMessage = 1
	EStreamDataMessage_k_EStreamDataLost   EStreamDataMessage = 2
)

// Enum value maps for EStreamDataMessage.
var (
	EStreamDataMessage_name = map[int32]string{
		1: "k_EStreamDataPacket",
		2: "k_EStreamDataLost",
	}
	EStreamDataMessage_value = map[string]int32{
		"k_EStreamDataPacket": 1,
		"k_EStreamDataLost":   2,
	}
)

func (x EStreamDataMessage) Enum() *EStreamDataMessage {
	p := new(EStreamDataMessage)
	*p = x
	return p
}

func (x EStreamDataMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamDataMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[14].Descriptor()
}

func (EStreamDataMessage) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[14]
}

func (x EStreamDataMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamDataMessage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamDataMessage(num)
	return nil
}

// Deprecated: Use EStreamDataMessage.Descriptor instead.
func (EStreamDataMessage) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{14}
}

type EAudioFormat int32

const (
	EAudioFormat_k_EAudioFormatNone              EAudioFormat = 0
	EAudioFormat_k_EAudioFormat16BitLittleEndian EAudioFormat = 1
	EAudioFormat_k_EAudioFormatFloat             EAudioFormat = 2
)

// Enum value maps for EAudioFormat.
var (
	EAudioFormat_name = map[int32]string{
		0: "k_EAudioFormatNone",
		1: "k_EAudioFormat16BitLittleEndian",
		2: "k_EAudioFormatFloat",
	}
	EAudioFormat_value = map[string]int32{
		"k_EAudioFormatNone":              0,
		"k_EAudioFormat16BitLittleEndian": 1,
		"k_EAudioFormatFloat":             2,
	}
)

func (x EAudioFormat) Enum() *EAudioFormat {
	p := new(EAudioFormat)
	*p = x
	return p
}

func (x EAudioFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAudioFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[15].Descriptor()
}

func (EAudioFormat) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[15]
}

func (x EAudioFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAudioFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAudioFormat(num)
	return nil
}

// Deprecated: Use EAudioFormat.Descriptor instead.
func (EAudioFormat) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{15}
}

type EVideoFormat int32

const (
	EVideoFormat_k_EVideoFormatNone  EVideoFormat = 0
	EVideoFormat_k_EVideoFormatYV12  EVideoFormat = 1
	EVideoFormat_k_EVideoFormatAccel EVideoFormat = 2
)

// Enum value maps for EVideoFormat.
var (
	EVideoFormat_name = map[int32]string{
		0: "k_EVideoFormatNone",
		1: "k_EVideoFormatYV12",
		2: "k_EVideoFormatAccel",
	}
	EVideoFormat_value = map[string]int32{
		"k_EVideoFormatNone":  0,
		"k_EVideoFormatYV12":  1,
		"k_EVideoFormatAccel": 2,
	}
)

func (x EVideoFormat) Enum() *EVideoFormat {
	p := new(EVideoFormat)
	*p = x
	return p
}

func (x EVideoFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVideoFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[16].Descriptor()
}

func (EVideoFormat) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[16]
}

func (x EVideoFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EVideoFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EVideoFormat(num)
	return nil
}

// Deprecated: Use EVideoFormat.Descriptor instead.
func (EVideoFormat) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{16}
}

type EStreamStatsMessage int32

const (
	EStreamStatsMessage_k_EStreamStatsFrameEvents       EStreamStatsMessage = 1
	EStreamStatsMessage_k_EStreamStatsDebugDump         EStreamStatsMessage = 2
	EStreamStatsMessage_k_EStreamStatsLogMessage        EStreamStatsMessage = 3
	EStreamStatsMessage_k_EStreamStatsLogUploadBegin    EStreamStatsMessage = 4
	EStreamStatsMessage_k_EStreamStatsLogUploadData     EStreamStatsMessage = 5
	EStreamStatsMessage_k_EStreamStatsLogUploadComplete EStreamStatsMessage = 6
)

// Enum value maps for EStreamStatsMessage.
var (
	EStreamStatsMessage_name = map[int32]string{
		1: "k_EStreamStatsFrameEvents",
		2: "k_EStreamStatsDebugDump",
		3: "k_EStreamStatsLogMessage",
		4: "k_EStreamStatsLogUploadBegin",
		5: "k_EStreamStatsLogUploadData",
		6: "k_EStreamStatsLogUploadComplete",
	}
	EStreamStatsMessage_value = map[string]int32{
		"k_EStreamStatsFrameEvents":       1,
		"k_EStreamStatsDebugDump":         2,
		"k_EStreamStatsLogMessage":        3,
		"k_EStreamStatsLogUploadBegin":    4,
		"k_EStreamStatsLogUploadData":     5,
		"k_EStreamStatsLogUploadComplete": 6,
	}
)

func (x EStreamStatsMessage) Enum() *EStreamStatsMessage {
	p := new(EStreamStatsMessage)
	*p = x
	return p
}

func (x EStreamStatsMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamStatsMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[17].Descriptor()
}

func (EStreamStatsMessage) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[17]
}

func (x EStreamStatsMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamStatsMessage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamStatsMessage(num)
	return nil
}

// Deprecated: Use EStreamStatsMessage.Descriptor instead.
func (EStreamStatsMessage) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{17}
}

type EStreamFrameEvent int32

const (
	EStreamFrameEvent_k_EStreamInputEventStart        EStreamFrameEvent = 0
	EStreamFrameEvent_k_EStreamInputEventSend         EStreamFrameEvent = 1
	EStreamFrameEvent_k_EStreamInputEventRecv         EStreamFrameEvent = 2
	EStreamFrameEvent_k_EStreamInputEventQueued       EStreamFrameEvent = 3
	EStreamFrameEvent_k_EStreamInputEventHandled      EStreamFrameEvent = 4
	EStreamFrameEvent_k_EStreamFrameEventStart        EStreamFrameEvent = 5
	EStreamFrameEvent_k_EStreamFrameEventCaptureBegin EStreamFrameEvent = 6
	EStreamFrameEvent_k_EStreamFrameEventCaptureEnd   EStreamFrameEvent = 7
	EStreamFrameEvent_k_EStreamFrameEventConvertBegin EStreamFrameEvent = 8
	EStreamFrameEvent_k_EStreamFrameEventConvertEnd   EStreamFrameEvent = 9
	EStreamFrameEvent_k_EStreamFrameEventEncodeBegin  EStreamFrameEvent = 10
	EStreamFrameEvent_k_EStreamFrameEventEncodeEnd    EStreamFrameEvent = 11
	EStreamFrameEvent_k_EStreamFrameEventSend         EStreamFrameEvent = 12
	EStreamFrameEvent_k_EStreamFrameEventRecv         EStreamFrameEvent = 13
	EStreamFrameEvent_k_EStreamFrameEventDecodeBegin  EStreamFrameEvent = 14
	EStreamFrameEvent_k_EStreamFrameEventDecodeEnd    EStreamFrameEvent = 15
	EStreamFrameEvent_k_EStreamFrameEventUploadBegin  EStreamFrameEvent = 16
	EStreamFrameEvent_k_EStreamFrameEventUploadEnd    EStreamFrameEvent = 17
	EStreamFrameEvent_k_EStreamFrameEventComplete     EStreamFrameEvent = 18
)

// Enum value maps for EStreamFrameEvent.
var (
	EStreamFrameEvent_name = map[int32]string{
		0:  "k_EStreamInputEventStart",
		1:  "k_EStreamInputEventSend",
		2:  "k_EStreamInputEventRecv",
		3:  "k_EStreamInputEventQueued",
		4:  "k_EStreamInputEventHandled",
		5:  "k_EStreamFrameEventStart",
		6:  "k_EStreamFrameEventCaptureBegin",
		7:  "k_EStreamFrameEventCaptureEnd",
		8:  "k_EStreamFrameEventConvertBegin",
		9:  "k_EStreamFrameEventConvertEnd",
		10: "k_EStreamFrameEventEncodeBegin",
		11: "k_EStreamFrameEventEncodeEnd",
		12: "k_EStreamFrameEventSend",
		13: "k_EStreamFrameEventRecv",
		14: "k_EStreamFrameEventDecodeBegin",
		15: "k_EStreamFrameEventDecodeEnd",
		16: "k_EStreamFrameEventUploadBegin",
		17: "k_EStreamFrameEventUploadEnd",
		18: "k_EStreamFrameEventComplete",
	}
	EStreamFrameEvent_value = map[string]int32{
		"k_EStreamInputEventStart":        0,
		"k_EStreamInputEventSend":         1,
		"k_EStreamInputEventRecv":         2,
		"k_EStreamInputEventQueued":       3,
		"k_EStreamInputEventHandled":      4,
		"k_EStreamFrameEventStart":        5,
		"k_EStreamFrameEventCaptureBegin": 6,
		"k_EStreamFrameEventCaptureEnd":   7,
		"k_EStreamFrameEventConvertBegin": 8,
		"k_EStreamFrameEventConvertEnd":   9,
		"k_EStreamFrameEventEncodeBegin":  10,
		"k_EStreamFrameEventEncodeEnd":    11,
		"k_EStreamFrameEventSend":         12,
		"k_EStreamFrameEventRecv":         13,
		"k_EStreamFrameEventDecodeBegin":  14,
		"k_EStreamFrameEventDecodeEnd":    15,
		"k_EStreamFrameEventUploadBegin":  16,
		"k_EStreamFrameEventUploadEnd":    17,
		"k_EStreamFrameEventComplete":     18,
	}
)

func (x EStreamFrameEvent) Enum() *EStreamFrameEvent {
	p := new(EStreamFrameEvent)
	*p = x
	return p
}

func (x EStreamFrameEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamFrameEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[18].Descriptor()
}

func (EStreamFrameEvent) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[18]
}

func (x EStreamFrameEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamFrameEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamFrameEvent(num)
	return nil
}

// Deprecated: Use EStreamFrameEvent.Descriptor instead.
func (EStreamFrameEvent) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{18}
}

type EStreamFrameResult int32

const (
	EStreamFrameResult_k_EStreamFrameResultPending              EStreamFrameResult = 0
	EStreamFrameResult_k_EStreamFrameResultDisplayed            EStreamFrameResult = 1
	EStreamFrameResult_k_EStreamFrameResultDroppedNetworkSlow   EStreamFrameResult = 2
	EStreamFrameResult_k_EStreamFrameResultDroppedNetworkLost   EStreamFrameResult = 3
	EStreamFrameResult_k_EStreamFrameResultDroppedDecodeSlow    EStreamFrameResult = 4
	EStreamFrameResult_k_EStreamFrameResultDroppedDecodeCorrupt EStreamFrameResult = 5
	EStreamFrameResult_k_EStreamFrameResultDroppedLate          EStreamFrameResult = 6
	EStreamFrameResult_k_EStreamFrameResultDroppedReset         EStreamFrameResult = 7
)

// Enum value maps for EStreamFrameResult.
var (
	EStreamFrameResult_name = map[int32]string{
		0: "k_EStreamFrameResultPending",
		1: "k_EStreamFrameResultDisplayed",
		2: "k_EStreamFrameResultDroppedNetworkSlow",
		3: "k_EStreamFrameResultDroppedNetworkLost",
		4: "k_EStreamFrameResultDroppedDecodeSlow",
		5: "k_EStreamFrameResultDroppedDecodeCorrupt",
		6: "k_EStreamFrameResultDroppedLate",
		7: "k_EStreamFrameResultDroppedReset",
	}
	EStreamFrameResult_value = map[string]int32{
		"k_EStreamFrameResultPending":              0,
		"k_EStreamFrameResultDisplayed":            1,
		"k_EStreamFrameResultDroppedNetworkSlow":   2,
		"k_EStreamFrameResultDroppedNetworkLost":   3,
		"k_EStreamFrameResultDroppedDecodeSlow":    4,
		"k_EStreamFrameResultDroppedDecodeCorrupt": 5,
		"k_EStreamFrameResultDroppedLate":          6,
		"k_EStreamFrameResultDroppedReset":         7,
	}
)

func (x EStreamFrameResult) Enum() *EStreamFrameResult {
	p := new(EStreamFrameResult)
	*p = x
	return p
}

func (x EStreamFrameResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamFrameResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[19].Descriptor()
}

func (EStreamFrameResult) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[19]
}

func (x EStreamFrameResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamFrameResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamFrameResult(num)
	return nil
}

// Deprecated: Use EStreamFrameResult.Descriptor instead.
func (EStreamFrameResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{19}
}

type EFrameAccumulatedStat int32

const (
	EFrameAccumulatedStat_k_EFrameStatFPS                     EFrameAccumulatedStat = 0
	EFrameAccumulatedStat_k_EFrameStatCaptureDurationMS       EFrameAccumulatedStat = 1
	EFrameAccumulatedStat_k_EFrameStatConvertDurationMS       EFrameAccumulatedStat = 2
	EFrameAccumulatedStat_k_EFrameStatEncodeDurationMS        EFrameAccumulatedStat = 3
	EFrameAccumulatedStat_k_EFrameStatSteamDurationMS         EFrameAccumulatedStat = 4
	EFrameAccumulatedStat_k_EFrameStatServerDurationMS        EFrameAccumulatedStat = 5
	EFrameAccumulatedStat_k_EFrameStatNetworkDurationMS       EFrameAccumulatedStat = 6
	EFrameAccumulatedStat_k_EFrameStatDecodeDurationMS        EFrameAccumulatedStat = 7
	EFrameAccumulatedStat_k_EFrameStatDisplayDurationMS       EFrameAccumulatedStat = 8
	EFrameAccumulatedStat_k_EFrameStatClientDurationMS        EFrameAccumulatedStat = 9
	EFrameAccumulatedStat_k_EFrameStatFrameDurationMS         EFrameAccumulatedStat = 10
	EFrameAccumulatedStat_k_EFrameStatInputLatencyMS          EFrameAccumulatedStat = 11
	EFrameAccumulatedStat_k_EFrameStatGameLatencyMS           EFrameAccumulatedStat = 12
	EFrameAccumulatedStat_k_EFrameStatRoundTripLatencyMS      EFrameAccumulatedStat = 13
	EFrameAccumulatedStat_k_EFrameStatPingTimeMS              EFrameAccumulatedStat = 14
	EFrameAccumulatedStat_k_EFrameStatServerBitrateKbitPerSec EFrameAccumulatedStat = 15
	EFrameAccumulatedStat_k_EFrameStatClientBitrateKbitPerSec EFrameAccumulatedStat = 16
	EFrameAccumulatedStat_k_EFrameStatLinkBandwidthKbitPerSec EFrameAccumulatedStat = 17
	EFrameAccumulatedStat_k_EFrameStatPacketLossPercentage    EFrameAccumulatedStat = 18
)

// Enum value maps for EFrameAccumulatedStat.
var (
	EFrameAccumulatedStat_name = map[int32]string{
		0:  "k_EFrameStatFPS",
		1:  "k_EFrameStatCaptureDurationMS",
		2:  "k_EFrameStatConvertDurationMS",
		3:  "k_EFrameStatEncodeDurationMS",
		4:  "k_EFrameStatSteamDurationMS",
		5:  "k_EFrameStatServerDurationMS",
		6:  "k_EFrameStatNetworkDurationMS",
		7:  "k_EFrameStatDecodeDurationMS",
		8:  "k_EFrameStatDisplayDurationMS",
		9:  "k_EFrameStatClientDurationMS",
		10: "k_EFrameStatFrameDurationMS",
		11: "k_EFrameStatInputLatencyMS",
		12: "k_EFrameStatGameLatencyMS",
		13: "k_EFrameStatRoundTripLatencyMS",
		14: "k_EFrameStatPingTimeMS",
		15: "k_EFrameStatServerBitrateKbitPerSec",
		16: "k_EFrameStatClientBitrateKbitPerSec",
		17: "k_EFrameStatLinkBandwidthKbitPerSec",
		18: "k_EFrameStatPacketLossPercentage",
	}
	EFrameAccumulatedStat_value = map[string]int32{
		"k_EFrameStatFPS":                     0,
		"k_EFrameStatCaptureDurationMS":       1,
		"k_EFrameStatConvertDurationMS":       2,
		"k_EFrameStatEncodeDurationMS":        3,
		"k_EFrameStatSteamDurationMS":         4,
		"k_EFrameStatServerDurationMS":        5,
		"k_EFrameStatNetworkDurationMS":       6,
		"k_EFrameStatDecodeDurationMS":        7,
		"k_EFrameStatDisplayDurationMS":       8,
		"k_EFrameStatClientDurationMS":        9,
		"k_EFrameStatFrameDurationMS":         10,
		"k_EFrameStatInputLatencyMS":          11,
		"k_EFrameStatGameLatencyMS":           12,
		"k_EFrameStatRoundTripLatencyMS":      13,
		"k_EFrameStatPingTimeMS":              14,
		"k_EFrameStatServerBitrateKbitPerSec": 15,
		"k_EFrameStatClientBitrateKbitPerSec": 16,
		"k_EFrameStatLinkBandwidthKbitPerSec": 17,
		"k_EFrameStatPacketLossPercentage":    18,
	}
)

func (x EFrameAccumulatedStat) Enum() *EFrameAccumulatedStat {
	p := new(EFrameAccumulatedStat)
	*p = x
	return p
}

func (x EFrameAccumulatedStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFrameAccumulatedStat) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[20].Descriptor()
}

func (EFrameAccumulatedStat) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[20]
}

func (x EFrameAccumulatedStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFrameAccumulatedStat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFrameAccumulatedStat(num)
	return nil
}

// Deprecated: Use EFrameAccumulatedStat.Descriptor instead.
func (EFrameAccumulatedStat) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{20}
}

type ELogFileType int32

const (
	ELogFileType_k_ELogFileSystemBoot  ELogFileType = 0
	ELogFileType_k_ELogFileSystemReset ELogFileType = 1
	ELogFileType_k_ELogFileSystemDebug ELogFileType = 2
)

// Enum value maps for ELogFileType.
var (
	ELogFileType_name = map[int32]string{
		0: "k_ELogFileSystemBoot",
		1: "k_ELogFileSystemReset",
		2: "k_ELogFileSystemDebug",
	}
	ELogFileType_value = map[string]int32{
		"k_ELogFileSystemBoot":  0,
		"k_ELogFileSystemReset": 1,
		"k_ELogFileSystemDebug": 2,
	}
)

func (x ELogFileType) Enum() *ELogFileType {
	p := new(ELogFileType)
	*p = x
	return p
}

func (x ELogFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELogFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[21].Descriptor()
}

func (ELogFileType) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[21]
}

func (x ELogFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELogFileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELogFileType(num)
	return nil
}

// Deprecated: Use ELogFileType.Descriptor instead.
func (ELogFileType) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{21}
}

type CAuthenticationResponseMsg_AuthenticationResult int32

const (
	CAuthenticationResponseMsg_SUCCEEDED CAuthenticationResponseMsg_AuthenticationResult = 0
	CAuthenticationResponseMsg_FAILED    CAuthenticationResponseMsg_AuthenticationResult = 1
)

// Enum value maps for CAuthenticationResponseMsg_AuthenticationResult.
var (
	CAuthenticationResponseMsg_AuthenticationResult_name = map[int32]string{
		0: "SUCCEEDED",
		1: "FAILED",
	}
	CAuthenticationResponseMsg_AuthenticationResult_value = map[string]int32{
		"SUCCEEDED": 0,
		"FAILED":    1,
	}
)

func (x CAuthenticationResponseMsg_AuthenticationResult) Enum() *CAuthenticationResponseMsg_AuthenticationResult {
	p := new(CAuthenticationResponseMsg_AuthenticationResult)
	*p = x
	return p
}

func (x CAuthenticationResponseMsg_AuthenticationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CAuthenticationResponseMsg_AuthenticationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_stream_proto_enumTypes[22].Descriptor()
}

func (CAuthenticationResponseMsg_AuthenticationResult) Type() protoreflect.EnumType {
	return &file_steam_stream_proto_enumTypes[22]
}

func (x CAuthenticationResponseMsg_AuthenticationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CAuthenticationResponseMsg_AuthenticationResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CAuthenticationResponseMsg_AuthenticationResult(num)
	return nil
}

// Deprecated: Use CAuthenticationResponseMsg_AuthenticationResult.Descriptor instead.
func (CAuthenticationResponseMsg_AuthenticationResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{7, 0}
}

type CDiscoveryPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence            *uint32 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	PacketSizeRequested *uint32 `protobuf:"varint,2,opt,name=packet_size_requested,json=packetSizeRequested" json:"packet_size_requested,omitempty"`
}

func (x *CDiscoveryPingRequest) Reset() {
	*x = CDiscoveryPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDiscoveryPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDiscoveryPingRequest) ProtoMessage() {}

func (x *CDiscoveryPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDiscoveryPingRequest.ProtoReflect.Descriptor instead.
func (*CDiscoveryPingRequest) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{0}
}

func (x *CDiscoveryPingRequest) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *CDiscoveryPingRequest) GetPacketSizeRequested() uint32 {
	if x != nil && x.PacketSizeRequested != nil {
		return *x.PacketSizeRequested
	}
	return 0
}

type CDiscoveryPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence           *uint32 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	PacketSizeReceived *uint32 `protobuf:"varint,2,opt,name=packet_size_received,json=packetSizeReceived" json:"packet_size_received,omitempty"`
}

func (x *CDiscoveryPingResponse) Reset() {
	*x = CDiscoveryPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDiscoveryPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDiscoveryPingResponse) ProtoMessage() {}

func (x *CDiscoveryPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDiscoveryPingResponse.ProtoReflect.Descriptor instead.
func (*CDiscoveryPingResponse) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{1}
}

func (x *CDiscoveryPingResponse) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *CDiscoveryPingResponse) GetPacketSizeReceived() uint32 {
	if x != nil && x.PacketSizeReceived != nil {
		return *x.PacketSizeReceived
	}
	return 0
}

type CStreamingClientHandshakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkTest *int32 `protobuf:"varint,2,opt,name=network_test,json=networkTest" json:"network_test,omitempty"`
}

func (x *CStreamingClientHandshakeInfo) Reset() {
	*x = CStreamingClientHandshakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingClientHandshakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingClientHandshakeInfo) ProtoMessage() {}

func (x *CStreamingClientHandshakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingClientHandshakeInfo.ProtoReflect.Descriptor instead.
func (*CStreamingClientHandshakeInfo) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{2}
}

func (x *CStreamingClientHandshakeInfo) GetNetworkTest() int32 {
	if x != nil && x.NetworkTest != nil {
		return *x.NetworkTest
	}
	return 0
}

type CClientHandshakeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CStreamingClientHandshakeInfo `protobuf:"bytes,1,req,name=info" json:"info,omitempty"`
}

func (x *CClientHandshakeMsg) Reset() {
	*x = CClientHandshakeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientHandshakeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientHandshakeMsg) ProtoMessage() {}

func (x *CClientHandshakeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientHandshakeMsg.ProtoReflect.Descriptor instead.
func (*CClientHandshakeMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{3}
}

func (x *CClientHandshakeMsg) GetInfo() *CStreamingClientHandshakeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CStreamingServerHandshakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu *int32 `protobuf:"varint,1,opt,name=mtu" json:"mtu,omitempty"`
}

func (x *CStreamingServerHandshakeInfo) Reset() {
	*x = CStreamingServerHandshakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingServerHandshakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingServerHandshakeInfo) ProtoMessage() {}

func (x *CStreamingServerHandshakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingServerHandshakeInfo.ProtoReflect.Descriptor instead.
func (*CStreamingServerHandshakeInfo) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{4}
}

func (x *CStreamingServerHandshakeInfo) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type CServerHandshakeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CStreamingServerHandshakeInfo `protobuf:"bytes,1,req,name=info" json:"info,omitempty"`
}

func (x *CServerHandshakeMsg) Reset() {
	*x = CServerHandshakeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerHandshakeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerHandshakeMsg) ProtoMessage() {}

func (x *CServerHandshakeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerHandshakeMsg.ProtoReflect.Descriptor instead.
func (*CServerHandshakeMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{5}
}

func (x *CServerHandshakeMsg) GetInfo() *CStreamingServerHandshakeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CAuthenticationRequestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   []byte          `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Version *EStreamVersion `protobuf:"varint,2,opt,name=version,enum=steam.EStreamVersion,def=0" json:"version,omitempty"`
}

// Default values for CAuthenticationRequestMsg fields.
const (
	Default_CAuthenticationRequestMsg_Version = EStreamVersion_k_EStreamVersionNone
)

func (x *CAuthenticationRequestMsg) Reset() {
	*x = CAuthenticationRequestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationRequestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationRequestMsg) ProtoMessage() {}

func (x *CAuthenticationRequestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationRequestMsg.ProtoReflect.Descriptor instead.
func (*CAuthenticationRequestMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{6}
}

func (x *CAuthenticationRequestMsg) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CAuthenticationRequestMsg) GetVersion() EStreamVersion {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_CAuthenticationRequestMsg_Version
}

type CAuthenticationResponseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CAuthenticationResponseMsg_AuthenticationResult `protobuf:"varint,1,opt,name=result,enum=steam.CAuthenticationResponseMsg_AuthenticationResult,def=0" json:"result,omitempty"`
	Version *EStreamVersion                                  `protobuf:"varint,2,opt,name=version,enum=steam.EStreamVersion,def=0" json:"version,omitempty"`
}

// Default values for CAuthenticationResponseMsg fields.
const (
	Default_CAuthenticationResponseMsg_Result  = CAuthenticationResponseMsg_SUCCEEDED
	Default_CAuthenticationResponseMsg_Version = EStreamVersion_k_EStreamVersionNone
)

func (x *CAuthenticationResponseMsg) Reset() {
	*x = CAuthenticationResponseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAuthenticationResponseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAuthenticationResponseMsg) ProtoMessage() {}

func (x *CAuthenticationResponseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAuthenticationResponseMsg.ProtoReflect.Descriptor instead.
func (*CAuthenticationResponseMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{7}
}

func (x *CAuthenticationResponseMsg) GetResult() CAuthenticationResponseMsg_AuthenticationResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CAuthenticationResponseMsg_Result
}

func (x *CAuthenticationResponseMsg) GetVersion() EStreamVersion {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_CAuthenticationResponseMsg_Version
}

type CKeepAliveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CKeepAliveMsg) Reset() {
	*x = CKeepAliveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CKeepAliveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CKeepAliveMsg) ProtoMessage() {}

func (x *CKeepAliveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CKeepAliveMsg.ProtoReflect.Descriptor instead.
func (*CKeepAliveMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{8}
}

type CStartNetworkTestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames           *uint32 `protobuf:"varint,1,opt,name=frames" json:"frames,omitempty"`
	Framerate        *uint32 `protobuf:"varint,2,opt,name=framerate" json:"framerate,omitempty"`
	BitrateKbps      *uint32 `protobuf:"varint,3,opt,name=bitrate_kbps,json=bitrateKbps" json:"bitrate_kbps,omitempty"`
	BurstBitrateKbps *uint32 `protobuf:"varint,4,opt,name=burst_bitrate_kbps,json=burstBitrateKbps" json:"burst_bitrate_kbps,omitempty"`
	BandwidthTest    *bool   `protobuf:"varint,5,opt,name=bandwidth_test,json=bandwidthTest" json:"bandwidth_test,omitempty"`
}

func (x *CStartNetworkTestMsg) Reset() {
	*x = CStartNetworkTestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStartNetworkTestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStartNetworkTestMsg) ProtoMessage() {}

func (x *CStartNetworkTestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStartNetworkTestMsg.ProtoReflect.Descriptor instead.
func (*CStartNetworkTestMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{9}
}

func (x *CStartNetworkTestMsg) GetFrames() uint32 {
	if x != nil && x.Frames != nil {
		return *x.Frames
	}
	return 0
}

func (x *CStartNetworkTestMsg) GetFramerate() uint32 {
	if x != nil && x.Framerate != nil {
		return *x.Framerate
	}
	return 0
}

func (x *CStartNetworkTestMsg) GetBitrateKbps() uint32 {
	if x != nil && x.BitrateKbps != nil {
		return *x.BitrateKbps
	}
	return 0
}

func (x *CStartNetworkTestMsg) GetBurstBitrateKbps() uint32 {
	if x != nil && x.BurstBitrateKbps != nil {
		return *x.BurstBitrateKbps
	}
	return 0
}

func (x *CStartNetworkTestMsg) GetBandwidthTest() bool {
	if x != nil && x.BandwidthTest != nil {
		return *x.BandwidthTest
	}
	return false
}

type CStreamVideoMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width                  *uint32 `protobuf:"varint,1,req,name=width" json:"width,omitempty"`
	Height                 *uint32 `protobuf:"varint,2,req,name=height" json:"height,omitempty"`
	RefreshRate            *uint32 `protobuf:"varint,3,opt,name=refresh_rate,json=refreshRate" json:"refresh_rate,omitempty"`
	RefreshRateNumerator   *uint32 `protobuf:"varint,4,opt,name=refresh_rate_numerator,json=refreshRateNumerator" json:"refresh_rate_numerator,omitempty"`
	RefreshRateDenominator *uint32 `protobuf:"varint,5,opt,name=refresh_rate_denominator,json=refreshRateDenominator" json:"refresh_rate_denominator,omitempty"`
}

func (x *CStreamVideoMode) Reset() {
	*x = CStreamVideoMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamVideoMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamVideoMode) ProtoMessage() {}

func (x *CStreamVideoMode) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamVideoMode.ProtoReflect.Descriptor instead.
func (*CStreamVideoMode) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{10}
}

func (x *CStreamVideoMode) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CStreamVideoMode) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CStreamVideoMode) GetRefreshRate() uint32 {
	if x != nil && x.RefreshRate != nil {
		return *x.RefreshRate
	}
	return 0
}

func (x *CStreamVideoMode) GetRefreshRateNumerator() uint32 {
	if x != nil && x.RefreshRateNumerator != nil {
		return *x.RefreshRateNumerator
	}
	return 0
}

func (x *CStreamVideoMode) GetRefreshRateDenominator() uint32 {
	if x != nil && x.RefreshRateDenominator != nil {
		return *x.RefreshRateDenominator
	}
	return 0
}

type CStreamingClientCaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemInfo                    *string `protobuf:"bytes,1,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	SystemCanSuspend              *bool   `protobuf:"varint,2,opt,name=system_can_suspend,json=systemCanSuspend" json:"system_can_suspend,omitempty"`
	MaximumDecodeBitrateKbps      *int32  `protobuf:"varint,3,opt,name=maximum_decode_bitrate_kbps,json=maximumDecodeBitrateKbps" json:"maximum_decode_bitrate_kbps,omitempty"`
	MaximumBurstBitrateKbps       *int32  `protobuf:"varint,4,opt,name=maximum_burst_bitrate_kbps,json=maximumBurstBitrateKbps" json:"maximum_burst_bitrate_kbps,omitempty"`
	SupportsVideoHevc             *bool   `protobuf:"varint,5,opt,name=supports_video_hevc,json=supportsVideoHevc" json:"supports_video_hevc,omitempty"`
	DisableSteamStore             *bool   `protobuf:"varint,6,opt,name=disable_steam_store,json=disableSteamStore" json:"disable_steam_store,omitempty"`
	DisableClientCursor           *bool   `protobuf:"varint,7,opt,name=disable_client_cursor,json=disableClientCursor" json:"disable_client_cursor,omitempty"`
	DisableIntelHardwareEncoding  *bool   `protobuf:"varint,8,opt,name=disable_intel_hardware_encoding,json=disableIntelHardwareEncoding" json:"disable_intel_hardware_encoding,omitempty"`
	DisableAmdHardwareEncoding    *bool   `protobuf:"varint,9,opt,name=disable_amd_hardware_encoding,json=disableAmdHardwareEncoding" json:"disable_amd_hardware_encoding,omitempty"`
	DisableNvidiaHardwareEncoding *bool   `protobuf:"varint,10,opt,name=disable_nvidia_hardware_encoding,json=disableNvidiaHardwareEncoding" json:"disable_nvidia_hardware_encoding,omitempty"`
	FormFactor                    *int32  `protobuf:"varint,11,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
}

func (x *CStreamingClientCaps) Reset() {
	*x = CStreamingClientCaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingClientCaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingClientCaps) ProtoMessage() {}

func (x *CStreamingClientCaps) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingClientCaps.ProtoReflect.Descriptor instead.
func (*CStreamingClientCaps) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{11}
}

func (x *CStreamingClientCaps) GetSystemInfo() string {
	if x != nil && x.SystemInfo != nil {
		return *x.SystemInfo
	}
	return ""
}

func (x *CStreamingClientCaps) GetSystemCanSuspend() bool {
	if x != nil && x.SystemCanSuspend != nil {
		return *x.SystemCanSuspend
	}
	return false
}

func (x *CStreamingClientCaps) GetMaximumDecodeBitrateKbps() int32 {
	if x != nil && x.MaximumDecodeBitrateKbps != nil {
		return *x.MaximumDecodeBitrateKbps
	}
	return 0
}

func (x *CStreamingClientCaps) GetMaximumBurstBitrateKbps() int32 {
	if x != nil && x.MaximumBurstBitrateKbps != nil {
		return *x.MaximumBurstBitrateKbps
	}
	return 0
}

func (x *CStreamingClientCaps) GetSupportsVideoHevc() bool {
	if x != nil && x.SupportsVideoHevc != nil {
		return *x.SupportsVideoHevc
	}
	return false
}

func (x *CStreamingClientCaps) GetDisableSteamStore() bool {
	if x != nil && x.DisableSteamStore != nil {
		return *x.DisableSteamStore
	}
	return false
}

func (x *CStreamingClientCaps) GetDisableClientCursor() bool {
	if x != nil && x.DisableClientCursor != nil {
		return *x.DisableClientCursor
	}
	return false
}

func (x *CStreamingClientCaps) GetDisableIntelHardwareEncoding() bool {
	if x != nil && x.DisableIntelHardwareEncoding != nil {
		return *x.DisableIntelHardwareEncoding
	}
	return false
}

func (x *CStreamingClientCaps) GetDisableAmdHardwareEncoding() bool {
	if x != nil && x.DisableAmdHardwareEncoding != nil {
		return *x.DisableAmdHardwareEncoding
	}
	return false
}

func (x *CStreamingClientCaps) GetDisableNvidiaHardwareEncoding() bool {
	if x != nil && x.DisableNvidiaHardwareEncoding != nil {
		return *x.DisableNvidiaHardwareEncoding
	}
	return false
}

func (x *CStreamingClientCaps) GetFormFactor() int32 {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return 0
}

type CStreamingClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quality                     *EStreamQualityPreference `protobuf:"varint,1,opt,name=quality,enum=steam.EStreamQualityPreference,def=2" json:"quality,omitempty"`
	MaximumResolutionX          *uint32                   `protobuf:"varint,2,opt,name=maximum_resolution_x,json=maximumResolutionX" json:"maximum_resolution_x,omitempty"`
	MaximumResolutionY          *uint32                   `protobuf:"varint,3,opt,name=maximum_resolution_y,json=maximumResolutionY" json:"maximum_resolution_y,omitempty"`
	MaximumFramerateNumerator   *uint32                   `protobuf:"varint,4,opt,name=maximum_framerate_numerator,json=maximumFramerateNumerator" json:"maximum_framerate_numerator,omitempty"`
	MaximumFramerateDenominator *uint32                   `protobuf:"varint,5,opt,name=maximum_framerate_denominator,json=maximumFramerateDenominator" json:"maximum_framerate_denominator,omitempty"`
	MaximumBitrateKbps          *int32                    `protobuf:"varint,6,opt,name=maximum_bitrate_kbps,json=maximumBitrateKbps,def=-1" json:"maximum_bitrate_kbps,omitempty"`
	EnableHardwareDecoding      *bool                     `protobuf:"varint,7,opt,name=enable_hardware_decoding,json=enableHardwareDecoding,def=1" json:"enable_hardware_decoding,omitempty"`
	EnablePerformanceOverlay    *bool                     `protobuf:"varint,8,opt,name=enable_performance_overlay,json=enablePerformanceOverlay,def=0" json:"enable_performance_overlay,omitempty"`
	EnableVideoStreaming        *bool                     `protobuf:"varint,9,opt,name=enable_video_streaming,json=enableVideoStreaming,def=1" json:"enable_video_streaming,omitempty"`
	EnableAudioStreaming        *bool                     `protobuf:"varint,10,opt,name=enable_audio_streaming,json=enableAudioStreaming,def=1" json:"enable_audio_streaming,omitempty"`
	EnableInputStreaming        *bool                     `protobuf:"varint,11,opt,name=enable_input_streaming,json=enableInputStreaming,def=1" json:"enable_input_streaming,omitempty"`
	AudioChannels               *int32                    `protobuf:"varint,12,opt,name=audio_channels,json=audioChannels,def=2" json:"audio_channels,omitempty"`
	EnableVideoHevc             *bool                     `protobuf:"varint,13,opt,name=enable_video_hevc,json=enableVideoHevc,def=0" json:"enable_video_hevc,omitempty"`
	EnablePerformanceIcons      *bool                     `protobuf:"varint,14,opt,name=enable_performance_icons,json=enablePerformanceIcons,def=1" json:"enable_performance_icons,omitempty"`
	EnableMicrophoneStreaming   *bool                     `protobuf:"varint,15,opt,name=enable_microphone_streaming,json=enableMicrophoneStreaming,def=0" json:"enable_microphone_streaming,omitempty"`
	ControllerOverlayHotkey     *string                   `protobuf:"bytes,16,opt,name=controller_overlay_hotkey,json=controllerOverlayHotkey" json:"controller_overlay_hotkey,omitempty"`
	EnableTouchController       *bool                     `protobuf:"varint,17,opt,name=enable_touch_controller,json=enableTouchController,def=0" json:"enable_touch_controller,omitempty"`
}

// Default values for CStreamingClientConfig fields.
const (
	Default_CStreamingClientConfig_Quality                   = EStreamQualityPreference_k_EStreamQualityBalanced
	Default_CStreamingClientConfig_MaximumBitrateKbps        = int32(-1)
	Default_CStreamingClientConfig_EnableHardwareDecoding    = bool(true)
	Default_CStreamingClientConfig_EnablePerformanceOverlay  = bool(false)
	Default_CStreamingClientConfig_EnableVideoStreaming      = bool(true)
	Default_CStreamingClientConfig_EnableAudioStreaming      = bool(true)
	Default_CStreamingClientConfig_EnableInputStreaming      = bool(true)
	Default_CStreamingClientConfig_AudioChannels             = int32(2)
	Default_CStreamingClientConfig_EnableVideoHevc           = bool(false)
	Default_CStreamingClientConfig_EnablePerformanceIcons    = bool(true)
	Default_CStreamingClientConfig_EnableMicrophoneStreaming = bool(false)
	Default_CStreamingClientConfig_EnableTouchController     = bool(false)
)

func (x *CStreamingClientConfig) Reset() {
	*x = CStreamingClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingClientConfig) ProtoMessage() {}

func (x *CStreamingClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingClientConfig.ProtoReflect.Descriptor instead.
func (*CStreamingClientConfig) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{12}
}

func (x *CStreamingClientConfig) GetQuality() EStreamQualityPreference {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return Default_CStreamingClientConfig_Quality
}

func (x *CStreamingClientConfig) GetMaximumResolutionX() uint32 {
	if x != nil && x.MaximumResolutionX != nil {
		return *x.MaximumResolutionX
	}
	return 0
}

func (x *CStreamingClientConfig) GetMaximumResolutionY() uint32 {
	if x != nil && x.MaximumResolutionY != nil {
		return *x.MaximumResolutionY
	}
	return 0
}

func (x *CStreamingClientConfig) GetMaximumFramerateNumerator() uint32 {
	if x != nil && x.MaximumFramerateNumerator != nil {
		return *x.MaximumFramerateNumerator
	}
	return 0
}

func (x *CStreamingClientConfig) GetMaximumFramerateDenominator() uint32 {
	if x != nil && x.MaximumFramerateDenominator != nil {
		return *x.MaximumFramerateDenominator
	}
	return 0
}

func (x *CStreamingClientConfig) GetMaximumBitrateKbps() int32 {
	if x != nil && x.MaximumBitrateKbps != nil {
		return *x.MaximumBitrateKbps
	}
	return Default_CStreamingClientConfig_MaximumBitrateKbps
}

func (x *CStreamingClientConfig) GetEnableHardwareDecoding() bool {
	if x != nil && x.EnableHardwareDecoding != nil {
		return *x.EnableHardwareDecoding
	}
	return Default_CStreamingClientConfig_EnableHardwareDecoding
}

func (x *CStreamingClientConfig) GetEnablePerformanceOverlay() bool {
	if x != nil && x.EnablePerformanceOverlay != nil {
		return *x.EnablePerformanceOverlay
	}
	return Default_CStreamingClientConfig_EnablePerformanceOverlay
}

func (x *CStreamingClientConfig) GetEnableVideoStreaming() bool {
	if x != nil && x.EnableVideoStreaming != nil {
		return *x.EnableVideoStreaming
	}
	return Default_CStreamingClientConfig_EnableVideoStreaming
}

func (x *CStreamingClientConfig) GetEnableAudioStreaming() bool {
	if x != nil && x.EnableAudioStreaming != nil {
		return *x.EnableAudioStreaming
	}
	return Default_CStreamingClientConfig_EnableAudioStreaming
}

func (x *CStreamingClientConfig) GetEnableInputStreaming() bool {
	if x != nil && x.EnableInputStreaming != nil {
		return *x.EnableInputStreaming
	}
	return Default_CStreamingClientConfig_EnableInputStreaming
}

func (x *CStreamingClientConfig) GetAudioChannels() int32 {
	if x != nil && x.AudioChannels != nil {
		return *x.AudioChannels
	}
	return Default_CStreamingClientConfig_AudioChannels
}

func (x *CStreamingClientConfig) GetEnableVideoHevc() bool {
	if x != nil && x.EnableVideoHevc != nil {
		return *x.EnableVideoHevc
	}
	return Default_CStreamingClientConfig_EnableVideoHevc
}

func (x *CStreamingClientConfig) GetEnablePerformanceIcons() bool {
	if x != nil && x.EnablePerformanceIcons != nil {
		return *x.EnablePerformanceIcons
	}
	return Default_CStreamingClientConfig_EnablePerformanceIcons
}

func (x *CStreamingClientConfig) GetEnableMicrophoneStreaming() bool {
	if x != nil && x.EnableMicrophoneStreaming != nil {
		return *x.EnableMicrophoneStreaming
	}
	return Default_CStreamingClientConfig_EnableMicrophoneStreaming
}

func (x *CStreamingClientConfig) GetControllerOverlayHotkey() string {
	if x != nil && x.ControllerOverlayHotkey != nil {
		return *x.ControllerOverlayHotkey
	}
	return ""
}

func (x *CStreamingClientConfig) GetEnableTouchController() bool {
	if x != nil && x.EnableTouchController != nil {
		return *x.EnableTouchController
	}
	return Default_CStreamingClientConfig_EnableTouchController
}

type CStreamingServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeDesktopResolution      *bool                           `protobuf:"varint,1,opt,name=change_desktop_resolution,json=changeDesktopResolution" json:"change_desktop_resolution,omitempty"`
	DynamicallyAdjustResolution  *bool                           `protobuf:"varint,2,opt,name=dynamically_adjust_resolution,json=dynamicallyAdjustResolution" json:"dynamically_adjust_resolution,omitempty"`
	EnableCaptureNvfbc           *bool                           `protobuf:"varint,3,opt,name=enable_capture_nvfbc,json=enableCaptureNvfbc" json:"enable_capture_nvfbc,omitempty"`
	EnableHardwareEncodingNvidia *bool                           `protobuf:"varint,4,opt,name=enable_hardware_encoding_nvidia,json=enableHardwareEncodingNvidia" json:"enable_hardware_encoding_nvidia,omitempty"`
	EnableHardwareEncodingAmd    *bool                           `protobuf:"varint,5,opt,name=enable_hardware_encoding_amd,json=enableHardwareEncodingAmd" json:"enable_hardware_encoding_amd,omitempty"`
	EnableHardwareEncodingIntel  *bool                           `protobuf:"varint,6,opt,name=enable_hardware_encoding_intel,json=enableHardwareEncodingIntel" json:"enable_hardware_encoding_intel,omitempty"`
	SoftwareEncodingThreads      *int32                          `protobuf:"varint,7,opt,name=software_encoding_threads,json=softwareEncodingThreads" json:"software_encoding_threads,omitempty"`
	EnableTrafficPriority        *bool                           `protobuf:"varint,8,opt,name=enable_traffic_priority,json=enableTrafficPriority" json:"enable_traffic_priority,omitempty"`
	HostPlayAudio                *EStreamHostPlayAudioPreference `protobuf:"varint,9,opt,name=host_play_audio,json=hostPlayAudio,enum=steam.EStreamHostPlayAudioPreference,def=0" json:"host_play_audio,omitempty"`
}

// Default values for CStreamingServerConfig fields.
const (
	Default_CStreamingServerConfig_HostPlayAudio = EStreamHostPlayAudioPreference_k_EStreamHostPlayAudioDefault
)

func (x *CStreamingServerConfig) Reset() {
	*x = CStreamingServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingServerConfig) ProtoMessage() {}

func (x *CStreamingServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingServerConfig.ProtoReflect.Descriptor instead.
func (*CStreamingServerConfig) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{13}
}

func (x *CStreamingServerConfig) GetChangeDesktopResolution() bool {
	if x != nil && x.ChangeDesktopResolution != nil {
		return *x.ChangeDesktopResolution
	}
	return false
}

func (x *CStreamingServerConfig) GetDynamicallyAdjustResolution() bool {
	if x != nil && x.DynamicallyAdjustResolution != nil {
		return *x.DynamicallyAdjustResolution
	}
	return false
}

func (x *CStreamingServerConfig) GetEnableCaptureNvfbc() bool {
	if x != nil && x.EnableCaptureNvfbc != nil {
		return *x.EnableCaptureNvfbc
	}
	return false
}

func (x *CStreamingServerConfig) GetEnableHardwareEncodingNvidia() bool {
	if x != nil && x.EnableHardwareEncodingNvidia != nil {
		return *x.EnableHardwareEncodingNvidia
	}
	return false
}

func (x *CStreamingServerConfig) GetEnableHardwareEncodingAmd() bool {
	if x != nil && x.EnableHardwareEncodingAmd != nil {
		return *x.EnableHardwareEncodingAmd
	}
	return false
}

func (x *CStreamingServerConfig) GetEnableHardwareEncodingIntel() bool {
	if x != nil && x.EnableHardwareEncodingIntel != nil {
		return *x.EnableHardwareEncodingIntel
	}
	return false
}

func (x *CStreamingServerConfig) GetSoftwareEncodingThreads() int32 {
	if x != nil && x.SoftwareEncodingThreads != nil {
		return *x.SoftwareEncodingThreads
	}
	return 0
}

func (x *CStreamingServerConfig) GetEnableTrafficPriority() bool {
	if x != nil && x.EnableTrafficPriority != nil {
		return *x.EnableTrafficPriority
	}
	return false
}

func (x *CStreamingServerConfig) GetHostPlayAudio() EStreamHostPlayAudioPreference {
	if x != nil && x.HostPlayAudio != nil {
		return *x.HostPlayAudio
	}
	return Default_CStreamingServerConfig_HostPlayAudio
}

type CNegotiatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReliableData        *bool               `protobuf:"varint,1,opt,name=reliable_data,json=reliableData" json:"reliable_data,omitempty"`
	SelectedAudioCodec  *EStreamAudioCodec  `protobuf:"varint,2,opt,name=selected_audio_codec,json=selectedAudioCodec,enum=steam.EStreamAudioCodec,def=0" json:"selected_audio_codec,omitempty"`
	SelectedVideoCodec  *EStreamVideoCodec  `protobuf:"varint,3,opt,name=selected_video_codec,json=selectedVideoCodec,enum=steam.EStreamVideoCodec,def=0" json:"selected_video_codec,omitempty"`
	AvailableVideoModes []*CStreamVideoMode `protobuf:"bytes,4,rep,name=available_video_modes,json=availableVideoModes" json:"available_video_modes,omitempty"`
	EnableRemoteHid     *bool               `protobuf:"varint,5,opt,name=enable_remote_hid,json=enableRemoteHid" json:"enable_remote_hid,omitempty"`
	EnableTouchInput    *bool               `protobuf:"varint,6,opt,name=enable_touch_input,json=enableTouchInput" json:"enable_touch_input,omitempty"`
}

// Default values for CNegotiatedConfig fields.
const (
	Default_CNegotiatedConfig_SelectedAudioCodec = EStreamAudioCodec_k_EStreamAudioCodecNone
	Default_CNegotiatedConfig_SelectedVideoCodec = EStreamVideoCodec_k_EStreamVideoCodecNone
)

func (x *CNegotiatedConfig) Reset() {
	*x = CNegotiatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNegotiatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNegotiatedConfig) ProtoMessage() {}

func (x *CNegotiatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNegotiatedConfig.ProtoReflect.Descriptor instead.
func (*CNegotiatedConfig) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{14}
}

func (x *CNegotiatedConfig) GetReliableData() bool {
	if x != nil && x.ReliableData != nil {
		return *x.ReliableData
	}
	return false
}

func (x *CNegotiatedConfig) GetSelectedAudioCodec() EStreamAudioCodec {
	if x != nil && x.SelectedAudioCodec != nil {
		return *x.SelectedAudioCodec
	}
	return Default_CNegotiatedConfig_SelectedAudioCodec
}

func (x *CNegotiatedConfig) GetSelectedVideoCodec() EStreamVideoCodec {
	if x != nil && x.SelectedVideoCodec != nil {
		return *x.SelectedVideoCodec
	}
	return Default_CNegotiatedConfig_SelectedVideoCodec
}

func (x *CNegotiatedConfig) GetAvailableVideoModes() []*CStreamVideoMode {
	if x != nil {
		return x.AvailableVideoModes
	}
	return nil
}

func (x *CNegotiatedConfig) GetEnableRemoteHid() bool {
	if x != nil && x.EnableRemoteHid != nil {
		return *x.EnableRemoteHid
	}
	return false
}

func (x *CNegotiatedConfig) GetEnableTouchInput() bool {
	if x != nil && x.EnableTouchInput != nil {
		return *x.EnableTouchInput
	}
	return false
}

type CNegotiationInitMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReliableData         *bool               `protobuf:"varint,1,opt,name=reliable_data,json=reliableData" json:"reliable_data,omitempty"`
	SupportedAudioCodecs []EStreamAudioCodec `protobuf:"varint,2,rep,name=supported_audio_codecs,json=supportedAudioCodecs,enum=steam.EStreamAudioCodec" json:"supported_audio_codecs,omitempty"`
	SupportedVideoCodecs []EStreamVideoCodec `protobuf:"varint,3,rep,name=supported_video_codecs,json=supportedVideoCodecs,enum=steam.EStreamVideoCodec" json:"supported_video_codecs,omitempty"`
	SupportsRemoteHid    *bool               `protobuf:"varint,4,opt,name=supports_remote_hid,json=supportsRemoteHid" json:"supports_remote_hid,omitempty"`
	SupportsTouchInput   *bool               `protobuf:"varint,5,opt,name=supports_touch_input,json=supportsTouchInput" json:"supports_touch_input,omitempty"`
}

func (x *CNegotiationInitMsg) Reset() {
	*x = CNegotiationInitMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNegotiationInitMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNegotiationInitMsg) ProtoMessage() {}

func (x *CNegotiationInitMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNegotiationInitMsg.ProtoReflect.Descriptor instead.
func (*CNegotiationInitMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{15}
}

func (x *CNegotiationInitMsg) GetReliableData() bool {
	if x != nil && x.ReliableData != nil {
		return *x.ReliableData
	}
	return false
}

func (x *CNegotiationInitMsg) GetSupportedAudioCodecs() []EStreamAudioCodec {
	if x != nil {
		return x.SupportedAudioCodecs
	}
	return nil
}

func (x *CNegotiationInitMsg) GetSupportedVideoCodecs() []EStreamVideoCodec {
	if x != nil {
		return x.SupportedVideoCodecs
	}
	return nil
}

func (x *CNegotiationInitMsg) GetSupportsRemoteHid() bool {
	if x != nil && x.SupportsRemoteHid != nil {
		return *x.SupportsRemoteHid
	}
	return false
}

func (x *CNegotiationInitMsg) GetSupportsTouchInput() bool {
	if x != nil && x.SupportsTouchInput != nil {
		return *x.SupportsTouchInput
	}
	return false
}

type CNegotiationSetConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config                *CNegotiatedConfig      `protobuf:"bytes,1,req,name=config" json:"config,omitempty"`
	StreamingClientConfig *CStreamingClientConfig `protobuf:"bytes,2,opt,name=streaming_client_config,json=streamingClientConfig" json:"streaming_client_config,omitempty"`
	StreamingClientCaps   *CStreamingClientCaps   `protobuf:"bytes,3,opt,name=streaming_client_caps,json=streamingClientCaps" json:"streaming_client_caps,omitempty"`
}

func (x *CNegotiationSetConfigMsg) Reset() {
	*x = CNegotiationSetConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNegotiationSetConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNegotiationSetConfigMsg) ProtoMessage() {}

func (x *CNegotiationSetConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNegotiationSetConfigMsg.ProtoReflect.Descriptor instead.
func (*CNegotiationSetConfigMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{16}
}

func (x *CNegotiationSetConfigMsg) GetConfig() *CNegotiatedConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CNegotiationSetConfigMsg) GetStreamingClientConfig() *CStreamingClientConfig {
	if x != nil {
		return x.StreamingClientConfig
	}
	return nil
}

func (x *CNegotiationSetConfigMsg) GetStreamingClientCaps() *CStreamingClientCaps {
	if x != nil {
		return x.StreamingClientCaps
	}
	return nil
}

type CNegotiationCompleteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CNegotiationCompleteMsg) Reset() {
	*x = CNegotiationCompleteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNegotiationCompleteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNegotiationCompleteMsg) ProtoMessage() {}

func (x *CNegotiationCompleteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNegotiationCompleteMsg.ProtoReflect.Descriptor instead.
func (*CNegotiationCompleteMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{17}
}

type CStartAudioDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   *uint32            `protobuf:"varint,2,req,name=channel" json:"channel,omitempty"`
	Codec     *EStreamAudioCodec `protobuf:"varint,3,opt,name=codec,enum=steam.EStreamAudioCodec,def=0" json:"codec,omitempty"`
	CodecData []byte             `protobuf:"bytes,4,opt,name=codec_data,json=codecData" json:"codec_data,omitempty"`
	Frequency *uint32            `protobuf:"varint,5,opt,name=frequency" json:"frequency,omitempty"`
	Channels  *uint32            `protobuf:"varint,6,opt,name=channels" json:"channels,omitempty"`
}

// Default values for CStartAudioDataMsg fields.
const (
	Default_CStartAudioDataMsg_Codec = EStreamAudioCodec_k_EStreamAudioCodecNone
)

func (x *CStartAudioDataMsg) Reset() {
	*x = CStartAudioDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStartAudioDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStartAudioDataMsg) ProtoMessage() {}

func (x *CStartAudioDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStartAudioDataMsg.ProtoReflect.Descriptor instead.
func (*CStartAudioDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{18}
}

func (x *CStartAudioDataMsg) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CStartAudioDataMsg) GetCodec() EStreamAudioCodec {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return Default_CStartAudioDataMsg_Codec
}

func (x *CStartAudioDataMsg) GetCodecData() []byte {
	if x != nil {
		return x.CodecData
	}
	return nil
}

func (x *CStartAudioDataMsg) GetFrequency() uint32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *CStartAudioDataMsg) GetChannels() uint32 {
	if x != nil && x.Channels != nil {
		return *x.Channels
	}
	return 0
}

type CStopAudioDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStopAudioDataMsg) Reset() {
	*x = CStopAudioDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStopAudioDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStopAudioDataMsg) ProtoMessage() {}

func (x *CStopAudioDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStopAudioDataMsg.ProtoReflect.Descriptor instead.
func (*CStopAudioDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{19}
}

type CStartVideoDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   *uint32            `protobuf:"varint,1,req,name=channel" json:"channel,omitempty"`
	Codec     *EStreamVideoCodec `protobuf:"varint,2,opt,name=codec,enum=steam.EStreamVideoCodec,def=0" json:"codec,omitempty"`
	CodecData []byte             `protobuf:"bytes,3,opt,name=codec_data,json=codecData" json:"codec_data,omitempty"`
	Width     *uint32            `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height    *uint32            `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
}

// Default values for CStartVideoDataMsg fields.
const (
	Default_CStartVideoDataMsg_Codec = EStreamVideoCodec_k_EStreamVideoCodecNone
)

func (x *CStartVideoDataMsg) Reset() {
	*x = CStartVideoDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStartVideoDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStartVideoDataMsg) ProtoMessage() {}

func (x *CStartVideoDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStartVideoDataMsg.ProtoReflect.Descriptor instead.
func (*CStartVideoDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{20}
}

func (x *CStartVideoDataMsg) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *CStartVideoDataMsg) GetCodec() EStreamVideoCodec {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return Default_CStartVideoDataMsg_Codec
}

func (x *CStartVideoDataMsg) GetCodecData() []byte {
	if x != nil {
		return x.CodecData
	}
	return nil
}

func (x *CStartVideoDataMsg) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CStartVideoDataMsg) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CStopVideoDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStopVideoDataMsg) Reset() {
	*x = CStopVideoDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStopVideoDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStopVideoDataMsg) ProtoMessage() {}

func (x *CStopVideoDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStopVideoDataMsg.ProtoReflect.Descriptor instead.
func (*CStopVideoDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{21}
}

type CRecordedInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *EStreamControlMessage `protobuf:"varint,1,opt,name=type,enum=steam.EStreamControlMessage,def=1" json:"type,omitempty"`
	Timestamp *uint32                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// Types that are assignable to Data:
	//	*CRecordedInput_FingerDown
	//	*CRecordedInput_FingerMotion
	//	*CRecordedInput_FingerUp
	//	*CRecordedInput_MouseMotion
	//	*CRecordedInput_MouseWheel
	//	*CRecordedInput_MouseDown
	//	*CRecordedInput_MouseUp
	//	*CRecordedInput_KeyDown
	//	*CRecordedInput_KeyUp
	//	*CRecordedInput_Text
	//	*CRecordedInput_Hid
	Data isCRecordedInput_Data `protobuf_oneof:"data"`
}

// Default values for CRecordedInput fields.
const (
	Default_CRecordedInput_Type = EStreamControlMessage_k_EStreamControlAuthenticationRequest
)

func (x *CRecordedInput) Reset() {
	*x = CRecordedInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRecordedInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRecordedInput) ProtoMessage() {}

func (x *CRecordedInput) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRecordedInput.ProtoReflect.Descriptor instead.
func (*CRecordedInput) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{22}
}

func (x *CRecordedInput) GetType() EStreamControlMessage {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CRecordedInput_Type
}

func (x *CRecordedInput) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (m *CRecordedInput) GetData() isCRecordedInput_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *CRecordedInput) GetFingerDown() *CInputTouchFingerDownMsg {
	if x, ok := x.GetData().(*CRecordedInput_FingerDown); ok {
		return x.FingerDown
	}
	return nil
}

func (x *CRecordedInput) GetFingerMotion() *CInputTouchFingerMotionMsg {
	if x, ok := x.GetData().(*CRecordedInput_FingerMotion); ok {
		return x.FingerMotion
	}
	return nil
}

func (x *CRecordedInput) GetFingerUp() *CInputTouchFingerUpMsg {
	if x, ok := x.GetData().(*CRecordedInput_FingerUp); ok {
		return x.FingerUp
	}
	return nil
}

func (x *CRecordedInput) GetMouseMotion() *CInputMouseMotionMsg {
	if x, ok := x.GetData().(*CRecordedInput_MouseMotion); ok {
		return x.MouseMotion
	}
	return nil
}

func (x *CRecordedInput) GetMouseWheel() *CInputMouseWheelMsg {
	if x, ok := x.GetData().(*CRecordedInput_MouseWheel); ok {
		return x.MouseWheel
	}
	return nil
}

func (x *CRecordedInput) GetMouseDown() *CInputMouseDownMsg {
	if x, ok := x.GetData().(*CRecordedInput_MouseDown); ok {
		return x.MouseDown
	}
	return nil
}

func (x *CRecordedInput) GetMouseUp() *CInputMouseUpMsg {
	if x, ok := x.GetData().(*CRecordedInput_MouseUp); ok {
		return x.MouseUp
	}
	return nil
}

func (x *CRecordedInput) GetKeyDown() *CInputKeyDownMsg {
	if x, ok := x.GetData().(*CRecordedInput_KeyDown); ok {
		return x.KeyDown
	}
	return nil
}

func (x *CRecordedInput) GetKeyUp() *CInputKeyUpMsg {
	if x, ok := x.GetData().(*CRecordedInput_KeyUp); ok {
		return x.KeyUp
	}
	return nil
}

func (x *CRecordedInput) GetText() *CInputTextMsg {
	if x, ok := x.GetData().(*CRecordedInput_Text); ok {
		return x.Text
	}
	return nil
}

func (x *CRecordedInput) GetHid() *CRemoteHIDMsg {
	if x, ok := x.GetData().(*CRecordedInput_Hid); ok {
		return x.Hid
	}
	return nil
}

type isCRecordedInput_Data interface {
	isCRecordedInput_Data()
}

type CRecordedInput_FingerDown struct {
	FingerDown *CInputTouchFingerDownMsg `protobuf:"bytes,3,opt,name=finger_down,json=fingerDown,oneof"`
}

type CRecordedInput_FingerMotion struct {
	FingerMotion *CInputTouchFingerMotionMsg `protobuf:"bytes,4,opt,name=finger_motion,json=fingerMotion,oneof"`
}

type CRecordedInput_FingerUp struct {
	FingerUp *CInputTouchFingerUpMsg `protobuf:"bytes,5,opt,name=finger_up,json=fingerUp,oneof"`
}

type CRecordedInput_MouseMotion struct {
	MouseMotion *CInputMouseMotionMsg `protobuf:"bytes,6,opt,name=mouse_motion,json=mouseMotion,oneof"`
}

type CRecordedInput_MouseWheel struct {
	MouseWheel *CInputMouseWheelMsg `protobuf:"bytes,7,opt,name=mouse_wheel,json=mouseWheel,oneof"`
}

type CRecordedInput_MouseDown struct {
	MouseDown *CInputMouseDownMsg `protobuf:"bytes,8,opt,name=mouse_down,json=mouseDown,oneof"`
}

type CRecordedInput_MouseUp struct {
	MouseUp *CInputMouseUpMsg `protobuf:"bytes,9,opt,name=mouse_up,json=mouseUp,oneof"`
}

type CRecordedInput_KeyDown struct {
	KeyDown *CInputKeyDownMsg `protobuf:"bytes,10,opt,name=key_down,json=keyDown,oneof"`
}

type CRecordedInput_KeyUp struct {
	KeyUp *CInputKeyUpMsg `protobuf:"bytes,11,opt,name=key_up,json=keyUp,oneof"`
}

type CRecordedInput_Text struct {
	Text *CInputTextMsg `protobuf:"bytes,12,opt,name=text,oneof"`
}

type CRecordedInput_Hid struct {
	Hid *CRemoteHIDMsg `protobuf:"bytes,13,opt,name=hid,oneof"`
}

func (*CRecordedInput_FingerDown) isCRecordedInput_Data() {}

func (*CRecordedInput_FingerMotion) isCRecordedInput_Data() {}

func (*CRecordedInput_FingerUp) isCRecordedInput_Data() {}

func (*CRecordedInput_MouseMotion) isCRecordedInput_Data() {}

func (*CRecordedInput_MouseWheel) isCRecordedInput_Data() {}

func (*CRecordedInput_MouseDown) isCRecordedInput_Data() {}

func (*CRecordedInput_MouseUp) isCRecordedInput_Data() {}

func (*CRecordedInput_KeyDown) isCRecordedInput_Data() {}

func (*CRecordedInput_KeyUp) isCRecordedInput_Data() {}

func (*CRecordedInput_Text) isCRecordedInput_Data() {}

func (*CRecordedInput_Hid) isCRecordedInput_Data() {}

type CRecordedInputStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CRecordedInput `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CRecordedInputStream) Reset() {
	*x = CRecordedInputStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRecordedInputStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRecordedInputStream) ProtoMessage() {}

func (x *CRecordedInputStream) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRecordedInputStream.ProtoReflect.Descriptor instead.
func (*CRecordedInputStream) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{23}
}

func (x *CRecordedInputStream) GetEntries() []*CRecordedInput {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CInputLatencyTestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32 `protobuf:"varint,1,req,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Color     *uint32 `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
}

func (x *CInputLatencyTestMsg) Reset() {
	*x = CInputLatencyTestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputLatencyTestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputLatencyTestMsg) ProtoMessage() {}

func (x *CInputLatencyTestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputLatencyTestMsg.ProtoReflect.Descriptor instead.
func (*CInputLatencyTestMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{24}
}

func (x *CInputLatencyTestMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputLatencyTestMsg) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

type CInputTouchFingerDownMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark   *uint32  `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Fingerid    *uint64  `protobuf:"varint,2,opt,name=fingerid" json:"fingerid,omitempty"`
	XNormalized *float32 `protobuf:"fixed32,3,opt,name=x_normalized,json=xNormalized" json:"x_normalized,omitempty"`
	YNormalized *float32 `protobuf:"fixed32,4,opt,name=y_normalized,json=yNormalized" json:"y_normalized,omitempty"`
}

func (x *CInputTouchFingerDownMsg) Reset() {
	*x = CInputTouchFingerDownMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputTouchFingerDownMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputTouchFingerDownMsg) ProtoMessage() {}

func (x *CInputTouchFingerDownMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputTouchFingerDownMsg.ProtoReflect.Descriptor instead.
func (*CInputTouchFingerDownMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{25}
}

func (x *CInputTouchFingerDownMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputTouchFingerDownMsg) GetFingerid() uint64 {
	if x != nil && x.Fingerid != nil {
		return *x.Fingerid
	}
	return 0
}

func (x *CInputTouchFingerDownMsg) GetXNormalized() float32 {
	if x != nil && x.XNormalized != nil {
		return *x.XNormalized
	}
	return 0
}

func (x *CInputTouchFingerDownMsg) GetYNormalized() float32 {
	if x != nil && x.YNormalized != nil {
		return *x.YNormalized
	}
	return 0
}

type CInputTouchFingerMotionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark   *uint32  `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Fingerid    *uint64  `protobuf:"varint,2,opt,name=fingerid" json:"fingerid,omitempty"`
	XNormalized *float32 `protobuf:"fixed32,3,opt,name=x_normalized,json=xNormalized" json:"x_normalized,omitempty"`
	YNormalized *float32 `protobuf:"fixed32,4,opt,name=y_normalized,json=yNormalized" json:"y_normalized,omitempty"`
}

func (x *CInputTouchFingerMotionMsg) Reset() {
	*x = CInputTouchFingerMotionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputTouchFingerMotionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputTouchFingerMotionMsg) ProtoMessage() {}

func (x *CInputTouchFingerMotionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputTouchFingerMotionMsg.ProtoReflect.Descriptor instead.
func (*CInputTouchFingerMotionMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{26}
}

func (x *CInputTouchFingerMotionMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputTouchFingerMotionMsg) GetFingerid() uint64 {
	if x != nil && x.Fingerid != nil {
		return *x.Fingerid
	}
	return 0
}

func (x *CInputTouchFingerMotionMsg) GetXNormalized() float32 {
	if x != nil && x.XNormalized != nil {
		return *x.XNormalized
	}
	return 0
}

func (x *CInputTouchFingerMotionMsg) GetYNormalized() float32 {
	if x != nil && x.YNormalized != nil {
		return *x.YNormalized
	}
	return 0
}

type CInputTouchFingerUpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark   *uint32  `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Fingerid    *uint64  `protobuf:"varint,2,opt,name=fingerid" json:"fingerid,omitempty"`
	XNormalized *float32 `protobuf:"fixed32,3,opt,name=x_normalized,json=xNormalized" json:"x_normalized,omitempty"`
	YNormalized *float32 `protobuf:"fixed32,4,opt,name=y_normalized,json=yNormalized" json:"y_normalized,omitempty"`
}

func (x *CInputTouchFingerUpMsg) Reset() {
	*x = CInputTouchFingerUpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputTouchFingerUpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputTouchFingerUpMsg) ProtoMessage() {}

func (x *CInputTouchFingerUpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputTouchFingerUpMsg.ProtoReflect.Descriptor instead.
func (*CInputTouchFingerUpMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{27}
}

func (x *CInputTouchFingerUpMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputTouchFingerUpMsg) GetFingerid() uint64 {
	if x != nil && x.Fingerid != nil {
		return *x.Fingerid
	}
	return 0
}

func (x *CInputTouchFingerUpMsg) GetXNormalized() float32 {
	if x != nil && x.XNormalized != nil {
		return *x.XNormalized
	}
	return 0
}

func (x *CInputTouchFingerUpMsg) GetYNormalized() float32 {
	if x != nil && x.YNormalized != nil {
		return *x.YNormalized
	}
	return 0
}

type CInputMouseMotionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark   *uint32  `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	XNormalized *float32 `protobuf:"fixed32,2,opt,name=x_normalized,json=xNormalized" json:"x_normalized,omitempty"`
	YNormalized *float32 `protobuf:"fixed32,3,opt,name=y_normalized,json=yNormalized" json:"y_normalized,omitempty"`
	Dx          *int32   `protobuf:"varint,4,opt,name=dx" json:"dx,omitempty"`
	Dy          *int32   `protobuf:"varint,5,opt,name=dy" json:"dy,omitempty"`
}

func (x *CInputMouseMotionMsg) Reset() {
	*x = CInputMouseMotionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputMouseMotionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputMouseMotionMsg) ProtoMessage() {}

func (x *CInputMouseMotionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputMouseMotionMsg.ProtoReflect.Descriptor instead.
func (*CInputMouseMotionMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{28}
}

func (x *CInputMouseMotionMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputMouseMotionMsg) GetXNormalized() float32 {
	if x != nil && x.XNormalized != nil {
		return *x.XNormalized
	}
	return 0
}

func (x *CInputMouseMotionMsg) GetYNormalized() float32 {
	if x != nil && x.YNormalized != nil {
		return *x.YNormalized
	}
	return 0
}

func (x *CInputMouseMotionMsg) GetDx() int32 {
	if x != nil && x.Dx != nil {
		return *x.Dx
	}
	return 0
}

func (x *CInputMouseMotionMsg) GetDy() int32 {
	if x != nil && x.Dy != nil {
		return *x.Dy
	}
	return 0
}

type CInputMouseWheelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32                     `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Direction *EStreamMouseWheelDirection `protobuf:"varint,2,req,name=direction,enum=steam.EStreamMouseWheelDirection,def=120" json:"direction,omitempty"`
}

// Default values for CInputMouseWheelMsg fields.
const (
	Default_CInputMouseWheelMsg_Direction = EStreamMouseWheelDirection_k_EStreamMouseWheelUp
)

func (x *CInputMouseWheelMsg) Reset() {
	*x = CInputMouseWheelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputMouseWheelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputMouseWheelMsg) ProtoMessage() {}

func (x *CInputMouseWheelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputMouseWheelMsg.ProtoReflect.Descriptor instead.
func (*CInputMouseWheelMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{29}
}

func (x *CInputMouseWheelMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputMouseWheelMsg) GetDirection() EStreamMouseWheelDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Default_CInputMouseWheelMsg_Direction
}

type CInputMouseDownMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32             `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Button    *EStreamMouseButton `protobuf:"varint,2,req,name=button,enum=steam.EStreamMouseButton,def=1" json:"button,omitempty"`
}

// Default values for CInputMouseDownMsg fields.
const (
	Default_CInputMouseDownMsg_Button = EStreamMouseButton_k_EStreamMouseButtonLeft
)

func (x *CInputMouseDownMsg) Reset() {
	*x = CInputMouseDownMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputMouseDownMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputMouseDownMsg) ProtoMessage() {}

func (x *CInputMouseDownMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputMouseDownMsg.ProtoReflect.Descriptor instead.
func (*CInputMouseDownMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{30}
}

func (x *CInputMouseDownMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputMouseDownMsg) GetButton() EStreamMouseButton {
	if x != nil && x.Button != nil {
		return *x.Button
	}
	return Default_CInputMouseDownMsg_Button
}

type CInputMouseUpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32             `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Button    *EStreamMouseButton `protobuf:"varint,2,req,name=button,enum=steam.EStreamMouseButton,def=1" json:"button,omitempty"`
}

// Default values for CInputMouseUpMsg fields.
const (
	Default_CInputMouseUpMsg_Button = EStreamMouseButton_k_EStreamMouseButtonLeft
)

func (x *CInputMouseUpMsg) Reset() {
	*x = CInputMouseUpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputMouseUpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputMouseUpMsg) ProtoMessage() {}

func (x *CInputMouseUpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputMouseUpMsg.ProtoReflect.Descriptor instead.
func (*CInputMouseUpMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{31}
}

func (x *CInputMouseUpMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputMouseUpMsg) GetButton() EStreamMouseButton {
	if x != nil && x.Button != nil {
		return *x.Button
	}
	return Default_CInputMouseUpMsg_Button
}

type CInputKeyDownMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32 `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Scancode  *uint32 `protobuf:"varint,2,req,name=scancode" json:"scancode,omitempty"`
}

func (x *CInputKeyDownMsg) Reset() {
	*x = CInputKeyDownMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputKeyDownMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputKeyDownMsg) ProtoMessage() {}

func (x *CInputKeyDownMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputKeyDownMsg.ProtoReflect.Descriptor instead.
func (*CInputKeyDownMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{32}
}

func (x *CInputKeyDownMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputKeyDownMsg) GetScancode() uint32 {
	if x != nil && x.Scancode != nil {
		return *x.Scancode
	}
	return 0
}

type CInputKeyUpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32 `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Scancode  *uint32 `protobuf:"varint,2,req,name=scancode" json:"scancode,omitempty"`
}

func (x *CInputKeyUpMsg) Reset() {
	*x = CInputKeyUpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputKeyUpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputKeyUpMsg) ProtoMessage() {}

func (x *CInputKeyUpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputKeyUpMsg.ProtoReflect.Descriptor instead.
func (*CInputKeyUpMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{33}
}

func (x *CInputKeyUpMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputKeyUpMsg) GetScancode() uint32 {
	if x != nil && x.Scancode != nil {
		return *x.Scancode
	}
	return 0
}

type CInputTextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMark *uint32 `protobuf:"varint,1,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	TextUtf8  *string `protobuf:"bytes,2,req,name=text_utf8,json=textUtf8" json:"text_utf8,omitempty"`
}

func (x *CInputTextMsg) Reset() {
	*x = CInputTextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CInputTextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CInputTextMsg) ProtoMessage() {}

func (x *CInputTextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CInputTextMsg.ProtoReflect.Descriptor instead.
func (*CInputTextMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{34}
}

func (x *CInputTextMsg) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CInputTextMsg) GetTextUtf8() string {
	if x != nil && x.TextUtf8 != nil {
		return *x.TextUtf8
	}
	return ""
}

type CSetTitleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *CSetTitleMsg) Reset() {
	*x = CSetTitleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetTitleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetTitleMsg) ProtoMessage() {}

func (x *CSetTitleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetTitleMsg.ProtoReflect.Descriptor instead.
func (*CSetTitleMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{35}
}

func (x *CSetTitleMsg) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CSetCaptureSizeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  *int32 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (x *CSetCaptureSizeMsg) Reset() {
	*x = CSetCaptureSizeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetCaptureSizeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetCaptureSizeMsg) ProtoMessage() {}

func (x *CSetCaptureSizeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetCaptureSizeMsg.ProtoReflect.Descriptor instead.
func (*CSetCaptureSizeMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{36}
}

func (x *CSetCaptureSizeMsg) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSetCaptureSizeMsg) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSetIconMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  *int32 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Image  []byte `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
}

func (x *CSetIconMsg) Reset() {
	*x = CSetIconMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetIconMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetIconMsg) ProtoMessage() {}

func (x *CSetIconMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetIconMsg.ProtoReflect.Descriptor instead.
func (*CSetIconMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{37}
}

func (x *CSetIconMsg) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSetIconMsg) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CSetIconMsg) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type CSetFlashStateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags     *uint32 `protobuf:"varint,1,opt,name=flags" json:"flags,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	TimeoutMs *uint32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
}

func (x *CSetFlashStateMsg) Reset() {
	*x = CSetFlashStateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetFlashStateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetFlashStateMsg) ProtoMessage() {}

func (x *CSetFlashStateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetFlashStateMsg.ProtoReflect.Descriptor instead.
func (*CSetFlashStateMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{38}
}

func (x *CSetFlashStateMsg) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSetFlashStateMsg) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CSetFlashStateMsg) GetTimeoutMs() uint32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type CShowCursorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XNormalized *float32 `protobuf:"fixed32,1,opt,name=x_normalized,json=xNormalized" json:"x_normalized,omitempty"`
	YNormalized *float32 `protobuf:"fixed32,2,opt,name=y_normalized,json=yNormalized" json:"y_normalized,omitempty"`
}

func (x *CShowCursorMsg) Reset() {
	*x = CShowCursorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CShowCursorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CShowCursorMsg) ProtoMessage() {}

func (x *CShowCursorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CShowCursorMsg.ProtoReflect.Descriptor instead.
func (*CShowCursorMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{39}
}

func (x *CShowCursorMsg) GetXNormalized() float32 {
	if x != nil && x.XNormalized != nil {
		return *x.XNormalized
	}
	return 0
}

func (x *CShowCursorMsg) GetYNormalized() float32 {
	if x != nil && x.YNormalized != nil {
		return *x.YNormalized
	}
	return 0
}

type CHideCursorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CHideCursorMsg) Reset() {
	*x = CHideCursorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHideCursorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHideCursorMsg) ProtoMessage() {}

func (x *CHideCursorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHideCursorMsg.ProtoReflect.Descriptor instead.
func (*CHideCursorMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{40}
}

type CSetCursorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorId *uint64 `protobuf:"varint,1,req,name=cursor_id,json=cursorId" json:"cursor_id,omitempty"`
}

func (x *CSetCursorMsg) Reset() {
	*x = CSetCursorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetCursorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetCursorMsg) ProtoMessage() {}

func (x *CSetCursorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetCursorMsg.ProtoReflect.Descriptor instead.
func (*CSetCursorMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{41}
}

func (x *CSetCursorMsg) GetCursorId() uint64 {
	if x != nil && x.CursorId != nil {
		return *x.CursorId
	}
	return 0
}

type CGetCursorImageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorId *uint64 `protobuf:"varint,1,req,name=cursor_id,json=cursorId" json:"cursor_id,omitempty"`
}

func (x *CGetCursorImageMsg) Reset() {
	*x = CGetCursorImageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGetCursorImageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGetCursorImageMsg) ProtoMessage() {}

func (x *CGetCursorImageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGetCursorImageMsg.ProtoReflect.Descriptor instead.
func (*CGetCursorImageMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{42}
}

func (x *CGetCursorImageMsg) GetCursorId() uint64 {
	if x != nil && x.CursorId != nil {
		return *x.CursorId
	}
	return 0
}

type CSetCursorImageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorId *uint64 `protobuf:"varint,1,req,name=cursor_id,json=cursorId" json:"cursor_id,omitempty"`
	Width    *int32  `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height   *int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	HotX     *int32  `protobuf:"varint,4,opt,name=hot_x,json=hotX" json:"hot_x,omitempty"`
	HotY     *int32  `protobuf:"varint,5,opt,name=hot_y,json=hotY" json:"hot_y,omitempty"`
	Image    []byte  `protobuf:"bytes,6,opt,name=image" json:"image,omitempty"`
}

func (x *CSetCursorImageMsg) Reset() {
	*x = CSetCursorImageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetCursorImageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetCursorImageMsg) ProtoMessage() {}

func (x *CSetCursorImageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetCursorImageMsg.ProtoReflect.Descriptor instead.
func (*CSetCursorImageMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{43}
}

func (x *CSetCursorImageMsg) GetCursorId() uint64 {
	if x != nil && x.CursorId != nil {
		return *x.CursorId
	}
	return 0
}

func (x *CSetCursorImageMsg) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSetCursorImageMsg) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CSetCursorImageMsg) GetHotX() int32 {
	if x != nil && x.HotX != nil {
		return *x.HotX
	}
	return 0
}

func (x *CSetCursorImageMsg) GetHotY() int32 {
	if x != nil && x.HotY != nil {
		return *x.HotY
	}
	return 0
}

func (x *CSetCursorImageMsg) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type CVideoDecoderInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info    *string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Threads *int32  `protobuf:"varint,2,opt,name=threads" json:"threads,omitempty"`
}

func (x *CVideoDecoderInfoMsg) Reset() {
	*x = CVideoDecoderInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideoDecoderInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideoDecoderInfoMsg) ProtoMessage() {}

func (x *CVideoDecoderInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideoDecoderInfoMsg.ProtoReflect.Descriptor instead.
func (*CVideoDecoderInfoMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{44}
}

func (x *CVideoDecoderInfoMsg) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

func (x *CVideoDecoderInfoMsg) GetThreads() int32 {
	if x != nil && x.Threads != nil {
		return *x.Threads
	}
	return 0
}

type CVideoEncoderInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (x *CVideoEncoderInfoMsg) Reset() {
	*x = CVideoEncoderInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideoEncoderInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideoEncoderInfoMsg) ProtoMessage() {}

func (x *CVideoEncoderInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideoEncoderInfoMsg.ProtoReflect.Descriptor instead.
func (*CVideoEncoderInfoMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{45}
}

func (x *CVideoEncoderInfoMsg) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

type CPauseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPauseMsg) Reset() {
	*x = CPauseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPauseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPauseMsg) ProtoMessage() {}

func (x *CPauseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPauseMsg.ProtoReflect.Descriptor instead.
func (*CPauseMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{46}
}

type CResumeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CResumeMsg) Reset() {
	*x = CResumeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResumeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResumeMsg) ProtoMessage() {}

func (x *CResumeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResumeMsg.ProtoReflect.Descriptor instead.
func (*CResumeMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{47}
}

type CEnableHighResCaptureMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CEnableHighResCaptureMsg) Reset() {
	*x = CEnableHighResCaptureMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEnableHighResCaptureMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEnableHighResCaptureMsg) ProtoMessage() {}

func (x *CEnableHighResCaptureMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEnableHighResCaptureMsg.ProtoReflect.Descriptor instead.
func (*CEnableHighResCaptureMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{48}
}

type CDisableHighResCaptureMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CDisableHighResCaptureMsg) Reset() {
	*x = CDisableHighResCaptureMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDisableHighResCaptureMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDisableHighResCaptureMsg) ProtoMessage() {}

func (x *CDisableHighResCaptureMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDisableHighResCaptureMsg.ProtoReflect.Descriptor instead.
func (*CDisableHighResCaptureMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{49}
}

type CToggleMagnificationMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CToggleMagnificationMsg) Reset() {
	*x = CToggleMagnificationMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CToggleMagnificationMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CToggleMagnificationMsg) ProtoMessage() {}

func (x *CToggleMagnificationMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CToggleMagnificationMsg.ProtoReflect.Descriptor instead.
func (*CToggleMagnificationMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{50}
}

type CSetCapslockMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressed *bool `protobuf:"varint,1,opt,name=pressed" json:"pressed,omitempty"`
}

func (x *CSetCapslockMsg) Reset() {
	*x = CSetCapslockMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetCapslockMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetCapslockMsg) ProtoMessage() {}

func (x *CSetCapslockMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetCapslockMsg.ProtoReflect.Descriptor instead.
func (*CSetCapslockMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{51}
}

func (x *CSetCapslockMsg) GetPressed() bool {
	if x != nil && x.Pressed != nil {
		return *x.Pressed
	}
	return false
}

type CStreamingKeymapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scancode                  *int32 `protobuf:"varint,1,opt,name=scancode" json:"scancode,omitempty"`
	NormalKeycode             *int32 `protobuf:"varint,2,opt,name=normal_keycode,json=normalKeycode" json:"normal_keycode,omitempty"`
	ShiftKeycode              *int32 `protobuf:"varint,3,opt,name=shift_keycode,json=shiftKeycode" json:"shift_keycode,omitempty"`
	CapslockKeycode           *int32 `protobuf:"varint,4,opt,name=capslock_keycode,json=capslockKeycode" json:"capslock_keycode,omitempty"`
	ShiftCapslockKeycode      *int32 `protobuf:"varint,5,opt,name=shift_capslock_keycode,json=shiftCapslockKeycode" json:"shift_capslock_keycode,omitempty"`
	AltgrKeycode              *int32 `protobuf:"varint,6,opt,name=altgr_keycode,json=altgrKeycode" json:"altgr_keycode,omitempty"`
	AltgrShiftKeycode         *int32 `protobuf:"varint,7,opt,name=altgr_shift_keycode,json=altgrShiftKeycode" json:"altgr_shift_keycode,omitempty"`
	AltgrCapslockKeycode      *int32 `protobuf:"varint,8,opt,name=altgr_capslock_keycode,json=altgrCapslockKeycode" json:"altgr_capslock_keycode,omitempty"`
	AltgrShiftCapslockKeycode *int32 `protobuf:"varint,9,opt,name=altgr_shift_capslock_keycode,json=altgrShiftCapslockKeycode" json:"altgr_shift_capslock_keycode,omitempty"`
}

func (x *CStreamingKeymapEntry) Reset() {
	*x = CStreamingKeymapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingKeymapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingKeymapEntry) ProtoMessage() {}

func (x *CStreamingKeymapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingKeymapEntry.ProtoReflect.Descriptor instead.
func (*CStreamingKeymapEntry) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{52}
}

func (x *CStreamingKeymapEntry) GetScancode() int32 {
	if x != nil && x.Scancode != nil {
		return *x.Scancode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetNormalKeycode() int32 {
	if x != nil && x.NormalKeycode != nil {
		return *x.NormalKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetShiftKeycode() int32 {
	if x != nil && x.ShiftKeycode != nil {
		return *x.ShiftKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetCapslockKeycode() int32 {
	if x != nil && x.CapslockKeycode != nil {
		return *x.CapslockKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetShiftCapslockKeycode() int32 {
	if x != nil && x.ShiftCapslockKeycode != nil {
		return *x.ShiftCapslockKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetAltgrKeycode() int32 {
	if x != nil && x.AltgrKeycode != nil {
		return *x.AltgrKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetAltgrShiftKeycode() int32 {
	if x != nil && x.AltgrShiftKeycode != nil {
		return *x.AltgrShiftKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetAltgrCapslockKeycode() int32 {
	if x != nil && x.AltgrCapslockKeycode != nil {
		return *x.AltgrCapslockKeycode
	}
	return 0
}

func (x *CStreamingKeymapEntry) GetAltgrShiftCapslockKeycode() int32 {
	if x != nil && x.AltgrShiftCapslockKeycode != nil {
		return *x.AltgrShiftCapslockKeycode
	}
	return 0
}

type CStreamingKeymap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CStreamingKeymapEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CStreamingKeymap) Reset() {
	*x = CStreamingKeymap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingKeymap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingKeymap) ProtoMessage() {}

func (x *CStreamingKeymap) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingKeymap.ProtoReflect.Descriptor instead.
func (*CStreamingKeymap) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{53}
}

func (x *CStreamingKeymap) GetEntries() []*CStreamingKeymapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CSetKeymapMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keymap *CStreamingKeymap `protobuf:"bytes,1,opt,name=keymap" json:"keymap,omitempty"`
}

func (x *CSetKeymapMsg) Reset() {
	*x = CSetKeymapMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetKeymapMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetKeymapMsg) ProtoMessage() {}

func (x *CSetKeymapMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetKeymapMsg.ProtoReflect.Descriptor instead.
func (*CSetKeymapMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{54}
}

func (x *CSetKeymapMsg) GetKeymap() *CStreamingKeymap {
	if x != nil {
		return x.Keymap
	}
	return nil
}

type CStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStopRequest) Reset() {
	*x = CStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStopRequest) ProtoMessage() {}

func (x *CStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStopRequest.ProtoReflect.Descriptor instead.
func (*CStopRequest) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{55}
}

type CQuitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CQuitRequest) Reset() {
	*x = CQuitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQuitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQuitRequest) ProtoMessage() {}

func (x *CQuitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQuitRequest.ProtoReflect.Descriptor instead.
func (*CQuitRequest) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{56}
}

type CDeleteCursorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorId *uint64 `protobuf:"varint,1,req,name=cursor_id,json=cursorId" json:"cursor_id,omitempty"`
}

func (x *CDeleteCursorMsg) Reset() {
	*x = CDeleteCursorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDeleteCursorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDeleteCursorMsg) ProtoMessage() {}

func (x *CDeleteCursorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDeleteCursorMsg.ProtoReflect.Descriptor instead.
func (*CDeleteCursorMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{57}
}

func (x *CDeleteCursorMsg) GetCursorId() uint64 {
	if x != nil && x.CursorId != nil {
		return *x.CursorId
	}
	return 0
}

type CSetStreamingClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *CStreamingClientConfig `protobuf:"bytes,1,req,name=config" json:"config,omitempty"`
}

func (x *CSetStreamingClientConfig) Reset() {
	*x = CSetStreamingClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetStreamingClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetStreamingClientConfig) ProtoMessage() {}

func (x *CSetStreamingClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetStreamingClientConfig.ProtoReflect.Descriptor instead.
func (*CSetStreamingClientConfig) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{58}
}

func (x *CSetStreamingClientConfig) GetConfig() *CStreamingClientConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CSetQoSMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseQos *bool `protobuf:"varint,1,req,name=use_qos,json=useQos" json:"use_qos,omitempty"`
}

func (x *CSetQoSMsg) Reset() {
	*x = CSetQoSMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetQoSMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetQoSMsg) ProtoMessage() {}

func (x *CSetQoSMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetQoSMsg.ProtoReflect.Descriptor instead.
func (*CSetQoSMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{59}
}

func (x *CSetQoSMsg) GetUseQos() bool {
	if x != nil && x.UseQos != nil {
		return *x.UseQos
	}
	return false
}

type CSetTargetFramerateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Framerate            *uint32 `protobuf:"varint,1,req,name=framerate" json:"framerate,omitempty"`
	Reasons              *uint32 `protobuf:"varint,2,opt,name=reasons" json:"reasons,omitempty"`
	FramerateNumerator   *uint32 `protobuf:"varint,3,opt,name=framerate_numerator,json=framerateNumerator" json:"framerate_numerator,omitempty"`
	FramerateDenominator *uint32 `protobuf:"varint,4,opt,name=framerate_denominator,json=framerateDenominator" json:"framerate_denominator,omitempty"`
}

func (x *CSetTargetFramerateMsg) Reset() {
	*x = CSetTargetFramerateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetTargetFramerateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetTargetFramerateMsg) ProtoMessage() {}

func (x *CSetTargetFramerateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetTargetFramerateMsg.ProtoReflect.Descriptor instead.
func (*CSetTargetFramerateMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{60}
}

func (x *CSetTargetFramerateMsg) GetFramerate() uint32 {
	if x != nil && x.Framerate != nil {
		return *x.Framerate
	}
	return 0
}

func (x *CSetTargetFramerateMsg) GetReasons() uint32 {
	if x != nil && x.Reasons != nil {
		return *x.Reasons
	}
	return 0
}

func (x *CSetTargetFramerateMsg) GetFramerateNumerator() uint32 {
	if x != nil && x.FramerateNumerator != nil {
		return *x.FramerateNumerator
	}
	return 0
}

func (x *CSetTargetFramerateMsg) GetFramerateDenominator() uint32 {
	if x != nil && x.FramerateDenominator != nil {
		return *x.FramerateDenominator
	}
	return 0
}

type CSetTargetBitrateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bitrate *int32 `protobuf:"varint,1,req,name=bitrate" json:"bitrate,omitempty"`
}

func (x *CSetTargetBitrateMsg) Reset() {
	*x = CSetTargetBitrateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetTargetBitrateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetTargetBitrateMsg) ProtoMessage() {}

func (x *CSetTargetBitrateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetTargetBitrateMsg.ProtoReflect.Descriptor instead.
func (*CSetTargetBitrateMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{61}
}

func (x *CSetTargetBitrateMsg) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

type COverlayEnabledMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`
}

func (x *COverlayEnabledMsg) Reset() {
	*x = COverlayEnabledMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COverlayEnabledMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COverlayEnabledMsg) ProtoMessage() {}

func (x *COverlayEnabledMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COverlayEnabledMsg.ProtoReflect.Descriptor instead.
func (*COverlayEnabledMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{62}
}

func (x *COverlayEnabledMsg) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CSetGammaRampMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GammaRamp []byte `protobuf:"bytes,1,opt,name=gamma_ramp,json=gammaRamp" json:"gamma_ramp,omitempty"`
}

func (x *CSetGammaRampMsg) Reset() {
	*x = CSetGammaRampMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetGammaRampMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetGammaRampMsg) ProtoMessage() {}

func (x *CSetGammaRampMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetGammaRampMsg.ProtoReflect.Descriptor instead.
func (*CSetGammaRampMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{63}
}

func (x *CSetGammaRampMsg) GetGammaRamp() []byte {
	if x != nil {
		return x.GammaRamp
	}
	return nil
}

type CSetActivityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *EStreamActivity `protobuf:"varint,1,opt,name=activity,enum=steam.EStreamActivity,def=1" json:"activity,omitempty"`
	Appid    *uint32          `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Gameid   *uint64          `protobuf:"varint,3,opt,name=gameid" json:"gameid,omitempty"`
}

// Default values for CSetActivityMsg fields.
const (
	Default_CSetActivityMsg_Activity = EStreamActivity_k_EStreamActivityIdle
)

func (x *CSetActivityMsg) Reset() {
	*x = CSetActivityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetActivityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetActivityMsg) ProtoMessage() {}

func (x *CSetActivityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetActivityMsg.ProtoReflect.Descriptor instead.
func (*CSetActivityMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{64}
}

func (x *CSetActivityMsg) GetActivity() EStreamActivity {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return Default_CSetActivityMsg_Activity
}

func (x *CSetActivityMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSetActivityMsg) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CSystemSuspendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSystemSuspendMsg) Reset() {
	*x = CSystemSuspendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSystemSuspendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSystemSuspendMsg) ProtoMessage() {}

func (x *CSystemSuspendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSystemSuspendMsg.ProtoReflect.Descriptor instead.
func (*CSystemSuspendMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{65}
}

type CVirtualHereRequestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
}

func (x *CVirtualHereRequestMsg) Reset() {
	*x = CVirtualHereRequestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVirtualHereRequestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualHereRequestMsg) ProtoMessage() {}

func (x *CVirtualHereRequestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualHereRequestMsg.ProtoReflect.Descriptor instead.
func (*CVirtualHereRequestMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{66}
}

func (x *CVirtualHereRequestMsg) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type CVirtualHereReadyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicensedDeviceCount *uint32 `protobuf:"varint,1,opt,name=licensed_device_count,json=licensedDeviceCount" json:"licensed_device_count,omitempty"`
}

func (x *CVirtualHereReadyMsg) Reset() {
	*x = CVirtualHereReadyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVirtualHereReadyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualHereReadyMsg) ProtoMessage() {}

func (x *CVirtualHereReadyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualHereReadyMsg.ProtoReflect.Descriptor instead.
func (*CVirtualHereReadyMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{67}
}

func (x *CVirtualHereReadyMsg) GetLicensedDeviceCount() uint32 {
	if x != nil && x.LicensedDeviceCount != nil {
		return *x.LicensedDeviceCount
	}
	return 0
}

type CVirtualHereShareDeviceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceAddress *string `protobuf:"bytes,1,opt,name=device_address,json=deviceAddress" json:"device_address,omitempty"`
}

func (x *CVirtualHereShareDeviceMsg) Reset() {
	*x = CVirtualHereShareDeviceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVirtualHereShareDeviceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualHereShareDeviceMsg) ProtoMessage() {}

func (x *CVirtualHereShareDeviceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualHereShareDeviceMsg.ProtoReflect.Descriptor instead.
func (*CVirtualHereShareDeviceMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{68}
}

func (x *CVirtualHereShareDeviceMsg) GetDeviceAddress() string {
	if x != nil && x.DeviceAddress != nil {
		return *x.DeviceAddress
	}
	return ""
}

type CSetSpectatorModeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *CSetSpectatorModeMsg) Reset() {
	*x = CSetSpectatorModeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetSpectatorModeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetSpectatorModeMsg) ProtoMessage() {}

func (x *CSetSpectatorModeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetSpectatorModeMsg.ProtoReflect.Descriptor instead.
func (*CSetSpectatorModeMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{69}
}

func (x *CSetSpectatorModeMsg) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CRemoteHIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (x *CRemoteHIDMsg) Reset() {
	*x = CRemoteHIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteHIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteHIDMsg) ProtoMessage() {}

func (x *CRemoteHIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteHIDMsg.ProtoReflect.Descriptor instead.
func (*CRemoteHIDMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{70}
}

func (x *CRemoteHIDMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CTouchConfigActiveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Revision *uint32 `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
	Creator  *uint64 `protobuf:"varint,3,opt,name=creator" json:"creator,omitempty"`
}

func (x *CTouchConfigActiveMsg) Reset() {
	*x = CTouchConfigActiveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTouchConfigActiveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTouchConfigActiveMsg) ProtoMessage() {}

func (x *CTouchConfigActiveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTouchConfigActiveMsg.ProtoReflect.Descriptor instead.
func (*CTouchConfigActiveMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{71}
}

func (x *CTouchConfigActiveMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTouchConfigActiveMsg) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *CTouchConfigActiveMsg) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

type CGetTouchConfigDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CGetTouchConfigDataMsg) Reset() {
	*x = CGetTouchConfigDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGetTouchConfigDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGetTouchConfigDataMsg) ProtoMessage() {}

func (x *CGetTouchConfigDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGetTouchConfigDataMsg.ProtoReflect.Descriptor instead.
func (*CGetTouchConfigDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{72}
}

func (x *CGetTouchConfigDataMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSetTouchConfigDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Revision *uint32 `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
	Data     []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Layout   []byte  `protobuf:"bytes,4,opt,name=layout" json:"layout,omitempty"`
	Creator  *uint64 `protobuf:"varint,5,opt,name=creator" json:"creator,omitempty"`
}

func (x *CSetTouchConfigDataMsg) Reset() {
	*x = CSetTouchConfigDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetTouchConfigDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetTouchConfigDataMsg) ProtoMessage() {}

func (x *CSetTouchConfigDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetTouchConfigDataMsg.ProtoReflect.Descriptor instead.
func (*CSetTouchConfigDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{73}
}

func (x *CSetTouchConfigDataMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSetTouchConfigDataMsg) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *CSetTouchConfigDataMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CSetTouchConfigDataMsg) GetLayout() []byte {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *CSetTouchConfigDataMsg) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

type CSaveTouchConfigLayoutMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid  *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Layout []byte  `protobuf:"bytes,4,opt,name=layout" json:"layout,omitempty"`
}

func (x *CSaveTouchConfigLayoutMsg) Reset() {
	*x = CSaveTouchConfigLayoutMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSaveTouchConfigLayoutMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSaveTouchConfigLayoutMsg) ProtoMessage() {}

func (x *CSaveTouchConfigLayoutMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSaveTouchConfigLayoutMsg.ProtoReflect.Descriptor instead.
func (*CSaveTouchConfigLayoutMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{74}
}

func (x *CSaveTouchConfigLayoutMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSaveTouchConfigLayoutMsg) GetLayout() []byte {
	if x != nil {
		return x.Layout
	}
	return nil
}

type CTouchActionSetActiveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ActionsetId *int32  `protobuf:"varint,2,opt,name=actionset_id,json=actionsetId" json:"actionset_id,omitempty"`
}

func (x *CTouchActionSetActiveMsg) Reset() {
	*x = CTouchActionSetActiveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTouchActionSetActiveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTouchActionSetActiveMsg) ProtoMessage() {}

func (x *CTouchActionSetActiveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTouchActionSetActiveMsg.ProtoReflect.Descriptor instead.
func (*CTouchActionSetActiveMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{75}
}

func (x *CTouchActionSetActiveMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTouchActionSetActiveMsg) GetActionsetId() int32 {
	if x != nil && x.ActionsetId != nil {
		return *x.ActionsetId
	}
	return 0
}

type CTouchActionSetLayerAddedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ActionsetId *int32  `protobuf:"varint,2,opt,name=actionset_id,json=actionsetId" json:"actionset_id,omitempty"`
}

func (x *CTouchActionSetLayerAddedMsg) Reset() {
	*x = CTouchActionSetLayerAddedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTouchActionSetLayerAddedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTouchActionSetLayerAddedMsg) ProtoMessage() {}

func (x *CTouchActionSetLayerAddedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTouchActionSetLayerAddedMsg.ProtoReflect.Descriptor instead.
func (*CTouchActionSetLayerAddedMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{76}
}

func (x *CTouchActionSetLayerAddedMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTouchActionSetLayerAddedMsg) GetActionsetId() int32 {
	if x != nil && x.ActionsetId != nil {
		return *x.ActionsetId
	}
	return 0
}

type CTouchActionSetLayerRemovedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ActionsetId *int32  `protobuf:"varint,2,opt,name=actionset_id,json=actionsetId" json:"actionset_id,omitempty"`
}

func (x *CTouchActionSetLayerRemovedMsg) Reset() {
	*x = CTouchActionSetLayerRemovedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTouchActionSetLayerRemovedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTouchActionSetLayerRemovedMsg) ProtoMessage() {}

func (x *CTouchActionSetLayerRemovedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTouchActionSetLayerRemovedMsg.ProtoReflect.Descriptor instead.
func (*CTouchActionSetLayerRemovedMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{77}
}

func (x *CTouchActionSetLayerRemovedMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTouchActionSetLayerRemovedMsg) GetActionsetId() int32 {
	if x != nil && x.ActionsetId != nil {
		return *x.ActionsetId
	}
	return 0
}

type CGetTouchIconDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Icon  *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
}

func (x *CGetTouchIconDataMsg) Reset() {
	*x = CGetTouchIconDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGetTouchIconDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGetTouchIconDataMsg) ProtoMessage() {}

func (x *CGetTouchIconDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGetTouchIconDataMsg.ProtoReflect.Descriptor instead.
func (*CGetTouchIconDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{78}
}

func (x *CGetTouchIconDataMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGetTouchIconDataMsg) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

type CSetTouchIconDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Icon  *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Data  []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CSetTouchIconDataMsg) Reset() {
	*x = CSetTouchIconDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSetTouchIconDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSetTouchIconDataMsg) ProtoMessage() {}

func (x *CSetTouchIconDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSetTouchIconDataMsg.ProtoReflect.Descriptor instead.
func (*CSetTouchIconDataMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{79}
}

func (x *CSetTouchIconDataMsg) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSetTouchIconDataMsg) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CSetTouchIconDataMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CStreamDataLostMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets []uint32 `protobuf:"varint,1,rep,name=packets" json:"packets,omitempty"`
}

func (x *CStreamDataLostMsg) Reset() {
	*x = CStreamDataLostMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamDataLostMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamDataLostMsg) ProtoMessage() {}

func (x *CStreamDataLostMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamDataLostMsg.ProtoReflect.Descriptor instead.
func (*CStreamDataLostMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{80}
}

func (x *CStreamDataLostMsg) GetPackets() []uint32 {
	if x != nil {
		return x.Packets
	}
	return nil
}

type CAudioFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format    *EAudioFormat `protobuf:"varint,1,req,name=format,enum=steam.EAudioFormat,def=0" json:"format,omitempty"`
	Frequency *uint32       `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	Channels  *uint32       `protobuf:"varint,3,opt,name=channels" json:"channels,omitempty"`
}

// Default values for CAudioFormat fields.
const (
	Default_CAudioFormat_Format = EAudioFormat_k_EAudioFormatNone
)

func (x *CAudioFormat) Reset() {
	*x = CAudioFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAudioFormat) ProtoMessage() {}

func (x *CAudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAudioFormat.ProtoReflect.Descriptor instead.
func (*CAudioFormat) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{81}
}

func (x *CAudioFormat) GetFormat() EAudioFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CAudioFormat_Format
}

func (x *CAudioFormat) GetFrequency() uint32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *CAudioFormat) GetChannels() uint32 {
	if x != nil && x.Channels != nil {
		return *x.Channels
	}
	return 0
}

type CVideoFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format *EVideoFormat `protobuf:"varint,1,req,name=format,enum=steam.EVideoFormat,def=0" json:"format,omitempty"`
	Width  *uint32       `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height *uint32       `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

// Default values for CVideoFormat fields.
const (
	Default_CVideoFormat_Format = EVideoFormat_k_EVideoFormatNone
)

func (x *CVideoFormat) Reset() {
	*x = CVideoFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideoFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideoFormat) ProtoMessage() {}

func (x *CVideoFormat) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideoFormat.ProtoReflect.Descriptor instead.
func (*CVideoFormat) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{82}
}

func (x *CVideoFormat) GetFormat() EVideoFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CVideoFormat_Format
}

func (x *CVideoFormat) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CVideoFormat) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CFrameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   *EStreamFrameEvent `protobuf:"varint,1,req,name=event_id,json=eventId,enum=steam.EStreamFrameEvent,def=0" json:"event_id,omitempty"`
	Timestamp *uint32            `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for CFrameEvent fields.
const (
	Default_CFrameEvent_EventId = EStreamFrameEvent_k_EStreamInputEventStart
)

func (x *CFrameEvent) Reset() {
	*x = CFrameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFrameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFrameEvent) ProtoMessage() {}

func (x *CFrameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFrameEvent.ProtoReflect.Descriptor instead.
func (*CFrameEvent) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{83}
}

func (x *CFrameEvent) GetEventId() EStreamFrameEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CFrameEvent_EventId
}

func (x *CFrameEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CFrameStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameId           *uint32             `protobuf:"varint,1,req,name=frame_id,json=frameId" json:"frame_id,omitempty"`
	InputMark         *uint32             `protobuf:"varint,2,opt,name=input_mark,json=inputMark" json:"input_mark,omitempty"`
	Events            []*CFrameEvent      `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	Result            *EStreamFrameResult `protobuf:"varint,4,req,name=result,enum=steam.EStreamFrameResult,def=0" json:"result,omitempty"`
	FrameStartDelta   *float32            `protobuf:"fixed32,5,opt,name=frame_start_delta,json=frameStartDelta" json:"frame_start_delta,omitempty"`
	FrameDisplayDelta *float32            `protobuf:"fixed32,6,opt,name=frame_display_delta,json=frameDisplayDelta" json:"frame_display_delta,omitempty"`
	PingTime          *float32            `protobuf:"fixed32,7,opt,name=ping_time,json=pingTime" json:"ping_time,omitempty"`
	ServerBitrate     *float32            `protobuf:"fixed32,8,opt,name=server_bitrate,json=serverBitrate" json:"server_bitrate,omitempty"`
	ClientBitrate     *float32            `protobuf:"fixed32,9,opt,name=client_bitrate,json=clientBitrate" json:"client_bitrate,omitempty"`
	LinkBandwidth     *float32            `protobuf:"fixed32,10,opt,name=link_bandwidth,json=linkBandwidth" json:"link_bandwidth,omitempty"`
	PacketLoss        *float32            `protobuf:"fixed32,11,opt,name=packet_loss,json=packetLoss" json:"packet_loss,omitempty"`
	FrameSize         *uint32             `protobuf:"varint,12,opt,name=frame_size,json=frameSize" json:"frame_size,omitempty"`
}

// Default values for CFrameStats fields.
const (
	Default_CFrameStats_Result = EStreamFrameResult_k_EStreamFrameResultPending
)

func (x *CFrameStats) Reset() {
	*x = CFrameStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFrameStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFrameStats) ProtoMessage() {}

func (x *CFrameStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFrameStats.ProtoReflect.Descriptor instead.
func (*CFrameStats) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{84}
}

func (x *CFrameStats) GetFrameId() uint32 {
	if x != nil && x.FrameId != nil {
		return *x.FrameId
	}
	return 0
}

func (x *CFrameStats) GetInputMark() uint32 {
	if x != nil && x.InputMark != nil {
		return *x.InputMark
	}
	return 0
}

func (x *CFrameStats) GetEvents() []*CFrameEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CFrameStats) GetResult() EStreamFrameResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CFrameStats_Result
}

func (x *CFrameStats) GetFrameStartDelta() float32 {
	if x != nil && x.FrameStartDelta != nil {
		return *x.FrameStartDelta
	}
	return 0
}

func (x *CFrameStats) GetFrameDisplayDelta() float32 {
	if x != nil && x.FrameDisplayDelta != nil {
		return *x.FrameDisplayDelta
	}
	return 0
}

func (x *CFrameStats) GetPingTime() float32 {
	if x != nil && x.PingTime != nil {
		return *x.PingTime
	}
	return 0
}

func (x *CFrameStats) GetServerBitrate() float32 {
	if x != nil && x.ServerBitrate != nil {
		return *x.ServerBitrate
	}
	return 0
}

func (x *CFrameStats) GetClientBitrate() float32 {
	if x != nil && x.ClientBitrate != nil {
		return *x.ClientBitrate
	}
	return 0
}

func (x *CFrameStats) GetLinkBandwidth() float32 {
	if x != nil && x.LinkBandwidth != nil {
		return *x.LinkBandwidth
	}
	return 0
}

func (x *CFrameStats) GetPacketLoss() float32 {
	if x != nil && x.PacketLoss != nil {
		return *x.PacketLoss
	}
	return 0
}

func (x *CFrameStats) GetFrameSize() uint32 {
	if x != nil && x.FrameSize != nil {
		return *x.FrameSize
	}
	return 0
}

type CFrameStatAccumulatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatType *EFrameAccumulatedStat `protobuf:"varint,1,req,name=stat_type,json=statType,enum=steam.EFrameAccumulatedStat,def=0" json:"stat_type,omitempty"`
	Count    *int32                 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	Average  *float32               `protobuf:"fixed32,3,req,name=average" json:"average,omitempty"`
	Stddev   *float32               `protobuf:"fixed32,4,opt,name=stddev" json:"stddev,omitempty"`
}

// Default values for CFrameStatAccumulatedValue fields.
const (
	Default_CFrameStatAccumulatedValue_StatType = EFrameAccumulatedStat_k_EFrameStatFPS
)

func (x *CFrameStatAccumulatedValue) Reset() {
	*x = CFrameStatAccumulatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFrameStatAccumulatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFrameStatAccumulatedValue) ProtoMessage() {}

func (x *CFrameStatAccumulatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFrameStatAccumulatedValue.ProtoReflect.Descriptor instead.
func (*CFrameStatAccumulatedValue) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{85}
}

func (x *CFrameStatAccumulatedValue) GetStatType() EFrameAccumulatedStat {
	if x != nil && x.StatType != nil {
		return *x.StatType
	}
	return Default_CFrameStatAccumulatedValue_StatType
}

func (x *CFrameStatAccumulatedValue) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CFrameStatAccumulatedValue) GetAverage() float32 {
	if x != nil && x.Average != nil {
		return *x.Average
	}
	return 0
}

func (x *CFrameStatAccumulatedValue) GetStddev() float32 {
	if x != nil && x.Stddev != nil {
		return *x.Stddev
	}
	return 0
}

type CFrameStatsListMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType         *EStreamingDataType           `protobuf:"varint,1,req,name=data_type,json=dataType,enum=steam.EStreamingDataType,def=0" json:"data_type,omitempty"`
	Stats            []*CFrameStats                `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	AccumulatedStats []*CFrameStatAccumulatedValue `protobuf:"bytes,3,rep,name=accumulated_stats,json=accumulatedStats" json:"accumulated_stats,omitempty"`
	LatestFrameId    *int32                        `protobuf:"varint,4,req,name=latest_frame_id,json=latestFrameId" json:"latest_frame_id,omitempty"`
}

// Default values for CFrameStatsListMsg fields.
const (
	Default_CFrameStatsListMsg_DataType = EStreamingDataType_k_EStreamingAudioData
)

func (x *CFrameStatsListMsg) Reset() {
	*x = CFrameStatsListMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFrameStatsListMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFrameStatsListMsg) ProtoMessage() {}

func (x *CFrameStatsListMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFrameStatsListMsg.ProtoReflect.Descriptor instead.
func (*CFrameStatsListMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{86}
}

func (x *CFrameStatsListMsg) GetDataType() EStreamingDataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return Default_CFrameStatsListMsg_DataType
}

func (x *CFrameStatsListMsg) GetStats() []*CFrameStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CFrameStatsListMsg) GetAccumulatedStats() []*CFrameStatAccumulatedValue {
	if x != nil {
		return x.AccumulatedStats
	}
	return nil
}

func (x *CFrameStatsListMsg) GetLatestFrameId() int32 {
	if x != nil && x.LatestFrameId != nil {
		return *x.LatestFrameId
	}
	return 0
}

type CStreamingSessionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameLossPercentage  *float32 `protobuf:"fixed32,1,opt,name=frame_loss_percentage,json=frameLossPercentage" json:"frame_loss_percentage,omitempty"`
	AverageNetworkTimeMs *float32 `protobuf:"fixed32,2,opt,name=average_network_time_ms,json=averageNetworkTimeMs" json:"average_network_time_ms,omitempty"`
	StddevNetworkTimeMs  *float32 `protobuf:"fixed32,3,opt,name=stddev_network_time_ms,json=stddevNetworkTimeMs" json:"stddev_network_time_ms,omitempty"`
}

func (x *CStreamingSessionStats) Reset() {
	*x = CStreamingSessionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStreamingSessionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStreamingSessionStats) ProtoMessage() {}

func (x *CStreamingSessionStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStreamingSessionStats.ProtoReflect.Descriptor instead.
func (*CStreamingSessionStats) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{87}
}

func (x *CStreamingSessionStats) GetFrameLossPercentage() float32 {
	if x != nil && x.FrameLossPercentage != nil {
		return *x.FrameLossPercentage
	}
	return 0
}

func (x *CStreamingSessionStats) GetAverageNetworkTimeMs() float32 {
	if x != nil && x.AverageNetworkTimeMs != nil {
		return *x.AverageNetworkTimeMs
	}
	return 0
}

func (x *CStreamingSessionStats) GetStddevNetworkTimeMs() float32 {
	if x != nil && x.StddevNetworkTimeMs != nil {
		return *x.StddevNetworkTimeMs
	}
	return 0
}

type CDebugDumpMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Screenshot []byte `protobuf:"bytes,1,opt,name=screenshot" json:"screenshot,omitempty"`
}

func (x *CDebugDumpMsg) Reset() {
	*x = CDebugDumpMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDebugDumpMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDebugDumpMsg) ProtoMessage() {}

func (x *CDebugDumpMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDebugDumpMsg.ProtoReflect.Descriptor instead.
func (*CDebugDumpMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{88}
}

func (x *CDebugDumpMsg) GetScreenshot() []byte {
	if x != nil {
		return x.Screenshot
	}
	return nil
}

type CLogMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CLogMsg) Reset() {
	*x = CLogMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLogMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLogMsg) ProtoMessage() {}

func (x *CLogMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLogMsg.ProtoReflect.Descriptor instead.
func (*CLogMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{89}
}

func (x *CLogMsg) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CLogMsg) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CLogUploadMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ELogFileType `protobuf:"varint,1,opt,name=type,enum=steam.ELogFileType,def=0" json:"type,omitempty"`
	Data []byte        `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for CLogUploadMsg fields.
const (
	Default_CLogUploadMsg_Type = ELogFileType_k_ELogFileSystemBoot
)

func (x *CLogUploadMsg) Reset() {
	*x = CLogUploadMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLogUploadMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLogUploadMsg) ProtoMessage() {}

func (x *CLogUploadMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLogUploadMsg.ProtoReflect.Descriptor instead.
func (*CLogUploadMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{90}
}

func (x *CLogUploadMsg) GetType() ELogFileType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CLogUploadMsg_Type
}

func (x *CLogUploadMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CTransportSignalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webrtc *CTransportSignalMsg_WebRTCMessage `protobuf:"bytes,1,opt,name=webrtc" json:"webrtc,omitempty"`
	Sdr    [][]byte                           `protobuf:"bytes,2,rep,name=sdr" json:"sdr,omitempty"`
}

func (x *CTransportSignalMsg) Reset() {
	*x = CTransportSignalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTransportSignalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTransportSignalMsg) ProtoMessage() {}

func (x *CTransportSignalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTransportSignalMsg.ProtoReflect.Descriptor instead.
func (*CTransportSignalMsg) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{91}
}

func (x *CTransportSignalMsg) GetWebrtc() *CTransportSignalMsg_WebRTCMessage {
	if x != nil {
		return x.Webrtc
	}
	return nil
}

func (x *CTransportSignalMsg) GetSdr() [][]byte {
	if x != nil {
		return x.Sdr
	}
	return nil
}

type CTransportSignalMsg_WebRTCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*CTransportSignalMsg_WebRTCMessage_Greeting
	//	*CTransportSignalMsg_WebRTCMessage_Offer
	//	*CTransportSignalMsg_WebRTCMessage_Answer
	//	*CTransportSignalMsg_WebRTCMessage_Candidate_
	Msg isCTransportSignalMsg_WebRTCMessage_Msg `protobuf_oneof:"msg"`
}

func (x *CTransportSignalMsg_WebRTCMessage) Reset() {
	*x = CTransportSignalMsg_WebRTCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTransportSignalMsg_WebRTCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTransportSignalMsg_WebRTCMessage) ProtoMessage() {}

func (x *CTransportSignalMsg_WebRTCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTransportSignalMsg_WebRTCMessage.ProtoReflect.Descriptor instead.
func (*CTransportSignalMsg_WebRTCMessage) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{91, 0}
}

func (m *CTransportSignalMsg_WebRTCMessage) GetMsg() isCTransportSignalMsg_WebRTCMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *CTransportSignalMsg_WebRTCMessage) GetGreeting() bool {
	if x, ok := x.GetMsg().(*CTransportSignalMsg_WebRTCMessage_Greeting); ok {
		return x.Greeting
	}
	return false
}

func (x *CTransportSignalMsg_WebRTCMessage) GetOffer() string {
	if x, ok := x.GetMsg().(*CTransportSignalMsg_WebRTCMessage_Offer); ok {
		return x.Offer
	}
	return ""
}

func (x *CTransportSignalMsg_WebRTCMessage) GetAnswer() string {
	if x, ok := x.GetMsg().(*CTransportSignalMsg_WebRTCMessage_Answer); ok {
		return x.Answer
	}
	return ""
}

func (x *CTransportSignalMsg_WebRTCMessage) GetCandidate() *CTransportSignalMsg_WebRTCMessage_Candidate {
	if x, ok := x.GetMsg().(*CTransportSignalMsg_WebRTCMessage_Candidate_); ok {
		return x.Candidate
	}
	return nil
}

type isCTransportSignalMsg_WebRTCMessage_Msg interface {
	isCTransportSignalMsg_WebRTCMessage_Msg()
}

type CTransportSignalMsg_WebRTCMessage_Greeting struct {
	Greeting bool `protobuf:"varint,1,opt,name=greeting,oneof"`
}

type CTransportSignalMsg_WebRTCMessage_Offer struct {
	Offer string `protobuf:"bytes,2,opt,name=offer,oneof"`
}

type CTransportSignalMsg_WebRTCMessage_Answer struct {
	Answer string `protobuf:"bytes,3,opt,name=answer,oneof"`
}

type CTransportSignalMsg_WebRTCMessage_Candidate_ struct {
	Candidate *CTransportSignalMsg_WebRTCMessage_Candidate `protobuf:"bytes,4,opt,name=candidate,oneof"`
}

func (*CTransportSignalMsg_WebRTCMessage_Greeting) isCTransportSignalMsg_WebRTCMessage_Msg() {}

func (*CTransportSignalMsg_WebRTCMessage_Offer) isCTransportSignalMsg_WebRTCMessage_Msg() {}

func (*CTransportSignalMsg_WebRTCMessage_Answer) isCTransportSignalMsg_WebRTCMessage_Msg() {}

func (*CTransportSignalMsg_WebRTCMessage_Candidate_) isCTransportSignalMsg_WebRTCMessage_Msg() {}

type CTransportSignalMsg_WebRTCMessage_Candidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdpMid        *string `protobuf:"bytes,1,opt,name=sdp_mid,json=sdpMid" json:"sdp_mid,omitempty"`
	SdpMlineIndex *int32  `protobuf:"varint,2,opt,name=sdp_mline_index,json=sdpMlineIndex" json:"sdp_mline_index,omitempty"`
	Candidate     *string `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) Reset() {
	*x = CTransportSignalMsg_WebRTCMessage_Candidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_stream_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTransportSignalMsg_WebRTCMessage_Candidate) ProtoMessage() {}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) ProtoReflect() protoreflect.Message {
	mi := &file_steam_stream_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTransportSignalMsg_WebRTCMessage_Candidate.ProtoReflect.Descriptor instead.
func (*CTransportSignalMsg_WebRTCMessage_Candidate) Descriptor() ([]byte, []int) {
	return file_steam_stream_proto_rawDescGZIP(), []int{91, 0, 0}
}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) GetSdpMid() string {
	if x != nil && x.SdpMid != nil {
		return *x.SdpMid
	}
	return ""
}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) GetSdpMlineIndex() int32 {
	if x != nil && x.SdpMlineIndex != nil {
		return *x.SdpMlineIndex
	}
	return 0
}

func (x *CTransportSignalMsg_WebRTCMessage_Candidate) GetCandidate() string {
	if x != nil && x.Candidate != nil {
		return *x.Candidate
	}
	return ""
}

var File_steam_stream_proto protoreflect.FileDescriptor

var file_steam_stream_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x67, 0x0a, 0x15, 0x43,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x1d,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x4f, 0x0a, 0x13, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6d, 0x74, 0x75, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x19, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xf1, 0x01, 0x0a, 0x1a, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x59,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x31, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x4d, 0x73, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x75, 0x72, 0x73, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x4b, 0x62, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x10,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xe9, 0x04, 0x0a, 0x14, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x61, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x68, 0x65, 0x76, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x48, 0x65, 0x76, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x64, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6d, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa3, 0x08,
	0x0a, 0x16, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x42, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x12, 0x3a, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x16,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x68,
	0x65, 0x76, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x65, 0x76,
	0x63, 0x12, 0x3e, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x73, 0x12, 0x45, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x68,
	0x6f, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x6f,
	0x74, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0xf9, 0x04, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x6e, 0x76, 0x66, 0x62, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x76, 0x66, 0x62, 0x63,
	0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x12, 0x3a, 0x0a,
	0x19, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x6c, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22,
	0xa9, 0x03, 0x0a, 0x11, 0x43, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x14, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x12, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12,
	0x63, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x6f, 0x6e, 0x65,
	0x52, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x13,
	0x43, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x43,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x17, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4f, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x73, 0x52, 0x13, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x22, 0xd0, 0x01, 0x0a,
	0x12, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x47, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x13, 0x0a, 0x11, 0x43, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x73, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x3a, 0x17,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67,
	0x22, 0x8a, 0x06, 0x0a, 0x0e, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a,
	0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x48,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x55, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x77,
	0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x2e, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x55, 0x70, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x68,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x03, 0x68, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a,
	0x14, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x78,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x79, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x78,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x79, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x78, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x78,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x9b, 0x01,
	0x0a, 0x14, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x78, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x13,
	0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x12, 0x56, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x70, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x43,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x4b, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3a, 0x18, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x7e, 0x0a,
	0x10, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x55, 0x70, 0x4d, 0x73,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x4b, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3a, 0x18, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x4d, 0x0a,
	0x10, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x73,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0e,
	0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x43, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x55, 0x74, 0x66, 0x38, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x53, 0x65, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x51,
	0x0a, 0x0b, 0x43, 0x53, 0x65, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x5e, 0x0a, 0x11, 0x43, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x22, 0x56, 0x0a, 0x0e, 0x43, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x78, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x78, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x79, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x48, 0x69,
	0x64, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x2c, 0x0a, 0x0d, 0x43,
	0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a,
	0x12, 0x43, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x68, 0x6f, 0x74, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x6f, 0x74, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x6f, 0x74, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x74, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x44,
	0x0a, 0x14, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x0b, 0x0a, 0x09, 0x43, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x0c, 0x0a,
	0x0a, 0x43, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x43,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x73, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x73, 0x67, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x22,
	0x2b, 0x0a, 0x0f, 0x43, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xac, 0x03, 0x0a,
	0x15, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x6d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x70, 0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x73, 0x6c, 0x6f,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x43, 0x61, 0x70, 0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x4b, 0x65, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4b, 0x65, 0x79,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x43, 0x61, 0x70, 0x73, 0x6c,
	0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x6c,
	0x74, 0x67, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x61, 0x6c, 0x74, 0x67, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x61, 0x70, 0x73,
	0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x43,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x12,
	0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x43, 0x53, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x6d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x6d, 0x61,
	0x70, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x6d, 0x61, 0x70, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x51, 0x75,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x10, 0x43, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x25,
	0x0a, 0x0a, 0x43, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x53, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x51, 0x6f, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x43, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x30,
	0x0a, 0x14, 0x43, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x22, 0x2e, 0x0a, 0x12, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x31, 0x0a, 0x10, 0x43, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x52, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x5f, 0x72, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x52,
	0x61, 0x6d, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64,
	0x22, 0x13, 0x0a, 0x11, 0x43, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x65, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x43,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x1a, 0x43, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x43, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x23,
	0x0a, 0x0d, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x15, 0x43, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x43, 0x53, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x19, 0x43,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1c, 0x43,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1e, 0x43, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x14, 0x43, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x49, 0x63,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x43, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x45, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x12, 0x6b,
	0x5f, 0x45, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x22, 0x7d, 0x0a, 0x0c, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x12, 0x6b, 0x5f, 0x45, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x7a, 0x0a, 0x0b, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x18, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf1,
	0x03, 0x0a, 0x0b, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1a, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x3a, 0x0f, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x46, 0x50, 0x53, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x02, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x22, 0x85, 0x02, 0x0a, 0x12, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x4d, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xb8, 0x01,
	0x0a, 0x16, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x2f, 0x0a, 0x0d, 0x43, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x37, 0x0a, 0x07, 0x43, 0x4c, 0x6f,
	0x67, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x43, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x03, 0x0a, 0x13, 0x43, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x40,
	0x0a, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x73,
	0x64, 0x72, 0x1a, 0xa6, 0x02, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x4d, 0x73, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x6a, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x4d, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0xb3, 0x01, 0x0a, 0x0e,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24,
	0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10,
	0x03, 0x2a, 0x60, 0x0a, 0x17, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x02, 0x2a, 0xa3, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x10,
	0x06, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x32, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x33, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x34, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x35, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x36, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x10, 0x37, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10,
	0x38, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x55,
	0x70, 0x10, 0x39, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44,
	0x6f, 0x77, 0x6e, 0x10, 0x3a, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x55, 0x70, 0x10, 0x3b, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x3d, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x3e, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x10, 0x3f, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48,
	0x69, 0x64, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x10, 0x41, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x42, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x10, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x10, 0x45, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x10, 0x46, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x75, 0x6d,
	0x62, 0x6c, 0x65, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x47, 0x12, 0x22,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x4a, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x4b, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x4c, 0x12, 0x2f, 0x0a, 0x2b, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x50, 0x75, 0x6c, 0x73,
	0x65, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x4d, 0x12, 0x34, 0x0a, 0x30,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x4e, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x50, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x10, 0x52, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x53, 0x10, 0x57,
	0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x58, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x52, 0x61, 0x6d, 0x70, 0x10, 0x59,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x5a, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x49,
	0x44, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x5d, 0x12, 0x24, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x10, 0x5e, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x5f, 0x12, 0x37, 0x0a, 0x33,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x60, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x61, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x62,
	0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x63, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x10,
	0x64, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x48, 0x65, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x66, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x67, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x65,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x68, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x69, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48,
	0x49, 0x44, 0x10, 0x6a, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x6b, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x10, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x6f, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x10, 0x70, 0x12, 0x29, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x10, 0x71, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x72,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x10, 0x74, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x10, 0x75, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x76, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x70, 0x10, 0x77, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x78, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x79, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x7a, 0x12, 0x1a, 0x0a, 0x16,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x7b, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x7c, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x65, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x10, 0x7d, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x7e, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x73, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x7f, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x6d, 0x61, 0x70, 0x10, 0x80, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x81, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x75,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x82, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x75, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x83, 0x01, 0x2a, 0x47, 0x0a, 0x0e, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x2a, 0xc0, 0x01, 0x0a, 0x11, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x61, 0x77, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x6f, 0x72, 0x62, 0x69, 0x73, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4f, 0x70, 0x75, 0x73, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x4d, 0x50, 0x33, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x41, 0x41, 0x43, 0x10, 0x05, 0x2a, 0xfa, 0x01, 0x0a, 0x11, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x17, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52,
	0x61, 0x77, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x50, 0x38, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x56, 0x50, 0x39, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x48, 0x32, 0x36, 0x34, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x48, 0x45, 0x56, 0x43, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4f, 0x52, 0x42,
	0x58, 0x31, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4f, 0x52, 0x42, 0x58, 0x32,
	0x10, 0x07, 0x2a, 0x71, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x46, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x65, 0x61, 0x75, 0x74, 0x69,
	0x66, 0x75, 0x6c, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x2a,
	0x65, 0x0a, 0x1e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x10, 0x01, 0x2a, 0x6a, 0x0a, 0x12, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x02, 0x2a, 0xcb, 0x01, 0x0a, 0x12, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x58, 0x31,
	0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x58, 0x32, 0x10, 0x40, 0x12, 0x20,
	0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x80, 0x20,
	0x2a, 0x98, 0x01, 0x0a, 0x1a, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x70, 0x10, 0x78, 0x12, 0x24, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x88, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x04, 0x2a, 0x89, 0x02, 0x0a, 0x17,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x04, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x40, 0x2a, 0x89, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x10, 0x04, 0x2a, 0x44, 0x0a, 0x12, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x0c, 0x45, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x31, 0x36, 0x42, 0x69, 0x74, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x69, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x02, 0x2a,
	0x57, 0x0a, 0x0c, 0x45, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x59, 0x56, 0x31, 0x32, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x10, 0x02, 0x2a, 0xd7, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x75, 0x6d, 0x70, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f,
	0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c,
	0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x06, 0x2a, 0x85, 0x05, 0x0a, 0x11, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x10, 0x09, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x64, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x0c,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x10, 0x0d, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x10,
	0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x64, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x12, 0x2a, 0xd4, 0x02, 0x0a, 0x12, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6c, 0x6f, 0x77, 0x10,
	0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10,
	0x07, 0x2a, 0xa2, 0x05, 0x0a, 0x15, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x46, 0x50, 0x53, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x07,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x53, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x53, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x53, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x53, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x4b, 0x62, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x10, 0x0f, 0x12, 0x27,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4b, 0x62, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x10, 0x11,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x12, 0x2a, 0x5e, 0x0a, 0x0c, 0x45, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x45, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x10, 0x02, 0x42, 0x36, 0x48, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_steam_stream_proto_rawDescOnce sync.Once
	file_steam_stream_proto_rawDescData = file_steam_stream_proto_rawDesc
)

func file_steam_stream_proto_rawDescGZIP() []byte {
	file_steam_stream_proto_rawDescOnce.Do(func() {
		file_steam_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_stream_proto_rawDescData)
	})
	return file_steam_stream_proto_rawDescData
}

var file_steam_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_steam_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_steam_stream_proto_goTypes = []interface{}{
	(EStreamChannel)(0),                                  // 0: steam.EStreamChannel
	(EStreamDiscoveryMessage)(0),                         // 1: steam.EStreamDiscoveryMessage
	(EStreamControlMessage)(0),                           // 2: steam.EStreamControlMessage
	(EStreamVersion)(0),                                  // 3: steam.EStreamVersion
	(EStreamAudioCodec)(0),                               // 4: steam.EStreamAudioCodec
	(EStreamVideoCodec)(0),                               // 5: steam.EStreamVideoCodec
	(EStreamQualityPreference)(0),                        // 6: steam.EStreamQualityPreference
	(EStreamBitrate)(0),                                  // 7: steam.EStreamBitrate
	(EStreamHostPlayAudioPreference)(0),                  // 8: steam.EStreamHostPlayAudioPreference
	(EStreamingDataType)(0),                              // 9: steam.EStreamingDataType
	(EStreamMouseButton)(0),                              // 10: steam.EStreamMouseButton
	(EStreamMouseWheelDirection)(0),                      // 11: steam.EStreamMouseWheelDirection
	(EStreamFramerateLimiter)(0),                         // 12: steam.EStreamFramerateLimiter
	(EStreamActivity)(0),                                 // 13: steam.EStreamActivity
	(EStreamDataMessage)(0),                              // 14: steam.EStreamDataMessage
	(EAudioFormat)(0),                                    // 15: steam.EAudioFormat
	(EVideoFormat)(0),                                    // 16: steam.EVideoFormat
	(EStreamStatsMessage)(0),                             // 17: steam.EStreamStatsMessage
	(EStreamFrameEvent)(0),                               // 18: steam.EStreamFrameEvent
	(EStreamFrameResult)(0),                              // 19: steam.EStreamFrameResult
	(EFrameAccumulatedStat)(0),                           // 20: steam.EFrameAccumulatedStat
	(ELogFileType)(0),                                    // 21: steam.ELogFileType
	(CAuthenticationResponseMsg_AuthenticationResult)(0), // 22: steam.CAuthenticationResponseMsg.AuthenticationResult
	(*CDiscoveryPingRequest)(nil),                        // 23: steam.CDiscoveryPingRequest
	(*CDiscoveryPingResponse)(nil),                       // 24: steam.CDiscoveryPingResponse
	(*CStreamingClientHandshakeInfo)(nil),                // 25: steam.CStreamingClientHandshakeInfo
	(*CClientHandshakeMsg)(nil),                          // 26: steam.CClientHandshakeMsg
	(*CStreamingServerHandshakeInfo)(nil),                // 27: steam.CStreamingServerHandshakeInfo
	(*CServerHandshakeMsg)(nil),                          // 28: steam.CServerHandshakeMsg
	(*CAuthenticationRequestMsg)(nil),                    // 29: steam.CAuthenticationRequestMsg
	(*CAuthenticationResponseMsg)(nil),                   // 30: steam.CAuthenticationResponseMsg
	(*CKeepAliveMsg)(nil),                                // 31: steam.CKeepAliveMsg
	(*CStartNetworkTestMsg)(nil),                         // 32: steam.CStartNetworkTestMsg
	(*CStreamVideoMode)(nil),                             // 33: steam.CStreamVideoMode
	(*CStreamingClientCaps)(nil),                         // 34: steam.CStreamingClientCaps
	(*CStreamingClientConfig)(nil),                       // 35: steam.CStreamingClientConfig
	(*CStreamingServerConfig)(nil),                       // 36: steam.CStreamingServerConfig
	(*CNegotiatedConfig)(nil),                            // 37: steam.CNegotiatedConfig
	(*CNegotiationInitMsg)(nil),                          // 38: steam.CNegotiationInitMsg
	(*CNegotiationSetConfigMsg)(nil),                     // 39: steam.CNegotiationSetConfigMsg
	(*CNegotiationCompleteMsg)(nil),                      // 40: steam.CNegotiationCompleteMsg
	(*CStartAudioDataMsg)(nil),                           // 41: steam.CStartAudioDataMsg
	(*CStopAudioDataMsg)(nil),                            // 42: steam.CStopAudioDataMsg
	(*CStartVideoDataMsg)(nil),                           // 43: steam.CStartVideoDataMsg
	(*CStopVideoDataMsg)(nil),                            // 44: steam.CStopVideoDataMsg
	(*CRecordedInput)(nil),                               // 45: steam.CRecordedInput
	(*CRecordedInputStream)(nil),                         // 46: steam.CRecordedInputStream
	(*CInputLatencyTestMsg)(nil),                         // 47: steam.CInputLatencyTestMsg
	(*CInputTouchFingerDownMsg)(nil),                     // 48: steam.CInputTouchFingerDownMsg
	(*CInputTouchFingerMotionMsg)(nil),                   // 49: steam.CInputTouchFingerMotionMsg
	(*CInputTouchFingerUpMsg)(nil),                       // 50: steam.CInputTouchFingerUpMsg
	(*CInputMouseMotionMsg)(nil),                         // 51: steam.CInputMouseMotionMsg
	(*CInputMouseWheelMsg)(nil),                          // 52: steam.CInputMouseWheelMsg
	(*CInputMouseDownMsg)(nil),                           // 53: steam.CInputMouseDownMsg
	(*CInputMouseUpMsg)(nil),                             // 54: steam.CInputMouseUpMsg
	(*CInputKeyDownMsg)(nil),                             // 55: steam.CInputKeyDownMsg
	(*CInputKeyUpMsg)(nil),                               // 56: steam.CInputKeyUpMsg
	(*CInputTextMsg)(nil),                                // 57: steam.CInputTextMsg
	(*CSetTitleMsg)(nil),                                 // 58: steam.CSetTitleMsg
	(*CSetCaptureSizeMsg)(nil),                           // 59: steam.CSetCaptureSizeMsg
	(*CSetIconMsg)(nil),                                  // 60: steam.CSetIconMsg
	(*CSetFlashStateMsg)(nil),                            // 61: steam.CSetFlashStateMsg
	(*CShowCursorMsg)(nil),                               // 62: steam.CShowCursorMsg
	(*CHideCursorMsg)(nil),                               // 63: steam.CHideCursorMsg
	(*CSetCursorMsg)(nil),                                // 64: steam.CSetCursorMsg
	(*CGetCursorImageMsg)(nil),                           // 65: steam.CGetCursorImageMsg
	(*CSetCursorImageMsg)(nil),                           // 66: steam.CSetCursorImageMsg
	(*CVideoDecoderInfoMsg)(nil),                         // 67: steam.CVideoDecoderInfoMsg
	(*CVideoEncoderInfoMsg)(nil),                         // 68: steam.CVideoEncoderInfoMsg
	(*CPauseMsg)(nil),                                    // 69: steam.CPauseMsg
	(*CResumeMsg)(nil),                                   // 70: steam.CResumeMsg
	(*CEnableHighResCaptureMsg)(nil),                     // 71: steam.CEnableHighResCaptureMsg
	(*CDisableHighResCaptureMsg)(nil),                    // 72: steam.CDisableHighResCaptureMsg
	(*CToggleMagnificationMsg)(nil),                      // 73: steam.CToggleMagnificationMsg
	(*CSetCapslockMsg)(nil),                              // 74: steam.CSetCapslockMsg
	(*CStreamingKeymapEntry)(nil),                        // 75: steam.CStreamingKeymapEntry
	(*CStreamingKeymap)(nil),                             // 76: steam.CStreamingKeymap
	(*CSetKeymapMsg)(nil),                                // 77: steam.CSetKeymapMsg
	(*CStopRequest)(nil),                                 // 78: steam.CStopRequest
	(*CQuitRequest)(nil),                                 // 79: steam.CQuitRequest
	(*CDeleteCursorMsg)(nil),                             // 80: steam.CDeleteCursorMsg
	(*CSetStreamingClientConfig)(nil),                    // 81: steam.CSetStreamingClientConfig
	(*CSetQoSMsg)(nil),                                   // 82: steam.CSetQoSMsg
	(*CSetTargetFramerateMsg)(nil),                       // 83: steam.CSetTargetFramerateMsg
	(*CSetTargetBitrateMsg)(nil),                         // 84: steam.CSetTargetBitrateMsg
	(*COverlayEnabledMsg)(nil),                           // 85: steam.COverlayEnabledMsg
	(*CSetGammaRampMsg)(nil),                             // 86: steam.CSetGammaRampMsg
	(*CSetActivityMsg)(nil),                              // 87: steam.CSetActivityMsg
	(*CSystemSuspendMsg)(nil),                            // 88: steam.CSystemSuspendMsg
	(*CVirtualHereRequestMsg)(nil),                       // 89: steam.CVirtualHereRequestMsg
	(*CVirtualHereReadyMsg)(nil),                         // 90: steam.CVirtualHereReadyMsg
	(*CVirtualHereShareDeviceMsg)(nil),                   // 91: steam.CVirtualHereShareDeviceMsg
	(*CSetSpectatorModeMsg)(nil),                         // 92: steam.CSetSpectatorModeMsg
	(*CRemoteHIDMsg)(nil),                                // 93: steam.CRemoteHIDMsg
	(*CTouchConfigActiveMsg)(nil),                        // 94: steam.CTouchConfigActiveMsg
	(*CGetTouchConfigDataMsg)(nil),                       // 95: steam.CGetTouchConfigDataMsg
	(*CSetTouchConfigDataMsg)(nil),                       // 96: steam.CSetTouchConfigDataMsg
	(*CSaveTouchConfigLayoutMsg)(nil),                    // 97: steam.CSaveTouchConfigLayoutMsg
	(*CTouchActionSetActiveMsg)(nil),                     // 98: steam.CTouchActionSetActiveMsg
	(*CTouchActionSetLayerAddedMsg)(nil),                 // 99: steam.CTouchActionSetLayerAddedMsg
	(*CTouchActionSetLayerRemovedMsg)(nil),               // 100: steam.CTouchActionSetLayerRemovedMsg
	(*CGetTouchIconDataMsg)(nil),                         // 101: steam.CGetTouchIconDataMsg
	(*CSetTouchIconDataMsg)(nil),                         // 102: steam.CSetTouchIconDataMsg
	(*CStreamDataLostMsg)(nil),                           // 103: steam.CStreamDataLostMsg
	(*CAudioFormat)(nil),                                 // 104: steam.CAudioFormat
	(*CVideoFormat)(nil),                                 // 105: steam.CVideoFormat
	(*CFrameEvent)(nil),                                  // 106: steam.CFrameEvent
	(*CFrameStats)(nil),                                  // 107: steam.CFrameStats
	(*CFrameStatAccumulatedValue)(nil),                   // 108: steam.CFrameStatAccumulatedValue
	(*CFrameStatsListMsg)(nil),                           // 109: steam.CFrameStatsListMsg
	(*CStreamingSessionStats)(nil),                       // 110: steam.CStreamingSessionStats
	(*CDebugDumpMsg)(nil),                                // 111: steam.CDebugDumpMsg
	(*CLogMsg)(nil),                                      // 112: steam.CLogMsg
	(*CLogUploadMsg)(nil),                                // 113: steam.CLogUploadMsg
	(*CTransportSignalMsg)(nil),                          // 114: steam.CTransportSignalMsg
	(*CTransportSignalMsg_WebRTCMessage)(nil),            // 115: steam.CTransportSignalMsg.WebRTCMessage
	(*CTransportSignalMsg_WebRTCMessage_Candidate)(nil),  // 116: steam.CTransportSignalMsg.WebRTCMessage.Candidate
}
var file_steam_stream_proto_depIdxs = []int32{
	25,  // 0: steam.CClientHandshakeMsg.info:type_name -> steam.CStreamingClientHandshakeInfo
	27,  // 1: steam.CServerHandshakeMsg.info:type_name -> steam.CStreamingServerHandshakeInfo
	3,   // 2: steam.CAuthenticationRequestMsg.version:type_name -> steam.EStreamVersion
	22,  // 3: steam.CAuthenticationResponseMsg.result:type_name -> steam.CAuthenticationResponseMsg.AuthenticationResult
	3,   // 4: steam.CAuthenticationResponseMsg.version:type_name -> steam.EStreamVersion
	6,   // 5: steam.CStreamingClientConfig.quality:type_name -> steam.EStreamQualityPreference
	8,   // 6: steam.CStreamingServerConfig.host_play_audio:type_name -> steam.EStreamHostPlayAudioPreference
	4,   // 7: steam.CNegotiatedConfig.selected_audio_codec:type_name -> steam.EStreamAudioCodec
	5,   // 8: steam.CNegotiatedConfig.selected_video_codec:type_name -> steam.EStreamVideoCodec
	33,  // 9: steam.CNegotiatedConfig.available_video_modes:type_name -> steam.CStreamVideoMode
	4,   // 10: steam.CNegotiationInitMsg.supported_audio_codecs:type_name -> steam.EStreamAudioCodec
	5,   // 11: steam.CNegotiationInitMsg.supported_video_codecs:type_name -> steam.EStreamVideoCodec
	37,  // 12: steam.CNegotiationSetConfigMsg.config:type_name -> steam.CNegotiatedConfig
	35,  // 13: steam.CNegotiationSetConfigMsg.streaming_client_config:type_name -> steam.CStreamingClientConfig
	34,  // 14: steam.CNegotiationSetConfigMsg.streaming_client_caps:type_name -> steam.CStreamingClientCaps
	4,   // 15: steam.CStartAudioDataMsg.codec:type_name -> steam.EStreamAudioCodec
	5,   // 16: steam.CStartVideoDataMsg.codec:type_name -> steam.EStreamVideoCodec
	2,   // 17: steam.CRecordedInput.type:type_name -> steam.EStreamControlMessage
	48,  // 18: steam.CRecordedInput.finger_down:type_name -> steam.CInputTouchFingerDownMsg
	49,  // 19: steam.CRecordedInput.finger_motion:type_name -> steam.CInputTouchFingerMotionMsg
	50,  // 20: steam.CRecordedInput.finger_up:type_name -> steam.CInputTouchFingerUpMsg
	51,  // 21: steam.CRecordedInput.mouse_motion:type_name -> steam.CInputMouseMotionMsg
	52,  // 22: steam.CRecordedInput.mouse_wheel:type_name -> steam.CInputMouseWheelMsg
	53,  // 23: steam.CRecordedInput.mouse_down:type_name -> steam.CInputMouseDownMsg
	54,  // 24: steam.CRecordedInput.mouse_up:type_name -> steam.CInputMouseUpMsg
	55,  // 25: steam.CRecordedInput.key_down:type_name -> steam.CInputKeyDownMsg
	56,  // 26: steam.CRecordedInput.key_up:type_name -> steam.CInputKeyUpMsg
	57,  // 27: steam.CRecordedInput.text:type_name -> steam.CInputTextMsg
	93,  // 28: steam.CRecordedInput.hid:type_name -> steam.CRemoteHIDMsg
	45,  // 29: steam.CRecordedInputStream.entries:type_name -> steam.CRecordedInput
	11,  // 30: steam.CInputMouseWheelMsg.direction:type_name -> steam.EStreamMouseWheelDirection
	10,  // 31: steam.CInputMouseDownMsg.button:type_name -> steam.EStreamMouseButton
	10,  // 32: steam.CInputMouseUpMsg.button:type_name -> steam.EStreamMouseButton
	75,  // 33: steam.CStreamingKeymap.entries:type_name -> steam.CStreamingKeymapEntry
	76,  // 34: steam.CSetKeymapMsg.keymap:type_name -> steam.CStreamingKeymap
	35,  // 35: steam.CSetStreamingClientConfig.config:type_name -> steam.CStreamingClientConfig
	13,  // 36: steam.CSetActivityMsg.activity:type_name -> steam.EStreamActivity
	15,  // 37: steam.CAudioFormat.format:type_name -> steam.EAudioFormat
	16,  // 38: steam.CVideoFormat.format:type_name -> steam.EVideoFormat
	18,  // 39: steam.CFrameEvent.event_id:type_name -> steam.EStreamFrameEvent
	106, // 40: steam.CFrameStats.events:type_name -> steam.CFrameEvent
	19,  // 41: steam.CFrameStats.result:type_name -> steam.EStreamFrameResult
	20,  // 42: steam.CFrameStatAccumulatedValue.stat_type:type_name -> steam.EFrameAccumulatedStat
	9,   // 43: steam.CFrameStatsListMsg.data_type:type_name -> steam.EStreamingDataType
	107, // 44: steam.CFrameStatsListMsg.stats:type_name -> steam.CFrameStats
	108, // 45: steam.CFrameStatsListMsg.accumulated_stats:type_name -> steam.CFrameStatAccumulatedValue
	21,  // 46: steam.CLogUploadMsg.type:type_name -> steam.ELogFileType
	115, // 47: steam.CTransportSignalMsg.webrtc:type_name -> steam.CTransportSignalMsg.WebRTCMessage
	116, // 48: steam.CTransportSignalMsg.WebRTCMessage.candidate:type_name -> steam.CTransportSignalMsg.WebRTCMessage.Candidate
	49,  // [49:49] is the sub-list for method output_type
	49,  // [49:49] is the sub-list for method input_type
	49,  // [49:49] is the sub-list for extension type_name
	49,  // [49:49] is the sub-list for extension extendee
	0,   // [0:49] is the sub-list for field type_name
}

func init() { file_steam_stream_proto_init() }
func file_steam_stream_proto_init() {
	if File_steam_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steam_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDiscoveryPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDiscoveryPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingClientHandshakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientHandshakeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingServerHandshakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerHandshakeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAuthenticationRequestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAuthenticationResponseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CKeepAliveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStartNetworkTestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamVideoMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingClientCaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNegotiatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNegotiationInitMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNegotiationSetConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNegotiationCompleteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStartAudioDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStopAudioDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStartVideoDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStopVideoDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRecordedInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRecordedInputStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputLatencyTestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputTouchFingerDownMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputTouchFingerMotionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputTouchFingerUpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputMouseMotionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputMouseWheelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputMouseDownMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputMouseUpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputKeyDownMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputKeyUpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CInputTextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetTitleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetCaptureSizeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetIconMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetFlashStateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CShowCursorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHideCursorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetCursorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGetCursorImageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetCursorImageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideoDecoderInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideoEncoderInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPauseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResumeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEnableHighResCaptureMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDisableHighResCaptureMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CToggleMagnificationMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetCapslockMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingKeymapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingKeymap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetKeymapMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQuitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDeleteCursorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetStreamingClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetQoSMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetTargetFramerateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetTargetBitrateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COverlayEnabledMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetGammaRampMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetActivityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSystemSuspendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVirtualHereRequestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVirtualHereReadyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVirtualHereShareDeviceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetSpectatorModeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteHIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTouchConfigActiveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGetTouchConfigDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetTouchConfigDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSaveTouchConfigLayoutMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTouchActionSetActiveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTouchActionSetLayerAddedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTouchActionSetLayerRemovedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGetTouchIconDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSetTouchIconDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamDataLostMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAudioFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideoFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFrameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFrameStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFrameStatAccumulatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFrameStatsListMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStreamingSessionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDebugDumpMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLogMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLogUploadMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTransportSignalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTransportSignalMsg_WebRTCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_stream_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTransportSignalMsg_WebRTCMessage_Candidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steam_stream_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*CRecordedInput_FingerDown)(nil),
		(*CRecordedInput_FingerMotion)(nil),
		(*CRecordedInput_FingerUp)(nil),
		(*CRecordedInput_MouseMotion)(nil),
		(*CRecordedInput_MouseWheel)(nil),
		(*CRecordedInput_MouseDown)(nil),
		(*CRecordedInput_MouseUp)(nil),
		(*CRecordedInput_KeyDown)(nil),
		(*CRecordedInput_KeyUp)(nil),
		(*CRecordedInput_Text)(nil),
		(*CRecordedInput_Hid)(nil),
	}
	file_steam_stream_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*CTransportSignalMsg_WebRTCMessage_Greeting)(nil),
		(*CTransportSignalMsg_WebRTCMessage_Offer)(nil),
		(*CTransportSignalMsg_WebRTCMessage_Answer)(nil),
		(*CTransportSignalMsg_WebRTCMessage_Candidate_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_stream_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_stream_proto_goTypes,
		DependencyIndexes: file_steam_stream_proto_depIdxs,
		EnumInfos:         file_steam_stream_proto_enumTypes,
		MessageInfos:      file_steam_stream_proto_msgTypes,
	}.Build()
	File_steam_stream_proto = out.File
	file_steam_stream_proto_rawDesc = nil
	file_steam_stream_proto_goTypes = nil
	file_steam_stream_proto_depIdxs = nil
}
