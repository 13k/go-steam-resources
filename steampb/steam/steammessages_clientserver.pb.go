// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/steammessages_clientserver.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EMMSLobbyStatus int32

const (
	EMMSLobbyStatus_k_EMMSLobbyStatusInvalid      EMMSLobbyStatus = 0
	EMMSLobbyStatus_k_EMMSLobbyStatusExists       EMMSLobbyStatus = 1
	EMMSLobbyStatus_k_EMMSLobbyStatusDoesNotExist EMMSLobbyStatus = 2
	EMMSLobbyStatus_k_EMMSLobbyStatusNotAMember   EMMSLobbyStatus = 3
)

// Enum value maps for EMMSLobbyStatus.
var (
	EMMSLobbyStatus_name = map[int32]string{
		0: "k_EMMSLobbyStatusInvalid",
		1: "k_EMMSLobbyStatusExists",
		2: "k_EMMSLobbyStatusDoesNotExist",
		3: "k_EMMSLobbyStatusNotAMember",
	}
	EMMSLobbyStatus_value = map[string]int32{
		"k_EMMSLobbyStatusInvalid":      0,
		"k_EMMSLobbyStatusExists":       1,
		"k_EMMSLobbyStatusDoesNotExist": 2,
		"k_EMMSLobbyStatusNotAMember":   3,
	}
)

func (x EMMSLobbyStatus) Enum() *EMMSLobbyStatus {
	p := new(EMMSLobbyStatus)
	*p = x
	return p
}

func (x EMMSLobbyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMMSLobbyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_clientserver_proto_enumTypes[0].Descriptor()
}

func (EMMSLobbyStatus) Type() protoreflect.EnumType {
	return &file_steam_steammessages_clientserver_proto_enumTypes[0]
}

func (x EMMSLobbyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMMSLobbyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMMSLobbyStatus(num)
	return nil
}

// Deprecated: Use EMMSLobbyStatus.Descriptor instead.
func (EMMSLobbyStatus) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{0}
}

type CMsgClientUDSP2PSessionStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidRemote *uint64 `protobuf:"fixed64,1,opt,name=steamid_remote,json=steamidRemote" json:"steamid_remote,omitempty"`
	Appid         *int32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgClientUDSP2PSessionStarted) Reset() {
	*x = CMsgClientUDSP2PSessionStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUDSP2PSessionStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUDSP2PSessionStarted) ProtoMessage() {}

func (x *CMsgClientUDSP2PSessionStarted) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUDSP2PSessionStarted.ProtoReflect.Descriptor instead.
func (*CMsgClientUDSP2PSessionStarted) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientUDSP2PSessionStarted) GetSteamidRemote() uint64 {
	if x != nil && x.SteamidRemote != nil {
		return *x.SteamidRemote
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionStarted) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgClientUDSP2PSessionEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidRemote    *uint64 `protobuf:"fixed64,1,opt,name=steamid_remote,json=steamidRemote" json:"steamid_remote,omitempty"`
	Appid            *int32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	SessionLengthSec *int32  `protobuf:"varint,3,opt,name=session_length_sec,json=sessionLengthSec" json:"session_length_sec,omitempty"`
	SessionError     *int32  `protobuf:"varint,4,opt,name=session_error,json=sessionError" json:"session_error,omitempty"`
	Nattype          *int32  `protobuf:"varint,5,opt,name=nattype" json:"nattype,omitempty"`
	BytesRecv        *int32  `protobuf:"varint,6,opt,name=bytes_recv,json=bytesRecv" json:"bytes_recv,omitempty"`
	BytesSent        *int32  `protobuf:"varint,7,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	BytesSentRelay   *int32  `protobuf:"varint,8,opt,name=bytes_sent_relay,json=bytesSentRelay" json:"bytes_sent_relay,omitempty"`
	BytesRecvRelay   *int32  `protobuf:"varint,9,opt,name=bytes_recv_relay,json=bytesRecvRelay" json:"bytes_recv_relay,omitempty"`
	TimeToConnectMs  *int32  `protobuf:"varint,10,opt,name=time_to_connect_ms,json=timeToConnectMs" json:"time_to_connect_ms,omitempty"`
}

func (x *CMsgClientUDSP2PSessionEnded) Reset() {
	*x = CMsgClientUDSP2PSessionEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUDSP2PSessionEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUDSP2PSessionEnded) ProtoMessage() {}

func (x *CMsgClientUDSP2PSessionEnded) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUDSP2PSessionEnded.ProtoReflect.Descriptor instead.
func (*CMsgClientUDSP2PSessionEnded) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientUDSP2PSessionEnded) GetSteamidRemote() uint64 {
	if x != nil && x.SteamidRemote != nil {
		return *x.SteamidRemote
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetSessionLengthSec() int32 {
	if x != nil && x.SessionLengthSec != nil {
		return *x.SessionLengthSec
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetSessionError() int32 {
	if x != nil && x.SessionError != nil {
		return *x.SessionError
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetNattype() int32 {
	if x != nil && x.Nattype != nil {
		return *x.Nattype
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetBytesRecv() int32 {
	if x != nil && x.BytesRecv != nil {
		return *x.BytesRecv
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetBytesSent() int32 {
	if x != nil && x.BytesSent != nil {
		return *x.BytesSent
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetBytesSentRelay() int32 {
	if x != nil && x.BytesSentRelay != nil {
		return *x.BytesSentRelay
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetBytesRecvRelay() int32 {
	if x != nil && x.BytesRecvRelay != nil {
		return *x.BytesRecvRelay
	}
	return 0
}

func (x *CMsgClientUDSP2PSessionEnded) GetTimeToConnectMs() int32 {
	if x != nil && x.TimeToConnectMs != nil {
		return *x.TimeToConnectMs
	}
	return 0
}

type CMsgClientRegisterAuthTicketWithCM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion  *uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Ticket           []byte  `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	ClientInstanceId *uint64 `protobuf:"varint,4,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
}

func (x *CMsgClientRegisterAuthTicketWithCM) Reset() {
	*x = CMsgClientRegisterAuthTicketWithCM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRegisterAuthTicketWithCM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRegisterAuthTicketWithCM) ProtoMessage() {}

func (x *CMsgClientRegisterAuthTicketWithCM) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRegisterAuthTicketWithCM.ProtoReflect.Descriptor instead.
func (*CMsgClientRegisterAuthTicketWithCM) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgClientRegisterAuthTicketWithCM) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

type CMsgClientTicketAuthComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId              *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	GameId               *uint64 `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Estate               *uint32 `protobuf:"varint,3,opt,name=estate" json:"estate,omitempty"`
	EauthSessionResponse *uint32 `protobuf:"varint,4,opt,name=eauth_session_response,json=eauthSessionResponse" json:"eauth_session_response,omitempty"`
	DEPRECATEDTicket     []byte  `protobuf:"bytes,5,opt,name=DEPRECATED_ticket,json=DEPRECATEDTicket" json:"DEPRECATED_ticket,omitempty"`
	TicketCrc            *uint32 `protobuf:"varint,6,opt,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	TicketSequence       *uint32 `protobuf:"varint,7,opt,name=ticket_sequence,json=ticketSequence" json:"ticket_sequence,omitempty"`
	OwnerSteamId         *uint64 `protobuf:"fixed64,8,opt,name=owner_steam_id,json=ownerSteamId" json:"owner_steam_id,omitempty"`
}

func (x *CMsgClientTicketAuthComplete) Reset() {
	*x = CMsgClientTicketAuthComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientTicketAuthComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientTicketAuthComplete) ProtoMessage() {}

func (x *CMsgClientTicketAuthComplete) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientTicketAuthComplete.ProtoReflect.Descriptor instead.
func (*CMsgClientTicketAuthComplete) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientTicketAuthComplete) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetEstate() uint32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetEauthSessionResponse() uint32 {
	if x != nil && x.EauthSessionResponse != nil {
		return *x.EauthSessionResponse
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetDEPRECATEDTicket() []byte {
	if x != nil {
		return x.DEPRECATEDTicket
	}
	return nil
}

func (x *CMsgClientTicketAuthComplete) GetTicketCrc() uint32 {
	if x != nil && x.TicketCrc != nil {
		return *x.TicketCrc
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetTicketSequence() uint32 {
	if x != nil && x.TicketSequence != nil {
		return *x.TicketSequence
	}
	return 0
}

func (x *CMsgClientTicketAuthComplete) GetOwnerSteamId() uint64 {
	if x != nil && x.OwnerSteamId != nil {
		return *x.OwnerSteamId
	}
	return 0
}

type CMsgClientCMList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmAddresses               []uint32 `protobuf:"varint,1,rep,name=cm_addresses,json=cmAddresses" json:"cm_addresses,omitempty"`
	CmPorts                   []uint32 `protobuf:"varint,2,rep,name=cm_ports,json=cmPorts" json:"cm_ports,omitempty"`
	CmWebsocketAddresses      []string `protobuf:"bytes,3,rep,name=cm_websocket_addresses,json=cmWebsocketAddresses" json:"cm_websocket_addresses,omitempty"`
	PercentDefaultToWebsocket *uint32  `protobuf:"varint,4,opt,name=percent_default_to_websocket,json=percentDefaultToWebsocket" json:"percent_default_to_websocket,omitempty"`
}

func (x *CMsgClientCMList) Reset() {
	*x = CMsgClientCMList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCMList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCMList) ProtoMessage() {}

func (x *CMsgClientCMList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCMList.ProtoReflect.Descriptor instead.
func (*CMsgClientCMList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientCMList) GetCmAddresses() []uint32 {
	if x != nil {
		return x.CmAddresses
	}
	return nil
}

func (x *CMsgClientCMList) GetCmPorts() []uint32 {
	if x != nil {
		return x.CmPorts
	}
	return nil
}

func (x *CMsgClientCMList) GetCmWebsocketAddresses() []string {
	if x != nil {
		return x.CmWebsocketAddresses
	}
	return nil
}

func (x *CMsgClientCMList) GetPercentDefaultToWebsocket() uint32 {
	if x != nil && x.PercentDefaultToWebsocket != nil {
		return *x.PercentDefaultToWebsocket
	}
	return 0
}

type CMsgClientP2PConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdDest     *uint64 `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc      *uint64 `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	AppId           *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Candidate       []byte  `protobuf:"bytes,4,opt,name=candidate" json:"candidate,omitempty"`
	ConnectionIdSrc *uint64 `protobuf:"fixed64,5,opt,name=connection_id_src,json=connectionIdSrc" json:"connection_id_src,omitempty"`
	Rendezvous      []byte  `protobuf:"bytes,6,opt,name=rendezvous" json:"rendezvous,omitempty"`
}

func (x *CMsgClientP2PConnectionInfo) Reset() {
	*x = CMsgClientP2PConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientP2PConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientP2PConnectionInfo) ProtoMessage() {}

func (x *CMsgClientP2PConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientP2PConnectionInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientP2PConnectionInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientP2PConnectionInfo) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetCandidate() []byte {
	if x != nil {
		return x.Candidate
	}
	return nil
}

func (x *CMsgClientP2PConnectionInfo) GetConnectionIdSrc() uint64 {
	if x != nil && x.ConnectionIdSrc != nil {
		return *x.ConnectionIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionInfo) GetRendezvous() []byte {
	if x != nil {
		return x.Rendezvous
	}
	return nil
}

type CMsgClientP2PConnectionFailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdDest      *uint64 `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc       *uint64 `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	AppId            *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Ep2PSessionError *uint32 `protobuf:"varint,4,opt,name=ep2p_session_error,json=ep2pSessionError" json:"ep2p_session_error,omitempty"`
	ConnectionIdDest *uint64 `protobuf:"fixed64,5,opt,name=connection_id_dest,json=connectionIdDest" json:"connection_id_dest,omitempty"`
	CloseReason      *uint32 `protobuf:"varint,7,opt,name=close_reason,json=closeReason" json:"close_reason,omitempty"`
	CloseMessage     *string `protobuf:"bytes,8,opt,name=close_message,json=closeMessage" json:"close_message,omitempty"`
}

func (x *CMsgClientP2PConnectionFailInfo) Reset() {
	*x = CMsgClientP2PConnectionFailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientP2PConnectionFailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientP2PConnectionFailInfo) ProtoMessage() {}

func (x *CMsgClientP2PConnectionFailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientP2PConnectionFailInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientP2PConnectionFailInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientP2PConnectionFailInfo) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetEp2PSessionError() uint32 {
	if x != nil && x.Ep2PSessionError != nil {
		return *x.Ep2PSessionError
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetConnectionIdDest() uint64 {
	if x != nil && x.ConnectionIdDest != nil {
		return *x.ConnectionIdDest
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetCloseReason() uint32 {
	if x != nil && x.CloseReason != nil {
		return *x.CloseReason
	}
	return 0
}

func (x *CMsgClientP2PConnectionFailInfo) GetCloseMessage() string {
	if x != nil && x.CloseMessage != nil {
		return *x.CloseMessage
	}
	return ""
}

type CMsgClientNetworkingCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyData []byte  `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	AppId   *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientNetworkingCertRequest) Reset() {
	*x = CMsgClientNetworkingCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNetworkingCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingCertRequest) ProtoMessage() {}

func (x *CMsgClientNetworkingCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingCertRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingCertRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientNetworkingCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgClientNetworkingCertRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientNetworkingCertReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert        []byte  `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	CaKeyId     *uint64 `protobuf:"fixed64,5,opt,name=ca_key_id,json=caKeyId" json:"ca_key_id,omitempty"`
	CaSignature []byte  `protobuf:"bytes,6,opt,name=ca_signature,json=caSignature" json:"ca_signature,omitempty"`
}

func (x *CMsgClientNetworkingCertReply) Reset() {
	*x = CMsgClientNetworkingCertReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNetworkingCertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingCertReply) ProtoMessage() {}

func (x *CMsgClientNetworkingCertReply) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingCertReply.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingCertReply) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientNetworkingCertReply) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgClientNetworkingCertReply) GetCaKeyId() uint64 {
	if x != nil && x.CaKeyId != nil {
		return *x.CaKeyId
	}
	return 0
}

func (x *CMsgClientNetworkingCertReply) GetCaSignature() []byte {
	if x != nil {
		return x.CaSignature
	}
	return nil
}

type CMsgClientNetworkingMobileCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientNetworkingMobileCertRequest) Reset() {
	*x = CMsgClientNetworkingMobileCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNetworkingMobileCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingMobileCertRequest) ProtoMessage() {}

func (x *CMsgClientNetworkingMobileCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingMobileCertRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingMobileCertRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientNetworkingMobileCertRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientNetworkingMobileCertReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodedCert *string `protobuf:"bytes,1,opt,name=encoded_cert,json=encodedCert" json:"encoded_cert,omitempty"`
}

func (x *CMsgClientNetworkingMobileCertReply) Reset() {
	*x = CMsgClientNetworkingMobileCertReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientNetworkingMobileCertReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientNetworkingMobileCertReply) ProtoMessage() {}

func (x *CMsgClientNetworkingMobileCertReply) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientNetworkingMobileCertReply.ProtoReflect.Descriptor instead.
func (*CMsgClientNetworkingMobileCertReply) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientNetworkingMobileCertReply) GetEncodedCert() string {
	if x != nil && x.EncodedCert != nil {
		return *x.EncodedCert
	}
	return ""
}

type CMsgClientGetAppOwnershipTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientGetAppOwnershipTicket) Reset() {
	*x = CMsgClientGetAppOwnershipTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetAppOwnershipTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAppOwnershipTicket) ProtoMessage() {}

func (x *CMsgClientGetAppOwnershipTicket) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAppOwnershipTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAppOwnershipTicket) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientGetAppOwnershipTicket) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientGetAppOwnershipTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId   *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Ticket  []byte  `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
}

// Default values for CMsgClientGetAppOwnershipTicketResponse fields.
const (
	Default_CMsgClientGetAppOwnershipTicketResponse_Eresult = uint32(2)
)

func (x *CMsgClientGetAppOwnershipTicketResponse) Reset() {
	*x = CMsgClientGetAppOwnershipTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetAppOwnershipTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAppOwnershipTicketResponse) ProtoMessage() {}

func (x *CMsgClientGetAppOwnershipTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAppOwnershipTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAppOwnershipTicketResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetAppOwnershipTicketResponse_Eresult
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientGetAppOwnershipTicketResponse) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type CMsgClientSessionToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *uint64 `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
}

func (x *CMsgClientSessionToken) Reset() {
	*x = CMsgClientSessionToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSessionToken) ProtoMessage() {}

func (x *CMsgClientSessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSessionToken.ProtoReflect.Descriptor instead.
func (*CMsgClientSessionToken) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientSessionToken) GetToken() uint64 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

type CMsgClientGameConnectTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTokensToKeep *uint32  `protobuf:"varint,1,opt,name=max_tokens_to_keep,json=maxTokensToKeep,def=10" json:"max_tokens_to_keep,omitempty"`
	Tokens          [][]byte `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
}

// Default values for CMsgClientGameConnectTokens fields.
const (
	Default_CMsgClientGameConnectTokens_MaxTokensToKeep = uint32(10)
)

func (x *CMsgClientGameConnectTokens) Reset() {
	*x = CMsgClientGameConnectTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGameConnectTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGameConnectTokens) ProtoMessage() {}

func (x *CMsgClientGameConnectTokens) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGameConnectTokens.ProtoReflect.Descriptor instead.
func (*CMsgClientGameConnectTokens) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientGameConnectTokens) GetMaxTokensToKeep() uint32 {
	if x != nil && x.MaxTokensToKeep != nil {
		return *x.MaxTokensToKeep
	}
	return Default_CMsgClientGameConnectTokens_MaxTokensToKeep
}

func (x *CMsgClientGameConnectTokens) GetTokens() [][]byte {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CMsgGSServerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppIdServed             *uint32 `protobuf:"varint,1,opt,name=app_id_served,json=appIdServed" json:"app_id_served,omitempty"`
	Flags                   *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	DeprecatedGameIpAddress *uint32 `protobuf:"varint,3,opt,name=deprecated_game_ip_address,json=deprecatedGameIpAddress" json:"deprecated_game_ip_address,omitempty"`
	GamePort                *uint32 `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	GameDir                 *string `protobuf:"bytes,5,opt,name=game_dir,json=gameDir" json:"game_dir,omitempty"`
	GameVersion             *string `protobuf:"bytes,6,opt,name=game_version,json=gameVersion" json:"game_version,omitempty"`
	GameQueryPort           *uint32 `protobuf:"varint,7,opt,name=game_query_port,json=gameQueryPort" json:"game_query_port,omitempty"`
}

func (x *CMsgGSServerType) Reset() {
	*x = CMsgGSServerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSServerType) ProtoMessage() {}

func (x *CMsgGSServerType) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSServerType.ProtoReflect.Descriptor instead.
func (*CMsgGSServerType) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGSServerType) GetAppIdServed() uint32 {
	if x != nil && x.AppIdServed != nil {
		return *x.AppIdServed
	}
	return 0
}

func (x *CMsgGSServerType) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGSServerType) GetDeprecatedGameIpAddress() uint32 {
	if x != nil && x.DeprecatedGameIpAddress != nil {
		return *x.DeprecatedGameIpAddress
	}
	return 0
}

func (x *CMsgGSServerType) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGSServerType) GetGameDir() string {
	if x != nil && x.GameDir != nil {
		return *x.GameDir
	}
	return ""
}

func (x *CMsgGSServerType) GetGameVersion() string {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return ""
}

func (x *CMsgGSServerType) GetGameQueryPort() uint32 {
	if x != nil && x.GameQueryPort != nil {
		return *x.GameQueryPort
	}
	return 0
}

type CMsgGSStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSecure *bool `protobuf:"varint,1,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
}

func (x *CMsgGSStatusReply) Reset() {
	*x = CMsgGSStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSStatusReply) ProtoMessage() {}

func (x *CMsgGSStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSStatusReply.ProtoReflect.Descriptor instead.
func (*CMsgGSStatusReply) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgGSStatusReply) GetIsSecure() bool {
	if x != nil && x.IsSecure != nil {
		return *x.IsSecure
	}
	return false
}

type CMsgGSPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgGSPlayerList_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgGSPlayerList) Reset() {
	*x = CMsgGSPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSPlayerList) ProtoMessage() {}

func (x *CMsgGSPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSPlayerList.ProtoReflect.Descriptor instead.
func (*CMsgGSPlayerList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgGSPlayerList) GetPlayers() []*CMsgGSPlayerList_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGSUserPlaying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId            *uint64        `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	DeprecatedPublicIp *uint32        `protobuf:"varint,2,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Token              []byte         `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	PublicIp           *CMsgIPAddress `protobuf:"bytes,4,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgGSUserPlaying) Reset() {
	*x = CMsgGSUserPlaying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSUserPlaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSUserPlaying) ProtoMessage() {}

func (x *CMsgGSUserPlaying) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSUserPlaying.ProtoReflect.Descriptor instead.
func (*CMsgGSUserPlaying) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgGSUserPlaying) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSUserPlaying) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgGSUserPlaying) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgGSUserPlaying) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgGSDisconnectNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CMsgGSDisconnectNotice) Reset() {
	*x = CMsgGSDisconnectNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSDisconnectNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSDisconnectNotice) ProtoMessage() {}

func (x *CMsgGSDisconnectNotice) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSDisconnectNotice.ProtoReflect.Descriptor instead.
func (*CMsgGSDisconnectNotice) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgGSDisconnectNotice) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgClientGamesPlayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamesPlayed         []*CMsgClientGamesPlayed_GamePlayed `protobuf:"bytes,1,rep,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	ClientOsType        *uint32                             `protobuf:"varint,2,opt,name=client_os_type,json=clientOsType" json:"client_os_type,omitempty"`
	CloudGamingPlatform *uint32                             `protobuf:"varint,3,opt,name=cloud_gaming_platform,json=cloudGamingPlatform" json:"cloud_gaming_platform,omitempty"`
}

func (x *CMsgClientGamesPlayed) Reset() {
	*x = CMsgClientGamesPlayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGamesPlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGamesPlayed) ProtoMessage() {}

func (x *CMsgClientGamesPlayed) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGamesPlayed.ProtoReflect.Descriptor instead.
func (*CMsgClientGamesPlayed) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientGamesPlayed) GetGamesPlayed() []*CMsgClientGamesPlayed_GamePlayed {
	if x != nil {
		return x.GamesPlayed
	}
	return nil
}

func (x *CMsgClientGamesPlayed) GetClientOsType() uint32 {
	if x != nil && x.ClientOsType != nil {
		return *x.ClientOsType
	}
	return 0
}

func (x *CMsgClientGamesPlayed) GetCloudGamingPlatform() uint32 {
	if x != nil && x.CloudGamingPlatform != nil {
		return *x.CloudGamingPlatform
	}
	return 0
}

type CMsgGSApprove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId      *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	OwnerSteamId *uint64 `protobuf:"fixed64,2,opt,name=owner_steam_id,json=ownerSteamId" json:"owner_steam_id,omitempty"`
}

func (x *CMsgGSApprove) Reset() {
	*x = CMsgGSApprove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSApprove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSApprove) ProtoMessage() {}

func (x *CMsgGSApprove) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSApprove.ProtoReflect.Descriptor instead.
func (*CMsgGSApprove) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgGSApprove) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSApprove) GetOwnerSteamId() uint64 {
	if x != nil && x.OwnerSteamId != nil {
		return *x.OwnerSteamId
	}
	return 0
}

type CMsgGSDeny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	EdenyReason *int32  `protobuf:"varint,2,opt,name=edeny_reason,json=edenyReason" json:"edeny_reason,omitempty"`
	DenyString  *string `protobuf:"bytes,3,opt,name=deny_string,json=denyString" json:"deny_string,omitempty"`
}

func (x *CMsgGSDeny) Reset() {
	*x = CMsgGSDeny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSDeny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSDeny) ProtoMessage() {}

func (x *CMsgGSDeny) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSDeny.ProtoReflect.Descriptor instead.
func (*CMsgGSDeny) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgGSDeny) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSDeny) GetEdenyReason() int32 {
	if x != nil && x.EdenyReason != nil {
		return *x.EdenyReason
	}
	return 0
}

func (x *CMsgGSDeny) GetDenyString() string {
	if x != nil && x.DenyString != nil {
		return *x.DenyString
	}
	return ""
}

type CMsgGSKick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	EdenyReason *int32  `protobuf:"varint,2,opt,name=edeny_reason,json=edenyReason" json:"edeny_reason,omitempty"`
}

func (x *CMsgGSKick) Reset() {
	*x = CMsgGSKick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSKick) ProtoMessage() {}

func (x *CMsgGSKick) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSKick.ProtoReflect.Descriptor instead.
func (*CMsgGSKick) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGSKick) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSKick) GetEdenyReason() int32 {
	if x != nil && x.EdenyReason != nil {
		return *x.EdenyReason
	}
	return 0
}

type CMsgClientAuthList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokensLeft               *uint32           `protobuf:"varint,1,opt,name=tokens_left,json=tokensLeft" json:"tokens_left,omitempty"`
	LastRequestSeq           *uint32           `protobuf:"varint,2,opt,name=last_request_seq,json=lastRequestSeq" json:"last_request_seq,omitempty"`
	LastRequestSeqFromServer *uint32           `protobuf:"varint,3,opt,name=last_request_seq_from_server,json=lastRequestSeqFromServer" json:"last_request_seq_from_server,omitempty"`
	Tickets                  []*CMsgAuthTicket `protobuf:"bytes,4,rep,name=tickets" json:"tickets,omitempty"`
	AppIds                   []uint32          `protobuf:"varint,5,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	MessageSequence          *uint32           `protobuf:"varint,6,opt,name=message_sequence,json=messageSequence" json:"message_sequence,omitempty"`
}

func (x *CMsgClientAuthList) Reset() {
	*x = CMsgClientAuthList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAuthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthList) ProtoMessage() {}

func (x *CMsgClientAuthList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthList.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientAuthList) GetTokensLeft() uint32 {
	if x != nil && x.TokensLeft != nil {
		return *x.TokensLeft
	}
	return 0
}

func (x *CMsgClientAuthList) GetLastRequestSeq() uint32 {
	if x != nil && x.LastRequestSeq != nil {
		return *x.LastRequestSeq
	}
	return 0
}

func (x *CMsgClientAuthList) GetLastRequestSeqFromServer() uint32 {
	if x != nil && x.LastRequestSeqFromServer != nil {
		return *x.LastRequestSeqFromServer
	}
	return 0
}

func (x *CMsgClientAuthList) GetTickets() []*CMsgAuthTicket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *CMsgClientAuthList) GetAppIds() []uint32 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *CMsgClientAuthList) GetMessageSequence() uint32 {
	if x != nil && x.MessageSequence != nil {
		return *x.MessageSequence
	}
	return 0
}

type CMsgClientAuthListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketCrc       []uint32 `protobuf:"varint,1,rep,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	AppIds          []uint32 `protobuf:"varint,2,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	MessageSequence *uint32  `protobuf:"varint,3,opt,name=message_sequence,json=messageSequence" json:"message_sequence,omitempty"`
}

func (x *CMsgClientAuthListAck) Reset() {
	*x = CMsgClientAuthListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAuthListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthListAck) ProtoMessage() {}

func (x *CMsgClientAuthListAck) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthListAck.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthListAck) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientAuthListAck) GetTicketCrc() []uint32 {
	if x != nil {
		return x.TicketCrc
	}
	return nil
}

func (x *CMsgClientAuthListAck) GetAppIds() []uint32 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *CMsgClientAuthListAck) GetMessageSequence() uint32 {
	if x != nil && x.MessageSequence != nil {
		return *x.MessageSequence
	}
	return 0
}

type CMsgClientLicenseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult  *int32                           `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Licenses []*CMsgClientLicenseList_License `protobuf:"bytes,2,rep,name=licenses" json:"licenses,omitempty"`
}

// Default values for CMsgClientLicenseList fields.
const (
	Default_CMsgClientLicenseList_Eresult = int32(2)
)

func (x *CMsgClientLicenseList) Reset() {
	*x = CMsgClientLicenseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLicenseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLicenseList) ProtoMessage() {}

func (x *CMsgClientLicenseList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLicenseList.ProtoReflect.Descriptor instead.
func (*CMsgClientLicenseList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientLicenseList) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLicenseList_Eresult
}

func (x *CMsgClientLicenseList) GetLicenses() []*CMsgClientLicenseList_License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type CMsgClientLBSSetScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId             *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LeaderboardId     *int32  `protobuf:"varint,2,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	Score             *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Details           []byte  `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	UploadScoreMethod *int32  `protobuf:"varint,5,opt,name=upload_score_method,json=uploadScoreMethod" json:"upload_score_method,omitempty"`
}

func (x *CMsgClientLBSSetScore) Reset() {
	*x = CMsgClientLBSSetScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSSetScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSSetScore) ProtoMessage() {}

func (x *CMsgClientLBSSetScore) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSSetScore.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSSetScore) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgClientLBSSetScore) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientLBSSetScore) GetLeaderboardId() int32 {
	if x != nil && x.LeaderboardId != nil {
		return *x.LeaderboardId
	}
	return 0
}

func (x *CMsgClientLBSSetScore) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgClientLBSSetScore) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CMsgClientLBSSetScore) GetUploadScoreMethod() int32 {
	if x != nil && x.UploadScoreMethod != nil {
		return *x.UploadScoreMethod
	}
	return 0
}

type CMsgClientLBSSetScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult               *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	LeaderboardEntryCount *int32 `protobuf:"varint,2,opt,name=leaderboard_entry_count,json=leaderboardEntryCount" json:"leaderboard_entry_count,omitempty"`
	ScoreChanged          *bool  `protobuf:"varint,3,opt,name=score_changed,json=scoreChanged" json:"score_changed,omitempty"`
	GlobalRankPrevious    *int32 `protobuf:"varint,4,opt,name=global_rank_previous,json=globalRankPrevious" json:"global_rank_previous,omitempty"`
	GlobalRankNew         *int32 `protobuf:"varint,5,opt,name=global_rank_new,json=globalRankNew" json:"global_rank_new,omitempty"`
}

// Default values for CMsgClientLBSSetScoreResponse fields.
const (
	Default_CMsgClientLBSSetScoreResponse_Eresult = int32(2)
)

func (x *CMsgClientLBSSetScoreResponse) Reset() {
	*x = CMsgClientLBSSetScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSSetScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSSetScoreResponse) ProtoMessage() {}

func (x *CMsgClientLBSSetScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSSetScoreResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSSetScoreResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientLBSSetScoreResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLBSSetScoreResponse_Eresult
}

func (x *CMsgClientLBSSetScoreResponse) GetLeaderboardEntryCount() int32 {
	if x != nil && x.LeaderboardEntryCount != nil {
		return *x.LeaderboardEntryCount
	}
	return 0
}

func (x *CMsgClientLBSSetScoreResponse) GetScoreChanged() bool {
	if x != nil && x.ScoreChanged != nil {
		return *x.ScoreChanged
	}
	return false
}

func (x *CMsgClientLBSSetScoreResponse) GetGlobalRankPrevious() int32 {
	if x != nil && x.GlobalRankPrevious != nil {
		return *x.GlobalRankPrevious
	}
	return 0
}

func (x *CMsgClientLBSSetScoreResponse) GetGlobalRankNew() int32 {
	if x != nil && x.GlobalRankNew != nil {
		return *x.GlobalRankNew
	}
	return 0
}

type CMsgClientLBSSetUGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LeaderboardId *int32  `protobuf:"varint,2,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	UgcId         *uint64 `protobuf:"fixed64,3,opt,name=ugc_id,json=ugcId" json:"ugc_id,omitempty"`
}

func (x *CMsgClientLBSSetUGC) Reset() {
	*x = CMsgClientLBSSetUGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSSetUGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSSetUGC) ProtoMessage() {}

func (x *CMsgClientLBSSetUGC) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSSetUGC.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSSetUGC) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientLBSSetUGC) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientLBSSetUGC) GetLeaderboardId() int32 {
	if x != nil && x.LeaderboardId != nil {
		return *x.LeaderboardId
	}
	return 0
}

func (x *CMsgClientLBSSetUGC) GetUgcId() uint64 {
	if x != nil && x.UgcId != nil {
		return *x.UgcId
	}
	return 0
}

type CMsgClientLBSSetUGCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientLBSSetUGCResponse fields.
const (
	Default_CMsgClientLBSSetUGCResponse_Eresult = int32(2)
)

func (x *CMsgClientLBSSetUGCResponse) Reset() {
	*x = CMsgClientLBSSetUGCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSSetUGCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSSetUGCResponse) ProtoMessage() {}

func (x *CMsgClientLBSSetUGCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSSetUGCResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSSetUGCResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientLBSSetUGCResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLBSSetUGCResponse_Eresult
}

type CMsgClientLBSFindOrCreateLB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LeaderboardSortMethod  *int32  `protobuf:"varint,2,opt,name=leaderboard_sort_method,json=leaderboardSortMethod" json:"leaderboard_sort_method,omitempty"`
	LeaderboardDisplayType *int32  `protobuf:"varint,3,opt,name=leaderboard_display_type,json=leaderboardDisplayType" json:"leaderboard_display_type,omitempty"`
	CreateIfNotFound       *bool   `protobuf:"varint,4,opt,name=create_if_not_found,json=createIfNotFound" json:"create_if_not_found,omitempty"`
	LeaderboardName        *string `protobuf:"bytes,5,opt,name=leaderboard_name,json=leaderboardName" json:"leaderboard_name,omitempty"`
}

func (x *CMsgClientLBSFindOrCreateLB) Reset() {
	*x = CMsgClientLBSFindOrCreateLB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSFindOrCreateLB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSFindOrCreateLB) ProtoMessage() {}

func (x *CMsgClientLBSFindOrCreateLB) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSFindOrCreateLB.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSFindOrCreateLB) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientLBSFindOrCreateLB) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientLBSFindOrCreateLB) GetLeaderboardSortMethod() int32 {
	if x != nil && x.LeaderboardSortMethod != nil {
		return *x.LeaderboardSortMethod
	}
	return 0
}

func (x *CMsgClientLBSFindOrCreateLB) GetLeaderboardDisplayType() int32 {
	if x != nil && x.LeaderboardDisplayType != nil {
		return *x.LeaderboardDisplayType
	}
	return 0
}

func (x *CMsgClientLBSFindOrCreateLB) GetCreateIfNotFound() bool {
	if x != nil && x.CreateIfNotFound != nil {
		return *x.CreateIfNotFound
	}
	return false
}

func (x *CMsgClientLBSFindOrCreateLB) GetLeaderboardName() string {
	if x != nil && x.LeaderboardName != nil {
		return *x.LeaderboardName
	}
	return ""
}

type CMsgClientLBSFindOrCreateLBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	LeaderboardId          *int32  `protobuf:"varint,2,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	LeaderboardEntryCount  *int32  `protobuf:"varint,3,opt,name=leaderboard_entry_count,json=leaderboardEntryCount" json:"leaderboard_entry_count,omitempty"`
	LeaderboardSortMethod  *int32  `protobuf:"varint,4,opt,name=leaderboard_sort_method,json=leaderboardSortMethod,def=0" json:"leaderboard_sort_method,omitempty"`
	LeaderboardDisplayType *int32  `protobuf:"varint,5,opt,name=leaderboard_display_type,json=leaderboardDisplayType,def=0" json:"leaderboard_display_type,omitempty"`
	LeaderboardName        *string `protobuf:"bytes,6,opt,name=leaderboard_name,json=leaderboardName" json:"leaderboard_name,omitempty"`
}

// Default values for CMsgClientLBSFindOrCreateLBResponse fields.
const (
	Default_CMsgClientLBSFindOrCreateLBResponse_Eresult                = int32(2)
	Default_CMsgClientLBSFindOrCreateLBResponse_LeaderboardSortMethod  = int32(0)
	Default_CMsgClientLBSFindOrCreateLBResponse_LeaderboardDisplayType = int32(0)
)

func (x *CMsgClientLBSFindOrCreateLBResponse) Reset() {
	*x = CMsgClientLBSFindOrCreateLBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSFindOrCreateLBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSFindOrCreateLBResponse) ProtoMessage() {}

func (x *CMsgClientLBSFindOrCreateLBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSFindOrCreateLBResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSFindOrCreateLBResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLBSFindOrCreateLBResponse_Eresult
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetLeaderboardId() int32 {
	if x != nil && x.LeaderboardId != nil {
		return *x.LeaderboardId
	}
	return 0
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetLeaderboardEntryCount() int32 {
	if x != nil && x.LeaderboardEntryCount != nil {
		return *x.LeaderboardEntryCount
	}
	return 0
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetLeaderboardSortMethod() int32 {
	if x != nil && x.LeaderboardSortMethod != nil {
		return *x.LeaderboardSortMethod
	}
	return Default_CMsgClientLBSFindOrCreateLBResponse_LeaderboardSortMethod
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetLeaderboardDisplayType() int32 {
	if x != nil && x.LeaderboardDisplayType != nil {
		return *x.LeaderboardDisplayType
	}
	return Default_CMsgClientLBSFindOrCreateLBResponse_LeaderboardDisplayType
}

func (x *CMsgClientLBSFindOrCreateLBResponse) GetLeaderboardName() string {
	if x != nil && x.LeaderboardName != nil {
		return *x.LeaderboardName
	}
	return ""
}

type CMsgClientLBSGetLBEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *int32   `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LeaderboardId          *int32   `protobuf:"varint,2,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	RangeStart             *int32   `protobuf:"varint,3,opt,name=range_start,json=rangeStart" json:"range_start,omitempty"`
	RangeEnd               *int32   `protobuf:"varint,4,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
	LeaderboardDataRequest *int32   `protobuf:"varint,5,opt,name=leaderboard_data_request,json=leaderboardDataRequest" json:"leaderboard_data_request,omitempty"`
	Steamids               []uint64 `protobuf:"fixed64,6,rep,name=steamids" json:"steamids,omitempty"`
}

func (x *CMsgClientLBSGetLBEntries) Reset() {
	*x = CMsgClientLBSGetLBEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSGetLBEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSGetLBEntries) ProtoMessage() {}

func (x *CMsgClientLBSGetLBEntries) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSGetLBEntries.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSGetLBEntries) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientLBSGetLBEntries) GetAppId() int32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntries) GetLeaderboardId() int32 {
	if x != nil && x.LeaderboardId != nil {
		return *x.LeaderboardId
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntries) GetRangeStart() int32 {
	if x != nil && x.RangeStart != nil {
		return *x.RangeStart
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntries) GetRangeEnd() int32 {
	if x != nil && x.RangeEnd != nil {
		return *x.RangeEnd
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntries) GetLeaderboardDataRequest() int32 {
	if x != nil && x.LeaderboardDataRequest != nil {
		return *x.LeaderboardDataRequest
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntries) GetSteamids() []uint64 {
	if x != nil {
		return x.Steamids
	}
	return nil
}

type CMsgClientLBSGetLBEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult               *int32                                     `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	LeaderboardEntryCount *int32                                     `protobuf:"varint,2,opt,name=leaderboard_entry_count,json=leaderboardEntryCount" json:"leaderboard_entry_count,omitempty"`
	Entries               []*CMsgClientLBSGetLBEntriesResponse_Entry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

// Default values for CMsgClientLBSGetLBEntriesResponse fields.
const (
	Default_CMsgClientLBSGetLBEntriesResponse_Eresult = int32(2)
)

func (x *CMsgClientLBSGetLBEntriesResponse) Reset() {
	*x = CMsgClientLBSGetLBEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSGetLBEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSGetLBEntriesResponse) ProtoMessage() {}

func (x *CMsgClientLBSGetLBEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSGetLBEntriesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSGetLBEntriesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientLBSGetLBEntriesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientLBSGetLBEntriesResponse_Eresult
}

func (x *CMsgClientLBSGetLBEntriesResponse) GetLeaderboardEntryCount() int32 {
	if x != nil && x.LeaderboardEntryCount != nil {
		return *x.LeaderboardEntryCount
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntriesResponse) GetEntries() []*CMsgClientLBSGetLBEntriesResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgClientAppMinutesPlayedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinutesPlayed []*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData `protobuf:"bytes,1,rep,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
}

func (x *CMsgClientAppMinutesPlayedData) Reset() {
	*x = CMsgClientAppMinutesPlayedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppMinutesPlayedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppMinutesPlayedData) ProtoMessage() {}

func (x *CMsgClientAppMinutesPlayedData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppMinutesPlayedData.ProtoReflect.Descriptor instead.
func (*CMsgClientAppMinutesPlayedData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientAppMinutesPlayedData) GetMinutesPlayed() []*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData {
	if x != nil {
		return x.MinutesPlayed
	}
	return nil
}

type CMsgClientIsLimitedAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BisLimitedAccount                       *bool `protobuf:"varint,1,opt,name=bis_limited_account,json=bisLimitedAccount" json:"bis_limited_account,omitempty"`
	BisCommunityBanned                      *bool `protobuf:"varint,2,opt,name=bis_community_banned,json=bisCommunityBanned" json:"bis_community_banned,omitempty"`
	BisLockedAccount                        *bool `protobuf:"varint,3,opt,name=bis_locked_account,json=bisLockedAccount" json:"bis_locked_account,omitempty"`
	BisLimitedAccountAllowedToInviteFriends *bool `protobuf:"varint,4,opt,name=bis_limited_account_allowed_to_invite_friends,json=bisLimitedAccountAllowedToInviteFriends" json:"bis_limited_account_allowed_to_invite_friends,omitempty"`
}

func (x *CMsgClientIsLimitedAccount) Reset() {
	*x = CMsgClientIsLimitedAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientIsLimitedAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientIsLimitedAccount) ProtoMessage() {}

func (x *CMsgClientIsLimitedAccount) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientIsLimitedAccount.ProtoReflect.Descriptor instead.
func (*CMsgClientIsLimitedAccount) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgClientIsLimitedAccount) GetBisLimitedAccount() bool {
	if x != nil && x.BisLimitedAccount != nil {
		return *x.BisLimitedAccount
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisCommunityBanned() bool {
	if x != nil && x.BisCommunityBanned != nil {
		return *x.BisCommunityBanned
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisLockedAccount() bool {
	if x != nil && x.BisLockedAccount != nil {
		return *x.BisLockedAccount
	}
	return false
}

func (x *CMsgClientIsLimitedAccount) GetBisLimitedAccountAllowedToInviteFriends() bool {
	if x != nil && x.BisLimitedAccountAllowedToInviteFriends != nil {
		return *x.BisLimitedAccountAllowedToInviteFriends
	}
	return false
}

type CMsgClientRequestedClientStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsToSend []*CMsgClientRequestedClientStats_StatsToSend `protobuf:"bytes,1,rep,name=stats_to_send,json=statsToSend" json:"stats_to_send,omitempty"`
}

func (x *CMsgClientRequestedClientStats) Reset() {
	*x = CMsgClientRequestedClientStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestedClientStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestedClientStats) ProtoMessage() {}

func (x *CMsgClientRequestedClientStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestedClientStats.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestedClientStats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgClientRequestedClientStats) GetStatsToSend() []*CMsgClientRequestedClientStats_StatsToSend {
	if x != nil {
		return x.StatsToSend
	}
	return nil
}

type CMsgClientStat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatDetail []*CMsgClientStat2_StatDetail `protobuf:"bytes,1,rep,name=stat_detail,json=statDetail" json:"stat_detail,omitempty"`
}

func (x *CMsgClientStat2) Reset() {
	*x = CMsgClientStat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStat2) ProtoMessage() {}

func (x *CMsgClientStat2) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStat2.ProtoReflect.Descriptor instead.
func (*CMsgClientStat2) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgClientStat2) GetStatDetail() []*CMsgClientStat2_StatDetail {
	if x != nil {
		return x.StatDetail
	}
	return nil
}

type CMsgClientMMSSetRatelimitPolicyOnClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                     *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	EnableRateLimits          *bool   `protobuf:"varint,2,opt,name=enable_rate_limits,json=enableRateLimits" json:"enable_rate_limits,omitempty"`
	SecondsPerMessage         *int32  `protobuf:"varint,3,opt,name=seconds_per_message,json=secondsPerMessage" json:"seconds_per_message,omitempty"`
	MillisecondsPerDataUpdate *int32  `protobuf:"varint,4,opt,name=milliseconds_per_data_update,json=millisecondsPerDataUpdate" json:"milliseconds_per_data_update,omitempty"`
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) Reset() {
	*x = CMsgClientMMSSetRatelimitPolicyOnClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetRatelimitPolicyOnClient) ProtoMessage() {}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetRatelimitPolicyOnClient.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetRatelimitPolicyOnClient) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetEnableRateLimits() bool {
	if x != nil && x.EnableRateLimits != nil {
		return *x.EnableRateLimits
	}
	return false
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetSecondsPerMessage() int32 {
	if x != nil && x.SecondsPerMessage != nil {
		return *x.SecondsPerMessage
	}
	return 0
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetMillisecondsPerDataUpdate() int32 {
	if x != nil && x.MillisecondsPerDataUpdate != nil {
		return *x.MillisecondsPerDataUpdate
	}
	return 0
}

type CMsgClientMMSCreateLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MaxMembers         *int32         `protobuf:"varint,2,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType          *int32         `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags         *int32         `protobuf:"varint,4,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	CellId             *uint32        `protobuf:"varint,5,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DeprecatedPublicIp *uint32        `protobuf:"varint,6,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Metadata           []byte         `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
	PersonaNameOwner   *string        `protobuf:"bytes,8,opt,name=persona_name_owner,json=personaNameOwner" json:"persona_name_owner,omitempty"`
	PublicIp           *CMsgIPAddress `protobuf:"bytes,9,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgClientMMSCreateLobby) Reset() {
	*x = CMsgClientMMSCreateLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSCreateLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSCreateLobby) ProtoMessage() {}

func (x *CMsgClientMMSCreateLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSCreateLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSCreateLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgClientMMSCreateLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSCreateLobby) GetPersonaNameOwner() string {
	if x != nil && x.PersonaNameOwner != nil {
		return *x.PersonaNameOwner
	}
	return ""
}

func (x *CMsgClientMMSCreateLobby) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgClientMMSCreateLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSCreateLobbyResponse fields.
const (
	Default_CMsgClientMMSCreateLobbyResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSCreateLobbyResponse) Reset() {
	*x = CMsgClientMMSCreateLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSCreateLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSCreateLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSCreateLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSCreateLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSCreateLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgClientMMSCreateLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSCreateLobbyResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSCreateLobbyResponse_Eresult
}

type CMsgClientMMSJoinLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	PersonaName  *string `protobuf:"bytes,3,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSJoinLobby) Reset() {
	*x = CMsgClientMMSJoinLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobby) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgClientMMSJoinLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSJoinLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSJoinLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 *uint32                                  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby          *uint64                                  `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	ChatRoomEnterResponse *int32                                   `protobuf:"varint,3,opt,name=chat_room_enter_response,json=chatRoomEnterResponse" json:"chat_room_enter_response,omitempty"`
	MaxMembers            *int32                                   `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType             *int32                                   `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags            *int32                                   `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	SteamIdOwner          *uint64                                  `protobuf:"fixed64,7,opt,name=steam_id_owner,json=steamIdOwner" json:"steam_id_owner,omitempty"`
	Metadata              []byte                                   `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	Members               []*CMsgClientMMSJoinLobbyResponse_Member `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
}

func (x *CMsgClientMMSJoinLobbyResponse) Reset() {
	*x = CMsgClientMMSJoinLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgClientMMSJoinLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetChatRoomEnterResponse() int32 {
	if x != nil && x.ChatRoomEnterResponse != nil {
		return *x.ChatRoomEnterResponse
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetSteamIdOwner() uint64 {
	if x != nil && x.SteamIdOwner != nil {
		return *x.SteamIdOwner
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMembers() []*CMsgClientMMSJoinLobbyResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type CMsgClientMMSLeaveLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
}

func (x *CMsgClientMMSLeaveLobby) Reset() {
	*x = CMsgClientMMSLeaveLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLeaveLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLeaveLobby) ProtoMessage() {}

func (x *CMsgClientMMSLeaveLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLeaveLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLeaveLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgClientMMSLeaveLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

type CMsgClientMMSLeaveLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSLeaveLobbyResponse fields.
const (
	Default_CMsgClientMMSLeaveLobbyResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSLeaveLobbyResponse) Reset() {
	*x = CMsgClientMMSLeaveLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLeaveLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSLeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSLeaveLobbyResponse_Eresult
}

type CMsgClientMMSGetLobbyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId               *uint32                             `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	NumLobbiesRequested *int32                              `protobuf:"varint,3,opt,name=num_lobbies_requested,json=numLobbiesRequested" json:"num_lobbies_requested,omitempty"`
	CellId              *uint32                             `protobuf:"varint,4,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DeprecatedPublicIp  *uint32                             `protobuf:"varint,5,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Filters             []*CMsgClientMMSGetLobbyList_Filter `protobuf:"bytes,6,rep,name=filters" json:"filters,omitempty"`
	PublicIp            *CMsgIPAddress                      `protobuf:"bytes,7,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgClientMMSGetLobbyList) Reset() {
	*x = CMsgClientMMSGetLobbyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyList) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyList.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgClientMMSGetLobbyList) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetNumLobbiesRequested() int32 {
	if x != nil && x.NumLobbiesRequested != nil {
		return *x.NumLobbiesRequested
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetFilters() []*CMsgClientMMSGetLobbyList_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CMsgClientMMSGetLobbyList) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgClientMMSGetLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   *uint32                                    `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Eresult *int32                                     `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Lobbies []*CMsgClientMMSGetLobbyListResponse_Lobby `protobuf:"bytes,4,rep,name=lobbies" json:"lobbies,omitempty"`
}

// Default values for CMsgClientMMSGetLobbyListResponse fields.
const (
	Default_CMsgClientMMSGetLobbyListResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSGetLobbyListResponse) Reset() {
	*x = CMsgClientMMSGetLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyListResponse) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgClientMMSGetLobbyListResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSGetLobbyListResponse_Eresult
}

func (x *CMsgClientMMSGetLobbyListResponse) GetLobbies() []*CMsgClientMMSGetLobbyListResponse_Lobby {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgClientMMSSetLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdMember *uint64 `protobuf:"fixed64,3,opt,name=steam_id_member,json=steamIdMember" json:"steam_id_member,omitempty"`
	MaxMembers    *int32  `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType     *int32  `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags    *int32  `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	Metadata      []byte  `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSSetLobbyData) Reset() {
	*x = CMsgClientMMSSetLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgClientMMSSetLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetSteamIdMember() uint64 {
	if x != nil && x.SteamIdMember != nil {
		return *x.SteamIdMember
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgClientMMSSetLobbyDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSSetLobbyDataResponse fields.
const (
	Default_CMsgClientMMSSetLobbyDataResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSSetLobbyDataResponse) Reset() {
	*x = CMsgClientMMSSetLobbyDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyDataResponse) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyDataResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSSetLobbyDataResponse_Eresult
}

type CMsgClientMMSGetLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
}

func (x *CMsgClientMMSGetLobbyData) Reset() {
	*x = CMsgClientMMSGetLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgClientMMSGetLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

type CMsgClientMMSLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                    *uint32                          `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby             *uint64                          `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	NumMembers               *int32                           `protobuf:"varint,3,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	MaxMembers               *int32                           `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType                *int32                           `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags               *int32                           `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	SteamIdOwner             *uint64                          `protobuf:"fixed64,7,opt,name=steam_id_owner,json=steamIdOwner" json:"steam_id_owner,omitempty"`
	Metadata                 []byte                           `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	Members                  []*CMsgClientMMSLobbyData_Member `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
	LobbyCellid              *uint32                          `protobuf:"varint,10,opt,name=lobby_cellid,json=lobbyCellid" json:"lobby_cellid,omitempty"`
	OwnerShouldAcceptChanges *bool                            `protobuf:"varint,11,opt,name=owner_should_accept_changes,json=ownerShouldAcceptChanges" json:"owner_should_accept_changes,omitempty"`
}

func (x *CMsgClientMMSLobbyData) Reset() {
	*x = CMsgClientMMSLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientMMSLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetNumMembers() int32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetSteamIdOwner() uint64 {
	if x != nil && x.SteamIdOwner != nil {
		return *x.SteamIdOwner
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSLobbyData) GetMembers() []*CMsgClientMMSLobbyData_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgClientMMSLobbyData) GetLobbyCellid() uint32 {
	if x != nil && x.LobbyCellid != nil {
		return *x.LobbyCellid
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetOwnerShouldAcceptChanges() bool {
	if x != nil && x.OwnerShouldAcceptChanges != nil {
		return *x.OwnerShouldAcceptChanges
	}
	return false
}

type CMsgClientMMSSendLobbyChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdTarget *uint64 `protobuf:"fixed64,3,opt,name=steam_id_target,json=steamIdTarget" json:"steam_id_target,omitempty"`
	LobbyMessage  []byte  `protobuf:"bytes,4,opt,name=lobby_message,json=lobbyMessage" json:"lobby_message,omitempty"`
}

func (x *CMsgClientMMSSendLobbyChatMsg) Reset() {
	*x = CMsgClientMMSSendLobbyChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSendLobbyChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSendLobbyChatMsg) ProtoMessage() {}

func (x *CMsgClientMMSSendLobbyChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSendLobbyChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSendLobbyChatMsg) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetSteamIdTarget() uint64 {
	if x != nil && x.SteamIdTarget != nil {
		return *x.SteamIdTarget
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetLobbyMessage() []byte {
	if x != nil {
		return x.LobbyMessage
	}
	return nil
}

type CMsgClientMMSLobbyChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdSender *uint64 `protobuf:"fixed64,3,opt,name=steam_id_sender,json=steamIdSender" json:"steam_id_sender,omitempty"`
	LobbyMessage  []byte  `protobuf:"bytes,4,opt,name=lobby_message,json=lobbyMessage" json:"lobby_message,omitempty"`
}

func (x *CMsgClientMMSLobbyChatMsg) Reset() {
	*x = CMsgClientMMSLobbyChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyChatMsg) ProtoMessage() {}

func (x *CMsgClientMMSLobbyChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyChatMsg) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgClientMMSLobbyChatMsg) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetSteamIdSender() uint64 {
	if x != nil && x.SteamIdSender != nil {
		return *x.SteamIdSender
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetLobbyMessage() []byte {
	if x != nil {
		return x.LobbyMessage
	}
	return nil
}

type CMsgClientMMSSetLobbyOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby    *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdNewOwner *uint64 `protobuf:"fixed64,3,opt,name=steam_id_new_owner,json=steamIdNewOwner" json:"steam_id_new_owner,omitempty"`
}

func (x *CMsgClientMMSSetLobbyOwner) Reset() {
	*x = CMsgClientMMSSetLobbyOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyOwner) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyOwner) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyOwner.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyOwner) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgClientMMSSetLobbyOwner) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwner) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwner) GetSteamIdNewOwner() uint64 {
	if x != nil && x.SteamIdNewOwner != nil {
		return *x.SteamIdNewOwner
	}
	return 0
}

type CMsgClientMMSSetLobbyOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSSetLobbyOwnerResponse fields.
const (
	Default_CMsgClientMMSSetLobbyOwnerResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSSetLobbyOwnerResponse) Reset() {
	*x = CMsgClientMMSSetLobbyOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyOwnerResponse) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyOwnerResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyOwnerResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSSetLobbyOwnerResponse_Eresult
}

type CMsgClientMMSSetLobbyLinked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdLobby2 *uint64 `protobuf:"fixed64,3,opt,name=steam_id_lobby2,json=steamIdLobby2" json:"steam_id_lobby2,omitempty"`
}

func (x *CMsgClientMMSSetLobbyLinked) Reset() {
	*x = CMsgClientMMSSetLobbyLinked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyLinked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyLinked) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyLinked) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyLinked.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyLinked) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientMMSSetLobbyLinked) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyLinked) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyLinked) GetSteamIdLobby2() uint64 {
	if x != nil && x.SteamIdLobby2 != nil {
		return *x.SteamIdLobby2
	}
	return 0
}

type CMsgClientMMSSetLobbyGameServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby           *uint64        `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	DeprecatedGameServerIp *uint32        `protobuf:"varint,3,opt,name=deprecated_game_server_ip,json=deprecatedGameServerIp" json:"deprecated_game_server_ip,omitempty"`
	GameServerPort         *uint32        `protobuf:"varint,4,opt,name=game_server_port,json=gameServerPort" json:"game_server_port,omitempty"`
	GameServerSteamId      *uint64        `protobuf:"fixed64,5,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	GameServerIp           *CMsgIPAddress `protobuf:"bytes,6,opt,name=game_server_ip,json=gameServerIp" json:"game_server_ip,omitempty"`
}

func (x *CMsgClientMMSSetLobbyGameServer) Reset() {
	*x = CMsgClientMMSSetLobbyGameServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyGameServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyGameServer) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyGameServer) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyGameServer.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyGameServer) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgClientMMSSetLobbyGameServer) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetDeprecatedGameServerIp() uint32 {
	if x != nil && x.DeprecatedGameServerIp != nil {
		return *x.DeprecatedGameServerIp
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerPort() uint32 {
	if x != nil && x.GameServerPort != nil {
		return *x.GameServerPort
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerIp() *CMsgIPAddress {
	if x != nil {
		return x.GameServerIp
	}
	return nil
}

type CMsgClientMMSLobbyGameServerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby           *uint64        `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	DeprecatedGameServerIp *uint32        `protobuf:"varint,3,opt,name=deprecated_game_server_ip,json=deprecatedGameServerIp" json:"deprecated_game_server_ip,omitempty"`
	GameServerPort         *uint32        `protobuf:"varint,4,opt,name=game_server_port,json=gameServerPort" json:"game_server_port,omitempty"`
	GameServerSteamId      *uint64        `protobuf:"fixed64,5,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	GameServerIp           *CMsgIPAddress `protobuf:"bytes,6,opt,name=game_server_ip,json=gameServerIp" json:"game_server_ip,omitempty"`
}

func (x *CMsgClientMMSLobbyGameServerSet) Reset() {
	*x = CMsgClientMMSLobbyGameServerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyGameServerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyGameServerSet) ProtoMessage() {}

func (x *CMsgClientMMSLobbyGameServerSet) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyGameServerSet.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyGameServerSet) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgClientMMSLobbyGameServerSet) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetDeprecatedGameServerIp() uint32 {
	if x != nil && x.DeprecatedGameServerIp != nil {
		return *x.DeprecatedGameServerIp
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerPort() uint32 {
	if x != nil && x.GameServerPort != nil {
		return *x.GameServerPort
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerIp() *CMsgIPAddress {
	if x != nil {
		return x.GameServerIp
	}
	return nil
}

type CMsgClientMMSUserJoinedLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUser  *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user,json=steamIdUser" json:"steam_id_user,omitempty"`
	PersonaName  *string `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSUserJoinedLobby) Reset() {
	*x = CMsgClientMMSUserJoinedLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSUserJoinedLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSUserJoinedLobby) ProtoMessage() {}

func (x *CMsgClientMMSUserJoinedLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSUserJoinedLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSUserJoinedLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgClientMMSUserJoinedLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetSteamIdUser() uint64 {
	if x != nil && x.SteamIdUser != nil {
		return *x.SteamIdUser
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSUserLeftLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUser  *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user,json=steamIdUser" json:"steam_id_user,omitempty"`
	PersonaName  *string `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSUserLeftLobby) Reset() {
	*x = CMsgClientMMSUserLeftLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSUserLeftLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSUserLeftLobby) ProtoMessage() {}

func (x *CMsgClientMMSUserLeftLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSUserLeftLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSUserLeftLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgClientMMSUserLeftLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetSteamIdUser() uint64 {
	if x != nil && x.SteamIdUser != nil {
		return *x.SteamIdUser
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSInviteToLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby       *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUserInvited *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user_invited,json=steamIdUserInvited" json:"steam_id_user_invited,omitempty"`
}

func (x *CMsgClientMMSInviteToLobby) Reset() {
	*x = CMsgClientMMSInviteToLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSInviteToLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSInviteToLobby) ProtoMessage() {}

func (x *CMsgClientMMSInviteToLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSInviteToLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSInviteToLobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgClientMMSInviteToLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSInviteToLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSInviteToLobby) GetSteamIdUserInvited() uint64 {
	if x != nil && x.SteamIdUserInvited != nil {
		return *x.SteamIdUserInvited
	}
	return 0
}

type CMsgClientMMSGetLobbyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby    *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	ClaimMembership *bool   `protobuf:"varint,3,opt,name=claim_membership,json=claimMembership" json:"claim_membership,omitempty"`
	ClaimOwnership  *bool   `protobuf:"varint,4,opt,name=claim_ownership,json=claimOwnership" json:"claim_ownership,omitempty"`
}

func (x *CMsgClientMMSGetLobbyStatus) Reset() {
	*x = CMsgClientMMSGetLobbyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyStatus) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyStatus.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgClientMMSGetLobbyStatus) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatus) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatus) GetClaimMembership() bool {
	if x != nil && x.ClaimMembership != nil {
		return *x.ClaimMembership
	}
	return false
}

func (x *CMsgClientMMSGetLobbyStatus) GetClaimOwnership() bool {
	if x != nil && x.ClaimOwnership != nil {
		return *x.ClaimOwnership
	}
	return false
}

type CMsgClientMMSGetLobbyStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32          `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64          `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	LobbyStatus  *EMMSLobbyStatus `protobuf:"varint,3,opt,name=lobby_status,json=lobbyStatus,enum=steam.EMMSLobbyStatus,def=0" json:"lobby_status,omitempty"`
}

// Default values for CMsgClientMMSGetLobbyStatusResponse fields.
const (
	Default_CMsgClientMMSGetLobbyStatusResponse_LobbyStatus = EMMSLobbyStatus_k_EMMSLobbyStatusInvalid
)

func (x *CMsgClientMMSGetLobbyStatusResponse) Reset() {
	*x = CMsgClientMMSGetLobbyStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyStatusResponse) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyStatusResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetLobbyStatus() EMMSLobbyStatus {
	if x != nil && x.LobbyStatus != nil {
		return *x.LobbyStatus
	}
	return Default_CMsgClientMMSGetLobbyStatusResponse_LobbyStatus
}

type CMsgClientInviteToGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdDest   *uint64 `protobuf:"fixed64,1,opt,name=steam_id_dest,json=steamIdDest" json:"steam_id_dest,omitempty"`
	SteamIdSrc    *uint64 `protobuf:"fixed64,2,opt,name=steam_id_src,json=steamIdSrc" json:"steam_id_src,omitempty"`
	ConnectString *string `protobuf:"bytes,3,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
	RemotePlay    *string `protobuf:"bytes,4,opt,name=remote_play,json=remotePlay" json:"remote_play,omitempty"`
}

func (x *CMsgClientInviteToGame) Reset() {
	*x = CMsgClientInviteToGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientInviteToGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientInviteToGame) ProtoMessage() {}

func (x *CMsgClientInviteToGame) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientInviteToGame.ProtoReflect.Descriptor instead.
func (*CMsgClientInviteToGame) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgClientInviteToGame) GetSteamIdDest() uint64 {
	if x != nil && x.SteamIdDest != nil {
		return *x.SteamIdDest
	}
	return 0
}

func (x *CMsgClientInviteToGame) GetSteamIdSrc() uint64 {
	if x != nil && x.SteamIdSrc != nil {
		return *x.SteamIdSrc
	}
	return 0
}

func (x *CMsgClientInviteToGame) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

func (x *CMsgClientInviteToGame) GetRemotePlay() string {
	if x != nil && x.RemotePlay != nil {
		return *x.RemotePlay
	}
	return ""
}

type CMsgClientChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdInvited    *uint64 `protobuf:"fixed64,1,opt,name=steam_id_invited,json=steamIdInvited" json:"steam_id_invited,omitempty"`
	SteamIdChat       *uint64 `protobuf:"fixed64,2,opt,name=steam_id_chat,json=steamIdChat" json:"steam_id_chat,omitempty"`
	SteamIdPatron     *uint64 `protobuf:"fixed64,3,opt,name=steam_id_patron,json=steamIdPatron" json:"steam_id_patron,omitempty"`
	ChatroomType      *int32  `protobuf:"varint,4,opt,name=chatroom_type,json=chatroomType" json:"chatroom_type,omitempty"`
	SteamIdFriendChat *uint64 `protobuf:"fixed64,5,opt,name=steam_id_friend_chat,json=steamIdFriendChat" json:"steam_id_friend_chat,omitempty"`
	ChatName          *string `protobuf:"bytes,6,opt,name=chat_name,json=chatName" json:"chat_name,omitempty"`
	GameId            *uint64 `protobuf:"fixed64,7,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
}

func (x *CMsgClientChatInvite) Reset() {
	*x = CMsgClientChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatInvite) ProtoMessage() {}

func (x *CMsgClientChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientChatInvite) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgClientChatInvite) GetSteamIdInvited() uint64 {
	if x != nil && x.SteamIdInvited != nil {
		return *x.SteamIdInvited
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdChat() uint64 {
	if x != nil && x.SteamIdChat != nil {
		return *x.SteamIdChat
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdPatron() uint64 {
	if x != nil && x.SteamIdPatron != nil {
		return *x.SteamIdPatron
	}
	return 0
}

func (x *CMsgClientChatInvite) GetChatroomType() int32 {
	if x != nil && x.ChatroomType != nil {
		return *x.ChatroomType
	}
	return 0
}

func (x *CMsgClientChatInvite) GetSteamIdFriendChat() uint64 {
	if x != nil && x.SteamIdFriendChat != nil {
		return *x.SteamIdFriendChat
	}
	return 0
}

func (x *CMsgClientChatInvite) GetChatName() string {
	if x != nil && x.ChatName != nil {
		return *x.ChatName
	}
	return ""
}

func (x *CMsgClientChatInvite) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CMsgClientConnectionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsLogon *CMsgClientConnectionStats_Stats_Logon `protobuf:"bytes,1,opt,name=stats_logon,json=statsLogon" json:"stats_logon,omitempty"`
	StatsVconn *CMsgClientConnectionStats_Stats_VConn `protobuf:"bytes,2,opt,name=stats_vconn,json=statsVconn" json:"stats_vconn,omitempty"`
}

func (x *CMsgClientConnectionStats) Reset() {
	*x = CMsgClientConnectionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats) ProtoMessage() {}

func (x *CMsgClientConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgClientConnectionStats) GetStatsLogon() *CMsgClientConnectionStats_Stats_Logon {
	if x != nil {
		return x.StatsLogon
	}
	return nil
}

func (x *CMsgClientConnectionStats) GetStatsVconn() *CMsgClientConnectionStats_Stats_VConn {
	if x != nil {
		return x.StatsVconn
	}
	return nil
}

type CMsgClientServersAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTypesAvailable      []*CMsgClientServersAvailable_Server_Types_Available `protobuf:"bytes,1,rep,name=server_types_available,json=serverTypesAvailable" json:"server_types_available,omitempty"`
	ServerTypeForAuthServices *uint32                                              `protobuf:"varint,2,opt,name=server_type_for_auth_services,json=serverTypeForAuthServices" json:"server_type_for_auth_services,omitempty"`
}

func (x *CMsgClientServersAvailable) Reset() {
	*x = CMsgClientServersAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServersAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServersAvailable) ProtoMessage() {}

func (x *CMsgClientServersAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServersAvailable.ProtoReflect.Descriptor instead.
func (*CMsgClientServersAvailable) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgClientServersAvailable) GetServerTypesAvailable() []*CMsgClientServersAvailable_Server_Types_Available {
	if x != nil {
		return x.ServerTypesAvailable
	}
	return nil
}

func (x *CMsgClientServersAvailable) GetServerTypeForAuthServices() uint32 {
	if x != nil && x.ServerTypeForAuthServices != nil {
		return *x.ServerTypeForAuthServices
	}
	return 0
}

type CMsgClientGetUserStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId             *uint64 `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CrcStats           *uint32 `protobuf:"varint,2,opt,name=crc_stats,json=crcStats" json:"crc_stats,omitempty"`
	SchemaLocalVersion *int32  `protobuf:"varint,3,opt,name=schema_local_version,json=schemaLocalVersion" json:"schema_local_version,omitempty"`
	SteamIdForUser     *uint64 `protobuf:"fixed64,4,opt,name=steam_id_for_user,json=steamIdForUser" json:"steam_id_for_user,omitempty"`
}

func (x *CMsgClientGetUserStats) Reset() {
	*x = CMsgClientGetUserStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetUserStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetUserStats) ProtoMessage() {}

func (x *CMsgClientGetUserStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetUserStats.ProtoReflect.Descriptor instead.
func (*CMsgClientGetUserStats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientGetUserStats) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientGetUserStats) GetCrcStats() uint32 {
	if x != nil && x.CrcStats != nil {
		return *x.CrcStats
	}
	return 0
}

func (x *CMsgClientGetUserStats) GetSchemaLocalVersion() int32 {
	if x != nil && x.SchemaLocalVersion != nil {
		return *x.SchemaLocalVersion
	}
	return 0
}

func (x *CMsgClientGetUserStats) GetSteamIdForUser() uint64 {
	if x != nil && x.SteamIdForUser != nil {
		return *x.SteamIdForUser
	}
	return 0
}

type CMsgClientGetUserStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId            *uint64                                              `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Eresult           *int32                                               `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	CrcStats          *uint32                                              `protobuf:"varint,3,opt,name=crc_stats,json=crcStats" json:"crc_stats,omitempty"`
	Schema            []byte                                               `protobuf:"bytes,4,opt,name=schema" json:"schema,omitempty"`
	Stats             []*CMsgClientGetUserStatsResponse_Stats              `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
	AchievementBlocks []*CMsgClientGetUserStatsResponse_Achievement_Blocks `protobuf:"bytes,6,rep,name=achievement_blocks,json=achievementBlocks" json:"achievement_blocks,omitempty"`
}

// Default values for CMsgClientGetUserStatsResponse fields.
const (
	Default_CMsgClientGetUserStatsResponse_Eresult = int32(2)
)

func (x *CMsgClientGetUserStatsResponse) Reset() {
	*x = CMsgClientGetUserStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetUserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetUserStatsResponse) ProtoMessage() {}

func (x *CMsgClientGetUserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetUserStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetUserStatsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgClientGetUserStatsResponse) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientGetUserStatsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetUserStatsResponse_Eresult
}

func (x *CMsgClientGetUserStatsResponse) GetCrcStats() uint32 {
	if x != nil && x.CrcStats != nil {
		return *x.CrcStats
	}
	return 0
}

func (x *CMsgClientGetUserStatsResponse) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CMsgClientGetUserStatsResponse) GetStats() []*CMsgClientGetUserStatsResponse_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgClientGetUserStatsResponse) GetAchievementBlocks() []*CMsgClientGetUserStatsResponse_Achievement_Blocks {
	if x != nil {
		return x.AchievementBlocks
	}
	return nil
}

type CMsgClientStoreUserStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId                *uint64                                                     `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Eresult               *int32                                                      `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	CrcStats              *uint32                                                     `protobuf:"varint,3,opt,name=crc_stats,json=crcStats" json:"crc_stats,omitempty"`
	StatsFailedValidation []*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation `protobuf:"bytes,4,rep,name=stats_failed_validation,json=statsFailedValidation" json:"stats_failed_validation,omitempty"`
	StatsOutOfDate        *bool                                                       `protobuf:"varint,5,opt,name=stats_out_of_date,json=statsOutOfDate" json:"stats_out_of_date,omitempty"`
}

// Default values for CMsgClientStoreUserStatsResponse fields.
const (
	Default_CMsgClientStoreUserStatsResponse_Eresult = int32(2)
)

func (x *CMsgClientStoreUserStatsResponse) Reset() {
	*x = CMsgClientStoreUserStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStatsResponse) ProtoMessage() {}

func (x *CMsgClientStoreUserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStatsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgClientStoreUserStatsResponse) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientStoreUserStatsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientStoreUserStatsResponse_Eresult
}

func (x *CMsgClientStoreUserStatsResponse) GetCrcStats() uint32 {
	if x != nil && x.CrcStats != nil {
		return *x.CrcStats
	}
	return 0
}

func (x *CMsgClientStoreUserStatsResponse) GetStatsFailedValidation() []*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation {
	if x != nil {
		return x.StatsFailedValidation
	}
	return nil
}

func (x *CMsgClientStoreUserStatsResponse) GetStatsOutOfDate() bool {
	if x != nil && x.StatsOutOfDate != nil {
		return *x.StatsOutOfDate
	}
	return false
}

type CMsgClientStoreUserStats2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId        *uint64                            `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	SettorSteamId *uint64                            `protobuf:"fixed64,2,opt,name=settor_steam_id,json=settorSteamId" json:"settor_steam_id,omitempty"`
	SetteeSteamId *uint64                            `protobuf:"fixed64,3,opt,name=settee_steam_id,json=setteeSteamId" json:"settee_steam_id,omitempty"`
	CrcStats      *uint32                            `protobuf:"varint,4,opt,name=crc_stats,json=crcStats" json:"crc_stats,omitempty"`
	ExplicitReset *bool                              `protobuf:"varint,5,opt,name=explicit_reset,json=explicitReset" json:"explicit_reset,omitempty"`
	Stats         []*CMsgClientStoreUserStats2_Stats `protobuf:"bytes,6,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgClientStoreUserStats2) Reset() {
	*x = CMsgClientStoreUserStats2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStats2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStats2) ProtoMessage() {}

func (x *CMsgClientStoreUserStats2) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStats2.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStats2) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgClientStoreUserStats2) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientStoreUserStats2) GetSettorSteamId() uint64 {
	if x != nil && x.SettorSteamId != nil {
		return *x.SettorSteamId
	}
	return 0
}

func (x *CMsgClientStoreUserStats2) GetSetteeSteamId() uint64 {
	if x != nil && x.SetteeSteamId != nil {
		return *x.SetteeSteamId
	}
	return 0
}

func (x *CMsgClientStoreUserStats2) GetCrcStats() uint32 {
	if x != nil && x.CrcStats != nil {
		return *x.CrcStats
	}
	return 0
}

func (x *CMsgClientStoreUserStats2) GetExplicitReset() bool {
	if x != nil && x.ExplicitReset != nil {
		return *x.ExplicitReset
	}
	return false
}

func (x *CMsgClientStoreUserStats2) GetStats() []*CMsgClientStoreUserStats2_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgClientStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId      *uint64                                 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	GameId       *uint64                                 `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CrcStats     *uint32                                 `protobuf:"varint,3,opt,name=crc_stats,json=crcStats" json:"crc_stats,omitempty"`
	UpdatedStats []*CMsgClientStatsUpdated_Updated_Stats `protobuf:"bytes,4,rep,name=updated_stats,json=updatedStats" json:"updated_stats,omitempty"`
}

func (x *CMsgClientStatsUpdated) Reset() {
	*x = CMsgClientStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStatsUpdated) ProtoMessage() {}

func (x *CMsgClientStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStatsUpdated.ProtoReflect.Descriptor instead.
func (*CMsgClientStatsUpdated) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgClientStatsUpdated) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientStatsUpdated) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientStatsUpdated) GetCrcStats() uint32 {
	if x != nil && x.CrcStats != nil {
		return *x.CrcStats
	}
	return 0
}

func (x *CMsgClientStatsUpdated) GetUpdatedStats() []*CMsgClientStatsUpdated_Updated_Stats {
	if x != nil {
		return x.UpdatedStats
	}
	return nil
}

type CMsgClientStoreUserStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId        *uint64                                    `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	ExplicitReset *bool                                      `protobuf:"varint,2,opt,name=explicit_reset,json=explicitReset" json:"explicit_reset,omitempty"`
	StatsToStore  []*CMsgClientStoreUserStats_Stats_To_Store `protobuf:"bytes,3,rep,name=stats_to_store,json=statsToStore" json:"stats_to_store,omitempty"`
}

func (x *CMsgClientStoreUserStats) Reset() {
	*x = CMsgClientStoreUserStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStats) ProtoMessage() {}

func (x *CMsgClientStoreUserStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStats.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgClientStoreUserStats) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientStoreUserStats) GetExplicitReset() bool {
	if x != nil && x.ExplicitReset != nil {
		return *x.ExplicitReset
	}
	return false
}

func (x *CMsgClientStoreUserStats) GetStatsToStore() []*CMsgClientStoreUserStats_Stats_To_Store {
	if x != nil {
		return x.StatsToStore
	}
	return nil
}

type CMsgClientGetClientDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientGetClientDetails) Reset() {
	*x = CMsgClientGetClientDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientDetails) ProtoMessage() {}

func (x *CMsgClientGetClientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientDetails.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientDetails) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{74}
}

type CMsgClientReportOverlayDetourFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureStrings []string `protobuf:"bytes,1,rep,name=failure_strings,json=failureStrings" json:"failure_strings,omitempty"`
}

func (x *CMsgClientReportOverlayDetourFailure) Reset() {
	*x = CMsgClientReportOverlayDetourFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientReportOverlayDetourFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientReportOverlayDetourFailure) ProtoMessage() {}

func (x *CMsgClientReportOverlayDetourFailure) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientReportOverlayDetourFailure.ProtoReflect.Descriptor instead.
func (*CMsgClientReportOverlayDetourFailure) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgClientReportOverlayDetourFailure) GetFailureStrings() []string {
	if x != nil {
		return x.FailureStrings
	}
	return nil
}

type CMsgClientGetClientDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageVersion  *uint32                                    `protobuf:"varint,1,opt,name=package_version,json=packageVersion" json:"package_version,omitempty"`
	ProtocolVersion *uint32                                    `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Os              *string                                    `protobuf:"bytes,2,opt,name=os" json:"os,omitempty"`
	MachineName     *string                                    `protobuf:"bytes,3,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	IpPublic        *string                                    `protobuf:"bytes,4,opt,name=ip_public,json=ipPublic" json:"ip_public,omitempty"`
	IpPrivate       *string                                    `protobuf:"bytes,5,opt,name=ip_private,json=ipPrivate" json:"ip_private,omitempty"`
	BytesAvailable  *uint64                                    `protobuf:"varint,7,opt,name=bytes_available,json=bytesAvailable" json:"bytes_available,omitempty"`
	GamesRunning    []*CMsgClientGetClientDetailsResponse_Game `protobuf:"bytes,6,rep,name=games_running,json=gamesRunning" json:"games_running,omitempty"`
}

func (x *CMsgClientGetClientDetailsResponse) Reset() {
	*x = CMsgClientGetClientDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientDetailsResponse) ProtoMessage() {}

func (x *CMsgClientGetClientDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientDetailsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgClientGetClientDetailsResponse) GetPackageVersion() uint32 {
	if x != nil && x.PackageVersion != nil {
		return *x.PackageVersion
	}
	return 0
}

func (x *CMsgClientGetClientDetailsResponse) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientGetClientDetailsResponse) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CMsgClientGetClientDetailsResponse) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CMsgClientGetClientDetailsResponse) GetIpPublic() string {
	if x != nil && x.IpPublic != nil {
		return *x.IpPublic
	}
	return ""
}

func (x *CMsgClientGetClientDetailsResponse) GetIpPrivate() string {
	if x != nil && x.IpPrivate != nil {
		return *x.IpPrivate
	}
	return ""
}

func (x *CMsgClientGetClientDetailsResponse) GetBytesAvailable() uint64 {
	if x != nil && x.BytesAvailable != nil {
		return *x.BytesAvailable
	}
	return 0
}

func (x *CMsgClientGetClientDetailsResponse) GetGamesRunning() []*CMsgClientGetClientDetailsResponse_Game {
	if x != nil {
		return x.GamesRunning
	}
	return nil
}

type CMsgClientGetClientAppList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Media         *bool `protobuf:"varint,1,opt,name=media" json:"media,omitempty"`
	Tools         *bool `protobuf:"varint,2,opt,name=tools" json:"tools,omitempty"`
	Games         *bool `protobuf:"varint,3,opt,name=games" json:"games,omitempty"`
	OnlyInstalled *bool `protobuf:"varint,4,opt,name=only_installed,json=onlyInstalled" json:"only_installed,omitempty"`
	OnlyChanging  *bool `protobuf:"varint,5,opt,name=only_changing,json=onlyChanging" json:"only_changing,omitempty"`
	Comics        *bool `protobuf:"varint,6,opt,name=comics" json:"comics,omitempty"`
}

func (x *CMsgClientGetClientAppList) Reset() {
	*x = CMsgClientGetClientAppList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientAppList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientAppList) ProtoMessage() {}

func (x *CMsgClientGetClientAppList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientAppList.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientAppList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgClientGetClientAppList) GetMedia() bool {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return false
}

func (x *CMsgClientGetClientAppList) GetTools() bool {
	if x != nil && x.Tools != nil {
		return *x.Tools
	}
	return false
}

func (x *CMsgClientGetClientAppList) GetGames() bool {
	if x != nil && x.Games != nil {
		return *x.Games
	}
	return false
}

func (x *CMsgClientGetClientAppList) GetOnlyInstalled() bool {
	if x != nil && x.OnlyInstalled != nil {
		return *x.OnlyInstalled
	}
	return false
}

func (x *CMsgClientGetClientAppList) GetOnlyChanging() bool {
	if x != nil && x.OnlyChanging != nil {
		return *x.OnlyChanging
	}
	return false
}

func (x *CMsgClientGetClientAppList) GetComics() bool {
	if x != nil && x.Comics != nil {
		return *x.Comics
	}
	return false
}

type CMsgClientGetClientAppListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps           []*CMsgClientGetClientAppListResponse_App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	BytesAvailable *uint64                                   `protobuf:"varint,2,opt,name=bytes_available,json=bytesAvailable" json:"bytes_available,omitempty"`
}

func (x *CMsgClientGetClientAppListResponse) Reset() {
	*x = CMsgClientGetClientAppListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientAppListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientAppListResponse) ProtoMessage() {}

func (x *CMsgClientGetClientAppListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientAppListResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientAppListResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgClientGetClientAppListResponse) GetApps() []*CMsgClientGetClientAppListResponse_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CMsgClientGetClientAppListResponse) GetBytesAvailable() uint64 {
	if x != nil && x.BytesAvailable != nil {
		return *x.BytesAvailable
	}
	return 0
}

type CMsgClientInstallClientApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgClientInstallClientApp) Reset() {
	*x = CMsgClientInstallClientApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientInstallClientApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientInstallClientApp) ProtoMessage() {}

func (x *CMsgClientInstallClientApp) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientInstallClientApp.ProtoReflect.Descriptor instead.
func (*CMsgClientInstallClientApp) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgClientInstallClientApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgClientInstallClientAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgClientInstallClientAppResponse) Reset() {
	*x = CMsgClientInstallClientAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientInstallClientAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientInstallClientAppResponse) ProtoMessage() {}

func (x *CMsgClientInstallClientAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientInstallClientAppResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientInstallClientAppResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgClientInstallClientAppResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgClientUninstallClientApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgClientUninstallClientApp) Reset() {
	*x = CMsgClientUninstallClientApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUninstallClientApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUninstallClientApp) ProtoMessage() {}

func (x *CMsgClientUninstallClientApp) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUninstallClientApp.ProtoReflect.Descriptor instead.
func (*CMsgClientUninstallClientApp) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgClientUninstallClientApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgClientUninstallClientAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgClientUninstallClientAppResponse) Reset() {
	*x = CMsgClientUninstallClientAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUninstallClientAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUninstallClientAppResponse) ProtoMessage() {}

func (x *CMsgClientUninstallClientAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUninstallClientAppResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUninstallClientAppResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgClientUninstallClientAppResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgClientSetClientAppUpdateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid  *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Update *bool   `protobuf:"varint,2,opt,name=update" json:"update,omitempty"`
}

func (x *CMsgClientSetClientAppUpdateState) Reset() {
	*x = CMsgClientSetClientAppUpdateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSetClientAppUpdateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSetClientAppUpdateState) ProtoMessage() {}

func (x *CMsgClientSetClientAppUpdateState) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSetClientAppUpdateState.ProtoReflect.Descriptor instead.
func (*CMsgClientSetClientAppUpdateState) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgClientSetClientAppUpdateState) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientSetClientAppUpdateState) GetUpdate() bool {
	if x != nil && x.Update != nil {
		return *x.Update
	}
	return false
}

type CMsgClientSetClientAppUpdateStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgClientSetClientAppUpdateStateResponse) Reset() {
	*x = CMsgClientSetClientAppUpdateStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSetClientAppUpdateStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSetClientAppUpdateStateResponse) ProtoMessage() {}

func (x *CMsgClientSetClientAppUpdateStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSetClientAppUpdateStateResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientSetClientAppUpdateStateResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgClientSetClientAppUpdateStateResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgClientUFSUploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                     *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileSize                  *uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize               *uint32 `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile                   []byte  `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp                 *uint64 `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	FileName                  *string `protobuf:"bytes,6,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	PlatformsToSyncDeprecated *uint32 `protobuf:"varint,7,opt,name=platforms_to_sync_deprecated,json=platformsToSyncDeprecated" json:"platforms_to_sync_deprecated,omitempty"`
	PlatformsToSync           *uint32 `protobuf:"varint,8,opt,name=platforms_to_sync,json=platformsToSync,def=4294967295" json:"platforms_to_sync,omitempty"`
	CellId                    *uint32 `protobuf:"varint,9,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	CanEncrypt                *bool   `protobuf:"varint,10,opt,name=can_encrypt,json=canEncrypt" json:"can_encrypt,omitempty"`
}

// Default values for CMsgClientUFSUploadFileRequest fields.
const (
	Default_CMsgClientUFSUploadFileRequest_PlatformsToSync = uint32(4294967295)
)

func (x *CMsgClientUFSUploadFileRequest) Reset() {
	*x = CMsgClientUFSUploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadFileRequest) ProtoMessage() {}

func (x *CMsgClientUFSUploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadFileRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadFileRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgClientUFSUploadFileRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSUploadFileRequest) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUFSUploadFileRequest) GetPlatformsToSyncDeprecated() uint32 {
	if x != nil && x.PlatformsToSyncDeprecated != nil {
		return *x.PlatformsToSyncDeprecated
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetPlatformsToSync() uint32 {
	if x != nil && x.PlatformsToSync != nil {
		return *x.PlatformsToSync
	}
	return Default_CMsgClientUFSUploadFileRequest_PlatformsToSync
}

func (x *CMsgClientUFSUploadFileRequest) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientUFSUploadFileRequest) GetCanEncrypt() bool {
	if x != nil && x.CanEncrypt != nil {
		return *x.CanEncrypt
	}
	return false
}

type CMsgClientUFSUploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult     *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ShaFile     []byte  `protobuf:"bytes,2,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	UseHttp     *bool   `protobuf:"varint,3,opt,name=use_http,json=useHttp" json:"use_http,omitempty"`
	HttpHost    *string `protobuf:"bytes,4,opt,name=http_host,json=httpHost" json:"http_host,omitempty"`
	HttpUrl     *string `protobuf:"bytes,5,opt,name=http_url,json=httpUrl" json:"http_url,omitempty"`
	KvHeaders   []byte  `protobuf:"bytes,6,opt,name=kv_headers,json=kvHeaders" json:"kv_headers,omitempty"`
	UseHttps    *bool   `protobuf:"varint,7,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	EncryptFile *bool   `protobuf:"varint,8,opt,name=encrypt_file,json=encryptFile" json:"encrypt_file,omitempty"`
}

// Default values for CMsgClientUFSUploadFileResponse fields.
const (
	Default_CMsgClientUFSUploadFileResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSUploadFileResponse) Reset() {
	*x = CMsgClientUFSUploadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadFileResponse) ProtoMessage() {}

func (x *CMsgClientUFSUploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgClientUFSUploadFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSUploadFileResponse_Eresult
}

func (x *CMsgClientUFSUploadFileResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSUploadFileResponse) GetUseHttp() bool {
	if x != nil && x.UseHttp != nil {
		return *x.UseHttp
	}
	return false
}

func (x *CMsgClientUFSUploadFileResponse) GetHttpHost() string {
	if x != nil && x.HttpHost != nil {
		return *x.HttpHost
	}
	return ""
}

func (x *CMsgClientUFSUploadFileResponse) GetHttpUrl() string {
	if x != nil && x.HttpUrl != nil {
		return *x.HttpUrl
	}
	return ""
}

func (x *CMsgClientUFSUploadFileResponse) GetKvHeaders() []byte {
	if x != nil {
		return x.KvHeaders
	}
	return nil
}

func (x *CMsgClientUFSUploadFileResponse) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CMsgClientUFSUploadFileResponse) GetEncryptFile() bool {
	if x != nil && x.EncryptFile != nil {
		return *x.EncryptFile
	}
	return false
}

type CMsgClientUFSUploadCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*CMsgClientUFSUploadCommit_File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (x *CMsgClientUFSUploadCommit) Reset() {
	*x = CMsgClientUFSUploadCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadCommit) ProtoMessage() {}

func (x *CMsgClientUFSUploadCommit) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadCommit.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadCommit) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgClientUFSUploadCommit) GetFiles() []*CMsgClientUFSUploadCommit_File {
	if x != nil {
		return x.Files
	}
	return nil
}

type CMsgClientUFSUploadCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*CMsgClientUFSUploadCommitResponse_File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (x *CMsgClientUFSUploadCommitResponse) Reset() {
	*x = CMsgClientUFSUploadCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadCommitResponse) ProtoMessage() {}

func (x *CMsgClientUFSUploadCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadCommitResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadCommitResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgClientUFSUploadCommitResponse) GetFiles() []*CMsgClientUFSUploadCommitResponse_File {
	if x != nil {
		return x.Files
	}
	return nil
}

type CMsgClientUFSFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShaFile   []byte  `protobuf:"bytes,1,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	FileStart *uint32 `protobuf:"varint,2,opt,name=file_start,json=fileStart" json:"file_start,omitempty"`
	Data      []byte  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgClientUFSFileChunk) Reset() {
	*x = CMsgClientUFSFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSFileChunk) ProtoMessage() {}

func (x *CMsgClientUFSFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSFileChunk.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSFileChunk) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgClientUFSFileChunk) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSFileChunk) GetFileStart() uint32 {
	if x != nil && x.FileStart != nil {
		return *x.FileStart
	}
	return 0
}

func (x *CMsgClientUFSFileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgClientUFSTransferHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientUFSTransferHeartbeat) Reset() {
	*x = CMsgClientUFSTransferHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSTransferHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSTransferHeartbeat) ProtoMessage() {}

func (x *CMsgClientUFSTransferHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSTransferHeartbeat.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSTransferHeartbeat) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{90}
}

type CMsgClientUFSUploadFileFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ShaFile []byte `protobuf:"bytes,2,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
}

// Default values for CMsgClientUFSUploadFileFinished fields.
const (
	Default_CMsgClientUFSUploadFileFinished_Eresult = int32(2)
)

func (x *CMsgClientUFSUploadFileFinished) Reset() {
	*x = CMsgClientUFSUploadFileFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadFileFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadFileFinished) ProtoMessage() {}

func (x *CMsgClientUFSUploadFileFinished) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadFileFinished.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadFileFinished) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgClientUFSUploadFileFinished) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSUploadFileFinished_Eresult
}

func (x *CMsgClientUFSUploadFileFinished) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

type CMsgClientUFSDeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName         *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,3,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
}

func (x *CMsgClientUFSDeleteFileRequest) Reset() {
	*x = CMsgClientUFSDeleteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSDeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSDeleteFileRequest) ProtoMessage() {}

func (x *CMsgClientUFSDeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSDeleteFileRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSDeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgClientUFSDeleteFileRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSDeleteFileRequest) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUFSDeleteFileRequest) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

type CMsgClientUFSDeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult  *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	FileName *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

// Default values for CMsgClientUFSDeleteFileResponse fields.
const (
	Default_CMsgClientUFSDeleteFileResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSDeleteFileResponse) Reset() {
	*x = CMsgClientUFSDeleteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSDeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSDeleteFileResponse) ProtoMessage() {}

func (x *CMsgClientUFSDeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSDeleteFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSDeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientUFSDeleteFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSDeleteFileResponse_Eresult
}

func (x *CMsgClientUFSDeleteFileResponse) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

type CMsgClientUFSGetFileListForApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppsToQuery      []uint32 `protobuf:"varint,1,rep,name=apps_to_query,json=appsToQuery" json:"apps_to_query,omitempty"`
	SendPathPrefixes *bool    `protobuf:"varint,2,opt,name=send_path_prefixes,json=sendPathPrefixes" json:"send_path_prefixes,omitempty"`
}

func (x *CMsgClientUFSGetFileListForApp) Reset() {
	*x = CMsgClientUFSGetFileListForApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetFileListForApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetFileListForApp) ProtoMessage() {}

func (x *CMsgClientUFSGetFileListForApp) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetFileListForApp.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetFileListForApp) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgClientUFSGetFileListForApp) GetAppsToQuery() []uint32 {
	if x != nil {
		return x.AppsToQuery
	}
	return nil
}

func (x *CMsgClientUFSGetFileListForApp) GetSendPathPrefixes() bool {
	if x != nil && x.SendPathPrefixes != nil {
		return *x.SendPathPrefixes
	}
	return false
}

type CMsgClientUFSGetFileListForAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files        []*CMsgClientUFSGetFileListForAppResponse_File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	PathPrefixes []string                                       `protobuf:"bytes,2,rep,name=path_prefixes,json=pathPrefixes" json:"path_prefixes,omitempty"`
}

func (x *CMsgClientUFSGetFileListForAppResponse) Reset() {
	*x = CMsgClientUFSGetFileListForAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetFileListForAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetFileListForAppResponse) ProtoMessage() {}

func (x *CMsgClientUFSGetFileListForAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetFileListForAppResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetFileListForAppResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgClientUFSGetFileListForAppResponse) GetFiles() []*CMsgClientUFSGetFileListForAppResponse_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CMsgClientUFSGetFileListForAppResponse) GetPathPrefixes() []string {
	if x != nil {
		return x.PathPrefixes
	}
	return nil
}

type CMsgClientUFSDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName      *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	CanHandleHttp *bool   `protobuf:"varint,3,opt,name=can_handle_http,json=canHandleHttp" json:"can_handle_http,omitempty"`
}

func (x *CMsgClientUFSDownloadRequest) Reset() {
	*x = CMsgClientUFSDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSDownloadRequest) ProtoMessage() {}

func (x *CMsgClientUFSDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSDownloadRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSDownloadRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgClientUFSDownloadRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSDownloadRequest) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUFSDownloadRequest) GetCanHandleHttp() bool {
	if x != nil && x.CanHandleHttp != nil {
		return *x.CanHandleHttp
	}
	return false
}

type CMsgClientUFSDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult          *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId            *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileSize         *uint32 `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32 `protobuf:"varint,4,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile          []byte  `protobuf:"bytes,5,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64 `protobuf:"varint,6,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,7,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	UseHttp          *bool   `protobuf:"varint,8,opt,name=use_http,json=useHttp" json:"use_http,omitempty"`
	HttpHost         *string `protobuf:"bytes,9,opt,name=http_host,json=httpHost" json:"http_host,omitempty"`
	HttpUrl          *string `protobuf:"bytes,10,opt,name=http_url,json=httpUrl" json:"http_url,omitempty"`
	KvHeaders        []byte  `protobuf:"bytes,11,opt,name=kv_headers,json=kvHeaders" json:"kv_headers,omitempty"`
	UseHttps         *bool   `protobuf:"varint,12,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	Encrypted        *bool   `protobuf:"varint,13,opt,name=encrypted" json:"encrypted,omitempty"`
}

// Default values for CMsgClientUFSDownloadResponse fields.
const (
	Default_CMsgClientUFSDownloadResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSDownloadResponse) Reset() {
	*x = CMsgClientUFSDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSDownloadResponse) ProtoMessage() {}

func (x *CMsgClientUFSDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSDownloadResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSDownloadResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgClientUFSDownloadResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSDownloadResponse_Eresult
}

func (x *CMsgClientUFSDownloadResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSDownloadResponse) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUFSDownloadResponse) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CMsgClientUFSDownloadResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSDownloadResponse) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientUFSDownloadResponse) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

func (x *CMsgClientUFSDownloadResponse) GetUseHttp() bool {
	if x != nil && x.UseHttp != nil {
		return *x.UseHttp
	}
	return false
}

func (x *CMsgClientUFSDownloadResponse) GetHttpHost() string {
	if x != nil && x.HttpHost != nil {
		return *x.HttpHost
	}
	return ""
}

func (x *CMsgClientUFSDownloadResponse) GetHttpUrl() string {
	if x != nil && x.HttpUrl != nil {
		return *x.HttpUrl
	}
	return ""
}

func (x *CMsgClientUFSDownloadResponse) GetKvHeaders() []byte {
	if x != nil {
		return x.KvHeaders
	}
	return nil
}

func (x *CMsgClientUFSDownloadResponse) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CMsgClientUFSDownloadResponse) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

type CMsgClientUFSLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion *uint32  `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	AmSessionToken  *uint64  `protobuf:"varint,2,opt,name=am_session_token,json=amSessionToken" json:"am_session_token,omitempty"`
	Apps            []uint32 `protobuf:"varint,3,rep,name=apps" json:"apps,omitempty"`
}

func (x *CMsgClientUFSLoginRequest) Reset() {
	*x = CMsgClientUFSLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSLoginRequest) ProtoMessage() {}

func (x *CMsgClientUFSLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSLoginRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSLoginRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgClientUFSLoginRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgClientUFSLoginRequest) GetAmSessionToken() uint64 {
	if x != nil && x.AmSessionToken != nil {
		return *x.AmSessionToken
	}
	return 0
}

func (x *CMsgClientUFSLoginRequest) GetApps() []uint32 {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CMsgClientUFSLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientUFSLoginResponse fields.
const (
	Default_CMsgClientUFSLoginResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSLoginResponse) Reset() {
	*x = CMsgClientUFSLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSLoginResponse) ProtoMessage() {}

func (x *CMsgClientUFSLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSLoginResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSLoginResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgClientUFSLoginResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSLoginResponse_Eresult
}

type CMsgClientRequestEncryptedAppTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Userdata []byte  `protobuf:"bytes,2,opt,name=userdata" json:"userdata,omitempty"`
}

func (x *CMsgClientRequestEncryptedAppTicket) Reset() {
	*x = CMsgClientRequestEncryptedAppTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestEncryptedAppTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestEncryptedAppTicket) ProtoMessage() {}

func (x *CMsgClientRequestEncryptedAppTicket) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestEncryptedAppTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestEncryptedAppTicket) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgClientRequestEncryptedAppTicket) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientRequestEncryptedAppTicket) GetUserdata() []byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

type CMsgClientRequestEncryptedAppTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32             `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Eresult            *int32              `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	EncryptedAppTicket *EncryptedAppTicket `protobuf:"bytes,3,opt,name=encrypted_app_ticket,json=encryptedAppTicket" json:"encrypted_app_ticket,omitempty"`
}

// Default values for CMsgClientRequestEncryptedAppTicketResponse fields.
const (
	Default_CMsgClientRequestEncryptedAppTicketResponse_Eresult = int32(2)
)

func (x *CMsgClientRequestEncryptedAppTicketResponse) Reset() {
	*x = CMsgClientRequestEncryptedAppTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestEncryptedAppTicketResponse) ProtoMessage() {}

func (x *CMsgClientRequestEncryptedAppTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestEncryptedAppTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestEncryptedAppTicketResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRequestEncryptedAppTicketResponse_Eresult
}

func (x *CMsgClientRequestEncryptedAppTicketResponse) GetEncryptedAppTicket() *EncryptedAppTicket {
	if x != nil {
		return x.EncryptedAppTicket
	}
	return nil
}

type CMsgClientWalletInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasWallet        *bool  `protobuf:"varint,1,opt,name=has_wallet,json=hasWallet" json:"has_wallet,omitempty"`
	Balance          *int32 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Currency         *int32 `protobuf:"varint,3,opt,name=currency" json:"currency,omitempty"`
	BalanceDelayed   *int32 `protobuf:"varint,4,opt,name=balance_delayed,json=balanceDelayed" json:"balance_delayed,omitempty"`
	Balance64        *int64 `protobuf:"varint,5,opt,name=balance64" json:"balance64,omitempty"`
	Balance64Delayed *int64 `protobuf:"varint,6,opt,name=balance64_delayed,json=balance64Delayed" json:"balance64_delayed,omitempty"`
}

func (x *CMsgClientWalletInfoUpdate) Reset() {
	*x = CMsgClientWalletInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWalletInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWalletInfoUpdate) ProtoMessage() {}

func (x *CMsgClientWalletInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWalletInfoUpdate.ProtoReflect.Descriptor instead.
func (*CMsgClientWalletInfoUpdate) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgClientWalletInfoUpdate) GetHasWallet() bool {
	if x != nil && x.HasWallet != nil {
		return *x.HasWallet
	}
	return false
}

func (x *CMsgClientWalletInfoUpdate) GetBalance() int32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalanceDelayed() int32 {
	if x != nil && x.BalanceDelayed != nil {
		return *x.BalanceDelayed
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalance64() int64 {
	if x != nil && x.Balance64 != nil {
		return *x.Balance64
	}
	return 0
}

func (x *CMsgClientWalletInfoUpdate) GetBalance64Delayed() int64 {
	if x != nil && x.Balance64Delayed != nil {
		return *x.Balance64Delayed
	}
	return 0
}

type CMsgClientAppInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastChangenumber *uint32 `protobuf:"varint,1,opt,name=last_changenumber,json=lastChangenumber" json:"last_changenumber,omitempty"`
	SendChangelist   *bool   `protobuf:"varint,2,opt,name=send_changelist,json=sendChangelist" json:"send_changelist,omitempty"`
}

func (x *CMsgClientAppInfoUpdate) Reset() {
	*x = CMsgClientAppInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoUpdate) ProtoMessage() {}

func (x *CMsgClientAppInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoUpdate.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoUpdate) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgClientAppInfoUpdate) GetLastChangenumber() uint32 {
	if x != nil && x.LastChangenumber != nil {
		return *x.LastChangenumber
	}
	return 0
}

func (x *CMsgClientAppInfoUpdate) GetSendChangelist() bool {
	if x != nil && x.SendChangelist != nil {
		return *x.SendChangelist
	}
	return false
}

type CMsgClientAppInfoChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChangeNumber *uint32  `protobuf:"varint,1,opt,name=current_change_number,json=currentChangeNumber" json:"current_change_number,omitempty"`
	ForceFullUpdate     *bool    `protobuf:"varint,2,opt,name=force_full_update,json=forceFullUpdate" json:"force_full_update,omitempty"`
	AppIDs              []uint32 `protobuf:"varint,3,rep,name=appIDs" json:"appIDs,omitempty"`
}

func (x *CMsgClientAppInfoChanges) Reset() {
	*x = CMsgClientAppInfoChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoChanges) ProtoMessage() {}

func (x *CMsgClientAppInfoChanges) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoChanges.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoChanges) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgClientAppInfoChanges) GetCurrentChangeNumber() uint32 {
	if x != nil && x.CurrentChangeNumber != nil {
		return *x.CurrentChangeNumber
	}
	return 0
}

func (x *CMsgClientAppInfoChanges) GetForceFullUpdate() bool {
	if x != nil && x.ForceFullUpdate != nil {
		return *x.ForceFullUpdate
	}
	return false
}

func (x *CMsgClientAppInfoChanges) GetAppIDs() []uint32 {
	if x != nil {
		return x.AppIDs
	}
	return nil
}

type CMsgClientAppInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps            []*CMsgClientAppInfoRequest_App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	SupportsBatches *bool                           `protobuf:"varint,2,opt,name=supports_batches,json=supportsBatches,def=0" json:"supports_batches,omitempty"`
}

// Default values for CMsgClientAppInfoRequest fields.
const (
	Default_CMsgClientAppInfoRequest_SupportsBatches = bool(false)
)

func (x *CMsgClientAppInfoRequest) Reset() {
	*x = CMsgClientAppInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoRequest) ProtoMessage() {}

func (x *CMsgClientAppInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgClientAppInfoRequest) GetApps() []*CMsgClientAppInfoRequest_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CMsgClientAppInfoRequest) GetSupportsBatches() bool {
	if x != nil && x.SupportsBatches != nil {
		return *x.SupportsBatches
	}
	return Default_CMsgClientAppInfoRequest_SupportsBatches
}

type CMsgClientAppInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps        []*CMsgClientAppInfoResponse_App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	AppsUnknown []uint32                         `protobuf:"varint,2,rep,name=apps_unknown,json=appsUnknown" json:"apps_unknown,omitempty"`
	AppsPending *uint32                          `protobuf:"varint,3,opt,name=apps_pending,json=appsPending" json:"apps_pending,omitempty"`
}

func (x *CMsgClientAppInfoResponse) Reset() {
	*x = CMsgClientAppInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoResponse) ProtoMessage() {}

func (x *CMsgClientAppInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgClientAppInfoResponse) GetApps() []*CMsgClientAppInfoResponse_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CMsgClientAppInfoResponse) GetAppsUnknown() []uint32 {
	if x != nil {
		return x.AppsUnknown
	}
	return nil
}

func (x *CMsgClientAppInfoResponse) GetAppsPending() uint32 {
	if x != nil && x.AppsPending != nil {
		return *x.AppsPending
	}
	return 0
}

type CMsgClientPackageInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageIds   []uint32 `protobuf:"varint,1,rep,name=package_ids,json=packageIds" json:"package_ids,omitempty"`
	MetaDataOnly *bool    `protobuf:"varint,2,opt,name=meta_data_only,json=metaDataOnly" json:"meta_data_only,omitempty"`
}

func (x *CMsgClientPackageInfoRequest) Reset() {
	*x = CMsgClientPackageInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPackageInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPackageInfoRequest) ProtoMessage() {}

func (x *CMsgClientPackageInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPackageInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientPackageInfoRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgClientPackageInfoRequest) GetPackageIds() []uint32 {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

func (x *CMsgClientPackageInfoRequest) GetMetaDataOnly() bool {
	if x != nil && x.MetaDataOnly != nil {
		return *x.MetaDataOnly
	}
	return false
}

type CMsgClientPackageInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages        []*CMsgClientPackageInfoResponse_Package `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
	PackagesUnknown []uint32                                 `protobuf:"varint,2,rep,name=packages_unknown,json=packagesUnknown" json:"packages_unknown,omitempty"`
	PackagesPending *uint32                                  `protobuf:"varint,3,opt,name=packages_pending,json=packagesPending" json:"packages_pending,omitempty"`
}

func (x *CMsgClientPackageInfoResponse) Reset() {
	*x = CMsgClientPackageInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPackageInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPackageInfoResponse) ProtoMessage() {}

func (x *CMsgClientPackageInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPackageInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPackageInfoResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgClientPackageInfoResponse) GetPackages() []*CMsgClientPackageInfoResponse_Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *CMsgClientPackageInfoResponse) GetPackagesUnknown() []uint32 {
	if x != nil {
		return x.PackagesUnknown
	}
	return nil
}

func (x *CMsgClientPackageInfoResponse) GetPackagesPending() uint32 {
	if x != nil && x.PackagesPending != nil {
		return *x.PackagesPending
	}
	return 0
}

type CMsgClientPICSChangesSinceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceChangeNumber      *uint32 `protobuf:"varint,1,opt,name=since_change_number,json=sinceChangeNumber" json:"since_change_number,omitempty"`
	SendAppInfoChanges     *bool   `protobuf:"varint,2,opt,name=send_app_info_changes,json=sendAppInfoChanges" json:"send_app_info_changes,omitempty"`
	SendPackageInfoChanges *bool   `protobuf:"varint,3,opt,name=send_package_info_changes,json=sendPackageInfoChanges" json:"send_package_info_changes,omitempty"`
	NumAppInfoCached       *uint32 `protobuf:"varint,4,opt,name=num_app_info_cached,json=numAppInfoCached" json:"num_app_info_cached,omitempty"`
	NumPackageInfoCached   *uint32 `protobuf:"varint,5,opt,name=num_package_info_cached,json=numPackageInfoCached" json:"num_package_info_cached,omitempty"`
}

func (x *CMsgClientPICSChangesSinceRequest) Reset() {
	*x = CMsgClientPICSChangesSinceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSChangesSinceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSChangesSinceRequest) ProtoMessage() {}

func (x *CMsgClientPICSChangesSinceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSChangesSinceRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSChangesSinceRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgClientPICSChangesSinceRequest) GetSinceChangeNumber() uint32 {
	if x != nil && x.SinceChangeNumber != nil {
		return *x.SinceChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceRequest) GetSendAppInfoChanges() bool {
	if x != nil && x.SendAppInfoChanges != nil {
		return *x.SendAppInfoChanges
	}
	return false
}

func (x *CMsgClientPICSChangesSinceRequest) GetSendPackageInfoChanges() bool {
	if x != nil && x.SendPackageInfoChanges != nil {
		return *x.SendPackageInfoChanges
	}
	return false
}

func (x *CMsgClientPICSChangesSinceRequest) GetNumAppInfoCached() uint32 {
	if x != nil && x.NumAppInfoCached != nil {
		return *x.NumAppInfoCached
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceRequest) GetNumPackageInfoCached() uint32 {
	if x != nil && x.NumPackageInfoCached != nil {
		return *x.NumPackageInfoCached
	}
	return 0
}

type CMsgClientPICSChangesSinceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChangeNumber    *uint32                                             `protobuf:"varint,1,opt,name=current_change_number,json=currentChangeNumber" json:"current_change_number,omitempty"`
	SinceChangeNumber      *uint32                                             `protobuf:"varint,2,opt,name=since_change_number,json=sinceChangeNumber" json:"since_change_number,omitempty"`
	ForceFullUpdate        *bool                                               `protobuf:"varint,3,opt,name=force_full_update,json=forceFullUpdate" json:"force_full_update,omitempty"`
	PackageChanges         []*CMsgClientPICSChangesSinceResponse_PackageChange `protobuf:"bytes,4,rep,name=package_changes,json=packageChanges" json:"package_changes,omitempty"`
	AppChanges             []*CMsgClientPICSChangesSinceResponse_AppChange     `protobuf:"bytes,5,rep,name=app_changes,json=appChanges" json:"app_changes,omitempty"`
	ForceFullAppUpdate     *bool                                               `protobuf:"varint,6,opt,name=force_full_app_update,json=forceFullAppUpdate" json:"force_full_app_update,omitempty"`
	ForceFullPackageUpdate *bool                                               `protobuf:"varint,7,opt,name=force_full_package_update,json=forceFullPackageUpdate" json:"force_full_package_update,omitempty"`
}

func (x *CMsgClientPICSChangesSinceResponse) Reset() {
	*x = CMsgClientPICSChangesSinceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSChangesSinceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSChangesSinceResponse) ProtoMessage() {}

func (x *CMsgClientPICSChangesSinceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSChangesSinceResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSChangesSinceResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgClientPICSChangesSinceResponse) GetCurrentChangeNumber() uint32 {
	if x != nil && x.CurrentChangeNumber != nil {
		return *x.CurrentChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse) GetSinceChangeNumber() uint32 {
	if x != nil && x.SinceChangeNumber != nil {
		return *x.SinceChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse) GetForceFullUpdate() bool {
	if x != nil && x.ForceFullUpdate != nil {
		return *x.ForceFullUpdate
	}
	return false
}

func (x *CMsgClientPICSChangesSinceResponse) GetPackageChanges() []*CMsgClientPICSChangesSinceResponse_PackageChange {
	if x != nil {
		return x.PackageChanges
	}
	return nil
}

func (x *CMsgClientPICSChangesSinceResponse) GetAppChanges() []*CMsgClientPICSChangesSinceResponse_AppChange {
	if x != nil {
		return x.AppChanges
	}
	return nil
}

func (x *CMsgClientPICSChangesSinceResponse) GetForceFullAppUpdate() bool {
	if x != nil && x.ForceFullAppUpdate != nil {
		return *x.ForceFullAppUpdate
	}
	return false
}

func (x *CMsgClientPICSChangesSinceResponse) GetForceFullPackageUpdate() bool {
	if x != nil && x.ForceFullPackageUpdate != nil {
		return *x.ForceFullPackageUpdate
	}
	return false
}

type CMsgClientPICSProductInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages              []*CMsgClientPICSProductInfoRequest_PackageInfo `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
	Apps                  []*CMsgClientPICSProductInfoRequest_AppInfo     `protobuf:"bytes,2,rep,name=apps" json:"apps,omitempty"`
	MetaDataOnly          *bool                                           `protobuf:"varint,3,opt,name=meta_data_only,json=metaDataOnly" json:"meta_data_only,omitempty"`
	NumPrevFailed         *uint32                                         `protobuf:"varint,4,opt,name=num_prev_failed,json=numPrevFailed" json:"num_prev_failed,omitempty"`
	SupportsPackageTokens *uint32                                         `protobuf:"varint,5,opt,name=supports_package_tokens,json=supportsPackageTokens" json:"supports_package_tokens,omitempty"`
}

func (x *CMsgClientPICSProductInfoRequest) Reset() {
	*x = CMsgClientPICSProductInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoRequest) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgClientPICSProductInfoRequest) GetPackages() []*CMsgClientPICSProductInfoRequest_PackageInfo {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *CMsgClientPICSProductInfoRequest) GetApps() []*CMsgClientPICSProductInfoRequest_AppInfo {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CMsgClientPICSProductInfoRequest) GetMetaDataOnly() bool {
	if x != nil && x.MetaDataOnly != nil {
		return *x.MetaDataOnly
	}
	return false
}

func (x *CMsgClientPICSProductInfoRequest) GetNumPrevFailed() uint32 {
	if x != nil && x.NumPrevFailed != nil {
		return *x.NumPrevFailed
	}
	return 0
}

func (x *CMsgClientPICSProductInfoRequest) GetSupportsPackageTokens() uint32 {
	if x != nil && x.SupportsPackageTokens != nil {
		return *x.SupportsPackageTokens
	}
	return 0
}

type CMsgClientPICSProductInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps              []*CMsgClientPICSProductInfoResponse_AppInfo     `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	UnknownAppids     []uint32                                         `protobuf:"varint,2,rep,name=unknown_appids,json=unknownAppids" json:"unknown_appids,omitempty"`
	Packages          []*CMsgClientPICSProductInfoResponse_PackageInfo `protobuf:"bytes,3,rep,name=packages" json:"packages,omitempty"`
	UnknownPackageids []uint32                                         `protobuf:"varint,4,rep,name=unknown_packageids,json=unknownPackageids" json:"unknown_packageids,omitempty"`
	MetaDataOnly      *bool                                            `protobuf:"varint,5,opt,name=meta_data_only,json=metaDataOnly" json:"meta_data_only,omitempty"`
	ResponsePending   *bool                                            `protobuf:"varint,6,opt,name=response_pending,json=responsePending" json:"response_pending,omitempty"`
	HttpMinSize       *uint32                                          `protobuf:"varint,7,opt,name=http_min_size,json=httpMinSize" json:"http_min_size,omitempty"`
	HttpHost          *string                                          `protobuf:"bytes,8,opt,name=http_host,json=httpHost" json:"http_host,omitempty"`
}

func (x *CMsgClientPICSProductInfoResponse) Reset() {
	*x = CMsgClientPICSProductInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoResponse) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgClientPICSProductInfoResponse) GetApps() []*CMsgClientPICSProductInfoResponse_AppInfo {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse) GetUnknownAppids() []uint32 {
	if x != nil {
		return x.UnknownAppids
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse) GetPackages() []*CMsgClientPICSProductInfoResponse_PackageInfo {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse) GetUnknownPackageids() []uint32 {
	if x != nil {
		return x.UnknownPackageids
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse) GetMetaDataOnly() bool {
	if x != nil && x.MetaDataOnly != nil {
		return *x.MetaDataOnly
	}
	return false
}

func (x *CMsgClientPICSProductInfoResponse) GetResponsePending() bool {
	if x != nil && x.ResponsePending != nil {
		return *x.ResponsePending
	}
	return false
}

func (x *CMsgClientPICSProductInfoResponse) GetHttpMinSize() uint32 {
	if x != nil && x.HttpMinSize != nil {
		return *x.HttpMinSize
	}
	return 0
}

func (x *CMsgClientPICSProductInfoResponse) GetHttpHost() string {
	if x != nil && x.HttpHost != nil {
		return *x.HttpHost
	}
	return ""
}

type CMsgClientPICSAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageids []uint32 `protobuf:"varint,1,rep,name=packageids" json:"packageids,omitempty"`
	Appids     []uint32 `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
}

func (x *CMsgClientPICSAccessTokenRequest) Reset() {
	*x = CMsgClientPICSAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSAccessTokenRequest) ProtoMessage() {}

func (x *CMsgClientPICSAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgClientPICSAccessTokenRequest) GetPackageids() []uint32 {
	if x != nil {
		return x.Packageids
	}
	return nil
}

func (x *CMsgClientPICSAccessTokenRequest) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CMsgClientPICSAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageAccessTokens []*CMsgClientPICSAccessTokenResponse_PackageToken `protobuf:"bytes,1,rep,name=package_access_tokens,json=packageAccessTokens" json:"package_access_tokens,omitempty"`
	PackageDeniedTokens []uint32                                          `protobuf:"varint,2,rep,name=package_denied_tokens,json=packageDeniedTokens" json:"package_denied_tokens,omitempty"`
	AppAccessTokens     []*CMsgClientPICSAccessTokenResponse_AppToken     `protobuf:"bytes,3,rep,name=app_access_tokens,json=appAccessTokens" json:"app_access_tokens,omitempty"`
	AppDeniedTokens     []uint32                                          `protobuf:"varint,4,rep,name=app_denied_tokens,json=appDeniedTokens" json:"app_denied_tokens,omitempty"`
}

func (x *CMsgClientPICSAccessTokenResponse) Reset() {
	*x = CMsgClientPICSAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSAccessTokenResponse) ProtoMessage() {}

func (x *CMsgClientPICSAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgClientPICSAccessTokenResponse) GetPackageAccessTokens() []*CMsgClientPICSAccessTokenResponse_PackageToken {
	if x != nil {
		return x.PackageAccessTokens
	}
	return nil
}

func (x *CMsgClientPICSAccessTokenResponse) GetPackageDeniedTokens() []uint32 {
	if x != nil {
		return x.PackageDeniedTokens
	}
	return nil
}

func (x *CMsgClientPICSAccessTokenResponse) GetAppAccessTokens() []*CMsgClientPICSAccessTokenResponse_AppToken {
	if x != nil {
		return x.AppAccessTokens
	}
	return nil
}

func (x *CMsgClientPICSAccessTokenResponse) GetAppDeniedTokens() []uint32 {
	if x != nil {
		return x.AppDeniedTokens
	}
	return nil
}

type CMsgClientUFSGetUGCDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hcontent *uint64 `protobuf:"fixed64,1,opt,name=hcontent,def=18446744073709551615" json:"hcontent,omitempty"`
}

// Default values for CMsgClientUFSGetUGCDetails fields.
const (
	Default_CMsgClientUFSGetUGCDetails_Hcontent = uint64(18446744073709551615)
)

func (x *CMsgClientUFSGetUGCDetails) Reset() {
	*x = CMsgClientUFSGetUGCDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetUGCDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetUGCDetails) ProtoMessage() {}

func (x *CMsgClientUFSGetUGCDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetUGCDetails.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetUGCDetails) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgClientUFSGetUGCDetails) GetHcontent() uint64 {
	if x != nil && x.Hcontent != nil {
		return *x.Hcontent
	}
	return Default_CMsgClientUFSGetUGCDetails_Hcontent
}

type CMsgClientUFSGetUGCDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult            *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Url                *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	AppId              *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Filename           *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	SteamidCreator     *uint64 `protobuf:"fixed64,5,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	FileSize           *uint32 `protobuf:"varint,6,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	CompressedFileSize *uint32 `protobuf:"varint,7,opt,name=compressed_file_size,json=compressedFileSize" json:"compressed_file_size,omitempty"`
	RangecheckHost     *string `protobuf:"bytes,8,opt,name=rangecheck_host,json=rangecheckHost" json:"rangecheck_host,omitempty"`
	FileEncodedSha1    *string `protobuf:"bytes,9,opt,name=file_encoded_sha1,json=fileEncodedSha1" json:"file_encoded_sha1,omitempty"`
}

// Default values for CMsgClientUFSGetUGCDetailsResponse fields.
const (
	Default_CMsgClientUFSGetUGCDetailsResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSGetUGCDetailsResponse) Reset() {
	*x = CMsgClientUFSGetUGCDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetUGCDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetUGCDetailsResponse) ProtoMessage() {}

func (x *CMsgClientUFSGetUGCDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetUGCDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetUGCDetailsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSGetUGCDetailsResponse_Eresult
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetCompressedFileSize() uint32 {
	if x != nil && x.CompressedFileSize != nil {
		return *x.CompressedFileSize
	}
	return 0
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetRangecheckHost() string {
	if x != nil && x.RangecheckHost != nil {
		return *x.RangecheckHost
	}
	return ""
}

func (x *CMsgClientUFSGetUGCDetailsResponse) GetFileEncodedSha1() string {
	if x != nil && x.FileEncodedSha1 != nil {
		return *x.FileEncodedSha1
	}
	return ""
}

type CMsgClientUFSGetSingleFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (x *CMsgClientUFSGetSingleFileInfo) Reset() {
	*x = CMsgClientUFSGetSingleFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetSingleFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetSingleFileInfo) ProtoMessage() {}

func (x *CMsgClientUFSGetSingleFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetSingleFileInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetSingleFileInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgClientUFSGetSingleFileInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSGetSingleFileInfo) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

type CMsgClientUFSGetSingleFileInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult          *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId            *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName         *string `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ShaFile          []byte  `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64 `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	RawFileSize      *uint32 `protobuf:"varint,6,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,7,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
}

// Default values for CMsgClientUFSGetSingleFileInfoResponse fields.
const (
	Default_CMsgClientUFSGetSingleFileInfoResponse_Eresult = int32(2)
)

func (x *CMsgClientUFSGetSingleFileInfoResponse) Reset() {
	*x = CMsgClientUFSGetSingleFileInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetSingleFileInfoResponse) ProtoMessage() {}

func (x *CMsgClientUFSGetSingleFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetSingleFileInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetSingleFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSGetSingleFileInfoResponse_Eresult
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CMsgClientUFSGetSingleFileInfoResponse) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

type CMsgClientUFSShareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (x *CMsgClientUFSShareFile) Reset() {
	*x = CMsgClientUFSShareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSShareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSShareFile) ProtoMessage() {}

func (x *CMsgClientUFSShareFile) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSShareFile.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSShareFile) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgClientUFSShareFile) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSShareFile) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

type CMsgClientUFSShareFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult  *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Hcontent *uint64 `protobuf:"fixed64,2,opt,name=hcontent,def=18446744073709551615" json:"hcontent,omitempty"`
}

// Default values for CMsgClientUFSShareFileResponse fields.
const (
	Default_CMsgClientUFSShareFileResponse_Eresult  = int32(2)
	Default_CMsgClientUFSShareFileResponse_Hcontent = uint64(18446744073709551615)
)

func (x *CMsgClientUFSShareFileResponse) Reset() {
	*x = CMsgClientUFSShareFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSShareFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSShareFileResponse) ProtoMessage() {}

func (x *CMsgClientUFSShareFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSShareFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSShareFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgClientUFSShareFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSShareFileResponse_Eresult
}

func (x *CMsgClientUFSShareFileResponse) GetHcontent() uint64 {
	if x != nil && x.Hcontent != nil {
		return *x.Hcontent
	}
	return Default_CMsgClientUFSShareFileResponse_Hcontent
}

type CMsgClientAMGetClanOfficers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidClan *uint64 `protobuf:"fixed64,1,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
}

func (x *CMsgClientAMGetClanOfficers) Reset() {
	*x = CMsgClientAMGetClanOfficers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetClanOfficers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetClanOfficers) ProtoMessage() {}

func (x *CMsgClientAMGetClanOfficers) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetClanOfficers.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetClanOfficers) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgClientAMGetClanOfficers) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

type CMsgClientAMGetClanOfficersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult      *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	SteamidClan  *uint64 `protobuf:"fixed64,2,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
	OfficerCount *int32  `protobuf:"varint,3,opt,name=officer_count,json=officerCount" json:"officer_count,omitempty"`
}

// Default values for CMsgClientAMGetClanOfficersResponse fields.
const (
	Default_CMsgClientAMGetClanOfficersResponse_Eresult = int32(2)
)

func (x *CMsgClientAMGetClanOfficersResponse) Reset() {
	*x = CMsgClientAMGetClanOfficersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetClanOfficersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetClanOfficersResponse) ProtoMessage() {}

func (x *CMsgClientAMGetClanOfficersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetClanOfficersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetClanOfficersResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgClientAMGetClanOfficersResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAMGetClanOfficersResponse_Eresult
}

func (x *CMsgClientAMGetClanOfficersResponse) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

func (x *CMsgClientAMGetClanOfficersResponse) GetOfficerCount() int32 {
	if x != nil && x.OfficerCount != nil {
		return *x.OfficerCount
	}
	return 0
}

type CMsgClientAMGetPersonaNameHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdCount *int32                                          `protobuf:"varint,1,opt,name=id_count,json=idCount" json:"id_count,omitempty"`
	Ids     []*CMsgClientAMGetPersonaNameHistory_IdInstance `protobuf:"bytes,2,rep,name=Ids" json:"Ids,omitempty"`
}

func (x *CMsgClientAMGetPersonaNameHistory) Reset() {
	*x = CMsgClientAMGetPersonaNameHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetPersonaNameHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistory) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistory) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgClientAMGetPersonaNameHistory) GetIdCount() int32 {
	if x != nil && x.IdCount != nil {
		return *x.IdCount
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistory) GetIds() []*CMsgClientAMGetPersonaNameHistory_IdInstance {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CMsgClientAMGetPersonaNameHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty"`
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse) GetResponses() []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CMsgClientDeregisterWithServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eservertype *uint32 `protobuf:"varint,1,opt,name=eservertype" json:"eservertype,omitempty"`
	AppId       *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientDeregisterWithServer) Reset() {
	*x = CMsgClientDeregisterWithServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDeregisterWithServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDeregisterWithServer) ProtoMessage() {}

func (x *CMsgClientDeregisterWithServer) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDeregisterWithServer.ProtoReflect.Descriptor instead.
func (*CMsgClientDeregisterWithServer) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgClientDeregisterWithServer) GetEservertype() uint32 {
	if x != nil && x.Eservertype != nil {
		return *x.Eservertype
	}
	return 0
}

func (x *CMsgClientDeregisterWithServer) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientClanState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidClan      *uint64                         `protobuf:"fixed64,1,opt,name=steamid_clan,json=steamidClan" json:"steamid_clan,omitempty"`
	ClanAccountFlags *uint32                         `protobuf:"varint,3,opt,name=clan_account_flags,json=clanAccountFlags" json:"clan_account_flags,omitempty"`
	NameInfo         *CMsgClientClanState_NameInfo   `protobuf:"bytes,4,opt,name=name_info,json=nameInfo" json:"name_info,omitempty"`
	UserCounts       *CMsgClientClanState_UserCounts `protobuf:"bytes,5,opt,name=user_counts,json=userCounts" json:"user_counts,omitempty"`
	Events           []*CMsgClientClanState_Event    `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
	Announcements    []*CMsgClientClanState_Event    `protobuf:"bytes,7,rep,name=announcements" json:"announcements,omitempty"`
	ChatRoomPrivate  *bool                           `protobuf:"varint,8,opt,name=chat_room_private,json=chatRoomPrivate" json:"chat_room_private,omitempty"`
}

func (x *CMsgClientClanState) Reset() {
	*x = CMsgClientClanState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientClanState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState) ProtoMessage() {}

func (x *CMsgClientClanState) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgClientClanState) GetSteamidClan() uint64 {
	if x != nil && x.SteamidClan != nil {
		return *x.SteamidClan
	}
	return 0
}

func (x *CMsgClientClanState) GetClanAccountFlags() uint32 {
	if x != nil && x.ClanAccountFlags != nil {
		return *x.ClanAccountFlags
	}
	return 0
}

func (x *CMsgClientClanState) GetNameInfo() *CMsgClientClanState_NameInfo {
	if x != nil {
		return x.NameInfo
	}
	return nil
}

func (x *CMsgClientClanState) GetUserCounts() *CMsgClientClanState_UserCounts {
	if x != nil {
		return x.UserCounts
	}
	return nil
}

func (x *CMsgClientClanState) GetEvents() []*CMsgClientClanState_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CMsgClientClanState) GetAnnouncements() []*CMsgClientClanState_Event {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *CMsgClientClanState) GetChatRoomPrivate() bool {
	if x != nil && x.ChatRoomPrivate != nil {
		return *x.ChatRoomPrivate
	}
	return false
}

type CMsgClientUnsignedInstallScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName        *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize        *uint32 `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	SignatureBroken *bool   `protobuf:"varint,4,opt,name=signature_broken,json=signatureBroken" json:"signature_broken,omitempty"`
	DepotId         *uint32 `protobuf:"varint,5,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	ManifestId      *uint64 `protobuf:"varint,6,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	FileFlags       *uint32 `protobuf:"varint,7,opt,name=file_flags,json=fileFlags" json:"file_flags,omitempty"`
}

func (x *CMsgClientUnsignedInstallScript) Reset() {
	*x = CMsgClientUnsignedInstallScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUnsignedInstallScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUnsignedInstallScript) ProtoMessage() {}

func (x *CMsgClientUnsignedInstallScript) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUnsignedInstallScript.ProtoReflect.Descriptor instead.
func (*CMsgClientUnsignedInstallScript) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgClientUnsignedInstallScript) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUnsignedInstallScript) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUnsignedInstallScript) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUnsignedInstallScript) GetSignatureBroken() bool {
	if x != nil && x.SignatureBroken != nil {
		return *x.SignatureBroken
	}
	return false
}

func (x *CMsgClientUnsignedInstallScript) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientUnsignedInstallScript) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CMsgClientUnsignedInstallScript) GetFileFlags() uint32 {
	if x != nil && x.FileFlags != nil {
		return *x.FileFlags
	}
	return 0
}

type CMsgGSPlayerList_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId            *uint64        `protobuf:"varint,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	DeprecatedPublicIp *uint32        `protobuf:"varint,2,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Token              []byte         `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	PublicIp           *CMsgIPAddress `protobuf:"bytes,4,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgGSPlayerList_Player) Reset() {
	*x = CMsgGSPlayerList_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSPlayerList_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSPlayerList_Player) ProtoMessage() {}

func (x *CMsgGSPlayerList_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSPlayerList_Player.ProtoReflect.Descriptor instead.
func (*CMsgGSPlayerList_Player) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgGSPlayerList_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSPlayerList_Player) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgGSPlayerList_Player) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgGSPlayerList_Player) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgClientGamesPlayed_GamePlayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdGs                    *uint64        `protobuf:"varint,1,opt,name=steam_id_gs,json=steamIdGs" json:"steam_id_gs,omitempty"`
	GameId                       *uint64        `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DeprecatedGameIpAddress      *uint32        `protobuf:"varint,3,opt,name=deprecated_game_ip_address,json=deprecatedGameIpAddress" json:"deprecated_game_ip_address,omitempty"`
	GamePort                     *uint32        `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	IsSecure                     *bool          `protobuf:"varint,5,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
	Token                        []byte         `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	GameExtraInfo                *string        `protobuf:"bytes,7,opt,name=game_extra_info,json=gameExtraInfo" json:"game_extra_info,omitempty"`
	GameDataBlob                 []byte         `protobuf:"bytes,8,opt,name=game_data_blob,json=gameDataBlob" json:"game_data_blob,omitempty"`
	ProcessId                    *uint32        `protobuf:"varint,9,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	StreamingProviderId          *uint32        `protobuf:"varint,10,opt,name=streaming_provider_id,json=streamingProviderId" json:"streaming_provider_id,omitempty"`
	GameFlags                    *uint32        `protobuf:"varint,11,opt,name=game_flags,json=gameFlags" json:"game_flags,omitempty"`
	OwnerId                      *uint32        `protobuf:"varint,12,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	VrHmdVendor                  *string        `protobuf:"bytes,13,opt,name=vr_hmd_vendor,json=vrHmdVendor" json:"vr_hmd_vendor,omitempty"`
	VrHmdModel                   *string        `protobuf:"bytes,14,opt,name=vr_hmd_model,json=vrHmdModel" json:"vr_hmd_model,omitempty"`
	LaunchOptionType             *uint32        `protobuf:"varint,15,opt,name=launch_option_type,json=launchOptionType,def=0" json:"launch_option_type,omitempty"`
	PrimaryControllerType        *int32         `protobuf:"varint,16,opt,name=primary_controller_type,json=primaryControllerType,def=-1" json:"primary_controller_type,omitempty"`
	PrimarySteamControllerSerial *string        `protobuf:"bytes,17,opt,name=primary_steam_controller_serial,json=primarySteamControllerSerial" json:"primary_steam_controller_serial,omitempty"`
	TotalSteamControllerCount    *uint32        `protobuf:"varint,18,opt,name=total_steam_controller_count,json=totalSteamControllerCount,def=0" json:"total_steam_controller_count,omitempty"`
	TotalNonSteamControllerCount *uint32        `protobuf:"varint,19,opt,name=total_non_steam_controller_count,json=totalNonSteamControllerCount,def=0" json:"total_non_steam_controller_count,omitempty"`
	ControllerWorkshopFileId     *uint64        `protobuf:"varint,20,opt,name=controller_workshop_file_id,json=controllerWorkshopFileId,def=0" json:"controller_workshop_file_id,omitempty"`
	LaunchSource                 *uint32        `protobuf:"varint,21,opt,name=launch_source,json=launchSource,def=0" json:"launch_source,omitempty"`
	VrHmdRuntime                 *uint32        `protobuf:"varint,22,opt,name=vr_hmd_runtime,json=vrHmdRuntime" json:"vr_hmd_runtime,omitempty"`
	GameIpAddress                *CMsgIPAddress `protobuf:"bytes,23,opt,name=game_ip_address,json=gameIpAddress" json:"game_ip_address,omitempty"`
	ControllerConnectionType     *uint32        `protobuf:"varint,24,opt,name=controller_connection_type,json=controllerConnectionType,def=0" json:"controller_connection_type,omitempty"`
}

// Default values for CMsgClientGamesPlayed_GamePlayed fields.
const (
	Default_CMsgClientGamesPlayed_GamePlayed_LaunchOptionType             = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_PrimaryControllerType        = int32(-1)
	Default_CMsgClientGamesPlayed_GamePlayed_TotalSteamControllerCount    = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_TotalNonSteamControllerCount = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_ControllerWorkshopFileId     = uint64(0)
	Default_CMsgClientGamesPlayed_GamePlayed_LaunchSource                 = uint32(0)
	Default_CMsgClientGamesPlayed_GamePlayed_ControllerConnectionType     = uint32(0)
)

func (x *CMsgClientGamesPlayed_GamePlayed) Reset() {
	*x = CMsgClientGamesPlayed_GamePlayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGamesPlayed_GamePlayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGamesPlayed_GamePlayed) ProtoMessage() {}

func (x *CMsgClientGamesPlayed_GamePlayed) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGamesPlayed_GamePlayed.ProtoReflect.Descriptor instead.
func (*CMsgClientGamesPlayed_GamePlayed) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetSteamIdGs() uint64 {
	if x != nil && x.SteamIdGs != nil {
		return *x.SteamIdGs
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetDeprecatedGameIpAddress() uint32 {
	if x != nil && x.DeprecatedGameIpAddress != nil {
		return *x.DeprecatedGameIpAddress
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetIsSecure() bool {
	if x != nil && x.IsSecure != nil {
		return *x.IsSecure
	}
	return false
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameExtraInfo() string {
	if x != nil && x.GameExtraInfo != nil {
		return *x.GameExtraInfo
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameDataBlob() []byte {
	if x != nil {
		return x.GameDataBlob
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetProcessId() uint32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetStreamingProviderId() uint32 {
	if x != nil && x.StreamingProviderId != nil {
		return *x.StreamingProviderId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameFlags() uint32 {
	if x != nil && x.GameFlags != nil {
		return *x.GameFlags
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdVendor() string {
	if x != nil && x.VrHmdVendor != nil {
		return *x.VrHmdVendor
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdModel() string {
	if x != nil && x.VrHmdModel != nil {
		return *x.VrHmdModel
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetLaunchOptionType() uint32 {
	if x != nil && x.LaunchOptionType != nil {
		return *x.LaunchOptionType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_LaunchOptionType
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetPrimaryControllerType() int32 {
	if x != nil && x.PrimaryControllerType != nil {
		return *x.PrimaryControllerType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_PrimaryControllerType
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetPrimarySteamControllerSerial() string {
	if x != nil && x.PrimarySteamControllerSerial != nil {
		return *x.PrimarySteamControllerSerial
	}
	return ""
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetTotalSteamControllerCount() uint32 {
	if x != nil && x.TotalSteamControllerCount != nil {
		return *x.TotalSteamControllerCount
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_TotalSteamControllerCount
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetTotalNonSteamControllerCount() uint32 {
	if x != nil && x.TotalNonSteamControllerCount != nil {
		return *x.TotalNonSteamControllerCount
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_TotalNonSteamControllerCount
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetControllerWorkshopFileId() uint64 {
	if x != nil && x.ControllerWorkshopFileId != nil {
		return *x.ControllerWorkshopFileId
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_ControllerWorkshopFileId
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetLaunchSource() uint32 {
	if x != nil && x.LaunchSource != nil {
		return *x.LaunchSource
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_LaunchSource
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetVrHmdRuntime() uint32 {
	if x != nil && x.VrHmdRuntime != nil {
		return *x.VrHmdRuntime
	}
	return 0
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetGameIpAddress() *CMsgIPAddress {
	if x != nil {
		return x.GameIpAddress
	}
	return nil
}

func (x *CMsgClientGamesPlayed_GamePlayed) GetControllerConnectionType() uint32 {
	if x != nil && x.ControllerConnectionType != nil {
		return *x.ControllerConnectionType
	}
	return Default_CMsgClientGamesPlayed_GamePlayed_ControllerConnectionType
}

type CMsgClientLicenseList_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId           *uint32 `protobuf:"varint,1,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	TimeCreated         *uint32 `protobuf:"fixed32,2,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeNextProcess     *uint32 `protobuf:"fixed32,3,opt,name=time_next_process,json=timeNextProcess" json:"time_next_process,omitempty"`
	MinuteLimit         *int32  `protobuf:"varint,4,opt,name=minute_limit,json=minuteLimit" json:"minute_limit,omitempty"`
	MinutesUsed         *int32  `protobuf:"varint,5,opt,name=minutes_used,json=minutesUsed" json:"minutes_used,omitempty"`
	PaymentMethod       *uint32 `protobuf:"varint,6,opt,name=payment_method,json=paymentMethod" json:"payment_method,omitempty"`
	Flags               *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	PurchaseCountryCode *string `protobuf:"bytes,8,opt,name=purchase_country_code,json=purchaseCountryCode" json:"purchase_country_code,omitempty"`
	LicenseType         *uint32 `protobuf:"varint,9,opt,name=license_type,json=licenseType" json:"license_type,omitempty"`
	TerritoryCode       *int32  `protobuf:"varint,10,opt,name=territory_code,json=territoryCode" json:"territory_code,omitempty"`
	ChangeNumber        *int32  `protobuf:"varint,11,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	OwnerId             *uint32 `protobuf:"varint,12,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	InitialPeriod       *uint32 `protobuf:"varint,13,opt,name=initial_period,json=initialPeriod" json:"initial_period,omitempty"`
	InitialTimeUnit     *uint32 `protobuf:"varint,14,opt,name=initial_time_unit,json=initialTimeUnit" json:"initial_time_unit,omitempty"`
	RenewalPeriod       *uint32 `protobuf:"varint,15,opt,name=renewal_period,json=renewalPeriod" json:"renewal_period,omitempty"`
	RenewalTimeUnit     *uint32 `protobuf:"varint,16,opt,name=renewal_time_unit,json=renewalTimeUnit" json:"renewal_time_unit,omitempty"`
	AccessToken         *uint64 `protobuf:"varint,17,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	MasterPackageId     *uint32 `protobuf:"varint,18,opt,name=master_package_id,json=masterPackageId" json:"master_package_id,omitempty"`
}

func (x *CMsgClientLicenseList_License) Reset() {
	*x = CMsgClientLicenseList_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLicenseList_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLicenseList_License) ProtoMessage() {}

func (x *CMsgClientLicenseList_License) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLicenseList_License.ProtoReflect.Descriptor instead.
func (*CMsgClientLicenseList_License) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgClientLicenseList_License) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTimeNextProcess() uint32 {
	if x != nil && x.TimeNextProcess != nil {
		return *x.TimeNextProcess
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMinuteLimit() int32 {
	if x != nil && x.MinuteLimit != nil {
		return *x.MinuteLimit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMinutesUsed() int32 {
	if x != nil && x.MinutesUsed != nil {
		return *x.MinutesUsed
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetPaymentMethod() uint32 {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetPurchaseCountryCode() string {
	if x != nil && x.PurchaseCountryCode != nil {
		return *x.PurchaseCountryCode
	}
	return ""
}

func (x *CMsgClientLicenseList_License) GetLicenseType() uint32 {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetTerritoryCode() int32 {
	if x != nil && x.TerritoryCode != nil {
		return *x.TerritoryCode
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetChangeNumber() int32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetInitialPeriod() uint32 {
	if x != nil && x.InitialPeriod != nil {
		return *x.InitialPeriod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetInitialTimeUnit() uint32 {
	if x != nil && x.InitialTimeUnit != nil {
		return *x.InitialTimeUnit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetRenewalPeriod() uint32 {
	if x != nil && x.RenewalPeriod != nil {
		return *x.RenewalPeriod
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetRenewalTimeUnit() uint32 {
	if x != nil && x.RenewalTimeUnit != nil {
		return *x.RenewalTimeUnit
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

func (x *CMsgClientLicenseList_License) GetMasterPackageId() uint32 {
	if x != nil && x.MasterPackageId != nil {
		return *x.MasterPackageId
	}
	return 0
}

type CMsgClientLBSGetLBEntriesResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdUser *uint64 `protobuf:"fixed64,1,opt,name=steam_id_user,json=steamIdUser" json:"steam_id_user,omitempty"`
	GlobalRank  *int32  `protobuf:"varint,2,opt,name=global_rank,json=globalRank" json:"global_rank,omitempty"`
	Score       *int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Details     []byte  `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	UgcId       *uint64 `protobuf:"fixed64,5,opt,name=ugc_id,json=ugcId" json:"ugc_id,omitempty"`
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) Reset() {
	*x = CMsgClientLBSGetLBEntriesResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLBSGetLBEntriesResponse_Entry) ProtoMessage() {}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLBSGetLBEntriesResponse_Entry.ProtoReflect.Descriptor instead.
func (*CMsgClientLBSGetLBEntriesResponse_Entry) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{34, 0}
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) GetSteamIdUser() uint64 {
	if x != nil && x.SteamIdUser != nil {
		return *x.SteamIdUser
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) GetGlobalRank() int32 {
	if x != nil && x.GlobalRank != nil {
		return *x.GlobalRank
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CMsgClientLBSGetLBEntriesResponse_Entry) GetUgcId() uint64 {
	if x != nil && x.UgcId != nil {
		return *x.UgcId
	}
	return 0
}

type CMsgClientAppMinutesPlayedData_AppMinutesPlayedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Forever      *int32  `protobuf:"varint,2,opt,name=forever" json:"forever,omitempty"`
	LastTwoWeeks *int32  `protobuf:"varint,3,opt,name=last_two_weeks,json=lastTwoWeeks" json:"last_two_weeks,omitempty"`
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) Reset() {
	*x = CMsgClientAppMinutesPlayedData_AppMinutesPlayedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) ProtoMessage() {}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppMinutesPlayedData_AppMinutesPlayedData.ProtoReflect.Descriptor instead.
func (*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{35, 0}
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetForever() int32 {
	if x != nil && x.Forever != nil {
		return *x.Forever
	}
	return 0
}

func (x *CMsgClientAppMinutesPlayedData_AppMinutesPlayedData) GetLastTwoWeeks() int32 {
	if x != nil && x.LastTwoWeeks != nil {
		return *x.LastTwoWeeks
	}
	return 0
}

type CMsgClientRequestedClientStats_StatsToSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientStat          *uint32 `protobuf:"varint,1,opt,name=client_stat,json=clientStat" json:"client_stat,omitempty"`
	StatAggregateMethod *uint32 `protobuf:"varint,2,opt,name=stat_aggregate_method,json=statAggregateMethod" json:"stat_aggregate_method,omitempty"`
}

func (x *CMsgClientRequestedClientStats_StatsToSend) Reset() {
	*x = CMsgClientRequestedClientStats_StatsToSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestedClientStats_StatsToSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestedClientStats_StatsToSend) ProtoMessage() {}

func (x *CMsgClientRequestedClientStats_StatsToSend) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestedClientStats_StatsToSend.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestedClientStats_StatsToSend) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{37, 0}
}

func (x *CMsgClientRequestedClientStats_StatsToSend) GetClientStat() uint32 {
	if x != nil && x.ClientStat != nil {
		return *x.ClientStat
	}
	return 0
}

func (x *CMsgClientRequestedClientStats_StatsToSend) GetStatAggregateMethod() uint32 {
	if x != nil && x.StatAggregateMethod != nil {
		return *x.StatAggregateMethod
	}
	return 0
}

type CMsgClientStat2_StatDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientStat *uint32 `protobuf:"varint,1,opt,name=client_stat,json=clientStat" json:"client_stat,omitempty"`
	LlValue    *int64  `protobuf:"varint,2,opt,name=ll_value,json=llValue" json:"ll_value,omitempty"`
	TimeOfDay  *uint32 `protobuf:"varint,3,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	CellId     *uint32 `protobuf:"varint,4,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DepotId    *uint32 `protobuf:"varint,5,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	AppId      *uint32 `protobuf:"varint,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientStat2_StatDetail) Reset() {
	*x = CMsgClientStat2_StatDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStat2_StatDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStat2_StatDetail) ProtoMessage() {}

func (x *CMsgClientStat2_StatDetail) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStat2_StatDetail.ProtoReflect.Descriptor instead.
func (*CMsgClientStat2_StatDetail) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CMsgClientStat2_StatDetail) GetClientStat() uint32 {
	if x != nil && x.ClientStat != nil {
		return *x.ClientStat
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetLlValue() int64 {
	if x != nil && x.LlValue != nil {
		return *x.LlValue
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetTimeOfDay() uint32 {
	if x != nil && x.TimeOfDay != nil {
		return *x.TimeOfDay
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientStat2_StatDetail) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientMMSJoinLobbyResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Metadata    []byte  `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) Reset() {
	*x = CMsgClientMMSJoinLobbyResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobbyResponse_Member) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobbyResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobbyResponse_Member.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobbyResponse_Member) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgClientMMSGetLobbyList_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value       *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Comparision *int32  `protobuf:"varint,3,opt,name=comparision" json:"comparision,omitempty"`
	FilterType  *int32  `protobuf:"varint,4,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
}

func (x *CMsgClientMMSGetLobbyList_Filter) Reset() {
	*x = CMsgClientMMSGetLobbyList_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyList_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyList_Filter) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyList_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyList_Filter.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyList_Filter) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{46, 0}
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetComparision() int32 {
	if x != nil && x.Comparision != nil {
		return *x.Comparision
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

type CMsgClientMMSGetLobbyListResponse_Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId    *uint64  `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	MaxMembers *int32   `protobuf:"varint,2,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType  *int32   `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags *int32   `protobuf:"varint,4,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	Metadata   []byte   `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	NumMembers *int32   `protobuf:"varint,6,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	Distance   *float32 `protobuf:"fixed32,7,opt,name=distance" json:"distance,omitempty"`
	Weight     *int64   `protobuf:"varint,8,opt,name=weight" json:"weight,omitempty"`
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) Reset() {
	*x = CMsgClientMMSGetLobbyListResponse_Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyListResponse_Lobby) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyListResponse_Lobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyListResponse_Lobby) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetNumMembers() int32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetWeight() int64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type CMsgClientMMSLobbyData_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Metadata    []byte  `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSLobbyData_Member) Reset() {
	*x = CMsgClientMMSLobbyData_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyData_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyData_Member) ProtoMessage() {}

func (x *CMsgClientMMSLobbyData_Member) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyData_Member.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyData_Member) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CMsgClientMMSLobbyData_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSLobbyData_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientMMSLobbyData_Member) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgClientConnectionStats_Stats_Logon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectAttempts     *int32  `protobuf:"varint,1,opt,name=connect_attempts,json=connectAttempts" json:"connect_attempts,omitempty"`
	ConnectSuccesses    *int32  `protobuf:"varint,2,opt,name=connect_successes,json=connectSuccesses" json:"connect_successes,omitempty"`
	ConnectFailures     *int32  `protobuf:"varint,3,opt,name=connect_failures,json=connectFailures" json:"connect_failures,omitempty"`
	ConnectionsDropped  *int32  `protobuf:"varint,4,opt,name=connections_dropped,json=connectionsDropped" json:"connections_dropped,omitempty"`
	SecondsRunning      *uint32 `protobuf:"varint,5,opt,name=seconds_running,json=secondsRunning" json:"seconds_running,omitempty"`
	MsecTologonthistime *uint32 `protobuf:"varint,6,opt,name=msec_tologonthistime,json=msecTologonthistime" json:"msec_tologonthistime,omitempty"`
	CountBadCms         *uint32 `protobuf:"varint,7,opt,name=count_bad_cms,json=countBadCms" json:"count_bad_cms,omitempty"`
}

func (x *CMsgClientConnectionStats_Stats_Logon) Reset() {
	*x = CMsgClientConnectionStats_Stats_Logon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStats_Stats_Logon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_Logon) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_Logon) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_Logon.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_Logon) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{66, 0}
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectAttempts() int32 {
	if x != nil && x.ConnectAttempts != nil {
		return *x.ConnectAttempts
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectSuccesses() int32 {
	if x != nil && x.ConnectSuccesses != nil {
		return *x.ConnectSuccesses
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectFailures() int32 {
	if x != nil && x.ConnectFailures != nil {
		return *x.ConnectFailures
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetConnectionsDropped() int32 {
	if x != nil && x.ConnectionsDropped != nil {
		return *x.ConnectionsDropped
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetSecondsRunning() uint32 {
	if x != nil && x.SecondsRunning != nil {
		return *x.SecondsRunning
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetMsecTologonthistime() uint32 {
	if x != nil && x.MsecTologonthistime != nil {
		return *x.MsecTologonthistime
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_Logon) GetCountBadCms() uint32 {
	if x != nil && x.CountBadCms != nil {
		return *x.CountBadCms
	}
	return 0
}

type CMsgClientConnectionStats_Stats_UDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PktsSent      *uint64 `protobuf:"varint,1,opt,name=pkts_sent,json=pktsSent" json:"pkts_sent,omitempty"`
	BytesSent     *uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	PktsRecv      *uint64 `protobuf:"varint,3,opt,name=pkts_recv,json=pktsRecv" json:"pkts_recv,omitempty"`
	PktsProcessed *uint64 `protobuf:"varint,4,opt,name=pkts_processed,json=pktsProcessed" json:"pkts_processed,omitempty"`
	BytesRecv     *uint64 `protobuf:"varint,5,opt,name=bytes_recv,json=bytesRecv" json:"bytes_recv,omitempty"`
}

func (x *CMsgClientConnectionStats_Stats_UDP) Reset() {
	*x = CMsgClientConnectionStats_Stats_UDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStats_Stats_UDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_UDP) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_UDP) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_UDP.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_UDP) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{66, 1}
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsSent() uint64 {
	if x != nil && x.PktsSent != nil {
		return *x.PktsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetBytesSent() uint64 {
	if x != nil && x.BytesSent != nil {
		return *x.BytesSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsRecv() uint64 {
	if x != nil && x.PktsRecv != nil {
		return *x.PktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetPktsProcessed() uint64 {
	if x != nil && x.PktsProcessed != nil {
		return *x.PktsProcessed
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_UDP) GetBytesRecv() uint64 {
	if x != nil && x.BytesRecv != nil {
		return *x.BytesRecv
	}
	return 0
}

type CMsgClientConnectionStats_Stats_VConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionsUdp          *uint32                              `protobuf:"varint,1,opt,name=connections_udp,json=connectionsUdp" json:"connections_udp,omitempty"`
	ConnectionsTcp          *uint32                              `protobuf:"varint,2,opt,name=connections_tcp,json=connectionsTcp" json:"connections_tcp,omitempty"`
	StatsUdp                *CMsgClientConnectionStats_Stats_UDP `protobuf:"bytes,3,opt,name=stats_udp,json=statsUdp" json:"stats_udp,omitempty"`
	PktsAbandoned           *uint64                              `protobuf:"varint,4,opt,name=pkts_abandoned,json=pktsAbandoned" json:"pkts_abandoned,omitempty"`
	ConnReqReceived         *uint64                              `protobuf:"varint,5,opt,name=conn_req_received,json=connReqReceived" json:"conn_req_received,omitempty"`
	PktsResent              *uint64                              `protobuf:"varint,6,opt,name=pkts_resent,json=pktsResent" json:"pkts_resent,omitempty"`
	MsgsSent                *uint64                              `protobuf:"varint,7,opt,name=msgs_sent,json=msgsSent" json:"msgs_sent,omitempty"`
	MsgsSentFailed          *uint64                              `protobuf:"varint,8,opt,name=msgs_sent_failed,json=msgsSentFailed" json:"msgs_sent_failed,omitempty"`
	MsgsRecv                *uint64                              `protobuf:"varint,9,opt,name=msgs_recv,json=msgsRecv" json:"msgs_recv,omitempty"`
	DatagramsSent           *uint64                              `protobuf:"varint,10,opt,name=datagrams_sent,json=datagramsSent" json:"datagrams_sent,omitempty"`
	DatagramsRecv           *uint64                              `protobuf:"varint,11,opt,name=datagrams_recv,json=datagramsRecv" json:"datagrams_recv,omitempty"`
	BadPktsRecv             *uint64                              `protobuf:"varint,12,opt,name=bad_pkts_recv,json=badPktsRecv" json:"bad_pkts_recv,omitempty"`
	UnknownConnPktsRecv     *uint64                              `protobuf:"varint,13,opt,name=unknown_conn_pkts_recv,json=unknownConnPktsRecv" json:"unknown_conn_pkts_recv,omitempty"`
	MissedPktsRecv          *uint64                              `protobuf:"varint,14,opt,name=missed_pkts_recv,json=missedPktsRecv" json:"missed_pkts_recv,omitempty"`
	DupPktsRecv             *uint64                              `protobuf:"varint,15,opt,name=dup_pkts_recv,json=dupPktsRecv" json:"dup_pkts_recv,omitempty"`
	FailedConnectChallenges *uint64                              `protobuf:"varint,16,opt,name=failed_connect_challenges,json=failedConnectChallenges" json:"failed_connect_challenges,omitempty"`
	MicroSecAvgLatency      *uint32                              `protobuf:"varint,17,opt,name=micro_sec_avg_latency,json=microSecAvgLatency" json:"micro_sec_avg_latency,omitempty"`
	MicroSecMinLatency      *uint32                              `protobuf:"varint,18,opt,name=micro_sec_min_latency,json=microSecMinLatency" json:"micro_sec_min_latency,omitempty"`
	MicroSecMaxLatency      *uint32                              `protobuf:"varint,19,opt,name=micro_sec_max_latency,json=microSecMaxLatency" json:"micro_sec_max_latency,omitempty"`
	MemPoolMsgInUse         *uint32                              `protobuf:"varint,20,opt,name=mem_pool_msg_in_use,json=memPoolMsgInUse" json:"mem_pool_msg_in_use,omitempty"`
}

func (x *CMsgClientConnectionStats_Stats_VConn) Reset() {
	*x = CMsgClientConnectionStats_Stats_VConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStats_Stats_VConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStats_Stats_VConn) ProtoMessage() {}

func (x *CMsgClientConnectionStats_Stats_VConn) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStats_Stats_VConn.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStats_Stats_VConn) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{66, 2}
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnectionsUdp() uint32 {
	if x != nil && x.ConnectionsUdp != nil {
		return *x.ConnectionsUdp
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnectionsTcp() uint32 {
	if x != nil && x.ConnectionsTcp != nil {
		return *x.ConnectionsTcp
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetStatsUdp() *CMsgClientConnectionStats_Stats_UDP {
	if x != nil {
		return x.StatsUdp
	}
	return nil
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetPktsAbandoned() uint64 {
	if x != nil && x.PktsAbandoned != nil {
		return *x.PktsAbandoned
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetConnReqReceived() uint64 {
	if x != nil && x.ConnReqReceived != nil {
		return *x.ConnReqReceived
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetPktsResent() uint64 {
	if x != nil && x.PktsResent != nil {
		return *x.PktsResent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsSent() uint64 {
	if x != nil && x.MsgsSent != nil {
		return *x.MsgsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsSentFailed() uint64 {
	if x != nil && x.MsgsSentFailed != nil {
		return *x.MsgsSentFailed
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMsgsRecv() uint64 {
	if x != nil && x.MsgsRecv != nil {
		return *x.MsgsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDatagramsSent() uint64 {
	if x != nil && x.DatagramsSent != nil {
		return *x.DatagramsSent
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDatagramsRecv() uint64 {
	if x != nil && x.DatagramsRecv != nil {
		return *x.DatagramsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetBadPktsRecv() uint64 {
	if x != nil && x.BadPktsRecv != nil {
		return *x.BadPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetUnknownConnPktsRecv() uint64 {
	if x != nil && x.UnknownConnPktsRecv != nil {
		return *x.UnknownConnPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMissedPktsRecv() uint64 {
	if x != nil && x.MissedPktsRecv != nil {
		return *x.MissedPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetDupPktsRecv() uint64 {
	if x != nil && x.DupPktsRecv != nil {
		return *x.DupPktsRecv
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetFailedConnectChallenges() uint64 {
	if x != nil && x.FailedConnectChallenges != nil {
		return *x.FailedConnectChallenges
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecAvgLatency() uint32 {
	if x != nil && x.MicroSecAvgLatency != nil {
		return *x.MicroSecAvgLatency
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecMinLatency() uint32 {
	if x != nil && x.MicroSecMinLatency != nil {
		return *x.MicroSecMinLatency
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMicroSecMaxLatency() uint32 {
	if x != nil && x.MicroSecMaxLatency != nil {
		return *x.MicroSecMaxLatency
	}
	return 0
}

func (x *CMsgClientConnectionStats_Stats_VConn) GetMemPoolMsgInUse() uint32 {
	if x != nil && x.MemPoolMsgInUse != nil {
		return *x.MemPoolMsgInUse
	}
	return 0
}

type CMsgClientServersAvailable_Server_Types_Available struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server  *uint32 `protobuf:"varint,1,opt,name=server" json:"server,omitempty"`
	Changed *bool   `protobuf:"varint,2,opt,name=changed" json:"changed,omitempty"`
}

func (x *CMsgClientServersAvailable_Server_Types_Available) Reset() {
	*x = CMsgClientServersAvailable_Server_Types_Available{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServersAvailable_Server_Types_Available) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServersAvailable_Server_Types_Available) ProtoMessage() {}

func (x *CMsgClientServersAvailable_Server_Types_Available) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServersAvailable_Server_Types_Available.ProtoReflect.Descriptor instead.
func (*CMsgClientServersAvailable_Server_Types_Available) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{67, 0}
}

func (x *CMsgClientServersAvailable_Server_Types_Available) GetServer() uint32 {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return 0
}

func (x *CMsgClientServersAvailable_Server_Types_Available) GetChanged() bool {
	if x != nil && x.Changed != nil {
		return *x.Changed
	}
	return false
}

type CMsgClientGetUserStatsResponse_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId    *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatValue *uint32 `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
}

func (x *CMsgClientGetUserStatsResponse_Stats) Reset() {
	*x = CMsgClientGetUserStatsResponse_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetUserStatsResponse_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetUserStatsResponse_Stats) ProtoMessage() {}

func (x *CMsgClientGetUserStatsResponse_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetUserStatsResponse_Stats.ProtoReflect.Descriptor instead.
func (*CMsgClientGetUserStatsResponse_Stats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{69, 0}
}

func (x *CMsgClientGetUserStatsResponse_Stats) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientGetUserStatsResponse_Stats) GetStatValue() uint32 {
	if x != nil && x.StatValue != nil {
		return *x.StatValue
	}
	return 0
}

type CMsgClientGetUserStatsResponse_Achievement_Blocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId *uint32  `protobuf:"varint,1,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	UnlockTime    []uint32 `protobuf:"fixed32,2,rep,name=unlock_time,json=unlockTime" json:"unlock_time,omitempty"`
}

func (x *CMsgClientGetUserStatsResponse_Achievement_Blocks) Reset() {
	*x = CMsgClientGetUserStatsResponse_Achievement_Blocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetUserStatsResponse_Achievement_Blocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetUserStatsResponse_Achievement_Blocks) ProtoMessage() {}

func (x *CMsgClientGetUserStatsResponse_Achievement_Blocks) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetUserStatsResponse_Achievement_Blocks.ProtoReflect.Descriptor instead.
func (*CMsgClientGetUserStatsResponse_Achievement_Blocks) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{69, 1}
}

func (x *CMsgClientGetUserStatsResponse_Achievement_Blocks) GetAchievementId() uint32 {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return 0
}

func (x *CMsgClientGetUserStatsResponse_Achievement_Blocks) GetUnlockTime() []uint32 {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

type CMsgClientStoreUserStatsResponse_Stats_Failed_Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId            *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	RevertedStatValue *uint32 `protobuf:"varint,2,opt,name=reverted_stat_value,json=revertedStatValue" json:"reverted_stat_value,omitempty"`
}

func (x *CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) Reset() {
	*x = CMsgClientStoreUserStatsResponse_Stats_Failed_Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) ProtoMessage() {}

func (x *CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStatsResponse_Stats_Failed_Validation.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{70, 0}
}

func (x *CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientStoreUserStatsResponse_Stats_Failed_Validation) GetRevertedStatValue() uint32 {
	if x != nil && x.RevertedStatValue != nil {
		return *x.RevertedStatValue
	}
	return 0
}

type CMsgClientStoreUserStats2_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId    *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatValue *uint32 `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
}

func (x *CMsgClientStoreUserStats2_Stats) Reset() {
	*x = CMsgClientStoreUserStats2_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStats2_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStats2_Stats) ProtoMessage() {}

func (x *CMsgClientStoreUserStats2_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStats2_Stats.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStats2_Stats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{71, 0}
}

func (x *CMsgClientStoreUserStats2_Stats) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientStoreUserStats2_Stats) GetStatValue() uint32 {
	if x != nil && x.StatValue != nil {
		return *x.StatValue
	}
	return 0
}

type CMsgClientStatsUpdated_Updated_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId    *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatValue *uint32 `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
}

func (x *CMsgClientStatsUpdated_Updated_Stats) Reset() {
	*x = CMsgClientStatsUpdated_Updated_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStatsUpdated_Updated_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStatsUpdated_Updated_Stats) ProtoMessage() {}

func (x *CMsgClientStatsUpdated_Updated_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStatsUpdated_Updated_Stats.ProtoReflect.Descriptor instead.
func (*CMsgClientStatsUpdated_Updated_Stats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{72, 0}
}

func (x *CMsgClientStatsUpdated_Updated_Stats) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientStatsUpdated_Updated_Stats) GetStatValue() uint32 {
	if x != nil && x.StatValue != nil {
		return *x.StatValue
	}
	return 0
}

type CMsgClientStoreUserStats_Stats_To_Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId    *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatValue *uint32 `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
}

func (x *CMsgClientStoreUserStats_Stats_To_Store) Reset() {
	*x = CMsgClientStoreUserStats_Stats_To_Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientStoreUserStats_Stats_To_Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientStoreUserStats_Stats_To_Store) ProtoMessage() {}

func (x *CMsgClientStoreUserStats_Stats_To_Store) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientStoreUserStats_Stats_To_Store.ProtoReflect.Descriptor instead.
func (*CMsgClientStoreUserStats_Stats_To_Store) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{73, 0}
}

func (x *CMsgClientStoreUserStats_Stats_To_Store) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientStoreUserStats_Stats_To_Store) GetStatValue() uint32 {
	if x != nil && x.StatValue != nil {
		return *x.StatValue
	}
	return 0
}

type CMsgClientGetClientDetailsResponse_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid          *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtraInfo      *string `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo" json:"extra_info,omitempty"`
	TimeRunningSec *uint32 `protobuf:"varint,3,opt,name=time_running_sec,json=timeRunningSec" json:"time_running_sec,omitempty"`
}

func (x *CMsgClientGetClientDetailsResponse_Game) Reset() {
	*x = CMsgClientGetClientDetailsResponse_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientDetailsResponse_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientDetailsResponse_Game) ProtoMessage() {}

func (x *CMsgClientGetClientDetailsResponse_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientDetailsResponse_Game.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientDetailsResponse_Game) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{76, 0}
}

func (x *CMsgClientGetClientDetailsResponse_Game) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientGetClientDetailsResponse_Game) GetExtraInfo() string {
	if x != nil && x.ExtraInfo != nil {
		return *x.ExtraInfo
	}
	return ""
}

func (x *CMsgClientGetClientDetailsResponse_Game) GetTimeRunningSec() uint32 {
	if x != nil && x.TimeRunningSec != nil {
		return *x.TimeRunningSec
	}
	return 0
}

type CMsgClientGetClientAppListResponse_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid               *uint32                                       `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Category            *string                                       `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	AppType             *string                                       `protobuf:"bytes,10,opt,name=app_type,json=appType" json:"app_type,omitempty"`
	Favorite            *bool                                         `protobuf:"varint,3,opt,name=favorite" json:"favorite,omitempty"`
	Installed           *bool                                         `protobuf:"varint,4,opt,name=installed" json:"installed,omitempty"`
	AutoUpdate          *bool                                         `protobuf:"varint,5,opt,name=auto_update,json=autoUpdate" json:"auto_update,omitempty"`
	BytesDownloaded     *uint64                                       `protobuf:"varint,6,opt,name=bytes_downloaded,json=bytesDownloaded" json:"bytes_downloaded,omitempty"`
	BytesNeeded         *uint64                                       `protobuf:"varint,7,opt,name=bytes_needed,json=bytesNeeded" json:"bytes_needed,omitempty"`
	BytesDownloadRate   *uint32                                       `protobuf:"varint,8,opt,name=bytes_download_rate,json=bytesDownloadRate" json:"bytes_download_rate,omitempty"`
	DownloadPaused      *bool                                         `protobuf:"varint,11,opt,name=download_paused,json=downloadPaused" json:"download_paused,omitempty"`
	NumDownloading      *uint32                                       `protobuf:"varint,12,opt,name=num_downloading,json=numDownloading" json:"num_downloading,omitempty"`
	NumPaused           *uint32                                       `protobuf:"varint,13,opt,name=num_paused,json=numPaused" json:"num_paused,omitempty"`
	Changing            *bool                                         `protobuf:"varint,14,opt,name=changing" json:"changing,omitempty"`
	AvailableOnPlatform *bool                                         `protobuf:"varint,15,opt,name=available_on_platform,json=availableOnPlatform" json:"available_on_platform,omitempty"`
	Dlcs                []*CMsgClientGetClientAppListResponse_App_DLC `protobuf:"bytes,9,rep,name=dlcs" json:"dlcs,omitempty"`
}

func (x *CMsgClientGetClientAppListResponse_App) Reset() {
	*x = CMsgClientGetClientAppListResponse_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientAppListResponse_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientAppListResponse_App) ProtoMessage() {}

func (x *CMsgClientGetClientAppListResponse_App) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientAppListResponse_App.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientAppListResponse_App) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{78, 0}
}

func (x *CMsgClientGetClientAppListResponse_App) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *CMsgClientGetClientAppListResponse_App) GetAppType() string {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return ""
}

func (x *CMsgClientGetClientAppListResponse_App) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetInstalled() bool {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetAutoUpdate() bool {
	if x != nil && x.AutoUpdate != nil {
		return *x.AutoUpdate
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetBytesNeeded() uint64 {
	if x != nil && x.BytesNeeded != nil {
		return *x.BytesNeeded
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetBytesDownloadRate() uint32 {
	if x != nil && x.BytesDownloadRate != nil {
		return *x.BytesDownloadRate
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetDownloadPaused() bool {
	if x != nil && x.DownloadPaused != nil {
		return *x.DownloadPaused
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetNumDownloading() uint32 {
	if x != nil && x.NumDownloading != nil {
		return *x.NumDownloading
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetNumPaused() uint32 {
	if x != nil && x.NumPaused != nil {
		return *x.NumPaused
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App) GetChanging() bool {
	if x != nil && x.Changing != nil {
		return *x.Changing
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetAvailableOnPlatform() bool {
	if x != nil && x.AvailableOnPlatform != nil {
		return *x.AvailableOnPlatform
	}
	return false
}

func (x *CMsgClientGetClientAppListResponse_App) GetDlcs() []*CMsgClientGetClientAppListResponse_App_DLC {
	if x != nil {
		return x.Dlcs
	}
	return nil
}

type CMsgClientGetClientAppListResponse_App_DLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Installed *bool   `protobuf:"varint,2,opt,name=installed" json:"installed,omitempty"`
}

func (x *CMsgClientGetClientAppListResponse_App_DLC) Reset() {
	*x = CMsgClientGetClientAppListResponse_App_DLC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClientAppListResponse_App_DLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClientAppListResponse_App_DLC) ProtoMessage() {}

func (x *CMsgClientGetClientAppListResponse_App_DLC) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClientAppListResponse_App_DLC.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClientAppListResponse_App_DLC) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *CMsgClientGetClientAppListResponse_App_DLC) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientGetClientAppListResponse_App_DLC) GetInstalled() bool {
	if x != nil && x.Installed != nil {
		return *x.Installed
	}
	return false
}

type CMsgClientUFSUploadCommit_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult  *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId    *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ShaFile  []byte  `protobuf:"bytes,3,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	CubFile  *uint32 `protobuf:"varint,4,opt,name=cub_file,json=cubFile" json:"cub_file,omitempty"`
	FileName *string `protobuf:"bytes,5,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

// Default values for CMsgClientUFSUploadCommit_File fields.
const (
	Default_CMsgClientUFSUploadCommit_File_Eresult = int32(2)
)

func (x *CMsgClientUFSUploadCommit_File) Reset() {
	*x = CMsgClientUFSUploadCommit_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadCommit_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadCommit_File) ProtoMessage() {}

func (x *CMsgClientUFSUploadCommit_File) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadCommit_File.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadCommit_File) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{87, 0}
}

func (x *CMsgClientUFSUploadCommit_File) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSUploadCommit_File_Eresult
}

func (x *CMsgClientUFSUploadCommit_File) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSUploadCommit_File) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSUploadCommit_File) GetCubFile() uint32 {
	if x != nil && x.CubFile != nil {
		return *x.CubFile
	}
	return 0
}

func (x *CMsgClientUFSUploadCommit_File) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

type CMsgClientUFSUploadCommitResponse_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId   *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ShaFile []byte  `protobuf:"bytes,3,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
}

// Default values for CMsgClientUFSUploadCommitResponse_File fields.
const (
	Default_CMsgClientUFSUploadCommitResponse_File_Eresult = int32(2)
)

func (x *CMsgClientUFSUploadCommitResponse_File) Reset() {
	*x = CMsgClientUFSUploadCommitResponse_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSUploadCommitResponse_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSUploadCommitResponse_File) ProtoMessage() {}

func (x *CMsgClientUFSUploadCommitResponse_File) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSUploadCommitResponse_File.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSUploadCommitResponse_File) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{88, 0}
}

func (x *CMsgClientUFSUploadCommitResponse_File) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUFSUploadCommitResponse_File_Eresult
}

func (x *CMsgClientUFSUploadCommitResponse_File) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSUploadCommitResponse_File) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

type CMsgClientUFSGetFileListForAppResponse_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName         *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	ShaFile          []byte  `protobuf:"bytes,3,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64 `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	RawFileSize      *uint32 `protobuf:"varint,5,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,6,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	PlatformsToSync  *uint32 `protobuf:"varint,7,opt,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	PathPrefixIndex  *uint32 `protobuf:"varint,8,opt,name=path_prefix_index,json=pathPrefixIndex" json:"path_prefix_index,omitempty"`
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) Reset() {
	*x = CMsgClientUFSGetFileListForAppResponse_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUFSGetFileListForAppResponse_File) ProtoMessage() {}

func (x *CMsgClientUFSGetFileListForAppResponse_File) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUFSGetFileListForAppResponse_File.ProtoReflect.Descriptor instead.
func (*CMsgClientUFSGetFileListForAppResponse_File) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{95, 0}
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetPlatformsToSync() uint32 {
	if x != nil && x.PlatformsToSync != nil {
		return *x.PlatformsToSync
	}
	return 0
}

func (x *CMsgClientUFSGetFileListForAppResponse_File) GetPathPrefixIndex() uint32 {
	if x != nil && x.PathPrefixIndex != nil {
		return *x.PathPrefixIndex
	}
	return 0
}

type CMsgClientAppInfoRequest_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SectionFlags *uint32  `protobuf:"varint,2,opt,name=section_flags,json=sectionFlags" json:"section_flags,omitempty"`
	Section_CRC  []uint32 `protobuf:"varint,3,rep,name=section_CRC,json=sectionCRC" json:"section_CRC,omitempty"`
}

func (x *CMsgClientAppInfoRequest_App) Reset() {
	*x = CMsgClientAppInfoRequest_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoRequest_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoRequest_App) ProtoMessage() {}

func (x *CMsgClientAppInfoRequest_App) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoRequest_App.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoRequest_App) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{105, 0}
}

func (x *CMsgClientAppInfoRequest_App) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientAppInfoRequest_App) GetSectionFlags() uint32 {
	if x != nil && x.SectionFlags != nil {
		return *x.SectionFlags
	}
	return 0
}

func (x *CMsgClientAppInfoRequest_App) GetSection_CRC() []uint32 {
	if x != nil {
		return x.Section_CRC
	}
	return nil
}

type CMsgClientAppInfoResponse_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32                                  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ChangeNumber *uint32                                  `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	Sections     []*CMsgClientAppInfoResponse_App_Section `protobuf:"bytes,3,rep,name=sections" json:"sections,omitempty"`
}

func (x *CMsgClientAppInfoResponse_App) Reset() {
	*x = CMsgClientAppInfoResponse_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoResponse_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoResponse_App) ProtoMessage() {}

func (x *CMsgClientAppInfoResponse_App) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoResponse_App.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoResponse_App) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{106, 0}
}

func (x *CMsgClientAppInfoResponse_App) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientAppInfoResponse_App) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientAppInfoResponse_App) GetSections() []*CMsgClientAppInfoResponse_App_Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

type CMsgClientAppInfoResponse_App_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId *uint32 `protobuf:"varint,1,opt,name=section_id,json=sectionId" json:"section_id,omitempty"`
	SectionKv []byte  `protobuf:"bytes,2,opt,name=section_kv,json=sectionKv" json:"section_kv,omitempty"`
}

func (x *CMsgClientAppInfoResponse_App_Section) Reset() {
	*x = CMsgClientAppInfoResponse_App_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAppInfoResponse_App_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAppInfoResponse_App_Section) ProtoMessage() {}

func (x *CMsgClientAppInfoResponse_App_Section) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAppInfoResponse_App_Section.ProtoReflect.Descriptor instead.
func (*CMsgClientAppInfoResponse_App_Section) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{106, 0, 0}
}

func (x *CMsgClientAppInfoResponse_App_Section) GetSectionId() uint32 {
	if x != nil && x.SectionId != nil {
		return *x.SectionId
	}
	return 0
}

func (x *CMsgClientAppInfoResponse_App_Section) GetSectionKv() []byte {
	if x != nil {
		return x.SectionKv
	}
	return nil
}

type CMsgClientPackageInfoResponse_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId    *uint32 `protobuf:"varint,1,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	ChangeNumber *uint32 `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	Sha          []byte  `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
	Buffer       []byte  `protobuf:"bytes,4,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *CMsgClientPackageInfoResponse_Package) Reset() {
	*x = CMsgClientPackageInfoResponse_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPackageInfoResponse_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPackageInfoResponse_Package) ProtoMessage() {}

func (x *CMsgClientPackageInfoResponse_Package) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPackageInfoResponse_Package.ProtoReflect.Descriptor instead.
func (*CMsgClientPackageInfoResponse_Package) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{108, 0}
}

func (x *CMsgClientPackageInfoResponse_Package) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *CMsgClientPackageInfoResponse_Package) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientPackageInfoResponse_Package) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientPackageInfoResponse_Package) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type CMsgClientPICSChangesSinceResponse_PackageChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid    *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	ChangeNumber *uint32 `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	NeedsToken   *bool   `protobuf:"varint,3,opt,name=needs_token,json=needsToken" json:"needs_token,omitempty"`
}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) Reset() {
	*x = CMsgClientPICSChangesSinceResponse_PackageChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSChangesSinceResponse_PackageChange) ProtoMessage() {}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSChangesSinceResponse_PackageChange.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSChangesSinceResponse_PackageChange) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{110, 0}
}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse_PackageChange) GetNeedsToken() bool {
	if x != nil && x.NeedsToken != nil {
		return *x.NeedsToken
	}
	return false
}

type CMsgClientPICSChangesSinceResponse_AppChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ChangeNumber *uint32 `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	NeedsToken   *bool   `protobuf:"varint,3,opt,name=needs_token,json=needsToken" json:"needs_token,omitempty"`
}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) Reset() {
	*x = CMsgClientPICSChangesSinceResponse_AppChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSChangesSinceResponse_AppChange) ProtoMessage() {}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSChangesSinceResponse_AppChange.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSChangesSinceResponse_AppChange) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{110, 1}
}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSChangesSinceResponse_AppChange) GetNeedsToken() bool {
	if x != nil && x.NeedsToken != nil {
		return *x.NeedsToken
	}
	return false
}

type CMsgClientPICSProductInfoRequest_AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	AccessToken *uint64 `protobuf:"varint,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	OnlyPublic  *bool   `protobuf:"varint,3,opt,name=only_public,json=onlyPublic" json:"only_public,omitempty"`
}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) Reset() {
	*x = CMsgClientPICSProductInfoRequest_AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoRequest_AppInfo) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoRequest_AppInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoRequest_AppInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{111, 0}
}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

func (x *CMsgClientPICSProductInfoRequest_AppInfo) GetOnlyPublic() bool {
	if x != nil && x.OnlyPublic != nil {
		return *x.OnlyPublic
	}
	return false
}

type CMsgClientPICSProductInfoRequest_PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid   *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	AccessToken *uint64 `protobuf:"varint,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgClientPICSProductInfoRequest_PackageInfo) Reset() {
	*x = CMsgClientPICSProductInfoRequest_PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoRequest_PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoRequest_PackageInfo) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoRequest_PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoRequest_PackageInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoRequest_PackageInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{111, 1}
}

func (x *CMsgClientPICSProductInfoRequest_PackageInfo) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CMsgClientPICSProductInfoRequest_PackageInfo) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CMsgClientPICSProductInfoResponse_AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ChangeNumber *uint32 `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	MissingToken *bool   `protobuf:"varint,3,opt,name=missing_token,json=missingToken" json:"missing_token,omitempty"`
	Sha          []byte  `protobuf:"bytes,4,opt,name=sha" json:"sha,omitempty"`
	Buffer       []byte  `protobuf:"bytes,5,opt,name=buffer" json:"buffer,omitempty"`
	OnlyPublic   *bool   `protobuf:"varint,6,opt,name=only_public,json=onlyPublic" json:"only_public,omitempty"`
	Size         *uint32 `protobuf:"varint,7,opt,name=size" json:"size,omitempty"`
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) Reset() {
	*x = CMsgClientPICSProductInfoResponse_AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoResponse_AppInfo) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoResponse_AppInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoResponse_AppInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{112, 0}
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetMissingToken() bool {
	if x != nil && x.MissingToken != nil {
		return *x.MissingToken
	}
	return false
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetOnlyPublic() bool {
	if x != nil && x.OnlyPublic != nil {
		return *x.OnlyPublic
	}
	return false
}

func (x *CMsgClientPICSProductInfoResponse_AppInfo) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CMsgClientPICSProductInfoResponse_PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid    *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	ChangeNumber *uint32 `protobuf:"varint,2,opt,name=change_number,json=changeNumber" json:"change_number,omitempty"`
	MissingToken *bool   `protobuf:"varint,3,opt,name=missing_token,json=missingToken" json:"missing_token,omitempty"`
	Sha          []byte  `protobuf:"bytes,4,opt,name=sha" json:"sha,omitempty"`
	Buffer       []byte  `protobuf:"bytes,5,opt,name=buffer" json:"buffer,omitempty"`
	Size         *uint32 `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) Reset() {
	*x = CMsgClientPICSProductInfoResponse_PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSProductInfoResponse_PackageInfo) ProtoMessage() {}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSProductInfoResponse_PackageInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSProductInfoResponse_PackageInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{112, 1}
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetChangeNumber() uint32 {
	if x != nil && x.ChangeNumber != nil {
		return *x.ChangeNumber
	}
	return 0
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetMissingToken() bool {
	if x != nil && x.MissingToken != nil {
		return *x.MissingToken
	}
	return false
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CMsgClientPICSProductInfoResponse_PackageInfo) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CMsgClientPICSAccessTokenResponse_PackageToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid   *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	AccessToken *uint64 `protobuf:"varint,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgClientPICSAccessTokenResponse_PackageToken) Reset() {
	*x = CMsgClientPICSAccessTokenResponse_PackageToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSAccessTokenResponse_PackageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSAccessTokenResponse_PackageToken) ProtoMessage() {}

func (x *CMsgClientPICSAccessTokenResponse_PackageToken) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSAccessTokenResponse_PackageToken.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSAccessTokenResponse_PackageToken) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{114, 0}
}

func (x *CMsgClientPICSAccessTokenResponse_PackageToken) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CMsgClientPICSAccessTokenResponse_PackageToken) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CMsgClientPICSAccessTokenResponse_AppToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	AccessToken *uint64 `protobuf:"varint,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (x *CMsgClientPICSAccessTokenResponse_AppToken) Reset() {
	*x = CMsgClientPICSAccessTokenResponse_AppToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPICSAccessTokenResponse_AppToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPICSAccessTokenResponse_AppToken) ProtoMessage() {}

func (x *CMsgClientPICSAccessTokenResponse_AppToken) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPICSAccessTokenResponse_AppToken.ProtoReflect.Descriptor instead.
func (*CMsgClientPICSAccessTokenResponse_AppToken) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{114, 1}
}

func (x *CMsgClientPICSAccessTokenResponse_AppToken) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientPICSAccessTokenResponse_AppToken) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CMsgClientAMGetPersonaNameHistory_IdInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistory_IdInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistory_IdInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistory_IdInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistory_IdInstance) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{123, 0}
}

func (x *CMsgClientAMGetPersonaNameHistory_IdInstance) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32                                                                      `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Steamid *uint64                                                                     `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Names   []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
}

// Default values for CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance fields.
const (
	Default_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_Eresult = int32(2)
)

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{124, 0}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_Eresult
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance) GetNames() []*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance {
	if x != nil {
		return x.Names
	}
	return nil
}

type CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSince *uint32 `protobuf:"fixed32,1,opt,name=name_since,json=nameSince" json:"name_since,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) Reset() {
	*x = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) ProtoMessage() {}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance.ProtoReflect.Descriptor instead.
func (*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{124, 0, 0}
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) GetNameSince() uint32 {
	if x != nil && x.NameSince != nil {
		return *x.NameSince
	}
	return 0
}

func (x *CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgClientClanState_NameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClanName  *string `protobuf:"bytes,1,opt,name=clan_name,json=clanName" json:"clan_name,omitempty"`
	ShaAvatar []byte  `protobuf:"bytes,2,opt,name=sha_avatar,json=shaAvatar" json:"sha_avatar,omitempty"`
}

func (x *CMsgClientClanState_NameInfo) Reset() {
	*x = CMsgClientClanState_NameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientClanState_NameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_NameInfo) ProtoMessage() {}

func (x *CMsgClientClanState_NameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_NameInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_NameInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{126, 0}
}

func (x *CMsgClientClanState_NameInfo) GetClanName() string {
	if x != nil && x.ClanName != nil {
		return *x.ClanName
	}
	return ""
}

func (x *CMsgClientClanState_NameInfo) GetShaAvatar() []byte {
	if x != nil {
		return x.ShaAvatar
	}
	return nil
}

type CMsgClientClanState_UserCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members         *uint32 `protobuf:"varint,1,opt,name=members" json:"members,omitempty"`
	Online          *uint32 `protobuf:"varint,2,opt,name=online" json:"online,omitempty"`
	Chatting        *uint32 `protobuf:"varint,3,opt,name=chatting" json:"chatting,omitempty"`
	InGame          *uint32 `protobuf:"varint,4,opt,name=in_game,json=inGame" json:"in_game,omitempty"`
	ChatRoomMembers *uint32 `protobuf:"varint,5,opt,name=chat_room_members,json=chatRoomMembers" json:"chat_room_members,omitempty"`
}

func (x *CMsgClientClanState_UserCounts) Reset() {
	*x = CMsgClientClanState_UserCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientClanState_UserCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_UserCounts) ProtoMessage() {}

func (x *CMsgClientClanState_UserCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_UserCounts.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_UserCounts) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{126, 1}
}

func (x *CMsgClientClanState_UserCounts) GetMembers() uint32 {
	if x != nil && x.Members != nil {
		return *x.Members
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetOnline() uint32 {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetChatting() uint32 {
	if x != nil && x.Chatting != nil {
		return *x.Chatting
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetInGame() uint32 {
	if x != nil && x.InGame != nil {
		return *x.InGame
	}
	return 0
}

func (x *CMsgClientClanState_UserCounts) GetChatRoomMembers() uint32 {
	if x != nil && x.ChatRoomMembers != nil {
		return *x.ChatRoomMembers
	}
	return 0
}

type CMsgClientClanState_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid        *uint64 `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	EventTime  *uint32 `protobuf:"varint,2,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	Headline   *string `protobuf:"bytes,3,opt,name=headline" json:"headline,omitempty"`
	GameId     *uint64 `protobuf:"fixed64,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	JustPosted *bool   `protobuf:"varint,5,opt,name=just_posted,json=justPosted" json:"just_posted,omitempty"`
}

func (x *CMsgClientClanState_Event) Reset() {
	*x = CMsgClientClanState_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientClanState_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientClanState_Event) ProtoMessage() {}

func (x *CMsgClientClanState_Event) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientClanState_Event.ProtoReflect.Descriptor instead.
func (*CMsgClientClanState_Event) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_proto_rawDescGZIP(), []int{126, 2}
}

func (x *CMsgClientClanState_Event) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetEventTime() uint32 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CMsgClientClanState_Event) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CMsgClientClanState_Event) GetJustPosted() bool {
	if x != nil && x.JustPosted != nil {
		return *x.JustPosted
	}
	return false
}

var File_steam_steammessages_clientserver_proto protoreflect.FileDescriptor

var file_steam_steammessages_clientserver_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x1a,
	0x1e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5d, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x44, 0x53, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x87, 0x03, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x44, 0x53, 0x50, 0x32, 0x50, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x4d, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x65, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x72,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0xc7, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x4d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6d, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x6f, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x32, 0x50, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x72, 0x63,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x72,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75,
	0x73, 0x22, 0xa2, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x32, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x72, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x70, 0x32, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x65, 0x70, 0x32, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x09, 0x63, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x63, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x3e, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x54, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x31, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x70, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22,
	0x33, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x85, 0x0a, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x4a,
	0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x1a, 0xc5, 0x08, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x47, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x72, 0x5f, 0x68, 0x6d, 0x64, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x72, 0x48,
	0x6d, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x72, 0x5f, 0x68,
	0x6d, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x72, 0x48, 0x6d, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x12, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31,
	0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x42,
	0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x72, 0x5f, 0x68, 0x6d,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x76, 0x72, 0x48, 0x6d, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x0d,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x65, 0x6e, 0x79,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65,
	0x64, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x6e, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x6e, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x0a, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x53, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x64, 0x65, 0x6e,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x7a,
	0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x72, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x06, 0x0a, 0x15, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x1a, 0xad, 0x05, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x42, 0x53, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x42, 0x53, 0x53, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x65,
	0x77, 0x22, 0x6a, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x42, 0x53, 0x53, 0x65, 0x74, 0x55, 0x47, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x67, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x75, 0x67, 0x63, 0x49, 0x64, 0x22, 0x3a, 0x0a,
	0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x42, 0x53, 0x53, 0x65,
	0x74, 0x55, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32,
	0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x42, 0x53, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x42, 0x53, 0x46, 0x69,
	0x6e, 0x64, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x42, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x18, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x16, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x42, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x42, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x42, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x67, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x75, 0x67, 0x63, 0x49, 0x64, 0x22, 0xf2,
	0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x61, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x1a, 0x6d, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x65,
	0x65, 0x6b, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x62, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x62, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x62, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x2d, 0x62, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x62, 0x69, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x1a, 0x62, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x8b, 0x02, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x32, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xdf,
	0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x4d, 0x53, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22, 0x7c, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x62, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a,
	0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x7b, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x9c, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x1a, 0x73, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x98, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfd, 0x01, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x9f, 0x04, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x65,
	0x6c, 0x6c, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x1a, 0x62, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x32, 0x22, 0xb0, 0x02, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22, 0xb0, 0x02, 0x0a,
	0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x0a,
	0x19, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22,
	0xa2, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d,
	0x53, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0xb7, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x53, 0x0a, 0x0c,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x4d, 0x4d, 0x53, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x4d,
	0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x44, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x53,
	0x72, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x22, 0x98, 0x02, 0x0a, 0x14, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x72, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x0c, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x63, 0x6f, 0x6e,
	0x6e, 0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x4c, 0x6f, 0x67, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x31,
	0x0a, 0x14, 0x6d, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x74, 0x68,
	0x69, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x73,
	0x65, 0x63, 0x54, 0x6f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x74, 0x68, 0x69, 0x73, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x63,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x64, 0x43, 0x6d, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x55, 0x44, 0x50, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6b, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6b, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x76, 0x1a, 0xf8, 0x06, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x56, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x75, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x64, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x63, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x64,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x55, 0x44, 0x50, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x64, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6b, 0x74, 0x73, 0x41, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x73, 0x67, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x73, 0x67, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x73, 0x67,
	0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x63, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x50, 0x6b,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x75, 0x70, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64,
	0x75, 0x70, 0x50, 0x6b, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f,
	0x73, 0x65, 0x63, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x63, 0x41,
	0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x53,
	0x65, 0x63, 0x4d, 0x69, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x53, 0x65, 0x63, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2c, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x22, 0x9a, 0x02,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x4a,
	0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0xd6, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x11, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x1a, 0x3f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x5c, 0x0a, 0x12, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xfd, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x62, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc7, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x32, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x54, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x54,
	0x6f, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x6f,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x48, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x54,
	0x6f, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4f, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x74, 0x6f, 0x75, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcc,
	0x03, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x53, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x65, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x22, 0xc2, 0x01,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x22, 0x81, 0x06, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xee, 0x04, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x6c, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x2e, 0x44, 0x4c, 0x43, 0x52, 0x04, 0x64, 0x6c, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x03, 0x44,
	0x4c, 0x43, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x22, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x51,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x43, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x0a, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x1f,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x76,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6b, 0x76, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a,
	0x55, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20,
	0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x22, 0x59, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46,
	0x53, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x5b, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46,
	0x53, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x73, 0x54, 0x6f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x22, 0xc2, 0x03, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x46, 0x53, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46,
	0x53, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x08, 0x80, 0xb5,
	0x18, 0x08, 0x88, 0xb5, 0x18, 0x10, 0x22, 0x7a, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x22, 0xa9, 0x03, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x46, 0x53, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x74, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x74,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x76, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x76, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0x39, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x58, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x2b, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b,
	0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xa0, 0xb6, 0x18,
	0x01, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x36, 0x34, 0x12, 0x31, 0x0a, 0x11,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xa0, 0xb6, 0x18, 0x01, 0x52, 0x10, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x36, 0x34, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22,
	0x6f, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x92, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x70, 0x70, 0x49, 0x44, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x62, 0x0a,
	0x03, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x52, 0x43, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x52,
	0x43, 0x22, 0xf8, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x70, 0x70, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x73, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a,
	0xd4, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x47, 0x0a,
	0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x76, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0xb8, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x77, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xa7,
	0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43,
	0x53, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0xb8, 0x05, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x60, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x73, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x67, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xf3, 0x03, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43,
	0x53, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x63, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f,
	0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x1a, 0x4e, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x06, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x49, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x08,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x49, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x1a,
	0xc8, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x04, 0x88, 0xb5, 0x18, 0x00, 0x22, 0x5a, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x73, 0x22, 0xe3, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x49, 0x43, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x13,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x49, 0x43, 0x53, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x1a, 0x4f, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x43, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x47, 0x65, 0x74, 0x55, 0x47, 0x43, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36, 0x37,
	0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52, 0x08,
	0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x47, 0x65, 0x74, 0x55, 0x47, 0x43,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x31, 0x22, 0x54,
	0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61,
	0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x53, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32,
	0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34,
	0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31,
	0x35, 0x52, 0x08, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x43, 0x6c, 0x61, 0x6e, 0x22, 0x8a, 0x01,
	0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x6c,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x03, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x49,
	0x64, 0x73, 0x1a, 0x26, 0x0a, 0x0a, 0x49, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x29, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x11, 0x4e,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x41,
	0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x59, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x99, 0x06, 0x0a,
	0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x46, 0x0a,
	0x08, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x1a, 0x9f, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x75, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6a, 0x75,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x2a, 0x90, 0x01, 0x0a, 0x0f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x4d,
	0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x42, 0x36, 0x48, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_steam_steammessages_clientserver_proto_rawDescOnce sync.Once
	file_steam_steammessages_clientserver_proto_rawDescData = file_steam_steammessages_clientserver_proto_rawDesc
)

func file_steam_steammessages_clientserver_proto_rawDescGZIP() []byte {
	file_steam_steammessages_clientserver_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_clientserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_clientserver_proto_rawDescData)
	})
	return file_steam_steammessages_clientserver_proto_rawDescData
}

var file_steam_steammessages_clientserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steam_steammessages_clientserver_proto_msgTypes = make([]protoimpl.MessageInfo, 173)
var file_steam_steammessages_clientserver_proto_goTypes = []interface{}{
	(EMMSLobbyStatus)(0),                                                             // 0: steam.EMMSLobbyStatus
	(*CMsgClientUDSP2PSessionStarted)(nil),                                           // 1: steam.CMsgClientUDSP2PSessionStarted
	(*CMsgClientUDSP2PSessionEnded)(nil),                                             // 2: steam.CMsgClientUDSP2PSessionEnded
	(*CMsgClientRegisterAuthTicketWithCM)(nil),                                       // 3: steam.CMsgClientRegisterAuthTicketWithCM
	(*CMsgClientTicketAuthComplete)(nil),                                             // 4: steam.CMsgClientTicketAuthComplete
	(*CMsgClientCMList)(nil),                                                         // 5: steam.CMsgClientCMList
	(*CMsgClientP2PConnectionInfo)(nil),                                              // 6: steam.CMsgClientP2PConnectionInfo
	(*CMsgClientP2PConnectionFailInfo)(nil),                                          // 7: steam.CMsgClientP2PConnectionFailInfo
	(*CMsgClientNetworkingCertRequest)(nil),                                          // 8: steam.CMsgClientNetworkingCertRequest
	(*CMsgClientNetworkingCertReply)(nil),                                            // 9: steam.CMsgClientNetworkingCertReply
	(*CMsgClientNetworkingMobileCertRequest)(nil),                                    // 10: steam.CMsgClientNetworkingMobileCertRequest
	(*CMsgClientNetworkingMobileCertReply)(nil),                                      // 11: steam.CMsgClientNetworkingMobileCertReply
	(*CMsgClientGetAppOwnershipTicket)(nil),                                          // 12: steam.CMsgClientGetAppOwnershipTicket
	(*CMsgClientGetAppOwnershipTicketResponse)(nil),                                  // 13: steam.CMsgClientGetAppOwnershipTicketResponse
	(*CMsgClientSessionToken)(nil),                                                   // 14: steam.CMsgClientSessionToken
	(*CMsgClientGameConnectTokens)(nil),                                              // 15: steam.CMsgClientGameConnectTokens
	(*CMsgGSServerType)(nil),                                                         // 16: steam.CMsgGSServerType
	(*CMsgGSStatusReply)(nil),                                                        // 17: steam.CMsgGSStatusReply
	(*CMsgGSPlayerList)(nil),                                                         // 18: steam.CMsgGSPlayerList
	(*CMsgGSUserPlaying)(nil),                                                        // 19: steam.CMsgGSUserPlaying
	(*CMsgGSDisconnectNotice)(nil),                                                   // 20: steam.CMsgGSDisconnectNotice
	(*CMsgClientGamesPlayed)(nil),                                                    // 21: steam.CMsgClientGamesPlayed
	(*CMsgGSApprove)(nil),                                                            // 22: steam.CMsgGSApprove
	(*CMsgGSDeny)(nil),                                                               // 23: steam.CMsgGSDeny
	(*CMsgGSKick)(nil),                                                               // 24: steam.CMsgGSKick
	(*CMsgClientAuthList)(nil),                                                       // 25: steam.CMsgClientAuthList
	(*CMsgClientAuthListAck)(nil),                                                    // 26: steam.CMsgClientAuthListAck
	(*CMsgClientLicenseList)(nil),                                                    // 27: steam.CMsgClientLicenseList
	(*CMsgClientLBSSetScore)(nil),                                                    // 28: steam.CMsgClientLBSSetScore
	(*CMsgClientLBSSetScoreResponse)(nil),                                            // 29: steam.CMsgClientLBSSetScoreResponse
	(*CMsgClientLBSSetUGC)(nil),                                                      // 30: steam.CMsgClientLBSSetUGC
	(*CMsgClientLBSSetUGCResponse)(nil),                                              // 31: steam.CMsgClientLBSSetUGCResponse
	(*CMsgClientLBSFindOrCreateLB)(nil),                                              // 32: steam.CMsgClientLBSFindOrCreateLB
	(*CMsgClientLBSFindOrCreateLBResponse)(nil),                                      // 33: steam.CMsgClientLBSFindOrCreateLBResponse
	(*CMsgClientLBSGetLBEntries)(nil),                                                // 34: steam.CMsgClientLBSGetLBEntries
	(*CMsgClientLBSGetLBEntriesResponse)(nil),                                        // 35: steam.CMsgClientLBSGetLBEntriesResponse
	(*CMsgClientAppMinutesPlayedData)(nil),                                           // 36: steam.CMsgClientAppMinutesPlayedData
	(*CMsgClientIsLimitedAccount)(nil),                                               // 37: steam.CMsgClientIsLimitedAccount
	(*CMsgClientRequestedClientStats)(nil),                                           // 38: steam.CMsgClientRequestedClientStats
	(*CMsgClientStat2)(nil),                                                          // 39: steam.CMsgClientStat2
	(*CMsgClientMMSSetRatelimitPolicyOnClient)(nil),                                  // 40: steam.CMsgClientMMSSetRatelimitPolicyOnClient
	(*CMsgClientMMSCreateLobby)(nil),                                                 // 41: steam.CMsgClientMMSCreateLobby
	(*CMsgClientMMSCreateLobbyResponse)(nil),                                         // 42: steam.CMsgClientMMSCreateLobbyResponse
	(*CMsgClientMMSJoinLobby)(nil),                                                   // 43: steam.CMsgClientMMSJoinLobby
	(*CMsgClientMMSJoinLobbyResponse)(nil),                                           // 44: steam.CMsgClientMMSJoinLobbyResponse
	(*CMsgClientMMSLeaveLobby)(nil),                                                  // 45: steam.CMsgClientMMSLeaveLobby
	(*CMsgClientMMSLeaveLobbyResponse)(nil),                                          // 46: steam.CMsgClientMMSLeaveLobbyResponse
	(*CMsgClientMMSGetLobbyList)(nil),                                                // 47: steam.CMsgClientMMSGetLobbyList
	(*CMsgClientMMSGetLobbyListResponse)(nil),                                        // 48: steam.CMsgClientMMSGetLobbyListResponse
	(*CMsgClientMMSSetLobbyData)(nil),                                                // 49: steam.CMsgClientMMSSetLobbyData
	(*CMsgClientMMSSetLobbyDataResponse)(nil),                                        // 50: steam.CMsgClientMMSSetLobbyDataResponse
	(*CMsgClientMMSGetLobbyData)(nil),                                                // 51: steam.CMsgClientMMSGetLobbyData
	(*CMsgClientMMSLobbyData)(nil),                                                   // 52: steam.CMsgClientMMSLobbyData
	(*CMsgClientMMSSendLobbyChatMsg)(nil),                                            // 53: steam.CMsgClientMMSSendLobbyChatMsg
	(*CMsgClientMMSLobbyChatMsg)(nil),                                                // 54: steam.CMsgClientMMSLobbyChatMsg
	(*CMsgClientMMSSetLobbyOwner)(nil),                                               // 55: steam.CMsgClientMMSSetLobbyOwner
	(*CMsgClientMMSSetLobbyOwnerResponse)(nil),                                       // 56: steam.CMsgClientMMSSetLobbyOwnerResponse
	(*CMsgClientMMSSetLobbyLinked)(nil),                                              // 57: steam.CMsgClientMMSSetLobbyLinked
	(*CMsgClientMMSSetLobbyGameServer)(nil),                                          // 58: steam.CMsgClientMMSSetLobbyGameServer
	(*CMsgClientMMSLobbyGameServerSet)(nil),                                          // 59: steam.CMsgClientMMSLobbyGameServerSet
	(*CMsgClientMMSUserJoinedLobby)(nil),                                             // 60: steam.CMsgClientMMSUserJoinedLobby
	(*CMsgClientMMSUserLeftLobby)(nil),                                               // 61: steam.CMsgClientMMSUserLeftLobby
	(*CMsgClientMMSInviteToLobby)(nil),                                               // 62: steam.CMsgClientMMSInviteToLobby
	(*CMsgClientMMSGetLobbyStatus)(nil),                                              // 63: steam.CMsgClientMMSGetLobbyStatus
	(*CMsgClientMMSGetLobbyStatusResponse)(nil),                                      // 64: steam.CMsgClientMMSGetLobbyStatusResponse
	(*CMsgClientInviteToGame)(nil),                                                   // 65: steam.CMsgClientInviteToGame
	(*CMsgClientChatInvite)(nil),                                                     // 66: steam.CMsgClientChatInvite
	(*CMsgClientConnectionStats)(nil),                                                // 67: steam.CMsgClientConnectionStats
	(*CMsgClientServersAvailable)(nil),                                               // 68: steam.CMsgClientServersAvailable
	(*CMsgClientGetUserStats)(nil),                                                   // 69: steam.CMsgClientGetUserStats
	(*CMsgClientGetUserStatsResponse)(nil),                                           // 70: steam.CMsgClientGetUserStatsResponse
	(*CMsgClientStoreUserStatsResponse)(nil),                                         // 71: steam.CMsgClientStoreUserStatsResponse
	(*CMsgClientStoreUserStats2)(nil),                                                // 72: steam.CMsgClientStoreUserStats2
	(*CMsgClientStatsUpdated)(nil),                                                   // 73: steam.CMsgClientStatsUpdated
	(*CMsgClientStoreUserStats)(nil),                                                 // 74: steam.CMsgClientStoreUserStats
	(*CMsgClientGetClientDetails)(nil),                                               // 75: steam.CMsgClientGetClientDetails
	(*CMsgClientReportOverlayDetourFailure)(nil),                                     // 76: steam.CMsgClientReportOverlayDetourFailure
	(*CMsgClientGetClientDetailsResponse)(nil),                                       // 77: steam.CMsgClientGetClientDetailsResponse
	(*CMsgClientGetClientAppList)(nil),                                               // 78: steam.CMsgClientGetClientAppList
	(*CMsgClientGetClientAppListResponse)(nil),                                       // 79: steam.CMsgClientGetClientAppListResponse
	(*CMsgClientInstallClientApp)(nil),                                               // 80: steam.CMsgClientInstallClientApp
	(*CMsgClientInstallClientAppResponse)(nil),                                       // 81: steam.CMsgClientInstallClientAppResponse
	(*CMsgClientUninstallClientApp)(nil),                                             // 82: steam.CMsgClientUninstallClientApp
	(*CMsgClientUninstallClientAppResponse)(nil),                                     // 83: steam.CMsgClientUninstallClientAppResponse
	(*CMsgClientSetClientAppUpdateState)(nil),                                        // 84: steam.CMsgClientSetClientAppUpdateState
	(*CMsgClientSetClientAppUpdateStateResponse)(nil),                                // 85: steam.CMsgClientSetClientAppUpdateStateResponse
	(*CMsgClientUFSUploadFileRequest)(nil),                                           // 86: steam.CMsgClientUFSUploadFileRequest
	(*CMsgClientUFSUploadFileResponse)(nil),                                          // 87: steam.CMsgClientUFSUploadFileResponse
	(*CMsgClientUFSUploadCommit)(nil),                                                // 88: steam.CMsgClientUFSUploadCommit
	(*CMsgClientUFSUploadCommitResponse)(nil),                                        // 89: steam.CMsgClientUFSUploadCommitResponse
	(*CMsgClientUFSFileChunk)(nil),                                                   // 90: steam.CMsgClientUFSFileChunk
	(*CMsgClientUFSTransferHeartbeat)(nil),                                           // 91: steam.CMsgClientUFSTransferHeartbeat
	(*CMsgClientUFSUploadFileFinished)(nil),                                          // 92: steam.CMsgClientUFSUploadFileFinished
	(*CMsgClientUFSDeleteFileRequest)(nil),                                           // 93: steam.CMsgClientUFSDeleteFileRequest
	(*CMsgClientUFSDeleteFileResponse)(nil),                                          // 94: steam.CMsgClientUFSDeleteFileResponse
	(*CMsgClientUFSGetFileListForApp)(nil),                                           // 95: steam.CMsgClientUFSGetFileListForApp
	(*CMsgClientUFSGetFileListForAppResponse)(nil),                                   // 96: steam.CMsgClientUFSGetFileListForAppResponse
	(*CMsgClientUFSDownloadRequest)(nil),                                             // 97: steam.CMsgClientUFSDownloadRequest
	(*CMsgClientUFSDownloadResponse)(nil),                                            // 98: steam.CMsgClientUFSDownloadResponse
	(*CMsgClientUFSLoginRequest)(nil),                                                // 99: steam.CMsgClientUFSLoginRequest
	(*CMsgClientUFSLoginResponse)(nil),                                               // 100: steam.CMsgClientUFSLoginResponse
	(*CMsgClientRequestEncryptedAppTicket)(nil),                                      // 101: steam.CMsgClientRequestEncryptedAppTicket
	(*CMsgClientRequestEncryptedAppTicketResponse)(nil),                              // 102: steam.CMsgClientRequestEncryptedAppTicketResponse
	(*CMsgClientWalletInfoUpdate)(nil),                                               // 103: steam.CMsgClientWalletInfoUpdate
	(*CMsgClientAppInfoUpdate)(nil),                                                  // 104: steam.CMsgClientAppInfoUpdate
	(*CMsgClientAppInfoChanges)(nil),                                                 // 105: steam.CMsgClientAppInfoChanges
	(*CMsgClientAppInfoRequest)(nil),                                                 // 106: steam.CMsgClientAppInfoRequest
	(*CMsgClientAppInfoResponse)(nil),                                                // 107: steam.CMsgClientAppInfoResponse
	(*CMsgClientPackageInfoRequest)(nil),                                             // 108: steam.CMsgClientPackageInfoRequest
	(*CMsgClientPackageInfoResponse)(nil),                                            // 109: steam.CMsgClientPackageInfoResponse
	(*CMsgClientPICSChangesSinceRequest)(nil),                                        // 110: steam.CMsgClientPICSChangesSinceRequest
	(*CMsgClientPICSChangesSinceResponse)(nil),                                       // 111: steam.CMsgClientPICSChangesSinceResponse
	(*CMsgClientPICSProductInfoRequest)(nil),                                         // 112: steam.CMsgClientPICSProductInfoRequest
	(*CMsgClientPICSProductInfoResponse)(nil),                                        // 113: steam.CMsgClientPICSProductInfoResponse
	(*CMsgClientPICSAccessTokenRequest)(nil),                                         // 114: steam.CMsgClientPICSAccessTokenRequest
	(*CMsgClientPICSAccessTokenResponse)(nil),                                        // 115: steam.CMsgClientPICSAccessTokenResponse
	(*CMsgClientUFSGetUGCDetails)(nil),                                               // 116: steam.CMsgClientUFSGetUGCDetails
	(*CMsgClientUFSGetUGCDetailsResponse)(nil),                                       // 117: steam.CMsgClientUFSGetUGCDetailsResponse
	(*CMsgClientUFSGetSingleFileInfo)(nil),                                           // 118: steam.CMsgClientUFSGetSingleFileInfo
	(*CMsgClientUFSGetSingleFileInfoResponse)(nil),                                   // 119: steam.CMsgClientUFSGetSingleFileInfoResponse
	(*CMsgClientUFSShareFile)(nil),                                                   // 120: steam.CMsgClientUFSShareFile
	(*CMsgClientUFSShareFileResponse)(nil),                                           // 121: steam.CMsgClientUFSShareFileResponse
	(*CMsgClientAMGetClanOfficers)(nil),                                              // 122: steam.CMsgClientAMGetClanOfficers
	(*CMsgClientAMGetClanOfficersResponse)(nil),                                      // 123: steam.CMsgClientAMGetClanOfficersResponse
	(*CMsgClientAMGetPersonaNameHistory)(nil),                                        // 124: steam.CMsgClientAMGetPersonaNameHistory
	(*CMsgClientAMGetPersonaNameHistoryResponse)(nil),                                // 125: steam.CMsgClientAMGetPersonaNameHistoryResponse
	(*CMsgClientDeregisterWithServer)(nil),                                           // 126: steam.CMsgClientDeregisterWithServer
	(*CMsgClientClanState)(nil),                                                      // 127: steam.CMsgClientClanState
	(*CMsgClientUnsignedInstallScript)(nil),                                          // 128: steam.CMsgClientUnsignedInstallScript
	(*CMsgGSPlayerList_Player)(nil),                                                  // 129: steam.CMsgGSPlayerList.Player
	(*CMsgClientGamesPlayed_GamePlayed)(nil),                                         // 130: steam.CMsgClientGamesPlayed.GamePlayed
	(*CMsgClientLicenseList_License)(nil),                                            // 131: steam.CMsgClientLicenseList.License
	(*CMsgClientLBSGetLBEntriesResponse_Entry)(nil),                                  // 132: steam.CMsgClientLBSGetLBEntriesResponse.Entry
	(*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData)(nil),                      // 133: steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData
	(*CMsgClientRequestedClientStats_StatsToSend)(nil),                               // 134: steam.CMsgClientRequestedClientStats.StatsToSend
	(*CMsgClientStat2_StatDetail)(nil),                                               // 135: steam.CMsgClientStat2.StatDetail
	(*CMsgClientMMSJoinLobbyResponse_Member)(nil),                                    // 136: steam.CMsgClientMMSJoinLobbyResponse.Member
	(*CMsgClientMMSGetLobbyList_Filter)(nil),                                         // 137: steam.CMsgClientMMSGetLobbyList.Filter
	(*CMsgClientMMSGetLobbyListResponse_Lobby)(nil),                                  // 138: steam.CMsgClientMMSGetLobbyListResponse.Lobby
	(*CMsgClientMMSLobbyData_Member)(nil),                                            // 139: steam.CMsgClientMMSLobbyData.Member
	(*CMsgClientConnectionStats_Stats_Logon)(nil),                                    // 140: steam.CMsgClientConnectionStats.Stats_Logon
	(*CMsgClientConnectionStats_Stats_UDP)(nil),                                      // 141: steam.CMsgClientConnectionStats.Stats_UDP
	(*CMsgClientConnectionStats_Stats_VConn)(nil),                                    // 142: steam.CMsgClientConnectionStats.Stats_VConn
	(*CMsgClientServersAvailable_Server_Types_Available)(nil),                        // 143: steam.CMsgClientServersAvailable.Server_Types_Available
	(*CMsgClientGetUserStatsResponse_Stats)(nil),                                     // 144: steam.CMsgClientGetUserStatsResponse.Stats
	(*CMsgClientGetUserStatsResponse_Achievement_Blocks)(nil),                        // 145: steam.CMsgClientGetUserStatsResponse.Achievement_Blocks
	(*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation)(nil),                 // 146: steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation
	(*CMsgClientStoreUserStats2_Stats)(nil),                                          // 147: steam.CMsgClientStoreUserStats2.Stats
	(*CMsgClientStatsUpdated_Updated_Stats)(nil),                                     // 148: steam.CMsgClientStatsUpdated.Updated_Stats
	(*CMsgClientStoreUserStats_Stats_To_Store)(nil),                                  // 149: steam.CMsgClientStoreUserStats.Stats_To_Store
	(*CMsgClientGetClientDetailsResponse_Game)(nil),                                  // 150: steam.CMsgClientGetClientDetailsResponse.Game
	(*CMsgClientGetClientAppListResponse_App)(nil),                                   // 151: steam.CMsgClientGetClientAppListResponse.App
	(*CMsgClientGetClientAppListResponse_App_DLC)(nil),                               // 152: steam.CMsgClientGetClientAppListResponse.App.DLC
	(*CMsgClientUFSUploadCommit_File)(nil),                                           // 153: steam.CMsgClientUFSUploadCommit.File
	(*CMsgClientUFSUploadCommitResponse_File)(nil),                                   // 154: steam.CMsgClientUFSUploadCommitResponse.File
	(*CMsgClientUFSGetFileListForAppResponse_File)(nil),                              // 155: steam.CMsgClientUFSGetFileListForAppResponse.File
	(*CMsgClientAppInfoRequest_App)(nil),                                             // 156: steam.CMsgClientAppInfoRequest.App
	(*CMsgClientAppInfoResponse_App)(nil),                                            // 157: steam.CMsgClientAppInfoResponse.App
	(*CMsgClientAppInfoResponse_App_Section)(nil),                                    // 158: steam.CMsgClientAppInfoResponse.App.Section
	(*CMsgClientPackageInfoResponse_Package)(nil),                                    // 159: steam.CMsgClientPackageInfoResponse.Package
	(*CMsgClientPICSChangesSinceResponse_PackageChange)(nil),                         // 160: steam.CMsgClientPICSChangesSinceResponse.PackageChange
	(*CMsgClientPICSChangesSinceResponse_AppChange)(nil),                             // 161: steam.CMsgClientPICSChangesSinceResponse.AppChange
	(*CMsgClientPICSProductInfoRequest_AppInfo)(nil),                                 // 162: steam.CMsgClientPICSProductInfoRequest.AppInfo
	(*CMsgClientPICSProductInfoRequest_PackageInfo)(nil),                             // 163: steam.CMsgClientPICSProductInfoRequest.PackageInfo
	(*CMsgClientPICSProductInfoResponse_AppInfo)(nil),                                // 164: steam.CMsgClientPICSProductInfoResponse.AppInfo
	(*CMsgClientPICSProductInfoResponse_PackageInfo)(nil),                            // 165: steam.CMsgClientPICSProductInfoResponse.PackageInfo
	(*CMsgClientPICSAccessTokenResponse_PackageToken)(nil),                           // 166: steam.CMsgClientPICSAccessTokenResponse.PackageToken
	(*CMsgClientPICSAccessTokenResponse_AppToken)(nil),                               // 167: steam.CMsgClientPICSAccessTokenResponse.AppToken
	(*CMsgClientAMGetPersonaNameHistory_IdInstance)(nil),                             // 168: steam.CMsgClientAMGetPersonaNameHistory.IdInstance
	(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance)(nil),              // 169: steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance
	(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance)(nil), // 170: steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance
	(*CMsgClientClanState_NameInfo)(nil),                                             // 171: steam.CMsgClientClanState.NameInfo
	(*CMsgClientClanState_UserCounts)(nil),                                           // 172: steam.CMsgClientClanState.UserCounts
	(*CMsgClientClanState_Event)(nil),                                                // 173: steam.CMsgClientClanState.Event
	(*CMsgIPAddress)(nil),                                                            // 174: steam.CMsgIPAddress
	(*CMsgAuthTicket)(nil),                                                           // 175: steam.CMsgAuthTicket
	(*EncryptedAppTicket)(nil),                                                       // 176: steam.EncryptedAppTicket
}
var file_steam_steammessages_clientserver_proto_depIdxs = []int32{
	129, // 0: steam.CMsgGSPlayerList.players:type_name -> steam.CMsgGSPlayerList.Player
	174, // 1: steam.CMsgGSUserPlaying.public_ip:type_name -> steam.CMsgIPAddress
	130, // 2: steam.CMsgClientGamesPlayed.games_played:type_name -> steam.CMsgClientGamesPlayed.GamePlayed
	175, // 3: steam.CMsgClientAuthList.tickets:type_name -> steam.CMsgAuthTicket
	131, // 4: steam.CMsgClientLicenseList.licenses:type_name -> steam.CMsgClientLicenseList.License
	132, // 5: steam.CMsgClientLBSGetLBEntriesResponse.entries:type_name -> steam.CMsgClientLBSGetLBEntriesResponse.Entry
	133, // 6: steam.CMsgClientAppMinutesPlayedData.minutes_played:type_name -> steam.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData
	134, // 7: steam.CMsgClientRequestedClientStats.stats_to_send:type_name -> steam.CMsgClientRequestedClientStats.StatsToSend
	135, // 8: steam.CMsgClientStat2.stat_detail:type_name -> steam.CMsgClientStat2.StatDetail
	174, // 9: steam.CMsgClientMMSCreateLobby.public_ip:type_name -> steam.CMsgIPAddress
	136, // 10: steam.CMsgClientMMSJoinLobbyResponse.members:type_name -> steam.CMsgClientMMSJoinLobbyResponse.Member
	137, // 11: steam.CMsgClientMMSGetLobbyList.filters:type_name -> steam.CMsgClientMMSGetLobbyList.Filter
	174, // 12: steam.CMsgClientMMSGetLobbyList.public_ip:type_name -> steam.CMsgIPAddress
	138, // 13: steam.CMsgClientMMSGetLobbyListResponse.lobbies:type_name -> steam.CMsgClientMMSGetLobbyListResponse.Lobby
	139, // 14: steam.CMsgClientMMSLobbyData.members:type_name -> steam.CMsgClientMMSLobbyData.Member
	174, // 15: steam.CMsgClientMMSSetLobbyGameServer.game_server_ip:type_name -> steam.CMsgIPAddress
	174, // 16: steam.CMsgClientMMSLobbyGameServerSet.game_server_ip:type_name -> steam.CMsgIPAddress
	0,   // 17: steam.CMsgClientMMSGetLobbyStatusResponse.lobby_status:type_name -> steam.EMMSLobbyStatus
	140, // 18: steam.CMsgClientConnectionStats.stats_logon:type_name -> steam.CMsgClientConnectionStats.Stats_Logon
	142, // 19: steam.CMsgClientConnectionStats.stats_vconn:type_name -> steam.CMsgClientConnectionStats.Stats_VConn
	143, // 20: steam.CMsgClientServersAvailable.server_types_available:type_name -> steam.CMsgClientServersAvailable.Server_Types_Available
	144, // 21: steam.CMsgClientGetUserStatsResponse.stats:type_name -> steam.CMsgClientGetUserStatsResponse.Stats
	145, // 22: steam.CMsgClientGetUserStatsResponse.achievement_blocks:type_name -> steam.CMsgClientGetUserStatsResponse.Achievement_Blocks
	146, // 23: steam.CMsgClientStoreUserStatsResponse.stats_failed_validation:type_name -> steam.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation
	147, // 24: steam.CMsgClientStoreUserStats2.stats:type_name -> steam.CMsgClientStoreUserStats2.Stats
	148, // 25: steam.CMsgClientStatsUpdated.updated_stats:type_name -> steam.CMsgClientStatsUpdated.Updated_Stats
	149, // 26: steam.CMsgClientStoreUserStats.stats_to_store:type_name -> steam.CMsgClientStoreUserStats.Stats_To_Store
	150, // 27: steam.CMsgClientGetClientDetailsResponse.games_running:type_name -> steam.CMsgClientGetClientDetailsResponse.Game
	151, // 28: steam.CMsgClientGetClientAppListResponse.apps:type_name -> steam.CMsgClientGetClientAppListResponse.App
	153, // 29: steam.CMsgClientUFSUploadCommit.files:type_name -> steam.CMsgClientUFSUploadCommit.File
	154, // 30: steam.CMsgClientUFSUploadCommitResponse.files:type_name -> steam.CMsgClientUFSUploadCommitResponse.File
	155, // 31: steam.CMsgClientUFSGetFileListForAppResponse.files:type_name -> steam.CMsgClientUFSGetFileListForAppResponse.File
	176, // 32: steam.CMsgClientRequestEncryptedAppTicketResponse.encrypted_app_ticket:type_name -> steam.EncryptedAppTicket
	156, // 33: steam.CMsgClientAppInfoRequest.apps:type_name -> steam.CMsgClientAppInfoRequest.App
	157, // 34: steam.CMsgClientAppInfoResponse.apps:type_name -> steam.CMsgClientAppInfoResponse.App
	159, // 35: steam.CMsgClientPackageInfoResponse.packages:type_name -> steam.CMsgClientPackageInfoResponse.Package
	160, // 36: steam.CMsgClientPICSChangesSinceResponse.package_changes:type_name -> steam.CMsgClientPICSChangesSinceResponse.PackageChange
	161, // 37: steam.CMsgClientPICSChangesSinceResponse.app_changes:type_name -> steam.CMsgClientPICSChangesSinceResponse.AppChange
	163, // 38: steam.CMsgClientPICSProductInfoRequest.packages:type_name -> steam.CMsgClientPICSProductInfoRequest.PackageInfo
	162, // 39: steam.CMsgClientPICSProductInfoRequest.apps:type_name -> steam.CMsgClientPICSProductInfoRequest.AppInfo
	164, // 40: steam.CMsgClientPICSProductInfoResponse.apps:type_name -> steam.CMsgClientPICSProductInfoResponse.AppInfo
	165, // 41: steam.CMsgClientPICSProductInfoResponse.packages:type_name -> steam.CMsgClientPICSProductInfoResponse.PackageInfo
	166, // 42: steam.CMsgClientPICSAccessTokenResponse.package_access_tokens:type_name -> steam.CMsgClientPICSAccessTokenResponse.PackageToken
	167, // 43: steam.CMsgClientPICSAccessTokenResponse.app_access_tokens:type_name -> steam.CMsgClientPICSAccessTokenResponse.AppToken
	168, // 44: steam.CMsgClientAMGetPersonaNameHistory.Ids:type_name -> steam.CMsgClientAMGetPersonaNameHistory.IdInstance
	169, // 45: steam.CMsgClientAMGetPersonaNameHistoryResponse.responses:type_name -> steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance
	171, // 46: steam.CMsgClientClanState.name_info:type_name -> steam.CMsgClientClanState.NameInfo
	172, // 47: steam.CMsgClientClanState.user_counts:type_name -> steam.CMsgClientClanState.UserCounts
	173, // 48: steam.CMsgClientClanState.events:type_name -> steam.CMsgClientClanState.Event
	173, // 49: steam.CMsgClientClanState.announcements:type_name -> steam.CMsgClientClanState.Event
	174, // 50: steam.CMsgGSPlayerList.Player.public_ip:type_name -> steam.CMsgIPAddress
	174, // 51: steam.CMsgClientGamesPlayed.GamePlayed.game_ip_address:type_name -> steam.CMsgIPAddress
	141, // 52: steam.CMsgClientConnectionStats.Stats_VConn.stats_udp:type_name -> steam.CMsgClientConnectionStats.Stats_UDP
	152, // 53: steam.CMsgClientGetClientAppListResponse.App.dlcs:type_name -> steam.CMsgClientGetClientAppListResponse.App.DLC
	158, // 54: steam.CMsgClientAppInfoResponse.App.sections:type_name -> steam.CMsgClientAppInfoResponse.App.Section
	170, // 55: steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.names:type_name -> steam.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance
	56,  // [56:56] is the sub-list for method output_type
	56,  // [56:56] is the sub-list for method input_type
	56,  // [56:56] is the sub-list for extension type_name
	56,  // [56:56] is the sub-list for extension extendee
	0,   // [0:56] is the sub-list for field type_name
}

func init() { file_steam_steammessages_clientserver_proto_init() }
func file_steam_steammessages_clientserver_proto_init() {
	if File_steam_steammessages_clientserver_proto != nil {
		return
	}
	file_steam_steammessages_base_proto_init()
	file_steam_encrypted_app_ticket_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_clientserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUDSP2PSessionStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUDSP2PSessionEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRegisterAuthTicketWithCM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientTicketAuthComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCMList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientP2PConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientP2PConnectionFailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNetworkingCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNetworkingCertReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNetworkingMobileCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientNetworkingMobileCertReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetAppOwnershipTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetAppOwnershipTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSessionToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGameConnectTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSServerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSUserPlaying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSDisconnectNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGamesPlayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSApprove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSDeny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSKick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAuthList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAuthListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLicenseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSSetScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSSetScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSSetUGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSSetUGCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSFindOrCreateLB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSFindOrCreateLBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSGetLBEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSGetLBEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppMinutesPlayedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientIsLimitedAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestedClientStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetRatelimitPolicyOnClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSCreateLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSCreateLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLeaveLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLeaveLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSendLobbyChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyLinked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyGameServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyGameServerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSUserJoinedLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSUserLeftLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSInviteToLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientInviteToGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServersAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetUserStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetUserStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStats2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientReportOverlayDetourFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientAppList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientAppListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientInstallClientApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientInstallClientAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUninstallClientApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUninstallClientAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSetClientAppUpdateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSetClientAppUpdateStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSTransferHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadFileFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSDeleteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSDeleteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetFileListForApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetFileListForAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestEncryptedAppTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestEncryptedAppTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWalletInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPackageInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPackageInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSChangesSinceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSChangesSinceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetUGCDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetUGCDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetSingleFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetSingleFileInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSShareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSShareFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetClanOfficers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetClanOfficersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetPersonaNameHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetPersonaNameHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDeregisterWithServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientClanState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUnsignedInstallScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSPlayerList_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGamesPlayed_GamePlayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLicenseList_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientLBSGetLBEntriesResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppMinutesPlayedData_AppMinutesPlayedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestedClientStats_StatsToSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStat2_StatDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobbyResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyList_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyListResponse_Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyData_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStats_Stats_Logon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStats_Stats_UDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStats_Stats_VConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServersAvailable_Server_Types_Available); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetUserStatsResponse_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetUserStatsResponse_Achievement_Blocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStatsResponse_Stats_Failed_Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStats2_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStatsUpdated_Updated_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientStoreUserStats_Stats_To_Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientDetailsResponse_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientAppListResponse_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClientAppListResponse_App_DLC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadCommit_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSUploadCommitResponse_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUFSGetFileListForAppResponse_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoRequest_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoResponse_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAppInfoResponse_App_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPackageInfoResponse_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSChangesSinceResponse_PackageChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSChangesSinceResponse_AppChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoRequest_AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoRequest_PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoResponse_AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSProductInfoResponse_PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSAccessTokenResponse_PackageToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPICSAccessTokenResponse_AppToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetPersonaNameHistory_IdInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientClanState_NameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientClanState_UserCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientClanState_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_clientserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   173,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_clientserver_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_clientserver_proto_depIdxs,
		EnumInfos:         file_steam_steammessages_clientserver_proto_enumTypes,
		MessageInfos:      file_steam_steammessages_clientserver_proto_msgTypes,
	}.Build()
	File_steam_steammessages_clientserver_proto = out.File
	file_steam_steammessages_clientserver_proto_rawDesc = nil
	file_steam_steammessages_clientserver_proto_goTypes = nil
	file_steam_steammessages_clientserver_proto_depIdxs = nil
}
