// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_cloud.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CCloud_GetUploadServerInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCloud_GetUploadServerInfo_Request) Reset() {
	*x = CCloud_GetUploadServerInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetUploadServerInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Request) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CCloud_GetUploadServerInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_GetUploadServerInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl *string `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
}

func (x *CCloud_GetUploadServerInfo_Response) Reset() {
	*x = CCloud_GetUploadServerInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetUploadServerInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Response) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if x != nil && x.ServerUrl != nil {
		return *x.ServerUrl
	}
	return ""
}

type CCloud_BeginHTTPUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize             *uint32  `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Filename             *string  `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	FileSha              *string  `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	IsPublic             *bool    `protobuf:"varint,5,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	PlatformsToSync      []string `protobuf:"bytes,6,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	RequestHeadersNames  []string `protobuf:"bytes,7,rep,name=request_headers_names,json=requestHeadersNames" json:"request_headers_names,omitempty"`
	RequestHeadersValues []string `protobuf:"bytes,8,rep,name=request_headers_values,json=requestHeadersValues" json:"request_headers_values,omitempty"`
}

func (x *CCloud_BeginHTTPUpload_Request) Reset() {
	*x = CCloud_BeginHTTPUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginHTTPUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Request) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CCloud_BeginHTTPUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Request) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Request) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *CCloud_BeginHTTPUpload_Request) GetPlatformsToSync() []string {
	if x != nil {
		return x.PlatformsToSync
	}
	return nil
}

func (x *CCloud_BeginHTTPUpload_Request) GetRequestHeadersNames() []string {
	if x != nil {
		return x.RequestHeadersNames
	}
	return nil
}

func (x *CCloud_BeginHTTPUpload_Request) GetRequestHeadersValues() []string {
	if x != nil {
		return x.RequestHeadersValues
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ugcid          *uint64                                        `protobuf:"fixed64,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Timestamp      *uint32                                        `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	UrlHost        *string                                        `protobuf:"bytes,3,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath        *string                                        `protobuf:"bytes,4,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps       *bool                                          `protobuf:"varint,5,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders []*CCloud_BeginHTTPUpload_Response_HTTPHeaders `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
}

func (x *CCloud_BeginHTTPUpload_Response) Reset() {
	*x = CCloud_BeginHTTPUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CCloud_BeginHTTPUpload_Response) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_BeginHTTPUpload_Response) GetRequestHeaders() []*CCloud_BeginHTTPUpload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

type CCloud_CommitHTTPUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferSucceeded *bool   `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           *string `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
}

func (x *CCloud_CommitHTTPUpload_Request) Reset() {
	*x = CCloud_CommitHTTPUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CommitHTTPUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitHTTPUpload_Request) ProtoMessage() {}

func (x *CCloud_CommitHTTPUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitHTTPUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_CommitHTTPUpload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CCloud_CommitHTTPUpload_Request) GetTransferSucceeded() bool {
	if x != nil && x.TransferSucceeded != nil {
		return *x.TransferSucceeded
	}
	return false
}

func (x *CCloud_CommitHTTPUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_CommitHTTPUpload_Request) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

func (x *CCloud_CommitHTTPUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type CCloud_CommitHTTPUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCommitted *bool `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
}

func (x *CCloud_CommitHTTPUpload_Response) Reset() {
	*x = CCloud_CommitHTTPUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CommitHTTPUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CommitHTTPUpload_Response) ProtoMessage() {}

func (x *CCloud_CommitHTTPUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CommitHTTPUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_CommitHTTPUpload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CCloud_CommitHTTPUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_GetFileDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ugcid *uint64 `protobuf:"varint,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Appid *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCloud_GetFileDetails_Request) Reset() {
	*x = CCloud_GetFileDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetFileDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Request) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CCloud_GetFileDetails_Request) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_GetFileDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_UserFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid           *uint64  `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename        *string  `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp       *uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize        *uint32  `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url             *string  `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator  *uint64  `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	Flags           *uint32  `protobuf:"varint,8,opt,name=flags" json:"flags,omitempty"`
	PlatformsToSync []string `protobuf:"bytes,9,rep,name=platforms_to_sync,json=platformsToSync" json:"platforms_to_sync,omitempty"`
	FileSha         *string  `protobuf:"bytes,10,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
}

func (x *CCloud_UserFile) Reset() {
	*x = CCloud_UserFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_UserFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_UserFile) ProtoMessage() {}

func (x *CCloud_UserFile) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_UserFile.ProtoReflect.Descriptor instead.
func (*CCloud_UserFile) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CCloud_UserFile) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_UserFile) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_UserFile) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_UserFile) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_UserFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_UserFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_UserFile) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

func (x *CCloud_UserFile) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CCloud_UserFile) GetPlatformsToSync() []string {
	if x != nil {
		return x.PlatformsToSync
	}
	return nil
}

func (x *CCloud_UserFile) GetFileSha() string {
	if x != nil && x.FileSha != nil {
		return *x.FileSha
	}
	return ""
}

type CCloud_GetFileDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *CCloud_UserFile `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
}

func (x *CCloud_GetFileDetails_Response) Reset() {
	*x = CCloud_GetFileDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetFileDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Response) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if x != nil {
		return x.Details
	}
	return nil
}

type CCloud_EnumerateUserFiles_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtendedDetails *bool   `protobuf:"varint,2,opt,name=extended_details,json=extendedDetails" json:"extended_details,omitempty"`
	Count           *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	StartIndex      *uint32 `protobuf:"varint,4,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
}

func (x *CCloud_EnumerateUserFiles_Request) Reset() {
	*x = CCloud_EnumerateUserFiles_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Request) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CCloud_EnumerateUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetExtendedDetails() bool {
	if x != nil && x.ExtendedDetails != nil {
		return *x.ExtendedDetails
	}
	return false
}

func (x *CCloud_EnumerateUserFiles_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*CCloud_UserFile `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles *uint32            `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
}

func (x *CCloud_EnumerateUserFiles_Response) Reset() {
	*x = CCloud_EnumerateUserFiles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

type CCloud_Delete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid    *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CCloud_Delete_Request) Reset() {
	*x = CCloud_Delete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_Delete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Request) ProtoMessage() {}

func (x *CCloud_Delete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Request.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CCloud_Delete_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_Delete_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_Delete_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_Delete_Response) Reset() {
	*x = CCloud_Delete_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Response) ProtoMessage() {}

func (x *CCloud_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Response.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{12}
}

type CCloud_GetClientEncryptionKey_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_GetClientEncryptionKey_Request) Reset() {
	*x = CCloud_GetClientEncryptionKey_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetClientEncryptionKey_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetClientEncryptionKey_Request) ProtoMessage() {}

func (x *CCloud_GetClientEncryptionKey_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetClientEncryptionKey_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetClientEncryptionKey_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{13}
}

type CCloud_GetClientEncryptionKey_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Crc *int32 `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
}

func (x *CCloud_GetClientEncryptionKey_Response) Reset() {
	*x = CCloud_GetClientEncryptionKey_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_GetClientEncryptionKey_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetClientEncryptionKey_Response) ProtoMessage() {}

func (x *CCloud_GetClientEncryptionKey_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetClientEncryptionKey_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetClientEncryptionKey_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CCloud_GetClientEncryptionKey_Response) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CCloud_GetClientEncryptionKey_Response) GetCrc() int32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

type CCloud_CDNReport_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid        *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Url            *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Success        *bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	HttpStatusCode *uint32 `protobuf:"varint,4,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	ExpectedBytes  *uint64 `protobuf:"varint,5,opt,name=expected_bytes,json=expectedBytes" json:"expected_bytes,omitempty"`
	ReceivedBytes  *uint64 `protobuf:"varint,6,opt,name=received_bytes,json=receivedBytes" json:"received_bytes,omitempty"`
	Duration       *uint32 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
}

func (x *CCloud_CDNReport_Notification) Reset() {
	*x = CCloud_CDNReport_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_CDNReport_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_CDNReport_Notification) ProtoMessage() {}

func (x *CCloud_CDNReport_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_CDNReport_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_CDNReport_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CCloud_CDNReport_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_CDNReport_Notification) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CCloud_CDNReport_Notification) GetHttpStatusCode() uint32 {
	if x != nil && x.HttpStatusCode != nil {
		return *x.HttpStatusCode
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetExpectedBytes() uint64 {
	if x != nil && x.ExpectedBytes != nil {
		return *x.ExpectedBytes
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetReceivedBytes() uint64 {
	if x != nil && x.ReceivedBytes != nil {
		return *x.ReceivedBytes
	}
	return 0
}

func (x *CCloud_CDNReport_Notification) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CCloud_ExternalStorageTransferReport_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host           *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Path           *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	IsUpload       *bool   `protobuf:"varint,3,opt,name=is_upload,json=isUpload" json:"is_upload,omitempty"`
	Success        *bool   `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	HttpStatusCode *uint32 `protobuf:"varint,5,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	BytesExpected  *uint64 `protobuf:"varint,6,opt,name=bytes_expected,json=bytesExpected" json:"bytes_expected,omitempty"`
	BytesActual    *uint64 `protobuf:"varint,7,opt,name=bytes_actual,json=bytesActual" json:"bytes_actual,omitempty"`
	DurationMs     *uint32 `protobuf:"varint,8,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Cellid         *uint32 `protobuf:"varint,9,opt,name=cellid" json:"cellid,omitempty"`
	Proxied        *bool   `protobuf:"varint,10,opt,name=proxied" json:"proxied,omitempty"`
	Ipv6Local      *bool   `protobuf:"varint,11,opt,name=ipv6_local,json=ipv6Local" json:"ipv6_local,omitempty"`
	Ipv6Remote     *bool   `protobuf:"varint,12,opt,name=ipv6_remote,json=ipv6Remote" json:"ipv6_remote,omitempty"`
}

func (x *CCloud_ExternalStorageTransferReport_Notification) Reset() {
	*x = CCloud_ExternalStorageTransferReport_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ExternalStorageTransferReport_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ExternalStorageTransferReport_Notification) ProtoMessage() {}

func (x *CCloud_ExternalStorageTransferReport_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ExternalStorageTransferReport_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_ExternalStorageTransferReport_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIsUpload() bool {
	if x != nil && x.IsUpload != nil {
		return *x.IsUpload
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetHttpStatusCode() uint32 {
	if x != nil && x.HttpStatusCode != nil {
		return *x.HttpStatusCode
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetBytesExpected() uint64 {
	if x != nil && x.BytesExpected != nil {
		return *x.BytesExpected
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetBytesActual() uint64 {
	if x != nil && x.BytesActual != nil {
		return *x.BytesActual
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetDurationMs() uint32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetProxied() bool {
	if x != nil && x.Proxied != nil {
		return *x.Proxied
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIpv6Local() bool {
	if x != nil && x.Ipv6Local != nil {
		return *x.Ipv6Local
	}
	return false
}

func (x *CCloud_ExternalStorageTransferReport_Notification) GetIpv6Remote() bool {
	if x != nil && x.Ipv6Remote != nil {
		return *x.Ipv6Remote
	}
	return false
}

type CCloud_ClientBeginFileUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize        *uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize     *uint32 `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	FileSha         []byte  `protobuf:"bytes,4,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	TimeStamp       *uint64 `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Filename        *string `protobuf:"bytes,6,opt,name=filename" json:"filename,omitempty"`
	PlatformsToSync *uint32 `protobuf:"varint,7,opt,name=platforms_to_sync,json=platformsToSync,def=4294967295" json:"platforms_to_sync,omitempty"`
	CellId          *uint32 `protobuf:"varint,9,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	CanEncrypt      *bool   `protobuf:"varint,10,opt,name=can_encrypt,json=canEncrypt" json:"can_encrypt,omitempty"`
	IsSharedFile    *bool   `protobuf:"varint,11,opt,name=is_shared_file,json=isSharedFile" json:"is_shared_file,omitempty"`
	Realm           *uint32 `protobuf:"varint,12,opt,name=realm" json:"realm,omitempty"`
}

// Default values for CCloud_ClientBeginFileUpload_Request fields.
const (
	Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync = uint32(4294967295)
)

func (x *CCloud_ClientBeginFileUpload_Request) Reset() {
	*x = CCloud_ClientBeginFileUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientBeginFileUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientBeginFileUpload_Request) ProtoMessage() {}

func (x *CCloud_ClientBeginFileUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientBeginFileUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientBeginFileUpload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CCloud_ClientBeginFileUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFileSha() []byte {
	if x != nil {
		return x.FileSha
	}
	return nil
}

func (x *CCloud_ClientBeginFileUpload_Request) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientBeginFileUpload_Request) GetPlatformsToSync() uint32 {
	if x != nil && x.PlatformsToSync != nil {
		return *x.PlatformsToSync
	}
	return Default_CCloud_ClientBeginFileUpload_Request_PlatformsToSync
}

func (x *CCloud_ClientBeginFileUpload_Request) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CCloud_ClientBeginFileUpload_Request) GetCanEncrypt() bool {
	if x != nil && x.CanEncrypt != nil {
		return *x.CanEncrypt
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Request) GetIsSharedFile() bool {
	if x != nil && x.IsSharedFile != nil {
		return *x.IsSharedFile
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Request) GetRealm() uint32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return 0
}

type ClientCloudFileUploadBlockDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlHost          *string                                          `protobuf:"bytes,1,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                          `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                            `protobuf:"varint,3,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	HttpMethod       *int32                                           `protobuf:"varint,4,opt,name=http_method,json=httpMethod" json:"http_method,omitempty"`
	RequestHeaders   []*ClientCloudFileUploadBlockDetails_HTTPHeaders `protobuf:"bytes,5,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	BlockOffset      *uint64                                          `protobuf:"varint,6,opt,name=block_offset,json=blockOffset" json:"block_offset,omitempty"`
	BlockLength      *uint32                                          `protobuf:"varint,7,opt,name=block_length,json=blockLength" json:"block_length,omitempty"`
	ExplicitBodyData []byte                                           `protobuf:"bytes,8,opt,name=explicit_body_data,json=explicitBodyData" json:"explicit_body_data,omitempty"`
	MayParallelize   *bool                                            `protobuf:"varint,9,opt,name=may_parallelize,json=mayParallelize" json:"may_parallelize,omitempty"`
}

func (x *ClientCloudFileUploadBlockDetails) Reset() {
	*x = ClientCloudFileUploadBlockDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCloudFileUploadBlockDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *ClientCloudFileUploadBlockDetails) GetHttpMethod() int32 {
	if x != nil && x.HttpMethod != nil {
		return *x.HttpMethod
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetRequestHeaders() []*ClientCloudFileUploadBlockDetails_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockOffset() uint64 {
	if x != nil && x.BlockOffset != nil {
		return *x.BlockOffset
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetBlockLength() uint32 {
	if x != nil && x.BlockLength != nil {
		return *x.BlockLength
	}
	return 0
}

func (x *ClientCloudFileUploadBlockDetails) GetExplicitBodyData() []byte {
	if x != nil {
		return x.ExplicitBodyData
	}
	return nil
}

func (x *ClientCloudFileUploadBlockDetails) GetMayParallelize() bool {
	if x != nil && x.MayParallelize != nil {
		return *x.MayParallelize
	}
	return false
}

type CCloud_ClientBeginFileUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptFile   *bool                                `protobuf:"varint,1,opt,name=encrypt_file,json=encryptFile" json:"encrypt_file,omitempty"`
	BlockRequests []*ClientCloudFileUploadBlockDetails `protobuf:"bytes,2,rep,name=block_requests,json=blockRequests" json:"block_requests,omitempty"`
}

func (x *CCloud_ClientBeginFileUpload_Response) Reset() {
	*x = CCloud_ClientBeginFileUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientBeginFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientBeginFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientBeginFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientBeginFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientBeginFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CCloud_ClientBeginFileUpload_Response) GetEncryptFile() bool {
	if x != nil && x.EncryptFile != nil {
		return *x.EncryptFile
	}
	return false
}

func (x *CCloud_ClientBeginFileUpload_Response) GetBlockRequests() []*ClientCloudFileUploadBlockDetails {
	if x != nil {
		return x.BlockRequests
	}
	return nil
}

type CCloud_ClientCommitFileUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferSucceeded *bool   `protobuf:"varint,1,opt,name=transfer_succeeded,json=transferSucceeded" json:"transfer_succeeded,omitempty"`
	Appid             *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSha           []byte  `protobuf:"bytes,3,opt,name=file_sha,json=fileSha" json:"file_sha,omitempty"`
	Filename          *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
}

func (x *CCloud_ClientCommitFileUpload_Request) Reset() {
	*x = CCloud_ClientCommitFileUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientCommitFileUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientCommitFileUpload_Request) ProtoMessage() {}

func (x *CCloud_ClientCommitFileUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientCommitFileUpload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientCommitFileUpload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CCloud_ClientCommitFileUpload_Request) GetTransferSucceeded() bool {
	if x != nil && x.TransferSucceeded != nil {
		return *x.TransferSucceeded
	}
	return false
}

func (x *CCloud_ClientCommitFileUpload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientCommitFileUpload_Request) GetFileSha() []byte {
	if x != nil {
		return x.FileSha
	}
	return nil
}

func (x *CCloud_ClientCommitFileUpload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type CCloud_ClientCommitFileUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCommitted *bool `protobuf:"varint,1,opt,name=file_committed,json=fileCommitted" json:"file_committed,omitempty"`
}

func (x *CCloud_ClientCommitFileUpload_Response) Reset() {
	*x = CCloud_ClientCommitFileUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientCommitFileUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientCommitFileUpload_Response) ProtoMessage() {}

func (x *CCloud_ClientCommitFileUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientCommitFileUpload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientCommitFileUpload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CCloud_ClientCommitFileUpload_Response) GetFileCommitted() bool {
	if x != nil && x.FileCommitted != nil {
		return *x.FileCommitted
	}
	return false
}

type CCloud_ClientFileDownload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename *string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Realm    *uint32 `protobuf:"varint,3,opt,name=realm" json:"realm,omitempty"`
}

func (x *CCloud_ClientFileDownload_Request) Reset() {
	*x = CCloud_ClientFileDownload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientFileDownload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Request) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CCloud_ClientFileDownload_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Request) GetRealm() uint32 {
	if x != nil && x.Realm != nil {
		return *x.Realm
	}
	return 0
}

type CCloud_ClientFileDownload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32                                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	FileSize         *uint32                                           `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RawFileSize      *uint32                                           `protobuf:"varint,3,opt,name=raw_file_size,json=rawFileSize" json:"raw_file_size,omitempty"`
	ShaFile          []byte                                            `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	TimeStamp        *uint64                                           `protobuf:"varint,5,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	IsExplicitDelete *bool                                             `protobuf:"varint,6,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
	UrlHost          *string                                           `protobuf:"bytes,7,opt,name=url_host,json=urlHost" json:"url_host,omitempty"`
	UrlPath          *string                                           `protobuf:"bytes,8,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	UseHttps         *bool                                             `protobuf:"varint,9,opt,name=use_https,json=useHttps" json:"use_https,omitempty"`
	RequestHeaders   []*CCloud_ClientFileDownload_Response_HTTPHeaders `protobuf:"bytes,10,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty"`
	Encrypted        *bool                                             `protobuf:"varint,11,opt,name=encrypted" json:"encrypted,omitempty"`
}

func (x *CCloud_ClientFileDownload_Response) Reset() {
	*x = CCloud_ClientFileDownload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientFileDownload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CCloud_ClientFileDownload_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetRawFileSize() uint32 {
	if x != nil && x.RawFileSize != nil {
		return *x.RawFileSize
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetTimeStamp() uint64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CCloud_ClientFileDownload_Response) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetUrlHost() string {
	if x != nil && x.UrlHost != nil {
		return *x.UrlHost
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response) GetUseHttps() bool {
	if x != nil && x.UseHttps != nil {
		return *x.UseHttps
	}
	return false
}

func (x *CCloud_ClientFileDownload_Response) GetRequestHeaders() []*CCloud_ClientFileDownload_Response_HTTPHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *CCloud_ClientFileDownload_Response) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

type CCloud_ClientDeleteFile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename         *string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	IsExplicitDelete *bool   `protobuf:"varint,3,opt,name=is_explicit_delete,json=isExplicitDelete" json:"is_explicit_delete,omitempty"`
}

func (x *CCloud_ClientDeleteFile_Request) Reset() {
	*x = CCloud_ClientDeleteFile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientDeleteFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientDeleteFile_Request) ProtoMessage() {}

func (x *CCloud_ClientDeleteFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientDeleteFile_Request.ProtoReflect.Descriptor instead.
func (*CCloud_ClientDeleteFile_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CCloud_ClientDeleteFile_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientDeleteFile_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_ClientDeleteFile_Request) GetIsExplicitDelete() bool {
	if x != nil && x.IsExplicitDelete != nil {
		return *x.IsExplicitDelete
	}
	return false
}

type CCloud_ClientDeleteFile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_ClientDeleteFile_Response) Reset() {
	*x = CCloud_ClientDeleteFile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientDeleteFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientDeleteFile_Response) ProtoMessage() {}

func (x *CCloud_ClientDeleteFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientDeleteFile_Response.ProtoReflect.Descriptor instead.
func (*CCloud_ClientDeleteFile_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{25}
}

type CCloud_ClientConflictResolution_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ChoseLocalFiles *bool   `protobuf:"varint,2,opt,name=chose_local_files,json=choseLocalFiles" json:"chose_local_files,omitempty"`
}

func (x *CCloud_ClientConflictResolution_Notification) Reset() {
	*x = CCloud_ClientConflictResolution_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientConflictResolution_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientConflictResolution_Notification) ProtoMessage() {}

func (x *CCloud_ClientConflictResolution_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientConflictResolution_Notification.ProtoReflect.Descriptor instead.
func (*CCloud_ClientConflictResolution_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CCloud_ClientConflictResolution_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_ClientConflictResolution_Notification) GetChoseLocalFiles() bool {
	if x != nil && x.ChoseLocalFiles != nil {
		return *x.ChoseLocalFiles
	}
	return false
}

type CCloud_EnumerateUserApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloud_EnumerateUserApps_Request) Reset() {
	*x = CCloud_EnumerateUserApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Request) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Request.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{27}
}

type CCloud_EnumerateUserApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*CCloud_EnumerateUserApps_Response_Apps `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (x *CCloud_EnumerateUserApps_Response) Reset() {
	*x = CCloud_EnumerateUserApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CCloud_EnumerateUserApps_Response) GetApps() []*CCloud_EnumerateUserApps_Response_Apps {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCloud_BeginHTTPUpload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) Reset() {
	*x = CCloud_BeginHTTPUpload_Response_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_BeginHTTPUpload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_BeginHTTPUpload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_BeginHTTPUpload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ClientCloudFileUploadBlockDetails_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) Reset() {
	*x = ClientCloudFileUploadBlockDetails_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoMessage() {}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloudFileUploadBlockDetails_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*ClientCloudFileUploadBlockDetails_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClientCloudFileUploadBlockDetails_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_ClientFileDownload_Response_HTTPHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) Reset() {
	*x = CCloud_ClientFileDownload_Response_HTTPHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoMessage() {}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_ClientFileDownload_Response_HTTPHeaders.ProtoReflect.Descriptor instead.
func (*CCloud_ClientFileDownload_Response_HTTPHeaders) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCloud_ClientFileDownload_Response_HTTPHeaders) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCloud_EnumerateUserApps_Response_Apps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Totalcount *int32  `protobuf:"varint,2,opt,name=totalcount" json:"totalcount,omitempty"`
	Totalsize  *int64  `protobuf:"varint,3,opt,name=totalsize" json:"totalsize,omitempty"`
}

func (x *CCloud_EnumerateUserApps_Response_Apps) Reset() {
	*x = CCloud_EnumerateUserApps_Response_Apps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_EnumerateUserApps_Response_Apps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserApps_Response_Apps) ProtoMessage() {}

func (x *CCloud_EnumerateUserApps_Response_Apps) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserApps_Response_Apps.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserApps_Response_Apps) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalcount() int32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return 0
}

func (x *CCloud_EnumerateUserApps_Response_Apps) GetTotalsize() int64 {
	if x != nil && x.Totalsize != nil {
		return *x.Totalsize
	}
	return 0
}

var File_steam_client_steammessages_cloud_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_cloud_steamclient_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a,
	0x22, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x74,
	0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x22, 0x9d, 0x07, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20,
	0x82, 0xb5, 0x18, 0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5,
	0x18, 0x27, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x48, 0x65, 0x78, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x34, 0x30, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x29, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x53, 0x48, 0x41, 0x31, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x12, 0x66, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x49, 0x82, 0xb5, 0x18, 0x45, 0x54, 0x72, 0x75,
	0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x46, 0x53,
	0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0xa8, 0x01, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x7c, 0x82, 0xb5, 0x18, 0x78, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x79, 0x6e, 0x63,
	0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20,
	0x61, 0x6c, 0x6c, 0x2c, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2c, 0x20, 0x4d, 0x61,
	0x63, 0x4f, 0x53, 0x2c, 0x20, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2c, 0x20, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2c, 0x20, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x2c, 0x20, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x53, 0x82, 0xb5, 0x18, 0x4f, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20, 0x79,
	0x6f, 0x75, 0x27, 0x6c, 0x6c, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x62, 0x65,
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0xac, 0x01, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x76, 0x82, 0xb5, 0x18, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c,
	0x6c, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xf1, 0x04, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x55, 0x47, 0x43, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x1d, 0x82, 0xb5, 0x18, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x61, 0x0a, 0x08, 0x75, 0x72, 0x6c,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x82, 0xb5, 0x18,
	0x42, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x50,
	0x55, 0x54, 0x2e, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x08,
	0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d,
	0x82, 0xb5, 0x18, 0x39, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74,
	0x68, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x52, 0x07, 0x75,
	0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x49,
	0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x2c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x4e, 0x61, 0x6d, 0x65, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x50,
	0x55, 0x54, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x0b, 0x48,
	0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x04, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x87, 0x01, 0x82, 0xb5, 0x18, 0x82, 0x01, 0x54, 0x72, 0x75,
	0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x50, 0x55,
	0x54, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x55, 0x52, 0x4c, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x28, 0x55,
	0x52, 0x4c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x29, 0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x2e, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x7f, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x69, 0x82, 0xb5, 0x18, 0x65, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0x82, 0xb5, 0x18, 0x7e, 0x48, 0x65, 0x78,
	0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x28, 0x34, 0x30, 0x20, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x29, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x48, 0x41, 0x31, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x20, 0x4d, 0x75,
	0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x48, 0x41,
	0x31, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x12, 0x5b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x20, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x41,
	0x82, 0xb5, 0x18, 0x3d, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2c,
	0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65,
	0x2e, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0x52,
	0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x41, 0x70, 0x70, 0x20, 0x49,
	0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xf1, 0x03,
	0x0a, 0x0f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x67, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x7c, 0x82, 0xb5, 0x18, 0x78, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x79, 0x6e, 0x63, 0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x20, 0x61, 0x6c, 0x6c, 0x2c, 0x20, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2c, 0x20, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x2c, 0x20, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2c, 0x20, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2c, 0x20, 0x69, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x2c, 0x20, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x5f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x48, 0x65, 0x78, 0x20, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x20, 0x28, 0x34, 0x30, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x29, 0x20, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x53, 0x48, 0x41, 0x31, 0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x22, 0x59, 0x0a, 0x1e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x95, 0x04, 0x0a,
	0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0xac, 0x01, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x80, 0x01, 0x82, 0xb5, 0x18,
	0x7c, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x47, 0x65, 0x74, 0x20,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x49, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x55, 0x47, 0x43, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x83,
	0x01, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6d,
	0x82, 0xb5, 0x18, 0x69, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x35, 0x30, 0x30, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x5d, 0x82, 0xb5, 0x18, 0x59, 0x28,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74,
	0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x7a, 0x0a, 0x22, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x6a, 0x0a, 0x15, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x78, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x41, 0x45, 0x53, 0x2d,
	0x32, 0x35, 0x36, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x82, 0xb5, 0x18, 0x0a, 0x43, 0x52, 0x43, 0x20, 0x6f, 0x66,
	0x20, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x63, 0x72, 0x63, 0x22, 0xf9, 0x01, 0x0a, 0x1d, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x44, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x03, 0x0a, 0x31, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x22, 0xd2, 0x06, 0x0a, 0x24, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x41,
	0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x73, 0x69, 0x7a, 0x65, 0x20, 0x61, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x53, 0x48, 0x41, 0x2d, 0x31, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x61, 0x77, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x68, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5, 0x18,
	0x27, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x0a, 0x34,
	0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x82, 0xb5, 0x18,
	0x31, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x20, 0x49,
	0x44, 0x20, 0x73, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x69, 0x63, 0x6b,
	0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3c, 0x82, 0xb5, 0x18, 0x38, 0x69, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x74, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x4e, 0x82, 0xb5, 0x18, 0x4a, 0x69, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x55, 0x47, 0x43, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f,
	0x82, 0xb5, 0x18, 0x0b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0x80, 0x08, 0x0a, 0x21, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x61, 0x0a, 0x08,
	0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46,
	0x82, 0xb5, 0x18, 0x42, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x48, 0x54, 0x54,
	0x50, 0x20, 0x50, 0x55, 0x54, 0x2e, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x58, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
	0x70, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x2e,
	0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x82, 0xb5,
	0x18, 0x27, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x2c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x45, 0x48,
	0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x9a, 0x01, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x4e, 0x61, 0x6d, 0x65, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x50, 0x55, 0x54,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x22, 0x82, 0xb5, 0x18, 0x1e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x7a, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x57, 0x82, 0xb5, 0x18, 0x53, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x2d, 0x20, 0x69, 0x66, 0x20,
	0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x71, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x7f, 0x0a, 0x0f, 0x6d, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x69, 0x66,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x6c, 0x79,
	0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x0e, 0x6d, 0x61, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x7a, 0x65,
	0x1a, 0x37, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x25, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x49,
	0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x48, 0x54, 0x54,
	0x50, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61,
	0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xf6, 0x03, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x54,
	0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x7f, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x69, 0x82, 0xb5, 0x18, 0x65, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x53, 0x48, 0x41, 0x31,
	0x20, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x61, 0x77, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x20, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x48, 0x41, 0x31, 0x20, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x12,
	0x5b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x61, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x26, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x41, 0x82, 0xb5, 0x18, 0x3d, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x2c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73,
	0x65, 0x2e, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x41, 0x70, 0x70, 0x20,
	0x49, 0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0x94, 0x07, 0x0a,
	0x22, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x51,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65,
	0x20, 0x61, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72,
	0x20, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x53,
	0x48, 0x41, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x54, 0x72, 0x75, 0x65, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x48,
	0x6f, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x45, 0x54, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x50, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x55, 0x52, 0x4c,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x6e, 0x79, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24,
	0x82, 0xb5, 0x18, 0x20, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x2c, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x9b,
	0x01, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x4e, 0x61, 0x6d, 0x65,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61, 0x69, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20,
	0x47, 0x45, 0x54, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x37, 0x0a, 0x0b, 0x48, 0x54,
	0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x41, 0x70, 0x70, 0x20,
	0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x69, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x82,
	0xb5, 0x18, 0x37, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x3b, 0x20,
	0x69, 0x66, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x20, 0x27, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x27, 0x52, 0x10, 0x69, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x20,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf9, 0x01, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x44, 0x69, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x6e,
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6e, 0x6f, 0x77, 0x3f, 0x52, 0x0f, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x20,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc9, 0x01, 0x0a, 0x21, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73,
	0x1a, 0x5a, 0x0a, 0x04, 0x41, 0x70, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x32, 0xb4, 0x15, 0x0a,
	0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0xb6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x12,
	0xc2, 0x02, 0x0a, 0x0f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48,
	0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54,
	0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd1, 0x01, 0x82, 0xb5, 0x18, 0xcc, 0x01, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
	0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x48,
	0x54, 0x54, 0x50, 0x20, 0x50, 0x55, 0x54, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x2c, 0x20, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20,
	0x74, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x12, 0xc7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xb5, 0x18, 0x50, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x20, 0x76, 0x69, 0x61, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x50, 0x55, 0x54, 0x2e, 0x12, 0x91,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5,
	0x18, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xb5,
	0x18, 0x57, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61,
	0x70, 0x70, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x75,
	0x70, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x30, 0x30, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x61,
	0x74, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x12, 0x7e, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xb5, 0x18, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x12,
	0x7d, 0x0a, 0x09, 0x43, 0x44, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x43, 0x44, 0x4e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x43, 0x44, 0x4e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x12, 0xb9,
	0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18,
	0x39, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xb5, 0x18, 0x1c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x12,
	0xb4, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x33, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x12,
	0x8f, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x12, 0xa8, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x55, 0x73, 0x65, 0x72, 0x20, 0x68,
	0x61, 0x73, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x2e, 0x12, 0xa9, 0x01, 0x0a,
	0x11, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x73, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x73, 0x74, 0x72, 0x6f, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x1a, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x41, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x3e, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_cloud_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_cloud_steamclient_proto_rawDescData = file_steam_client_steammessages_cloud_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_cloud_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_cloud_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_cloud_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_cloud_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_cloud_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_cloud_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_steam_client_steammessages_cloud_steamclient_proto_goTypes = []interface{}{
	(*CCloud_GetUploadServerInfo_Request)(nil),                // 0: steam.client.CCloud_GetUploadServerInfo_Request
	(*CCloud_GetUploadServerInfo_Response)(nil),               // 1: steam.client.CCloud_GetUploadServerInfo_Response
	(*CCloud_BeginHTTPUpload_Request)(nil),                    // 2: steam.client.CCloud_BeginHTTPUpload_Request
	(*CCloud_BeginHTTPUpload_Response)(nil),                   // 3: steam.client.CCloud_BeginHTTPUpload_Response
	(*CCloud_CommitHTTPUpload_Request)(nil),                   // 4: steam.client.CCloud_CommitHTTPUpload_Request
	(*CCloud_CommitHTTPUpload_Response)(nil),                  // 5: steam.client.CCloud_CommitHTTPUpload_Response
	(*CCloud_GetFileDetails_Request)(nil),                     // 6: steam.client.CCloud_GetFileDetails_Request
	(*CCloud_UserFile)(nil),                                   // 7: steam.client.CCloud_UserFile
	(*CCloud_GetFileDetails_Response)(nil),                    // 8: steam.client.CCloud_GetFileDetails_Response
	(*CCloud_EnumerateUserFiles_Request)(nil),                 // 9: steam.client.CCloud_EnumerateUserFiles_Request
	(*CCloud_EnumerateUserFiles_Response)(nil),                // 10: steam.client.CCloud_EnumerateUserFiles_Response
	(*CCloud_Delete_Request)(nil),                             // 11: steam.client.CCloud_Delete_Request
	(*CCloud_Delete_Response)(nil),                            // 12: steam.client.CCloud_Delete_Response
	(*CCloud_GetClientEncryptionKey_Request)(nil),             // 13: steam.client.CCloud_GetClientEncryptionKey_Request
	(*CCloud_GetClientEncryptionKey_Response)(nil),            // 14: steam.client.CCloud_GetClientEncryptionKey_Response
	(*CCloud_CDNReport_Notification)(nil),                     // 15: steam.client.CCloud_CDNReport_Notification
	(*CCloud_ExternalStorageTransferReport_Notification)(nil), // 16: steam.client.CCloud_ExternalStorageTransferReport_Notification
	(*CCloud_ClientBeginFileUpload_Request)(nil),              // 17: steam.client.CCloud_ClientBeginFileUpload_Request
	(*ClientCloudFileUploadBlockDetails)(nil),                 // 18: steam.client.ClientCloudFileUploadBlockDetails
	(*CCloud_ClientBeginFileUpload_Response)(nil),             // 19: steam.client.CCloud_ClientBeginFileUpload_Response
	(*CCloud_ClientCommitFileUpload_Request)(nil),             // 20: steam.client.CCloud_ClientCommitFileUpload_Request
	(*CCloud_ClientCommitFileUpload_Response)(nil),            // 21: steam.client.CCloud_ClientCommitFileUpload_Response
	(*CCloud_ClientFileDownload_Request)(nil),                 // 22: steam.client.CCloud_ClientFileDownload_Request
	(*CCloud_ClientFileDownload_Response)(nil),                // 23: steam.client.CCloud_ClientFileDownload_Response
	(*CCloud_ClientDeleteFile_Request)(nil),                   // 24: steam.client.CCloud_ClientDeleteFile_Request
	(*CCloud_ClientDeleteFile_Response)(nil),                  // 25: steam.client.CCloud_ClientDeleteFile_Response
	(*CCloud_ClientConflictResolution_Notification)(nil),      // 26: steam.client.CCloud_ClientConflictResolution_Notification
	(*CCloud_EnumerateUserApps_Request)(nil),                  // 27: steam.client.CCloud_EnumerateUserApps_Request
	(*CCloud_EnumerateUserApps_Response)(nil),                 // 28: steam.client.CCloud_EnumerateUserApps_Response
	(*CCloud_BeginHTTPUpload_Response_HTTPHeaders)(nil),       // 29: steam.client.CCloud_BeginHTTPUpload_Response.HTTPHeaders
	(*ClientCloudFileUploadBlockDetails_HTTPHeaders)(nil),     // 30: steam.client.ClientCloudFileUploadBlockDetails.HTTPHeaders
	(*CCloud_ClientFileDownload_Response_HTTPHeaders)(nil),    // 31: steam.client.CCloud_ClientFileDownload_Response.HTTPHeaders
	(*CCloud_EnumerateUserApps_Response_Apps)(nil),            // 32: steam.client.CCloud_EnumerateUserApps_Response.Apps
	(*NoResponse)(nil),                                        // 33: steam.client.NoResponse
}
var file_steam_client_steammessages_cloud_steamclient_proto_depIdxs = []int32{
	29, // 0: steam.client.CCloud_BeginHTTPUpload_Response.request_headers:type_name -> steam.client.CCloud_BeginHTTPUpload_Response.HTTPHeaders
	7,  // 1: steam.client.CCloud_GetFileDetails_Response.details:type_name -> steam.client.CCloud_UserFile
	7,  // 2: steam.client.CCloud_EnumerateUserFiles_Response.files:type_name -> steam.client.CCloud_UserFile
	30, // 3: steam.client.ClientCloudFileUploadBlockDetails.request_headers:type_name -> steam.client.ClientCloudFileUploadBlockDetails.HTTPHeaders
	18, // 4: steam.client.CCloud_ClientBeginFileUpload_Response.block_requests:type_name -> steam.client.ClientCloudFileUploadBlockDetails
	31, // 5: steam.client.CCloud_ClientFileDownload_Response.request_headers:type_name -> steam.client.CCloud_ClientFileDownload_Response.HTTPHeaders
	32, // 6: steam.client.CCloud_EnumerateUserApps_Response.apps:type_name -> steam.client.CCloud_EnumerateUserApps_Response.Apps
	0,  // 7: steam.client.Cloud.GetUploadServerInfo:input_type -> steam.client.CCloud_GetUploadServerInfo_Request
	2,  // 8: steam.client.Cloud.BeginHTTPUpload:input_type -> steam.client.CCloud_BeginHTTPUpload_Request
	4,  // 9: steam.client.Cloud.CommitHTTPUpload:input_type -> steam.client.CCloud_CommitHTTPUpload_Request
	6,  // 10: steam.client.Cloud.GetFileDetails:input_type -> steam.client.CCloud_GetFileDetails_Request
	9,  // 11: steam.client.Cloud.EnumerateUserFiles:input_type -> steam.client.CCloud_EnumerateUserFiles_Request
	11, // 12: steam.client.Cloud.Delete:input_type -> steam.client.CCloud_Delete_Request
	13, // 13: steam.client.Cloud.GetClientEncryptionKey:input_type -> steam.client.CCloud_GetClientEncryptionKey_Request
	15, // 14: steam.client.Cloud.CDNReport:input_type -> steam.client.CCloud_CDNReport_Notification
	16, // 15: steam.client.Cloud.ExternalStorageTransferReport:input_type -> steam.client.CCloud_ExternalStorageTransferReport_Notification
	17, // 16: steam.client.Cloud.ClientBeginFileUpload:input_type -> steam.client.CCloud_ClientBeginFileUpload_Request
	20, // 17: steam.client.Cloud.ClientCommitFileUpload:input_type -> steam.client.CCloud_ClientCommitFileUpload_Request
	22, // 18: steam.client.Cloud.ClientFileDownload:input_type -> steam.client.CCloud_ClientFileDownload_Request
	24, // 19: steam.client.Cloud.ClientDeleteFile:input_type -> steam.client.CCloud_ClientDeleteFile_Request
	26, // 20: steam.client.Cloud.ClientConflictResolution:input_type -> steam.client.CCloud_ClientConflictResolution_Notification
	27, // 21: steam.client.Cloud.EnumerateUserApps:input_type -> steam.client.CCloud_EnumerateUserApps_Request
	1,  // 22: steam.client.Cloud.GetUploadServerInfo:output_type -> steam.client.CCloud_GetUploadServerInfo_Response
	3,  // 23: steam.client.Cloud.BeginHTTPUpload:output_type -> steam.client.CCloud_BeginHTTPUpload_Response
	5,  // 24: steam.client.Cloud.CommitHTTPUpload:output_type -> steam.client.CCloud_CommitHTTPUpload_Response
	8,  // 25: steam.client.Cloud.GetFileDetails:output_type -> steam.client.CCloud_GetFileDetails_Response
	10, // 26: steam.client.Cloud.EnumerateUserFiles:output_type -> steam.client.CCloud_EnumerateUserFiles_Response
	12, // 27: steam.client.Cloud.Delete:output_type -> steam.client.CCloud_Delete_Response
	14, // 28: steam.client.Cloud.GetClientEncryptionKey:output_type -> steam.client.CCloud_GetClientEncryptionKey_Response
	33, // 29: steam.client.Cloud.CDNReport:output_type -> steam.client.NoResponse
	33, // 30: steam.client.Cloud.ExternalStorageTransferReport:output_type -> steam.client.NoResponse
	19, // 31: steam.client.Cloud.ClientBeginFileUpload:output_type -> steam.client.CCloud_ClientBeginFileUpload_Response
	21, // 32: steam.client.Cloud.ClientCommitFileUpload:output_type -> steam.client.CCloud_ClientCommitFileUpload_Response
	23, // 33: steam.client.Cloud.ClientFileDownload:output_type -> steam.client.CCloud_ClientFileDownload_Response
	25, // 34: steam.client.Cloud.ClientDeleteFile:output_type -> steam.client.CCloud_ClientDeleteFile_Response
	33, // 35: steam.client.Cloud.ClientConflictResolution:output_type -> steam.client.NoResponse
	28, // 36: steam.client.Cloud.EnumerateUserApps:output_type -> steam.client.CCloud_EnumerateUserApps_Response
	22, // [22:37] is the sub-list for method output_type
	7,  // [7:22] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_cloud_steamclient_proto_init() }
func file_steam_client_steammessages_cloud_steamclient_proto_init() {
	if File_steam_client_steammessages_cloud_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetUploadServerInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetUploadServerInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_BeginHTTPUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_BeginHTTPUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_CommitHTTPUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_CommitHTTPUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetFileDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_UserFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetFileDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_EnumerateUserFiles_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_EnumerateUserFiles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_Delete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_Delete_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetClientEncryptionKey_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_GetClientEncryptionKey_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_CDNReport_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ExternalStorageTransferReport_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientBeginFileUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCloudFileUploadBlockDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientBeginFileUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientCommitFileUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientCommitFileUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientFileDownload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientFileDownload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientDeleteFile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientDeleteFile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientConflictResolution_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_EnumerateUserApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_EnumerateUserApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_BeginHTTPUpload_Response_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCloudFileUploadBlockDetails_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_ClientFileDownload_Response_HTTPHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_cloud_steamclient_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_EnumerateUserApps_Response_Apps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_cloud_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_cloud_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_cloud_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_cloud_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_cloud_steamclient_proto = out.File
	file_steam_client_steammessages_cloud_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_cloud_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_cloud_steamclient_proto_depIdxs = nil
}
