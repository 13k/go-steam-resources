// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_qms.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGameSearchAction int32

const (
	EGameSearchAction_k_EGameSearchAction_None    EGameSearchAction = 0
	EGameSearchAction_k_EGameSearchAction_Accept  EGameSearchAction = 1
	EGameSearchAction_k_EGameSearchAction_Decline EGameSearchAction = 2
	EGameSearchAction_k_EGameSearchAction_Cancel  EGameSearchAction = 3
)

// Enum value maps for EGameSearchAction.
var (
	EGameSearchAction_name = map[int32]string{
		0: "k_EGameSearchAction_None",
		1: "k_EGameSearchAction_Accept",
		2: "k_EGameSearchAction_Decline",
		3: "k_EGameSearchAction_Cancel",
	}
	EGameSearchAction_value = map[string]int32{
		"k_EGameSearchAction_None":    0,
		"k_EGameSearchAction_Accept":  1,
		"k_EGameSearchAction_Decline": 2,
		"k_EGameSearchAction_Cancel":  3,
	}
)

func (x EGameSearchAction) Enum() *EGameSearchAction {
	p := new(EGameSearchAction)
	*p = x
	return p
}

func (x EGameSearchAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameSearchAction) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_qms_steamclient_proto_enumTypes[0].Descriptor()
}

func (EGameSearchAction) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_qms_steamclient_proto_enumTypes[0]
}

func (x EGameSearchAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameSearchAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameSearchAction(num)
	return nil
}

// Deprecated: Use EGameSearchAction.Descriptor instead.
func (EGameSearchAction) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{0}
}

type EGameSearchResult int32

const (
	EGameSearchResult_k_EGameSearchResult_Invalid                EGameSearchResult = 0
	EGameSearchResult_k_EGameSearchResult_SearchInProgress       EGameSearchResult = 1
	EGameSearchResult_k_EGameSearchResult_SearchFailedNoHosts    EGameSearchResult = 2
	EGameSearchResult_k_EGameSearchResult_SearchGameFound        EGameSearchResult = 3
	EGameSearchResult_k_EGameSearchResult_SearchCompleteAccepted EGameSearchResult = 4
	EGameSearchResult_k_EGameSearchResult_SearchCompleteDeclined EGameSearchResult = 5
	EGameSearchResult_k_EGameSearchResult_SearchCanceled         EGameSearchResult = 6
)

// Enum value maps for EGameSearchResult.
var (
	EGameSearchResult_name = map[int32]string{
		0: "k_EGameSearchResult_Invalid",
		1: "k_EGameSearchResult_SearchInProgress",
		2: "k_EGameSearchResult_SearchFailedNoHosts",
		3: "k_EGameSearchResult_SearchGameFound",
		4: "k_EGameSearchResult_SearchCompleteAccepted",
		5: "k_EGameSearchResult_SearchCompleteDeclined",
		6: "k_EGameSearchResult_SearchCanceled",
	}
	EGameSearchResult_value = map[string]int32{
		"k_EGameSearchResult_Invalid":                0,
		"k_EGameSearchResult_SearchInProgress":       1,
		"k_EGameSearchResult_SearchFailedNoHosts":    2,
		"k_EGameSearchResult_SearchGameFound":        3,
		"k_EGameSearchResult_SearchCompleteAccepted": 4,
		"k_EGameSearchResult_SearchCompleteDeclined": 5,
		"k_EGameSearchResult_SearchCanceled":         6,
	}
)

func (x EGameSearchResult) Enum() *EGameSearchResult {
	p := new(EGameSearchResult)
	*p = x
	return p
}

func (x EGameSearchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameSearchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_qms_steamclient_proto_enumTypes[1].Descriptor()
}

func (EGameSearchResult) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_qms_steamclient_proto_enumTypes[1]
}

func (x EGameSearchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameSearchResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameSearchResult(num)
	return nil
}

// Deprecated: Use EGameSearchResult.Descriptor instead.
func (EGameSearchResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{1}
}

type GameSearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName *string  `protobuf:"bytes,1,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	Value   []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (x *GameSearchParam) Reset() {
	*x = GameSearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSearchParam) ProtoMessage() {}

func (x *GameSearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSearchParam.ProtoReflect.Descriptor instead.
func (*GameSearchParam) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *GameSearchParam) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *GameSearchParam) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type CQueuedMatchmaking_SearchForGame_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32            `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Action       *EGameSearchAction `protobuf:"varint,2,opt,name=action,enum=steam.client.EGameSearchAction,def=0" json:"action,omitempty"`
	Params       []*GameSearchParam `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	PlayerMin    *uint32            `protobuf:"varint,4,opt,name=player_min,json=playerMin" json:"player_min,omitempty"`
	PlayerMax    *uint32            `protobuf:"varint,5,opt,name=player_max,json=playerMax" json:"player_max,omitempty"`
	Steamidlobby *uint64            `protobuf:"fixed64,6,opt,name=steamidlobby" json:"steamidlobby,omitempty"`
	Searchid     *uint64            `protobuf:"varint,7,opt,name=searchid" json:"searchid,omitempty"`
}

// Default values for CQueuedMatchmaking_SearchForGame_Request fields.
const (
	Default_CQueuedMatchmaking_SearchForGame_Request_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *CQueuedMatchmaking_SearchForGame_Request) Reset() {
	*x = CQueuedMatchmaking_SearchForGame_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmaking_SearchForGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmaking_SearchForGame_Request) ProtoMessage() {}

func (x *CQueuedMatchmaking_SearchForGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmaking_SearchForGame_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmaking_SearchForGame_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CQueuedMatchmaking_SearchForGame_Request_Action
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetPlayerMin() uint32 {
	if x != nil && x.PlayerMin != nil {
		return *x.PlayerMin
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetPlayerMax() uint32 {
	if x != nil && x.PlayerMax != nil {
		return *x.PlayerMax
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetSteamidlobby() uint64 {
	if x != nil && x.Steamidlobby != nil {
		return *x.Steamidlobby
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

type CQueuedMatchmaking_SearchForGame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamesearchresult      *EGameSearchResult `protobuf:"varint,1,opt,name=gamesearchresult,enum=steam.client.EGameSearchResult,def=0" json:"gamesearchresult,omitempty"`
	Searchid              *uint64            `protobuf:"varint,2,opt,name=searchid" json:"searchid,omitempty"`
	SecondsTimeEstimate   *uint32            `protobuf:"varint,3,opt,name=seconds_time_estimate,json=secondsTimeEstimate" json:"seconds_time_estimate,omitempty"`
	PollFrequency         *uint32            `protobuf:"varint,4,opt,name=poll_frequency,json=pollFrequency" json:"poll_frequency,omitempty"`
	CountSearching        *uint32            `protobuf:"varint,5,opt,name=count_searching,json=countSearching" json:"count_searching,omitempty"`
	PlayersInMatch        *uint32            `protobuf:"varint,6,opt,name=players_in_match,json=playersInMatch" json:"players_in_match,omitempty"`
	PlayersAccepted       *uint32            `protobuf:"varint,7,opt,name=players_accepted,json=playersAccepted" json:"players_accepted,omitempty"`
	ConnectString         *string            `protobuf:"bytes,9,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
	Steamidhost           *uint64            `protobuf:"fixed64,10,opt,name=steamidhost" json:"steamidhost,omitempty"`
	RtimeMatchMade        *uint32            `protobuf:"varint,11,opt,name=rtime_match_made,json=rtimeMatchMade" json:"rtime_match_made,omitempty"`
	RtimeNow              *uint32            `protobuf:"varint,12,opt,name=rtime_now,json=rtimeNow" json:"rtime_now,omitempty"`
	SteamidCanceledSearch *uint64            `protobuf:"fixed64,13,opt,name=steamid_canceled_search,json=steamidCanceledSearch" json:"steamid_canceled_search,omitempty"`
}

// Default values for CQueuedMatchmaking_SearchForGame_Response fields.
const (
	Default_CQueuedMatchmaking_SearchForGame_Response_Gamesearchresult = EGameSearchResult_k_EGameSearchResult_Invalid
)

func (x *CQueuedMatchmaking_SearchForGame_Response) Reset() {
	*x = CQueuedMatchmaking_SearchForGame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmaking_SearchForGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmaking_SearchForGame_Response) ProtoMessage() {}

func (x *CQueuedMatchmaking_SearchForGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmaking_SearchForGame_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmaking_SearchForGame_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetGamesearchresult() EGameSearchResult {
	if x != nil && x.Gamesearchresult != nil {
		return *x.Gamesearchresult
	}
	return Default_CQueuedMatchmaking_SearchForGame_Response_Gamesearchresult
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSecondsTimeEstimate() uint32 {
	if x != nil && x.SecondsTimeEstimate != nil {
		return *x.SecondsTimeEstimate
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPollFrequency() uint32 {
	if x != nil && x.PollFrequency != nil {
		return *x.PollFrequency
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetCountSearching() uint32 {
	if x != nil && x.CountSearching != nil {
		return *x.CountSearching
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPlayersInMatch() uint32 {
	if x != nil && x.PlayersInMatch != nil {
		return *x.PlayersInMatch
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPlayersAccepted() uint32 {
	if x != nil && x.PlayersAccepted != nil {
		return *x.PlayersAccepted
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSteamidhost() uint64 {
	if x != nil && x.Steamidhost != nil {
		return *x.Steamidhost
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetRtimeMatchMade() uint32 {
	if x != nil && x.RtimeMatchMade != nil {
		return *x.RtimeMatchMade
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetRtimeNow() uint32 {
	if x != nil && x.RtimeNow != nil {
		return *x.RtimeNow
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSteamidCanceledSearch() uint64 {
	if x != nil && x.SteamidCanceledSearch != nil {
		return *x.SteamidCanceledSearch
	}
	return 0
}

type CQueuedMatchmakingGameHost_SearchForPlayers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid             *uint32            `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Action            *EGameSearchAction `protobuf:"varint,2,opt,name=action,enum=steam.client.EGameSearchAction,def=0" json:"action,omitempty"`
	Params            []*GameSearchParam `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	PlayerMin         *uint32            `protobuf:"varint,4,opt,name=player_min,json=playerMin" json:"player_min,omitempty"`
	PlayerMax         *uint32            `protobuf:"varint,5,opt,name=player_max,json=playerMax" json:"player_max,omitempty"`
	PlayerMaxTeamSize *uint32            `protobuf:"varint,6,opt,name=player_max_team_size,json=playerMaxTeamSize" json:"player_max_team_size,omitempty"`
	ConnectionString  *string            `protobuf:"bytes,7,opt,name=connection_string,json=connectionString" json:"connection_string,omitempty"`
	Searchid          *uint64            `protobuf:"varint,8,opt,name=searchid" json:"searchid,omitempty"`
}

// Default values for CQueuedMatchmakingGameHost_SearchForPlayers_Request fields.
const (
	Default_CQueuedMatchmakingGameHost_SearchForPlayers_Request_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_SearchForPlayers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SearchForPlayers_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SearchForPlayers_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SearchForPlayers_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CQueuedMatchmakingGameHost_SearchForPlayers_Request_Action
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMin() uint32 {
	if x != nil && x.PlayerMin != nil {
		return *x.PlayerMin
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMax() uint32 {
	if x != nil && x.PlayerMax != nil {
		return *x.PlayerMax
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMaxTeamSize() uint32 {
	if x != nil && x.PlayerMaxTeamSize != nil {
		return *x.PlayerMaxTeamSize
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetConnectionString() string {
	if x != nil && x.ConnectionString != nil {
		return *x.ConnectionString
	}
	return ""
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

type PlayerFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64            `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Action     *EGameSearchAction `protobuf:"varint,2,opt,name=action,enum=steam.client.EGameSearchAction,def=0" json:"action,omitempty"`
	Params     []*GameSearchParam `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	TeamNumber *uint32            `protobuf:"varint,4,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
}

// Default values for PlayerFound fields.
const (
	Default_PlayerFound_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *PlayerFound) Reset() {
	*x = PlayerFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFound) ProtoMessage() {}

func (x *PlayerFound) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFound.ProtoReflect.Descriptor instead.
func (*PlayerFound) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerFound) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *PlayerFound) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_PlayerFound_Action
}

func (x *PlayerFound) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PlayerFound) GetTeamNumber() uint32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

type CQueuedMatchmakingGameHost_SearchForPlayers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamesearchresult *EGameSearchResult `protobuf:"varint,1,opt,name=gamesearchresult,enum=steam.client.EGameSearchResult,def=0" json:"gamesearchresult,omitempty"`
	Searchid         *uint64            `protobuf:"varint,2,opt,name=searchid" json:"searchid,omitempty"`
	PollFrequency    *uint32            `protobuf:"varint,3,opt,name=poll_frequency,json=pollFrequency" json:"poll_frequency,omitempty"`
	Matchid          *uint64            `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
	Players          []*PlayerFound     `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	RtimeMatchMade   *uint32            `protobuf:"varint,6,opt,name=rtime_match_made,json=rtimeMatchMade" json:"rtime_match_made,omitempty"`
	RtimeNow         *uint32            `protobuf:"varint,7,opt,name=rtime_now,json=rtimeNow" json:"rtime_now,omitempty"`
}

// Default values for CQueuedMatchmakingGameHost_SearchForPlayers_Response fields.
const (
	Default_CQueuedMatchmakingGameHost_SearchForPlayers_Response_Gamesearchresult = EGameSearchResult_k_EGameSearchResult_Invalid
)

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_SearchForPlayers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SearchForPlayers_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SearchForPlayers_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SearchForPlayers_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetGamesearchresult() EGameSearchResult {
	if x != nil && x.Gamesearchresult != nil {
		return *x.Gamesearchresult
	}
	return Default_CQueuedMatchmakingGameHost_SearchForPlayers_Response_Gamesearchresult
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetPollFrequency() uint32 {
	if x != nil && x.PollFrequency != nil {
		return *x.PollFrequency
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetPlayers() []*PlayerFound {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetRtimeMatchMade() uint32 {
	if x != nil && x.RtimeMatchMade != nil {
		return *x.RtimeMatchMade
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetRtimeNow() uint32 {
	if x != nil && x.RtimeNow != nil {
		return *x.RtimeNow
	}
	return 0
}

type PlayerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Value   *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerResult) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *PlayerResult) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CQueuedMatchmakingGameHost_SubmitPlayerResult_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32         `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Matchid       *uint64         `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	PlayerResults []*PlayerResult `protobuf:"bytes,3,rep,name=player_results,json=playerResults" json:"player_results,omitempty"`
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_SubmitPlayerResult_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetPlayerResults() []*PlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

type CQueuedMatchmakingGameHost_SubmitPlayerResult_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_SubmitPlayerResult_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SubmitPlayerResult_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{8}
}

type CQueuedMatchmakingGameHost_EndGame_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Matchid *uint64 `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_EndGame_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_EndGame_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_EndGame_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_EndGame_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

type CQueuedMatchmakingGameHost_EndGame_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_EndGame_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_EndGame_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_qms_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_EndGame_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_EndGame_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{10}
}

var File_steam_client_steammessages_qms_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_qms_steamclient_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x71, 0x6d, 0x73,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc8, 0x02, 0x0a, 0x28, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x22, 0xd2, 0x04, 0x0a, 0x29, 0x43,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
	0x8d, 0x03, 0x0a, 0x33, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x51, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x18,
	0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x22,
	0xd2, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xf9, 0x02, 0x0a, 0x34, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6f, 0x6c,
	0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77,
	0x22, 0x3e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x35, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x38, 0x0a,
	0x36, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x2a, 0x43, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x92, 0x01, 0x0a, 0x11, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x03, 0x2a, 0xbc, 0x02, 0x0a, 0x11, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x32, 0xcd, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x97,
	0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0xba, 0x04, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x43, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xb5, 0x18, 0x12,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x1a, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x3e, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_qms_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_qms_steamclient_proto_rawDescData = file_steam_client_steammessages_qms_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_qms_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_qms_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_qms_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_qms_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_qms_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_qms_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steam_client_steammessages_qms_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_steam_client_steammessages_qms_steamclient_proto_goTypes = []interface{}{
	(EGameSearchAction)(0),                                         // 0: steam.client.EGameSearchAction
	(EGameSearchResult)(0),                                         // 1: steam.client.EGameSearchResult
	(*GameSearchParam)(nil),                                        // 2: steam.client.GameSearchParam
	(*CQueuedMatchmaking_SearchForGame_Request)(nil),               // 3: steam.client.CQueuedMatchmaking_SearchForGame_Request
	(*CQueuedMatchmaking_SearchForGame_Response)(nil),              // 4: steam.client.CQueuedMatchmaking_SearchForGame_Response
	(*CQueuedMatchmakingGameHost_SearchForPlayers_Request)(nil),    // 5: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Request
	(*PlayerFound)(nil),                                            // 6: steam.client.PlayerFound
	(*CQueuedMatchmakingGameHost_SearchForPlayers_Response)(nil),   // 7: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Response
	(*PlayerResult)(nil),                                           // 8: steam.client.PlayerResult
	(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)(nil),  // 9: steam.client.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request
	(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)(nil), // 10: steam.client.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response
	(*CQueuedMatchmakingGameHost_EndGame_Request)(nil),             // 11: steam.client.CQueuedMatchmakingGameHost_EndGame_Request
	(*CQueuedMatchmakingGameHost_EndGame_Response)(nil),            // 12: steam.client.CQueuedMatchmakingGameHost_EndGame_Response
}
var file_steam_client_steammessages_qms_steamclient_proto_depIdxs = []int32{
	0,  // 0: steam.client.CQueuedMatchmaking_SearchForGame_Request.action:type_name -> steam.client.EGameSearchAction
	2,  // 1: steam.client.CQueuedMatchmaking_SearchForGame_Request.params:type_name -> steam.client.GameSearchParam
	1,  // 2: steam.client.CQueuedMatchmaking_SearchForGame_Response.gamesearchresult:type_name -> steam.client.EGameSearchResult
	0,  // 3: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Request.action:type_name -> steam.client.EGameSearchAction
	2,  // 4: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Request.params:type_name -> steam.client.GameSearchParam
	0,  // 5: steam.client.PlayerFound.action:type_name -> steam.client.EGameSearchAction
	2,  // 6: steam.client.PlayerFound.params:type_name -> steam.client.GameSearchParam
	1,  // 7: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Response.gamesearchresult:type_name -> steam.client.EGameSearchResult
	6,  // 8: steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Response.players:type_name -> steam.client.PlayerFound
	8,  // 9: steam.client.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results:type_name -> steam.client.PlayerResult
	3,  // 10: steam.client.QueuedMatchmaking.SearchForGame:input_type -> steam.client.CQueuedMatchmaking_SearchForGame_Request
	5,  // 11: steam.client.QueuedMatchmakingGameHost.SearchForPlayers:input_type -> steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Request
	9,  // 12: steam.client.QueuedMatchmakingGameHost.SubmitPlayerResult:input_type -> steam.client.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request
	11, // 13: steam.client.QueuedMatchmakingGameHost.EndGame:input_type -> steam.client.CQueuedMatchmakingGameHost_EndGame_Request
	4,  // 14: steam.client.QueuedMatchmaking.SearchForGame:output_type -> steam.client.CQueuedMatchmaking_SearchForGame_Response
	7,  // 15: steam.client.QueuedMatchmakingGameHost.SearchForPlayers:output_type -> steam.client.CQueuedMatchmakingGameHost_SearchForPlayers_Response
	10, // 16: steam.client.QueuedMatchmakingGameHost.SubmitPlayerResult:output_type -> steam.client.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response
	12, // 17: steam.client.QueuedMatchmakingGameHost.EndGame:output_type -> steam.client.CQueuedMatchmakingGameHost_EndGame_Response
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_qms_steamclient_proto_init() }
func file_steam_client_steammessages_qms_steamclient_proto_init() {
	if File_steam_client_steammessages_qms_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmaking_SearchForGame_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmaking_SearchForGame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_SearchForPlayers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_SearchForPlayers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_EndGame_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_qms_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQueuedMatchmakingGameHost_EndGame_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_qms_steamclient_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_qms_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_qms_steamclient_proto_depIdxs,
		EnumInfos:         file_steam_client_steammessages_qms_steamclient_proto_enumTypes,
		MessageInfos:      file_steam_client_steammessages_qms_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_qms_steamclient_proto = out.File
	file_steam_client_steammessages_qms_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_qms_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_qms_steamclient_proto_depIdxs = nil
}
