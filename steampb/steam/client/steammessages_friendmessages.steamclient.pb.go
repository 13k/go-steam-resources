// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_friendmessages.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CFriendMessages_GetRecentMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid1               *uint64 `protobuf:"fixed64,1,opt,name=steamid1" json:"steamid1,omitempty"`
	Steamid2               *uint64 `protobuf:"fixed64,2,opt,name=steamid2" json:"steamid2,omitempty"`
	Count                  *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	MostRecentConversation *bool   `protobuf:"varint,4,opt,name=most_recent_conversation,json=mostRecentConversation" json:"most_recent_conversation,omitempty"`
	Rtime32StartTime       *uint32 `protobuf:"fixed32,5,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	BbcodeFormat           *bool   `protobuf:"varint,6,opt,name=bbcode_format,json=bbcodeFormat" json:"bbcode_format,omitempty"`
	StartOrdinal           *uint32 `protobuf:"varint,7,opt,name=start_ordinal,json=startOrdinal" json:"start_ordinal,omitempty"`
	TimeLast               *uint32 `protobuf:"varint,8,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	OrdinalLast            *uint32 `protobuf:"varint,9,opt,name=ordinal_last,json=ordinalLast" json:"ordinal_last,omitempty"`
}

func (x *CFriendMessages_GetRecentMessages_Request) Reset() {
	*x = CFriendMessages_GetRecentMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_GetRecentMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Request) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CFriendMessages_GetRecentMessages_Request) GetSteamid1() uint64 {
	if x != nil && x.Steamid1 != nil {
		return *x.Steamid1
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetSteamid2() uint64 {
	if x != nil && x.Steamid2 != nil {
		return *x.Steamid2
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetMostRecentConversation() bool {
	if x != nil && x.MostRecentConversation != nil {
		return *x.MostRecentConversation
	}
	return false
}

func (x *CFriendMessages_GetRecentMessages_Request) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetBbcodeFormat() bool {
	if x != nil && x.BbcodeFormat != nil {
		return *x.BbcodeFormat
	}
	return false
}

func (x *CFriendMessages_GetRecentMessages_Request) GetStartOrdinal() uint32 {
	if x != nil && x.StartOrdinal != nil {
		return *x.StartOrdinal
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetTimeLast() uint32 {
	if x != nil && x.TimeLast != nil {
		return *x.TimeLast
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetOrdinalLast() uint32 {
	if x != nil && x.OrdinalLast != nil {
		return *x.OrdinalLast
	}
	return 0
}

type CFriendMessages_GetRecentMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*CFriendMessages_GetRecentMessages_Response_FriendMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	MoreAvailable *bool                                                       `protobuf:"varint,4,opt,name=more_available,json=moreAvailable" json:"more_available,omitempty"`
}

func (x *CFriendMessages_GetRecentMessages_Response) Reset() {
	*x = CFriendMessages_GetRecentMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_GetRecentMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Response) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CFriendMessages_GetRecentMessages_Response) GetMessages() []*CFriendMessages_GetRecentMessages_Response_FriendMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CFriendMessages_GetRecentMessages_Response) GetMoreAvailable() bool {
	if x != nil && x.MoreAvailable != nil {
		return *x.MoreAvailable
	}
	return false
}

type CFriendsMessages_GetActiveMessageSessions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastmessageSince         *uint32 `protobuf:"varint,1,opt,name=lastmessage_since,json=lastmessageSince" json:"lastmessage_since,omitempty"`
	OnlySessionsWithMessages *bool   `protobuf:"varint,2,opt,name=only_sessions_with_messages,json=onlySessionsWithMessages" json:"only_sessions_with_messages,omitempty"`
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Request) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Request.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) GetLastmessageSince() uint32 {
	if x != nil && x.LastmessageSince != nil {
		return *x.LastmessageSince
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) GetOnlySessionsWithMessages() bool {
	if x != nil && x.OnlySessionsWithMessages != nil {
		return *x.OnlySessionsWithMessages
	}
	return false
}

type CFriendsMessages_GetActiveMessageSessions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSessions []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession `protobuf:"bytes,1,rep,name=message_sessions,json=messageSessions" json:"message_sessions,omitempty"`
	Timestamp       *uint32                                                                    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Response) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Response.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) GetMessageSessions() []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	if x != nil {
		return x.MessageSessions
	}
	return nil
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CFriendMessages_SendMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ChatEntryType   *int32  `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	Message         *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ContainsBbcode  *bool   `protobuf:"varint,4,opt,name=contains_bbcode,json=containsBbcode" json:"contains_bbcode,omitempty"`
	EchoToSender    *bool   `protobuf:"varint,5,opt,name=echo_to_sender,json=echoToSender" json:"echo_to_sender,omitempty"`
	LowPriority     *bool   `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ClientMessageId *string `protobuf:"bytes,8,opt,name=client_message_id,json=clientMessageId" json:"client_message_id,omitempty"`
}

func (x *CFriendMessages_SendMessage_Request) Reset() {
	*x = CFriendMessages_SendMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_SendMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_SendMessage_Request) ProtoMessage() {}

func (x *CFriendMessages_SendMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_SendMessage_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_SendMessage_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CFriendMessages_SendMessage_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Request) GetChatEntryType() int32 {
	if x != nil && x.ChatEntryType != nil {
		return *x.ChatEntryType
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Request) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_SendMessage_Request) GetContainsBbcode() bool {
	if x != nil && x.ContainsBbcode != nil {
		return *x.ContainsBbcode
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetEchoToSender() bool {
	if x != nil && x.EchoToSender != nil {
		return *x.EchoToSender
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetClientMessageId() string {
	if x != nil && x.ClientMessageId != nil {
		return *x.ClientMessageId
	}
	return ""
}

type CFriendMessages_SendMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedMessage      *string `protobuf:"bytes,1,opt,name=modified_message,json=modifiedMessage" json:"modified_message,omitempty"`
	ServerTimestamp      *uint32 `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal              *uint32 `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	MessageWithoutBbCode *string `protobuf:"bytes,4,opt,name=message_without_bb_code,json=messageWithoutBbCode" json:"message_without_bb_code,omitempty"`
}

func (x *CFriendMessages_SendMessage_Response) Reset() {
	*x = CFriendMessages_SendMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_SendMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_SendMessage_Response) ProtoMessage() {}

func (x *CFriendMessages_SendMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_SendMessage_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_SendMessage_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CFriendMessages_SendMessage_Response) GetModifiedMessage() string {
	if x != nil && x.ModifiedMessage != nil {
		return *x.ModifiedMessage
	}
	return ""
}

func (x *CFriendMessages_SendMessage_Response) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Response) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Response) GetMessageWithoutBbCode() string {
	if x != nil && x.MessageWithoutBbCode != nil {
		return *x.MessageWithoutBbCode
	}
	return ""
}

type CFriendMessages_AckMessage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner *uint64 `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	Timestamp      *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CFriendMessages_AckMessage_Notification) Reset() {
	*x = CFriendMessages_AckMessage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_AckMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_AckMessage_Notification) ProtoMessage() {}

func (x *CFriendMessages_AckMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_AckMessage_Notification.ProtoReflect.Descriptor instead.
func (*CFriendMessages_AckMessage_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CFriendMessages_AckMessage_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CFriendMessages_AckMessage_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CFriendMessages_IsInFriendsUIBeta_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) Reset() {
	*x = CFriendMessages_IsInFriendsUIBeta_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IsInFriendsUIBeta_Request) ProtoMessage() {}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IsInFriendsUIBeta_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IsInFriendsUIBeta_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFriendMessages_IsInFriendsUIBeta_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineInFriendsui *bool `protobuf:"varint,1,opt,name=online_in_friendsui,json=onlineInFriendsui" json:"online_in_friendsui,omitempty"`
	HasUsedFriendsui  *bool `protobuf:"varint,2,opt,name=has_used_friendsui,json=hasUsedFriendsui" json:"has_used_friendsui,omitempty"`
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) Reset() {
	*x = CFriendMessages_IsInFriendsUIBeta_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IsInFriendsUIBeta_Response) ProtoMessage() {}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IsInFriendsUIBeta_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IsInFriendsUIBeta_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) GetOnlineInFriendsui() bool {
	if x != nil && x.OnlineInFriendsui != nil {
		return *x.OnlineInFriendsui
	}
	return false
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) GetHasUsedFriendsui() bool {
	if x != nil && x.HasUsedFriendsui != nil {
		return *x.HasUsedFriendsui
	}
	return false
}

type CFriendMessages_IncomingMessage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidFriend          *uint64 `protobuf:"fixed64,1,opt,name=steamid_friend,json=steamidFriend" json:"steamid_friend,omitempty"`
	ChatEntryType          *int32  `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	FromLimitedAccount     *bool   `protobuf:"varint,3,opt,name=from_limited_account,json=fromLimitedAccount" json:"from_limited_account,omitempty"`
	Message                *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Rtime32ServerTimestamp *uint32 `protobuf:"fixed32,5,opt,name=rtime32_server_timestamp,json=rtime32ServerTimestamp" json:"rtime32_server_timestamp,omitempty"`
	Ordinal                *uint32 `protobuf:"varint,6,opt,name=ordinal" json:"ordinal,omitempty"`
	LocalEcho              *bool   `protobuf:"varint,7,opt,name=local_echo,json=localEcho" json:"local_echo,omitempty"`
	MessageNoBbcode        *string `protobuf:"bytes,8,opt,name=message_no_bbcode,json=messageNoBbcode" json:"message_no_bbcode,omitempty"`
	LowPriority            *bool   `protobuf:"varint,9,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
}

func (x *CFriendMessages_IncomingMessage_Notification) Reset() {
	*x = CFriendMessages_IncomingMessage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_IncomingMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IncomingMessage_Notification) ProtoMessage() {}

func (x *CFriendMessages_IncomingMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IncomingMessage_Notification.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IncomingMessage_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CFriendMessages_IncomingMessage_Notification) GetSteamidFriend() uint64 {
	if x != nil && x.SteamidFriend != nil {
		return *x.SteamidFriend
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetChatEntryType() int32 {
	if x != nil && x.ChatEntryType != nil {
		return *x.ChatEntryType
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetFromLimitedAccount() bool {
	if x != nil && x.FromLimitedAccount != nil {
		return *x.FromLimitedAccount
	}
	return false
}

func (x *CFriendMessages_IncomingMessage_Notification) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_IncomingMessage_Notification) GetRtime32ServerTimestamp() uint32 {
	if x != nil && x.Rtime32ServerTimestamp != nil {
		return *x.Rtime32ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetLocalEcho() bool {
	if x != nil && x.LocalEcho != nil {
		return *x.LocalEcho
	}
	return false
}

func (x *CFriendMessages_IncomingMessage_Notification) GetMessageNoBbcode() string {
	if x != nil && x.MessageNoBbcode != nil {
		return *x.MessageNoBbcode
	}
	return ""
}

func (x *CFriendMessages_IncomingMessage_Notification) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

type CFriendMessages_GetRecentMessages_Response_FriendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message   *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Ordinal   *uint32 `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) Reset() {
	*x = CFriendMessages_GetRecentMessages_Response_FriendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Response_FriendMessage.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountidFriend    *uint32 `protobuf:"varint,1,opt,name=accountid_friend,json=accountidFriend" json:"accountid_friend,omitempty"`
	LastMessage        *uint32 `protobuf:"varint,2,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	LastView           *uint32 `protobuf:"varint,3,opt,name=last_view,json=lastView" json:"last_view,omitempty"`
	UnreadMessageCount *uint32 `protobuf:"varint,4,opt,name=unread_message_count,json=unreadMessageCount" json:"unread_message_count,omitempty"`
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetAccountidFriend() uint32 {
	if x != nil && x.AccountidFriend != nil {
		return *x.AccountidFriend
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastMessage() uint32 {
	if x != nil && x.LastMessage != nil {
		return *x.LastMessage
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastView() uint32 {
	if x != nil && x.LastView != nil {
		return *x.LastView
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetUnreadMessageCount() uint32 {
	if x != nil && x.UnreadMessageCount != nil {
		return *x.UnreadMessageCount
	}
	return 0
}

var File_steam_client_steammessages_friendmessages_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_friendmessages_steamclient_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x06, 0x0a, 0x29, 0x43, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x32, 0x12, 0x53, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3d, 0x82, 0xb5, 0x18,
	0x39, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x63, 0x61,
	0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x51, 0x82, 0xb5, 0x18, 0x4d, 0x47, 0x72, 0x61, 0x62, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x61, 0x74,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x28, 0x61, 0x20, 0x7e, 0x35, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x20,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x29, 0x52, 0x16, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xbb, 0x01, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x42, 0x8c, 0x01, 0x82,
	0xb5, 0x18, 0x87, 0x01, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a, 0x65, 0x72, 0x6f, 0x2c,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x72,
	0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x2e, 0x52, 0x10, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x33, 0x32, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x0d, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x0c, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6d, 0x82, 0xb5, 0x18, 0x69,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x28, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x73,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x61, 0x6d,
	0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x29, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36,
	0x69, 0x66, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x6f, 0x6e, 0x2d, 0x7a,
	0x65, 0x72, 0x6f, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x73, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x2a, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x31, 0x82,
	0xb5, 0x18, 0x2d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6e,
	0x65, 0x77, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0x7f, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x22, 0x8c, 0x03, 0x0a, 0x31, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x64, 0x82, 0xb5, 0x18, 0x60, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x68,
	0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x28, 0x66, 0x6f,
	0x72, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x29, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0xc2, 0x01, 0x0a,
	0x1b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x82, 0x01, 0x82, 0xb5, 0x18, 0x7e, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
	0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x75, 0x72, 0x20,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x18, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0xe3, 0x03, 0x0a, 0x32, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x74, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x56,
	0x82, 0xb5, 0x18, 0x52, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x62, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x73,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x1a, 0xb3, 0x01, 0x0a, 0x14, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x23, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x62,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x63,
	0x68, 0x6f, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x24, 0x43, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x42, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x27, 0x43, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x45, 0x0a, 0x29, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49,
	0x73, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x55, 0x49, 0x42, 0x65, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x2a, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x55, 0x49, 0x42, 0x65, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x75,
	0x69, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x75, 0x69, 0x22,
	0x8b, 0x03, 0x0a, 0x2c, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66,
	0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x16, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x62, 0x62, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x42, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x8f, 0x08,
	0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0xbf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x47,
	0x65, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12,
	0x99, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x53, 0x65, 0x6e, 0x64,
	0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x0a,
	0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xb5, 0x18,
	0x43, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x55, 0x49, 0x42, 0x65, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x55, 0x49, 0x42, 0x65, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x49, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x55, 0x49,
	0x42, 0x65, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82,
	0xb5, 0x18, 0x29, 0x53, 0x65, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x75, 0x69, 0x20, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x1a, 0x61, 0x82, 0xb5,
	0x18, 0x5d, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x20, 0x28, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x29, 0x32,
	0xd5, 0x02, 0x0a, 0x14, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x4e, 0x65, 0x77, 0x20, 0x63, 0x68, 0x61, 0x74,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x63, 0x68, 0x6f,
	0x12, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x41, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x74,
	0x6f, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x1a, 0x04, 0xc0, 0xb5, 0x18, 0x02, 0x42, 0x3b, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescData = file_steam_client_steammessages_friendmessages_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_friendmessages_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_steam_client_steammessages_friendmessages_steamclient_proto_goTypes = []interface{}{
	(*CFriendMessages_GetRecentMessages_Request)(nil),                               // 0: steam.client.CFriendMessages_GetRecentMessages_Request
	(*CFriendMessages_GetRecentMessages_Response)(nil),                              // 1: steam.client.CFriendMessages_GetRecentMessages_Response
	(*CFriendsMessages_GetActiveMessageSessions_Request)(nil),                       // 2: steam.client.CFriendsMessages_GetActiveMessageSessions_Request
	(*CFriendsMessages_GetActiveMessageSessions_Response)(nil),                      // 3: steam.client.CFriendsMessages_GetActiveMessageSessions_Response
	(*CFriendMessages_SendMessage_Request)(nil),                                     // 4: steam.client.CFriendMessages_SendMessage_Request
	(*CFriendMessages_SendMessage_Response)(nil),                                    // 5: steam.client.CFriendMessages_SendMessage_Response
	(*CFriendMessages_AckMessage_Notification)(nil),                                 // 6: steam.client.CFriendMessages_AckMessage_Notification
	(*CFriendMessages_IsInFriendsUIBeta_Request)(nil),                               // 7: steam.client.CFriendMessages_IsInFriendsUIBeta_Request
	(*CFriendMessages_IsInFriendsUIBeta_Response)(nil),                              // 8: steam.client.CFriendMessages_IsInFriendsUIBeta_Response
	(*CFriendMessages_IncomingMessage_Notification)(nil),                            // 9: steam.client.CFriendMessages_IncomingMessage_Notification
	(*CFriendMessages_GetRecentMessages_Response_FriendMessage)(nil),                // 10: steam.client.CFriendMessages_GetRecentMessages_Response.FriendMessage
	(*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession)(nil), // 11: steam.client.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession
	(*NoResponse)(nil), // 12: steam.client.NoResponse
}
var file_steam_client_steammessages_friendmessages_steamclient_proto_depIdxs = []int32{
	10, // 0: steam.client.CFriendMessages_GetRecentMessages_Response.messages:type_name -> steam.client.CFriendMessages_GetRecentMessages_Response.FriendMessage
	11, // 1: steam.client.CFriendsMessages_GetActiveMessageSessions_Response.message_sessions:type_name -> steam.client.CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession
	0,  // 2: steam.client.FriendMessages.GetRecentMessages:input_type -> steam.client.CFriendMessages_GetRecentMessages_Request
	2,  // 3: steam.client.FriendMessages.GetActiveMessageSessions:input_type -> steam.client.CFriendsMessages_GetActiveMessageSessions_Request
	4,  // 4: steam.client.FriendMessages.SendMessage:input_type -> steam.client.CFriendMessages_SendMessage_Request
	6,  // 5: steam.client.FriendMessages.AckMessage:input_type -> steam.client.CFriendMessages_AckMessage_Notification
	7,  // 6: steam.client.FriendMessages.IsInFriendsUIBeta:input_type -> steam.client.CFriendMessages_IsInFriendsUIBeta_Request
	9,  // 7: steam.client.FriendMessagesClient.IncomingMessage:input_type -> steam.client.CFriendMessages_IncomingMessage_Notification
	6,  // 8: steam.client.FriendMessagesClient.NotifyAckMessageEcho:input_type -> steam.client.CFriendMessages_AckMessage_Notification
	1,  // 9: steam.client.FriendMessages.GetRecentMessages:output_type -> steam.client.CFriendMessages_GetRecentMessages_Response
	3,  // 10: steam.client.FriendMessages.GetActiveMessageSessions:output_type -> steam.client.CFriendsMessages_GetActiveMessageSessions_Response
	5,  // 11: steam.client.FriendMessages.SendMessage:output_type -> steam.client.CFriendMessages_SendMessage_Response
	12, // 12: steam.client.FriendMessages.AckMessage:output_type -> steam.client.NoResponse
	8,  // 13: steam.client.FriendMessages.IsInFriendsUIBeta:output_type -> steam.client.CFriendMessages_IsInFriendsUIBeta_Response
	12, // 14: steam.client.FriendMessagesClient.IncomingMessage:output_type -> steam.client.NoResponse
	12, // 15: steam.client.FriendMessagesClient.NotifyAckMessageEcho:output_type -> steam.client.NoResponse
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_friendmessages_steamclient_proto_init() }
func file_steam_client_steammessages_friendmessages_steamclient_proto_init() {
	if File_steam_client_steammessages_friendmessages_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_GetRecentMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_GetRecentMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsMessages_GetActiveMessageSessions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsMessages_GetActiveMessageSessions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_SendMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_SendMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_AckMessage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_IsInFriendsUIBeta_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_IsInFriendsUIBeta_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_IncomingMessage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendMessages_GetRecentMessages_Response_FriendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_friendmessages_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_friendmessages_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_friendmessages_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_friendmessages_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_friendmessages_steamclient_proto = out.File
	file_steam_client_steammessages_friendmessages_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_friendmessages_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_friendmessages_steamclient_proto_depIdxs = nil
}
