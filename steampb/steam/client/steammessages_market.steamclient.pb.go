// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_market.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CEconMarket_IsMarketplaceAllowed_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webcookie *string `protobuf:"bytes,1,opt,name=webcookie" json:"webcookie,omitempty"`
}

func (x *CEconMarket_IsMarketplaceAllowed_Request) Reset() {
	*x = CEconMarket_IsMarketplaceAllowed_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_market_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconMarket_IsMarketplaceAllowed_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconMarket_IsMarketplaceAllowed_Request) ProtoMessage() {}

func (x *CEconMarket_IsMarketplaceAllowed_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_market_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconMarket_IsMarketplaceAllowed_Request.ProtoReflect.Descriptor instead.
func (*CEconMarket_IsMarketplaceAllowed_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_market_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CEconMarket_IsMarketplaceAllowed_Request) GetWebcookie() string {
	if x != nil && x.Webcookie != nil {
		return *x.Webcookie
	}
	return ""
}

type CEconMarket_IsMarketplaceAllowed_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed                  *bool   `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	Reason                   *uint32 `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	AllowedAtTime            *uint32 `protobuf:"varint,3,opt,name=allowed_at_time,json=allowedAtTime" json:"allowed_at_time,omitempty"`
	SteamguardRequiredDays   *uint32 `protobuf:"varint,4,opt,name=steamguard_required_days,json=steamguardRequiredDays" json:"steamguard_required_days,omitempty"`
	FormsRequested           *bool   `protobuf:"varint,7,opt,name=forms_requested,json=formsRequested" json:"forms_requested,omitempty"`
	FormsRequireVerification *bool   `protobuf:"varint,8,opt,name=forms_require_verification,json=formsRequireVerification" json:"forms_require_verification,omitempty"`
	NewDeviceCooldownDays    *uint32 `protobuf:"varint,9,opt,name=new_device_cooldown_days,json=newDeviceCooldownDays" json:"new_device_cooldown_days,omitempty"`
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) Reset() {
	*x = CEconMarket_IsMarketplaceAllowed_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_market_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconMarket_IsMarketplaceAllowed_Response) ProtoMessage() {}

func (x *CEconMarket_IsMarketplaceAllowed_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_market_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconMarket_IsMarketplaceAllowed_Response.ProtoReflect.Descriptor instead.
func (*CEconMarket_IsMarketplaceAllowed_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_market_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetAllowedAtTime() uint32 {
	if x != nil && x.AllowedAtTime != nil {
		return *x.AllowedAtTime
	}
	return 0
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetSteamguardRequiredDays() uint32 {
	if x != nil && x.SteamguardRequiredDays != nil {
		return *x.SteamguardRequiredDays
	}
	return 0
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetFormsRequested() bool {
	if x != nil && x.FormsRequested != nil {
		return *x.FormsRequested
	}
	return false
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetFormsRequireVerification() bool {
	if x != nil && x.FormsRequireVerification != nil {
		return *x.FormsRequireVerification
	}
	return false
}

func (x *CEconMarket_IsMarketplaceAllowed_Response) GetNewDeviceCooldownDays() uint32 {
	if x != nil && x.NewDeviceCooldownDays != nil {
		return *x.NewDeviceCooldownDays
	}
	return 0
}

var File_steam_client_steammessages_market_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_market_steamclient_proto_rawDesc = []byte{
	0x0a, 0x33, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79,
	0x0a, 0x28, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x49, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82,
	0xb5, 0x18, 0x2b, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x47, 0x75, 0x61, 0x72, 0x64, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x2e, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xef, 0x06, 0x0a, 0x29, 0x43, 0x45,
	0x63, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x49, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x57, 0x68,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0x82, 0xb5, 0x18,
	0x37, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x27, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x5f, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x54,
	0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x9c, 0x01, 0x0a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x62, 0x82, 0xb5, 0x18, 0x5e, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x68, 0x61, 0x64, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x47, 0x75, 0x61, 0x72, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x16, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x67, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x65,
	0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x6c, 0x20, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x61, 0x78, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x44,
	0x82, 0xb5, 0x18, 0x40, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x77, 0x65, 0x27, 0x76,
	0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa,
	0x01, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x71, 0x82, 0xb5, 0x18, 0x6d, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x32, 0x88, 0x02, 0x0a, 0x0a,
	0x45, 0x63, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x14, 0x49,
	0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x49,
	0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x49, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xb5, 0x18, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a,
	0x25, 0x82, 0xb5, 0x18, 0x21, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x20, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x3e, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_market_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_market_steamclient_proto_rawDescData = file_steam_client_steammessages_market_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_market_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_market_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_market_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_market_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_market_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_market_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_steam_client_steammessages_market_steamclient_proto_goTypes = []interface{}{
	(*CEconMarket_IsMarketplaceAllowed_Request)(nil),  // 0: steam.client.CEconMarket_IsMarketplaceAllowed_Request
	(*CEconMarket_IsMarketplaceAllowed_Response)(nil), // 1: steam.client.CEconMarket_IsMarketplaceAllowed_Response
}
var file_steam_client_steammessages_market_steamclient_proto_depIdxs = []int32{
	0, // 0: steam.client.EconMarket.IsMarketplaceAllowed:input_type -> steam.client.CEconMarket_IsMarketplaceAllowed_Request
	1, // 1: steam.client.EconMarket.IsMarketplaceAllowed:output_type -> steam.client.CEconMarket_IsMarketplaceAllowed_Response
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_market_steamclient_proto_init() }
func file_steam_client_steammessages_market_steamclient_proto_init() {
	if File_steam_client_steammessages_market_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_market_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconMarket_IsMarketplaceAllowed_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_market_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconMarket_IsMarketplaceAllowed_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_market_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_market_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_market_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_market_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_market_steamclient_proto = out.File
	file_steam_client_steammessages_market_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_market_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_market_steamclient_proto_depIdxs = nil
}
