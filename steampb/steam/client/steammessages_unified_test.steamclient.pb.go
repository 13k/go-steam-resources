// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_unified_test.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgTest_MessageToClient_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToClient_Request) Reset() {
	*x = CMsgTest_MessageToClient_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToClient_Request) ProtoMessage() {}

func (x *CMsgTest_MessageToClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToClient_Request.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToClient_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgTest_MessageToClient_Request) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToClient_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToClient_Response) Reset() {
	*x = CMsgTest_MessageToClient_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToClient_Response) ProtoMessage() {}

func (x *CMsgTest_MessageToClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToClient_Response.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToClient_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgTest_MessageToClient_Response) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_NotifyClient_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_NotifyClient_Notification) Reset() {
	*x = CMsgTest_NotifyClient_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_NotifyClient_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_NotifyClient_Notification) ProtoMessage() {}

func (x *CMsgTest_NotifyClient_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_NotifyClient_Notification.ProtoReflect.Descriptor instead.
func (*CMsgTest_NotifyClient_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgTest_NotifyClient_Notification) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToServer_Request) Reset() {
	*x = CMsgTest_MessageToServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToServer_Request) ProtoMessage() {}

func (x *CMsgTest_MessageToServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToServer_Request.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToServer_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgTest_MessageToServer_Request) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToServer_Response) Reset() {
	*x = CMsgTest_MessageToServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToServer_Response) ProtoMessage() {}

func (x *CMsgTest_MessageToServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToServer_Response.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToServer_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgTest_MessageToServer_Response) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_NotifyServer_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_NotifyServer_Notification) Reset() {
	*x = CMsgTest_NotifyServer_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_NotifyServer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_NotifyServer_Notification) ProtoMessage() {}

func (x *CMsgTest_NotifyServer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_NotifyServer_Notification.ProtoReflect.Descriptor instead.
func (*CMsgTest_NotifyServer_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgTest_NotifyServer_Notification) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

var File_steam_client_steammessages_unified_test_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_unified_test_steamclient_proto_rawDesc = []byte{
	0x0a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74,
	0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18,
	0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54,
	0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x51, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d,
	0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18,
	0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x54,
	0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0xb8, 0x02, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x53, 0x6f, 0x6d, 0x65, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x80,
	0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5, 0x18,
	0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x1a, 0x04, 0xc0, 0xb5, 0x18, 0x02, 0x32, 0xb7, 0x02, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x53, 0x6f, 0x6d, 0x65, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x12, 0x80,
	0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5, 0x18,
	0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x3b, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_unified_test_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_unified_test_steamclient_proto_rawDescData = file_steam_client_steammessages_unified_test_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_unified_test_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_unified_test_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_unified_test_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_unified_test_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_unified_test_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_steam_client_steammessages_unified_test_steamclient_proto_goTypes = []interface{}{
	(*CMsgTest_MessageToClient_Request)(nil),   // 0: steam.client.CMsgTest_MessageToClient_Request
	(*CMsgTest_MessageToClient_Response)(nil),  // 1: steam.client.CMsgTest_MessageToClient_Response
	(*CMsgTest_NotifyClient_Notification)(nil), // 2: steam.client.CMsgTest_NotifyClient_Notification
	(*CMsgTest_MessageToServer_Request)(nil),   // 3: steam.client.CMsgTest_MessageToServer_Request
	(*CMsgTest_MessageToServer_Response)(nil),  // 4: steam.client.CMsgTest_MessageToServer_Response
	(*CMsgTest_NotifyServer_Notification)(nil), // 5: steam.client.CMsgTest_NotifyServer_Notification
	(*NoResponse)(nil),                         // 6: steam.client.NoResponse
}
var file_steam_client_steammessages_unified_test_steamclient_proto_depIdxs = []int32{
	0, // 0: steam.client.TestSteamClient.MessageToClient:input_type -> steam.client.CMsgTest_MessageToClient_Request
	2, // 1: steam.client.TestSteamClient.NotifyClient:input_type -> steam.client.CMsgTest_NotifyClient_Notification
	3, // 2: steam.client.TestServerFromClient.MessageToServer:input_type -> steam.client.CMsgTest_MessageToServer_Request
	5, // 3: steam.client.TestServerFromClient.NotifyServer:input_type -> steam.client.CMsgTest_NotifyServer_Notification
	1, // 4: steam.client.TestSteamClient.MessageToClient:output_type -> steam.client.CMsgTest_MessageToClient_Response
	6, // 5: steam.client.TestSteamClient.NotifyClient:output_type -> steam.client.NoResponse
	4, // 6: steam.client.TestServerFromClient.MessageToServer:output_type -> steam.client.CMsgTest_MessageToServer_Response
	6, // 7: steam.client.TestServerFromClient.NotifyServer:output_type -> steam.client.NoResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_unified_test_steamclient_proto_init() }
func file_steam_client_steammessages_unified_test_steamclient_proto_init() {
	if File_steam_client_steammessages_unified_test_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToClient_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToClient_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_NotifyClient_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_NotifyServer_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_unified_test_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_unified_test_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_unified_test_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_unified_test_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_unified_test_steamclient_proto = out.File
	file_steam_client_steammessages_unified_test_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_unified_test_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_unified_test_steamclient_proto_depIdxs = nil
}
