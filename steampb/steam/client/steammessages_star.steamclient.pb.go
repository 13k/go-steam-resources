// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_star.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type E_STAR_GlyphWriteResult int32

const (
	E_STAR_GlyphWriteResult_k_E_STAR_GlyphWriteResult_Success        E_STAR_GlyphWriteResult = 0
	E_STAR_GlyphWriteResult_k_E_STAR_GlyphWriteResult_InvalidMessage E_STAR_GlyphWriteResult = 1
	E_STAR_GlyphWriteResult_k_E_STAR_GlyphWriteResult_InvalidJSON    E_STAR_GlyphWriteResult = 2
	E_STAR_GlyphWriteResult_k_E_STAR_GlyphWriteResult_SQLError       E_STAR_GlyphWriteResult = 3
)

// Enum value maps for E_STAR_GlyphWriteResult.
var (
	E_STAR_GlyphWriteResult_name = map[int32]string{
		0: "k_E_STAR_GlyphWriteResult_Success",
		1: "k_E_STAR_GlyphWriteResult_InvalidMessage",
		2: "k_E_STAR_GlyphWriteResult_InvalidJSON",
		3: "k_E_STAR_GlyphWriteResult_SQLError",
	}
	E_STAR_GlyphWriteResult_value = map[string]int32{
		"k_E_STAR_GlyphWriteResult_Success":        0,
		"k_E_STAR_GlyphWriteResult_InvalidMessage": 1,
		"k_E_STAR_GlyphWriteResult_InvalidJSON":    2,
		"k_E_STAR_GlyphWriteResult_SQLError":       3,
	}
)

func (x E_STAR_GlyphWriteResult) Enum() *E_STAR_GlyphWriteResult {
	p := new(E_STAR_GlyphWriteResult)
	*p = x
	return p
}

func (x E_STAR_GlyphWriteResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_STAR_GlyphWriteResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_client_steammessages_star_steamclient_proto_enumTypes[0].Descriptor()
}

func (E_STAR_GlyphWriteResult) Type() protoreflect.EnumType {
	return &file_steam_client_steammessages_star_steamclient_proto_enumTypes[0]
}

func (x E_STAR_GlyphWriteResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *E_STAR_GlyphWriteResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = E_STAR_GlyphWriteResult(num)
	return nil
}

// Deprecated: Use E_STAR_GlyphWriteResult.Descriptor instead.
func (E_STAR_GlyphWriteResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{0}
}

type CSTAR_KeyValueQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CSTAR_KeyValueQuery) Reset() {
	*x = CSTAR_KeyValueQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_KeyValueQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_KeyValueQuery) ProtoMessage() {}

func (x *CSTAR_KeyValueQuery) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_KeyValueQuery.ProtoReflect.Descriptor instead.
func (*CSTAR_KeyValueQuery) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CSTAR_KeyValueQuery) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CSTAR_KeyValueQuery) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CSTAR_GlyphQueryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId *uint64                `protobuf:"varint,1,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	Queries  []*CSTAR_KeyValueQuery `protobuf:"bytes,2,rep,name=queries" json:"queries,omitempty"`
}

func (x *CSTAR_GlyphQueryParams) Reset() {
	*x = CSTAR_GlyphQueryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_GlyphQueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_GlyphQueryParams) ProtoMessage() {}

func (x *CSTAR_GlyphQueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_GlyphQueryParams.ProtoReflect.Descriptor instead.
func (*CSTAR_GlyphQueryParams) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CSTAR_GlyphQueryParams) GetBundleId() uint64 {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return 0
}

func (x *CSTAR_GlyphQueryParams) GetQueries() []*CSTAR_KeyValueQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type CSTAR_ReadGlyphData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryParams                *CSTAR_GlyphQueryParams `protobuf:"bytes,1,opt,name=query_params,json=queryParams" json:"query_params,omitempty"`
	LastModifiedTimeLowerLimit *string                 `protobuf:"bytes,2,opt,name=last_modified_time_lower_limit,json=lastModifiedTimeLowerLimit" json:"last_modified_time_lower_limit,omitempty"`
}

func (x *CSTAR_ReadGlyphData_Request) Reset() {
	*x = CSTAR_ReadGlyphData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_ReadGlyphData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_ReadGlyphData_Request) ProtoMessage() {}

func (x *CSTAR_ReadGlyphData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_ReadGlyphData_Request.ProtoReflect.Descriptor instead.
func (*CSTAR_ReadGlyphData_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CSTAR_ReadGlyphData_Request) GetQueryParams() *CSTAR_GlyphQueryParams {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *CSTAR_ReadGlyphData_Request) GetLastModifiedTimeLowerLimit() string {
	if x != nil && x.LastModifiedTimeLowerLimit != nil {
		return *x.LastModifiedTimeLowerLimit
	}
	return ""
}

type CSTAR_GlyphData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlyphGuid         []byte  `protobuf:"bytes,1,opt,name=glyph_guid,json=glyphGuid" json:"glyph_guid,omitempty"`
	GlyphLastModified *string `protobuf:"bytes,2,opt,name=glyph_last_modified,json=glyphLastModified" json:"glyph_last_modified,omitempty"`
	GlyphJsonData     *string `protobuf:"bytes,3,opt,name=glyph_json_data,json=glyphJsonData" json:"glyph_json_data,omitempty"`
}

func (x *CSTAR_GlyphData) Reset() {
	*x = CSTAR_GlyphData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_GlyphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_GlyphData) ProtoMessage() {}

func (x *CSTAR_GlyphData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_GlyphData.ProtoReflect.Descriptor instead.
func (*CSTAR_GlyphData) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CSTAR_GlyphData) GetGlyphGuid() []byte {
	if x != nil {
		return x.GlyphGuid
	}
	return nil
}

func (x *CSTAR_GlyphData) GetGlyphLastModified() string {
	if x != nil && x.GlyphLastModified != nil {
		return *x.GlyphLastModified
	}
	return ""
}

func (x *CSTAR_GlyphData) GetGlyphJsonData() string {
	if x != nil && x.GlyphJsonData != nil {
		return *x.GlyphJsonData
	}
	return ""
}

type CSTAR_WriteGlyphData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId  *uint64            `protobuf:"varint,1,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	GlyphData []*CSTAR_GlyphData `protobuf:"bytes,2,rep,name=glyph_data,json=glyphData" json:"glyph_data,omitempty"`
}

func (x *CSTAR_WriteGlyphData_Request) Reset() {
	*x = CSTAR_WriteGlyphData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_WriteGlyphData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_WriteGlyphData_Request) ProtoMessage() {}

func (x *CSTAR_WriteGlyphData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_WriteGlyphData_Request.ProtoReflect.Descriptor instead.
func (*CSTAR_WriteGlyphData_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CSTAR_WriteGlyphData_Request) GetBundleId() uint64 {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return 0
}

func (x *CSTAR_WriteGlyphData_Request) GetGlyphData() []*CSTAR_GlyphData {
	if x != nil {
		return x.GlyphData
	}
	return nil
}

type CSTAR_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadGlyphData  *CSTAR_ReadGlyphData_Request  `protobuf:"bytes,1,opt,name=read_glyph_data,json=readGlyphData" json:"read_glyph_data,omitempty"`
	WriteGlyphData *CSTAR_WriteGlyphData_Request `protobuf:"bytes,2,opt,name=write_glyph_data,json=writeGlyphData" json:"write_glyph_data,omitempty"`
}

func (x *CSTAR_Request) Reset() {
	*x = CSTAR_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_Request) ProtoMessage() {}

func (x *CSTAR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_Request.ProtoReflect.Descriptor instead.
func (*CSTAR_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CSTAR_Request) GetReadGlyphData() *CSTAR_ReadGlyphData_Request {
	if x != nil {
		return x.ReadGlyphData
	}
	return nil
}

func (x *CSTAR_Request) GetWriteGlyphData() *CSTAR_WriteGlyphData_Request {
	if x != nil {
		return x.WriteGlyphData
	}
	return nil
}

type CSTAR_ReadGlyphData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId  *uint64            `protobuf:"varint,1,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	GlyphData []*CSTAR_GlyphData `protobuf:"bytes,2,rep,name=glyph_data,json=glyphData" json:"glyph_data,omitempty"`
}

func (x *CSTAR_ReadGlyphData_Response) Reset() {
	*x = CSTAR_ReadGlyphData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_ReadGlyphData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_ReadGlyphData_Response) ProtoMessage() {}

func (x *CSTAR_ReadGlyphData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_ReadGlyphData_Response.ProtoReflect.Descriptor instead.
func (*CSTAR_ReadGlyphData_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CSTAR_ReadGlyphData_Response) GetBundleId() uint64 {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return 0
}

func (x *CSTAR_ReadGlyphData_Response) GetGlyphData() []*CSTAR_GlyphData {
	if x != nil {
		return x.GlyphData
	}
	return nil
}

type CSTAR_WriteGlyphData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []E_STAR_GlyphWriteResult `protobuf:"varint,1,rep,name=result,enum=steam.client.E_STAR_GlyphWriteResult" json:"result,omitempty"`
}

func (x *CSTAR_WriteGlyphData_Response) Reset() {
	*x = CSTAR_WriteGlyphData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_WriteGlyphData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_WriteGlyphData_Response) ProtoMessage() {}

func (x *CSTAR_WriteGlyphData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_WriteGlyphData_Response.ProtoReflect.Descriptor instead.
func (*CSTAR_WriteGlyphData_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CSTAR_WriteGlyphData_Response) GetResult() []E_STAR_GlyphWriteResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CSTAR_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadGlyphData  *CSTAR_ReadGlyphData_Response  `protobuf:"bytes,1,opt,name=read_glyph_data,json=readGlyphData" json:"read_glyph_data,omitempty"`
	WriteGlyphData *CSTAR_WriteGlyphData_Response `protobuf:"bytes,2,opt,name=write_glyph_data,json=writeGlyphData" json:"write_glyph_data,omitempty"`
}

func (x *CSTAR_Response) Reset() {
	*x = CSTAR_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTAR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTAR_Response) ProtoMessage() {}

func (x *CSTAR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_star_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTAR_Response.ProtoReflect.Descriptor instead.
func (*CSTAR_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CSTAR_Response) GetReadGlyphData() *CSTAR_ReadGlyphData_Response {
	if x != nil {
		return x.ReadGlyphData
	}
	return nil
}

func (x *CSTAR_Response) GetWriteGlyphData() *CSTAR_WriteGlyphData_Response {
	if x != nil {
		return x.WriteGlyphData
	}
	return nil
}

var File_steam_client_steammessages_star_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_star_steamclient_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a,
	0x13, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x4a, 0x53, 0x4f, 0x4e,
	0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x28, 0x53, 0x51,
	0x4c, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x29, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x71,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x82,
	0xb5, 0x18, 0x57, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20,
	0x28, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x61, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x7d, 0x0a, 0x09,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x60, 0x82, 0xb5, 0x18, 0x5c, 0x69, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2c, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x6d, 0x75, 0x63, 0x68, 0x20,
	0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x53, 0x51, 0x4c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x29, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x15, 0x82, 0xb5, 0x18, 0x11, 0x6b, 0x65, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xca, 0x02, 0x0a, 0x1b, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6c,
	0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7f, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x36, 0x82, 0xb5, 0x18,
	0x32, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x6c, 0x79, 0x70,
	0x68, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x53, 0x51, 0x4c, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0xa9, 0x01, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x82, 0xb5, 0x18, 0x61, 0x69,
	0x66, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x20, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x20, 0x28, 0x52, 0x46, 0x43, 0x20,
	0x33, 0x33, 0x33, 0x39, 0x20, 0x55, 0x54, 0x43, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29,
	0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x99, 0x02, 0x0a,
	0x0f, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x0a, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x47, 0x55, 0x49, 0x44, 0x20, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x52, 0x09,
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x47, 0x75, 0x69, 0x64, 0x12, 0x78, 0x0a, 0x13, 0x67, 0x6c, 0x79,
	0x70, 0x68, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73,
	0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x28, 0x52, 0x46, 0x43, 0x20,
	0x33, 0x33, 0x33, 0x39, 0x20, 0x55, 0x54, 0x43, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x29,
	0x52, 0x11, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x82, 0xb5,
	0x18, 0x17, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x67,
	0x6c, 0x79, 0x70, 0x68, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x67, 0x6c, 0x79, 0x70, 0x68,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x1c, 0x43, 0x53, 0x54,
	0x41, 0x52, 0x5f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2d, 0x82, 0xb5,
	0x18, 0x29, 0x74, 0x68, 0x65, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x52, 0x08, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0a, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47,
	0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x6f, 0x6e,
	0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f,
	0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x09, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x6c, 0x79, 0x70,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x47, 0x6c, 0x79,
	0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x94, 0x02, 0x0a,
	0x1c, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6c, 0x79, 0x70, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x69, 0x82, 0xb5, 0x18, 0x65, 0x74, 0x68, 0x65, 0x20, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x73, 0x3b, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73,
	0x65, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x08, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x0a, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x7a,
	0x65, 0x72, 0x6f, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x67, 0x6c,
	0x79, 0x70, 0x68, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70,
	0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x2c, 0x82, 0xb5,
	0x18, 0x28, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6f, 0x66, 0x20,
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x6c,
	0x79, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x6c,
	0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x2a, 0xc1, 0x01, 0x0a, 0x17, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70,
	0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x47, 0x6c, 0x79, 0x70, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c,
	0x79, 0x70, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x51, 0x4c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x32, 0x9f, 0x01, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x52, 0x12, 0x6c, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xb5, 0x18, 0x1b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x61, 0x20, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x29, 0x82, 0xb5, 0x18,
	0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x54, 0x41,
	0x52, 0x20, 0x64, 0x61, 0x74, 0x61, 0x42, 0x3b, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_star_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_star_steamclient_proto_rawDescData = file_steam_client_steammessages_star_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_star_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_star_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_star_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_star_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_star_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_star_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steam_client_steammessages_star_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_steam_client_steammessages_star_steamclient_proto_goTypes = []interface{}{
	(E_STAR_GlyphWriteResult)(0),          // 0: steam.client.E_STAR_GlyphWriteResult
	(*CSTAR_KeyValueQuery)(nil),           // 1: steam.client.CSTAR_KeyValueQuery
	(*CSTAR_GlyphQueryParams)(nil),        // 2: steam.client.CSTAR_GlyphQueryParams
	(*CSTAR_ReadGlyphData_Request)(nil),   // 3: steam.client.CSTAR_ReadGlyphData_Request
	(*CSTAR_GlyphData)(nil),               // 4: steam.client.CSTAR_GlyphData
	(*CSTAR_WriteGlyphData_Request)(nil),  // 5: steam.client.CSTAR_WriteGlyphData_Request
	(*CSTAR_Request)(nil),                 // 6: steam.client.CSTAR_Request
	(*CSTAR_ReadGlyphData_Response)(nil),  // 7: steam.client.CSTAR_ReadGlyphData_Response
	(*CSTAR_WriteGlyphData_Response)(nil), // 8: steam.client.CSTAR_WriteGlyphData_Response
	(*CSTAR_Response)(nil),                // 9: steam.client.CSTAR_Response
}
var file_steam_client_steammessages_star_steamclient_proto_depIdxs = []int32{
	1,  // 0: steam.client.CSTAR_GlyphQueryParams.queries:type_name -> steam.client.CSTAR_KeyValueQuery
	2,  // 1: steam.client.CSTAR_ReadGlyphData_Request.query_params:type_name -> steam.client.CSTAR_GlyphQueryParams
	4,  // 2: steam.client.CSTAR_WriteGlyphData_Request.glyph_data:type_name -> steam.client.CSTAR_GlyphData
	3,  // 3: steam.client.CSTAR_Request.read_glyph_data:type_name -> steam.client.CSTAR_ReadGlyphData_Request
	5,  // 4: steam.client.CSTAR_Request.write_glyph_data:type_name -> steam.client.CSTAR_WriteGlyphData_Request
	4,  // 5: steam.client.CSTAR_ReadGlyphData_Response.glyph_data:type_name -> steam.client.CSTAR_GlyphData
	0,  // 6: steam.client.CSTAR_WriteGlyphData_Response.result:type_name -> steam.client.E_STAR_GlyphWriteResult
	7,  // 7: steam.client.CSTAR_Response.read_glyph_data:type_name -> steam.client.CSTAR_ReadGlyphData_Response
	8,  // 8: steam.client.CSTAR_Response.write_glyph_data:type_name -> steam.client.CSTAR_WriteGlyphData_Response
	6,  // 9: steam.client.STAR.ProcessMessage:input_type -> steam.client.CSTAR_Request
	9,  // 10: steam.client.STAR.ProcessMessage:output_type -> steam.client.CSTAR_Response
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_star_steamclient_proto_init() }
func file_steam_client_steammessages_star_steamclient_proto_init() {
	if File_steam_client_steammessages_star_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_KeyValueQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_GlyphQueryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_ReadGlyphData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_GlyphData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_WriteGlyphData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_ReadGlyphData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_WriteGlyphData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_star_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTAR_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_star_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_star_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_star_steamclient_proto_depIdxs,
		EnumInfos:         file_steam_client_steammessages_star_steamclient_proto_enumTypes,
		MessageInfos:      file_steam_client_steammessages_star_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_star_steamclient_proto = out.File
	file_steam_client_steammessages_star_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_star_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_star_steamclient_proto_depIdxs = nil
}
