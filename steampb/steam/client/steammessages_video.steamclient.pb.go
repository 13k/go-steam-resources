// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_video.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CVideo_ClientGetVideoURL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId      *uint64 `protobuf:"varint,1,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
	ClientCellid *uint32 `protobuf:"varint,2,opt,name=client_cellid,json=clientCellid" json:"client_cellid,omitempty"`
}

func (x *CVideo_ClientGetVideoURL_Request) Reset() {
	*x = CVideo_ClientGetVideoURL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_ClientGetVideoURL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_ClientGetVideoURL_Request) ProtoMessage() {}

func (x *CVideo_ClientGetVideoURL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_ClientGetVideoURL_Request.ProtoReflect.Descriptor instead.
func (*CVideo_ClientGetVideoURL_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CVideo_ClientGetVideoURL_Request) GetVideoId() uint64 {
	if x != nil && x.VideoId != nil {
		return *x.VideoId
	}
	return 0
}

func (x *CVideo_ClientGetVideoURL_Request) GetClientCellid() uint32 {
	if x != nil && x.ClientCellid != nil {
		return *x.ClientCellid
	}
	return 0
}

type CVideo_ClientGetVideoURL_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId  *uint64 `protobuf:"varint,1,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
	VideoUrl *string `protobuf:"bytes,2,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
}

func (x *CVideo_ClientGetVideoURL_Response) Reset() {
	*x = CVideo_ClientGetVideoURL_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_ClientGetVideoURL_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_ClientGetVideoURL_Response) ProtoMessage() {}

func (x *CVideo_ClientGetVideoURL_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_ClientGetVideoURL_Response.ProtoReflect.Descriptor instead.
func (*CVideo_ClientGetVideoURL_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CVideo_ClientGetVideoURL_Response) GetVideoId() uint64 {
	if x != nil && x.VideoId != nil {
		return *x.VideoId
	}
	return 0
}

func (x *CVideo_ClientGetVideoURL_Response) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

type VideoBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                     *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	PlaybackPositionInSeconds *uint32 `protobuf:"varint,2,opt,name=playback_position_in_seconds,json=playbackPositionInSeconds" json:"playback_position_in_seconds,omitempty"`
	VideoTrackId              *uint64 `protobuf:"varint,3,opt,name=video_track_id,json=videoTrackId" json:"video_track_id,omitempty"`
	AudioTrackId              *uint64 `protobuf:"varint,4,opt,name=audio_track_id,json=audioTrackId" json:"audio_track_id,omitempty"`
	TimedtextTrackId          *uint64 `protobuf:"varint,5,opt,name=timedtext_track_id,json=timedtextTrackId" json:"timedtext_track_id,omitempty"`
	LastModified              *uint32 `protobuf:"varint,6,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	HideFromWatchHistory      *bool   `protobuf:"varint,7,opt,name=hide_from_watch_history,json=hideFromWatchHistory,def=0" json:"hide_from_watch_history,omitempty"`
	HideFromLibrary           *bool   `protobuf:"varint,8,opt,name=hide_from_library,json=hideFromLibrary,def=0" json:"hide_from_library,omitempty"`
}

// Default values for VideoBookmark fields.
const (
	Default_VideoBookmark_HideFromWatchHistory = bool(false)
	Default_VideoBookmark_HideFromLibrary      = bool(false)
)

func (x *VideoBookmark) Reset() {
	*x = VideoBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBookmark) ProtoMessage() {}

func (x *VideoBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBookmark.ProtoReflect.Descriptor instead.
func (*VideoBookmark) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *VideoBookmark) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *VideoBookmark) GetPlaybackPositionInSeconds() uint32 {
	if x != nil && x.PlaybackPositionInSeconds != nil {
		return *x.PlaybackPositionInSeconds
	}
	return 0
}

func (x *VideoBookmark) GetVideoTrackId() uint64 {
	if x != nil && x.VideoTrackId != nil {
		return *x.VideoTrackId
	}
	return 0
}

func (x *VideoBookmark) GetAudioTrackId() uint64 {
	if x != nil && x.AudioTrackId != nil {
		return *x.AudioTrackId
	}
	return 0
}

func (x *VideoBookmark) GetTimedtextTrackId() uint64 {
	if x != nil && x.TimedtextTrackId != nil {
		return *x.TimedtextTrackId
	}
	return 0
}

func (x *VideoBookmark) GetLastModified() uint32 {
	if x != nil && x.LastModified != nil {
		return *x.LastModified
	}
	return 0
}

func (x *VideoBookmark) GetHideFromWatchHistory() bool {
	if x != nil && x.HideFromWatchHistory != nil {
		return *x.HideFromWatchHistory
	}
	return Default_VideoBookmark_HideFromWatchHistory
}

func (x *VideoBookmark) GetHideFromLibrary() bool {
	if x != nil && x.HideFromLibrary != nil {
		return *x.HideFromLibrary
	}
	return Default_VideoBookmark_HideFromLibrary
}

type CVideo_SetVideoBookmark_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmarks []*VideoBookmark `protobuf:"bytes,1,rep,name=bookmarks" json:"bookmarks,omitempty"`
}

func (x *CVideo_SetVideoBookmark_Notification) Reset() {
	*x = CVideo_SetVideoBookmark_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_SetVideoBookmark_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_SetVideoBookmark_Notification) ProtoMessage() {}

func (x *CVideo_SetVideoBookmark_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_SetVideoBookmark_Notification.ProtoReflect.Descriptor instead.
func (*CVideo_SetVideoBookmark_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CVideo_SetVideoBookmark_Notification) GetBookmarks() []*VideoBookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CVideo_GetVideoBookmarks_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids       []uint32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	UpdatedSince *uint32  `protobuf:"varint,2,opt,name=updated_since,json=updatedSince" json:"updated_since,omitempty"`
}

func (x *CVideo_GetVideoBookmarks_Request) Reset() {
	*x = CVideo_GetVideoBookmarks_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GetVideoBookmarks_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GetVideoBookmarks_Request) ProtoMessage() {}

func (x *CVideo_GetVideoBookmarks_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GetVideoBookmarks_Request.ProtoReflect.Descriptor instead.
func (*CVideo_GetVideoBookmarks_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CVideo_GetVideoBookmarks_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CVideo_GetVideoBookmarks_Request) GetUpdatedSince() uint32 {
	if x != nil && x.UpdatedSince != nil {
		return *x.UpdatedSince
	}
	return 0
}

type CVideo_GetVideoBookmarks_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmarks []*VideoBookmark `protobuf:"bytes,1,rep,name=bookmarks" json:"bookmarks,omitempty"`
}

func (x *CVideo_GetVideoBookmarks_Response) Reset() {
	*x = CVideo_GetVideoBookmarks_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_GetVideoBookmarks_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_GetVideoBookmarks_Response) ProtoMessage() {}

func (x *CVideo_GetVideoBookmarks_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_GetVideoBookmarks_Response.ProtoReflect.Descriptor instead.
func (*CVideo_GetVideoBookmarks_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CVideo_GetVideoBookmarks_Response) GetBookmarks() []*VideoBookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type CVideo_UnlockedH264_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionKey []byte `protobuf:"bytes,1,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
}

func (x *CVideo_UnlockedH264_Notification) Reset() {
	*x = CVideo_UnlockedH264_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVideo_UnlockedH264_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVideo_UnlockedH264_Notification) ProtoMessage() {}

func (x *CVideo_UnlockedH264_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVideo_UnlockedH264_Notification.ProtoReflect.Descriptor instead.
func (*CVideo_UnlockedH264_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CVideo_UnlockedH264_Notification) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

type CFovasVideo_ClientGetOPFSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ClientCellid *uint32 `protobuf:"varint,2,opt,name=client_cellid,json=clientCellid" json:"client_cellid,omitempty"`
}

func (x *CFovasVideo_ClientGetOPFSettings_Request) Reset() {
	*x = CFovasVideo_ClientGetOPFSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFovasVideo_ClientGetOPFSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFovasVideo_ClientGetOPFSettings_Request) ProtoMessage() {}

func (x *CFovasVideo_ClientGetOPFSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFovasVideo_ClientGetOPFSettings_Request.ProtoReflect.Descriptor instead.
func (*CFovasVideo_ClientGetOPFSettings_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CFovasVideo_ClientGetOPFSettings_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CFovasVideo_ClientGetOPFSettings_Request) GetClientCellid() uint32 {
	if x != nil && x.ClientCellid != nil {
		return *x.ClientCellid
	}
	return 0
}

type CFovasVideo_ClientGetOPFSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	OpfSettings *string `protobuf:"bytes,2,opt,name=opf_settings,json=opfSettings" json:"opf_settings,omitempty"`
}

func (x *CFovasVideo_ClientGetOPFSettings_Response) Reset() {
	*x = CFovasVideo_ClientGetOPFSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFovasVideo_ClientGetOPFSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFovasVideo_ClientGetOPFSettings_Response) ProtoMessage() {}

func (x *CFovasVideo_ClientGetOPFSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_video_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFovasVideo_ClientGetOPFSettings_Response.ProtoReflect.Descriptor instead.
func (*CFovasVideo_ClientGetOPFSettings_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CFovasVideo_ClientGetOPFSettings_Response) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CFovasVideo_ClientGetOPFSettings_Response) GetOpfSettings() string {
	if x != nil && x.OpfSettings != nil {
		return *x.OpfSettings
	}
	return ""
}

var File_steam_client_steammessages_video_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_video_steamclient_proto_rawDesc = []byte{
	0x0a, 0x32, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01,
	0x0a, 0x20, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x20,
	0x49, 0x44, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x43, 0x65, 0x6c, 0x6c, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20,
	0x69, 0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x43, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0c, 0x82, 0xb5, 0x18, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x49, 0x44, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16,
	0x55, 0x52, 0x4c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c,
	0x22, 0xaf, 0x05, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x37, 0x82, 0xb5, 0x18,
	0x33, 0x48, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x20, 0x69, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x82, 0xb5, 0x18,
	0x34, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x77, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x17, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x2d, 0x82, 0xb5, 0x18,
	0x29, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x49, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x79, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x68, 0x69, 0x64, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x60, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x49, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x79, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x24, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x53, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x27, 0x82, 0xb5, 0x18,
	0x23, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x20, 0x77, 0x65, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x98, 0x02, 0x0a, 0x20, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x4f, 0x82, 0xb5, 0x18, 0x4b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61,
	0x62, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x2e,
	0x20, 0x43, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x69, 0x66,
	0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x8a, 0x01,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x65, 0x82, 0xb5, 0x18, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x20, 0x4d, 0x69, 0x6e, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x31, 0x2e, 0x20, 0x28, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x20,
	0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x73, 0x74, 0x2c, 0x20, 0x31, 0x39, 0x37,
	0x30, 0x20, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x43,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x77, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x20, 0x43, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x49, 0x0a, 0x20, 0x43, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x32, 0x36,
	0x34, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x28, 0x43, 0x46, 0x6f, 0x76, 0x61, 0x73,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f,
	0x50, 0x46, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x82, 0xb5,
	0x18, 0x22, 0x43, 0x65, 0x6c, 0x6c, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2c, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x20, 0x69, 0x66, 0x20, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x29, 0x43, 0x46, 0x6f, 0x76, 0x61, 0x73, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x50, 0x46, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0x82, 0xb5, 0x18, 0x06, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x6f, 0x70, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x4a,
	0x53, 0x4f, 0x4e, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x20, 0x6f, 0x66, 0x20, 0x4f, 0x50, 0x46, 0x20,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x6f, 0x70, 0x66, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x83, 0x05, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0xa8, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x55, 0x52, 0x4c, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0xdb, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x82,
	0xb5, 0x18, 0x75, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x73,
	0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x20, 0x46, 0x69, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x12, 0xdd, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2e,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x67, 0x82, 0xb5, 0x18, 0x63, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x2e, 0x20, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x32, 0xb8, 0x01, 0x0a, 0x0b,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x12,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x32,
	0x36, 0x34, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x48, 0x32, 0x36, 0x34, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xb5,
	0x18, 0x3e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x32, 0x36, 0x34, 0x20, 0x68,
	0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x1a, 0x04, 0xc0, 0xb5, 0x18, 0x02, 0x32, 0x8d, 0x02, 0x0a, 0x0a, 0x46, 0x6f, 0x76, 0x61, 0x73,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0xdd, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x4f, 0x50, 0x46, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46,
	0x6f, 0x76, 0x61, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x4f, 0x50, 0x46, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x46, 0x6f, 0x76, 0x61, 0x73, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x50, 0x46, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x54, 0x82, 0xb5, 0x18, 0x50, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x4f, 0x50, 0x46, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x4a,
	0x53, 0x4f, 0x4e, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x20, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x33, 0x36, 0x30, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x20, 0x41, 0x70, 0x70, 0x1a, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x46, 0x6f, 0x76, 0x61, 0x73,
	0x20, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x3b, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_video_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_video_steamclient_proto_rawDescData = file_steam_client_steammessages_video_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_video_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_video_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_video_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_video_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_video_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_video_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_steam_client_steammessages_video_steamclient_proto_goTypes = []interface{}{
	(*CVideo_ClientGetVideoURL_Request)(nil),          // 0: steam.client.CVideo_ClientGetVideoURL_Request
	(*CVideo_ClientGetVideoURL_Response)(nil),         // 1: steam.client.CVideo_ClientGetVideoURL_Response
	(*VideoBookmark)(nil),                             // 2: steam.client.VideoBookmark
	(*CVideo_SetVideoBookmark_Notification)(nil),      // 3: steam.client.CVideo_SetVideoBookmark_Notification
	(*CVideo_GetVideoBookmarks_Request)(nil),          // 4: steam.client.CVideo_GetVideoBookmarks_Request
	(*CVideo_GetVideoBookmarks_Response)(nil),         // 5: steam.client.CVideo_GetVideoBookmarks_Response
	(*CVideo_UnlockedH264_Notification)(nil),          // 6: steam.client.CVideo_UnlockedH264_Notification
	(*CFovasVideo_ClientGetOPFSettings_Request)(nil),  // 7: steam.client.CFovasVideo_ClientGetOPFSettings_Request
	(*CFovasVideo_ClientGetOPFSettings_Response)(nil), // 8: steam.client.CFovasVideo_ClientGetOPFSettings_Response
	(*NoResponse)(nil),                                // 9: steam.client.NoResponse
}
var file_steam_client_steammessages_video_steamclient_proto_depIdxs = []int32{
	2, // 0: steam.client.CVideo_SetVideoBookmark_Notification.bookmarks:type_name -> steam.client.VideoBookmark
	2, // 1: steam.client.CVideo_GetVideoBookmarks_Response.bookmarks:type_name -> steam.client.VideoBookmark
	0, // 2: steam.client.Video.ClientGetVideoURL:input_type -> steam.client.CVideo_ClientGetVideoURL_Request
	3, // 3: steam.client.Video.SetVideoBookmark:input_type -> steam.client.CVideo_SetVideoBookmark_Notification
	4, // 4: steam.client.Video.GetVideoBookmarks:input_type -> steam.client.CVideo_GetVideoBookmarks_Request
	6, // 5: steam.client.VideoClient.NotifyUnlockedH264:input_type -> steam.client.CVideo_UnlockedH264_Notification
	7, // 6: steam.client.FovasVideo.ClientGetOPFSettings:input_type -> steam.client.CFovasVideo_ClientGetOPFSettings_Request
	1, // 7: steam.client.Video.ClientGetVideoURL:output_type -> steam.client.CVideo_ClientGetVideoURL_Response
	9, // 8: steam.client.Video.SetVideoBookmark:output_type -> steam.client.NoResponse
	5, // 9: steam.client.Video.GetVideoBookmarks:output_type -> steam.client.CVideo_GetVideoBookmarks_Response
	9, // 10: steam.client.VideoClient.NotifyUnlockedH264:output_type -> steam.client.NoResponse
	8, // 11: steam.client.FovasVideo.ClientGetOPFSettings:output_type -> steam.client.CFovasVideo_ClientGetOPFSettings_Response
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_video_steamclient_proto_init() }
func file_steam_client_steammessages_video_steamclient_proto_init() {
	if File_steam_client_steammessages_video_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_ClientGetVideoURL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_ClientGetVideoURL_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_SetVideoBookmark_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_GetVideoBookmarks_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_GetVideoBookmarks_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVideo_UnlockedH264_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFovasVideo_ClientGetOPFSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_video_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFovasVideo_ClientGetOPFSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_video_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_steam_client_steammessages_video_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_video_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_video_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_video_steamclient_proto = out.File
	file_steam_client_steammessages_video_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_video_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_video_steamclient_proto_depIdxs = nil
}
