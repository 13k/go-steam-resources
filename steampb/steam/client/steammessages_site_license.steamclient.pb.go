// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_site_license.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CSiteManagerClient_IncomingClient_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteInstanceid *uint64 `protobuf:"fixed64,1,opt,name=site_instanceid,json=siteInstanceid" json:"site_instanceid,omitempty"`
	ClientSteamid  *uint64 `protobuf:"fixed64,2,opt,name=client_steamid,json=clientSteamid" json:"client_steamid,omitempty"`
	ClientLocalIp  *uint32 `protobuf:"fixed32,3,opt,name=client_local_ip,json=clientLocalIp" json:"client_local_ip,omitempty"`
	ConnectionKey  []byte  `protobuf:"bytes,4,opt,name=connection_key,json=connectionKey" json:"connection_key,omitempty"`
}

func (x *CSiteManagerClient_IncomingClient_Request) Reset() {
	*x = CSiteManagerClient_IncomingClient_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteManagerClient_IncomingClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_IncomingClient_Request) ProtoMessage() {}

func (x *CSiteManagerClient_IncomingClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_IncomingClient_Request.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_IncomingClient_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CSiteManagerClient_IncomingClient_Request) GetSiteInstanceid() uint64 {
	if x != nil && x.SiteInstanceid != nil {
		return *x.SiteInstanceid
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetClientSteamid() uint64 {
	if x != nil && x.ClientSteamid != nil {
		return *x.ClientSteamid
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetClientLocalIp() uint32 {
	if x != nil && x.ClientLocalIp != nil {
		return *x.ClientLocalIp
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetConnectionKey() []byte {
	if x != nil {
		return x.ConnectionKey
	}
	return nil
}

type CSiteManagerClient_IncomingClient_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSiteManagerClient_IncomingClient_Response) Reset() {
	*x = CSiteManagerClient_IncomingClient_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteManagerClient_IncomingClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_IncomingClient_Response) ProtoMessage() {}

func (x *CSiteManagerClient_IncomingClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_IncomingClient_Response.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_IncomingClient_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{1}
}

type CSiteLicense_ClientSeatCheckout_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Eresult *uint32 `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Notification) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Notification.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CSiteManagerClient_TrackedPayments_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId   *uint64                                                    `protobuf:"fixed64,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Payments []*CSiteManagerClient_TrackedPayments_Notification_Payment `protobuf:"bytes,2,rep,name=payments" json:"payments,omitempty"`
}

func (x *CSiteManagerClient_TrackedPayments_Notification) Reset() {
	*x = CSiteManagerClient_TrackedPayments_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteManagerClient_TrackedPayments_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_TrackedPayments_Notification) ProtoMessage() {}

func (x *CSiteManagerClient_TrackedPayments_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_TrackedPayments_Notification.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_TrackedPayments_Notification) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CSiteManagerClient_TrackedPayments_Notification) GetSiteId() uint64 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification) GetPayments() []*CSiteManagerClient_TrackedPayments_Notification_Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

type CSiteLicense_InitiateAssociation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteSteamid    *uint64 `protobuf:"fixed64,1,opt,name=site_steamid,json=siteSteamid" json:"site_steamid,omitempty"`
	SiteInstanceid *uint64 `protobuf:"fixed64,2,opt,name=site_instanceid,json=siteInstanceid" json:"site_instanceid,omitempty"`
	ClientLocalIp  *uint32 `protobuf:"fixed32,3,opt,name=client_local_ip,json=clientLocalIp" json:"client_local_ip,omitempty"`
}

func (x *CSiteLicense_InitiateAssociation_Request) Reset() {
	*x = CSiteLicense_InitiateAssociation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_InitiateAssociation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_InitiateAssociation_Request) ProtoMessage() {}

func (x *CSiteLicense_InitiateAssociation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_InitiateAssociation_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_InitiateAssociation_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CSiteLicense_InitiateAssociation_Request) GetSiteSteamid() uint64 {
	if x != nil && x.SiteSteamid != nil {
		return *x.SiteSteamid
	}
	return 0
}

func (x *CSiteLicense_InitiateAssociation_Request) GetSiteInstanceid() uint64 {
	if x != nil && x.SiteInstanceid != nil {
		return *x.SiteInstanceid
	}
	return 0
}

func (x *CSiteLicense_InitiateAssociation_Request) GetClientLocalIp() uint32 {
	if x != nil && x.ClientLocalIp != nil {
		return *x.ClientLocalIp
	}
	return 0
}

type CSiteLicense_InitiateAssociation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionKey []byte `protobuf:"bytes,1,opt,name=connection_key,json=connectionKey" json:"connection_key,omitempty"`
}

func (x *CSiteLicense_InitiateAssociation_Response) Reset() {
	*x = CSiteLicense_InitiateAssociation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_InitiateAssociation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_InitiateAssociation_Response) ProtoMessage() {}

func (x *CSiteLicense_InitiateAssociation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_InitiateAssociation_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_InitiateAssociation_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CSiteLicense_InitiateAssociation_Response) GetConnectionKey() []byte {
	if x != nil {
		return x.ConnectionKey
	}
	return nil
}

type CSiteLicense_LCSAuthenticate_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instanceid *uint64 `protobuf:"fixed64,1,opt,name=instanceid" json:"instanceid,omitempty"`
}

func (x *CSiteLicense_LCSAuthenticate_Request) Reset() {
	*x = CSiteLicense_LCSAuthenticate_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_LCSAuthenticate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAuthenticate_Request) ProtoMessage() {}

func (x *CSiteLicense_LCSAuthenticate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAuthenticate_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAuthenticate_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CSiteLicense_LCSAuthenticate_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

type CSiteLicense_LCSAuthenticate_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId         *uint64 `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	SiteName       *string `protobuf:"bytes,2,opt,name=site_name,json=siteName" json:"site_name,omitempty"`
	NewSession     *bool   `protobuf:"varint,3,opt,name=new_session,json=newSession" json:"new_session,omitempty"`
	NoSiteLicenses *bool   `protobuf:"varint,4,opt,name=no_site_licenses,json=noSiteLicenses" json:"no_site_licenses,omitempty"`
}

func (x *CSiteLicense_LCSAuthenticate_Response) Reset() {
	*x = CSiteLicense_LCSAuthenticate_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_LCSAuthenticate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAuthenticate_Response) ProtoMessage() {}

func (x *CSiteLicense_LCSAuthenticate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAuthenticate_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAuthenticate_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetSiteId() uint64 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetSiteName() string {
	if x != nil && x.SiteName != nil {
		return *x.SiteName
	}
	return ""
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetNewSession() bool {
	if x != nil && x.NewSession != nil {
		return *x.NewSession
	}
	return false
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetNoSiteLicenses() bool {
	if x != nil && x.NoSiteLicenses != nil {
		return *x.NoSiteLicenses
	}
	return false
}

type CSiteLicense_LCSAssociateUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	LocalIp     *uint32 `protobuf:"fixed32,2,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	Instanceid  *uint64 `protobuf:"fixed64,3,opt,name=instanceid" json:"instanceid,omitempty"`
	MachineName *string `protobuf:"bytes,4,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
}

func (x *CSiteLicense_LCSAssociateUser_Request) Reset() {
	*x = CSiteLicense_LCSAssociateUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_LCSAssociateUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAssociateUser_Request) ProtoMessage() {}

func (x *CSiteLicense_LCSAssociateUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAssociateUser_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAssociateUser_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetLocalIp() uint32 {
	if x != nil && x.LocalIp != nil {
		return *x.LocalIp
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

type CSiteLicense_LCSAssociateUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSiteLicense_LCSAssociateUser_Response) Reset() {
	*x = CSiteLicense_LCSAssociateUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_LCSAssociateUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAssociateUser_Response) ProtoMessage() {}

func (x *CSiteLicense_LCSAssociateUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAssociateUser_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAssociateUser_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{9}
}

type CSiteLicense_ClientSeatCheckout_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Instanceid *uint64 `protobuf:"fixed64,2,opt,name=instanceid" json:"instanceid,omitempty"`
	Appid      *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *CSiteLicense_ClientSeatCheckout_Request) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_ClientSeatCheckout_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Request) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSiteLicense_ClientSeatCheckout_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSiteLicense_ClientSeatCheckout_Response) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_ClientSeatCheckout_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Response) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{11}
}

type CSiteLicense_ClientGetAvailableSeats_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Instanceid *uint64 `protobuf:"fixed64,2,opt,name=instanceid" json:"instanceid,omitempty"`
	Appid      *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) Reset() {
	*x = CSiteLicense_ClientGetAvailableSeats_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientGetAvailableSeats_Request) ProtoMessage() {}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientGetAvailableSeats_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientGetAvailableSeats_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSiteLicense_ClientGetAvailableSeats_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableSeats *uint32 `protobuf:"varint,1,opt,name=available_seats,json=availableSeats" json:"available_seats,omitempty"`
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) Reset() {
	*x = CSiteLicense_ClientGetAvailableSeats_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientGetAvailableSeats_Response) ProtoMessage() {}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientGetAvailableSeats_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientGetAvailableSeats_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) GetAvailableSeats() uint32 {
	if x != nil && x.AvailableSeats != nil {
		return *x.AvailableSeats
	}
	return 0
}

type CSiteManagerClient_TrackedPayments_Notification_Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transid        *uint64 `protobuf:"varint,1,opt,name=transid" json:"transid,omitempty"`
	Steamid        *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Amount         *int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Ecurrency      *uint32 `protobuf:"varint,4,opt,name=ecurrency" json:"ecurrency,omitempty"`
	TimeCreated    *int32  `protobuf:"varint,5,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	PurchaseStatus *int32  `protobuf:"varint,6,opt,name=purchase_status,json=purchaseStatus" json:"purchase_status,omitempty"`
	MachineName    *string `protobuf:"bytes,7,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	PersonaName    *string `protobuf:"bytes,8,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	ProfileUrl     *string `protobuf:"bytes,9,opt,name=profile_url,json=profileUrl" json:"profile_url,omitempty"`
	AvatarUrl      *string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) Reset() {
	*x = CSiteManagerClient_TrackedPayments_Notification_Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_TrackedPayments_Notification_Payment) ProtoMessage() {}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_TrackedPayments_Notification_Payment.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_TrackedPayments_Notification_Payment) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetTransid() uint64 {
	if x != nil && x.Transid != nil {
		return *x.Transid
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetEcurrency() uint32 {
	if x != nil && x.Ecurrency != nil {
		return *x.Ecurrency
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetTimeCreated() int32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetPurchaseStatus() int32 {
	if x != nil && x.PurchaseStatus != nil {
		return *x.PurchaseStatus
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetProfileUrl() string {
	if x != nil && x.ProfileUrl != nil {
		return *x.ProfileUrl
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

var File_steam_client_steammessages_site_license_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_site_license_steamclient_proto_rawDesc = []byte{
	0x0a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x29, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5e, 0x0a, 0x2c, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xf5, 0x03, 0x0a, 0x2f, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xc5, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x28, 0x43, 0x53, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x52, 0x0a, 0x29, 0x43, 0x53, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x24,
	0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x43, 0x53,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x69, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x25, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6e, 0x6f, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x25, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x4c, 0x43, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x27, 0x43,
	0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7e, 0x0a, 0x2c, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0x58, 0x0a, 0x2d, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x32, 0xf1, 0x04, 0x0a,
	0x11, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x52, 0x61,
	0x63, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x69, 0x74,
	0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x50, 0x53, 0x4b, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xad,
	0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6c, 0x79, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x73, 0x65, 0x61, 0x74, 0x20, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xb4,
	0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x52, 0x61, 0x63,
	0x6b, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x69, 0x74, 0x65,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x29, 0x82, 0xb5, 0x18, 0x21, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xc0, 0xb5, 0x18, 0x02,
	0x32, 0xd7, 0x07, 0x0a, 0x0b, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0xbe, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x69, 0x74,
	0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x4c, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xb5, 0x18, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x61, 0x66, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x10, 0x4c, 0x43, 0x53, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x4c, 0x43, 0x53, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
	0x63, 0x61, 0x66, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x74, 0x65, 0x12, 0xb8,
	0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x20, 0x73, 0x65, 0x61, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x17, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x82, 0xb5, 0x18, 0x3c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x1a, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x53, 0x69, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x3e, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_site_license_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_site_license_steamclient_proto_rawDescData = file_steam_client_steammessages_site_license_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_site_license_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_site_license_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_site_license_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_site_license_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_site_license_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_site_license_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_steam_client_steammessages_site_license_steamclient_proto_goTypes = []interface{}{
	(*CSiteManagerClient_IncomingClient_Request)(nil),               // 0: steam.client.CSiteManagerClient_IncomingClient_Request
	(*CSiteManagerClient_IncomingClient_Response)(nil),              // 1: steam.client.CSiteManagerClient_IncomingClient_Response
	(*CSiteLicense_ClientSeatCheckout_Notification)(nil),            // 2: steam.client.CSiteLicense_ClientSeatCheckout_Notification
	(*CSiteManagerClient_TrackedPayments_Notification)(nil),         // 3: steam.client.CSiteManagerClient_TrackedPayments_Notification
	(*CSiteLicense_InitiateAssociation_Request)(nil),                // 4: steam.client.CSiteLicense_InitiateAssociation_Request
	(*CSiteLicense_InitiateAssociation_Response)(nil),               // 5: steam.client.CSiteLicense_InitiateAssociation_Response
	(*CSiteLicense_LCSAuthenticate_Request)(nil),                    // 6: steam.client.CSiteLicense_LCSAuthenticate_Request
	(*CSiteLicense_LCSAuthenticate_Response)(nil),                   // 7: steam.client.CSiteLicense_LCSAuthenticate_Response
	(*CSiteLicense_LCSAssociateUser_Request)(nil),                   // 8: steam.client.CSiteLicense_LCSAssociateUser_Request
	(*CSiteLicense_LCSAssociateUser_Response)(nil),                  // 9: steam.client.CSiteLicense_LCSAssociateUser_Response
	(*CSiteLicense_ClientSeatCheckout_Request)(nil),                 // 10: steam.client.CSiteLicense_ClientSeatCheckout_Request
	(*CSiteLicense_ClientSeatCheckout_Response)(nil),                // 11: steam.client.CSiteLicense_ClientSeatCheckout_Response
	(*CSiteLicense_ClientGetAvailableSeats_Request)(nil),            // 12: steam.client.CSiteLicense_ClientGetAvailableSeats_Request
	(*CSiteLicense_ClientGetAvailableSeats_Response)(nil),           // 13: steam.client.CSiteLicense_ClientGetAvailableSeats_Response
	(*CSiteManagerClient_TrackedPayments_Notification_Payment)(nil), // 14: steam.client.CSiteManagerClient_TrackedPayments_Notification.Payment
	(*NoResponse)(nil), // 15: steam.client.NoResponse
}
var file_steam_client_steammessages_site_license_steamclient_proto_depIdxs = []int32{
	14, // 0: steam.client.CSiteManagerClient_TrackedPayments_Notification.payments:type_name -> steam.client.CSiteManagerClient_TrackedPayments_Notification.Payment
	0,  // 1: steam.client.SiteManagerClient.IncomingClient:input_type -> steam.client.CSiteManagerClient_IncomingClient_Request
	2,  // 2: steam.client.SiteManagerClient.ClientSeatCheckoutNotification:input_type -> steam.client.CSiteLicense_ClientSeatCheckout_Notification
	3,  // 3: steam.client.SiteManagerClient.TrackedPaymentsNotification:input_type -> steam.client.CSiteManagerClient_TrackedPayments_Notification
	4,  // 4: steam.client.SiteLicense.InitiateAssociation:input_type -> steam.client.CSiteLicense_InitiateAssociation_Request
	6,  // 5: steam.client.SiteLicense.LCSAuthenticate:input_type -> steam.client.CSiteLicense_LCSAuthenticate_Request
	8,  // 6: steam.client.SiteLicense.LCSAssociateUser:input_type -> steam.client.CSiteLicense_LCSAssociateUser_Request
	10, // 7: steam.client.SiteLicense.ClientSeatCheckout:input_type -> steam.client.CSiteLicense_ClientSeatCheckout_Request
	12, // 8: steam.client.SiteLicense.ClientGetAvailableSeats:input_type -> steam.client.CSiteLicense_ClientGetAvailableSeats_Request
	1,  // 9: steam.client.SiteManagerClient.IncomingClient:output_type -> steam.client.CSiteManagerClient_IncomingClient_Response
	15, // 10: steam.client.SiteManagerClient.ClientSeatCheckoutNotification:output_type -> steam.client.NoResponse
	15, // 11: steam.client.SiteManagerClient.TrackedPaymentsNotification:output_type -> steam.client.NoResponse
	5,  // 12: steam.client.SiteLicense.InitiateAssociation:output_type -> steam.client.CSiteLicense_InitiateAssociation_Response
	7,  // 13: steam.client.SiteLicense.LCSAuthenticate:output_type -> steam.client.CSiteLicense_LCSAuthenticate_Response
	9,  // 14: steam.client.SiteLicense.LCSAssociateUser:output_type -> steam.client.CSiteLicense_LCSAssociateUser_Response
	11, // 15: steam.client.SiteLicense.ClientSeatCheckout:output_type -> steam.client.CSiteLicense_ClientSeatCheckout_Response
	13, // 16: steam.client.SiteLicense.ClientGetAvailableSeats:output_type -> steam.client.CSiteLicense_ClientGetAvailableSeats_Response
	9,  // [9:17] is the sub-list for method output_type
	1,  // [1:9] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_site_license_steamclient_proto_init() }
func file_steam_client_steammessages_site_license_steamclient_proto_init() {
	if File_steam_client_steammessages_site_license_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteManagerClient_IncomingClient_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteManagerClient_IncomingClient_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_ClientSeatCheckout_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteManagerClient_TrackedPayments_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_InitiateAssociation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_InitiateAssociation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_LCSAuthenticate_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_LCSAuthenticate_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_LCSAssociateUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_LCSAssociateUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_ClientSeatCheckout_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_ClientSeatCheckout_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_ClientGetAvailableSeats_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteLicense_ClientGetAvailableSeats_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_site_license_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSiteManagerClient_TrackedPayments_Notification_Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_site_license_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steam_client_steammessages_site_license_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_site_license_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_site_license_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_site_license_steamclient_proto = out.File
	file_steam_client_steammessages_site_license_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_site_license_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_site_license_steamclient_proto_depIdxs = nil
}
