// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/client/steammessages_partnerapps.steamclient.proto

package client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CPartnerApps_RequestUploadToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid    *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPartnerApps_RequestUploadToken_Request) Reset() {
	*x = CPartnerApps_RequestUploadToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_RequestUploadToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_RequestUploadToken_Request) ProtoMessage() {}

func (x *CPartnerApps_RequestUploadToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_RequestUploadToken_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_RequestUploadToken_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CPartnerApps_RequestUploadToken_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CPartnerApps_RequestUploadToken_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPartnerApps_RequestUploadToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadToken *uint64 `protobuf:"varint,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	Location    *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	RoutingId   *uint64 `protobuf:"varint,3,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
}

func (x *CPartnerApps_RequestUploadToken_Response) Reset() {
	*x = CPartnerApps_RequestUploadToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_RequestUploadToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_RequestUploadToken_Response) ProtoMessage() {}

func (x *CPartnerApps_RequestUploadToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_RequestUploadToken_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_RequestUploadToken_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CPartnerApps_RequestUploadToken_Response) GetUploadToken() uint64 {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return 0
}

func (x *CPartnerApps_RequestUploadToken_Response) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *CPartnerApps_RequestUploadToken_Response) GetRoutingId() uint64 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

type CPartnerApps_FinishUpload_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadToken *uint64 `protobuf:"varint,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	RoutingId   *uint64 `protobuf:"varint,2,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
	AppId       *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPartnerApps_FinishUpload_Request) Reset() {
	*x = CPartnerApps_FinishUpload_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUpload_Request) ProtoMessage() {}

func (x *CPartnerApps_FinishUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUpload_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUpload_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CPartnerApps_FinishUpload_Request) GetUploadToken() uint64 {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return 0
}

func (x *CPartnerApps_FinishUpload_Request) GetRoutingId() uint64 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

func (x *CPartnerApps_FinishUpload_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CPartnerApps_FinishUploadKVSign_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedInstallscript *string `protobuf:"bytes,1,opt,name=signed_installscript,json=signedInstallscript" json:"signed_installscript,omitempty"`
}

func (x *CPartnerApps_FinishUploadKVSign_Response) Reset() {
	*x = CPartnerApps_FinishUploadKVSign_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUploadKVSign_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUploadKVSign_Response) ProtoMessage() {}

func (x *CPartnerApps_FinishUploadKVSign_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUploadKVSign_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUploadKVSign_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CPartnerApps_FinishUploadKVSign_Response) GetSignedInstallscript() string {
	if x != nil && x.SignedInstallscript != nil {
		return *x.SignedInstallscript
	}
	return ""
}

type CPartnerApps_FinishUploadLegacyDRM_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadToken *uint64 `protobuf:"varint,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	RoutingId   *uint64 `protobuf:"varint,2,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
	AppId       *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Flags       *uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	ToolName    *string `protobuf:"bytes,5,opt,name=tool_name,json=toolName" json:"tool_name,omitempty"`
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) Reset() {
	*x = CPartnerApps_FinishUploadLegacyDRM_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUploadLegacyDRM_Request) ProtoMessage() {}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUploadLegacyDRM_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUploadLegacyDRM_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) GetUploadToken() uint64 {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return 0
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) GetRoutingId() uint64 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Request) GetToolName() string {
	if x != nil && x.ToolName != nil {
		return *x.ToolName
	}
	return ""
}

type CPartnerApps_FinishUploadLegacyDRM_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId *string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Response) Reset() {
	*x = CPartnerApps_FinishUploadLegacyDRM_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUploadLegacyDRM_Response) ProtoMessage() {}

func (x *CPartnerApps_FinishUploadLegacyDRM_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUploadLegacyDRM_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUploadLegacyDRM_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CPartnerApps_FinishUploadLegacyDRM_Response) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

type CPartnerApps_FinishUpload_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPartnerApps_FinishUpload_Response) Reset() {
	*x = CPartnerApps_FinishUpload_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUpload_Response) ProtoMessage() {}

func (x *CPartnerApps_FinishUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUpload_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUpload_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{6}
}

type CPartnerApps_FinishUploadDepot_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadToken *uint64 `protobuf:"varint,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	RoutingId   *uint64 `protobuf:"varint,2,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
	AppId       *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId     *uint32 `protobuf:"varint,4,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	BuildFlags  *uint32 `protobuf:"varint,5,opt,name=build_flags,json=buildFlags" json:"build_flags,omitempty"`
}

func (x *CPartnerApps_FinishUploadDepot_Request) Reset() {
	*x = CPartnerApps_FinishUploadDepot_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUploadDepot_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUploadDepot_Request) ProtoMessage() {}

func (x *CPartnerApps_FinishUploadDepot_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUploadDepot_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUploadDepot_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CPartnerApps_FinishUploadDepot_Request) GetUploadToken() uint64 {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return 0
}

func (x *CPartnerApps_FinishUploadDepot_Request) GetRoutingId() uint64 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

func (x *CPartnerApps_FinishUploadDepot_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPartnerApps_FinishUploadDepot_Request) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CPartnerApps_FinishUploadDepot_Request) GetBuildFlags() uint32 {
	if x != nil && x.BuildFlags != nil {
		return *x.BuildFlags
	}
	return 0
}

type CPartnerApps_FinishUploadDepot_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPartnerApps_FinishUploadDepot_Response) Reset() {
	*x = CPartnerApps_FinishUploadDepot_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FinishUploadDepot_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FinishUploadDepot_Response) ProtoMessage() {}

func (x *CPartnerApps_FinishUploadDepot_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FinishUploadDepot_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FinishUploadDepot_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{8}
}

type CPartnerApps_GetDepotBuildResult_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadToken *uint64 `protobuf:"varint,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	RoutingId   *uint64 `protobuf:"varint,2,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
}

func (x *CPartnerApps_GetDepotBuildResult_Request) Reset() {
	*x = CPartnerApps_GetDepotBuildResult_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_GetDepotBuildResult_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_GetDepotBuildResult_Request) ProtoMessage() {}

func (x *CPartnerApps_GetDepotBuildResult_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_GetDepotBuildResult_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_GetDepotBuildResult_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CPartnerApps_GetDepotBuildResult_Request) GetUploadToken() uint64 {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return 0
}

func (x *CPartnerApps_GetDepotBuildResult_Request) GetRoutingId() uint64 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

type CPartnerApps_GetDepotBuildResult_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestId *uint64 `protobuf:"varint,1,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	ErrorMsg   *string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (x *CPartnerApps_GetDepotBuildResult_Response) Reset() {
	*x = CPartnerApps_GetDepotBuildResult_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_GetDepotBuildResult_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_GetDepotBuildResult_Response) ProtoMessage() {}

func (x *CPartnerApps_GetDepotBuildResult_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_GetDepotBuildResult_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_GetDepotBuildResult_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CPartnerApps_GetDepotBuildResult_Response) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CPartnerApps_GetDepotBuildResult_Response) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type CPartnerApps_FindDRMUploads_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *int32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPartnerApps_FindDRMUploads_Request) Reset() {
	*x = CPartnerApps_FindDRMUploads_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FindDRMUploads_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FindDRMUploads_Request) ProtoMessage() {}

func (x *CPartnerApps_FindDRMUploads_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FindDRMUploads_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FindDRMUploads_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CPartnerApps_FindDRMUploads_Request) GetAppId() int32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CPartnerApps_ExistingDRMUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId       *string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	AppId        *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	ActorId      *int32  `protobuf:"varint,3,opt,name=actor_id,json=actorId" json:"actor_id,omitempty"`
	SuppliedName *string `protobuf:"bytes,5,opt,name=supplied_name,json=suppliedName" json:"supplied_name,omitempty"`
	Flags        *uint32 `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	ModType      *string `protobuf:"bytes,7,opt,name=mod_type,json=modType" json:"mod_type,omitempty"`
	Timestamp    *uint32 `protobuf:"fixed32,8,opt,name=timestamp" json:"timestamp,omitempty"`
	OrigFileId   *string `protobuf:"bytes,9,opt,name=orig_file_id,json=origFileId" json:"orig_file_id,omitempty"`
}

func (x *CPartnerApps_ExistingDRMUpload) Reset() {
	*x = CPartnerApps_ExistingDRMUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_ExistingDRMUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_ExistingDRMUpload) ProtoMessage() {}

func (x *CPartnerApps_ExistingDRMUpload) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_ExistingDRMUpload.ProtoReflect.Descriptor instead.
func (*CPartnerApps_ExistingDRMUpload) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CPartnerApps_ExistingDRMUpload) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *CPartnerApps_ExistingDRMUpload) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPartnerApps_ExistingDRMUpload) GetActorId() int32 {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return 0
}

func (x *CPartnerApps_ExistingDRMUpload) GetSuppliedName() string {
	if x != nil && x.SuppliedName != nil {
		return *x.SuppliedName
	}
	return ""
}

func (x *CPartnerApps_ExistingDRMUpload) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CPartnerApps_ExistingDRMUpload) GetModType() string {
	if x != nil && x.ModType != nil {
		return *x.ModType
	}
	return ""
}

func (x *CPartnerApps_ExistingDRMUpload) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPartnerApps_ExistingDRMUpload) GetOrigFileId() string {
	if x != nil && x.OrigFileId != nil {
		return *x.OrigFileId
	}
	return ""
}

type CPartnerApps_FindDRMUploads_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uploads []*CPartnerApps_ExistingDRMUpload `protobuf:"bytes,1,rep,name=uploads" json:"uploads,omitempty"`
}

func (x *CPartnerApps_FindDRMUploads_Response) Reset() {
	*x = CPartnerApps_FindDRMUploads_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_FindDRMUploads_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_FindDRMUploads_Response) ProtoMessage() {}

func (x *CPartnerApps_FindDRMUploads_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_FindDRMUploads_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_FindDRMUploads_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CPartnerApps_FindDRMUploads_Response) GetUploads() []*CPartnerApps_ExistingDRMUpload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

type CPartnerApps_Download_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId *string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	AppId  *int32  `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPartnerApps_Download_Request) Reset() {
	*x = CPartnerApps_Download_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_Download_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_Download_Request) ProtoMessage() {}

func (x *CPartnerApps_Download_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_Download_Request.ProtoReflect.Descriptor instead.
func (*CPartnerApps_Download_Request) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CPartnerApps_Download_Request) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *CPartnerApps_Download_Request) GetAppId() int32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CPartnerApps_Download_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl *string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl" json:"download_url,omitempty"`
	AppId       *int32  `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPartnerApps_Download_Response) Reset() {
	*x = CPartnerApps_Download_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPartnerApps_Download_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPartnerApps_Download_Response) ProtoMessage() {}

func (x *CPartnerApps_Download_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPartnerApps_Download_Response.ProtoReflect.Descriptor instead.
func (*CPartnerApps_Download_Response) Descriptor() ([]byte, []int) {
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CPartnerApps_Download_Response) GetDownloadUrl() string {
	if x != nil && x.DownloadUrl != nil {
		return *x.DownloadUrl
	}
	return ""
}

func (x *CPartnerApps_Download_Response) GetAppId() int32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

var File_steam_client_steammessages_partnerapps_steamclient_proto protoreflect.FileDescriptor

var file_steam_client_steammessages_partnerapps_steamclient_proto_rawDesc = []byte{
	0x0a, 0x38, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x39, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x27, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x28, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x21, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x28, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x2a, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x52, 0x4d, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x2b, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x52, 0x4d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x26, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x28,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x29, 0x43, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x3c, 0x0a, 0x23, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x1e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x52, 0x4d,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x24, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x52, 0x4d, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1e, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x32, 0xbf, 0x10, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4b, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x40, 0x82, 0xb5, 0x18, 0x3c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x2f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x52,
	0x4d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xb5, 0x18,
	0x3c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x20, 0x2f, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0xcf, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x45, 0x47, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x20, 0x2f, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0xbd, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x69,
	0x70, 0x65, 0x20, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0xc5, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4b, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4b, 0x56, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0x82, 0xb5, 0x18, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x73, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x38, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x52, 0x4d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x52, 0x4d, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0xb3, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x45, 0x47, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0xbf,
	0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0xbe, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x47,
	0x65, 0x74, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x20, 0x5a, 0x49,
	0x50, 0x12, 0xa7, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x52, 0x4d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18,
	0x2a, 0x46, 0x69, 0x6e, 0x64, 0x73, 0x20, 0x4e, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x08, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x73, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x70, 0x70, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x3e, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x80, 0x01, 0x01,
}

var (
	file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescOnce sync.Once
	file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescData = file_steam_client_steammessages_partnerapps_steamclient_proto_rawDesc
)

func file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescGZIP() []byte {
	file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescOnce.Do(func() {
		file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescData)
	})
	return file_steam_client_steammessages_partnerapps_steamclient_proto_rawDescData
}

var file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_steam_client_steammessages_partnerapps_steamclient_proto_goTypes = []interface{}{
	(*CPartnerApps_RequestUploadToken_Request)(nil),     // 0: steam.client.CPartnerApps_RequestUploadToken_Request
	(*CPartnerApps_RequestUploadToken_Response)(nil),    // 1: steam.client.CPartnerApps_RequestUploadToken_Response
	(*CPartnerApps_FinishUpload_Request)(nil),           // 2: steam.client.CPartnerApps_FinishUpload_Request
	(*CPartnerApps_FinishUploadKVSign_Response)(nil),    // 3: steam.client.CPartnerApps_FinishUploadKVSign_Response
	(*CPartnerApps_FinishUploadLegacyDRM_Request)(nil),  // 4: steam.client.CPartnerApps_FinishUploadLegacyDRM_Request
	(*CPartnerApps_FinishUploadLegacyDRM_Response)(nil), // 5: steam.client.CPartnerApps_FinishUploadLegacyDRM_Response
	(*CPartnerApps_FinishUpload_Response)(nil),          // 6: steam.client.CPartnerApps_FinishUpload_Response
	(*CPartnerApps_FinishUploadDepot_Request)(nil),      // 7: steam.client.CPartnerApps_FinishUploadDepot_Request
	(*CPartnerApps_FinishUploadDepot_Response)(nil),     // 8: steam.client.CPartnerApps_FinishUploadDepot_Response
	(*CPartnerApps_GetDepotBuildResult_Request)(nil),    // 9: steam.client.CPartnerApps_GetDepotBuildResult_Request
	(*CPartnerApps_GetDepotBuildResult_Response)(nil),   // 10: steam.client.CPartnerApps_GetDepotBuildResult_Response
	(*CPartnerApps_FindDRMUploads_Request)(nil),         // 11: steam.client.CPartnerApps_FindDRMUploads_Request
	(*CPartnerApps_ExistingDRMUpload)(nil),              // 12: steam.client.CPartnerApps_ExistingDRMUpload
	(*CPartnerApps_FindDRMUploads_Response)(nil),        // 13: steam.client.CPartnerApps_FindDRMUploads_Response
	(*CPartnerApps_Download_Request)(nil),               // 14: steam.client.CPartnerApps_Download_Request
	(*CPartnerApps_Download_Response)(nil),              // 15: steam.client.CPartnerApps_Download_Response
}
var file_steam_client_steammessages_partnerapps_steamclient_proto_depIdxs = []int32{
	12, // 0: steam.client.CPartnerApps_FindDRMUploads_Response.uploads:type_name -> steam.client.CPartnerApps_ExistingDRMUpload
	0,  // 1: steam.client.PartnerApps.RequestKVSignUploadToken:input_type -> steam.client.CPartnerApps_RequestUploadToken_Request
	0,  // 2: steam.client.PartnerApps.RequestDRMUploadToken:input_type -> steam.client.CPartnerApps_RequestUploadToken_Request
	0,  // 3: steam.client.PartnerApps.RequestCEGUploadToken:input_type -> steam.client.CPartnerApps_RequestUploadToken_Request
	0,  // 4: steam.client.PartnerApps.RequestDepotUploadToken:input_type -> steam.client.CPartnerApps_RequestUploadToken_Request
	2,  // 5: steam.client.PartnerApps.FinishUploadKVSign:input_type -> steam.client.CPartnerApps_FinishUpload_Request
	4,  // 6: steam.client.PartnerApps.FinishUploadDRMUpload:input_type -> steam.client.CPartnerApps_FinishUploadLegacyDRM_Request
	2,  // 7: steam.client.PartnerApps.FinishUploadCEGUpload:input_type -> steam.client.CPartnerApps_FinishUpload_Request
	7,  // 8: steam.client.PartnerApps.FinishUploadDepotUpload:input_type -> steam.client.CPartnerApps_FinishUploadDepot_Request
	9,  // 9: steam.client.PartnerApps.GetDepotBuildResult:input_type -> steam.client.CPartnerApps_GetDepotBuildResult_Request
	11, // 10: steam.client.PartnerApps.FindDRMUploads:input_type -> steam.client.CPartnerApps_FindDRMUploads_Request
	14, // 11: steam.client.PartnerApps.Download:input_type -> steam.client.CPartnerApps_Download_Request
	1,  // 12: steam.client.PartnerApps.RequestKVSignUploadToken:output_type -> steam.client.CPartnerApps_RequestUploadToken_Response
	1,  // 13: steam.client.PartnerApps.RequestDRMUploadToken:output_type -> steam.client.CPartnerApps_RequestUploadToken_Response
	1,  // 14: steam.client.PartnerApps.RequestCEGUploadToken:output_type -> steam.client.CPartnerApps_RequestUploadToken_Response
	1,  // 15: steam.client.PartnerApps.RequestDepotUploadToken:output_type -> steam.client.CPartnerApps_RequestUploadToken_Response
	3,  // 16: steam.client.PartnerApps.FinishUploadKVSign:output_type -> steam.client.CPartnerApps_FinishUploadKVSign_Response
	5,  // 17: steam.client.PartnerApps.FinishUploadDRMUpload:output_type -> steam.client.CPartnerApps_FinishUploadLegacyDRM_Response
	6,  // 18: steam.client.PartnerApps.FinishUploadCEGUpload:output_type -> steam.client.CPartnerApps_FinishUpload_Response
	8,  // 19: steam.client.PartnerApps.FinishUploadDepotUpload:output_type -> steam.client.CPartnerApps_FinishUploadDepot_Response
	10, // 20: steam.client.PartnerApps.GetDepotBuildResult:output_type -> steam.client.CPartnerApps_GetDepotBuildResult_Response
	13, // 21: steam.client.PartnerApps.FindDRMUploads:output_type -> steam.client.CPartnerApps_FindDRMUploads_Response
	15, // 22: steam.client.PartnerApps.Download:output_type -> steam.client.CPartnerApps_Download_Response
	12, // [12:23] is the sub-list for method output_type
	1,  // [1:12] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_steam_client_steammessages_partnerapps_steamclient_proto_init() }
func file_steam_client_steammessages_partnerapps_steamclient_proto_init() {
	if File_steam_client_steammessages_partnerapps_steamclient_proto != nil {
		return
	}
	file_steam_client_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_RequestUploadToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_RequestUploadToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUpload_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUploadKVSign_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUploadLegacyDRM_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUploadLegacyDRM_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUpload_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUploadDepot_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FinishUploadDepot_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_GetDepotBuildResult_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_GetDepotBuildResult_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FindDRMUploads_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_ExistingDRMUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_FindDRMUploads_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_Download_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPartnerApps_Download_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_client_steammessages_partnerapps_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steam_client_steammessages_partnerapps_steamclient_proto_goTypes,
		DependencyIndexes: file_steam_client_steammessages_partnerapps_steamclient_proto_depIdxs,
		MessageInfos:      file_steam_client_steammessages_partnerapps_steamclient_proto_msgTypes,
	}.Build()
	File_steam_client_steammessages_partnerapps_steamclient_proto = out.File
	file_steam_client_steammessages_partnerapps_steamclient_proto_rawDesc = nil
	file_steam_client_steammessages_partnerapps_steamclient_proto_goTypes = nil
	file_steam_client_steammessages_partnerapps_steamclient_proto_depIdxs = nil
}
