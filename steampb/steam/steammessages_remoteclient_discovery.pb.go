// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/steammessages_remoteclient_discovery.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ERemoteClientBroadcastMsg int32

const (
	ERemoteClientBroadcastMsg_k_ERemoteClientBroadcastMsgDiscovery          ERemoteClientBroadcastMsg = 0
	ERemoteClientBroadcastMsg_k_ERemoteClientBroadcastMsgStatus             ERemoteClientBroadcastMsg = 1
	ERemoteClientBroadcastMsg_k_ERemoteClientBroadcastMsgOffline            ERemoteClientBroadcastMsg = 2
	ERemoteClientBroadcastMsg_k_ERemoteDeviceAuthorizationRequest           ERemoteClientBroadcastMsg = 3
	ERemoteClientBroadcastMsg_k_ERemoteDeviceAuthorizationResponse          ERemoteClientBroadcastMsg = 4
	ERemoteClientBroadcastMsg_k_ERemoteDeviceStreamingRequest               ERemoteClientBroadcastMsg = 5
	ERemoteClientBroadcastMsg_k_ERemoteDeviceStreamingResponse              ERemoteClientBroadcastMsg = 6
	ERemoteClientBroadcastMsg_k_ERemoteDeviceProofRequest                   ERemoteClientBroadcastMsg = 7
	ERemoteClientBroadcastMsg_k_ERemoteDeviceProofResponse                  ERemoteClientBroadcastMsg = 8
	ERemoteClientBroadcastMsg_k_ERemoteDeviceAuthorizationCancelRequest     ERemoteClientBroadcastMsg = 9
	ERemoteClientBroadcastMsg_k_ERemoteDeviceStreamingCancelRequest         ERemoteClientBroadcastMsg = 10
	ERemoteClientBroadcastMsg_k_ERemoteClientBroadcastMsgClientIDDeconflict ERemoteClientBroadcastMsg = 11
	ERemoteClientBroadcastMsg_k_ERemoteDeviceStreamTransportSignal          ERemoteClientBroadcastMsg = 12
	ERemoteClientBroadcastMsg_k_ERemoteDeviceStreamingProgress              ERemoteClientBroadcastMsg = 13
)

// Enum value maps for ERemoteClientBroadcastMsg.
var (
	ERemoteClientBroadcastMsg_name = map[int32]string{
		0:  "k_ERemoteClientBroadcastMsgDiscovery",
		1:  "k_ERemoteClientBroadcastMsgStatus",
		2:  "k_ERemoteClientBroadcastMsgOffline",
		3:  "k_ERemoteDeviceAuthorizationRequest",
		4:  "k_ERemoteDeviceAuthorizationResponse",
		5:  "k_ERemoteDeviceStreamingRequest",
		6:  "k_ERemoteDeviceStreamingResponse",
		7:  "k_ERemoteDeviceProofRequest",
		8:  "k_ERemoteDeviceProofResponse",
		9:  "k_ERemoteDeviceAuthorizationCancelRequest",
		10: "k_ERemoteDeviceStreamingCancelRequest",
		11: "k_ERemoteClientBroadcastMsgClientIDDeconflict",
		12: "k_ERemoteDeviceStreamTransportSignal",
		13: "k_ERemoteDeviceStreamingProgress",
	}
	ERemoteClientBroadcastMsg_value = map[string]int32{
		"k_ERemoteClientBroadcastMsgDiscovery":          0,
		"k_ERemoteClientBroadcastMsgStatus":             1,
		"k_ERemoteClientBroadcastMsgOffline":            2,
		"k_ERemoteDeviceAuthorizationRequest":           3,
		"k_ERemoteDeviceAuthorizationResponse":          4,
		"k_ERemoteDeviceStreamingRequest":               5,
		"k_ERemoteDeviceStreamingResponse":              6,
		"k_ERemoteDeviceProofRequest":                   7,
		"k_ERemoteDeviceProofResponse":                  8,
		"k_ERemoteDeviceAuthorizationCancelRequest":     9,
		"k_ERemoteDeviceStreamingCancelRequest":         10,
		"k_ERemoteClientBroadcastMsgClientIDDeconflict": 11,
		"k_ERemoteDeviceStreamTransportSignal":          12,
		"k_ERemoteDeviceStreamingProgress":              13,
	}
)

func (x ERemoteClientBroadcastMsg) Enum() *ERemoteClientBroadcastMsg {
	p := new(ERemoteClientBroadcastMsg)
	*p = x
	return p
}

func (x ERemoteClientBroadcastMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERemoteClientBroadcastMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[0].Descriptor()
}

func (ERemoteClientBroadcastMsg) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[0]
}

func (x ERemoteClientBroadcastMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERemoteClientBroadcastMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERemoteClientBroadcastMsg(num)
	return nil
}

// Deprecated: Use ERemoteClientBroadcastMsg.Descriptor instead.
func (ERemoteClientBroadcastMsg) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{0}
}

type ERemoteClientService int32

const (
	ERemoteClientService_k_ERemoteClientServiceNone          ERemoteClientService = 0
	ERemoteClientService_k_ERemoteClientServiceRemoteControl ERemoteClientService = 1
	ERemoteClientService_k_ERemoteClientServiceGameStreaming ERemoteClientService = 2
	ERemoteClientService_k_ERemoteClientServiceSiteLicense   ERemoteClientService = 4
	ERemoteClientService_k_ERemoteClientServiceContentCache  ERemoteClientService = 8
)

// Enum value maps for ERemoteClientService.
var (
	ERemoteClientService_name = map[int32]string{
		0: "k_ERemoteClientServiceNone",
		1: "k_ERemoteClientServiceRemoteControl",
		2: "k_ERemoteClientServiceGameStreaming",
		4: "k_ERemoteClientServiceSiteLicense",
		8: "k_ERemoteClientServiceContentCache",
	}
	ERemoteClientService_value = map[string]int32{
		"k_ERemoteClientServiceNone":          0,
		"k_ERemoteClientServiceRemoteControl": 1,
		"k_ERemoteClientServiceGameStreaming": 2,
		"k_ERemoteClientServiceSiteLicense":   4,
		"k_ERemoteClientServiceContentCache":  8,
	}
)

func (x ERemoteClientService) Enum() *ERemoteClientService {
	p := new(ERemoteClientService)
	*p = x
	return p
}

func (x ERemoteClientService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERemoteClientService) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[1].Descriptor()
}

func (ERemoteClientService) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[1]
}

func (x ERemoteClientService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERemoteClientService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERemoteClientService(num)
	return nil
}

// Deprecated: Use ERemoteClientService.Descriptor instead.
func (ERemoteClientService) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{1}
}

type ERemoteDeviceAuthorizationResult int32

const (
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationSuccess     ERemoteDeviceAuthorizationResult = 0
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationDenied      ERemoteDeviceAuthorizationResult = 1
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationNotLoggedIn ERemoteDeviceAuthorizationResult = 2
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationOffline     ERemoteDeviceAuthorizationResult = 3
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationBusy        ERemoteDeviceAuthorizationResult = 4
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationInProgress  ERemoteDeviceAuthorizationResult = 5
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationTimedOut    ERemoteDeviceAuthorizationResult = 6
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationFailed      ERemoteDeviceAuthorizationResult = 7
	ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationCanceled    ERemoteDeviceAuthorizationResult = 8
)

// Enum value maps for ERemoteDeviceAuthorizationResult.
var (
	ERemoteDeviceAuthorizationResult_name = map[int32]string{
		0: "k_ERemoteDeviceAuthorizationSuccess",
		1: "k_ERemoteDeviceAuthorizationDenied",
		2: "k_ERemoteDeviceAuthorizationNotLoggedIn",
		3: "k_ERemoteDeviceAuthorizationOffline",
		4: "k_ERemoteDeviceAuthorizationBusy",
		5: "k_ERemoteDeviceAuthorizationInProgress",
		6: "k_ERemoteDeviceAuthorizationTimedOut",
		7: "k_ERemoteDeviceAuthorizationFailed",
		8: "k_ERemoteDeviceAuthorizationCanceled",
	}
	ERemoteDeviceAuthorizationResult_value = map[string]int32{
		"k_ERemoteDeviceAuthorizationSuccess":     0,
		"k_ERemoteDeviceAuthorizationDenied":      1,
		"k_ERemoteDeviceAuthorizationNotLoggedIn": 2,
		"k_ERemoteDeviceAuthorizationOffline":     3,
		"k_ERemoteDeviceAuthorizationBusy":        4,
		"k_ERemoteDeviceAuthorizationInProgress":  5,
		"k_ERemoteDeviceAuthorizationTimedOut":    6,
		"k_ERemoteDeviceAuthorizationFailed":      7,
		"k_ERemoteDeviceAuthorizationCanceled":    8,
	}
)

func (x ERemoteDeviceAuthorizationResult) Enum() *ERemoteDeviceAuthorizationResult {
	p := new(ERemoteDeviceAuthorizationResult)
	*p = x
	return p
}

func (x ERemoteDeviceAuthorizationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERemoteDeviceAuthorizationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[2].Descriptor()
}

func (ERemoteDeviceAuthorizationResult) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[2]
}

func (x ERemoteDeviceAuthorizationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERemoteDeviceAuthorizationResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERemoteDeviceAuthorizationResult(num)
	return nil
}

// Deprecated: Use ERemoteDeviceAuthorizationResult.Descriptor instead.
func (ERemoteDeviceAuthorizationResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{2}
}

type EStreamDeviceFormFactor int32

const (
	EStreamDeviceFormFactor_k_EStreamDeviceFormFactorUnknown  EStreamDeviceFormFactor = 0
	EStreamDeviceFormFactor_k_EStreamDeviceFormFactorPhone    EStreamDeviceFormFactor = 1
	EStreamDeviceFormFactor_k_EStreamDeviceFormFactorTablet   EStreamDeviceFormFactor = 2
	EStreamDeviceFormFactor_k_EStreamDeviceFormFactorComputer EStreamDeviceFormFactor = 3
	EStreamDeviceFormFactor_k_EStreamDeviceFormFactorTV       EStreamDeviceFormFactor = 4
)

// Enum value maps for EStreamDeviceFormFactor.
var (
	EStreamDeviceFormFactor_name = map[int32]string{
		0: "k_EStreamDeviceFormFactorUnknown",
		1: "k_EStreamDeviceFormFactorPhone",
		2: "k_EStreamDeviceFormFactorTablet",
		3: "k_EStreamDeviceFormFactorComputer",
		4: "k_EStreamDeviceFormFactorTV",
	}
	EStreamDeviceFormFactor_value = map[string]int32{
		"k_EStreamDeviceFormFactorUnknown":  0,
		"k_EStreamDeviceFormFactorPhone":    1,
		"k_EStreamDeviceFormFactorTablet":   2,
		"k_EStreamDeviceFormFactorComputer": 3,
		"k_EStreamDeviceFormFactorTV":       4,
	}
)

func (x EStreamDeviceFormFactor) Enum() *EStreamDeviceFormFactor {
	p := new(EStreamDeviceFormFactor)
	*p = x
	return p
}

func (x EStreamDeviceFormFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamDeviceFormFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[3].Descriptor()
}

func (EStreamDeviceFormFactor) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[3]
}

func (x EStreamDeviceFormFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamDeviceFormFactor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamDeviceFormFactor(num)
	return nil
}

// Deprecated: Use EStreamDeviceFormFactor.Descriptor instead.
func (EStreamDeviceFormFactor) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{3}
}

type EStreamTransport int32

const (
	EStreamTransport_k_EStreamTransportNone         EStreamTransport = 0
	EStreamTransport_k_EStreamTransportUDP          EStreamTransport = 1
	EStreamTransport_k_EStreamTransportUDPRelay     EStreamTransport = 2
	EStreamTransport_k_EStreamTransportWebRTC       EStreamTransport = 3
	EStreamTransport_k_EStreamTransportSDR          EStreamTransport = 4
	EStreamTransport_k_EStreamTransportUDP_SNS      EStreamTransport = 5
	EStreamTransport_k_EStreamTransportUDPRelay_SNS EStreamTransport = 6
)

// Enum value maps for EStreamTransport.
var (
	EStreamTransport_name = map[int32]string{
		0: "k_EStreamTransportNone",
		1: "k_EStreamTransportUDP",
		2: "k_EStreamTransportUDPRelay",
		3: "k_EStreamTransportWebRTC",
		4: "k_EStreamTransportSDR",
		5: "k_EStreamTransportUDP_SNS",
		6: "k_EStreamTransportUDPRelay_SNS",
	}
	EStreamTransport_value = map[string]int32{
		"k_EStreamTransportNone":         0,
		"k_EStreamTransportUDP":          1,
		"k_EStreamTransportUDPRelay":     2,
		"k_EStreamTransportWebRTC":       3,
		"k_EStreamTransportSDR":          4,
		"k_EStreamTransportUDP_SNS":      5,
		"k_EStreamTransportUDPRelay_SNS": 6,
	}
)

func (x EStreamTransport) Enum() *EStreamTransport {
	p := new(EStreamTransport)
	*p = x
	return p
}

func (x EStreamTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[4].Descriptor()
}

func (EStreamTransport) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[4]
}

func (x EStreamTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamTransport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamTransport(num)
	return nil
}

// Deprecated: Use EStreamTransport.Descriptor instead.
func (EStreamTransport) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{4}
}

type EStreamInterface int32

const (
	EStreamInterface_k_EStreamInterfaceDefault     EStreamInterface = 0
	EStreamInterface_k_EStreamInterfaceRecentGames EStreamInterface = 1
	EStreamInterface_k_EStreamInterfaceBigPicture  EStreamInterface = 2
	EStreamInterface_k_EStreamInterfaceDesktop     EStreamInterface = 3
)

// Enum value maps for EStreamInterface.
var (
	EStreamInterface_name = map[int32]string{
		0: "k_EStreamInterfaceDefault",
		1: "k_EStreamInterfaceRecentGames",
		2: "k_EStreamInterfaceBigPicture",
		3: "k_EStreamInterfaceDesktop",
	}
	EStreamInterface_value = map[string]int32{
		"k_EStreamInterfaceDefault":     0,
		"k_EStreamInterfaceRecentGames": 1,
		"k_EStreamInterfaceBigPicture":  2,
		"k_EStreamInterfaceDesktop":     3,
	}
)

func (x EStreamInterface) Enum() *EStreamInterface {
	p := new(EStreamInterface)
	*p = x
	return p
}

func (x EStreamInterface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStreamInterface) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[5].Descriptor()
}

func (EStreamInterface) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[5]
}

func (x EStreamInterface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStreamInterface) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStreamInterface(num)
	return nil
}

// Deprecated: Use EStreamInterface.Descriptor instead.
func (EStreamInterface) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{5}
}

type ERemoteDeviceStreamingResult int32

const (
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingSuccess              ERemoteDeviceStreamingResult = 0
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingUnauthorized         ERemoteDeviceStreamingResult = 1
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingScreenLocked         ERemoteDeviceStreamingResult = 2
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingFailed               ERemoteDeviceStreamingResult = 3
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingBusy                 ERemoteDeviceStreamingResult = 4
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingInProgress           ERemoteDeviceStreamingResult = 5
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingCanceled             ERemoteDeviceStreamingResult = 6
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingDriversNotInstalled  ERemoteDeviceStreamingResult = 7
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingDisabled             ERemoteDeviceStreamingResult = 8
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingBroadcastingActive   ERemoteDeviceStreamingResult = 9
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingVRActive             ERemoteDeviceStreamingResult = 10
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingPINRequired          ERemoteDeviceStreamingResult = 11
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingTransportUnavailable ERemoteDeviceStreamingResult = 12
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingInvisible            ERemoteDeviceStreamingResult = 13
	ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingGameLaunchFailed     ERemoteDeviceStreamingResult = 14
)

// Enum value maps for ERemoteDeviceStreamingResult.
var (
	ERemoteDeviceStreamingResult_name = map[int32]string{
		0:  "k_ERemoteDeviceStreamingSuccess",
		1:  "k_ERemoteDeviceStreamingUnauthorized",
		2:  "k_ERemoteDeviceStreamingScreenLocked",
		3:  "k_ERemoteDeviceStreamingFailed",
		4:  "k_ERemoteDeviceStreamingBusy",
		5:  "k_ERemoteDeviceStreamingInProgress",
		6:  "k_ERemoteDeviceStreamingCanceled",
		7:  "k_ERemoteDeviceStreamingDriversNotInstalled",
		8:  "k_ERemoteDeviceStreamingDisabled",
		9:  "k_ERemoteDeviceStreamingBroadcastingActive",
		10: "k_ERemoteDeviceStreamingVRActive",
		11: "k_ERemoteDeviceStreamingPINRequired",
		12: "k_ERemoteDeviceStreamingTransportUnavailable",
		13: "k_ERemoteDeviceStreamingInvisible",
		14: "k_ERemoteDeviceStreamingGameLaunchFailed",
	}
	ERemoteDeviceStreamingResult_value = map[string]int32{
		"k_ERemoteDeviceStreamingSuccess":              0,
		"k_ERemoteDeviceStreamingUnauthorized":         1,
		"k_ERemoteDeviceStreamingScreenLocked":         2,
		"k_ERemoteDeviceStreamingFailed":               3,
		"k_ERemoteDeviceStreamingBusy":                 4,
		"k_ERemoteDeviceStreamingInProgress":           5,
		"k_ERemoteDeviceStreamingCanceled":             6,
		"k_ERemoteDeviceStreamingDriversNotInstalled":  7,
		"k_ERemoteDeviceStreamingDisabled":             8,
		"k_ERemoteDeviceStreamingBroadcastingActive":   9,
		"k_ERemoteDeviceStreamingVRActive":             10,
		"k_ERemoteDeviceStreamingPINRequired":          11,
		"k_ERemoteDeviceStreamingTransportUnavailable": 12,
		"k_ERemoteDeviceStreamingInvisible":            13,
		"k_ERemoteDeviceStreamingGameLaunchFailed":     14,
	}
)

func (x ERemoteDeviceStreamingResult) Enum() *ERemoteDeviceStreamingResult {
	p := new(ERemoteDeviceStreamingResult)
	*p = x
	return p
}

func (x ERemoteDeviceStreamingResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERemoteDeviceStreamingResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[6].Descriptor()
}

func (ERemoteDeviceStreamingResult) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[6]
}

func (x ERemoteDeviceStreamingResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERemoteDeviceStreamingResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERemoteDeviceStreamingResult(num)
	return nil
}

// Deprecated: Use ERemoteDeviceStreamingResult.Descriptor instead.
func (ERemoteDeviceStreamingResult) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{6}
}

type CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage int32

const (
	CMsgRemoteDeviceAuthorizationRequest_k_EKeyEscrowUsageStreamingDevice CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage = 0
)

// Enum value maps for CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage.
var (
	CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_name = map[int32]string{
		0: "k_EKeyEscrowUsageStreamingDevice",
	}
	CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_value = map[string]int32{
		"k_EKeyEscrowUsageStreamingDevice": 0,
	}
)

func (x CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) Enum() *CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage {
	p := new(CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage)
	*p = x
	return p
}

func (x CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_steam_steammessages_remoteclient_discovery_proto_enumTypes[7].Descriptor()
}

func (CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) Type() protoreflect.EnumType {
	return &file_steam_steammessages_remoteclient_discovery_proto_enumTypes[7]
}

func (x CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage(num)
	return nil
}

// Deprecated: Use CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage.Descriptor instead.
func (CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage) EnumDescriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgRemoteClientBroadcastHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    *uint64                    `protobuf:"varint,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	MsgType     *ERemoteClientBroadcastMsg `protobuf:"varint,2,opt,name=msg_type,json=msgType,enum=steam.ERemoteClientBroadcastMsg,def=0" json:"msg_type,omitempty"`
	InstanceId  *uint64                    `protobuf:"varint,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	DeviceId    *uint64                    `protobuf:"varint,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	DeviceToken []byte                     `protobuf:"bytes,5,opt,name=device_token,json=deviceToken" json:"device_token,omitempty"`
}

// Default values for CMsgRemoteClientBroadcastHeader fields.
const (
	Default_CMsgRemoteClientBroadcastHeader_MsgType = ERemoteClientBroadcastMsg_k_ERemoteClientBroadcastMsgDiscovery
)

func (x *CMsgRemoteClientBroadcastHeader) Reset() {
	*x = CMsgRemoteClientBroadcastHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientBroadcastHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientBroadcastHeader) ProtoMessage() {}

func (x *CMsgRemoteClientBroadcastHeader) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientBroadcastHeader.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientBroadcastHeader) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgRemoteClientBroadcastHeader) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastHeader) GetMsgType() ERemoteClientBroadcastMsg {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return Default_CMsgRemoteClientBroadcastHeader_MsgType
}

func (x *CMsgRemoteClientBroadcastHeader) GetInstanceId() uint64 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastHeader) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastHeader) GetDeviceToken() []byte {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

type CMsgRemoteClientBroadcastStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version              *int32                                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	MinVersion           *int32                                  `protobuf:"varint,2,opt,name=min_version,json=minVersion" json:"min_version,omitempty"`
	ConnectPort          *uint32                                 `protobuf:"varint,3,opt,name=connect_port,json=connectPort" json:"connect_port,omitempty"`
	Hostname             *string                                 `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	EnabledServices      *uint32                                 `protobuf:"varint,6,opt,name=enabled_services,json=enabledServices" json:"enabled_services,omitempty"`
	Ostype               *int32                                  `protobuf:"varint,7,opt,name=ostype,def=0" json:"ostype,omitempty"`
	Is64Bit              *bool                                   `protobuf:"varint,8,opt,name=is64bit" json:"is64bit,omitempty"`
	Users                []*CMsgRemoteClientBroadcastStatus_User `protobuf:"bytes,9,rep,name=users" json:"users,omitempty"`
	Euniverse            *int32                                  `protobuf:"varint,11,opt,name=euniverse" json:"euniverse,omitempty"`
	Timestamp            *uint32                                 `protobuf:"varint,12,opt,name=timestamp" json:"timestamp,omitempty"`
	ScreenLocked         *bool                                   `protobuf:"varint,13,opt,name=screen_locked,json=screenLocked" json:"screen_locked,omitempty"`
	GamesRunning         *bool                                   `protobuf:"varint,14,opt,name=games_running,json=gamesRunning" json:"games_running,omitempty"`
	MacAddresses         []string                                `protobuf:"bytes,15,rep,name=mac_addresses,json=macAddresses" json:"mac_addresses,omitempty"`
	DownloadLanPeerGroup *uint32                                 `protobuf:"varint,16,opt,name=download_lan_peer_group,json=downloadLanPeerGroup" json:"download_lan_peer_group,omitempty"`
	BroadcastingActive   *bool                                   `protobuf:"varint,17,opt,name=broadcasting_active,json=broadcastingActive" json:"broadcasting_active,omitempty"`
	VrActive             *bool                                   `protobuf:"varint,18,opt,name=vr_active,json=vrActive" json:"vr_active,omitempty"`
	ContentCachePort     *uint32                                 `protobuf:"varint,19,opt,name=content_cache_port,json=contentCachePort" json:"content_cache_port,omitempty"`
	IpAddresses          []string                                `protobuf:"bytes,20,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	PublicIpAddress      *string                                 `protobuf:"bytes,21,opt,name=public_ip_address,json=publicIpAddress" json:"public_ip_address,omitempty"`
	RemoteplayActive     *bool                                   `protobuf:"varint,22,opt,name=remoteplay_active,json=remoteplayActive" json:"remoteplay_active,omitempty"`
}

// Default values for CMsgRemoteClientBroadcastStatus fields.
const (
	Default_CMsgRemoteClientBroadcastStatus_Ostype = int32(0)
)

func (x *CMsgRemoteClientBroadcastStatus) Reset() {
	*x = CMsgRemoteClientBroadcastStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientBroadcastStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientBroadcastStatus) ProtoMessage() {}

func (x *CMsgRemoteClientBroadcastStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientBroadcastStatus.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientBroadcastStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgRemoteClientBroadcastStatus) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetMinVersion() int32 {
	if x != nil && x.MinVersion != nil {
		return *x.MinVersion
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetConnectPort() uint32 {
	if x != nil && x.ConnectPort != nil {
		return *x.ConnectPort
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *CMsgRemoteClientBroadcastStatus) GetEnabledServices() uint32 {
	if x != nil && x.EnabledServices != nil {
		return *x.EnabledServices
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetOstype() int32 {
	if x != nil && x.Ostype != nil {
		return *x.Ostype
	}
	return Default_CMsgRemoteClientBroadcastStatus_Ostype
}

func (x *CMsgRemoteClientBroadcastStatus) GetIs64Bit() bool {
	if x != nil && x.Is64Bit != nil {
		return *x.Is64Bit
	}
	return false
}

func (x *CMsgRemoteClientBroadcastStatus) GetUsers() []*CMsgRemoteClientBroadcastStatus_User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CMsgRemoteClientBroadcastStatus) GetEuniverse() int32 {
	if x != nil && x.Euniverse != nil {
		return *x.Euniverse
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetScreenLocked() bool {
	if x != nil && x.ScreenLocked != nil {
		return *x.ScreenLocked
	}
	return false
}

func (x *CMsgRemoteClientBroadcastStatus) GetGamesRunning() bool {
	if x != nil && x.GamesRunning != nil {
		return *x.GamesRunning
	}
	return false
}

func (x *CMsgRemoteClientBroadcastStatus) GetMacAddresses() []string {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

func (x *CMsgRemoteClientBroadcastStatus) GetDownloadLanPeerGroup() uint32 {
	if x != nil && x.DownloadLanPeerGroup != nil {
		return *x.DownloadLanPeerGroup
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetBroadcastingActive() bool {
	if x != nil && x.BroadcastingActive != nil {
		return *x.BroadcastingActive
	}
	return false
}

func (x *CMsgRemoteClientBroadcastStatus) GetVrActive() bool {
	if x != nil && x.VrActive != nil {
		return *x.VrActive
	}
	return false
}

func (x *CMsgRemoteClientBroadcastStatus) GetContentCachePort() uint32 {
	if x != nil && x.ContentCachePort != nil {
		return *x.ContentCachePort
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *CMsgRemoteClientBroadcastStatus) GetPublicIpAddress() string {
	if x != nil && x.PublicIpAddress != nil {
		return *x.PublicIpAddress
	}
	return ""
}

func (x *CMsgRemoteClientBroadcastStatus) GetRemoteplayActive() bool {
	if x != nil && x.RemoteplayActive != nil {
		return *x.RemoteplayActive
	}
	return false
}

type CMsgRemoteClientBroadcastDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNum    *uint32  `protobuf:"varint,1,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	ClientIds []uint64 `protobuf:"varint,2,rep,name=client_ids,json=clientIds" json:"client_ids,omitempty"`
}

func (x *CMsgRemoteClientBroadcastDiscovery) Reset() {
	*x = CMsgRemoteClientBroadcastDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientBroadcastDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientBroadcastDiscovery) ProtoMessage() {}

func (x *CMsgRemoteClientBroadcastDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientBroadcastDiscovery.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientBroadcastDiscovery) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgRemoteClientBroadcastDiscovery) GetSeqNum() uint32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastDiscovery) GetClientIds() []uint64 {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

type CMsgRemoteClientBroadcastClientIDDeconflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIds []uint64 `protobuf:"varint,2,rep,name=client_ids,json=clientIds" json:"client_ids,omitempty"`
}

func (x *CMsgRemoteClientBroadcastClientIDDeconflict) Reset() {
	*x = CMsgRemoteClientBroadcastClientIDDeconflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientBroadcastClientIDDeconflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientBroadcastClientIDDeconflict) ProtoMessage() {}

func (x *CMsgRemoteClientBroadcastClientIDDeconflict) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientBroadcastClientIDDeconflict.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientBroadcastClientIDDeconflict) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgRemoteClientBroadcastClientIDDeconflict) GetClientIds() []uint64 {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

type CMsgRemoteDeviceAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceToken      []byte  `protobuf:"bytes,1,req,name=device_token,json=deviceToken" json:"device_token,omitempty"`
	DeviceName       *string `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	EncryptedRequest []byte  `protobuf:"bytes,3,req,name=encrypted_request,json=encryptedRequest" json:"encrypted_request,omitempty"`
}

func (x *CMsgRemoteDeviceAuthorizationRequest) Reset() {
	*x = CMsgRemoteDeviceAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceAuthorizationRequest) ProtoMessage() {}

func (x *CMsgRemoteDeviceAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgRemoteDeviceAuthorizationRequest) GetDeviceToken() []byte {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

func (x *CMsgRemoteDeviceAuthorizationRequest) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CMsgRemoteDeviceAuthorizationRequest) GetEncryptedRequest() []byte {
	if x != nil {
		return x.EncryptedRequest
	}
	return nil
}

type CMsgRemoteDeviceAuthorizationCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgRemoteDeviceAuthorizationCancelRequest) Reset() {
	*x = CMsgRemoteDeviceAuthorizationCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceAuthorizationCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceAuthorizationCancelRequest) ProtoMessage() {}

func (x *CMsgRemoteDeviceAuthorizationCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceAuthorizationCancelRequest.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceAuthorizationCancelRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{5}
}

type CMsgRemoteDeviceAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *ERemoteDeviceAuthorizationResult `protobuf:"varint,1,req,name=result,enum=steam.ERemoteDeviceAuthorizationResult,def=0" json:"result,omitempty"`
	Steamid *uint64                           `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

// Default values for CMsgRemoteDeviceAuthorizationResponse fields.
const (
	Default_CMsgRemoteDeviceAuthorizationResponse_Result = ERemoteDeviceAuthorizationResult_k_ERemoteDeviceAuthorizationSuccess
)

func (x *CMsgRemoteDeviceAuthorizationResponse) Reset() {
	*x = CMsgRemoteDeviceAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceAuthorizationResponse) ProtoMessage() {}

func (x *CMsgRemoteDeviceAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgRemoteDeviceAuthorizationResponse) GetResult() ERemoteDeviceAuthorizationResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgRemoteDeviceAuthorizationResponse_Result
}

func (x *CMsgRemoteDeviceAuthorizationResponse) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgRemoteDeviceStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            *uint32                                             `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	MaximumResolutionX   *int32                                              `protobuf:"varint,2,opt,name=maximum_resolution_x,json=maximumResolutionX" json:"maximum_resolution_x,omitempty"`
	MaximumResolutionY   *int32                                              `protobuf:"varint,3,opt,name=maximum_resolution_y,json=maximumResolutionY" json:"maximum_resolution_y,omitempty"`
	AudioChannelCount    *int32                                              `protobuf:"varint,4,opt,name=audio_channel_count,json=audioChannelCount,def=2" json:"audio_channel_count,omitempty"`
	DeviceVersion        *string                                             `protobuf:"bytes,5,opt,name=device_version,json=deviceVersion" json:"device_version,omitempty"`
	StreamDesktop        *bool                                               `protobuf:"varint,6,opt,name=stream_desktop,json=streamDesktop" json:"stream_desktop,omitempty"`
	DeviceToken          []byte                                              `protobuf:"bytes,7,opt,name=device_token,json=deviceToken" json:"device_token,omitempty"`
	Pin                  []byte                                              `protobuf:"bytes,8,opt,name=pin" json:"pin,omitempty"`
	EnableVideoStreaming *bool                                               `protobuf:"varint,9,opt,name=enable_video_streaming,json=enableVideoStreaming,def=1" json:"enable_video_streaming,omitempty"`
	EnableAudioStreaming *bool                                               `protobuf:"varint,10,opt,name=enable_audio_streaming,json=enableAudioStreaming,def=1" json:"enable_audio_streaming,omitempty"`
	EnableInputStreaming *bool                                               `protobuf:"varint,11,opt,name=enable_input_streaming,json=enableInputStreaming,def=1" json:"enable_input_streaming,omitempty"`
	NetworkTest          *bool                                               `protobuf:"varint,12,opt,name=network_test,json=networkTest" json:"network_test,omitempty"`
	ClientId             *uint64                                             `protobuf:"varint,13,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	SupportedTransport   []EStreamTransport                                  `protobuf:"varint,14,rep,name=supported_transport,json=supportedTransport,enum=steam.EStreamTransport" json:"supported_transport,omitempty"`
	Restricted           *bool                                               `protobuf:"varint,15,opt,name=restricted" json:"restricted,omitempty"`
	FormFactor           *EStreamDeviceFormFactor                            `protobuf:"varint,16,opt,name=form_factor,json=formFactor,enum=steam.EStreamDeviceFormFactor,def=0" json:"form_factor,omitempty"`
	GamepadCount         *int32                                              `protobuf:"varint,17,opt,name=gamepad_count,json=gamepadCount" json:"gamepad_count,omitempty"`
	Gamepads             []*CMsgRemoteDeviceStreamingRequest_ReservedGamepad `protobuf:"bytes,18,rep,name=gamepads" json:"gamepads,omitempty"`
	Gameid               *uint64                                             `protobuf:"varint,19,opt,name=gameid" json:"gameid,omitempty"`
	StreamInterface      *EStreamInterface                                   `protobuf:"varint,20,opt,name=stream_interface,json=streamInterface,enum=steam.EStreamInterface,def=0" json:"stream_interface,omitempty"`
}

// Default values for CMsgRemoteDeviceStreamingRequest fields.
const (
	Default_CMsgRemoteDeviceStreamingRequest_AudioChannelCount    = int32(2)
	Default_CMsgRemoteDeviceStreamingRequest_EnableVideoStreaming = bool(true)
	Default_CMsgRemoteDeviceStreamingRequest_EnableAudioStreaming = bool(true)
	Default_CMsgRemoteDeviceStreamingRequest_EnableInputStreaming = bool(true)
	Default_CMsgRemoteDeviceStreamingRequest_FormFactor           = EStreamDeviceFormFactor_k_EStreamDeviceFormFactorUnknown
	Default_CMsgRemoteDeviceStreamingRequest_StreamInterface      = EStreamInterface_k_EStreamInterfaceDefault
)

func (x *CMsgRemoteDeviceStreamingRequest) Reset() {
	*x = CMsgRemoteDeviceStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamingRequest) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamingRequest.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamingRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgRemoteDeviceStreamingRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetMaximumResolutionX() int32 {
	if x != nil && x.MaximumResolutionX != nil {
		return *x.MaximumResolutionX
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetMaximumResolutionY() int32 {
	if x != nil && x.MaximumResolutionY != nil {
		return *x.MaximumResolutionY
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetAudioChannelCount() int32 {
	if x != nil && x.AudioChannelCount != nil {
		return *x.AudioChannelCount
	}
	return Default_CMsgRemoteDeviceStreamingRequest_AudioChannelCount
}

func (x *CMsgRemoteDeviceStreamingRequest) GetDeviceVersion() string {
	if x != nil && x.DeviceVersion != nil {
		return *x.DeviceVersion
	}
	return ""
}

func (x *CMsgRemoteDeviceStreamingRequest) GetStreamDesktop() bool {
	if x != nil && x.StreamDesktop != nil {
		return *x.StreamDesktop
	}
	return false
}

func (x *CMsgRemoteDeviceStreamingRequest) GetDeviceToken() []byte {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamingRequest) GetPin() []byte {
	if x != nil {
		return x.Pin
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamingRequest) GetEnableVideoStreaming() bool {
	if x != nil && x.EnableVideoStreaming != nil {
		return *x.EnableVideoStreaming
	}
	return Default_CMsgRemoteDeviceStreamingRequest_EnableVideoStreaming
}

func (x *CMsgRemoteDeviceStreamingRequest) GetEnableAudioStreaming() bool {
	if x != nil && x.EnableAudioStreaming != nil {
		return *x.EnableAudioStreaming
	}
	return Default_CMsgRemoteDeviceStreamingRequest_EnableAudioStreaming
}

func (x *CMsgRemoteDeviceStreamingRequest) GetEnableInputStreaming() bool {
	if x != nil && x.EnableInputStreaming != nil {
		return *x.EnableInputStreaming
	}
	return Default_CMsgRemoteDeviceStreamingRequest_EnableInputStreaming
}

func (x *CMsgRemoteDeviceStreamingRequest) GetNetworkTest() bool {
	if x != nil && x.NetworkTest != nil {
		return *x.NetworkTest
	}
	return false
}

func (x *CMsgRemoteDeviceStreamingRequest) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetSupportedTransport() []EStreamTransport {
	if x != nil {
		return x.SupportedTransport
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamingRequest) GetRestricted() bool {
	if x != nil && x.Restricted != nil {
		return *x.Restricted
	}
	return false
}

func (x *CMsgRemoteDeviceStreamingRequest) GetFormFactor() EStreamDeviceFormFactor {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return Default_CMsgRemoteDeviceStreamingRequest_FormFactor
}

func (x *CMsgRemoteDeviceStreamingRequest) GetGamepadCount() int32 {
	if x != nil && x.GamepadCount != nil {
		return *x.GamepadCount
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetGamepads() []*CMsgRemoteDeviceStreamingRequest_ReservedGamepad {
	if x != nil {
		return x.Gamepads
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamingRequest) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest) GetStreamInterface() EStreamInterface {
	if x != nil && x.StreamInterface != nil {
		return *x.StreamInterface
	}
	return Default_CMsgRemoteDeviceStreamingRequest_StreamInterface
}

type CMsgRemoteDeviceStreamingCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (x *CMsgRemoteDeviceStreamingCancelRequest) Reset() {
	*x = CMsgRemoteDeviceStreamingCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamingCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamingCancelRequest) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamingCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamingCancelRequest.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamingCancelRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgRemoteDeviceStreamingCancelRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CMsgRemoteDeviceStreamingProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId *uint32  `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Progress  *float32 `protobuf:"fixed32,2,opt,name=progress" json:"progress,omitempty"`
}

func (x *CMsgRemoteDeviceStreamingProgress) Reset() {
	*x = CMsgRemoteDeviceStreamingProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamingProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamingProgress) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamingProgress) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamingProgress.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamingProgress) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgRemoteDeviceStreamingProgress) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingProgress) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CMsgRemoteDeviceStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           *uint32                       `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	Result              *ERemoteDeviceStreamingResult `protobuf:"varint,2,req,name=result,enum=steam.ERemoteDeviceStreamingResult,def=0" json:"result,omitempty"`
	Port                *uint32                       `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	EncryptedSessionKey []byte                        `protobuf:"bytes,4,opt,name=encrypted_session_key,json=encryptedSessionKey" json:"encrypted_session_key,omitempty"`
	Transport           *EStreamTransport             `protobuf:"varint,6,opt,name=transport,enum=steam.EStreamTransport,def=1" json:"transport,omitempty"`
	RelayServer         *string                       `protobuf:"bytes,7,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
	Cert                *string                       `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
}

// Default values for CMsgRemoteDeviceStreamingResponse fields.
const (
	Default_CMsgRemoteDeviceStreamingResponse_Result    = ERemoteDeviceStreamingResult_k_ERemoteDeviceStreamingSuccess
	Default_CMsgRemoteDeviceStreamingResponse_Transport = EStreamTransport_k_EStreamTransportUDP
)

func (x *CMsgRemoteDeviceStreamingResponse) Reset() {
	*x = CMsgRemoteDeviceStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamingResponse) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamingResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamingResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgRemoteDeviceStreamingResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingResponse) GetResult() ERemoteDeviceStreamingResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgRemoteDeviceStreamingResponse_Result
}

func (x *CMsgRemoteDeviceStreamingResponse) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingResponse) GetEncryptedSessionKey() []byte {
	if x != nil {
		return x.EncryptedSessionKey
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamingResponse) GetTransport() EStreamTransport {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return Default_CMsgRemoteDeviceStreamingResponse_Transport
}

func (x *CMsgRemoteDeviceStreamingResponse) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

func (x *CMsgRemoteDeviceStreamingResponse) GetCert() string {
	if x != nil && x.Cert != nil {
		return *x.Cert
	}
	return ""
}

type CMsgRemoteDeviceProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge []byte  `protobuf:"bytes,1,req,name=challenge" json:"challenge,omitempty"`
	RequestId *uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (x *CMsgRemoteDeviceProofRequest) Reset() {
	*x = CMsgRemoteDeviceProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceProofRequest) ProtoMessage() {}

func (x *CMsgRemoteDeviceProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceProofRequest.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceProofRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgRemoteDeviceProofRequest) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *CMsgRemoteDeviceProofRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CMsgRemoteDeviceProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response  []byte  `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
	RequestId *uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

func (x *CMsgRemoteDeviceProofResponse) Reset() {
	*x = CMsgRemoteDeviceProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceProofResponse) ProtoMessage() {}

func (x *CMsgRemoteDeviceProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceProofResponse.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceProofResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgRemoteDeviceProofResponse) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CMsgRemoteDeviceProofResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CMsgRemoteDeviceStreamTransportSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   []byte `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (x *CMsgRemoteDeviceStreamTransportSignal) Reset() {
	*x = CMsgRemoteDeviceStreamTransportSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamTransportSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamTransportSignal) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamTransportSignal) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamTransportSignal.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamTransportSignal) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgRemoteDeviceStreamTransportSignal) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgRemoteDeviceStreamTransportSignal) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CMsgRemoteClientBroadcastStatus_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid   *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	AuthKeyId *uint32 `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
}

func (x *CMsgRemoteClientBroadcastStatus_User) Reset() {
	*x = CMsgRemoteClientBroadcastStatus_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteClientBroadcastStatus_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteClientBroadcastStatus_User) ProtoMessage() {}

func (x *CMsgRemoteClientBroadcastStatus_User) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteClientBroadcastStatus_User.ProtoReflect.Descriptor instead.
func (*CMsgRemoteClientBroadcastStatus_User) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgRemoteClientBroadcastStatus_User) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgRemoteClientBroadcastStatus_User) GetAuthKeyId() uint32 {
	if x != nil && x.AuthKeyId != nil {
		return *x.AuthKeyId
	}
	return 0
}

type CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password             []byte                                                `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
	Identifier           *uint64                                               `protobuf:"varint,2,opt,name=identifier" json:"identifier,omitempty"`
	Payload              []byte                                                `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Timestamp            *uint32                                               `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Usage                *CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage `protobuf:"varint,5,opt,name=usage,enum=steam.CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage,def=0" json:"usage,omitempty"`
	DeviceName           *string                                               `protobuf:"bytes,6,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	DeviceModel          *string                                               `protobuf:"bytes,7,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	DeviceSerial         *string                                               `protobuf:"bytes,8,opt,name=device_serial,json=deviceSerial" json:"device_serial,omitempty"`
	DeviceProvisioningId *uint32                                               `protobuf:"varint,9,opt,name=device_provisioning_id,json=deviceProvisioningId" json:"device_provisioning_id,omitempty"`
}

// Default values for CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket fields.
const (
	Default_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_Usage = CMsgRemoteDeviceAuthorizationRequest_k_EKeyEscrowUsageStreamingDevice
)

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) Reset() {
	*x = CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) ProtoMessage() {}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetIdentifier() uint64 {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return 0
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetUsage() CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage {
	if x != nil && x.Usage != nil {
		return *x.Usage
	}
	return Default_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_Usage
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetDeviceSerial() string {
	if x != nil && x.DeviceSerial != nil {
		return *x.DeviceSerial
	}
	return ""
}

func (x *CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket) GetDeviceProvisioningId() uint32 {
	if x != nil && x.DeviceProvisioningId != nil {
		return *x.DeviceProvisioningId
	}
	return 0
}

type CMsgRemoteDeviceStreamingRequest_ReservedGamepad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerType    *uint32 `protobuf:"varint,1,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
	ControllerSubtype *uint32 `protobuf:"varint,2,opt,name=controller_subtype,json=controllerSubtype" json:"controller_subtype,omitempty"`
}

func (x *CMsgRemoteDeviceStreamingRequest_ReservedGamepad) Reset() {
	*x = CMsgRemoteDeviceStreamingRequest_ReservedGamepad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRemoteDeviceStreamingRequest_ReservedGamepad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRemoteDeviceStreamingRequest_ReservedGamepad) ProtoMessage() {}

func (x *CMsgRemoteDeviceStreamingRequest_ReservedGamepad) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_remoteclient_discovery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRemoteDeviceStreamingRequest_ReservedGamepad.ProtoReflect.Descriptor instead.
func (*CMsgRemoteDeviceStreamingRequest_ReservedGamepad) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgRemoteDeviceStreamingRequest_ReservedGamepad) GetControllerType() uint32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

func (x *CMsgRemoteDeviceStreamingRequest_ReservedGamepad) GetControllerSubtype() uint32 {
	if x != nil && x.ControllerSubtype != nil {
		return *x.ControllerSubtype
	}
	return 0
}

var File_steam_steammessages_remoteclient_discovery_proto protoreflect.FileDescriptor

var file_steam_steammessages_remoteclient_discovery_proto_rawDesc = []byte{
	0x0a, 0x30, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x82, 0x02, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x3a, 0x24,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xda,
	0x06, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x6f, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6f, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x36, 0x34, 0x62, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x36, 0x34, 0x62, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x40, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x2b, 0x43, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x44, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xee, 0x04, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x43, 0x4b, 0x65, 0x79, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77,
	0x5f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x73, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x4b, 0x65, 0x79, 0x45, 0x73, 0x63, 0x72,
	0x6f, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x4b, 0x65, 0x79, 0x45,
	0x73, 0x63, 0x72, 0x6f, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x0f, 0x45, 0x4b, 0x65, 0x79, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4b, 0x65, 0x79, 0x45, 0x73, 0x63, 0x72,
	0x6f, 0x77, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x00, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x23, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0xf8, 0x08, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x31, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x3a,
	0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x16, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x1a, 0x69, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x1f,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x4c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x15, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x44, 0x50, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x5a, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0xd2, 0x04, 0x0a, 0x19, 0x45, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x08, 0x12, 0x2d,
	0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x44,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x0d, 0x2a, 0xd7, 0x01, 0x0a, 0x14,
	0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x04, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x10, 0x08, 0x2a, 0x97, 0x03, 0x0a, 0x20, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x26, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x2a,
	0xd0, 0x01, 0x0a, 0x17, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x56,
	0x10, 0x04, 0x2a, 0xe5, 0x01, 0x0a, 0x10, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x44, 0x50, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x44, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x44, 0x50,
	0x5f, 0x53, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x44, 0x50, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x4e, 0x53, 0x10, 0x06, 0x2a, 0x95, 0x01, 0x0a, 0x10, 0x45,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x69, 0x67, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x10, 0x03, 0x2a, 0x88, 0x05, 0x0a, 0x1c, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x06,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x56, 0x52, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x0a, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x0d, 0x12,
	0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0e, 0x42, 0x33, 0x48,
	0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33,
	0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d,
}

var (
	file_steam_steammessages_remoteclient_discovery_proto_rawDescOnce sync.Once
	file_steam_steammessages_remoteclient_discovery_proto_rawDescData = file_steam_steammessages_remoteclient_discovery_proto_rawDesc
)

func file_steam_steammessages_remoteclient_discovery_proto_rawDescGZIP() []byte {
	file_steam_steammessages_remoteclient_discovery_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_remoteclient_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_remoteclient_discovery_proto_rawDescData)
	})
	return file_steam_steammessages_remoteclient_discovery_proto_rawDescData
}

var file_steam_steammessages_remoteclient_discovery_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_steam_steammessages_remoteclient_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_steam_steammessages_remoteclient_discovery_proto_goTypes = []interface{}{
	(ERemoteClientBroadcastMsg)(0),                                 // 0: steam.ERemoteClientBroadcastMsg
	(ERemoteClientService)(0),                                      // 1: steam.ERemoteClientService
	(ERemoteDeviceAuthorizationResult)(0),                          // 2: steam.ERemoteDeviceAuthorizationResult
	(EStreamDeviceFormFactor)(0),                                   // 3: steam.EStreamDeviceFormFactor
	(EStreamTransport)(0),                                          // 4: steam.EStreamTransport
	(EStreamInterface)(0),                                          // 5: steam.EStreamInterface
	(ERemoteDeviceStreamingResult)(0),                              // 6: steam.ERemoteDeviceStreamingResult
	(CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage)(0),      // 7: steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage
	(*CMsgRemoteClientBroadcastHeader)(nil),                        // 8: steam.CMsgRemoteClientBroadcastHeader
	(*CMsgRemoteClientBroadcastStatus)(nil),                        // 9: steam.CMsgRemoteClientBroadcastStatus
	(*CMsgRemoteClientBroadcastDiscovery)(nil),                     // 10: steam.CMsgRemoteClientBroadcastDiscovery
	(*CMsgRemoteClientBroadcastClientIDDeconflict)(nil),            // 11: steam.CMsgRemoteClientBroadcastClientIDDeconflict
	(*CMsgRemoteDeviceAuthorizationRequest)(nil),                   // 12: steam.CMsgRemoteDeviceAuthorizationRequest
	(*CMsgRemoteDeviceAuthorizationCancelRequest)(nil),             // 13: steam.CMsgRemoteDeviceAuthorizationCancelRequest
	(*CMsgRemoteDeviceAuthorizationResponse)(nil),                  // 14: steam.CMsgRemoteDeviceAuthorizationResponse
	(*CMsgRemoteDeviceStreamingRequest)(nil),                       // 15: steam.CMsgRemoteDeviceStreamingRequest
	(*CMsgRemoteDeviceStreamingCancelRequest)(nil),                 // 16: steam.CMsgRemoteDeviceStreamingCancelRequest
	(*CMsgRemoteDeviceStreamingProgress)(nil),                      // 17: steam.CMsgRemoteDeviceStreamingProgress
	(*CMsgRemoteDeviceStreamingResponse)(nil),                      // 18: steam.CMsgRemoteDeviceStreamingResponse
	(*CMsgRemoteDeviceProofRequest)(nil),                           // 19: steam.CMsgRemoteDeviceProofRequest
	(*CMsgRemoteDeviceProofResponse)(nil),                          // 20: steam.CMsgRemoteDeviceProofResponse
	(*CMsgRemoteDeviceStreamTransportSignal)(nil),                  // 21: steam.CMsgRemoteDeviceStreamTransportSignal
	(*CMsgRemoteClientBroadcastStatus_User)(nil),                   // 22: steam.CMsgRemoteClientBroadcastStatus.User
	(*CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket)(nil), // 23: steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket
	(*CMsgRemoteDeviceStreamingRequest_ReservedGamepad)(nil),       // 24: steam.CMsgRemoteDeviceStreamingRequest.ReservedGamepad
}
var file_steam_steammessages_remoteclient_discovery_proto_depIdxs = []int32{
	0,  // 0: steam.CMsgRemoteClientBroadcastHeader.msg_type:type_name -> steam.ERemoteClientBroadcastMsg
	22, // 1: steam.CMsgRemoteClientBroadcastStatus.users:type_name -> steam.CMsgRemoteClientBroadcastStatus.User
	2,  // 2: steam.CMsgRemoteDeviceAuthorizationResponse.result:type_name -> steam.ERemoteDeviceAuthorizationResult
	4,  // 3: steam.CMsgRemoteDeviceStreamingRequest.supported_transport:type_name -> steam.EStreamTransport
	3,  // 4: steam.CMsgRemoteDeviceStreamingRequest.form_factor:type_name -> steam.EStreamDeviceFormFactor
	24, // 5: steam.CMsgRemoteDeviceStreamingRequest.gamepads:type_name -> steam.CMsgRemoteDeviceStreamingRequest.ReservedGamepad
	5,  // 6: steam.CMsgRemoteDeviceStreamingRequest.stream_interface:type_name -> steam.EStreamInterface
	6,  // 7: steam.CMsgRemoteDeviceStreamingResponse.result:type_name -> steam.ERemoteDeviceStreamingResult
	4,  // 8: steam.CMsgRemoteDeviceStreamingResponse.transport:type_name -> steam.EStreamTransport
	7,  // 9: steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.usage:type_name -> steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_steam_steammessages_remoteclient_discovery_proto_init() }
func file_steam_steammessages_remoteclient_discovery_proto_init() {
	if File_steam_steammessages_remoteclient_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientBroadcastHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientBroadcastStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientBroadcastDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientBroadcastClientIDDeconflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceAuthorizationCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamingCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamingProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamTransportSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteClientBroadcastStatus_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_remoteclient_discovery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRemoteDeviceStreamingRequest_ReservedGamepad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_remoteclient_discovery_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_remoteclient_discovery_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_remoteclient_discovery_proto_depIdxs,
		EnumInfos:         file_steam_steammessages_remoteclient_discovery_proto_enumTypes,
		MessageInfos:      file_steam_steammessages_remoteclient_discovery_proto_msgTypes,
	}.Build()
	File_steam_steammessages_remoteclient_discovery_proto = out.File
	file_steam_steammessages_remoteclient_discovery_proto_rawDesc = nil
	file_steam_steammessages_remoteclient_discovery_proto_goTypes = nil
	file_steam_steammessages_remoteclient_discovery_proto_depIdxs = nil
}
