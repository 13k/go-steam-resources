// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: steam/steammessages_clientserver_2.proto

package steam

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgClientUCMAddScreenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                 *uint32                           `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Filename              *string                           `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Thumbname             *string                           `protobuf:"bytes,3,opt,name=thumbname" json:"thumbname,omitempty"`
	VrFilename            *string                           `protobuf:"bytes,14,opt,name=vr_filename,json=vrFilename" json:"vr_filename,omitempty"`
	Rtime32Created        *uint32                           `protobuf:"fixed32,4,opt,name=rtime32_created,json=rtime32Created" json:"rtime32_created,omitempty"`
	Width                 *uint32                           `protobuf:"varint,5,opt,name=width" json:"width,omitempty"`
	Height                *uint32                           `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
	Permissions           *uint32                           `protobuf:"varint,7,opt,name=permissions" json:"permissions,omitempty"`
	Caption               *string                           `protobuf:"bytes,8,opt,name=caption" json:"caption,omitempty"`
	ShortcutName          *string                           `protobuf:"bytes,9,opt,name=shortcut_name,json=shortcutName" json:"shortcut_name,omitempty"`
	Tag                   []*CMsgClientUCMAddScreenshot_Tag `protobuf:"bytes,10,rep,name=tag" json:"tag,omitempty"`
	TaggedSteamid         []uint64                          `protobuf:"fixed64,11,rep,name=tagged_steamid,json=taggedSteamid" json:"tagged_steamid,omitempty"`
	SpoilerTag            *bool                             `protobuf:"varint,12,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	TaggedPublishedfileid []uint64                          `protobuf:"varint,13,rep,name=tagged_publishedfileid,json=taggedPublishedfileid" json:"tagged_publishedfileid,omitempty"`
}

func (x *CMsgClientUCMAddScreenshot) Reset() {
	*x = CMsgClientUCMAddScreenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMAddScreenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMAddScreenshot) ProtoMessage() {}

func (x *CMsgClientUCMAddScreenshot) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMAddScreenshot.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMAddScreenshot) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientUCMAddScreenshot) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientUCMAddScreenshot) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot) GetThumbname() string {
	if x != nil && x.Thumbname != nil {
		return *x.Thumbname
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot) GetVrFilename() string {
	if x != nil && x.VrFilename != nil {
		return *x.VrFilename
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot) GetRtime32Created() uint32 {
	if x != nil && x.Rtime32Created != nil {
		return *x.Rtime32Created
	}
	return 0
}

func (x *CMsgClientUCMAddScreenshot) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgClientUCMAddScreenshot) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CMsgClientUCMAddScreenshot) GetPermissions() uint32 {
	if x != nil && x.Permissions != nil {
		return *x.Permissions
	}
	return 0
}

func (x *CMsgClientUCMAddScreenshot) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot) GetShortcutName() string {
	if x != nil && x.ShortcutName != nil {
		return *x.ShortcutName
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot) GetTag() []*CMsgClientUCMAddScreenshot_Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CMsgClientUCMAddScreenshot) GetTaggedSteamid() []uint64 {
	if x != nil {
		return x.TaggedSteamid
	}
	return nil
}

func (x *CMsgClientUCMAddScreenshot) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *CMsgClientUCMAddScreenshot) GetTaggedPublishedfileid() []uint64 {
	if x != nil {
		return x.TaggedPublishedfileid
	}
	return nil
}

type CMsgClientUCMAddScreenshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult      *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Screenshotid *uint64 `protobuf:"fixed64,2,opt,name=screenshotid,def=18446744073709551615" json:"screenshotid,omitempty"`
}

// Default values for CMsgClientUCMAddScreenshotResponse fields.
const (
	Default_CMsgClientUCMAddScreenshotResponse_Eresult      = int32(2)
	Default_CMsgClientUCMAddScreenshotResponse_Screenshotid = uint64(18446744073709551615)
)

func (x *CMsgClientUCMAddScreenshotResponse) Reset() {
	*x = CMsgClientUCMAddScreenshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMAddScreenshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMAddScreenshotResponse) ProtoMessage() {}

func (x *CMsgClientUCMAddScreenshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMAddScreenshotResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMAddScreenshotResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientUCMAddScreenshotResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMAddScreenshotResponse_Eresult
}

func (x *CMsgClientUCMAddScreenshotResponse) GetScreenshotid() uint64 {
	if x != nil && x.Screenshotid != nil {
		return *x.Screenshotid
	}
	return Default_CMsgClientUCMAddScreenshotResponse_Screenshotid
}

type CMsgClientUCMDeleteScreenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Screenshotid *uint64 `protobuf:"fixed64,1,opt,name=screenshotid,def=18446744073709551615" json:"screenshotid,omitempty"`
}

// Default values for CMsgClientUCMDeleteScreenshot fields.
const (
	Default_CMsgClientUCMDeleteScreenshot_Screenshotid = uint64(18446744073709551615)
)

func (x *CMsgClientUCMDeleteScreenshot) Reset() {
	*x = CMsgClientUCMDeleteScreenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMDeleteScreenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMDeleteScreenshot) ProtoMessage() {}

func (x *CMsgClientUCMDeleteScreenshot) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMDeleteScreenshot.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMDeleteScreenshot) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientUCMDeleteScreenshot) GetScreenshotid() uint64 {
	if x != nil && x.Screenshotid != nil {
		return *x.Screenshotid
	}
	return Default_CMsgClientUCMDeleteScreenshot_Screenshotid
}

type CMsgClientUCMDeleteScreenshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientUCMDeleteScreenshotResponse fields.
const (
	Default_CMsgClientUCMDeleteScreenshotResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMDeleteScreenshotResponse) Reset() {
	*x = CMsgClientUCMDeleteScreenshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMDeleteScreenshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMDeleteScreenshotResponse) ProtoMessage() {}

func (x *CMsgClientUCMDeleteScreenshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMDeleteScreenshotResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMDeleteScreenshotResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientUCMDeleteScreenshotResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMDeleteScreenshotResponse_Eresult
}

type CMsgClientUCMPublishFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileName         *string  `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	PreviewFileName  *string  `protobuf:"bytes,3,opt,name=preview_file_name,json=previewFileName" json:"preview_file_name,omitempty"`
	ConsumerAppId    *uint32  `protobuf:"varint,4,opt,name=consumer_app_id,json=consumerAppId" json:"consumer_app_id,omitempty"`
	Title            *string  `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Description      *string  `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Tags             []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	WorkshopFile     *bool    `protobuf:"varint,9,opt,name=workshop_file,json=workshopFile" json:"workshop_file,omitempty"`
	Visibility       *int32   `protobuf:"varint,10,opt,name=visibility" json:"visibility,omitempty"`
	FileType         *uint32  `protobuf:"varint,11,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	Url              *string  `protobuf:"bytes,12,opt,name=url" json:"url,omitempty"`
	VideoProvider    *uint32  `protobuf:"varint,13,opt,name=video_provider,json=videoProvider" json:"video_provider,omitempty"`
	VideoAccountName *string  `protobuf:"bytes,14,opt,name=video_account_name,json=videoAccountName" json:"video_account_name,omitempty"`
	VideoIdentifier  *string  `protobuf:"bytes,15,opt,name=video_identifier,json=videoIdentifier" json:"video_identifier,omitempty"`
	InProgress       *bool    `protobuf:"varint,16,opt,name=in_progress,json=inProgress" json:"in_progress,omitempty"`
}

func (x *CMsgClientUCMPublishFile) Reset() {
	*x = CMsgClientUCMPublishFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMPublishFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMPublishFile) ProtoMessage() {}

func (x *CMsgClientUCMPublishFile) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMPublishFile.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMPublishFile) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientUCMPublishFile) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMPublishFile) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetPreviewFileName() string {
	if x != nil && x.PreviewFileName != nil {
		return *x.PreviewFileName
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetConsumerAppId() uint32 {
	if x != nil && x.ConsumerAppId != nil {
		return *x.ConsumerAppId
	}
	return 0
}

func (x *CMsgClientUCMPublishFile) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CMsgClientUCMPublishFile) GetWorkshopFile() bool {
	if x != nil && x.WorkshopFile != nil {
		return *x.WorkshopFile
	}
	return false
}

func (x *CMsgClientUCMPublishFile) GetVisibility() int32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CMsgClientUCMPublishFile) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CMsgClientUCMPublishFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetVideoProvider() uint32 {
	if x != nil && x.VideoProvider != nil {
		return *x.VideoProvider
	}
	return 0
}

func (x *CMsgClientUCMPublishFile) GetVideoAccountName() string {
	if x != nil && x.VideoAccountName != nil {
		return *x.VideoAccountName
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetVideoIdentifier() string {
	if x != nil && x.VideoIdentifier != nil {
		return *x.VideoIdentifier
	}
	return ""
}

func (x *CMsgClientUCMPublishFile) GetInProgress() bool {
	if x != nil && x.InProgress != nil {
		return *x.InProgress
	}
	return false
}

type CMsgClientUCMPublishFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                               *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFileId                       *uint64 `protobuf:"fixed64,2,opt,name=published_file_id,json=publishedFileId,def=18446744073709551615" json:"published_file_id,omitempty"`
	NeedsWorkshopLegalAgreementAcceptance *bool   `protobuf:"varint,3,opt,name=needs_workshop_legal_agreement_acceptance,json=needsWorkshopLegalAgreementAcceptance,def=0" json:"needs_workshop_legal_agreement_acceptance,omitempty"`
}

// Default values for CMsgClientUCMPublishFileResponse fields.
const (
	Default_CMsgClientUCMPublishFileResponse_Eresult                               = int32(2)
	Default_CMsgClientUCMPublishFileResponse_PublishedFileId                       = uint64(18446744073709551615)
	Default_CMsgClientUCMPublishFileResponse_NeedsWorkshopLegalAgreementAcceptance = bool(false)
)

func (x *CMsgClientUCMPublishFileResponse) Reset() {
	*x = CMsgClientUCMPublishFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMPublishFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMPublishFileResponse) ProtoMessage() {}

func (x *CMsgClientUCMPublishFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMPublishFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMPublishFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientUCMPublishFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMPublishFileResponse_Eresult
}

func (x *CMsgClientUCMPublishFileResponse) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return Default_CMsgClientUCMPublishFileResponse_PublishedFileId
}

func (x *CMsgClientUCMPublishFileResponse) GetNeedsWorkshopLegalAgreementAcceptance() bool {
	if x != nil && x.NeedsWorkshopLegalAgreementAcceptance != nil {
		return *x.NeedsWorkshopLegalAgreementAcceptance
	}
	return Default_CMsgClientUCMPublishFileResponse_NeedsWorkshopLegalAgreementAcceptance
}

type CMsgClientUCMUpdatePublishedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 *uint32                                               `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	PublishedFileId       *uint64                                               `protobuf:"fixed64,2,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	FileName              *string                                               `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	PreviewFileName       *string                                               `protobuf:"bytes,4,opt,name=preview_file_name,json=previewFileName" json:"preview_file_name,omitempty"`
	Title                 *string                                               `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Description           *string                                               `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Tags                  []string                                              `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	Visibility            *int32                                                `protobuf:"varint,8,opt,name=visibility" json:"visibility,omitempty"`
	UpdateFile            *bool                                                 `protobuf:"varint,9,opt,name=update_file,json=updateFile" json:"update_file,omitempty"`
	UpdatePreviewFile     *bool                                                 `protobuf:"varint,10,opt,name=update_preview_file,json=updatePreviewFile" json:"update_preview_file,omitempty"`
	UpdateTitle           *bool                                                 `protobuf:"varint,11,opt,name=update_title,json=updateTitle" json:"update_title,omitempty"`
	UpdateDescription     *bool                                                 `protobuf:"varint,12,opt,name=update_description,json=updateDescription" json:"update_description,omitempty"`
	UpdateTags            *bool                                                 `protobuf:"varint,13,opt,name=update_tags,json=updateTags" json:"update_tags,omitempty"`
	UpdateVisibility      *bool                                                 `protobuf:"varint,14,opt,name=update_visibility,json=updateVisibility" json:"update_visibility,omitempty"`
	ChangeDescription     *string                                               `protobuf:"bytes,15,opt,name=change_description,json=changeDescription" json:"change_description,omitempty"`
	UpdateUrl             *bool                                                 `protobuf:"varint,16,opt,name=update_url,json=updateUrl" json:"update_url,omitempty"`
	Url                   *string                                               `protobuf:"bytes,17,opt,name=url" json:"url,omitempty"`
	UpdateContentManifest *bool                                                 `protobuf:"varint,18,opt,name=update_content_manifest,json=updateContentManifest" json:"update_content_manifest,omitempty"`
	ContentManifest       *uint64                                               `protobuf:"fixed64,19,opt,name=content_manifest,json=contentManifest" json:"content_manifest,omitempty"`
	Metadata              *string                                               `protobuf:"bytes,20,opt,name=metadata" json:"metadata,omitempty"`
	UpdateMetadata        *bool                                                 `protobuf:"varint,21,opt,name=update_metadata,json=updateMetadata" json:"update_metadata,omitempty"`
	Language              *int32                                                `protobuf:"varint,22,opt,name=language,def=0" json:"language,omitempty"`
	RemovedKvtags         []string                                              `protobuf:"bytes,23,rep,name=removed_kvtags,json=removedKvtags" json:"removed_kvtags,omitempty"`
	Kvtags                []*CMsgClientUCMUpdatePublishedFile_KeyValueTag       `protobuf:"bytes,24,rep,name=kvtags" json:"kvtags,omitempty"`
	Previews              []*CMsgClientUCMUpdatePublishedFile_AdditionalPreview `protobuf:"bytes,25,rep,name=previews" json:"previews,omitempty"`
	PreviewsToRemove      []int32                                               `protobuf:"varint,26,rep,name=previews_to_remove,json=previewsToRemove" json:"previews_to_remove,omitempty"`
	ClearInProgress       *bool                                                 `protobuf:"varint,27,opt,name=clear_in_progress,json=clearInProgress" json:"clear_in_progress,omitempty"`
	RemoveAllKvtags       *bool                                                 `protobuf:"varint,28,opt,name=remove_all_kvtags,json=removeAllKvtags" json:"remove_all_kvtags,omitempty"`
}

// Default values for CMsgClientUCMUpdatePublishedFile fields.
const (
	Default_CMsgClientUCMUpdatePublishedFile_Language = int32(0)
)

func (x *CMsgClientUCMUpdatePublishedFile) Reset() {
	*x = CMsgClientUCMUpdatePublishedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMUpdatePublishedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMUpdatePublishedFile) ProtoMessage() {}

func (x *CMsgClientUCMUpdatePublishedFile) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMUpdatePublishedFile.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMUpdatePublishedFile) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientUCMUpdatePublishedFile) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMUpdatePublishedFile) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMUpdatePublishedFile) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetPreviewFileName() string {
	if x != nil && x.PreviewFileName != nil {
		return *x.PreviewFileName
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CMsgClientUCMUpdatePublishedFile) GetVisibility() int32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateFile() bool {
	if x != nil && x.UpdateFile != nil {
		return *x.UpdateFile
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdatePreviewFile() bool {
	if x != nil && x.UpdatePreviewFile != nil {
		return *x.UpdatePreviewFile
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateTitle() bool {
	if x != nil && x.UpdateTitle != nil {
		return *x.UpdateTitle
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateDescription() bool {
	if x != nil && x.UpdateDescription != nil {
		return *x.UpdateDescription
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateTags() bool {
	if x != nil && x.UpdateTags != nil {
		return *x.UpdateTags
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateVisibility() bool {
	if x != nil && x.UpdateVisibility != nil {
		return *x.UpdateVisibility
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetChangeDescription() string {
	if x != nil && x.ChangeDescription != nil {
		return *x.ChangeDescription
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateUrl() bool {
	if x != nil && x.UpdateUrl != nil {
		return *x.UpdateUrl
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateContentManifest() bool {
	if x != nil && x.UpdateContentManifest != nil {
		return *x.UpdateContentManifest
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetContentManifest() uint64 {
	if x != nil && x.ContentManifest != nil {
		return *x.ContentManifest
	}
	return 0
}

func (x *CMsgClientUCMUpdatePublishedFile) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile) GetUpdateMetadata() bool {
	if x != nil && x.UpdateMetadata != nil {
		return *x.UpdateMetadata
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CMsgClientUCMUpdatePublishedFile_Language
}

func (x *CMsgClientUCMUpdatePublishedFile) GetRemovedKvtags() []string {
	if x != nil {
		return x.RemovedKvtags
	}
	return nil
}

func (x *CMsgClientUCMUpdatePublishedFile) GetKvtags() []*CMsgClientUCMUpdatePublishedFile_KeyValueTag {
	if x != nil {
		return x.Kvtags
	}
	return nil
}

func (x *CMsgClientUCMUpdatePublishedFile) GetPreviews() []*CMsgClientUCMUpdatePublishedFile_AdditionalPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *CMsgClientUCMUpdatePublishedFile) GetPreviewsToRemove() []int32 {
	if x != nil {
		return x.PreviewsToRemove
	}
	return nil
}

func (x *CMsgClientUCMUpdatePublishedFile) GetClearInProgress() bool {
	if x != nil && x.ClearInProgress != nil {
		return *x.ClearInProgress
	}
	return false
}

func (x *CMsgClientUCMUpdatePublishedFile) GetRemoveAllKvtags() bool {
	if x != nil && x.RemoveAllKvtags != nil {
		return *x.RemoveAllKvtags
	}
	return false
}

type CMsgClientUCMUpdatePublishedFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                               *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	NeedsWorkshopLegalAgreementAcceptance *bool  `protobuf:"varint,2,opt,name=needs_workshop_legal_agreement_acceptance,json=needsWorkshopLegalAgreementAcceptance,def=0" json:"needs_workshop_legal_agreement_acceptance,omitempty"`
}

// Default values for CMsgClientUCMUpdatePublishedFileResponse fields.
const (
	Default_CMsgClientUCMUpdatePublishedFileResponse_Eresult                               = int32(2)
	Default_CMsgClientUCMUpdatePublishedFileResponse_NeedsWorkshopLegalAgreementAcceptance = bool(false)
)

func (x *CMsgClientUCMUpdatePublishedFileResponse) Reset() {
	*x = CMsgClientUCMUpdatePublishedFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMUpdatePublishedFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMUpdatePublishedFileResponse) ProtoMessage() {}

func (x *CMsgClientUCMUpdatePublishedFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMUpdatePublishedFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMUpdatePublishedFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientUCMUpdatePublishedFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMUpdatePublishedFileResponse_Eresult
}

func (x *CMsgClientUCMUpdatePublishedFileResponse) GetNeedsWorkshopLegalAgreementAcceptance() bool {
	if x != nil && x.NeedsWorkshopLegalAgreementAcceptance != nil {
		return *x.NeedsWorkshopLegalAgreementAcceptance
	}
	return Default_CMsgClientUCMUpdatePublishedFileResponse_NeedsWorkshopLegalAgreementAcceptance
}

type CMsgClientUCMDeletePublishedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientUCMDeletePublishedFile) Reset() {
	*x = CMsgClientUCMDeletePublishedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMDeletePublishedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMDeletePublishedFile) ProtoMessage() {}

func (x *CMsgClientUCMDeletePublishedFile) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMDeletePublishedFile.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMDeletePublishedFile) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientUCMDeletePublishedFile) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMDeletePublishedFile) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientUCMDeletePublishedFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientUCMDeletePublishedFileResponse fields.
const (
	Default_CMsgClientUCMDeletePublishedFileResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMDeletePublishedFileResponse) Reset() {
	*x = CMsgClientUCMDeletePublishedFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMDeletePublishedFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMDeletePublishedFileResponse) ProtoMessage() {}

func (x *CMsgClientUCMDeletePublishedFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMDeletePublishedFileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMDeletePublishedFileResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientUCMDeletePublishedFileResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMDeletePublishedFileResponse_Eresult
}

type CMsgClientUCMEnumerateUserPublishedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	SortOrder  *uint32 `protobuf:"varint,3,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFiles) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFiles.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFiles) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserPublishedFiles) GetSortOrder() uint32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

type CMsgClientUCMEnumerateUserPublishedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                              `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                             `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserPublishedFilesResponse fields.
const (
	Default_CMsgClientUCMEnumerateUserPublishedFilesResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFilesResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFilesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFilesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumerateUserPublishedFilesResponse_Eresult
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetPublishedFiles() []*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMEnumerateUserSubscribedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex       *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	ListType         *uint32 `protobuf:"varint,3,opt,name=list_type,json=listType,def=1" json:"list_type,omitempty"`
	MatchingFileType *uint32 `protobuf:"varint,4,opt,name=matching_file_type,json=matchingFileType,def=0" json:"matching_file_type,omitempty"`
	Count            *uint32 `protobuf:"varint,5,opt,name=count,def=50" json:"count,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFiles fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_ListType         = uint32(1)
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_MatchingFileType = uint32(0)
	Default_CMsgClientUCMEnumerateUserSubscribedFiles_Count            = uint32(50)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFiles) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFiles.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFiles) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_ListType
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_MatchingFileType
}

func (x *CMsgClientUCMEnumerateUserSubscribedFiles) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFiles_Count
}

type CMsgClientUCMEnumerateUserSubscribedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult         *int32                                                               `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	SubscribedFiles []*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=subscribed_files,json=subscribedFiles" json:"subscribed_files,omitempty"`
	TotalResults    *uint32                                                              `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesResponse fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_Eresult
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetSubscribedFiles() []*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId {
	if x != nil {
		return x.SubscribedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex      *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	StartTime       *uint32 `protobuf:"fixed32,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	DesiredRevision *uint32 `protobuf:"varint,4,opt,name=desired_revision,json=desiredRevision,def=0" json:"desired_revision,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates_DesiredRevision = uint32(0)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates) GetDesiredRevision() uint32 {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates_DesiredRevision
}

type CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult         *int32                                                                          `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	SubscribedFiles []*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId `protobuf:"bytes,2,rep,name=subscribed_files,json=subscribedFiles" json:"subscribed_files,omitempty"`
	TotalResults    *uint32                                                                         `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_Eresult
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) GetSubscribedFiles() []*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId {
	if x != nil {
		return x.SubscribedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMPublishedFileUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,3,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Hcontent        *uint64 `protobuf:"fixed64,4,opt,name=hcontent" json:"hcontent,omitempty"`
	FileSize        *uint32 `protobuf:"fixed32,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	IsDepotContent  *bool   `protobuf:"varint,6,opt,name=is_depot_content,json=isDepotContent" json:"is_depot_content,omitempty"`
	Revision        *uint32 `protobuf:"varint,7,opt,name=revision" json:"revision,omitempty"`
}

func (x *CMsgClientUCMPublishedFileUpdated) Reset() {
	*x = CMsgClientUCMPublishedFileUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMPublishedFileUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMPublishedFileUpdated) ProtoMessage() {}

func (x *CMsgClientUCMPublishedFileUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMPublishedFileUpdated.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMPublishedFileUpdated) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgClientUCMPublishedFileUpdated) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileUpdated) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileUpdated) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileUpdated) GetHcontent() uint64 {
	if x != nil && x.Hcontent != nil {
		return *x.Hcontent
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileUpdated) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUCMPublishedFileUpdated) GetIsDepotContent() bool {
	if x != nil && x.IsDepotContent != nil {
		return *x.IsDepotContent
	}
	return false
}

func (x *CMsgClientUCMPublishedFileUpdated) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

type CMsgClientWorkshopItemChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LastTimeUpdated *uint32 `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	NumItemsNeeded  *uint32 `protobuf:"varint,3,opt,name=num_items_needed,json=numItemsNeeded" json:"num_items_needed,omitempty"`
}

func (x *CMsgClientWorkshopItemChangesRequest) Reset() {
	*x = CMsgClientWorkshopItemChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemChangesRequest) ProtoMessage() {}

func (x *CMsgClientWorkshopItemChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemChangesRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemChangesRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientWorkshopItemChangesRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientWorkshopItemChangesRequest) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemChangesRequest) GetNumItemsNeeded() uint32 {
	if x != nil && x.NumItemsNeeded != nil {
		return *x.NumItemsNeeded
	}
	return 0
}

type CMsgClientWorkshopItemChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult       *int32                                                    `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	UpdateTime    *uint32                                                   `protobuf:"varint,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo `protobuf:"bytes,5,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
}

// Default values for CMsgClientWorkshopItemChangesResponse fields.
const (
	Default_CMsgClientWorkshopItemChangesResponse_Eresult = int32(2)
)

func (x *CMsgClientWorkshopItemChangesResponse) Reset() {
	*x = CMsgClientWorkshopItemChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemChangesResponse) ProtoMessage() {}

func (x *CMsgClientWorkshopItemChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemChangesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemChangesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientWorkshopItemChangesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientWorkshopItemChangesResponse_Eresult
}

func (x *CMsgClientWorkshopItemChangesResponse) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CMsgClientWorkshopItemChangesResponse) GetWorkshopItems() []*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CMsgClientWorkshopItemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32                                           `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	LastTimeUpdated *uint32                                           `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	WorkshopItems   []*CMsgClientWorkshopItemInfoRequest_WorkshopItem `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoRequest) Reset() {
	*x = CMsgClientWorkshopItemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoRequest) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgClientWorkshopItemInfoRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest) GetWorkshopItems() []*CMsgClientWorkshopItemInfoRequest_WorkshopItem {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CMsgClientWorkshopItemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult       *int32                                                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	UpdateTime    *uint32                                                `protobuf:"varint,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
	PrivateItems  []uint64                                               `protobuf:"fixed64,4,rep,name=private_items,json=privateItems" json:"private_items,omitempty"`
}

// Default values for CMsgClientWorkshopItemInfoResponse fields.
const (
	Default_CMsgClientWorkshopItemInfoResponse_Eresult = int32(2)
)

func (x *CMsgClientWorkshopItemInfoResponse) Reset() {
	*x = CMsgClientWorkshopItemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoResponse) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientWorkshopItemInfoResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientWorkshopItemInfoResponse_Eresult
}

func (x *CMsgClientWorkshopItemInfoResponse) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse) GetWorkshopItems() []*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

func (x *CMsgClientWorkshopItemInfoResponse) GetPrivateItems() []uint64 {
	if x != nil {
		return x.PrivateItems
	}
	return nil
}

type CMsgClientUCMGetPublishedFilesForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CreatorSteamId *uint64  `protobuf:"fixed64,2,opt,name=creator_steam_id,json=creatorSteamId" json:"creator_steam_id,omitempty"`
	RequiredTags   []string `protobuf:"bytes,3,rep,name=required_tags,json=requiredTags" json:"required_tags,omitempty"`
	ExcludedTags   []string `protobuf:"bytes,4,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	StartIndex     *uint32  `protobuf:"varint,5,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
}

func (x *CMsgClientUCMGetPublishedFilesForUser) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUser) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUser) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUser.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUser) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetCreatorSteamId() uint64 {
	if x != nil && x.CreatorSteamId != nil {
		return *x.CreatorSteamId
	}
	return 0
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetRequiredTags() []string {
	if x != nil {
		return x.RequiredTags
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUser) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CMsgClientUCMGetPublishedFilesForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                           `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                          `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMGetPublishedFilesForUserResponse fields.
const (
	Default_CMsgClientUCMGetPublishedFilesForUserResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUserResponse) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUserResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMGetPublishedFilesForUserResponse_Eresult
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetPublishedFiles() []*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientUCMSetUserPublishedFileAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Action          *int32  `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
}

func (x *CMsgClientUCMSetUserPublishedFileAction) Reset() {
	*x = CMsgClientUCMSetUserPublishedFileAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMSetUserPublishedFileAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMSetUserPublishedFileAction) ProtoMessage() {}

func (x *CMsgClientUCMSetUserPublishedFileAction) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMSetUserPublishedFileAction.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMSetUserPublishedFileAction) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientUCMSetUserPublishedFileAction) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMSetUserPublishedFileAction) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMSetUserPublishedFileAction) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type CMsgClientUCMSetUserPublishedFileActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientUCMSetUserPublishedFileActionResponse fields.
const (
	Default_CMsgClientUCMSetUserPublishedFileActionResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMSetUserPublishedFileActionResponse) Reset() {
	*x = CMsgClientUCMSetUserPublishedFileActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMSetUserPublishedFileActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMSetUserPublishedFileActionResponse) ProtoMessage() {}

func (x *CMsgClientUCMSetUserPublishedFileActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMSetUserPublishedFileActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMSetUserPublishedFileActionResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientUCMSetUserPublishedFileActionResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMSetUserPublishedFileActionResponse_Eresult
}

type CMsgClientUCMEnumeratePublishedFilesByUserAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StartIndex *uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	Action     *int32  `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) Reset() {
	*x = CMsgClientUCMEnumeratePublishedFilesByUserAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumeratePublishedFilesByUserAction) ProtoMessage() {}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumeratePublishedFilesByUserAction.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumeratePublishedFilesByUserAction) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserAction) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type CMsgClientUCMEnumeratePublishedFilesByUserActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *int32                                                                      `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PublishedFiles []*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId `protobuf:"bytes,2,rep,name=published_files,json=publishedFiles" json:"published_files,omitempty"`
	TotalResults   *uint32                                                                     `protobuf:"varint,3,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
}

// Default values for CMsgClientUCMEnumeratePublishedFilesByUserActionResponse fields.
const (
	Default_CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_Eresult = int32(2)
)

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) Reset() {
	*x = CMsgClientUCMEnumeratePublishedFilesByUserActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) ProtoMessage() {}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_Eresult
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) GetPublishedFiles() []*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId {
	if x != nil {
		return x.PublishedFiles
	}
	return nil
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

type CMsgClientScreenshotsChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientScreenshotsChanged) Reset() {
	*x = CMsgClientScreenshotsChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientScreenshotsChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientScreenshotsChanged) ProtoMessage() {}

func (x *CMsgClientScreenshotsChanged) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientScreenshotsChanged.ProtoReflect.Descriptor instead.
func (*CMsgClientScreenshotsChanged) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{27}
}

type CMsgClientUpdateUserGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidIdgs *uint64 `protobuf:"fixed64,1,opt,name=steamid_idgs,json=steamidIdgs" json:"steamid_idgs,omitempty"`
	Gameid      *uint64 `protobuf:"fixed64,2,opt,name=gameid" json:"gameid,omitempty"`
	GameIp      *uint32 `protobuf:"varint,3,opt,name=game_ip,json=gameIp" json:"game_ip,omitempty"`
	GamePort    *uint32 `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	Token       []byte  `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
}

func (x *CMsgClientUpdateUserGameInfo) Reset() {
	*x = CMsgClientUpdateUserGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUpdateUserGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUpdateUserGameInfo) ProtoMessage() {}

func (x *CMsgClientUpdateUserGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUpdateUserGameInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientUpdateUserGameInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientUpdateUserGameInfo) GetSteamidIdgs() uint64 {
	if x != nil && x.SteamidIdgs != nil {
		return *x.SteamidIdgs
	}
	return 0
}

func (x *CMsgClientUpdateUserGameInfo) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgClientUpdateUserGameInfo) GetGameIp() uint32 {
	if x != nil && x.GameIp != nil {
		return *x.GameIp
	}
	return 0
}

func (x *CMsgClientUpdateUserGameInfo) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgClientUpdateUserGameInfo) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type CMsgClientRichPresenceUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichPresenceKv   []byte   `protobuf:"bytes,1,opt,name=rich_presence_kv,json=richPresenceKv" json:"rich_presence_kv,omitempty"`
	SteamidBroadcast []uint64 `protobuf:"fixed64,2,rep,name=steamid_broadcast,json=steamidBroadcast" json:"steamid_broadcast,omitempty"`
}

func (x *CMsgClientRichPresenceUpload) Reset() {
	*x = CMsgClientRichPresenceUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRichPresenceUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRichPresenceUpload) ProtoMessage() {}

func (x *CMsgClientRichPresenceUpload) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRichPresenceUpload.ProtoReflect.Descriptor instead.
func (*CMsgClientRichPresenceUpload) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientRichPresenceUpload) GetRichPresenceKv() []byte {
	if x != nil {
		return x.RichPresenceKv
	}
	return nil
}

func (x *CMsgClientRichPresenceUpload) GetSteamidBroadcast() []uint64 {
	if x != nil {
		return x.SteamidBroadcast
	}
	return nil
}

type CMsgClientRichPresenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidRequest []uint64 `protobuf:"fixed64,1,rep,name=steamid_request,json=steamidRequest" json:"steamid_request,omitempty"`
}

func (x *CMsgClientRichPresenceRequest) Reset() {
	*x = CMsgClientRichPresenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRichPresenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRichPresenceRequest) ProtoMessage() {}

func (x *CMsgClientRichPresenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRichPresenceRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientRichPresenceRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientRichPresenceRequest) GetSteamidRequest() []uint64 {
	if x != nil {
		return x.SteamidRequest
	}
	return nil
}

type CMsgClientRichPresenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichPresence []*CMsgClientRichPresenceInfo_RichPresence `protobuf:"bytes,1,rep,name=rich_presence,json=richPresence" json:"rich_presence,omitempty"`
}

func (x *CMsgClientRichPresenceInfo) Reset() {
	*x = CMsgClientRichPresenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRichPresenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRichPresenceInfo) ProtoMessage() {}

func (x *CMsgClientRichPresenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRichPresenceInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientRichPresenceInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientRichPresenceInfo) GetRichPresence() []*CMsgClientRichPresenceInfo_RichPresence {
	if x != nil {
		return x.RichPresence
	}
	return nil
}

type CMsgClientCheckFileSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientCheckFileSignature) Reset() {
	*x = CMsgClientCheckFileSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCheckFileSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCheckFileSignature) ProtoMessage() {}

func (x *CMsgClientCheckFileSignature) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCheckFileSignature.ProtoReflect.Descriptor instead.
func (*CMsgClientCheckFileSignature) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientCheckFileSignature) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientCheckFileSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                      *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Pid                        *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Eresult                    *uint32 `protobuf:"varint,3,opt,name=eresult" json:"eresult,omitempty"`
	Filename                   *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	Esignatureresult           *uint32 `protobuf:"varint,5,opt,name=esignatureresult" json:"esignatureresult,omitempty"`
	ShaFile                    []byte  `protobuf:"bytes,6,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	Signatureheader            []byte  `protobuf:"bytes,7,opt,name=signatureheader" json:"signatureheader,omitempty"`
	Filesize                   *uint32 `protobuf:"varint,8,opt,name=filesize" json:"filesize,omitempty"`
	Getlasterror               *uint32 `protobuf:"varint,9,opt,name=getlasterror" json:"getlasterror,omitempty"`
	Evalvesignaturecheckdetail *uint32 `protobuf:"varint,10,opt,name=evalvesignaturecheckdetail" json:"evalvesignaturecheckdetail,omitempty"`
}

func (x *CMsgClientCheckFileSignatureResponse) Reset() {
	*x = CMsgClientCheckFileSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCheckFileSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCheckFileSignatureResponse) ProtoMessage() {}

func (x *CMsgClientCheckFileSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCheckFileSignatureResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientCheckFileSignatureResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientCheckFileSignatureResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientCheckFileSignatureResponse) GetEsignatureresult() uint32 {
	if x != nil && x.Esignatureresult != nil {
		return *x.Esignatureresult
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientCheckFileSignatureResponse) GetSignatureheader() []byte {
	if x != nil {
		return x.Signatureheader
	}
	return nil
}

func (x *CMsgClientCheckFileSignatureResponse) GetFilesize() uint32 {
	if x != nil && x.Filesize != nil {
		return *x.Filesize
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetGetlasterror() uint32 {
	if x != nil && x.Getlasterror != nil {
		return *x.Getlasterror
	}
	return 0
}

func (x *CMsgClientCheckFileSignatureResponse) GetEvalvesignaturecheckdetail() uint32 {
	if x != nil && x.Evalvesignaturecheckdetail != nil {
		return *x.Evalvesignaturecheckdetail
	}
	return 0
}

type CMsgClientReadMachineAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename  *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Offset    *uint32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Cubtoread *uint32 `protobuf:"varint,3,opt,name=cubtoread" json:"cubtoread,omitempty"`
}

func (x *CMsgClientReadMachineAuth) Reset() {
	*x = CMsgClientReadMachineAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientReadMachineAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientReadMachineAuth) ProtoMessage() {}

func (x *CMsgClientReadMachineAuth) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientReadMachineAuth.ProtoReflect.Descriptor instead.
func (*CMsgClientReadMachineAuth) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientReadMachineAuth) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientReadMachineAuth) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CMsgClientReadMachineAuth) GetCubtoread() uint32 {
	if x != nil && x.Cubtoread != nil {
		return *x.Cubtoread
	}
	return 0
}

type CMsgClientReadMachineAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Eresult        *uint32 `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
	Filesize       *uint32 `protobuf:"varint,3,opt,name=filesize" json:"filesize,omitempty"`
	ShaFile        []byte  `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	Getlasterror   *uint32 `protobuf:"varint,5,opt,name=getlasterror" json:"getlasterror,omitempty"`
	Offset         *uint32 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	Cubread        *uint32 `protobuf:"varint,7,opt,name=cubread" json:"cubread,omitempty"`
	BytesRead      []byte  `protobuf:"bytes,8,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	FilenameSentry *string `protobuf:"bytes,9,opt,name=filename_sentry,json=filenameSentry" json:"filename_sentry,omitempty"`
}

func (x *CMsgClientReadMachineAuthResponse) Reset() {
	*x = CMsgClientReadMachineAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientReadMachineAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientReadMachineAuthResponse) ProtoMessage() {}

func (x *CMsgClientReadMachineAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientReadMachineAuthResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientReadMachineAuthResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientReadMachineAuthResponse) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientReadMachineAuthResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

func (x *CMsgClientReadMachineAuthResponse) GetFilesize() uint32 {
	if x != nil && x.Filesize != nil {
		return *x.Filesize
	}
	return 0
}

func (x *CMsgClientReadMachineAuthResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientReadMachineAuthResponse) GetGetlasterror() uint32 {
	if x != nil && x.Getlasterror != nil {
		return *x.Getlasterror
	}
	return 0
}

func (x *CMsgClientReadMachineAuthResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CMsgClientReadMachineAuthResponse) GetCubread() uint32 {
	if x != nil && x.Cubread != nil {
		return *x.Cubread
	}
	return 0
}

func (x *CMsgClientReadMachineAuthResponse) GetBytesRead() []byte {
	if x != nil {
		return x.BytesRead
	}
	return nil
}

func (x *CMsgClientReadMachineAuthResponse) GetFilenameSentry() string {
	if x != nil && x.FilenameSentry != nil {
		return *x.FilenameSentry
	}
	return ""
}

type CMsgClientUpdateMachineAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename        *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Offset          *uint32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Cubtowrite      *uint32 `protobuf:"varint,3,opt,name=cubtowrite" json:"cubtowrite,omitempty"`
	Bytes           []byte  `protobuf:"bytes,4,opt,name=bytes" json:"bytes,omitempty"`
	OtpType         *uint32 `protobuf:"varint,5,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpIdentifier   *string `protobuf:"bytes,6,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
	OtpSharedsecret []byte  `protobuf:"bytes,7,opt,name=otp_sharedsecret,json=otpSharedsecret" json:"otp_sharedsecret,omitempty"`
	OtpTimedrift    *uint32 `protobuf:"varint,8,opt,name=otp_timedrift,json=otpTimedrift" json:"otp_timedrift,omitempty"`
}

func (x *CMsgClientUpdateMachineAuth) Reset() {
	*x = CMsgClientUpdateMachineAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUpdateMachineAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUpdateMachineAuth) ProtoMessage() {}

func (x *CMsgClientUpdateMachineAuth) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUpdateMachineAuth.ProtoReflect.Descriptor instead.
func (*CMsgClientUpdateMachineAuth) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgClientUpdateMachineAuth) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientUpdateMachineAuth) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuth) GetCubtowrite() uint32 {
	if x != nil && x.Cubtowrite != nil {
		return *x.Cubtowrite
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuth) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *CMsgClientUpdateMachineAuth) GetOtpType() uint32 {
	if x != nil && x.OtpType != nil {
		return *x.OtpType
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuth) GetOtpIdentifier() string {
	if x != nil && x.OtpIdentifier != nil {
		return *x.OtpIdentifier
	}
	return ""
}

func (x *CMsgClientUpdateMachineAuth) GetOtpSharedsecret() []byte {
	if x != nil {
		return x.OtpSharedsecret
	}
	return nil
}

func (x *CMsgClientUpdateMachineAuth) GetOtpTimedrift() uint32 {
	if x != nil && x.OtpTimedrift != nil {
		return *x.OtpTimedrift
	}
	return 0
}

type CMsgClientUpdateMachineAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename      *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Eresult       *uint32 `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
	Filesize      *uint32 `protobuf:"varint,3,opt,name=filesize" json:"filesize,omitempty"`
	ShaFile       []byte  `protobuf:"bytes,4,opt,name=sha_file,json=shaFile" json:"sha_file,omitempty"`
	Getlasterror  *uint32 `protobuf:"varint,5,opt,name=getlasterror" json:"getlasterror,omitempty"`
	Offset        *uint32 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	Cubwrote      *uint32 `protobuf:"varint,7,opt,name=cubwrote" json:"cubwrote,omitempty"`
	OtpType       *int32  `protobuf:"varint,8,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpValue      *uint32 `protobuf:"varint,9,opt,name=otp_value,json=otpValue" json:"otp_value,omitempty"`
	OtpIdentifier *string `protobuf:"bytes,10,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
}

func (x *CMsgClientUpdateMachineAuthResponse) Reset() {
	*x = CMsgClientUpdateMachineAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUpdateMachineAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUpdateMachineAuthResponse) ProtoMessage() {}

func (x *CMsgClientUpdateMachineAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUpdateMachineAuthResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUpdateMachineAuthResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgClientUpdateMachineAuthResponse) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientUpdateMachineAuthResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetFilesize() uint32 {
	if x != nil && x.Filesize != nil {
		return *x.Filesize
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetShaFile() []byte {
	if x != nil {
		return x.ShaFile
	}
	return nil
}

func (x *CMsgClientUpdateMachineAuthResponse) GetGetlasterror() uint32 {
	if x != nil && x.Getlasterror != nil {
		return *x.Getlasterror
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetCubwrote() uint32 {
	if x != nil && x.Cubwrote != nil {
		return *x.Cubwrote
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetOtpType() int32 {
	if x != nil && x.OtpType != nil {
		return *x.OtpType
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetOtpValue() uint32 {
	if x != nil && x.OtpValue != nil {
		return *x.OtpValue
	}
	return 0
}

func (x *CMsgClientUpdateMachineAuthResponse) GetOtpIdentifier() string {
	if x != nil && x.OtpIdentifier != nil {
		return *x.OtpIdentifier
	}
	return ""
}

type CMsgClientRequestMachineAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename              *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	EresultSentryfile     *uint32 `protobuf:"varint,2,opt,name=eresult_sentryfile,json=eresultSentryfile" json:"eresult_sentryfile,omitempty"`
	Filesize              *uint32 `protobuf:"varint,3,opt,name=filesize" json:"filesize,omitempty"`
	ShaSentryfile         []byte  `protobuf:"bytes,4,opt,name=sha_sentryfile,json=shaSentryfile" json:"sha_sentryfile,omitempty"`
	LockAccountAction     *int32  `protobuf:"varint,6,opt,name=lock_account_action,json=lockAccountAction" json:"lock_account_action,omitempty"`
	OtpType               *uint32 `protobuf:"varint,7,opt,name=otp_type,json=otpType" json:"otp_type,omitempty"`
	OtpIdentifier         *string `protobuf:"bytes,8,opt,name=otp_identifier,json=otpIdentifier" json:"otp_identifier,omitempty"`
	OtpSharedsecret       []byte  `protobuf:"bytes,9,opt,name=otp_sharedsecret,json=otpSharedsecret" json:"otp_sharedsecret,omitempty"`
	OtpValue              *uint32 `protobuf:"varint,10,opt,name=otp_value,json=otpValue" json:"otp_value,omitempty"`
	MachineName           *string `protobuf:"bytes,11,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	MachineNameUserchosen *string `protobuf:"bytes,12,opt,name=machine_name_userchosen,json=machineNameUserchosen" json:"machine_name_userchosen,omitempty"`
}

func (x *CMsgClientRequestMachineAuth) Reset() {
	*x = CMsgClientRequestMachineAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestMachineAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestMachineAuth) ProtoMessage() {}

func (x *CMsgClientRequestMachineAuth) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestMachineAuth.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestMachineAuth) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgClientRequestMachineAuth) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgClientRequestMachineAuth) GetEresultSentryfile() uint32 {
	if x != nil && x.EresultSentryfile != nil {
		return *x.EresultSentryfile
	}
	return 0
}

func (x *CMsgClientRequestMachineAuth) GetFilesize() uint32 {
	if x != nil && x.Filesize != nil {
		return *x.Filesize
	}
	return 0
}

func (x *CMsgClientRequestMachineAuth) GetShaSentryfile() []byte {
	if x != nil {
		return x.ShaSentryfile
	}
	return nil
}

func (x *CMsgClientRequestMachineAuth) GetLockAccountAction() int32 {
	if x != nil && x.LockAccountAction != nil {
		return *x.LockAccountAction
	}
	return 0
}

func (x *CMsgClientRequestMachineAuth) GetOtpType() uint32 {
	if x != nil && x.OtpType != nil {
		return *x.OtpType
	}
	return 0
}

func (x *CMsgClientRequestMachineAuth) GetOtpIdentifier() string {
	if x != nil && x.OtpIdentifier != nil {
		return *x.OtpIdentifier
	}
	return ""
}

func (x *CMsgClientRequestMachineAuth) GetOtpSharedsecret() []byte {
	if x != nil {
		return x.OtpSharedsecret
	}
	return nil
}

func (x *CMsgClientRequestMachineAuth) GetOtpValue() uint32 {
	if x != nil && x.OtpValue != nil {
		return *x.OtpValue
	}
	return 0
}

func (x *CMsgClientRequestMachineAuth) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CMsgClientRequestMachineAuth) GetMachineNameUserchosen() string {
	if x != nil && x.MachineNameUserchosen != nil {
		return *x.MachineNameUserchosen
	}
	return ""
}

type CMsgClientRequestMachineAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *uint32 `protobuf:"varint,1,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CMsgClientRequestMachineAuthResponse) Reset() {
	*x = CMsgClientRequestMachineAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestMachineAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestMachineAuthResponse) ProtoMessage() {}

func (x *CMsgClientRequestMachineAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestMachineAuthResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestMachineAuthResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgClientRequestMachineAuthResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CMsgClientRegisterKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (x *CMsgClientRegisterKey) Reset() {
	*x = CMsgClientRegisterKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRegisterKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRegisterKey) ProtoMessage() {}

func (x *CMsgClientRegisterKey) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRegisterKey.ProtoReflect.Descriptor instead.
func (*CMsgClientRegisterKey) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgClientRegisterKey) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type CMsgClientPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult               *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PurchaseResultDetails *int32 `protobuf:"varint,2,opt,name=purchase_result_details,json=purchaseResultDetails" json:"purchase_result_details,omitempty"`
	PurchaseReceiptInfo   []byte `protobuf:"bytes,3,opt,name=purchase_receipt_info,json=purchaseReceiptInfo" json:"purchase_receipt_info,omitempty"`
}

// Default values for CMsgClientPurchaseResponse fields.
const (
	Default_CMsgClientPurchaseResponse_Eresult = int32(2)
)

func (x *CMsgClientPurchaseResponse) Reset() {
	*x = CMsgClientPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPurchaseResponse) ProtoMessage() {}

func (x *CMsgClientPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgClientPurchaseResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientPurchaseResponse_Eresult
}

func (x *CMsgClientPurchaseResponse) GetPurchaseResultDetails() int32 {
	if x != nil && x.PurchaseResultDetails != nil {
		return *x.PurchaseResultDetails
	}
	return 0
}

func (x *CMsgClientPurchaseResponse) GetPurchaseReceiptInfo() []byte {
	if x != nil {
		return x.PurchaseReceiptInfo
	}
	return nil
}

type CMsgClientActivateOEMLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiosManufacturer      *string `protobuf:"bytes,1,opt,name=bios_manufacturer,json=biosManufacturer" json:"bios_manufacturer,omitempty"`
	BiosSerialnumber      *string `protobuf:"bytes,2,opt,name=bios_serialnumber,json=biosSerialnumber" json:"bios_serialnumber,omitempty"`
	LicenseFile           []byte  `protobuf:"bytes,3,opt,name=license_file,json=licenseFile" json:"license_file,omitempty"`
	MainboardManufacturer *string `protobuf:"bytes,4,opt,name=mainboard_manufacturer,json=mainboardManufacturer" json:"mainboard_manufacturer,omitempty"`
	MainboardProduct      *string `protobuf:"bytes,5,opt,name=mainboard_product,json=mainboardProduct" json:"mainboard_product,omitempty"`
	MainboardSerialnumber *string `protobuf:"bytes,6,opt,name=mainboard_serialnumber,json=mainboardSerialnumber" json:"mainboard_serialnumber,omitempty"`
}

func (x *CMsgClientActivateOEMLicense) Reset() {
	*x = CMsgClientActivateOEMLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientActivateOEMLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientActivateOEMLicense) ProtoMessage() {}

func (x *CMsgClientActivateOEMLicense) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientActivateOEMLicense.ProtoReflect.Descriptor instead.
func (*CMsgClientActivateOEMLicense) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgClientActivateOEMLicense) GetBiosManufacturer() string {
	if x != nil && x.BiosManufacturer != nil {
		return *x.BiosManufacturer
	}
	return ""
}

func (x *CMsgClientActivateOEMLicense) GetBiosSerialnumber() string {
	if x != nil && x.BiosSerialnumber != nil {
		return *x.BiosSerialnumber
	}
	return ""
}

func (x *CMsgClientActivateOEMLicense) GetLicenseFile() []byte {
	if x != nil {
		return x.LicenseFile
	}
	return nil
}

func (x *CMsgClientActivateOEMLicense) GetMainboardManufacturer() string {
	if x != nil && x.MainboardManufacturer != nil {
		return *x.MainboardManufacturer
	}
	return ""
}

func (x *CMsgClientActivateOEMLicense) GetMainboardProduct() string {
	if x != nil && x.MainboardProduct != nil {
		return *x.MainboardProduct
	}
	return ""
}

func (x *CMsgClientActivateOEMLicense) GetMainboardSerialnumber() string {
	if x != nil && x.MainboardSerialnumber != nil {
		return *x.MainboardSerialnumber
	}
	return ""
}

type CMsgClientRegisterOEMMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OemRegisterFile []byte `protobuf:"bytes,1,opt,name=oem_register_file,json=oemRegisterFile" json:"oem_register_file,omitempty"`
}

func (x *CMsgClientRegisterOEMMachine) Reset() {
	*x = CMsgClientRegisterOEMMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRegisterOEMMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRegisterOEMMachine) ProtoMessage() {}

func (x *CMsgClientRegisterOEMMachine) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRegisterOEMMachine.ProtoReflect.Descriptor instead.
func (*CMsgClientRegisterOEMMachine) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgClientRegisterOEMMachine) GetOemRegisterFile() []byte {
	if x != nil {
		return x.OemRegisterFile
	}
	return nil
}

type CMsgClientRegisterOEMMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *uint32 `protobuf:"varint,1,opt,name=eresult" json:"eresult,omitempty"`
}

func (x *CMsgClientRegisterOEMMachineResponse) Reset() {
	*x = CMsgClientRegisterOEMMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRegisterOEMMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRegisterOEMMachineResponse) ProtoMessage() {}

func (x *CMsgClientRegisterOEMMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRegisterOEMMachineResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRegisterOEMMachineResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgClientRegisterOEMMachineResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CMsgClientPurchaseWithMachineID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId   *uint32 `protobuf:"varint,1,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	MachineInfo []byte  `protobuf:"bytes,2,opt,name=machine_info,json=machineInfo" json:"machine_info,omitempty"`
}

func (x *CMsgClientPurchaseWithMachineID) Reset() {
	*x = CMsgClientPurchaseWithMachineID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPurchaseWithMachineID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPurchaseWithMachineID) ProtoMessage() {}

func (x *CMsgClientPurchaseWithMachineID) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPurchaseWithMachineID.ProtoReflect.Descriptor instead.
func (*CMsgClientPurchaseWithMachineID) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgClientPurchaseWithMachineID) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *CMsgClientPurchaseWithMachineID) GetMachineInfo() []byte {
	if x != nil {
		return x.MachineInfo
	}
	return nil
}

type CMsgTrading_InitiateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeRequestId *uint32 `protobuf:"varint,1,opt,name=trade_request_id,json=tradeRequestId" json:"trade_request_id,omitempty"`
	OtherSteamid   *uint64 `protobuf:"varint,2,opt,name=other_steamid,json=otherSteamid" json:"other_steamid,omitempty"`
	OtherName      *string `protobuf:"bytes,3,opt,name=other_name,json=otherName" json:"other_name,omitempty"`
}

func (x *CMsgTrading_InitiateTradeRequest) Reset() {
	*x = CMsgTrading_InitiateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTrading_InitiateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTrading_InitiateTradeRequest) ProtoMessage() {}

func (x *CMsgTrading_InitiateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTrading_InitiateTradeRequest.ProtoReflect.Descriptor instead.
func (*CMsgTrading_InitiateTradeRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgTrading_InitiateTradeRequest) GetTradeRequestId() uint32 {
	if x != nil && x.TradeRequestId != nil {
		return *x.TradeRequestId
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeRequest) GetOtherSteamid() uint64 {
	if x != nil && x.OtherSteamid != nil {
		return *x.OtherSteamid
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeRequest) GetOtherName() string {
	if x != nil && x.OtherName != nil {
		return *x.OtherName
	}
	return ""
}

type CMsgTrading_InitiateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response                          *uint32 `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
	TradeRequestId                    *uint32 `protobuf:"varint,2,opt,name=trade_request_id,json=tradeRequestId" json:"trade_request_id,omitempty"`
	OtherSteamid                      *uint64 `protobuf:"varint,3,opt,name=other_steamid,json=otherSteamid" json:"other_steamid,omitempty"`
	SteamguardRequiredDays            *uint32 `protobuf:"varint,4,opt,name=steamguard_required_days,json=steamguardRequiredDays" json:"steamguard_required_days,omitempty"`
	NewDeviceCooldownDays             *uint32 `protobuf:"varint,5,opt,name=new_device_cooldown_days,json=newDeviceCooldownDays" json:"new_device_cooldown_days,omitempty"`
	DefaultPasswordResetProbationDays *uint32 `protobuf:"varint,6,opt,name=default_password_reset_probation_days,json=defaultPasswordResetProbationDays" json:"default_password_reset_probation_days,omitempty"`
	PasswordResetProbationDays        *uint32 `protobuf:"varint,7,opt,name=password_reset_probation_days,json=passwordResetProbationDays" json:"password_reset_probation_days,omitempty"`
	DefaultEmailChangeProbationDays   *uint32 `protobuf:"varint,8,opt,name=default_email_change_probation_days,json=defaultEmailChangeProbationDays" json:"default_email_change_probation_days,omitempty"`
	EmailChangeProbationDays          *uint32 `protobuf:"varint,9,opt,name=email_change_probation_days,json=emailChangeProbationDays" json:"email_change_probation_days,omitempty"`
}

func (x *CMsgTrading_InitiateTradeResponse) Reset() {
	*x = CMsgTrading_InitiateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTrading_InitiateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTrading_InitiateTradeResponse) ProtoMessage() {}

func (x *CMsgTrading_InitiateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTrading_InitiateTradeResponse.ProtoReflect.Descriptor instead.
func (*CMsgTrading_InitiateTradeResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgTrading_InitiateTradeResponse) GetResponse() uint32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetTradeRequestId() uint32 {
	if x != nil && x.TradeRequestId != nil {
		return *x.TradeRequestId
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetOtherSteamid() uint64 {
	if x != nil && x.OtherSteamid != nil {
		return *x.OtherSteamid
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetSteamguardRequiredDays() uint32 {
	if x != nil && x.SteamguardRequiredDays != nil {
		return *x.SteamguardRequiredDays
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetNewDeviceCooldownDays() uint32 {
	if x != nil && x.NewDeviceCooldownDays != nil {
		return *x.NewDeviceCooldownDays
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetDefaultPasswordResetProbationDays() uint32 {
	if x != nil && x.DefaultPasswordResetProbationDays != nil {
		return *x.DefaultPasswordResetProbationDays
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetPasswordResetProbationDays() uint32 {
	if x != nil && x.PasswordResetProbationDays != nil {
		return *x.PasswordResetProbationDays
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetDefaultEmailChangeProbationDays() uint32 {
	if x != nil && x.DefaultEmailChangeProbationDays != nil {
		return *x.DefaultEmailChangeProbationDays
	}
	return 0
}

func (x *CMsgTrading_InitiateTradeResponse) GetEmailChangeProbationDays() uint32 {
	if x != nil && x.EmailChangeProbationDays != nil {
		return *x.EmailChangeProbationDays
	}
	return 0
}

type CMsgTrading_CancelTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherSteamid *uint64 `protobuf:"varint,1,opt,name=other_steamid,json=otherSteamid" json:"other_steamid,omitempty"`
}

func (x *CMsgTrading_CancelTradeRequest) Reset() {
	*x = CMsgTrading_CancelTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTrading_CancelTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTrading_CancelTradeRequest) ProtoMessage() {}

func (x *CMsgTrading_CancelTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTrading_CancelTradeRequest.ProtoReflect.Descriptor instead.
func (*CMsgTrading_CancelTradeRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgTrading_CancelTradeRequest) GetOtherSteamid() uint64 {
	if x != nil && x.OtherSteamid != nil {
		return *x.OtherSteamid
	}
	return 0
}

type CMsgTrading_StartSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherSteamid *uint64 `protobuf:"varint,1,opt,name=other_steamid,json=otherSteamid" json:"other_steamid,omitempty"`
}

func (x *CMsgTrading_StartSession) Reset() {
	*x = CMsgTrading_StartSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTrading_StartSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTrading_StartSession) ProtoMessage() {}

func (x *CMsgTrading_StartSession) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTrading_StartSession.ProtoReflect.Descriptor instead.
func (*CMsgTrading_StartSession) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgTrading_StartSession) GetOtherSteamid() uint64 {
	if x != nil && x.OtherSteamid != nil {
		return *x.OtherSteamid
	}
	return 0
}

type CMsgClientGetCDNAuthToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepotId  *uint32 `protobuf:"varint,1,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	HostName *string `protobuf:"bytes,2,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	AppId    *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientGetCDNAuthToken) Reset() {
	*x = CMsgClientGetCDNAuthToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetCDNAuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetCDNAuthToken) ProtoMessage() {}

func (x *CMsgClientGetCDNAuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetCDNAuthToken.ProtoReflect.Descriptor instead.
func (*CMsgClientGetCDNAuthToken) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgClientGetCDNAuthToken) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientGetCDNAuthToken) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CMsgClientGetCDNAuthToken) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientGetDepotDecryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepotId *uint32 `protobuf:"varint,1,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	AppId   *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CMsgClientGetDepotDecryptionKey) Reset() {
	*x = CMsgClientGetDepotDecryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetDepotDecryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetDepotDecryptionKey) ProtoMessage() {}

func (x *CMsgClientGetDepotDecryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetDepotDecryptionKey.ProtoReflect.Descriptor instead.
func (*CMsgClientGetDepotDecryptionKey) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientGetDepotDecryptionKey) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientGetDepotDecryptionKey) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CMsgClientGetDepotDecryptionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult            *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	DepotId            *uint32 `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	DepotEncryptionKey []byte  `protobuf:"bytes,3,opt,name=depot_encryption_key,json=depotEncryptionKey" json:"depot_encryption_key,omitempty"`
}

// Default values for CMsgClientGetDepotDecryptionKeyResponse fields.
const (
	Default_CMsgClientGetDepotDecryptionKeyResponse_Eresult = int32(2)
)

func (x *CMsgClientGetDepotDecryptionKeyResponse) Reset() {
	*x = CMsgClientGetDepotDecryptionKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetDepotDecryptionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetDepotDecryptionKeyResponse) ProtoMessage() {}

func (x *CMsgClientGetDepotDecryptionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetDepotDecryptionKeyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetDepotDecryptionKeyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgClientGetDepotDecryptionKeyResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetDepotDecryptionKeyResponse_Eresult
}

func (x *CMsgClientGetDepotDecryptionKeyResponse) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientGetDepotDecryptionKeyResponse) GetDepotEncryptionKey() []byte {
	if x != nil {
		return x.DepotEncryptionKey
	}
	return nil
}

type CMsgClientCheckAppBetaPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Betapassword *string `protobuf:"bytes,2,opt,name=betapassword" json:"betapassword,omitempty"`
}

func (x *CMsgClientCheckAppBetaPassword) Reset() {
	*x = CMsgClientCheckAppBetaPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCheckAppBetaPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCheckAppBetaPassword) ProtoMessage() {}

func (x *CMsgClientCheckAppBetaPassword) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCheckAppBetaPassword.ProtoReflect.Descriptor instead.
func (*CMsgClientCheckAppBetaPassword) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgClientCheckAppBetaPassword) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientCheckAppBetaPassword) GetBetapassword() string {
	if x != nil && x.Betapassword != nil {
		return *x.Betapassword
	}
	return ""
}

type CMsgClientCheckAppBetaPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult       *int32                                                 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Betapasswords []*CMsgClientCheckAppBetaPasswordResponse_BetaPassword `protobuf:"bytes,4,rep,name=betapasswords" json:"betapasswords,omitempty"`
}

// Default values for CMsgClientCheckAppBetaPasswordResponse fields.
const (
	Default_CMsgClientCheckAppBetaPasswordResponse_Eresult = int32(2)
)

func (x *CMsgClientCheckAppBetaPasswordResponse) Reset() {
	*x = CMsgClientCheckAppBetaPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCheckAppBetaPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCheckAppBetaPasswordResponse) ProtoMessage() {}

func (x *CMsgClientCheckAppBetaPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCheckAppBetaPasswordResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientCheckAppBetaPasswordResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgClientCheckAppBetaPasswordResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientCheckAppBetaPasswordResponse_Eresult
}

func (x *CMsgClientCheckAppBetaPasswordResponse) GetBetapasswords() []*CMsgClientCheckAppBetaPasswordResponse_BetaPassword {
	if x != nil {
		return x.Betapasswords
	}
	return nil
}

type CMsgClientUpdateAppJobReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 *uint32  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotIds              []uint32 `protobuf:"varint,2,rep,name=depot_ids,json=depotIds" json:"depot_ids,omitempty"`
	AppState              *uint32  `protobuf:"varint,3,opt,name=app_state,json=appState" json:"app_state,omitempty"`
	JobAppError           *uint32  `protobuf:"varint,4,opt,name=job_app_error,json=jobAppError" json:"job_app_error,omitempty"`
	ErrorDetails          *string  `protobuf:"bytes,5,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
	JobDuration           *uint32  `protobuf:"varint,6,opt,name=job_duration,json=jobDuration" json:"job_duration,omitempty"`
	FilesValidationFailed *uint32  `protobuf:"varint,7,opt,name=files_validation_failed,json=filesValidationFailed" json:"files_validation_failed,omitempty"`
	JobBytesDownloaded    *uint64  `protobuf:"varint,8,opt,name=job_bytes_downloaded,json=jobBytesDownloaded" json:"job_bytes_downloaded,omitempty"`
	JobBytesStaged        *uint64  `protobuf:"varint,9,opt,name=job_bytes_staged,json=jobBytesStaged" json:"job_bytes_staged,omitempty"`
	BytesComitted         *uint64  `protobuf:"varint,10,opt,name=bytes_comitted,json=bytesComitted" json:"bytes_comitted,omitempty"`
	StartAppState         *uint32  `protobuf:"varint,11,opt,name=start_app_state,json=startAppState" json:"start_app_state,omitempty"`
	StatsMachineId        *uint64  `protobuf:"fixed64,12,opt,name=stats_machine_id,json=statsMachineId" json:"stats_machine_id,omitempty"`
	BranchName            *string  `protobuf:"bytes,13,opt,name=branch_name,json=branchName" json:"branch_name,omitempty"`
	TotalBytesDownloaded  *uint64  `protobuf:"varint,14,opt,name=total_bytes_downloaded,json=totalBytesDownloaded" json:"total_bytes_downloaded,omitempty"`
	TotalBytesStaged      *uint64  `protobuf:"varint,15,opt,name=total_bytes_staged,json=totalBytesStaged" json:"total_bytes_staged,omitempty"`
	TotalBytesRestored    *uint64  `protobuf:"varint,16,opt,name=total_bytes_restored,json=totalBytesRestored" json:"total_bytes_restored,omitempty"`
	IsBorrowed            *bool    `protobuf:"varint,17,opt,name=is_borrowed,json=isBorrowed" json:"is_borrowed,omitempty"`
	IsFreeWeekend         *bool    `protobuf:"varint,18,opt,name=is_free_weekend,json=isFreeWeekend" json:"is_free_weekend,omitempty"`
	TotalBytesLegacy      *uint64  `protobuf:"varint,19,opt,name=total_bytes_legacy,json=totalBytesLegacy" json:"total_bytes_legacy,omitempty"`
	TotalBytesPatched     *uint64  `protobuf:"varint,20,opt,name=total_bytes_patched,json=totalBytesPatched" json:"total_bytes_patched,omitempty"`
	TotalBytesSaved       *uint64  `protobuf:"varint,21,opt,name=total_bytes_saved,json=totalBytesSaved" json:"total_bytes_saved,omitempty"`
	CellId                *uint32  `protobuf:"varint,22,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
}

func (x *CMsgClientUpdateAppJobReport) Reset() {
	*x = CMsgClientUpdateAppJobReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUpdateAppJobReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUpdateAppJobReport) ProtoMessage() {}

func (x *CMsgClientUpdateAppJobReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUpdateAppJobReport.ProtoReflect.Descriptor instead.
func (*CMsgClientUpdateAppJobReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgClientUpdateAppJobReport) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetDepotIds() []uint32 {
	if x != nil {
		return x.DepotIds
	}
	return nil
}

func (x *CMsgClientUpdateAppJobReport) GetAppState() uint32 {
	if x != nil && x.AppState != nil {
		return *x.AppState
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetJobAppError() uint32 {
	if x != nil && x.JobAppError != nil {
		return *x.JobAppError
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

func (x *CMsgClientUpdateAppJobReport) GetJobDuration() uint32 {
	if x != nil && x.JobDuration != nil {
		return *x.JobDuration
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetFilesValidationFailed() uint32 {
	if x != nil && x.FilesValidationFailed != nil {
		return *x.FilesValidationFailed
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetJobBytesDownloaded() uint64 {
	if x != nil && x.JobBytesDownloaded != nil {
		return *x.JobBytesDownloaded
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetJobBytesStaged() uint64 {
	if x != nil && x.JobBytesStaged != nil {
		return *x.JobBytesStaged
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetBytesComitted() uint64 {
	if x != nil && x.BytesComitted != nil {
		return *x.BytesComitted
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetStartAppState() uint32 {
	if x != nil && x.StartAppState != nil {
		return *x.StartAppState
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetStatsMachineId() uint64 {
	if x != nil && x.StatsMachineId != nil {
		return *x.StatsMachineId
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesDownloaded() uint64 {
	if x != nil && x.TotalBytesDownloaded != nil {
		return *x.TotalBytesDownloaded
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesStaged() uint64 {
	if x != nil && x.TotalBytesStaged != nil {
		return *x.TotalBytesStaged
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesRestored() uint64 {
	if x != nil && x.TotalBytesRestored != nil {
		return *x.TotalBytesRestored
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetIsBorrowed() bool {
	if x != nil && x.IsBorrowed != nil {
		return *x.IsBorrowed
	}
	return false
}

func (x *CMsgClientUpdateAppJobReport) GetIsFreeWeekend() bool {
	if x != nil && x.IsFreeWeekend != nil {
		return *x.IsFreeWeekend
	}
	return false
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesLegacy() uint64 {
	if x != nil && x.TotalBytesLegacy != nil {
		return *x.TotalBytesLegacy
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesPatched() uint64 {
	if x != nil && x.TotalBytesPatched != nil {
		return *x.TotalBytesPatched
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetTotalBytesSaved() uint64 {
	if x != nil && x.TotalBytesSaved != nil {
		return *x.TotalBytesSaved
	}
	return 0
}

func (x *CMsgClientUpdateAppJobReport) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

type CMsgClientDPContentStatsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsMachineId     *uint64 `protobuf:"fixed64,1,opt,name=stats_machine_id,json=statsMachineId" json:"stats_machine_id,omitempty"`
	CountryCode        *string `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	OsType             *int32  `protobuf:"varint,3,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	Language           *int32  `protobuf:"varint,4,opt,name=language" json:"language,omitempty"`
	NumInstallFolders  *uint32 `protobuf:"varint,5,opt,name=num_install_folders,json=numInstallFolders" json:"num_install_folders,omitempty"`
	NumInstalledGames  *uint32 `protobuf:"varint,6,opt,name=num_installed_games,json=numInstalledGames" json:"num_installed_games,omitempty"`
	SizeInstalledGames *uint64 `protobuf:"varint,7,opt,name=size_installed_games,json=sizeInstalledGames" json:"size_installed_games,omitempty"`
}

func (x *CMsgClientDPContentStatsReport) Reset() {
	*x = CMsgClientDPContentStatsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDPContentStatsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDPContentStatsReport) ProtoMessage() {}

func (x *CMsgClientDPContentStatsReport) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDPContentStatsReport.ProtoReflect.Descriptor instead.
func (*CMsgClientDPContentStatsReport) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientDPContentStatsReport) GetStatsMachineId() uint64 {
	if x != nil && x.StatsMachineId != nil {
		return *x.StatsMachineId
	}
	return 0
}

func (x *CMsgClientDPContentStatsReport) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgClientDPContentStatsReport) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CMsgClientDPContentStatsReport) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CMsgClientDPContentStatsReport) GetNumInstallFolders() uint32 {
	if x != nil && x.NumInstallFolders != nil {
		return *x.NumInstallFolders
	}
	return 0
}

func (x *CMsgClientDPContentStatsReport) GetNumInstalledGames() uint32 {
	if x != nil && x.NumInstalledGames != nil {
		return *x.NumInstalledGames
	}
	return 0
}

func (x *CMsgClientDPContentStatsReport) GetSizeInstalledGames() uint64 {
	if x != nil && x.SizeInstalledGames != nil {
		return *x.SizeInstalledGames
	}
	return 0
}

type CMsgClientGetCDNAuthTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult        *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Token          *string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	ExpirationTime *uint32 `protobuf:"varint,3,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

// Default values for CMsgClientGetCDNAuthTokenResponse fields.
const (
	Default_CMsgClientGetCDNAuthTokenResponse_Eresult = uint32(2)
)

func (x *CMsgClientGetCDNAuthTokenResponse) Reset() {
	*x = CMsgClientGetCDNAuthTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetCDNAuthTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetCDNAuthTokenResponse) ProtoMessage() {}

func (x *CMsgClientGetCDNAuthTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetCDNAuthTokenResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetCDNAuthTokenResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgClientGetCDNAuthTokenResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetCDNAuthTokenResponse_Eresult
}

func (x *CMsgClientGetCDNAuthTokenResponse) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CMsgClientGetCDNAuthTokenResponse) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CMsgDownloadRateStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId         *uint32                                 `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Stats          []*CMsgDownloadRateStatistics_StatsInfo `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	ThrottlingKbps *uint32                                 `protobuf:"varint,3,opt,name=throttling_kbps,json=throttlingKbps" json:"throttling_kbps,omitempty"`
}

func (x *CMsgDownloadRateStatistics) Reset() {
	*x = CMsgDownloadRateStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDownloadRateStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDownloadRateStatistics) ProtoMessage() {}

func (x *CMsgDownloadRateStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDownloadRateStatistics.ProtoReflect.Descriptor instead.
func (*CMsgDownloadRateStatistics) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgDownloadRateStatistics) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgDownloadRateStatistics) GetStats() []*CMsgDownloadRateStatistics_StatsInfo {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgDownloadRateStatistics) GetThrottlingKbps() uint32 {
	if x != nil && x.ThrottlingKbps != nil {
		return *x.ThrottlingKbps
	}
	return 0
}

type CMsgClientRequestAccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountOrEmail *string `protobuf:"bytes,1,opt,name=account_or_email,json=accountOrEmail" json:"account_or_email,omitempty"`
	Action         *uint32 `protobuf:"varint,2,opt,name=action" json:"action,omitempty"`
}

func (x *CMsgClientRequestAccountData) Reset() {
	*x = CMsgClientRequestAccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestAccountData) ProtoMessage() {}

func (x *CMsgClientRequestAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestAccountData.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestAccountData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgClientRequestAccountData) GetAccountOrEmail() string {
	if x != nil && x.AccountOrEmail != nil {
		return *x.AccountOrEmail
	}
	return ""
}

func (x *CMsgClientRequestAccountData) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type CMsgClientRequestAccountDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                 *uint32 `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
	Eresult                *uint32 `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
	AccountName            *string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	CtMatches              *uint32 `protobuf:"varint,4,opt,name=ct_matches,json=ctMatches" json:"ct_matches,omitempty"`
	AccountNameSuggestion1 *string `protobuf:"bytes,5,opt,name=account_name_suggestion1,json=accountNameSuggestion1" json:"account_name_suggestion1,omitempty"`
	AccountNameSuggestion2 *string `protobuf:"bytes,6,opt,name=account_name_suggestion2,json=accountNameSuggestion2" json:"account_name_suggestion2,omitempty"`
	AccountNameSuggestion3 *string `protobuf:"bytes,7,opt,name=account_name_suggestion3,json=accountNameSuggestion3" json:"account_name_suggestion3,omitempty"`
}

func (x *CMsgClientRequestAccountDataResponse) Reset() {
	*x = CMsgClientRequestAccountDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestAccountDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestAccountDataResponse) ProtoMessage() {}

func (x *CMsgClientRequestAccountDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestAccountDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestAccountDataResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgClientRequestAccountDataResponse) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *CMsgClientRequestAccountDataResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

func (x *CMsgClientRequestAccountDataResponse) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CMsgClientRequestAccountDataResponse) GetCtMatches() uint32 {
	if x != nil && x.CtMatches != nil {
		return *x.CtMatches
	}
	return 0
}

func (x *CMsgClientRequestAccountDataResponse) GetAccountNameSuggestion1() string {
	if x != nil && x.AccountNameSuggestion1 != nil {
		return *x.AccountNameSuggestion1
	}
	return ""
}

func (x *CMsgClientRequestAccountDataResponse) GetAccountNameSuggestion2() string {
	if x != nil && x.AccountNameSuggestion2 != nil {
		return *x.AccountNameSuggestion2
	}
	return ""
}

func (x *CMsgClientRequestAccountDataResponse) GetAccountNameSuggestion3() string {
	if x != nil && x.AccountNameSuggestion3 != nil {
		return *x.AccountNameSuggestion3
	}
	return ""
}

type CMsgClientUGSGetGlobalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameid               *uint64 `protobuf:"varint,1,opt,name=gameid" json:"gameid,omitempty"`
	HistoryDaysRequested *uint32 `protobuf:"varint,2,opt,name=history_days_requested,json=historyDaysRequested" json:"history_days_requested,omitempty"`
	TimeLastRequested    *uint32 `protobuf:"fixed32,3,opt,name=time_last_requested,json=timeLastRequested" json:"time_last_requested,omitempty"`
	FirstDayCached       *uint32 `protobuf:"varint,4,opt,name=first_day_cached,json=firstDayCached" json:"first_day_cached,omitempty"`
	DaysCached           *uint32 `protobuf:"varint,5,opt,name=days_cached,json=daysCached" json:"days_cached,omitempty"`
}

func (x *CMsgClientUGSGetGlobalStats) Reset() {
	*x = CMsgClientUGSGetGlobalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUGSGetGlobalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUGSGetGlobalStats) ProtoMessage() {}

func (x *CMsgClientUGSGetGlobalStats) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUGSGetGlobalStats.ProtoReflect.Descriptor instead.
func (*CMsgClientUGSGetGlobalStats) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgClientUGSGetGlobalStats) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStats) GetHistoryDaysRequested() uint32 {
	if x != nil && x.HistoryDaysRequested != nil {
		return *x.HistoryDaysRequested
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStats) GetTimeLastRequested() uint32 {
	if x != nil && x.TimeLastRequested != nil {
		return *x.TimeLastRequested
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStats) GetFirstDayCached() uint32 {
	if x != nil && x.FirstDayCached != nil {
		return *x.FirstDayCached
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStats) GetDaysCached() uint32 {
	if x != nil && x.DaysCached != nil {
		return *x.DaysCached
	}
	return 0
}

type CMsgClientUGSGetGlobalStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult    *int32                                     `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Timestamp  *uint32                                    `protobuf:"fixed32,2,opt,name=timestamp" json:"timestamp,omitempty"`
	DayCurrent *int32                                     `protobuf:"varint,3,opt,name=day_current,json=dayCurrent" json:"day_current,omitempty"`
	Days       []*CMsgClientUGSGetGlobalStatsResponse_Day `protobuf:"bytes,4,rep,name=days" json:"days,omitempty"`
}

// Default values for CMsgClientUGSGetGlobalStatsResponse fields.
const (
	Default_CMsgClientUGSGetGlobalStatsResponse_Eresult = int32(2)
)

func (x *CMsgClientUGSGetGlobalStatsResponse) Reset() {
	*x = CMsgClientUGSGetGlobalStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUGSGetGlobalStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUGSGetGlobalStatsResponse) ProtoMessage() {}

func (x *CMsgClientUGSGetGlobalStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUGSGetGlobalStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientUGSGetGlobalStatsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgClientUGSGetGlobalStatsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientUGSGetGlobalStatsResponse_Eresult
}

func (x *CMsgClientUGSGetGlobalStatsResponse) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStatsResponse) GetDayCurrent() int32 {
	if x != nil && x.DayCurrent != nil {
		return *x.DayCurrent
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStatsResponse) GetDays() []*CMsgClientUGSGetGlobalStatsResponse_Day {
	if x != nil {
		return x.Days
	}
	return nil
}

type CMsgGameServerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdGs       *uint64                      `protobuf:"fixed64,1,opt,name=steam_id_gs,json=steamIdGs" json:"steam_id_gs,omitempty"`
	DeprecatedIp    *uint32                      `protobuf:"varint,2,opt,name=deprecated_ip,json=deprecatedIp" json:"deprecated_ip,omitempty"`
	QueryPort       *uint32                      `protobuf:"varint,3,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	GamePort        *uint32                      `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	SourcetvPort    *uint32                      `protobuf:"varint,5,opt,name=sourcetv_port,json=sourcetvPort" json:"sourcetv_port,omitempty"`
	Name            *string                      `protobuf:"bytes,22,opt,name=name" json:"name,omitempty"`
	GameIpAddress   *CMsgIPAddress               `protobuf:"bytes,23,opt,name=game_ip_address,json=gameIpAddress" json:"game_ip_address,omitempty"`
	AppId           *uint32                      `protobuf:"varint,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Gamedir         *string                      `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version         *string                      `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product         *string                      `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region          *string                      `protobuf:"bytes,10,opt,name=region" json:"region,omitempty"`
	Players         []*CMsgGameServerData_Player `protobuf:"bytes,11,rep,name=players" json:"players,omitempty"`
	MaxPlayers      *uint32                      `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	BotCount        *uint32                      `protobuf:"varint,13,opt,name=bot_count,json=botCount" json:"bot_count,omitempty"`
	Password        *bool                        `protobuf:"varint,14,opt,name=password" json:"password,omitempty"`
	Secure          *bool                        `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated       *bool                        `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os              *string                      `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	GameData        *string                      `protobuf:"bytes,18,opt,name=game_data,json=gameData" json:"game_data,omitempty"`
	GameDataVersion *uint32                      `protobuf:"varint,19,opt,name=game_data_version,json=gameDataVersion" json:"game_data_version,omitempty"`
	GameType        *string                      `protobuf:"bytes,20,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Map             *string                      `protobuf:"bytes,21,opt,name=map" json:"map,omitempty"`
}

func (x *CMsgGameServerData) Reset() {
	*x = CMsgGameServerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerData) ProtoMessage() {}

func (x *CMsgGameServerData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgGameServerData) GetSteamIdGs() uint64 {
	if x != nil && x.SteamIdGs != nil {
		return *x.SteamIdGs
	}
	return 0
}

func (x *CMsgGameServerData) GetDeprecatedIp() uint32 {
	if x != nil && x.DeprecatedIp != nil {
		return *x.DeprecatedIp
	}
	return 0
}

func (x *CMsgGameServerData) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGameServerData) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGameServerData) GetSourcetvPort() uint32 {
	if x != nil && x.SourcetvPort != nil {
		return *x.SourcetvPort
	}
	return 0
}

func (x *CMsgGameServerData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGameServerData) GetGameIpAddress() *CMsgIPAddress {
	if x != nil {
		return x.GameIpAddress
	}
	return nil
}

func (x *CMsgGameServerData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgGameServerData) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CMsgGameServerData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CMsgGameServerData) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CMsgGameServerData) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *CMsgGameServerData) GetPlayers() []*CMsgGameServerData_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGameServerData) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGameServerData) GetBotCount() uint32 {
	if x != nil && x.BotCount != nil {
		return *x.BotCount
	}
	return 0
}

func (x *CMsgGameServerData) GetPassword() bool {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return false
}

func (x *CMsgGameServerData) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CMsgGameServerData) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CMsgGameServerData) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CMsgGameServerData) GetGameData() string {
	if x != nil && x.GameData != nil {
		return *x.GameData
	}
	return ""
}

func (x *CMsgGameServerData) GetGameDataVersion() uint32 {
	if x != nil && x.GameDataVersion != nil {
		return *x.GameDataVersion
	}
	return 0
}

func (x *CMsgGameServerData) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CMsgGameServerData) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

type CMsgGameServerRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId      *uint64        `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	DeprecatedIp *uint32        `protobuf:"varint,2,opt,name=deprecated_ip,json=deprecatedIp" json:"deprecated_ip,omitempty"`
	QueryPort    *uint32        `protobuf:"varint,3,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	Ip           *CMsgIPAddress `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
}

func (x *CMsgGameServerRemove) Reset() {
	*x = CMsgGameServerRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRemove) ProtoMessage() {}

func (x *CMsgGameServerRemove) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRemove.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRemove) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgGameServerRemove) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGameServerRemove) GetDeprecatedIp() uint32 {
	if x != nil && x.DeprecatedIp != nil {
		return *x.DeprecatedIp
	}
	return 0
}

func (x *CMsgGameServerRemove) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGameServerRemove) GetIp() *CMsgIPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

type CMsgClientGMSServerQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	GeoLocationIp *uint32 `protobuf:"varint,2,opt,name=geo_location_ip,json=geoLocationIp" json:"geo_location_ip,omitempty"`
	RegionCode    *uint32 `protobuf:"varint,3,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
	FilterText    *string `protobuf:"bytes,4,opt,name=filter_text,json=filterText" json:"filter_text,omitempty"`
	MaxServers    *uint32 `protobuf:"varint,5,opt,name=max_servers,json=maxServers" json:"max_servers,omitempty"`
}

func (x *CMsgClientGMSServerQuery) Reset() {
	*x = CMsgClientGMSServerQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGMSServerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGMSServerQuery) ProtoMessage() {}

func (x *CMsgClientGMSServerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGMSServerQuery.ProtoReflect.Descriptor instead.
func (*CMsgClientGMSServerQuery) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgClientGMSServerQuery) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetGeoLocationIp() uint32 {
	if x != nil && x.GeoLocationIp != nil {
		return *x.GeoLocationIp
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetRegionCode() uint32 {
	if x != nil && x.RegionCode != nil {
		return *x.RegionCode
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetFilterText() string {
	if x != nil && x.FilterText != nil {
		return *x.FilterText
	}
	return ""
}

func (x *CMsgClientGMSServerQuery) GetMaxServers() uint32 {
	if x != nil && x.MaxServers != nil {
		return *x.MaxServers
	}
	return 0
}

type CMsgGMSClientServerQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CMsgGMSClientServerQueryResponse_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	Error   *string                                    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *CMsgGMSClientServerQueryResponse) Reset() {
	*x = CMsgGMSClientServerQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGMSClientServerQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGMSClientServerQueryResponse) ProtoMessage() {}

func (x *CMsgGMSClientServerQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGMSClientServerQueryResponse.ProtoReflect.Descriptor instead.
func (*CMsgGMSClientServerQueryResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgGMSClientServerQueryResponse) GetServers() []*CMsgGMSClientServerQueryResponse_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *CMsgGMSClientServerQueryResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type CMsgGameServerOutOfDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdGs *uint64 `protobuf:"fixed64,1,opt,name=steam_id_gs,json=steamIdGs" json:"steam_id_gs,omitempty"`
	Reject    *bool   `protobuf:"varint,2,opt,name=reject" json:"reject,omitempty"`
	Message   *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *CMsgGameServerOutOfDate) Reset() {
	*x = CMsgGameServerOutOfDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerOutOfDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerOutOfDate) ProtoMessage() {}

func (x *CMsgGameServerOutOfDate) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerOutOfDate.ProtoReflect.Descriptor instead.
func (*CMsgGameServerOutOfDate) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgGameServerOutOfDate) GetSteamIdGs() uint64 {
	if x != nil && x.SteamIdGs != nil {
		return *x.SteamIdGs
	}
	return 0
}

func (x *CMsgGameServerOutOfDate) GetReject() bool {
	if x != nil && x.Reject != nil {
		return *x.Reject
	}
	return false
}

func (x *CMsgGameServerOutOfDate) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgClientRedeemGuestPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuestPassId *uint64 `protobuf:"fixed64,1,opt,name=guest_pass_id,json=guestPassId" json:"guest_pass_id,omitempty"`
}

func (x *CMsgClientRedeemGuestPass) Reset() {
	*x = CMsgClientRedeemGuestPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRedeemGuestPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRedeemGuestPass) ProtoMessage() {}

func (x *CMsgClientRedeemGuestPass) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRedeemGuestPass.ProtoReflect.Descriptor instead.
func (*CMsgClientRedeemGuestPass) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientRedeemGuestPass) GetGuestPassId() uint64 {
	if x != nil && x.GuestPassId != nil {
		return *x.GuestPassId
	}
	return 0
}

type CMsgClientRedeemGuestPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult      *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PackageId    *uint32 `protobuf:"varint,2,opt,name=package_id,json=packageId" json:"package_id,omitempty"`
	MustOwnAppid *uint32 `protobuf:"varint,3,opt,name=must_own_appid,json=mustOwnAppid" json:"must_own_appid,omitempty"`
}

// Default values for CMsgClientRedeemGuestPassResponse fields.
const (
	Default_CMsgClientRedeemGuestPassResponse_Eresult = uint32(2)
)

func (x *CMsgClientRedeemGuestPassResponse) Reset() {
	*x = CMsgClientRedeemGuestPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRedeemGuestPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRedeemGuestPassResponse) ProtoMessage() {}

func (x *CMsgClientRedeemGuestPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRedeemGuestPassResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRedeemGuestPassResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgClientRedeemGuestPassResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRedeemGuestPassResponse_Eresult
}

func (x *CMsgClientRedeemGuestPassResponse) GetPackageId() uint32 {
	if x != nil && x.PackageId != nil {
		return *x.PackageId
	}
	return 0
}

func (x *CMsgClientRedeemGuestPassResponse) GetMustOwnAppid() uint32 {
	if x != nil && x.MustOwnAppid != nil {
		return *x.MustOwnAppid
	}
	return 0
}

type CMsgClientGetClanActivityCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidClans []uint64 `protobuf:"varint,1,rep,name=steamid_clans,json=steamidClans" json:"steamid_clans,omitempty"`
}

func (x *CMsgClientGetClanActivityCounts) Reset() {
	*x = CMsgClientGetClanActivityCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClanActivityCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClanActivityCounts) ProtoMessage() {}

func (x *CMsgClientGetClanActivityCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClanActivityCounts.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClanActivityCounts) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgClientGetClanActivityCounts) GetSteamidClans() []uint64 {
	if x != nil {
		return x.SteamidClans
	}
	return nil
}

type CMsgClientGetClanActivityCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientGetClanActivityCountsResponse fields.
const (
	Default_CMsgClientGetClanActivityCountsResponse_Eresult = uint32(2)
)

func (x *CMsgClientGetClanActivityCountsResponse) Reset() {
	*x = CMsgClientGetClanActivityCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetClanActivityCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetClanActivityCountsResponse) ProtoMessage() {}

func (x *CMsgClientGetClanActivityCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetClanActivityCountsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetClanActivityCountsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgClientGetClanActivityCountsResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetClanActivityCountsResponse_Eresult
}

type CMsgClientOGSReportString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accumulated *bool   `protobuf:"varint,1,opt,name=accumulated" json:"accumulated,omitempty"`
	Sessionid   *uint64 `protobuf:"varint,2,opt,name=sessionid" json:"sessionid,omitempty"`
	Severity    *int32  `protobuf:"varint,3,opt,name=severity" json:"severity,omitempty"`
	Formatter   *string `protobuf:"bytes,4,opt,name=formatter" json:"formatter,omitempty"`
	Varargs     []byte  `protobuf:"bytes,5,opt,name=varargs" json:"varargs,omitempty"`
}

func (x *CMsgClientOGSReportString) Reset() {
	*x = CMsgClientOGSReportString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientOGSReportString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientOGSReportString) ProtoMessage() {}

func (x *CMsgClientOGSReportString) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientOGSReportString.ProtoReflect.Descriptor instead.
func (*CMsgClientOGSReportString) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgClientOGSReportString) GetAccumulated() bool {
	if x != nil && x.Accumulated != nil {
		return *x.Accumulated
	}
	return false
}

func (x *CMsgClientOGSReportString) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CMsgClientOGSReportString) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *CMsgClientOGSReportString) GetFormatter() string {
	if x != nil && x.Formatter != nil {
		return *x.Formatter
	}
	return ""
}

func (x *CMsgClientOGSReportString) GetVarargs() []byte {
	if x != nil {
		return x.Varargs
	}
	return nil
}

type CMsgClientOGSReportBug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionid  *uint64 `protobuf:"varint,1,opt,name=sessionid" json:"sessionid,omitempty"`
	Bugtext    *string `protobuf:"bytes,2,opt,name=bugtext" json:"bugtext,omitempty"`
	Screenshot []byte  `protobuf:"bytes,3,opt,name=screenshot" json:"screenshot,omitempty"`
}

func (x *CMsgClientOGSReportBug) Reset() {
	*x = CMsgClientOGSReportBug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientOGSReportBug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientOGSReportBug) ProtoMessage() {}

func (x *CMsgClientOGSReportBug) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientOGSReportBug.ProtoReflect.Descriptor instead.
func (*CMsgClientOGSReportBug) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgClientOGSReportBug) GetSessionid() uint64 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *CMsgClientOGSReportBug) GetBugtext() string {
	if x != nil && x.Bugtext != nil {
		return *x.Bugtext
	}
	return ""
}

func (x *CMsgClientOGSReportBug) GetScreenshot() []byte {
	if x != nil {
		return x.Screenshot
	}
	return nil
}

type CMsgGSAssociateWithClan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdClan *uint64 `protobuf:"fixed64,1,opt,name=steam_id_clan,json=steamIdClan" json:"steam_id_clan,omitempty"`
}

func (x *CMsgGSAssociateWithClan) Reset() {
	*x = CMsgGSAssociateWithClan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSAssociateWithClan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSAssociateWithClan) ProtoMessage() {}

func (x *CMsgGSAssociateWithClan) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSAssociateWithClan.ProtoReflect.Descriptor instead.
func (*CMsgGSAssociateWithClan) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgGSAssociateWithClan) GetSteamIdClan() uint64 {
	if x != nil && x.SteamIdClan != nil {
		return *x.SteamIdClan
	}
	return 0
}

type CMsgGSAssociateWithClanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdClan *uint64 `protobuf:"fixed64,1,opt,name=steam_id_clan,json=steamIdClan" json:"steam_id_clan,omitempty"`
	Eresult     *uint32 `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgGSAssociateWithClanResponse fields.
const (
	Default_CMsgGSAssociateWithClanResponse_Eresult = uint32(2)
)

func (x *CMsgGSAssociateWithClanResponse) Reset() {
	*x = CMsgGSAssociateWithClanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSAssociateWithClanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSAssociateWithClanResponse) ProtoMessage() {}

func (x *CMsgGSAssociateWithClanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSAssociateWithClanResponse.ProtoReflect.Descriptor instead.
func (*CMsgGSAssociateWithClanResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgGSAssociateWithClanResponse) GetSteamIdClan() uint64 {
	if x != nil && x.SteamIdClan != nil {
		return *x.SteamIdClan
	}
	return 0
}

func (x *CMsgGSAssociateWithClanResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgGSAssociateWithClanResponse_Eresult
}

type CMsgGSComputeNewPlayerCompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdCandidate *uint64 `protobuf:"fixed64,1,opt,name=steam_id_candidate,json=steamIdCandidate" json:"steam_id_candidate,omitempty"`
}

func (x *CMsgGSComputeNewPlayerCompatibility) Reset() {
	*x = CMsgGSComputeNewPlayerCompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSComputeNewPlayerCompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSComputeNewPlayerCompatibility) ProtoMessage() {}

func (x *CMsgGSComputeNewPlayerCompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSComputeNewPlayerCompatibility.ProtoReflect.Descriptor instead.
func (*CMsgGSComputeNewPlayerCompatibility) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgGSComputeNewPlayerCompatibility) GetSteamIdCandidate() uint64 {
	if x != nil && x.SteamIdCandidate != nil {
		return *x.SteamIdCandidate
	}
	return 0
}

type CMsgGSComputeNewPlayerCompatibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamIdCandidate         *uint64 `protobuf:"fixed64,1,opt,name=steam_id_candidate,json=steamIdCandidate" json:"steam_id_candidate,omitempty"`
	Eresult                  *uint32 `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	IsClanMember             *bool   `protobuf:"varint,3,opt,name=is_clan_member,json=isClanMember" json:"is_clan_member,omitempty"`
	CtDontLikeYou            *int32  `protobuf:"varint,4,opt,name=ct_dont_like_you,json=ctDontLikeYou" json:"ct_dont_like_you,omitempty"`
	CtYouDontLike            *int32  `protobuf:"varint,5,opt,name=ct_you_dont_like,json=ctYouDontLike" json:"ct_you_dont_like,omitempty"`
	CtClanmembersDontLikeYou *int32  `protobuf:"varint,6,opt,name=ct_clanmembers_dont_like_you,json=ctClanmembersDontLikeYou" json:"ct_clanmembers_dont_like_you,omitempty"`
}

// Default values for CMsgGSComputeNewPlayerCompatibilityResponse fields.
const (
	Default_CMsgGSComputeNewPlayerCompatibilityResponse_Eresult = uint32(2)
)

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) Reset() {
	*x = CMsgGSComputeNewPlayerCompatibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSComputeNewPlayerCompatibilityResponse) ProtoMessage() {}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSComputeNewPlayerCompatibilityResponse.ProtoReflect.Descriptor instead.
func (*CMsgGSComputeNewPlayerCompatibilityResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetSteamIdCandidate() uint64 {
	if x != nil && x.SteamIdCandidate != nil {
		return *x.SteamIdCandidate
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgGSComputeNewPlayerCompatibilityResponse_Eresult
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetIsClanMember() bool {
	if x != nil && x.IsClanMember != nil {
		return *x.IsClanMember
	}
	return false
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtDontLikeYou() int32 {
	if x != nil && x.CtDontLikeYou != nil {
		return *x.CtDontLikeYou
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtYouDontLike() int32 {
	if x != nil && x.CtYouDontLike != nil {
		return *x.CtYouDontLike
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtClanmembersDontLikeYou() int32 {
	if x != nil && x.CtClanmembersDontLikeYou != nil {
		return *x.CtClanmembersDontLikeYou
	}
	return 0
}

type CMsgClientSentLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientSentLogs) Reset() {
	*x = CMsgClientSentLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSentLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSentLogs) ProtoMessage() {}

func (x *CMsgClientSentLogs) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSentLogs.ProtoReflect.Descriptor instead.
func (*CMsgClientSentLogs) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{78}
}

type CMsgGCClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Msgtype *uint32 `protobuf:"varint,2,opt,name=msgtype" json:"msgtype,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Gcname  *string `protobuf:"bytes,5,opt,name=gcname" json:"gcname,omitempty"`
	Ip      *uint32 `protobuf:"varint,6,opt,name=ip" json:"ip,omitempty"`
}

func (x *CMsgGCClient) Reset() {
	*x = CMsgGCClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCClient) ProtoMessage() {}

func (x *CMsgGCClient) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCClient.ProtoReflect.Descriptor instead.
func (*CMsgGCClient) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgGCClient) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgGCClient) GetMsgtype() uint32 {
	if x != nil && x.Msgtype != nil {
		return *x.Msgtype
	}
	return 0
}

func (x *CMsgGCClient) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CMsgGCClient) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGCClient) GetGcname() string {
	if x != nil && x.Gcname != nil {
		return *x.Gcname
	}
	return ""
}

func (x *CMsgGCClient) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

type CMsgClientRequestFreeLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids []uint32 `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
}

func (x *CMsgClientRequestFreeLicense) Reset() {
	*x = CMsgClientRequestFreeLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestFreeLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestFreeLicense) ProtoMessage() {}

func (x *CMsgClientRequestFreeLicense) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestFreeLicense.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestFreeLicense) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgClientRequestFreeLicense) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CMsgClientRequestFreeLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult           *uint32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	GrantedPackageids []uint32 `protobuf:"varint,2,rep,name=granted_packageids,json=grantedPackageids" json:"granted_packageids,omitempty"`
	GrantedAppids     []uint32 `protobuf:"varint,3,rep,name=granted_appids,json=grantedAppids" json:"granted_appids,omitempty"`
}

// Default values for CMsgClientRequestFreeLicenseResponse fields.
const (
	Default_CMsgClientRequestFreeLicenseResponse_Eresult = uint32(2)
)

func (x *CMsgClientRequestFreeLicenseResponse) Reset() {
	*x = CMsgClientRequestFreeLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestFreeLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestFreeLicenseResponse) ProtoMessage() {}

func (x *CMsgClientRequestFreeLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestFreeLicenseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestFreeLicenseResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgClientRequestFreeLicenseResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientRequestFreeLicenseResponse_Eresult
}

func (x *CMsgClientRequestFreeLicenseResponse) GetGrantedPackageids() []uint32 {
	if x != nil {
		return x.GrantedPackageids
	}
	return nil
}

func (x *CMsgClientRequestFreeLicenseResponse) GetGrantedAppids() []uint32 {
	if x != nil {
		return x.GrantedAppids
	}
	return nil
}

type CMsgDRMDownloadRequestWithCrashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadFlags      *uint32 `protobuf:"varint,1,opt,name=download_flags,json=downloadFlags" json:"download_flags,omitempty"`
	DownloadTypesKnown *uint32 `protobuf:"varint,2,opt,name=download_types_known,json=downloadTypesKnown" json:"download_types_known,omitempty"`
	GuidDrm            []byte  `protobuf:"bytes,3,opt,name=guid_drm,json=guidDrm" json:"guid_drm,omitempty"`
	GuidSplit          []byte  `protobuf:"bytes,4,opt,name=guid_split,json=guidSplit" json:"guid_split,omitempty"`
	GuidMerge          []byte  `protobuf:"bytes,5,opt,name=guid_merge,json=guidMerge" json:"guid_merge,omitempty"`
	ModuleName         *string `protobuf:"bytes,6,opt,name=module_name,json=moduleName" json:"module_name,omitempty"`
	ModulePath         *string `protobuf:"bytes,7,opt,name=module_path,json=modulePath" json:"module_path,omitempty"`
	CrashData          []byte  `protobuf:"bytes,8,opt,name=crash_data,json=crashData" json:"crash_data,omitempty"`
}

func (x *CMsgDRMDownloadRequestWithCrashData) Reset() {
	*x = CMsgDRMDownloadRequestWithCrashData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDRMDownloadRequestWithCrashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDRMDownloadRequestWithCrashData) ProtoMessage() {}

func (x *CMsgDRMDownloadRequestWithCrashData) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDRMDownloadRequestWithCrashData.ProtoReflect.Descriptor instead.
func (*CMsgDRMDownloadRequestWithCrashData) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetDownloadFlags() uint32 {
	if x != nil && x.DownloadFlags != nil {
		return *x.DownloadFlags
	}
	return 0
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetDownloadTypesKnown() uint32 {
	if x != nil && x.DownloadTypesKnown != nil {
		return *x.DownloadTypesKnown
	}
	return 0
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetGuidDrm() []byte {
	if x != nil {
		return x.GuidDrm
	}
	return nil
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetGuidSplit() []byte {
	if x != nil {
		return x.GuidSplit
	}
	return nil
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetGuidMerge() []byte {
	if x != nil {
		return x.GuidMerge
	}
	return nil
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetModuleName() string {
	if x != nil && x.ModuleName != nil {
		return *x.ModuleName
	}
	return ""
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetModulePath() string {
	if x != nil && x.ModulePath != nil {
		return *x.ModulePath
	}
	return ""
}

func (x *CMsgDRMDownloadRequestWithCrashData) GetCrashData() []byte {
	if x != nil {
		return x.CrashData
	}
	return nil
}

type CMsgDRMDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult             *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AppId               *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	BlobDownloadType    *uint32 `protobuf:"varint,3,opt,name=blob_download_type,json=blobDownloadType" json:"blob_download_type,omitempty"`
	MergeGuid           []byte  `protobuf:"bytes,4,opt,name=merge_guid,json=mergeGuid" json:"merge_guid,omitempty"`
	DownloadFileDfsIp   *uint32 `protobuf:"varint,5,opt,name=download_file_dfs_ip,json=downloadFileDfsIp" json:"download_file_dfs_ip,omitempty"`
	DownloadFileDfsPort *uint32 `protobuf:"varint,6,opt,name=download_file_dfs_port,json=downloadFileDfsPort" json:"download_file_dfs_port,omitempty"`
	DownloadFileUrl     *string `protobuf:"bytes,7,opt,name=download_file_url,json=downloadFileUrl" json:"download_file_url,omitempty"`
	ModulePath          *string `protobuf:"bytes,8,opt,name=module_path,json=modulePath" json:"module_path,omitempty"`
}

// Default values for CMsgDRMDownloadResponse fields.
const (
	Default_CMsgDRMDownloadResponse_Eresult = uint32(2)
)

func (x *CMsgDRMDownloadResponse) Reset() {
	*x = CMsgDRMDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDRMDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDRMDownloadResponse) ProtoMessage() {}

func (x *CMsgDRMDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDRMDownloadResponse.ProtoReflect.Descriptor instead.
func (*CMsgDRMDownloadResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgDRMDownloadResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgDRMDownloadResponse_Eresult
}

func (x *CMsgDRMDownloadResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgDRMDownloadResponse) GetBlobDownloadType() uint32 {
	if x != nil && x.BlobDownloadType != nil {
		return *x.BlobDownloadType
	}
	return 0
}

func (x *CMsgDRMDownloadResponse) GetMergeGuid() []byte {
	if x != nil {
		return x.MergeGuid
	}
	return nil
}

func (x *CMsgDRMDownloadResponse) GetDownloadFileDfsIp() uint32 {
	if x != nil && x.DownloadFileDfsIp != nil {
		return *x.DownloadFileDfsIp
	}
	return 0
}

func (x *CMsgDRMDownloadResponse) GetDownloadFileDfsPort() uint32 {
	if x != nil && x.DownloadFileDfsPort != nil {
		return *x.DownloadFileDfsPort
	}
	return 0
}

func (x *CMsgDRMDownloadResponse) GetDownloadFileUrl() string {
	if x != nil && x.DownloadFileUrl != nil {
		return *x.DownloadFileUrl
	}
	return ""
}

func (x *CMsgDRMDownloadResponse) GetModulePath() string {
	if x != nil && x.ModulePath != nil {
		return *x.ModulePath
	}
	return ""
}

type CMsgDRMFinalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EResult             *uint32 `protobuf:"varint,1,opt,name=eResult,def=2" json:"eResult,omitempty"`
	AppId               *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	BlobDownloadType    *uint32 `protobuf:"varint,3,opt,name=blob_download_type,json=blobDownloadType" json:"blob_download_type,omitempty"`
	ErrorDetail         *uint32 `protobuf:"varint,4,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	MergeGuid           []byte  `protobuf:"bytes,5,opt,name=merge_guid,json=mergeGuid" json:"merge_guid,omitempty"`
	DownloadFileDfsIp   *uint32 `protobuf:"varint,6,opt,name=download_file_dfs_ip,json=downloadFileDfsIp" json:"download_file_dfs_ip,omitempty"`
	DownloadFileDfsPort *uint32 `protobuf:"varint,7,opt,name=download_file_dfs_port,json=downloadFileDfsPort" json:"download_file_dfs_port,omitempty"`
	DownloadFileUrl     *string `protobuf:"bytes,8,opt,name=download_file_url,json=downloadFileUrl" json:"download_file_url,omitempty"`
}

// Default values for CMsgDRMFinalResult fields.
const (
	Default_CMsgDRMFinalResult_EResult = uint32(2)
)

func (x *CMsgDRMFinalResult) Reset() {
	*x = CMsgDRMFinalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDRMFinalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDRMFinalResult) ProtoMessage() {}

func (x *CMsgDRMFinalResult) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDRMFinalResult.ProtoReflect.Descriptor instead.
func (*CMsgDRMFinalResult) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgDRMFinalResult) GetEResult() uint32 {
	if x != nil && x.EResult != nil {
		return *x.EResult
	}
	return Default_CMsgDRMFinalResult_EResult
}

func (x *CMsgDRMFinalResult) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgDRMFinalResult) GetBlobDownloadType() uint32 {
	if x != nil && x.BlobDownloadType != nil {
		return *x.BlobDownloadType
	}
	return 0
}

func (x *CMsgDRMFinalResult) GetErrorDetail() uint32 {
	if x != nil && x.ErrorDetail != nil {
		return *x.ErrorDetail
	}
	return 0
}

func (x *CMsgDRMFinalResult) GetMergeGuid() []byte {
	if x != nil {
		return x.MergeGuid
	}
	return nil
}

func (x *CMsgDRMFinalResult) GetDownloadFileDfsIp() uint32 {
	if x != nil && x.DownloadFileDfsIp != nil {
		return *x.DownloadFileDfsIp
	}
	return 0
}

func (x *CMsgDRMFinalResult) GetDownloadFileDfsPort() uint32 {
	if x != nil && x.DownloadFileDfsPort != nil {
		return *x.DownloadFileDfsPort
	}
	return 0
}

func (x *CMsgDRMFinalResult) GetDownloadFileUrl() string {
	if x != nil && x.DownloadFileUrl != nil {
		return *x.DownloadFileUrl
	}
	return ""
}

type CMsgClientDPCheckSpecialSurvey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyId *uint32 `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
}

func (x *CMsgClientDPCheckSpecialSurvey) Reset() {
	*x = CMsgClientDPCheckSpecialSurvey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDPCheckSpecialSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDPCheckSpecialSurvey) ProtoMessage() {}

func (x *CMsgClientDPCheckSpecialSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDPCheckSpecialSurvey.ProtoReflect.Descriptor instead.
func (*CMsgClientDPCheckSpecialSurvey) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgClientDPCheckSpecialSurvey) GetSurveyId() uint32 {
	if x != nil && x.SurveyId != nil {
		return *x.SurveyId
	}
	return 0
}

type CMsgClientDPCheckSpecialSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EResult         *uint32 `protobuf:"varint,1,opt,name=eResult,def=2" json:"eResult,omitempty"`
	State           *uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	Name            *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	CustomUrl       *string `protobuf:"bytes,4,opt,name=custom_url,json=customUrl" json:"custom_url,omitempty"`
	IncludeSoftware *bool   `protobuf:"varint,5,opt,name=include_software,json=includeSoftware" json:"include_software,omitempty"`
	Token           []byte  `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
}

// Default values for CMsgClientDPCheckSpecialSurveyResponse fields.
const (
	Default_CMsgClientDPCheckSpecialSurveyResponse_EResult = uint32(2)
)

func (x *CMsgClientDPCheckSpecialSurveyResponse) Reset() {
	*x = CMsgClientDPCheckSpecialSurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDPCheckSpecialSurveyResponse) ProtoMessage() {}

func (x *CMsgClientDPCheckSpecialSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDPCheckSpecialSurveyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientDPCheckSpecialSurveyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetEResult() uint32 {
	if x != nil && x.EResult != nil {
		return *x.EResult
	}
	return Default_CMsgClientDPCheckSpecialSurveyResponse_EResult
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetCustomUrl() string {
	if x != nil && x.CustomUrl != nil {
		return *x.CustomUrl
	}
	return ""
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetIncludeSoftware() bool {
	if x != nil && x.IncludeSoftware != nil {
		return *x.IncludeSoftware
	}
	return false
}

func (x *CMsgClientDPCheckSpecialSurveyResponse) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type CMsgClientDPSendSpecialSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyId *uint32 `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id,omitempty"`
	Data     []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgClientDPSendSpecialSurveyResponse) Reset() {
	*x = CMsgClientDPSendSpecialSurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDPSendSpecialSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDPSendSpecialSurveyResponse) ProtoMessage() {}

func (x *CMsgClientDPSendSpecialSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDPSendSpecialSurveyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientDPSendSpecialSurveyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgClientDPSendSpecialSurveyResponse) GetSurveyId() uint32 {
	if x != nil && x.SurveyId != nil {
		return *x.SurveyId
	}
	return 0
}

func (x *CMsgClientDPSendSpecialSurveyResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CMsgClientDPSendSpecialSurveyResponseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EResult *uint32 `protobuf:"varint,1,opt,name=eResult,def=2" json:"eResult,omitempty"`
	Token   []byte  `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

// Default values for CMsgClientDPSendSpecialSurveyResponseReply fields.
const (
	Default_CMsgClientDPSendSpecialSurveyResponseReply_EResult = uint32(2)
)

func (x *CMsgClientDPSendSpecialSurveyResponseReply) Reset() {
	*x = CMsgClientDPSendSpecialSurveyResponseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDPSendSpecialSurveyResponseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDPSendSpecialSurveyResponseReply) ProtoMessage() {}

func (x *CMsgClientDPSendSpecialSurveyResponseReply) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDPSendSpecialSurveyResponseReply.ProtoReflect.Descriptor instead.
func (*CMsgClientDPSendSpecialSurveyResponseReply) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgClientDPSendSpecialSurveyResponseReply) GetEResult() uint32 {
	if x != nil && x.EResult != nil {
		return *x.EResult
	}
	return Default_CMsgClientDPSendSpecialSurveyResponseReply_EResult
}

func (x *CMsgClientDPSendSpecialSurveyResponseReply) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type CMsgClientRequestForgottenPasswordEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName   *string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	PasswordTried *string `protobuf:"bytes,2,opt,name=password_tried,json=passwordTried" json:"password_tried,omitempty"`
}

func (x *CMsgClientRequestForgottenPasswordEmail) Reset() {
	*x = CMsgClientRequestForgottenPasswordEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestForgottenPasswordEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestForgottenPasswordEmail) ProtoMessage() {}

func (x *CMsgClientRequestForgottenPasswordEmail) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestForgottenPasswordEmail.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestForgottenPasswordEmail) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgClientRequestForgottenPasswordEmail) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CMsgClientRequestForgottenPasswordEmail) GetPasswordTried() string {
	if x != nil && x.PasswordTried != nil {
		return *x.PasswordTried
	}
	return ""
}

type CMsgClientRequestForgottenPasswordEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EResult           *uint32 `protobuf:"varint,1,opt,name=eResult" json:"eResult,omitempty"`
	UseSecretQuestion *bool   `protobuf:"varint,2,opt,name=use_secret_question,json=useSecretQuestion" json:"use_secret_question,omitempty"`
}

func (x *CMsgClientRequestForgottenPasswordEmailResponse) Reset() {
	*x = CMsgClientRequestForgottenPasswordEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestForgottenPasswordEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestForgottenPasswordEmailResponse) ProtoMessage() {}

func (x *CMsgClientRequestForgottenPasswordEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestForgottenPasswordEmailResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestForgottenPasswordEmailResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgClientRequestForgottenPasswordEmailResponse) GetEResult() uint32 {
	if x != nil && x.EResult != nil {
		return *x.EResult
	}
	return 0
}

func (x *CMsgClientRequestForgottenPasswordEmailResponse) GetUseSecretQuestion() bool {
	if x != nil && x.UseSecretQuestion != nil {
		return *x.UseSecretQuestion
	}
	return false
}

type CMsgClientItemAnnouncements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountNewItems *uint32                                   `protobuf:"varint,1,opt,name=count_new_items,json=countNewItems" json:"count_new_items,omitempty"`
	UnseenItems   []*CMsgClientItemAnnouncements_UnseenItem `protobuf:"bytes,2,rep,name=unseen_items,json=unseenItems" json:"unseen_items,omitempty"`
}

func (x *CMsgClientItemAnnouncements) Reset() {
	*x = CMsgClientItemAnnouncements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientItemAnnouncements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientItemAnnouncements) ProtoMessage() {}

func (x *CMsgClientItemAnnouncements) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientItemAnnouncements.ProtoReflect.Descriptor instead.
func (*CMsgClientItemAnnouncements) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgClientItemAnnouncements) GetCountNewItems() uint32 {
	if x != nil && x.CountNewItems != nil {
		return *x.CountNewItems
	}
	return 0
}

func (x *CMsgClientItemAnnouncements) GetUnseenItems() []*CMsgClientItemAnnouncements_UnseenItem {
	if x != nil {
		return x.UnseenItems
	}
	return nil
}

type CMsgClientRequestItemAnnouncements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientRequestItemAnnouncements) Reset() {
	*x = CMsgClientRequestItemAnnouncements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestItemAnnouncements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestItemAnnouncements) ProtoMessage() {}

func (x *CMsgClientRequestItemAnnouncements) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestItemAnnouncements.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestItemAnnouncements) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{92}
}

type CMsgClientUserNotifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*CMsgClientUserNotifications_Notification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
}

func (x *CMsgClientUserNotifications) Reset() {
	*x = CMsgClientUserNotifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUserNotifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUserNotifications) ProtoMessage() {}

func (x *CMsgClientUserNotifications) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUserNotifications.ProtoReflect.Descriptor instead.
func (*CMsgClientUserNotifications) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientUserNotifications) GetNotifications() []*CMsgClientUserNotifications_Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type CMsgClientCommentNotifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountNewComments              *uint32 `protobuf:"varint,1,opt,name=count_new_comments,json=countNewComments" json:"count_new_comments,omitempty"`
	CountNewCommentsOwner         *uint32 `protobuf:"varint,2,opt,name=count_new_comments_owner,json=countNewCommentsOwner" json:"count_new_comments_owner,omitempty"`
	CountNewCommentsSubscriptions *uint32 `protobuf:"varint,3,opt,name=count_new_comments_subscriptions,json=countNewCommentsSubscriptions" json:"count_new_comments_subscriptions,omitempty"`
}

func (x *CMsgClientCommentNotifications) Reset() {
	*x = CMsgClientCommentNotifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCommentNotifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCommentNotifications) ProtoMessage() {}

func (x *CMsgClientCommentNotifications) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCommentNotifications.ProtoReflect.Descriptor instead.
func (*CMsgClientCommentNotifications) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgClientCommentNotifications) GetCountNewComments() uint32 {
	if x != nil && x.CountNewComments != nil {
		return *x.CountNewComments
	}
	return 0
}

func (x *CMsgClientCommentNotifications) GetCountNewCommentsOwner() uint32 {
	if x != nil && x.CountNewCommentsOwner != nil {
		return *x.CountNewCommentsOwner
	}
	return 0
}

func (x *CMsgClientCommentNotifications) GetCountNewCommentsSubscriptions() uint32 {
	if x != nil && x.CountNewCommentsSubscriptions != nil {
		return *x.CountNewCommentsSubscriptions
	}
	return 0
}

type CMsgClientRequestCommentNotifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientRequestCommentNotifications) Reset() {
	*x = CMsgClientRequestCommentNotifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestCommentNotifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestCommentNotifications) ProtoMessage() {}

func (x *CMsgClientRequestCommentNotifications) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestCommentNotifications.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestCommentNotifications) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{95}
}

type CMsgClientOfflineMessageNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfflineMessages            *uint32  `protobuf:"varint,1,opt,name=offline_messages,json=offlineMessages" json:"offline_messages,omitempty"`
	FriendsWithOfflineMessages []uint32 `protobuf:"varint,2,rep,name=friends_with_offline_messages,json=friendsWithOfflineMessages" json:"friends_with_offline_messages,omitempty"`
}

func (x *CMsgClientOfflineMessageNotification) Reset() {
	*x = CMsgClientOfflineMessageNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientOfflineMessageNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientOfflineMessageNotification) ProtoMessage() {}

func (x *CMsgClientOfflineMessageNotification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientOfflineMessageNotification.ProtoReflect.Descriptor instead.
func (*CMsgClientOfflineMessageNotification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgClientOfflineMessageNotification) GetOfflineMessages() uint32 {
	if x != nil && x.OfflineMessages != nil {
		return *x.OfflineMessages
	}
	return 0
}

func (x *CMsgClientOfflineMessageNotification) GetFriendsWithOfflineMessages() []uint32 {
	if x != nil {
		return x.FriendsWithOfflineMessages
	}
	return nil
}

type CMsgClientRequestOfflineMessageCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientRequestOfflineMessageCount) Reset() {
	*x = CMsgClientRequestOfflineMessageCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRequestOfflineMessageCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRequestOfflineMessageCount) ProtoMessage() {}

func (x *CMsgClientRequestOfflineMessageCount) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRequestOfflineMessageCount.ProtoReflect.Descriptor instead.
func (*CMsgClientRequestOfflineMessageCount) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{97}
}

type CMsgClientChatGetFriendMessageHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CMsgClientChatGetFriendMessageHistory) Reset() {
	*x = CMsgClientChatGetFriendMessageHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChatGetFriendMessageHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatGetFriendMessageHistory) ProtoMessage() {}

func (x *CMsgClientChatGetFriendMessageHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatGetFriendMessageHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientChatGetFriendMessageHistory) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgClientChatGetFriendMessageHistory) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgClientChatGetFriendMessageHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64                                                        `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Success  *uint32                                                        `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Messages []*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) Reset() {
	*x = CMsgClientChatGetFriendMessageHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatGetFriendMessageHistoryResponse) ProtoMessage() {}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatGetFriendMessageHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientChatGetFriendMessageHistoryResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) GetSuccess() uint32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse) GetMessages() []*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CMsgClientChatGetFriendMessageHistoryForOfflineMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientChatGetFriendMessageHistoryForOfflineMessages) Reset() {
	*x = CMsgClientChatGetFriendMessageHistoryForOfflineMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChatGetFriendMessageHistoryForOfflineMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatGetFriendMessageHistoryForOfflineMessages) ProtoMessage() {}

func (x *CMsgClientChatGetFriendMessageHistoryForOfflineMessages) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatGetFriendMessageHistoryForOfflineMessages.ProtoReflect.Descriptor instead.
func (*CMsgClientChatGetFriendMessageHistoryForOfflineMessages) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{100}
}

type CMsgClientFSGetFriendsSteamLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountids []uint32 `protobuf:"varint,1,rep,name=accountids" json:"accountids,omitempty"`
}

func (x *CMsgClientFSGetFriendsSteamLevels) Reset() {
	*x = CMsgClientFSGetFriendsSteamLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientFSGetFriendsSteamLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientFSGetFriendsSteamLevels) ProtoMessage() {}

func (x *CMsgClientFSGetFriendsSteamLevels) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientFSGetFriendsSteamLevels.ProtoReflect.Descriptor instead.
func (*CMsgClientFSGetFriendsSteamLevels) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgClientFSGetFriendsSteamLevels) GetAccountids() []uint32 {
	if x != nil {
		return x.Accountids
	}
	return nil
}

type CMsgClientFSGetFriendsSteamLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*CMsgClientFSGetFriendsSteamLevelsResponse_Friend `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse) Reset() {
	*x = CMsgClientFSGetFriendsSteamLevelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientFSGetFriendsSteamLevelsResponse) ProtoMessage() {}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientFSGetFriendsSteamLevelsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientFSGetFriendsSteamLevelsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse) GetFriends() []*CMsgClientFSGetFriendsSteamLevelsResponse_Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

type CMsgClientEmailAddrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddress                         *string `protobuf:"bytes,1,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	EmailIsValidated                     *bool   `protobuf:"varint,2,opt,name=email_is_validated,json=emailIsValidated" json:"email_is_validated,omitempty"`
	EmailValidationChanged               *bool   `protobuf:"varint,3,opt,name=email_validation_changed,json=emailValidationChanged" json:"email_validation_changed,omitempty"`
	CredentialChangeRequiresCode         *bool   `protobuf:"varint,4,opt,name=credential_change_requires_code,json=credentialChangeRequiresCode" json:"credential_change_requires_code,omitempty"`
	PasswordOrSecretqaChangeRequiresCode *bool   `protobuf:"varint,5,opt,name=password_or_secretqa_change_requires_code,json=passwordOrSecretqaChangeRequiresCode" json:"password_or_secretqa_change_requires_code,omitempty"`
	RemindUserAboutEmail                 *bool   `protobuf:"varint,6,opt,name=remind_user_about_email,json=remindUserAboutEmail" json:"remind_user_about_email,omitempty"`
}

func (x *CMsgClientEmailAddrInfo) Reset() {
	*x = CMsgClientEmailAddrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientEmailAddrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientEmailAddrInfo) ProtoMessage() {}

func (x *CMsgClientEmailAddrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientEmailAddrInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientEmailAddrInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgClientEmailAddrInfo) GetEmailAddress() string {
	if x != nil && x.EmailAddress != nil {
		return *x.EmailAddress
	}
	return ""
}

func (x *CMsgClientEmailAddrInfo) GetEmailIsValidated() bool {
	if x != nil && x.EmailIsValidated != nil {
		return *x.EmailIsValidated
	}
	return false
}

func (x *CMsgClientEmailAddrInfo) GetEmailValidationChanged() bool {
	if x != nil && x.EmailValidationChanged != nil {
		return *x.EmailValidationChanged
	}
	return false
}

func (x *CMsgClientEmailAddrInfo) GetCredentialChangeRequiresCode() bool {
	if x != nil && x.CredentialChangeRequiresCode != nil {
		return *x.CredentialChangeRequiresCode
	}
	return false
}

func (x *CMsgClientEmailAddrInfo) GetPasswordOrSecretqaChangeRequiresCode() bool {
	if x != nil && x.PasswordOrSecretqaChangeRequiresCode != nil {
		return *x.PasswordOrSecretqaChangeRequiresCode
	}
	return false
}

func (x *CMsgClientEmailAddrInfo) GetRemindUserAboutEmail() bool {
	if x != nil && x.RemindUserAboutEmail != nil {
		return *x.RemindUserAboutEmail
	}
	return false
}

type CMsgCREItemVoteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileIds []*CMsgCREItemVoteSummary_PublishedFileId `protobuf:"bytes,1,rep,name=published_file_ids,json=publishedFileIds" json:"published_file_ids,omitempty"`
}

func (x *CMsgCREItemVoteSummary) Reset() {
	*x = CMsgCREItemVoteSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREItemVoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREItemVoteSummary) ProtoMessage() {}

func (x *CMsgCREItemVoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREItemVoteSummary.ProtoReflect.Descriptor instead.
func (*CMsgCREItemVoteSummary) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgCREItemVoteSummary) GetPublishedFileIds() []*CMsgCREItemVoteSummary_PublishedFileId {
	if x != nil {
		return x.PublishedFileIds
	}
	return nil
}

type CMsgCREItemVoteSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult           *int32                                            `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ItemVoteSummaries []*CMsgCREItemVoteSummaryResponse_ItemVoteSummary `protobuf:"bytes,2,rep,name=item_vote_summaries,json=itemVoteSummaries" json:"item_vote_summaries,omitempty"`
}

// Default values for CMsgCREItemVoteSummaryResponse fields.
const (
	Default_CMsgCREItemVoteSummaryResponse_Eresult = int32(2)
)

func (x *CMsgCREItemVoteSummaryResponse) Reset() {
	*x = CMsgCREItemVoteSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREItemVoteSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREItemVoteSummaryResponse) ProtoMessage() {}

func (x *CMsgCREItemVoteSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREItemVoteSummaryResponse.ProtoReflect.Descriptor instead.
func (*CMsgCREItemVoteSummaryResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgCREItemVoteSummaryResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgCREItemVoteSummaryResponse_Eresult
}

func (x *CMsgCREItemVoteSummaryResponse) GetItemVoteSummaries() []*CMsgCREItemVoteSummaryResponse_ItemVoteSummary {
	if x != nil {
		return x.ItemVoteSummaries
	}
	return nil
}

type CMsgCREUpdateUserPublishedItemVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	VoteUp          *bool   `protobuf:"varint,2,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
}

func (x *CMsgCREUpdateUserPublishedItemVote) Reset() {
	*x = CMsgCREUpdateUserPublishedItemVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREUpdateUserPublishedItemVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREUpdateUserPublishedItemVote) ProtoMessage() {}

func (x *CMsgCREUpdateUserPublishedItemVote) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREUpdateUserPublishedItemVote.ProtoReflect.Descriptor instead.
func (*CMsgCREUpdateUserPublishedItemVote) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgCREUpdateUserPublishedItemVote) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgCREUpdateUserPublishedItemVote) GetVoteUp() bool {
	if x != nil && x.VoteUp != nil {
		return *x.VoteUp
	}
	return false
}

type CMsgCREUpdateUserPublishedItemVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgCREUpdateUserPublishedItemVoteResponse fields.
const (
	Default_CMsgCREUpdateUserPublishedItemVoteResponse_Eresult = int32(2)
)

func (x *CMsgCREUpdateUserPublishedItemVoteResponse) Reset() {
	*x = CMsgCREUpdateUserPublishedItemVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREUpdateUserPublishedItemVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREUpdateUserPublishedItemVoteResponse) ProtoMessage() {}

func (x *CMsgCREUpdateUserPublishedItemVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREUpdateUserPublishedItemVoteResponse.ProtoReflect.Descriptor instead.
func (*CMsgCREUpdateUserPublishedItemVoteResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgCREUpdateUserPublishedItemVoteResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgCREUpdateUserPublishedItemVoteResponse_Eresult
}

type CMsgCREGetUserPublishedItemVoteDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileIds []*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId `protobuf:"bytes,1,rep,name=published_file_ids,json=publishedFileIds" json:"published_file_ids,omitempty"`
}

func (x *CMsgCREGetUserPublishedItemVoteDetails) Reset() {
	*x = CMsgCREGetUserPublishedItemVoteDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREGetUserPublishedItemVoteDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREGetUserPublishedItemVoteDetails) ProtoMessage() {}

func (x *CMsgCREGetUserPublishedItemVoteDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREGetUserPublishedItemVoteDetails.ProtoReflect.Descriptor instead.
func (*CMsgCREGetUserPublishedItemVoteDetails) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgCREGetUserPublishedItemVoteDetails) GetPublishedFileIds() []*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId {
	if x != nil {
		return x.PublishedFileIds
	}
	return nil
}

type CMsgCREGetUserPublishedItemVoteDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult             *int32                                                               `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	UserItemVoteDetails []*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail `protobuf:"bytes,2,rep,name=user_item_vote_details,json=userItemVoteDetails" json:"user_item_vote_details,omitempty"`
}

// Default values for CMsgCREGetUserPublishedItemVoteDetailsResponse fields.
const (
	Default_CMsgCREGetUserPublishedItemVoteDetailsResponse_Eresult = int32(2)
)

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse) Reset() {
	*x = CMsgCREGetUserPublishedItemVoteDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREGetUserPublishedItemVoteDetailsResponse) ProtoMessage() {}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREGetUserPublishedItemVoteDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgCREGetUserPublishedItemVoteDetailsResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgCREGetUserPublishedItemVoteDetailsResponse_Eresult
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse) GetUserItemVoteDetails() []*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail {
	if x != nil {
		return x.UserItemVoteDetails
	}
	return nil
}

type CMsgGameServerPingSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyIp      *uint32                            `protobuf:"fixed32,1,opt,name=my_ip,json=myIp" json:"my_ip,omitempty"`
	GsAppId   *int32                             `protobuf:"varint,2,opt,name=gs_app_id,json=gsAppId" json:"gs_app_id,omitempty"`
	GsSamples []*CMsgGameServerPingSample_Sample `protobuf:"bytes,3,rep,name=gs_samples,json=gsSamples" json:"gs_samples,omitempty"`
}

func (x *CMsgGameServerPingSample) Reset() {
	*x = CMsgGameServerPingSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPingSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingSample) ProtoMessage() {}

func (x *CMsgGameServerPingSample) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingSample.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingSample) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgGameServerPingSample) GetMyIp() uint32 {
	if x != nil && x.MyIp != nil {
		return *x.MyIp
	}
	return 0
}

func (x *CMsgGameServerPingSample) GetGsAppId() int32 {
	if x != nil && x.GsAppId != nil {
		return *x.GsAppId
	}
	return 0
}

func (x *CMsgGameServerPingSample) GetGsSamples() []*CMsgGameServerPingSample_Sample {
	if x != nil {
		return x.GsSamples
	}
	return nil
}

type CMsgFSGetFollowerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CMsgFSGetFollowerCount) Reset() {
	*x = CMsgFSGetFollowerCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSGetFollowerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSGetFollowerCount) ProtoMessage() {}

func (x *CMsgFSGetFollowerCount) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSGetFollowerCount.ProtoReflect.Descriptor instead.
func (*CMsgFSGetFollowerCount) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgFSGetFollowerCount) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgFSGetFollowerCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Count   *int32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for CMsgFSGetFollowerCountResponse fields.
const (
	Default_CMsgFSGetFollowerCountResponse_Eresult = int32(2)
	Default_CMsgFSGetFollowerCountResponse_Count   = int32(0)
)

func (x *CMsgFSGetFollowerCountResponse) Reset() {
	*x = CMsgFSGetFollowerCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSGetFollowerCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSGetFollowerCountResponse) ProtoMessage() {}

func (x *CMsgFSGetFollowerCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSGetFollowerCountResponse.ProtoReflect.Descriptor instead.
func (*CMsgFSGetFollowerCountResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgFSGetFollowerCountResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgFSGetFollowerCountResponse_Eresult
}

func (x *CMsgFSGetFollowerCountResponse) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_CMsgFSGetFollowerCountResponse_Count
}

type CMsgFSGetIsFollowing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CMsgFSGetIsFollowing) Reset() {
	*x = CMsgFSGetIsFollowing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSGetIsFollowing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSGetIsFollowing) ProtoMessage() {}

func (x *CMsgFSGetIsFollowing) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSGetIsFollowing.ProtoReflect.Descriptor instead.
func (*CMsgFSGetIsFollowing) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{113}
}

func (x *CMsgFSGetIsFollowing) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgFSGetIsFollowingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult     *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	IsFollowing *bool  `protobuf:"varint,2,opt,name=is_following,json=isFollowing,def=0" json:"is_following,omitempty"`
}

// Default values for CMsgFSGetIsFollowingResponse fields.
const (
	Default_CMsgFSGetIsFollowingResponse_Eresult     = int32(2)
	Default_CMsgFSGetIsFollowingResponse_IsFollowing = bool(false)
)

func (x *CMsgFSGetIsFollowingResponse) Reset() {
	*x = CMsgFSGetIsFollowingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSGetIsFollowingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSGetIsFollowingResponse) ProtoMessage() {}

func (x *CMsgFSGetIsFollowingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSGetIsFollowingResponse.ProtoReflect.Descriptor instead.
func (*CMsgFSGetIsFollowingResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgFSGetIsFollowingResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgFSGetIsFollowingResponse_Eresult
}

func (x *CMsgFSGetIsFollowingResponse) GetIsFollowing() bool {
	if x != nil && x.IsFollowing != nil {
		return *x.IsFollowing
	}
	return Default_CMsgFSGetIsFollowingResponse_IsFollowing
}

type CMsgFSEnumerateFollowingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex *uint32 `protobuf:"varint,1,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
}

func (x *CMsgFSEnumerateFollowingList) Reset() {
	*x = CMsgFSEnumerateFollowingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSEnumerateFollowingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSEnumerateFollowingList) ProtoMessage() {}

func (x *CMsgFSEnumerateFollowingList) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSEnumerateFollowingList.ProtoReflect.Descriptor instead.
func (*CMsgFSEnumerateFollowingList) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgFSEnumerateFollowingList) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CMsgFSEnumerateFollowingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult      *int32   `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	TotalResults *int32   `protobuf:"varint,2,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
	SteamIds     []uint64 `protobuf:"fixed64,3,rep,name=steam_ids,json=steamIds" json:"steam_ids,omitempty"`
}

// Default values for CMsgFSEnumerateFollowingListResponse fields.
const (
	Default_CMsgFSEnumerateFollowingListResponse_Eresult = int32(2)
)

func (x *CMsgFSEnumerateFollowingListResponse) Reset() {
	*x = CMsgFSEnumerateFollowingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgFSEnumerateFollowingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFSEnumerateFollowingListResponse) ProtoMessage() {}

func (x *CMsgFSEnumerateFollowingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFSEnumerateFollowingListResponse.ProtoReflect.Descriptor instead.
func (*CMsgFSEnumerateFollowingListResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgFSEnumerateFollowingListResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgFSEnumerateFollowingListResponse_Eresult
}

func (x *CMsgFSEnumerateFollowingListResponse) GetTotalResults() int32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

func (x *CMsgFSEnumerateFollowingListResponse) GetSteamIds() []uint64 {
	if x != nil {
		return x.SteamIds
	}
	return nil
}

type CMsgDPGetNumberOfCurrentPlayers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgDPGetNumberOfCurrentPlayers) Reset() {
	*x = CMsgDPGetNumberOfCurrentPlayers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPGetNumberOfCurrentPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPGetNumberOfCurrentPlayers) ProtoMessage() {}

func (x *CMsgDPGetNumberOfCurrentPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPGetNumberOfCurrentPlayers.ProtoReflect.Descriptor instead.
func (*CMsgDPGetNumberOfCurrentPlayers) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgDPGetNumberOfCurrentPlayers) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgDPGetNumberOfCurrentPlayersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult     *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	PlayerCount *int32 `protobuf:"varint,2,opt,name=player_count,json=playerCount" json:"player_count,omitempty"`
}

// Default values for CMsgDPGetNumberOfCurrentPlayersResponse fields.
const (
	Default_CMsgDPGetNumberOfCurrentPlayersResponse_Eresult = int32(2)
)

func (x *CMsgDPGetNumberOfCurrentPlayersResponse) Reset() {
	*x = CMsgDPGetNumberOfCurrentPlayersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDPGetNumberOfCurrentPlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDPGetNumberOfCurrentPlayersResponse) ProtoMessage() {}

func (x *CMsgDPGetNumberOfCurrentPlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDPGetNumberOfCurrentPlayersResponse.ProtoReflect.Descriptor instead.
func (*CMsgDPGetNumberOfCurrentPlayersResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgDPGetNumberOfCurrentPlayersResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgDPGetNumberOfCurrentPlayersResponse_Eresult
}

func (x *CMsgDPGetNumberOfCurrentPlayersResponse) GetPlayerCount() int32 {
	if x != nil && x.PlayerCount != nil {
		return *x.PlayerCount
	}
	return 0
}

type CMsgClientFriendUserStatusPublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendSteamid *uint64 `protobuf:"fixed64,1,opt,name=friend_steamid,json=friendSteamid" json:"friend_steamid,omitempty"`
	Appid         *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	StatusText    *string `protobuf:"bytes,3,opt,name=status_text,json=statusText" json:"status_text,omitempty"`
}

func (x *CMsgClientFriendUserStatusPublished) Reset() {
	*x = CMsgClientFriendUserStatusPublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientFriendUserStatusPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientFriendUserStatusPublished) ProtoMessage() {}

func (x *CMsgClientFriendUserStatusPublished) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientFriendUserStatusPublished.ProtoReflect.Descriptor instead.
func (*CMsgClientFriendUserStatusPublished) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgClientFriendUserStatusPublished) GetFriendSteamid() uint64 {
	if x != nil && x.FriendSteamid != nil {
		return *x.FriendSteamid
	}
	return 0
}

func (x *CMsgClientFriendUserStatusPublished) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientFriendUserStatusPublished) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

type CMsgClientServiceMethodLegacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName       *string `protobuf:"bytes,1,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	SerializedMethod []byte  `protobuf:"bytes,2,opt,name=serialized_method,json=serializedMethod" json:"serialized_method,omitempty"`
	IsNotification   *bool   `protobuf:"varint,3,opt,name=is_notification,json=isNotification" json:"is_notification,omitempty"`
}

func (x *CMsgClientServiceMethodLegacy) Reset() {
	*x = CMsgClientServiceMethodLegacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServiceMethodLegacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServiceMethodLegacy) ProtoMessage() {}

func (x *CMsgClientServiceMethodLegacy) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServiceMethodLegacy.ProtoReflect.Descriptor instead.
func (*CMsgClientServiceMethodLegacy) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgClientServiceMethodLegacy) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CMsgClientServiceMethodLegacy) GetSerializedMethod() []byte {
	if x != nil {
		return x.SerializedMethod
	}
	return nil
}

func (x *CMsgClientServiceMethodLegacy) GetIsNotification() bool {
	if x != nil && x.IsNotification != nil {
		return *x.IsNotification
	}
	return false
}

type CMsgClientServiceMethodLegacyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodName               *string `protobuf:"bytes,1,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	SerializedMethodResponse []byte  `protobuf:"bytes,2,opt,name=serialized_method_response,json=serializedMethodResponse" json:"serialized_method_response,omitempty"`
}

func (x *CMsgClientServiceMethodLegacyResponse) Reset() {
	*x = CMsgClientServiceMethodLegacyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServiceMethodLegacyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServiceMethodLegacyResponse) ProtoMessage() {}

func (x *CMsgClientServiceMethodLegacyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServiceMethodLegacyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientServiceMethodLegacyResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgClientServiceMethodLegacyResponse) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CMsgClientServiceMethodLegacyResponse) GetSerializedMethodResponse() []byte {
	if x != nil {
		return x.SerializedMethodResponse
	}
	return nil
}

type CMsgClientUIMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uimode   *uint32 `protobuf:"varint,1,opt,name=uimode" json:"uimode,omitempty"`
	ChatMode *uint32 `protobuf:"varint,2,opt,name=chat_mode,json=chatMode" json:"chat_mode,omitempty"`
}

func (x *CMsgClientUIMode) Reset() {
	*x = CMsgClientUIMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUIMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUIMode) ProtoMessage() {}

func (x *CMsgClientUIMode) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUIMode.ProtoReflect.Descriptor instead.
func (*CMsgClientUIMode) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgClientUIMode) GetUimode() uint32 {
	if x != nil && x.Uimode != nil {
		return *x.Uimode
	}
	return 0
}

func (x *CMsgClientUIMode) GetChatMode() uint32 {
	if x != nil && x.ChatMode != nil {
		return *x.ChatMode
	}
	return 0
}

type CMsgClientVanityURLChangedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VanityUrl *string `protobuf:"bytes,1,opt,name=vanity_url,json=vanityUrl" json:"vanity_url,omitempty"`
}

func (x *CMsgClientVanityURLChangedNotification) Reset() {
	*x = CMsgClientVanityURLChangedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientVanityURLChangedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientVanityURLChangedNotification) ProtoMessage() {}

func (x *CMsgClientVanityURLChangedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientVanityURLChangedNotification.ProtoReflect.Descriptor instead.
func (*CMsgClientVanityURLChangedNotification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgClientVanityURLChangedNotification) GetVanityUrl() string {
	if x != nil && x.VanityUrl != nil {
		return *x.VanityUrl
	}
	return ""
}

type CMsgClientAuthorizeLocalDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceDescription *string `protobuf:"bytes,1,opt,name=device_description,json=deviceDescription" json:"device_description,omitempty"`
	OwnerAccountId    *uint32 `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	LocalDeviceToken  *uint64 `protobuf:"varint,3,opt,name=local_device_token,json=localDeviceToken" json:"local_device_token,omitempty"`
}

func (x *CMsgClientAuthorizeLocalDeviceRequest) Reset() {
	*x = CMsgClientAuthorizeLocalDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAuthorizeLocalDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthorizeLocalDeviceRequest) ProtoMessage() {}

func (x *CMsgClientAuthorizeLocalDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthorizeLocalDeviceRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthorizeLocalDeviceRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgClientAuthorizeLocalDeviceRequest) GetDeviceDescription() string {
	if x != nil && x.DeviceDescription != nil {
		return *x.DeviceDescription
	}
	return ""
}

func (x *CMsgClientAuthorizeLocalDeviceRequest) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgClientAuthorizeLocalDeviceRequest) GetLocalDeviceToken() uint64 {
	if x != nil && x.LocalDeviceToken != nil {
		return *x.LocalDeviceToken
	}
	return 0
}

type CMsgClientAuthorizeLocalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult           *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	OwnerAccountId    *uint32 `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	AuthedDeviceToken *uint64 `protobuf:"varint,3,opt,name=authed_device_token,json=authedDeviceToken" json:"authed_device_token,omitempty"`
}

// Default values for CMsgClientAuthorizeLocalDevice fields.
const (
	Default_CMsgClientAuthorizeLocalDevice_Eresult = int32(2)
)

func (x *CMsgClientAuthorizeLocalDevice) Reset() {
	*x = CMsgClientAuthorizeLocalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAuthorizeLocalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthorizeLocalDevice) ProtoMessage() {}

func (x *CMsgClientAuthorizeLocalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthorizeLocalDevice.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthorizeLocalDevice) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgClientAuthorizeLocalDevice) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAuthorizeLocalDevice_Eresult
}

func (x *CMsgClientAuthorizeLocalDevice) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgClientAuthorizeLocalDevice) GetAuthedDeviceToken() uint64 {
	if x != nil && x.AuthedDeviceToken != nil {
		return *x.AuthedDeviceToken
	}
	return 0
}

type CMsgClientAuthorizeLocalDeviceNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult          *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	LocalDeviceToken *uint64 `protobuf:"varint,3,opt,name=local_device_token,json=localDeviceToken" json:"local_device_token,omitempty"`
}

// Default values for CMsgClientAuthorizeLocalDeviceNotification fields.
const (
	Default_CMsgClientAuthorizeLocalDeviceNotification_Eresult = int32(2)
)

func (x *CMsgClientAuthorizeLocalDeviceNotification) Reset() {
	*x = CMsgClientAuthorizeLocalDeviceNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAuthorizeLocalDeviceNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAuthorizeLocalDeviceNotification) ProtoMessage() {}

func (x *CMsgClientAuthorizeLocalDeviceNotification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAuthorizeLocalDeviceNotification.ProtoReflect.Descriptor instead.
func (*CMsgClientAuthorizeLocalDeviceNotification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgClientAuthorizeLocalDeviceNotification) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientAuthorizeLocalDeviceNotification_Eresult
}

func (x *CMsgClientAuthorizeLocalDeviceNotification) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgClientAuthorizeLocalDeviceNotification) GetLocalDeviceToken() uint64 {
	if x != nil && x.LocalDeviceToken != nil {
		return *x.LocalDeviceToken
	}
	return 0
}

type CMsgClientDeauthorizeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeauthorizationAccountId   *uint32 `protobuf:"varint,1,opt,name=deauthorization_account_id,json=deauthorizationAccountId" json:"deauthorization_account_id,omitempty"`
	DeauthorizationDeviceToken *uint64 `protobuf:"varint,2,opt,name=deauthorization_device_token,json=deauthorizationDeviceToken" json:"deauthorization_device_token,omitempty"`
}

func (x *CMsgClientDeauthorizeDeviceRequest) Reset() {
	*x = CMsgClientDeauthorizeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDeauthorizeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDeauthorizeDeviceRequest) ProtoMessage() {}

func (x *CMsgClientDeauthorizeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDeauthorizeDeviceRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientDeauthorizeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgClientDeauthorizeDeviceRequest) GetDeauthorizationAccountId() uint32 {
	if x != nil && x.DeauthorizationAccountId != nil {
		return *x.DeauthorizationAccountId
	}
	return 0
}

func (x *CMsgClientDeauthorizeDeviceRequest) GetDeauthorizationDeviceToken() uint64 {
	if x != nil && x.DeauthorizationDeviceToken != nil {
		return *x.DeauthorizationDeviceToken
	}
	return 0
}

type CMsgClientDeauthorizeDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult                  *int32  `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	DeauthorizationAccountId *uint32 `protobuf:"varint,2,opt,name=deauthorization_account_id,json=deauthorizationAccountId" json:"deauthorization_account_id,omitempty"`
}

// Default values for CMsgClientDeauthorizeDevice fields.
const (
	Default_CMsgClientDeauthorizeDevice_Eresult = int32(2)
)

func (x *CMsgClientDeauthorizeDevice) Reset() {
	*x = CMsgClientDeauthorizeDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientDeauthorizeDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientDeauthorizeDevice) ProtoMessage() {}

func (x *CMsgClientDeauthorizeDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientDeauthorizeDevice.ProtoReflect.Descriptor instead.
func (*CMsgClientDeauthorizeDevice) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{128}
}

func (x *CMsgClientDeauthorizeDevice) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientDeauthorizeDevice_Eresult
}

func (x *CMsgClientDeauthorizeDevice) GetDeauthorizationAccountId() uint32 {
	if x != nil && x.DeauthorizationAccountId != nil {
		return *x.DeauthorizationAccountId
	}
	return 0
}

type CMsgClientUseLocalDeviceAuthorizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationAccountId []uint32                                              `protobuf:"varint,1,rep,name=authorization_account_id,json=authorizationAccountId" json:"authorization_account_id,omitempty"`
	DeviceTokens           []*CMsgClientUseLocalDeviceAuthorizations_DeviceToken `protobuf:"bytes,2,rep,name=device_tokens,json=deviceTokens" json:"device_tokens,omitempty"`
}

func (x *CMsgClientUseLocalDeviceAuthorizations) Reset() {
	*x = CMsgClientUseLocalDeviceAuthorizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUseLocalDeviceAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUseLocalDeviceAuthorizations) ProtoMessage() {}

func (x *CMsgClientUseLocalDeviceAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUseLocalDeviceAuthorizations.ProtoReflect.Descriptor instead.
func (*CMsgClientUseLocalDeviceAuthorizations) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgClientUseLocalDeviceAuthorizations) GetAuthorizationAccountId() []uint32 {
	if x != nil {
		return x.AuthorizationAccountId
	}
	return nil
}

func (x *CMsgClientUseLocalDeviceAuthorizations) GetDeviceTokens() []*CMsgClientUseLocalDeviceAuthorizations_DeviceToken {
	if x != nil {
		return x.DeviceTokens
	}
	return nil
}

type CMsgClientGetAuthorizedDevices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientGetAuthorizedDevices) Reset() {
	*x = CMsgClientGetAuthorizedDevices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetAuthorizedDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAuthorizedDevices) ProtoMessage() {}

func (x *CMsgClientGetAuthorizedDevices) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAuthorizedDevices.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAuthorizedDevices) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{130}
}

type CMsgClientGetAuthorizedDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult          *int32                                                     `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	AuthorizedDevice []*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice `protobuf:"bytes,2,rep,name=authorized_device,json=authorizedDevice" json:"authorized_device,omitempty"`
}

// Default values for CMsgClientGetAuthorizedDevicesResponse fields.
const (
	Default_CMsgClientGetAuthorizedDevicesResponse_Eresult = int32(2)
)

func (x *CMsgClientGetAuthorizedDevicesResponse) Reset() {
	*x = CMsgClientGetAuthorizedDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetAuthorizedDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAuthorizedDevicesResponse) ProtoMessage() {}

func (x *CMsgClientGetAuthorizedDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAuthorizedDevicesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAuthorizedDevicesResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgClientGetAuthorizedDevicesResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientGetAuthorizedDevicesResponse_Eresult
}

func (x *CMsgClientGetAuthorizedDevicesResponse) GetAuthorizedDevice() []*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice {
	if x != nil {
		return x.AuthorizedDevice
	}
	return nil
}

type CMsgClientSharedLibraryLockStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockedLibrary      []*CMsgClientSharedLibraryLockStatus_LockedLibrary `protobuf:"bytes,1,rep,name=locked_library,json=lockedLibrary" json:"locked_library,omitempty"`
	OwnLibraryLockedBy *uint32                                            `protobuf:"varint,2,opt,name=own_library_locked_by,json=ownLibraryLockedBy" json:"own_library_locked_by,omitempty"`
}

func (x *CMsgClientSharedLibraryLockStatus) Reset() {
	*x = CMsgClientSharedLibraryLockStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSharedLibraryLockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSharedLibraryLockStatus) ProtoMessage() {}

func (x *CMsgClientSharedLibraryLockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSharedLibraryLockStatus.ProtoReflect.Descriptor instead.
func (*CMsgClientSharedLibraryLockStatus) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgClientSharedLibraryLockStatus) GetLockedLibrary() []*CMsgClientSharedLibraryLockStatus_LockedLibrary {
	if x != nil {
		return x.LockedLibrary
	}
	return nil
}

func (x *CMsgClientSharedLibraryLockStatus) GetOwnLibraryLockedBy() uint32 {
	if x != nil && x.OwnLibraryLockedBy != nil {
		return *x.OwnLibraryLockedBy
	}
	return 0
}

type CMsgClientSharedLibraryStopPlaying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsLeft *int32                                        `protobuf:"varint,1,opt,name=seconds_left,json=secondsLeft" json:"seconds_left,omitempty"`
	StopApps    []*CMsgClientSharedLibraryStopPlaying_StopApp `protobuf:"bytes,2,rep,name=stop_apps,json=stopApps" json:"stop_apps,omitempty"`
}

func (x *CMsgClientSharedLibraryStopPlaying) Reset() {
	*x = CMsgClientSharedLibraryStopPlaying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSharedLibraryStopPlaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSharedLibraryStopPlaying) ProtoMessage() {}

func (x *CMsgClientSharedLibraryStopPlaying) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSharedLibraryStopPlaying.ProtoReflect.Descriptor instead.
func (*CMsgClientSharedLibraryStopPlaying) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgClientSharedLibraryStopPlaying) GetSecondsLeft() int32 {
	if x != nil && x.SecondsLeft != nil {
		return *x.SecondsLeft
	}
	return 0
}

func (x *CMsgClientSharedLibraryStopPlaying) GetStopApps() []*CMsgClientSharedLibraryStopPlaying_StopApp {
	if x != nil {
		return x.StopApps
	}
	return nil
}

type CMsgClientServiceCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysidRouting        []byte  `protobuf:"bytes,1,opt,name=sysid_routing,json=sysidRouting" json:"sysid_routing,omitempty"`
	CallHandle          *uint32 `protobuf:"varint,2,opt,name=call_handle,json=callHandle" json:"call_handle,omitempty"`
	ModuleCrc           *uint32 `protobuf:"varint,3,opt,name=module_crc,json=moduleCrc" json:"module_crc,omitempty"`
	ModuleHash          []byte  `protobuf:"bytes,4,opt,name=module_hash,json=moduleHash" json:"module_hash,omitempty"`
	FunctionId          *uint32 `protobuf:"varint,5,opt,name=function_id,json=functionId" json:"function_id,omitempty"`
	CubOutputMax        *uint32 `protobuf:"varint,6,opt,name=cub_output_max,json=cubOutputMax" json:"cub_output_max,omitempty"`
	Flags               *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	Callparameter       []byte  `protobuf:"bytes,8,opt,name=callparameter" json:"callparameter,omitempty"`
	PingOnly            *bool   `protobuf:"varint,9,opt,name=ping_only,json=pingOnly" json:"ping_only,omitempty"`
	MaxOutstandingCalls *uint32 `protobuf:"varint,10,opt,name=max_outstanding_calls,json=maxOutstandingCalls" json:"max_outstanding_calls,omitempty"`
}

func (x *CMsgClientServiceCall) Reset() {
	*x = CMsgClientServiceCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServiceCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServiceCall) ProtoMessage() {}

func (x *CMsgClientServiceCall) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServiceCall.ProtoReflect.Descriptor instead.
func (*CMsgClientServiceCall) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgClientServiceCall) GetSysidRouting() []byte {
	if x != nil {
		return x.SysidRouting
	}
	return nil
}

func (x *CMsgClientServiceCall) GetCallHandle() uint32 {
	if x != nil && x.CallHandle != nil {
		return *x.CallHandle
	}
	return 0
}

func (x *CMsgClientServiceCall) GetModuleCrc() uint32 {
	if x != nil && x.ModuleCrc != nil {
		return *x.ModuleCrc
	}
	return 0
}

func (x *CMsgClientServiceCall) GetModuleHash() []byte {
	if x != nil {
		return x.ModuleHash
	}
	return nil
}

func (x *CMsgClientServiceCall) GetFunctionId() uint32 {
	if x != nil && x.FunctionId != nil {
		return *x.FunctionId
	}
	return 0
}

func (x *CMsgClientServiceCall) GetCubOutputMax() uint32 {
	if x != nil && x.CubOutputMax != nil {
		return *x.CubOutputMax
	}
	return 0
}

func (x *CMsgClientServiceCall) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgClientServiceCall) GetCallparameter() []byte {
	if x != nil {
		return x.Callparameter
	}
	return nil
}

func (x *CMsgClientServiceCall) GetPingOnly() bool {
	if x != nil && x.PingOnly != nil {
		return *x.PingOnly
	}
	return false
}

func (x *CMsgClientServiceCall) GetMaxOutstandingCalls() uint32 {
	if x != nil && x.MaxOutstandingCalls != nil {
		return *x.MaxOutstandingCalls
	}
	return 0
}

type CMsgClientServiceModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleCrc     *uint32 `protobuf:"varint,1,opt,name=module_crc,json=moduleCrc" json:"module_crc,omitempty"`
	ModuleHash    []byte  `protobuf:"bytes,2,opt,name=module_hash,json=moduleHash" json:"module_hash,omitempty"`
	ModuleContent []byte  `protobuf:"bytes,3,opt,name=module_content,json=moduleContent" json:"module_content,omitempty"`
}

func (x *CMsgClientServiceModule) Reset() {
	*x = CMsgClientServiceModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServiceModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServiceModule) ProtoMessage() {}

func (x *CMsgClientServiceModule) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServiceModule.ProtoReflect.Descriptor instead.
func (*CMsgClientServiceModule) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{135}
}

func (x *CMsgClientServiceModule) GetModuleCrc() uint32 {
	if x != nil && x.ModuleCrc != nil {
		return *x.ModuleCrc
	}
	return 0
}

func (x *CMsgClientServiceModule) GetModuleHash() []byte {
	if x != nil {
		return x.ModuleHash
	}
	return nil
}

func (x *CMsgClientServiceModule) GetModuleContent() []byte {
	if x != nil {
		return x.ModuleContent
	}
	return nil
}

type CMsgClientServiceCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysidRouting          []byte  `protobuf:"bytes,1,opt,name=sysid_routing,json=sysidRouting" json:"sysid_routing,omitempty"`
	CallHandle            *uint32 `protobuf:"varint,2,opt,name=call_handle,json=callHandle" json:"call_handle,omitempty"`
	ModuleCrc             *uint32 `protobuf:"varint,3,opt,name=module_crc,json=moduleCrc" json:"module_crc,omitempty"`
	ModuleHash            []byte  `protobuf:"bytes,4,opt,name=module_hash,json=moduleHash" json:"module_hash,omitempty"`
	Ecallresult           *uint32 `protobuf:"varint,5,opt,name=ecallresult" json:"ecallresult,omitempty"`
	ResultContent         []byte  `protobuf:"bytes,6,opt,name=result_content,json=resultContent" json:"result_content,omitempty"`
	OsVersionInfo         []byte  `protobuf:"bytes,7,opt,name=os_version_info,json=osVersionInfo" json:"os_version_info,omitempty"`
	SystemInfo            []byte  `protobuf:"bytes,8,opt,name=system_info,json=systemInfo" json:"system_info,omitempty"`
	LoadAddress           *uint64 `protobuf:"fixed64,9,opt,name=load_address,json=loadAddress" json:"load_address,omitempty"`
	ExceptionRecord       []byte  `protobuf:"bytes,10,opt,name=exception_record,json=exceptionRecord" json:"exception_record,omitempty"`
	PortableOsVersionInfo []byte  `protobuf:"bytes,11,opt,name=portable_os_version_info,json=portableOsVersionInfo" json:"portable_os_version_info,omitempty"`
	PortableSystemInfo    []byte  `protobuf:"bytes,12,opt,name=portable_system_info,json=portableSystemInfo" json:"portable_system_info,omitempty"`
	WasConverted          *bool   `protobuf:"varint,13,opt,name=was_converted,json=wasConverted" json:"was_converted,omitempty"`
	InternalResult        *uint32 `protobuf:"varint,14,opt,name=internal_result,json=internalResult" json:"internal_result,omitempty"`
	CurrentCount          *uint32 `protobuf:"varint,15,opt,name=current_count,json=currentCount" json:"current_count,omitempty"`
	LastCallHandle        *uint32 `protobuf:"varint,16,opt,name=last_call_handle,json=lastCallHandle" json:"last_call_handle,omitempty"`
	LastCallModuleCrc     *uint32 `protobuf:"varint,17,opt,name=last_call_module_crc,json=lastCallModuleCrc" json:"last_call_module_crc,omitempty"`
	LastCallSysidRouting  []byte  `protobuf:"bytes,18,opt,name=last_call_sysid_routing,json=lastCallSysidRouting" json:"last_call_sysid_routing,omitempty"`
	LastEcallresult       *uint32 `protobuf:"varint,19,opt,name=last_ecallresult,json=lastEcallresult" json:"last_ecallresult,omitempty"`
	LastCallissueDelta    *uint32 `protobuf:"varint,20,opt,name=last_callissue_delta,json=lastCallissueDelta" json:"last_callissue_delta,omitempty"`
	LastCallcompleteDelta *uint32 `protobuf:"varint,21,opt,name=last_callcomplete_delta,json=lastCallcompleteDelta" json:"last_callcomplete_delta,omitempty"`
}

func (x *CMsgClientServiceCallResponse) Reset() {
	*x = CMsgClientServiceCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServiceCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServiceCallResponse) ProtoMessage() {}

func (x *CMsgClientServiceCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServiceCallResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientServiceCallResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{136}
}

func (x *CMsgClientServiceCallResponse) GetSysidRouting() []byte {
	if x != nil {
		return x.SysidRouting
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetCallHandle() uint32 {
	if x != nil && x.CallHandle != nil {
		return *x.CallHandle
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetModuleCrc() uint32 {
	if x != nil && x.ModuleCrc != nil {
		return *x.ModuleCrc
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetModuleHash() []byte {
	if x != nil {
		return x.ModuleHash
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetEcallresult() uint32 {
	if x != nil && x.Ecallresult != nil {
		return *x.Ecallresult
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetResultContent() []byte {
	if x != nil {
		return x.ResultContent
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetOsVersionInfo() []byte {
	if x != nil {
		return x.OsVersionInfo
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetSystemInfo() []byte {
	if x != nil {
		return x.SystemInfo
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetLoadAddress() uint64 {
	if x != nil && x.LoadAddress != nil {
		return *x.LoadAddress
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetExceptionRecord() []byte {
	if x != nil {
		return x.ExceptionRecord
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetPortableOsVersionInfo() []byte {
	if x != nil {
		return x.PortableOsVersionInfo
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetPortableSystemInfo() []byte {
	if x != nil {
		return x.PortableSystemInfo
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetWasConverted() bool {
	if x != nil && x.WasConverted != nil {
		return *x.WasConverted
	}
	return false
}

func (x *CMsgClientServiceCallResponse) GetInternalResult() uint32 {
	if x != nil && x.InternalResult != nil {
		return *x.InternalResult
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetCurrentCount() uint32 {
	if x != nil && x.CurrentCount != nil {
		return *x.CurrentCount
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetLastCallHandle() uint32 {
	if x != nil && x.LastCallHandle != nil {
		return *x.LastCallHandle
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetLastCallModuleCrc() uint32 {
	if x != nil && x.LastCallModuleCrc != nil {
		return *x.LastCallModuleCrc
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetLastCallSysidRouting() []byte {
	if x != nil {
		return x.LastCallSysidRouting
	}
	return nil
}

func (x *CMsgClientServiceCallResponse) GetLastEcallresult() uint32 {
	if x != nil && x.LastEcallresult != nil {
		return *x.LastEcallresult
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetLastCallissueDelta() uint32 {
	if x != nil && x.LastCallissueDelta != nil {
		return *x.LastCallissueDelta
	}
	return 0
}

func (x *CMsgClientServiceCallResponse) GetLastCallcompleteDelta() uint32 {
	if x != nil && x.LastCallcompleteDelta != nil {
		return *x.LastCallcompleteDelta
	}
	return 0
}

type CMsgAMUnlockStreaming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgAMUnlockStreaming) Reset() {
	*x = CMsgAMUnlockStreaming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAMUnlockStreaming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAMUnlockStreaming) ProtoMessage() {}

func (x *CMsgAMUnlockStreaming) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAMUnlockStreaming.ProtoReflect.Descriptor instead.
func (*CMsgAMUnlockStreaming) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{137}
}

type CMsgAMUnlockStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult       *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	EncryptionKey []byte `protobuf:"bytes,2,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
}

// Default values for CMsgAMUnlockStreamingResponse fields.
const (
	Default_CMsgAMUnlockStreamingResponse_Eresult = int32(2)
)

func (x *CMsgAMUnlockStreamingResponse) Reset() {
	*x = CMsgAMUnlockStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAMUnlockStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAMUnlockStreamingResponse) ProtoMessage() {}

func (x *CMsgAMUnlockStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAMUnlockStreamingResponse.ProtoReflect.Descriptor instead.
func (*CMsgAMUnlockStreamingResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{138}
}

func (x *CMsgAMUnlockStreamingResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgAMUnlockStreamingResponse_Eresult
}

func (x *CMsgAMUnlockStreamingResponse) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

type CMsgAMUnlockHEVC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgAMUnlockHEVC) Reset() {
	*x = CMsgAMUnlockHEVC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAMUnlockHEVC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAMUnlockHEVC) ProtoMessage() {}

func (x *CMsgAMUnlockHEVC) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAMUnlockHEVC.ProtoReflect.Descriptor instead.
func (*CMsgAMUnlockHEVC) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{139}
}

type CMsgAMUnlockHEVCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eresult *int32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgAMUnlockHEVCResponse fields.
const (
	Default_CMsgAMUnlockHEVCResponse_Eresult = int32(2)
)

func (x *CMsgAMUnlockHEVCResponse) Reset() {
	*x = CMsgAMUnlockHEVCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAMUnlockHEVCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAMUnlockHEVCResponse) ProtoMessage() {}

func (x *CMsgAMUnlockHEVCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAMUnlockHEVCResponse.ProtoReflect.Descriptor instead.
func (*CMsgAMUnlockHEVCResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{140}
}

func (x *CMsgAMUnlockHEVCResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgAMUnlockHEVCResponse_Eresult
}

type CMsgClientPlayingSessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayingBlocked *bool   `protobuf:"varint,2,opt,name=playing_blocked,json=playingBlocked" json:"playing_blocked,omitempty"`
	PlayingApp     *uint32 `protobuf:"varint,3,opt,name=playing_app,json=playingApp" json:"playing_app,omitempty"`
}

func (x *CMsgClientPlayingSessionState) Reset() {
	*x = CMsgClientPlayingSessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientPlayingSessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPlayingSessionState) ProtoMessage() {}

func (x *CMsgClientPlayingSessionState) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPlayingSessionState.ProtoReflect.Descriptor instead.
func (*CMsgClientPlayingSessionState) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgClientPlayingSessionState) GetPlayingBlocked() bool {
	if x != nil && x.PlayingBlocked != nil {
		return *x.PlayingBlocked
	}
	return false
}

func (x *CMsgClientPlayingSessionState) GetPlayingApp() uint32 {
	if x != nil && x.PlayingApp != nil {
		return *x.PlayingApp
	}
	return 0
}

type CMsgClientKickPlayingSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyStopGame *bool `protobuf:"varint,1,opt,name=only_stop_game,json=onlyStopGame" json:"only_stop_game,omitempty"`
}

func (x *CMsgClientKickPlayingSession) Reset() {
	*x = CMsgClientKickPlayingSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientKickPlayingSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientKickPlayingSession) ProtoMessage() {}

func (x *CMsgClientKickPlayingSession) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientKickPlayingSession.ProtoReflect.Descriptor instead.
func (*CMsgClientKickPlayingSession) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{142}
}

func (x *CMsgClientKickPlayingSession) GetOnlyStopGame() bool {
	if x != nil && x.OnlyStopGame != nil {
		return *x.OnlyStopGame
	}
	return false
}

type CMsgClientVoiceCallPreAuthorize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerSteamid   *uint64 `protobuf:"fixed64,1,opt,name=caller_steamid,json=callerSteamid" json:"caller_steamid,omitempty"`
	ReceiverSteamid *uint64 `protobuf:"fixed64,2,opt,name=receiver_steamid,json=receiverSteamid" json:"receiver_steamid,omitempty"`
	CallerId        *int32  `protobuf:"varint,3,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	Hangup          *bool   `protobuf:"varint,4,opt,name=hangup" json:"hangup,omitempty"`
}

func (x *CMsgClientVoiceCallPreAuthorize) Reset() {
	*x = CMsgClientVoiceCallPreAuthorize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientVoiceCallPreAuthorize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientVoiceCallPreAuthorize) ProtoMessage() {}

func (x *CMsgClientVoiceCallPreAuthorize) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientVoiceCallPreAuthorize.ProtoReflect.Descriptor instead.
func (*CMsgClientVoiceCallPreAuthorize) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgClientVoiceCallPreAuthorize) GetCallerSteamid() uint64 {
	if x != nil && x.CallerSteamid != nil {
		return *x.CallerSteamid
	}
	return 0
}

func (x *CMsgClientVoiceCallPreAuthorize) GetReceiverSteamid() uint64 {
	if x != nil && x.ReceiverSteamid != nil {
		return *x.ReceiverSteamid
	}
	return 0
}

func (x *CMsgClientVoiceCallPreAuthorize) GetCallerId() int32 {
	if x != nil && x.CallerId != nil {
		return *x.CallerId
	}
	return 0
}

func (x *CMsgClientVoiceCallPreAuthorize) GetHangup() bool {
	if x != nil && x.Hangup != nil {
		return *x.Hangup
	}
	return false
}

type CMsgClientVoiceCallPreAuthorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerSteamid   *uint64 `protobuf:"fixed64,1,opt,name=caller_steamid,json=callerSteamid" json:"caller_steamid,omitempty"`
	ReceiverSteamid *uint64 `protobuf:"fixed64,2,opt,name=receiver_steamid,json=receiverSteamid" json:"receiver_steamid,omitempty"`
	Eresult         *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
	CallerId        *int32  `protobuf:"varint,4,opt,name=caller_id,json=callerId" json:"caller_id,omitempty"`
}

// Default values for CMsgClientVoiceCallPreAuthorizeResponse fields.
const (
	Default_CMsgClientVoiceCallPreAuthorizeResponse_Eresult = int32(2)
)

func (x *CMsgClientVoiceCallPreAuthorizeResponse) Reset() {
	*x = CMsgClientVoiceCallPreAuthorizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientVoiceCallPreAuthorizeResponse) ProtoMessage() {}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientVoiceCallPreAuthorizeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientVoiceCallPreAuthorizeResponse) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{144}
}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) GetCallerSteamid() uint64 {
	if x != nil && x.CallerSteamid != nil {
		return *x.CallerSteamid
	}
	return 0
}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) GetReceiverSteamid() uint64 {
	if x != nil && x.ReceiverSteamid != nil {
		return *x.ReceiverSteamid
	}
	return 0
}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientVoiceCallPreAuthorizeResponse_Eresult
}

func (x *CMsgClientVoiceCallPreAuthorizeResponse) GetCallerId() int32 {
	if x != nil && x.CallerId != nil {
		return *x.CallerId
	}
	return 0
}

type CMsgBadgeCraftedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	BadgeLevel *uint32 `protobuf:"varint,2,opt,name=badge_level,json=badgeLevel" json:"badge_level,omitempty"`
}

func (x *CMsgBadgeCraftedNotification) Reset() {
	*x = CMsgBadgeCraftedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBadgeCraftedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBadgeCraftedNotification) ProtoMessage() {}

func (x *CMsgBadgeCraftedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBadgeCraftedNotification.ProtoReflect.Descriptor instead.
func (*CMsgBadgeCraftedNotification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{145}
}

func (x *CMsgBadgeCraftedNotification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgBadgeCraftedNotification) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

type CMsgClientUCMAddScreenshot_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName  *string `protobuf:"bytes,1,opt,name=tag_name,json=tagName" json:"tag_name,omitempty"`
	TagValue *string `protobuf:"bytes,2,opt,name=tag_value,json=tagValue" json:"tag_value,omitempty"`
}

func (x *CMsgClientUCMAddScreenshot_Tag) Reset() {
	*x = CMsgClientUCMAddScreenshot_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMAddScreenshot_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMAddScreenshot_Tag) ProtoMessage() {}

func (x *CMsgClientUCMAddScreenshot_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMAddScreenshot_Tag.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMAddScreenshot_Tag) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgClientUCMAddScreenshot_Tag) GetTagName() string {
	if x != nil && x.TagName != nil {
		return *x.TagName
	}
	return ""
}

func (x *CMsgClientUCMAddScreenshot_Tag) GetTagValue() string {
	if x != nil && x.TagValue != nil {
		return *x.TagValue
	}
	return ""
}

type CMsgClientUCMUpdatePublishedFile_KeyValueTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgClientUCMUpdatePublishedFile_KeyValueTag) Reset() {
	*x = CMsgClientUCMUpdatePublishedFile_KeyValueTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMUpdatePublishedFile_KeyValueTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMUpdatePublishedFile_KeyValueTag) ProtoMessage() {}

func (x *CMsgClientUCMUpdatePublishedFile_KeyValueTag) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMUpdatePublishedFile_KeyValueTag.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMUpdatePublishedFile_KeyValueTag) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgClientUCMUpdatePublishedFile_KeyValueTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile_KeyValueTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgClientUCMUpdatePublishedFile_AdditionalPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalFileName *string `protobuf:"bytes,1,opt,name=original_file_name,json=originalFileName" json:"original_file_name,omitempty"`
	InternalFileName *string `protobuf:"bytes,2,opt,name=internal_file_name,json=internalFileName" json:"internal_file_name,omitempty"`
	Videoid          *string `protobuf:"bytes,3,opt,name=videoid" json:"videoid,omitempty"`
	PreviewType      *uint32 `protobuf:"varint,4,opt,name=preview_type,json=previewType" json:"preview_type,omitempty"`
	UpdateIndex      *int32  `protobuf:"varint,5,opt,name=update_index,json=updateIndex,def=-1" json:"update_index,omitempty"`
}

// Default values for CMsgClientUCMUpdatePublishedFile_AdditionalPreview fields.
const (
	Default_CMsgClientUCMUpdatePublishedFile_AdditionalPreview_UpdateIndex = int32(-1)
)

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) Reset() {
	*x = CMsgClientUCMUpdatePublishedFile_AdditionalPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMUpdatePublishedFile_AdditionalPreview) ProtoMessage() {}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMUpdatePublishedFile_AdditionalPreview.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMUpdatePublishedFile_AdditionalPreview) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) GetOriginalFileName() string {
	if x != nil && x.OriginalFileName != nil {
		return *x.OriginalFileName
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) GetInternalFileName() string {
	if x != nil && x.InternalFileName != nil {
		return *x.InternalFileName
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) GetVideoid() string {
	if x != nil && x.Videoid != nil {
		return *x.Videoid
	}
	return ""
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) GetPreviewType() uint32 {
	if x != nil && x.PreviewType != nil {
		return *x.PreviewType
	}
	return 0
}

func (x *CMsgClientUCMUpdatePublishedFile_AdditionalPreview) GetUpdateIndex() int32 {
	if x != nil && x.UpdateIndex != nil {
		return *x.UpdateIndex
	}
	return Default_CMsgClientUCMUpdatePublishedFile_AdditionalPreview_UpdateIndex
}

type CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId   *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	Rtime32Subscribed *uint32 `protobuf:"fixed32,2,opt,name=rtime32_subscribed,json=rtime32Subscribed,def=0" json:"rtime32_subscribed,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId_Rtime32Subscribed = uint32(0)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId) GetRtime32Subscribed() uint32 {
	if x != nil && x.Rtime32Subscribed != nil {
		return *x.Rtime32Subscribed
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId_Rtime32Subscribed
}

type CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId    *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	Rtime32Subscribed  *uint32 `protobuf:"fixed32,2,opt,name=rtime32_subscribed,json=rtime32Subscribed,def=0" json:"rtime32_subscribed,omitempty"`
	Appid              *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	FileHcontent       *uint64 `protobuf:"fixed64,4,opt,name=file_hcontent,json=fileHcontent" json:"file_hcontent,omitempty"`
	FileSize           *uint32 `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Rtime32LastUpdated *uint32 `protobuf:"fixed32,6,opt,name=rtime32_last_updated,json=rtime32LastUpdated" json:"rtime32_last_updated,omitempty"`
	IsDepotContent     *bool   `protobuf:"varint,7,opt,name=is_depot_content,json=isDepotContent" json:"is_depot_content,omitempty"`
}

// Default values for CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId fields.
const (
	Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId_Rtime32Subscribed = uint32(0)
)

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetRtime32Subscribed() uint32 {
	if x != nil && x.Rtime32Subscribed != nil {
		return *x.Rtime32Subscribed
	}
	return Default_CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId_Rtime32Subscribed
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetFileHcontent() uint64 {
	if x != nil && x.FileHcontent != nil {
		return *x.FileHcontent
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetRtime32LastUpdated() uint32 {
	if x != nil && x.Rtime32LastUpdated != nil {
		return *x.Rtime32LastUpdated
	}
	return 0
}

func (x *CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId) GetIsDepotContent() bool {
	if x != nil && x.IsDepotContent != nil {
		return *x.IsDepotContent
	}
	return false
}

type CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64 `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) Reset() {
	*x = CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) ProtoMessage() {}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

type CMsgClientWorkshopItemInfoRequest_WorkshopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) Reset() {
	*x = CMsgClientWorkshopItemInfoRequest_WorkshopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoRequest_WorkshopItem) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoRequest_WorkshopItem.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoRequest_WorkshopItem) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoRequest_WorkshopItem) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

type CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64 `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	IsLegacy        *bool   `protobuf:"varint,4,opt,name=is_legacy,json=isLegacy" json:"is_legacy,omitempty"`
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) Reset() {
	*x = CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) ProtoMessage() {}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo) GetIsLegacy() bool {
	if x != nil && x.IsLegacy != nil {
		return *x.IsLegacy
	}
	return false
}

type CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	RtimeTimeStamp  *uint32 `protobuf:"fixed32,2,opt,name=rtime_time_stamp,json=rtimeTimeStamp,def=0" json:"rtime_time_stamp,omitempty"`
}

// Default values for CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId fields.
const (
	Default_CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId_RtimeTimeStamp = uint32(0)
)

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) Reset() {
	*x = CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) ProtoMessage() {}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId) GetRtimeTimeStamp() uint32 {
	if x != nil && x.RtimeTimeStamp != nil {
		return *x.RtimeTimeStamp
	}
	return Default_CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId_RtimeTimeStamp
}

type CMsgClientRichPresenceInfo_RichPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidUser    *uint64 `protobuf:"fixed64,1,opt,name=steamid_user,json=steamidUser" json:"steamid_user,omitempty"`
	RichPresenceKv []byte  `protobuf:"bytes,2,opt,name=rich_presence_kv,json=richPresenceKv" json:"rich_presence_kv,omitempty"`
}

func (x *CMsgClientRichPresenceInfo_RichPresence) Reset() {
	*x = CMsgClientRichPresenceInfo_RichPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientRichPresenceInfo_RichPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientRichPresenceInfo_RichPresence) ProtoMessage() {}

func (x *CMsgClientRichPresenceInfo_RichPresence) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientRichPresenceInfo_RichPresence.ProtoReflect.Descriptor instead.
func (*CMsgClientRichPresenceInfo_RichPresence) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CMsgClientRichPresenceInfo_RichPresence) GetSteamidUser() uint64 {
	if x != nil && x.SteamidUser != nil {
		return *x.SteamidUser
	}
	return 0
}

func (x *CMsgClientRichPresenceInfo_RichPresence) GetRichPresenceKv() []byte {
	if x != nil {
		return x.RichPresenceKv
	}
	return nil
}

type CMsgClientCheckAppBetaPasswordResponse_BetaPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Betaname     *string `protobuf:"bytes,1,opt,name=betaname" json:"betaname,omitempty"`
	Betapassword *string `protobuf:"bytes,2,opt,name=betapassword" json:"betapassword,omitempty"`
}

func (x *CMsgClientCheckAppBetaPasswordResponse_BetaPassword) Reset() {
	*x = CMsgClientCheckAppBetaPasswordResponse_BetaPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientCheckAppBetaPasswordResponse_BetaPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientCheckAppBetaPasswordResponse_BetaPassword) ProtoMessage() {}

func (x *CMsgClientCheckAppBetaPasswordResponse_BetaPassword) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientCheckAppBetaPasswordResponse_BetaPassword.ProtoReflect.Descriptor instead.
func (*CMsgClientCheckAppBetaPasswordResponse_BetaPassword) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{54, 0}
}

func (x *CMsgClientCheckAppBetaPasswordResponse_BetaPassword) GetBetaname() string {
	if x != nil && x.Betaname != nil {
		return *x.Betaname
	}
	return ""
}

func (x *CMsgClientCheckAppBetaPasswordResponse_BetaPassword) GetBetapassword() string {
	if x != nil && x.Betapassword != nil {
		return *x.Betapassword
	}
	return ""
}

type CMsgDownloadRateStatistics_StatsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType   *uint32 `protobuf:"varint,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	SourceId     *uint32 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Seconds      *uint32 `protobuf:"varint,3,opt,name=seconds" json:"seconds,omitempty"`
	Bytes        *uint64 `protobuf:"varint,4,opt,name=bytes" json:"bytes,omitempty"`
	HostName     *string `protobuf:"bytes,5,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Microseconds *uint64 `protobuf:"varint,6,opt,name=microseconds" json:"microseconds,omitempty"`
	UsedIpv6     *bool   `protobuf:"varint,7,opt,name=used_ipv6,json=usedIpv6" json:"used_ipv6,omitempty"`
	Proxied      *bool   `protobuf:"varint,8,opt,name=proxied" json:"proxied,omitempty"`
}

func (x *CMsgDownloadRateStatistics_StatsInfo) Reset() {
	*x = CMsgDownloadRateStatistics_StatsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDownloadRateStatistics_StatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDownloadRateStatistics_StatsInfo) ProtoMessage() {}

func (x *CMsgDownloadRateStatistics_StatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDownloadRateStatistics_StatsInfo.ProtoReflect.Descriptor instead.
func (*CMsgDownloadRateStatistics_StatsInfo) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{58, 0}
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetSourceId() uint32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetSeconds() uint32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetMicroseconds() uint64 {
	if x != nil && x.Microseconds != nil {
		return *x.Microseconds
	}
	return 0
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetUsedIpv6() bool {
	if x != nil && x.UsedIpv6 != nil {
		return *x.UsedIpv6
	}
	return false
}

func (x *CMsgDownloadRateStatistics_StatsInfo) GetProxied() bool {
	if x != nil && x.Proxied != nil {
		return *x.Proxied
	}
	return false
}

type CMsgClientUGSGetGlobalStatsResponse_Day struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayId *uint32                                         `protobuf:"varint,1,opt,name=day_id,json=dayId" json:"day_id,omitempty"`
	Stats []*CMsgClientUGSGetGlobalStatsResponse_Day_Stat `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day) Reset() {
	*x = CMsgClientUGSGetGlobalStatsResponse_Day{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUGSGetGlobalStatsResponse_Day) ProtoMessage() {}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUGSGetGlobalStatsResponse_Day.ProtoReflect.Descriptor instead.
func (*CMsgClientUGSGetGlobalStatsResponse_Day) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day) GetDayId() uint32 {
	if x != nil && x.DayId != nil {
		return *x.DayId
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day) GetStats() []*CMsgClientUGSGetGlobalStatsResponse_Day_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgClientUGSGetGlobalStatsResponse_Day_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId *int32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	Data   *int64 `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day_Stat) Reset() {
	*x = CMsgClientUGSGetGlobalStatsResponse_Day_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUGSGetGlobalStatsResponse_Day_Stat) ProtoMessage() {}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUGSGetGlobalStatsResponse_Day_Stat.ProtoReflect.Descriptor instead.
func (*CMsgClientUGSGetGlobalStatsResponse_Day_Stat) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{62, 0, 0}
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day_Stat) GetStatId() int32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgClientUGSGetGlobalStatsResponse_Day_Stat) GetData() int64 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

type CMsgGameServerData_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CMsgGameServerData_Player) Reset() {
	*x = CMsgGameServerData_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerData_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerData_Player) ProtoMessage() {}

func (x *CMsgGameServerData_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerData_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerData_Player) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{63, 0}
}

func (x *CMsgGameServerData_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgGMSClientServerQueryResponse_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeprecatedServerIp *uint32        `protobuf:"varint,1,opt,name=deprecated_server_ip,json=deprecatedServerIp" json:"deprecated_server_ip,omitempty"`
	ServerPort         *uint32        `protobuf:"varint,2,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	AuthPlayers        *uint32        `protobuf:"varint,3,opt,name=auth_players,json=authPlayers" json:"auth_players,omitempty"`
	ServerIp           *CMsgIPAddress `protobuf:"bytes,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
}

func (x *CMsgGMSClientServerQueryResponse_Server) Reset() {
	*x = CMsgGMSClientServerQueryResponse_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGMSClientServerQueryResponse_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGMSClientServerQueryResponse_Server) ProtoMessage() {}

func (x *CMsgGMSClientServerQueryResponse_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGMSClientServerQueryResponse_Server.ProtoReflect.Descriptor instead.
func (*CMsgGMSClientServerQueryResponse_Server) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{66, 0}
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetDeprecatedServerIp() uint32 {
	if x != nil && x.DeprecatedServerIp != nil {
		return *x.DeprecatedServerIp
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetAuthPlayers() uint32 {
	if x != nil && x.AuthPlayers != nil {
		return *x.AuthPlayers
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetServerIp() *CMsgIPAddress {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

type CMsgClientItemAnnouncements_UnseenItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ContextId     *uint64 `protobuf:"varint,2,opt,name=context_id,json=contextId" json:"context_id,omitempty"`
	AssetId       *uint64 `protobuf:"varint,3,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	Amount        *uint64 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Rtime32Gained *uint32 `protobuf:"fixed32,5,opt,name=rtime32_gained,json=rtime32Gained" json:"rtime32_gained,omitempty"`
	SourceAppid   *uint32 `protobuf:"varint,6,opt,name=source_appid,json=sourceAppid" json:"source_appid,omitempty"`
}

func (x *CMsgClientItemAnnouncements_UnseenItem) Reset() {
	*x = CMsgClientItemAnnouncements_UnseenItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientItemAnnouncements_UnseenItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientItemAnnouncements_UnseenItem) ProtoMessage() {}

func (x *CMsgClientItemAnnouncements_UnseenItem) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientItemAnnouncements_UnseenItem.ProtoReflect.Descriptor instead.
func (*CMsgClientItemAnnouncements_UnseenItem) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{91, 0}
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetContextId() uint64 {
	if x != nil && x.ContextId != nil {
		return *x.ContextId
	}
	return 0
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetAssetId() uint64 {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return 0
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetRtime32Gained() uint32 {
	if x != nil && x.Rtime32Gained != nil {
		return *x.Rtime32Gained
	}
	return 0
}

func (x *CMsgClientItemAnnouncements_UnseenItem) GetSourceAppid() uint32 {
	if x != nil && x.SourceAppid != nil {
		return *x.SourceAppid
	}
	return 0
}

type CMsgClientUserNotifications_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNotificationType *uint32 `protobuf:"varint,1,opt,name=user_notification_type,json=userNotificationType" json:"user_notification_type,omitempty"`
	Count                *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgClientUserNotifications_Notification) Reset() {
	*x = CMsgClientUserNotifications_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUserNotifications_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUserNotifications_Notification) ProtoMessage() {}

func (x *CMsgClientUserNotifications_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUserNotifications_Notification.ProtoReflect.Descriptor instead.
func (*CMsgClientUserNotifications_Notification) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{93, 0}
}

func (x *CMsgClientUserNotifications_Notification) GetUserNotificationType() uint32 {
	if x != nil && x.UserNotificationType != nil {
		return *x.UserNotificationType
	}
	return 0
}

func (x *CMsgClientUserNotifications_Notification) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message   *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Unread    *bool   `protobuf:"varint,4,opt,name=unread" json:"unread,omitempty"`
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) Reset() {
	*x = CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) ProtoMessage() {}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage.ProtoReflect.Descriptor instead.
func (*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{99, 0}
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage) GetUnread() bool {
	if x != nil && x.Unread != nil {
		return *x.Unread
	}
	return false
}

type CMsgClientFSGetFriendsSteamLevelsResponse_Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Level     *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse_Friend) Reset() {
	*x = CMsgClientFSGetFriendsSteamLevelsResponse_Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse_Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientFSGetFriendsSteamLevelsResponse_Friend) ProtoMessage() {}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse_Friend) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientFSGetFriendsSteamLevelsResponse_Friend.ProtoReflect.Descriptor instead.
func (*CMsgClientFSGetFriendsSteamLevelsResponse_Friend) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{102, 0}
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse_Friend) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgClientFSGetFriendsSteamLevelsResponse_Friend) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CMsgCREItemVoteSummary_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgCREItemVoteSummary_PublishedFileId) Reset() {
	*x = CMsgCREItemVoteSummary_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREItemVoteSummary_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREItemVoteSummary_PublishedFileId) ProtoMessage() {}

func (x *CMsgCREItemVoteSummary_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREItemVoteSummary_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgCREItemVoteSummary_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{104, 0}
}

func (x *CMsgCREItemVoteSummary_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgCREItemVoteSummaryResponse_ItemVoteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64  `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	VotesFor        *int32   `protobuf:"varint,2,opt,name=votes_for,json=votesFor" json:"votes_for,omitempty"`
	VotesAgainst    *int32   `protobuf:"varint,3,opt,name=votes_against,json=votesAgainst" json:"votes_against,omitempty"`
	Reports         *int32   `protobuf:"varint,4,opt,name=reports" json:"reports,omitempty"`
	Score           *float32 `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) Reset() {
	*x = CMsgCREItemVoteSummaryResponse_ItemVoteSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREItemVoteSummaryResponse_ItemVoteSummary) ProtoMessage() {}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREItemVoteSummaryResponse_ItemVoteSummary.ProtoReflect.Descriptor instead.
func (*CMsgCREItemVoteSummaryResponse_ItemVoteSummary) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{105, 0}
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) GetVotesFor() int32 {
	if x != nil && x.VotesFor != nil {
		return *x.VotesFor
	}
	return 0
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) GetVotesAgainst() int32 {
	if x != nil && x.VotesAgainst != nil {
		return *x.VotesAgainst
	}
	return 0
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) GetReports() int32 {
	if x != nil && x.Reports != nil {
		return *x.Reports
	}
	return 0
}

func (x *CMsgCREItemVoteSummaryResponse_ItemVoteSummary) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
}

func (x *CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) Reset() {
	*x = CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) ProtoMessage() {}

func (x *CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId.ProtoReflect.Descriptor instead.
func (*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{108, 0}
}

func (x *CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

type CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	Vote            *int32  `protobuf:"varint,2,opt,name=vote,def=0" json:"vote,omitempty"`
}

// Default values for CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail fields.
const (
	Default_CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_Vote = int32(0)
)

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) Reset() {
	*x = CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) ProtoMessage() {}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail.ProtoReflect.Descriptor instead.
func (*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{109, 0}
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail) GetVote() int32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return Default_CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_Vote
}

type CMsgGameServerPingSample_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              *uint32 `protobuf:"fixed32,1,opt,name=ip" json:"ip,omitempty"`
	AvgPingMs       *uint32 `protobuf:"varint,2,opt,name=avg_ping_ms,json=avgPingMs" json:"avg_ping_ms,omitempty"`
	StddevPingMsX10 *uint32 `protobuf:"varint,3,opt,name=stddev_ping_ms_x10,json=stddevPingMsX10" json:"stddev_ping_ms_x10,omitempty"`
}

func (x *CMsgGameServerPingSample_Sample) Reset() {
	*x = CMsgGameServerPingSample_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPingSample_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingSample_Sample) ProtoMessage() {}

func (x *CMsgGameServerPingSample_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingSample_Sample.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingSample_Sample) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{110, 0}
}

func (x *CMsgGameServerPingSample_Sample) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CMsgGameServerPingSample_Sample) GetAvgPingMs() uint32 {
	if x != nil && x.AvgPingMs != nil {
		return *x.AvgPingMs
	}
	return 0
}

func (x *CMsgGameServerPingSample_Sample) GetStddevPingMsX10() uint32 {
	if x != nil && x.StddevPingMsX10 != nil {
		return *x.StddevPingMsX10
	}
	return 0
}

type CMsgClientUseLocalDeviceAuthorizations_DeviceToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId *uint32 `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId" json:"owner_account_id,omitempty"`
	TokenId        *uint64 `protobuf:"varint,2,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
}

func (x *CMsgClientUseLocalDeviceAuthorizations_DeviceToken) Reset() {
	*x = CMsgClientUseLocalDeviceAuthorizations_DeviceToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUseLocalDeviceAuthorizations_DeviceToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUseLocalDeviceAuthorizations_DeviceToken) ProtoMessage() {}

func (x *CMsgClientUseLocalDeviceAuthorizations_DeviceToken) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUseLocalDeviceAuthorizations_DeviceToken.ProtoReflect.Descriptor instead.
func (*CMsgClientUseLocalDeviceAuthorizations_DeviceToken) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{129, 0}
}

func (x *CMsgClientUseLocalDeviceAuthorizations_DeviceToken) GetOwnerAccountId() uint32 {
	if x != nil && x.OwnerAccountId != nil {
		return *x.OwnerAccountId
	}
	return 0
}

func (x *CMsgClientUseLocalDeviceAuthorizations_DeviceToken) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

type CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthDeviceToken *uint64 `protobuf:"varint,1,opt,name=auth_device_token,json=authDeviceToken" json:"auth_device_token,omitempty"`
	DeviceName      *string `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	LastAccessTime  *uint32 `protobuf:"varint,3,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	BorrowerId      *uint32 `protobuf:"varint,4,opt,name=borrower_id,json=borrowerId" json:"borrower_id,omitempty"`
	IsPending       *bool   `protobuf:"varint,5,opt,name=is_pending,json=isPending" json:"is_pending,omitempty"`
	AppPlayed       *uint32 `protobuf:"varint,6,opt,name=app_played,json=appPlayed" json:"app_played,omitempty"`
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) Reset() {
	*x = CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) ProtoMessage() {}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice.ProtoReflect.Descriptor instead.
func (*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{131, 0}
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetAuthDeviceToken() uint64 {
	if x != nil && x.AuthDeviceToken != nil {
		return *x.AuthDeviceToken
	}
	return 0
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetLastAccessTime() uint32 {
	if x != nil && x.LastAccessTime != nil {
		return *x.LastAccessTime
	}
	return 0
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetBorrowerId() uint32 {
	if x != nil && x.BorrowerId != nil {
		return *x.BorrowerId
	}
	return 0
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetIsPending() bool {
	if x != nil && x.IsPending != nil {
		return *x.IsPending
	}
	return false
}

func (x *CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice) GetAppPlayed() uint32 {
	if x != nil && x.AppPlayed != nil {
		return *x.AppPlayed
	}
	return 0
}

type CMsgClientSharedLibraryLockStatus_LockedLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  *uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	LockedBy *uint32 `protobuf:"varint,2,opt,name=locked_by,json=lockedBy" json:"locked_by,omitempty"`
}

func (x *CMsgClientSharedLibraryLockStatus_LockedLibrary) Reset() {
	*x = CMsgClientSharedLibraryLockStatus_LockedLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSharedLibraryLockStatus_LockedLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSharedLibraryLockStatus_LockedLibrary) ProtoMessage() {}

func (x *CMsgClientSharedLibraryLockStatus_LockedLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSharedLibraryLockStatus_LockedLibrary.ProtoReflect.Descriptor instead.
func (*CMsgClientSharedLibraryLockStatus_LockedLibrary) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{132, 0}
}

func (x *CMsgClientSharedLibraryLockStatus_LockedLibrary) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *CMsgClientSharedLibraryLockStatus_LockedLibrary) GetLockedBy() uint32 {
	if x != nil && x.LockedBy != nil {
		return *x.LockedBy
	}
	return 0
}

type CMsgClientSharedLibraryStopPlaying_StopApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	OwnerId *uint32 `protobuf:"varint,2,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *CMsgClientSharedLibraryStopPlaying_StopApp) Reset() {
	*x = CMsgClientSharedLibraryStopPlaying_StopApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSharedLibraryStopPlaying_StopApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSharedLibraryStopPlaying_StopApp) ProtoMessage() {}

func (x *CMsgClientSharedLibraryStopPlaying_StopApp) ProtoReflect() protoreflect.Message {
	mi := &file_steam_steammessages_clientserver_2_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSharedLibraryStopPlaying_StopApp.ProtoReflect.Descriptor instead.
func (*CMsgClientSharedLibraryStopPlaying_StopApp) Descriptor() ([]byte, []int) {
	return file_steam_steammessages_clientserver_2_proto_rawDescGZIP(), []int{133, 0}
}

func (x *CMsgClientSharedLibraryStopPlaying_StopApp) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientSharedLibraryStopPlaying_StopApp) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

var File_steam_steammessages_clientserver_2_proto protoreflect.FileDescriptor

var file_steam_steammessages_clientserver_2_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x1a, 0x1e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbc, 0x04, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x43, 0x4d, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x41, 0x64, 0x64, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f,
	0x69, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x1a, 0x3d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x7b, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43,
	0x4d, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36,
	0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52,
	0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x69, 0x64, 0x22, 0x59, 0x0a,
	0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37,
	0x33, 0x37, 0x30, 0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83,
	0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x3a, 0x14, 0x31, 0x38, 0x34, 0x34, 0x36, 0x37, 0x34, 0x34, 0x30, 0x37, 0x33, 0x37, 0x30,
	0x39, 0x35, 0x35, 0x31, 0x36, 0x31, 0x35, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x29, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x25, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x0b, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4b,
	0x76, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x67, 0x52, 0x06, 0x6b, 0x76, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x4b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x35, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa8, 0x01, 0x0a,
	0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x29, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x25, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x47,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x30,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x35, 0x30, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x73, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x6f, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01, 0x30, 0x52,
	0x11, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x34, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xa6, 0x04, 0x0a, 0x3c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7e,
	0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0xa3, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x3a,
	0x01, 0x30, 0x52, 0x11, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x33, 0x32, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x70,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xd0, 0x02, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x02,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x5d, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x8c, 0x03, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0x9f, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x43, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9f, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4e, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x43, 0x4d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x78, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x43, 0x4d, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0x6a, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x49, 0x64, 0x67, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72,
	0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x76, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x69,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x5b, 0x0a, 0x0c, 0x52, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x69, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x4b, 0x76, 0x22, 0x35, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xf6, 0x02, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x65, 0x76, 0x61, 0x6c, 0x76,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x6d, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x74, 0x6f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x62, 0x74, 0x6f,
	0x72, 0x65, 0x61, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x73, 0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x6c, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x65, 0x74, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x62, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x75, 0x62, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x99, 0x02, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x62,
	0x74, 0x6f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x62, 0x74, 0x6f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74,
	0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x74, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x74, 0x70,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x74, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x74, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x72, 0x69, 0x66,
	0x74, 0x22, 0xc9, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73,
	0x68, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x6c, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x65,
	0x74, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x62, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x62, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x74,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x74, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc1, 0x03,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x68, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x74, 0x70, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x74, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x74, 0x70, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x74,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xa5,
	0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x45, 0x4d,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x62, 0x69, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x6d,
	0x61, 0x69, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x4a, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x45, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x65, 0x6d, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x24, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x45, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63, 0x0a,
	0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x4c,
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0x45, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x22, 0x3f, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70,
	0x42, 0x65, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x61, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x61, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x42, 0x65,
	0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x60, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x61, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70,
	0x70, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x61, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x65, 0x74, 0x61, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x61, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x8b, 0x07, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x41,
	0x70, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6a, 0x6f, 0x62, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6a, 0x6f, 0x62, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x6f, 0x62,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0xb4, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x50,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x4b, 0x62, 0x70, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x49, 0x70, 0x76, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x22,
	0x60, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc8, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x22, 0xe6, 0x01, 0x0a,
	0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x47, 0x53, 0x47, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x47, 0x53, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x47, 0x53, 0x47, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x1a, 0x9c, 0x01,
	0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x47,
	0x53, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x33, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x06, 0x0a,
	0x12, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x47, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x76,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x74, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x23, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x02, 0x69, 0x70, 0x22,
	0xbc, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x4d,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xb6,
	0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x4d, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x4d, 0x53, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0xb1, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22, 0x6b, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x47, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x47, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x75, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x46, 0x0a,
	0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x43, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x01,
	0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x47, 0x53, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x70, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x47, 0x53,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x67, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x67, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x22, 0x3d, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x6c, 0x61, 0x6e,
	0x22, 0x62, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x43, 0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x53, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x2b, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x53, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x43, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x74,
	0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x79, 0x6f, 0x75, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x74, 0x44, 0x6f, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x59, 0x6f, 0x75, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x74, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x64, 0x6f,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x74, 0x59, 0x6f, 0x75, 0x44, 0x6f, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x3e, 0x0a, 0x1c,
	0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x64,
	0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x79, 0x6f, 0x75, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x44, 0x6f, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x59, 0x6f, 0x75, 0x22, 0x14, 0x0a, 0x12,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x36, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65,
	0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x69, 0x64, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x52, 0x4d, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x75, 0x69, 0x64, 0x44, 0x72, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcd,
	0x02, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x52, 0x4d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x62,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x66, 0x73,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x66, 0x73, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x66,
	0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x66, 0x73, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xca,
	0x02, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x52, 0x4d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x66, 0x73, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x66, 0x73, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x66, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x3d, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x26, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x25,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x50, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x50, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x67,
	0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x69, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x2f,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x02, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x65,
	0x65, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x73, 0x65, 0x65, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x0d, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x47, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x01,
	0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x27, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x26, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x2d,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x5e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0x7d, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x22, 0x39, 0x0a, 0x37, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x21, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x53, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73,
	0x22, 0xbc, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46,
	0x53, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x46, 0x53, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x1a, 0x3c, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xfd, 0x02, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x29, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x71, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x24, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x71, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0xb4, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x12, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x52, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x52, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xaf, 0x01,
	0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x69, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x22, 0x49, 0x0a, 0x2a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x52, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52,
	0x45, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x6b, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7d, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x52, 0x45, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x57, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x04, 0x6d, 0x79, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x67, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x73, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x67, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e,
	0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x09,
	0x67, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x06, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x50, 0x69, 0x6e,
	0x67, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x5f, 0x78, 0x31, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x58, 0x31, 0x30,
	0x22, 0x33, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x53, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x53, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a,
	0x14, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x53, 0x47, 0x65, 0x74, 0x49, 0x73, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x53, 0x47, 0x65, 0x74, 0x49, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x22, 0x3f, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x46,
	0x53, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x46, 0x53, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73,
	0x22, 0x37, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x50, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x27, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x50, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x10,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x49, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x75, 0x69, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x72, 0x6c, 0x22, 0xae,
	0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x2a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x96,
	0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x26, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x6b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xe8,
	0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x21, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5d, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f,
	0x77, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x1a, 0x47, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x41, 0x70, 0x70, 0x73, 0x1a, 0x3b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xf1, 0x02, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x79, 0x73, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x63,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x62, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x63,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x07, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x63,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x63, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x79, 0x73, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x4d, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x63,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x4d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x4d, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x45, 0x56, 0x43, 0x22, 0x37, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x41,
	0x4d, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x45, 0x56, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x69, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x22, 0x44, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x61, 0x6d,
	0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x22, 0xb5, 0x01, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x39, 0x48, 0x01, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_steam_steammessages_clientserver_2_proto_rawDescOnce sync.Once
	file_steam_steammessages_clientserver_2_proto_rawDescData = file_steam_steammessages_clientserver_2_proto_rawDesc
)

func file_steam_steammessages_clientserver_2_proto_rawDescGZIP() []byte {
	file_steam_steammessages_clientserver_2_proto_rawDescOnce.Do(func() {
		file_steam_steammessages_clientserver_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_steam_steammessages_clientserver_2_proto_rawDescData)
	})
	return file_steam_steammessages_clientserver_2_proto_rawDescData
}

var file_steam_steammessages_clientserver_2_proto_msgTypes = make([]protoimpl.MessageInfo, 177)
var file_steam_steammessages_clientserver_2_proto_goTypes = []interface{}{
	(*CMsgClientUCMAddScreenshot)(nil),                                                   // 0: steam.CMsgClientUCMAddScreenshot
	(*CMsgClientUCMAddScreenshotResponse)(nil),                                           // 1: steam.CMsgClientUCMAddScreenshotResponse
	(*CMsgClientUCMDeleteScreenshot)(nil),                                                // 2: steam.CMsgClientUCMDeleteScreenshot
	(*CMsgClientUCMDeleteScreenshotResponse)(nil),                                        // 3: steam.CMsgClientUCMDeleteScreenshotResponse
	(*CMsgClientUCMPublishFile)(nil),                                                     // 4: steam.CMsgClientUCMPublishFile
	(*CMsgClientUCMPublishFileResponse)(nil),                                             // 5: steam.CMsgClientUCMPublishFileResponse
	(*CMsgClientUCMUpdatePublishedFile)(nil),                                             // 6: steam.CMsgClientUCMUpdatePublishedFile
	(*CMsgClientUCMUpdatePublishedFileResponse)(nil),                                     // 7: steam.CMsgClientUCMUpdatePublishedFileResponse
	(*CMsgClientUCMDeletePublishedFile)(nil),                                             // 8: steam.CMsgClientUCMDeletePublishedFile
	(*CMsgClientUCMDeletePublishedFileResponse)(nil),                                     // 9: steam.CMsgClientUCMDeletePublishedFileResponse
	(*CMsgClientUCMEnumerateUserPublishedFiles)(nil),                                     // 10: steam.CMsgClientUCMEnumerateUserPublishedFiles
	(*CMsgClientUCMEnumerateUserPublishedFilesResponse)(nil),                             // 11: steam.CMsgClientUCMEnumerateUserPublishedFilesResponse
	(*CMsgClientUCMEnumerateUserSubscribedFiles)(nil),                                    // 12: steam.CMsgClientUCMEnumerateUserSubscribedFiles
	(*CMsgClientUCMEnumerateUserSubscribedFilesResponse)(nil),                            // 13: steam.CMsgClientUCMEnumerateUserSubscribedFilesResponse
	(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates)(nil),                         // 14: steam.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates
	(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse)(nil),                 // 15: steam.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse
	(*CMsgClientUCMPublishedFileUpdated)(nil),                                            // 16: steam.CMsgClientUCMPublishedFileUpdated
	(*CMsgClientWorkshopItemChangesRequest)(nil),                                         // 17: steam.CMsgClientWorkshopItemChangesRequest
	(*CMsgClientWorkshopItemChangesResponse)(nil),                                        // 18: steam.CMsgClientWorkshopItemChangesResponse
	(*CMsgClientWorkshopItemInfoRequest)(nil),                                            // 19: steam.CMsgClientWorkshopItemInfoRequest
	(*CMsgClientWorkshopItemInfoResponse)(nil),                                           // 20: steam.CMsgClientWorkshopItemInfoResponse
	(*CMsgClientUCMGetPublishedFilesForUser)(nil),                                        // 21: steam.CMsgClientUCMGetPublishedFilesForUser
	(*CMsgClientUCMGetPublishedFilesForUserResponse)(nil),                                // 22: steam.CMsgClientUCMGetPublishedFilesForUserResponse
	(*CMsgClientUCMSetUserPublishedFileAction)(nil),                                      // 23: steam.CMsgClientUCMSetUserPublishedFileAction
	(*CMsgClientUCMSetUserPublishedFileActionResponse)(nil),                              // 24: steam.CMsgClientUCMSetUserPublishedFileActionResponse
	(*CMsgClientUCMEnumeratePublishedFilesByUserAction)(nil),                             // 25: steam.CMsgClientUCMEnumeratePublishedFilesByUserAction
	(*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse)(nil),                     // 26: steam.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse
	(*CMsgClientScreenshotsChanged)(nil),                                                 // 27: steam.CMsgClientScreenshotsChanged
	(*CMsgClientUpdateUserGameInfo)(nil),                                                 // 28: steam.CMsgClientUpdateUserGameInfo
	(*CMsgClientRichPresenceUpload)(nil),                                                 // 29: steam.CMsgClientRichPresenceUpload
	(*CMsgClientRichPresenceRequest)(nil),                                                // 30: steam.CMsgClientRichPresenceRequest
	(*CMsgClientRichPresenceInfo)(nil),                                                   // 31: steam.CMsgClientRichPresenceInfo
	(*CMsgClientCheckFileSignature)(nil),                                                 // 32: steam.CMsgClientCheckFileSignature
	(*CMsgClientCheckFileSignatureResponse)(nil),                                         // 33: steam.CMsgClientCheckFileSignatureResponse
	(*CMsgClientReadMachineAuth)(nil),                                                    // 34: steam.CMsgClientReadMachineAuth
	(*CMsgClientReadMachineAuthResponse)(nil),                                            // 35: steam.CMsgClientReadMachineAuthResponse
	(*CMsgClientUpdateMachineAuth)(nil),                                                  // 36: steam.CMsgClientUpdateMachineAuth
	(*CMsgClientUpdateMachineAuthResponse)(nil),                                          // 37: steam.CMsgClientUpdateMachineAuthResponse
	(*CMsgClientRequestMachineAuth)(nil),                                                 // 38: steam.CMsgClientRequestMachineAuth
	(*CMsgClientRequestMachineAuthResponse)(nil),                                         // 39: steam.CMsgClientRequestMachineAuthResponse
	(*CMsgClientRegisterKey)(nil),                                                        // 40: steam.CMsgClientRegisterKey
	(*CMsgClientPurchaseResponse)(nil),                                                   // 41: steam.CMsgClientPurchaseResponse
	(*CMsgClientActivateOEMLicense)(nil),                                                 // 42: steam.CMsgClientActivateOEMLicense
	(*CMsgClientRegisterOEMMachine)(nil),                                                 // 43: steam.CMsgClientRegisterOEMMachine
	(*CMsgClientRegisterOEMMachineResponse)(nil),                                         // 44: steam.CMsgClientRegisterOEMMachineResponse
	(*CMsgClientPurchaseWithMachineID)(nil),                                              // 45: steam.CMsgClientPurchaseWithMachineID
	(*CMsgTrading_InitiateTradeRequest)(nil),                                             // 46: steam.CMsgTrading_InitiateTradeRequest
	(*CMsgTrading_InitiateTradeResponse)(nil),                                            // 47: steam.CMsgTrading_InitiateTradeResponse
	(*CMsgTrading_CancelTradeRequest)(nil),                                               // 48: steam.CMsgTrading_CancelTradeRequest
	(*CMsgTrading_StartSession)(nil),                                                     // 49: steam.CMsgTrading_StartSession
	(*CMsgClientGetCDNAuthToken)(nil),                                                    // 50: steam.CMsgClientGetCDNAuthToken
	(*CMsgClientGetDepotDecryptionKey)(nil),                                              // 51: steam.CMsgClientGetDepotDecryptionKey
	(*CMsgClientGetDepotDecryptionKeyResponse)(nil),                                      // 52: steam.CMsgClientGetDepotDecryptionKeyResponse
	(*CMsgClientCheckAppBetaPassword)(nil),                                               // 53: steam.CMsgClientCheckAppBetaPassword
	(*CMsgClientCheckAppBetaPasswordResponse)(nil),                                       // 54: steam.CMsgClientCheckAppBetaPasswordResponse
	(*CMsgClientUpdateAppJobReport)(nil),                                                 // 55: steam.CMsgClientUpdateAppJobReport
	(*CMsgClientDPContentStatsReport)(nil),                                               // 56: steam.CMsgClientDPContentStatsReport
	(*CMsgClientGetCDNAuthTokenResponse)(nil),                                            // 57: steam.CMsgClientGetCDNAuthTokenResponse
	(*CMsgDownloadRateStatistics)(nil),                                                   // 58: steam.CMsgDownloadRateStatistics
	(*CMsgClientRequestAccountData)(nil),                                                 // 59: steam.CMsgClientRequestAccountData
	(*CMsgClientRequestAccountDataResponse)(nil),                                         // 60: steam.CMsgClientRequestAccountDataResponse
	(*CMsgClientUGSGetGlobalStats)(nil),                                                  // 61: steam.CMsgClientUGSGetGlobalStats
	(*CMsgClientUGSGetGlobalStatsResponse)(nil),                                          // 62: steam.CMsgClientUGSGetGlobalStatsResponse
	(*CMsgGameServerData)(nil),                                                           // 63: steam.CMsgGameServerData
	(*CMsgGameServerRemove)(nil),                                                         // 64: steam.CMsgGameServerRemove
	(*CMsgClientGMSServerQuery)(nil),                                                     // 65: steam.CMsgClientGMSServerQuery
	(*CMsgGMSClientServerQueryResponse)(nil),                                             // 66: steam.CMsgGMSClientServerQueryResponse
	(*CMsgGameServerOutOfDate)(nil),                                                      // 67: steam.CMsgGameServerOutOfDate
	(*CMsgClientRedeemGuestPass)(nil),                                                    // 68: steam.CMsgClientRedeemGuestPass
	(*CMsgClientRedeemGuestPassResponse)(nil),                                            // 69: steam.CMsgClientRedeemGuestPassResponse
	(*CMsgClientGetClanActivityCounts)(nil),                                              // 70: steam.CMsgClientGetClanActivityCounts
	(*CMsgClientGetClanActivityCountsResponse)(nil),                                      // 71: steam.CMsgClientGetClanActivityCountsResponse
	(*CMsgClientOGSReportString)(nil),                                                    // 72: steam.CMsgClientOGSReportString
	(*CMsgClientOGSReportBug)(nil),                                                       // 73: steam.CMsgClientOGSReportBug
	(*CMsgGSAssociateWithClan)(nil),                                                      // 74: steam.CMsgGSAssociateWithClan
	(*CMsgGSAssociateWithClanResponse)(nil),                                              // 75: steam.CMsgGSAssociateWithClanResponse
	(*CMsgGSComputeNewPlayerCompatibility)(nil),                                          // 76: steam.CMsgGSComputeNewPlayerCompatibility
	(*CMsgGSComputeNewPlayerCompatibilityResponse)(nil),                                  // 77: steam.CMsgGSComputeNewPlayerCompatibilityResponse
	(*CMsgClientSentLogs)(nil),                                                           // 78: steam.CMsgClientSentLogs
	(*CMsgGCClient)(nil),                                                                 // 79: steam.CMsgGCClient
	(*CMsgClientRequestFreeLicense)(nil),                                                 // 80: steam.CMsgClientRequestFreeLicense
	(*CMsgClientRequestFreeLicenseResponse)(nil),                                         // 81: steam.CMsgClientRequestFreeLicenseResponse
	(*CMsgDRMDownloadRequestWithCrashData)(nil),                                          // 82: steam.CMsgDRMDownloadRequestWithCrashData
	(*CMsgDRMDownloadResponse)(nil),                                                      // 83: steam.CMsgDRMDownloadResponse
	(*CMsgDRMFinalResult)(nil),                                                           // 84: steam.CMsgDRMFinalResult
	(*CMsgClientDPCheckSpecialSurvey)(nil),                                               // 85: steam.CMsgClientDPCheckSpecialSurvey
	(*CMsgClientDPCheckSpecialSurveyResponse)(nil),                                       // 86: steam.CMsgClientDPCheckSpecialSurveyResponse
	(*CMsgClientDPSendSpecialSurveyResponse)(nil),                                        // 87: steam.CMsgClientDPSendSpecialSurveyResponse
	(*CMsgClientDPSendSpecialSurveyResponseReply)(nil),                                   // 88: steam.CMsgClientDPSendSpecialSurveyResponseReply
	(*CMsgClientRequestForgottenPasswordEmail)(nil),                                      // 89: steam.CMsgClientRequestForgottenPasswordEmail
	(*CMsgClientRequestForgottenPasswordEmailResponse)(nil),                              // 90: steam.CMsgClientRequestForgottenPasswordEmailResponse
	(*CMsgClientItemAnnouncements)(nil),                                                  // 91: steam.CMsgClientItemAnnouncements
	(*CMsgClientRequestItemAnnouncements)(nil),                                           // 92: steam.CMsgClientRequestItemAnnouncements
	(*CMsgClientUserNotifications)(nil),                                                  // 93: steam.CMsgClientUserNotifications
	(*CMsgClientCommentNotifications)(nil),                                               // 94: steam.CMsgClientCommentNotifications
	(*CMsgClientRequestCommentNotifications)(nil),                                        // 95: steam.CMsgClientRequestCommentNotifications
	(*CMsgClientOfflineMessageNotification)(nil),                                         // 96: steam.CMsgClientOfflineMessageNotification
	(*CMsgClientRequestOfflineMessageCount)(nil),                                         // 97: steam.CMsgClientRequestOfflineMessageCount
	(*CMsgClientChatGetFriendMessageHistory)(nil),                                        // 98: steam.CMsgClientChatGetFriendMessageHistory
	(*CMsgClientChatGetFriendMessageHistoryResponse)(nil),                                // 99: steam.CMsgClientChatGetFriendMessageHistoryResponse
	(*CMsgClientChatGetFriendMessageHistoryForOfflineMessages)(nil),                      // 100: steam.CMsgClientChatGetFriendMessageHistoryForOfflineMessages
	(*CMsgClientFSGetFriendsSteamLevels)(nil),                                            // 101: steam.CMsgClientFSGetFriendsSteamLevels
	(*CMsgClientFSGetFriendsSteamLevelsResponse)(nil),                                    // 102: steam.CMsgClientFSGetFriendsSteamLevelsResponse
	(*CMsgClientEmailAddrInfo)(nil),                                                      // 103: steam.CMsgClientEmailAddrInfo
	(*CMsgCREItemVoteSummary)(nil),                                                       // 104: steam.CMsgCREItemVoteSummary
	(*CMsgCREItemVoteSummaryResponse)(nil),                                               // 105: steam.CMsgCREItemVoteSummaryResponse
	(*CMsgCREUpdateUserPublishedItemVote)(nil),                                           // 106: steam.CMsgCREUpdateUserPublishedItemVote
	(*CMsgCREUpdateUserPublishedItemVoteResponse)(nil),                                   // 107: steam.CMsgCREUpdateUserPublishedItemVoteResponse
	(*CMsgCREGetUserPublishedItemVoteDetails)(nil),                                       // 108: steam.CMsgCREGetUserPublishedItemVoteDetails
	(*CMsgCREGetUserPublishedItemVoteDetailsResponse)(nil),                               // 109: steam.CMsgCREGetUserPublishedItemVoteDetailsResponse
	(*CMsgGameServerPingSample)(nil),                                                     // 110: steam.CMsgGameServerPingSample
	(*CMsgFSGetFollowerCount)(nil),                                                       // 111: steam.CMsgFSGetFollowerCount
	(*CMsgFSGetFollowerCountResponse)(nil),                                               // 112: steam.CMsgFSGetFollowerCountResponse
	(*CMsgFSGetIsFollowing)(nil),                                                         // 113: steam.CMsgFSGetIsFollowing
	(*CMsgFSGetIsFollowingResponse)(nil),                                                 // 114: steam.CMsgFSGetIsFollowingResponse
	(*CMsgFSEnumerateFollowingList)(nil),                                                 // 115: steam.CMsgFSEnumerateFollowingList
	(*CMsgFSEnumerateFollowingListResponse)(nil),                                         // 116: steam.CMsgFSEnumerateFollowingListResponse
	(*CMsgDPGetNumberOfCurrentPlayers)(nil),                                              // 117: steam.CMsgDPGetNumberOfCurrentPlayers
	(*CMsgDPGetNumberOfCurrentPlayersResponse)(nil),                                      // 118: steam.CMsgDPGetNumberOfCurrentPlayersResponse
	(*CMsgClientFriendUserStatusPublished)(nil),                                          // 119: steam.CMsgClientFriendUserStatusPublished
	(*CMsgClientServiceMethodLegacy)(nil),                                                // 120: steam.CMsgClientServiceMethodLegacy
	(*CMsgClientServiceMethodLegacyResponse)(nil),                                        // 121: steam.CMsgClientServiceMethodLegacyResponse
	(*CMsgClientUIMode)(nil),                                                             // 122: steam.CMsgClientUIMode
	(*CMsgClientVanityURLChangedNotification)(nil),                                       // 123: steam.CMsgClientVanityURLChangedNotification
	(*CMsgClientAuthorizeLocalDeviceRequest)(nil),                                        // 124: steam.CMsgClientAuthorizeLocalDeviceRequest
	(*CMsgClientAuthorizeLocalDevice)(nil),                                               // 125: steam.CMsgClientAuthorizeLocalDevice
	(*CMsgClientAuthorizeLocalDeviceNotification)(nil),                                   // 126: steam.CMsgClientAuthorizeLocalDeviceNotification
	(*CMsgClientDeauthorizeDeviceRequest)(nil),                                           // 127: steam.CMsgClientDeauthorizeDeviceRequest
	(*CMsgClientDeauthorizeDevice)(nil),                                                  // 128: steam.CMsgClientDeauthorizeDevice
	(*CMsgClientUseLocalDeviceAuthorizations)(nil),                                       // 129: steam.CMsgClientUseLocalDeviceAuthorizations
	(*CMsgClientGetAuthorizedDevices)(nil),                                               // 130: steam.CMsgClientGetAuthorizedDevices
	(*CMsgClientGetAuthorizedDevicesResponse)(nil),                                       // 131: steam.CMsgClientGetAuthorizedDevicesResponse
	(*CMsgClientSharedLibraryLockStatus)(nil),                                            // 132: steam.CMsgClientSharedLibraryLockStatus
	(*CMsgClientSharedLibraryStopPlaying)(nil),                                           // 133: steam.CMsgClientSharedLibraryStopPlaying
	(*CMsgClientServiceCall)(nil),                                                        // 134: steam.CMsgClientServiceCall
	(*CMsgClientServiceModule)(nil),                                                      // 135: steam.CMsgClientServiceModule
	(*CMsgClientServiceCallResponse)(nil),                                                // 136: steam.CMsgClientServiceCallResponse
	(*CMsgAMUnlockStreaming)(nil),                                                        // 137: steam.CMsgAMUnlockStreaming
	(*CMsgAMUnlockStreamingResponse)(nil),                                                // 138: steam.CMsgAMUnlockStreamingResponse
	(*CMsgAMUnlockHEVC)(nil),                                                             // 139: steam.CMsgAMUnlockHEVC
	(*CMsgAMUnlockHEVCResponse)(nil),                                                     // 140: steam.CMsgAMUnlockHEVCResponse
	(*CMsgClientPlayingSessionState)(nil),                                                // 141: steam.CMsgClientPlayingSessionState
	(*CMsgClientKickPlayingSession)(nil),                                                 // 142: steam.CMsgClientKickPlayingSession
	(*CMsgClientVoiceCallPreAuthorize)(nil),                                              // 143: steam.CMsgClientVoiceCallPreAuthorize
	(*CMsgClientVoiceCallPreAuthorizeResponse)(nil),                                      // 144: steam.CMsgClientVoiceCallPreAuthorizeResponse
	(*CMsgBadgeCraftedNotification)(nil),                                                 // 145: steam.CMsgBadgeCraftedNotification
	(*CMsgClientUCMAddScreenshot_Tag)(nil),                                               // 146: steam.CMsgClientUCMAddScreenshot.Tag
	(*CMsgClientUCMUpdatePublishedFile_KeyValueTag)(nil),                                 // 147: steam.CMsgClientUCMUpdatePublishedFile.KeyValueTag
	(*CMsgClientUCMUpdatePublishedFile_AdditionalPreview)(nil),                           // 148: steam.CMsgClientUCMUpdatePublishedFile.AdditionalPreview
	(*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId)(nil),             // 149: steam.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId
	(*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId)(nil),            // 150: steam.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId
	(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId)(nil), // 151: steam.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId
	(*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo)(nil),                       // 152: steam.CMsgClientWorkshopItemChangesResponse.WorkshopItemInfo
	(*CMsgClientWorkshopItemInfoRequest_WorkshopItem)(nil),                               // 153: steam.CMsgClientWorkshopItemInfoRequest.WorkshopItem
	(*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo)(nil),                          // 154: steam.CMsgClientWorkshopItemInfoResponse.WorkshopItemInfo
	(*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId)(nil),                // 155: steam.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId
	(*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId)(nil),     // 156: steam.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId
	(*CMsgClientRichPresenceInfo_RichPresence)(nil),                                      // 157: steam.CMsgClientRichPresenceInfo.RichPresence
	(*CMsgClientCheckAppBetaPasswordResponse_BetaPassword)(nil),                          // 158: steam.CMsgClientCheckAppBetaPasswordResponse.BetaPassword
	(*CMsgDownloadRateStatistics_StatsInfo)(nil),                                         // 159: steam.CMsgDownloadRateStatistics.StatsInfo
	(*CMsgClientUGSGetGlobalStatsResponse_Day)(nil),                                      // 160: steam.CMsgClientUGSGetGlobalStatsResponse.Day
	(*CMsgClientUGSGetGlobalStatsResponse_Day_Stat)(nil),                                 // 161: steam.CMsgClientUGSGetGlobalStatsResponse.Day.Stat
	(*CMsgGameServerData_Player)(nil),                                                    // 162: steam.CMsgGameServerData.Player
	(*CMsgGMSClientServerQueryResponse_Server)(nil),                                      // 163: steam.CMsgGMSClientServerQueryResponse.Server
	(*CMsgClientItemAnnouncements_UnseenItem)(nil),                                       // 164: steam.CMsgClientItemAnnouncements.UnseenItem
	(*CMsgClientUserNotifications_Notification)(nil),                                     // 165: steam.CMsgClientUserNotifications.Notification
	(*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage)(nil),                  // 166: steam.CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage
	(*CMsgClientFSGetFriendsSteamLevelsResponse_Friend)(nil),                             // 167: steam.CMsgClientFSGetFriendsSteamLevelsResponse.Friend
	(*CMsgCREItemVoteSummary_PublishedFileId)(nil),                                       // 168: steam.CMsgCREItemVoteSummary.PublishedFileId
	(*CMsgCREItemVoteSummaryResponse_ItemVoteSummary)(nil),                               // 169: steam.CMsgCREItemVoteSummaryResponse.ItemVoteSummary
	(*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId)(nil),                       // 170: steam.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId
	(*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail)(nil),            // 171: steam.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail
	(*CMsgGameServerPingSample_Sample)(nil),                                              // 172: steam.CMsgGameServerPingSample.Sample
	(*CMsgClientUseLocalDeviceAuthorizations_DeviceToken)(nil),                           // 173: steam.CMsgClientUseLocalDeviceAuthorizations.DeviceToken
	(*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice)(nil),                      // 174: steam.CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice
	(*CMsgClientSharedLibraryLockStatus_LockedLibrary)(nil),                              // 175: steam.CMsgClientSharedLibraryLockStatus.LockedLibrary
	(*CMsgClientSharedLibraryStopPlaying_StopApp)(nil),                                   // 176: steam.CMsgClientSharedLibraryStopPlaying.StopApp
	(*CMsgIPAddress)(nil),                                                                // 177: steam.CMsgIPAddress
}
var file_steam_steammessages_clientserver_2_proto_depIdxs = []int32{
	146, // 0: steam.CMsgClientUCMAddScreenshot.tag:type_name -> steam.CMsgClientUCMAddScreenshot.Tag
	147, // 1: steam.CMsgClientUCMUpdatePublishedFile.kvtags:type_name -> steam.CMsgClientUCMUpdatePublishedFile.KeyValueTag
	148, // 2: steam.CMsgClientUCMUpdatePublishedFile.previews:type_name -> steam.CMsgClientUCMUpdatePublishedFile.AdditionalPreview
	149, // 3: steam.CMsgClientUCMEnumerateUserPublishedFilesResponse.published_files:type_name -> steam.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId
	150, // 4: steam.CMsgClientUCMEnumerateUserSubscribedFilesResponse.subscribed_files:type_name -> steam.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId
	151, // 5: steam.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.subscribed_files:type_name -> steam.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId
	152, // 6: steam.CMsgClientWorkshopItemChangesResponse.workshop_items:type_name -> steam.CMsgClientWorkshopItemChangesResponse.WorkshopItemInfo
	153, // 7: steam.CMsgClientWorkshopItemInfoRequest.workshop_items:type_name -> steam.CMsgClientWorkshopItemInfoRequest.WorkshopItem
	154, // 8: steam.CMsgClientWorkshopItemInfoResponse.workshop_items:type_name -> steam.CMsgClientWorkshopItemInfoResponse.WorkshopItemInfo
	155, // 9: steam.CMsgClientUCMGetPublishedFilesForUserResponse.published_files:type_name -> steam.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId
	156, // 10: steam.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.published_files:type_name -> steam.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId
	157, // 11: steam.CMsgClientRichPresenceInfo.rich_presence:type_name -> steam.CMsgClientRichPresenceInfo.RichPresence
	158, // 12: steam.CMsgClientCheckAppBetaPasswordResponse.betapasswords:type_name -> steam.CMsgClientCheckAppBetaPasswordResponse.BetaPassword
	159, // 13: steam.CMsgDownloadRateStatistics.stats:type_name -> steam.CMsgDownloadRateStatistics.StatsInfo
	160, // 14: steam.CMsgClientUGSGetGlobalStatsResponse.days:type_name -> steam.CMsgClientUGSGetGlobalStatsResponse.Day
	177, // 15: steam.CMsgGameServerData.game_ip_address:type_name -> steam.CMsgIPAddress
	162, // 16: steam.CMsgGameServerData.players:type_name -> steam.CMsgGameServerData.Player
	177, // 17: steam.CMsgGameServerRemove.ip:type_name -> steam.CMsgIPAddress
	163, // 18: steam.CMsgGMSClientServerQueryResponse.servers:type_name -> steam.CMsgGMSClientServerQueryResponse.Server
	164, // 19: steam.CMsgClientItemAnnouncements.unseen_items:type_name -> steam.CMsgClientItemAnnouncements.UnseenItem
	165, // 20: steam.CMsgClientUserNotifications.notifications:type_name -> steam.CMsgClientUserNotifications.Notification
	166, // 21: steam.CMsgClientChatGetFriendMessageHistoryResponse.messages:type_name -> steam.CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage
	167, // 22: steam.CMsgClientFSGetFriendsSteamLevelsResponse.friends:type_name -> steam.CMsgClientFSGetFriendsSteamLevelsResponse.Friend
	168, // 23: steam.CMsgCREItemVoteSummary.published_file_ids:type_name -> steam.CMsgCREItemVoteSummary.PublishedFileId
	169, // 24: steam.CMsgCREItemVoteSummaryResponse.item_vote_summaries:type_name -> steam.CMsgCREItemVoteSummaryResponse.ItemVoteSummary
	170, // 25: steam.CMsgCREGetUserPublishedItemVoteDetails.published_file_ids:type_name -> steam.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId
	171, // 26: steam.CMsgCREGetUserPublishedItemVoteDetailsResponse.user_item_vote_details:type_name -> steam.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail
	172, // 27: steam.CMsgGameServerPingSample.gs_samples:type_name -> steam.CMsgGameServerPingSample.Sample
	173, // 28: steam.CMsgClientUseLocalDeviceAuthorizations.device_tokens:type_name -> steam.CMsgClientUseLocalDeviceAuthorizations.DeviceToken
	174, // 29: steam.CMsgClientGetAuthorizedDevicesResponse.authorized_device:type_name -> steam.CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice
	175, // 30: steam.CMsgClientSharedLibraryLockStatus.locked_library:type_name -> steam.CMsgClientSharedLibraryLockStatus.LockedLibrary
	176, // 31: steam.CMsgClientSharedLibraryStopPlaying.stop_apps:type_name -> steam.CMsgClientSharedLibraryStopPlaying.StopApp
	161, // 32: steam.CMsgClientUGSGetGlobalStatsResponse.Day.stats:type_name -> steam.CMsgClientUGSGetGlobalStatsResponse.Day.Stat
	177, // 33: steam.CMsgGMSClientServerQueryResponse.Server.server_ip:type_name -> steam.CMsgIPAddress
	34,  // [34:34] is the sub-list for method output_type
	34,  // [34:34] is the sub-list for method input_type
	34,  // [34:34] is the sub-list for extension type_name
	34,  // [34:34] is the sub-list for extension extendee
	0,   // [0:34] is the sub-list for field type_name
}

func init() { file_steam_steammessages_clientserver_2_proto_init() }
func file_steam_steammessages_clientserver_2_proto_init() {
	if File_steam_steammessages_clientserver_2_proto != nil {
		return
	}
	file_steam_steammessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steam_steammessages_clientserver_2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMAddScreenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMAddScreenshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMDeleteScreenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMDeleteScreenshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMPublishFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMPublishFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMUpdatePublishedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMUpdatePublishedFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMDeletePublishedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMDeletePublishedFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMPublishedFileUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMSetUserPublishedFileAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMSetUserPublishedFileActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumeratePublishedFilesByUserAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientScreenshotsChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUpdateUserGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRichPresenceUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRichPresenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRichPresenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCheckFileSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCheckFileSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientReadMachineAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientReadMachineAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUpdateMachineAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUpdateMachineAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestMachineAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestMachineAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRegisterKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientActivateOEMLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRegisterOEMMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRegisterOEMMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPurchaseWithMachineID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTrading_InitiateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTrading_InitiateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTrading_CancelTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTrading_StartSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetCDNAuthToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetDepotDecryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetDepotDecryptionKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCheckAppBetaPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCheckAppBetaPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUpdateAppJobReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDPContentStatsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetCDNAuthTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDownloadRateStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestAccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestAccountDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUGSGetGlobalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUGSGetGlobalStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGMSServerQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGMSClientServerQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerOutOfDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRedeemGuestPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRedeemGuestPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClanActivityCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetClanActivityCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientOGSReportString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientOGSReportBug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSAssociateWithClan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSAssociateWithClanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSComputeNewPlayerCompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGSComputeNewPlayerCompatibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSentLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestFreeLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestFreeLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDRMDownloadRequestWithCrashData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDRMDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDRMFinalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDPCheckSpecialSurvey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDPCheckSpecialSurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDPSendSpecialSurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDPSendSpecialSurveyResponseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestForgottenPasswordEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestForgottenPasswordEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientItemAnnouncements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestItemAnnouncements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUserNotifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCommentNotifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestCommentNotifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientOfflineMessageNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRequestOfflineMessageCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChatGetFriendMessageHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChatGetFriendMessageHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChatGetFriendMessageHistoryForOfflineMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientFSGetFriendsSteamLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientFSGetFriendsSteamLevelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientEmailAddrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREItemVoteSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREItemVoteSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREUpdateUserPublishedItemVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREUpdateUserPublishedItemVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREGetUserPublishedItemVoteDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREGetUserPublishedItemVoteDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPingSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSGetFollowerCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSGetFollowerCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSGetIsFollowing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSGetIsFollowingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSEnumerateFollowingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgFSEnumerateFollowingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPGetNumberOfCurrentPlayers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDPGetNumberOfCurrentPlayersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientFriendUserStatusPublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServiceMethodLegacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServiceMethodLegacyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUIMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientVanityURLChangedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAuthorizeLocalDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAuthorizeLocalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAuthorizeLocalDeviceNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDeauthorizeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientDeauthorizeDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUseLocalDeviceAuthorizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetAuthorizedDevices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetAuthorizedDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSharedLibraryLockStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSharedLibraryStopPlaying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServiceCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServiceModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServiceCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAMUnlockStreaming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAMUnlockStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAMUnlockHEVC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAMUnlockHEVCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientPlayingSessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientKickPlayingSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientVoiceCallPreAuthorize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientVoiceCallPreAuthorizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBadgeCraftedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMAddScreenshot_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMUpdatePublishedFile_KeyValueTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMUpdatePublishedFile_AdditionalPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoRequest_WorkshopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientRichPresenceInfo_RichPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientCheckAppBetaPasswordResponse_BetaPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDownloadRateStatistics_StatsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUGSGetGlobalStatsResponse_Day); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUGSGetGlobalStatsResponse_Day_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerData_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGMSClientServerQueryResponse_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientItemAnnouncements_UnseenItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUserNotifications_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientFSGetFriendsSteamLevelsResponse_Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREItemVoteSummary_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREItemVoteSummaryResponse_ItemVoteSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPingSample_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUseLocalDeviceAuthorizations_DeviceToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSharedLibraryLockStatus_LockedLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steam_steammessages_clientserver_2_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSharedLibraryStopPlaying_StopApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steam_steammessages_clientserver_2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   177,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steam_steammessages_clientserver_2_proto_goTypes,
		DependencyIndexes: file_steam_steammessages_clientserver_2_proto_depIdxs,
		MessageInfos:      file_steam_steammessages_clientserver_2_proto_msgTypes,
	}.Build()
	File_steam_steammessages_clientserver_2_proto = out.File
	file_steam_steammessages_clientserver_2_proto_rawDesc = nil
	file_steam_steammessages_clientserver_2_proto_goTypes = nil
	file_steam_steammessages_clientserver_2_proto_depIdxs = nil
}
