// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: dota2/dota_gcmessages_common_bot_script.proto

package dota2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CMsgBotWorldState_UnitType int32

const (
	CMsgBotWorldState_INVALID      CMsgBotWorldState_UnitType = 0
	CMsgBotWorldState_HERO         CMsgBotWorldState_UnitType = 1
	CMsgBotWorldState_CREEP_HERO   CMsgBotWorldState_UnitType = 2
	CMsgBotWorldState_LANE_CREEP   CMsgBotWorldState_UnitType = 3
	CMsgBotWorldState_JUNGLE_CREEP CMsgBotWorldState_UnitType = 4
	CMsgBotWorldState_ROSHAN       CMsgBotWorldState_UnitType = 5
	CMsgBotWorldState_TOWER        CMsgBotWorldState_UnitType = 6
	CMsgBotWorldState_BARRACKS     CMsgBotWorldState_UnitType = 7
	CMsgBotWorldState_SHRINE       CMsgBotWorldState_UnitType = 8
	CMsgBotWorldState_FORT         CMsgBotWorldState_UnitType = 9
	CMsgBotWorldState_BUILDING     CMsgBotWorldState_UnitType = 10
	CMsgBotWorldState_COURIER      CMsgBotWorldState_UnitType = 11
	CMsgBotWorldState_WARD         CMsgBotWorldState_UnitType = 12
)

// Enum value maps for CMsgBotWorldState_UnitType.
var (
	CMsgBotWorldState_UnitType_name = map[int32]string{
		0:  "INVALID",
		1:  "HERO",
		2:  "CREEP_HERO",
		3:  "LANE_CREEP",
		4:  "JUNGLE_CREEP",
		5:  "ROSHAN",
		6:  "TOWER",
		7:  "BARRACKS",
		8:  "SHRINE",
		9:  "FORT",
		10: "BUILDING",
		11: "COURIER",
		12: "WARD",
	}
	CMsgBotWorldState_UnitType_value = map[string]int32{
		"INVALID":      0,
		"HERO":         1,
		"CREEP_HERO":   2,
		"LANE_CREEP":   3,
		"JUNGLE_CREEP": 4,
		"ROSHAN":       5,
		"TOWER":        6,
		"BARRACKS":     7,
		"SHRINE":       8,
		"FORT":         9,
		"BUILDING":     10,
		"COURIER":      11,
		"WARD":         12,
	}
)

func (x CMsgBotWorldState_UnitType) Enum() *CMsgBotWorldState_UnitType {
	p := new(CMsgBotWorldState_UnitType)
	*p = x
	return p
}

func (x CMsgBotWorldState_UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBotWorldState_UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[0].Descriptor()
}

func (CMsgBotWorldState_UnitType) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[0]
}

func (x CMsgBotWorldState_UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBotWorldState_UnitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBotWorldState_UnitType(num)
	return nil
}

// Deprecated: Use CMsgBotWorldState_UnitType.Descriptor instead.
func (CMsgBotWorldState_UnitType) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 0}
}

type CMsgBotWorldState_CourierState int32

const (
	CMsgBotWorldState_COURIER_STATE_INIT              CMsgBotWorldState_CourierState = -1
	CMsgBotWorldState_COURIER_STATE_IDLE              CMsgBotWorldState_CourierState = 0
	CMsgBotWorldState_COURIER_STATE_AT_BASE           CMsgBotWorldState_CourierState = 1
	CMsgBotWorldState_COURIER_STATE_MOVING            CMsgBotWorldState_CourierState = 2
	CMsgBotWorldState_COURIER_STATE_DELIVERING_ITEMS  CMsgBotWorldState_CourierState = 3
	CMsgBotWorldState_COURIER_STATE_RETURNING_TO_BASE CMsgBotWorldState_CourierState = 4
	CMsgBotWorldState_COURIER_STATE_DEAD              CMsgBotWorldState_CourierState = 5
)

// Enum value maps for CMsgBotWorldState_CourierState.
var (
	CMsgBotWorldState_CourierState_name = map[int32]string{
		-1: "COURIER_STATE_INIT",
		0:  "COURIER_STATE_IDLE",
		1:  "COURIER_STATE_AT_BASE",
		2:  "COURIER_STATE_MOVING",
		3:  "COURIER_STATE_DELIVERING_ITEMS",
		4:  "COURIER_STATE_RETURNING_TO_BASE",
		5:  "COURIER_STATE_DEAD",
	}
	CMsgBotWorldState_CourierState_value = map[string]int32{
		"COURIER_STATE_INIT":              -1,
		"COURIER_STATE_IDLE":              0,
		"COURIER_STATE_AT_BASE":           1,
		"COURIER_STATE_MOVING":            2,
		"COURIER_STATE_DELIVERING_ITEMS":  3,
		"COURIER_STATE_RETURNING_TO_BASE": 4,
		"COURIER_STATE_DEAD":              5,
	}
)

func (x CMsgBotWorldState_CourierState) Enum() *CMsgBotWorldState_CourierState {
	p := new(CMsgBotWorldState_CourierState)
	*p = x
	return p
}

func (x CMsgBotWorldState_CourierState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBotWorldState_CourierState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[1].Descriptor()
}

func (CMsgBotWorldState_CourierState) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[1]
}

func (x CMsgBotWorldState_CourierState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBotWorldState_CourierState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBotWorldState_CourierState(num)
	return nil
}

// Deprecated: Use CMsgBotWorldState_CourierState.Descriptor instead.
func (CMsgBotWorldState_CourierState) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 1}
}

type CMsgBotWorldState_Action_Type int32

const (
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_NONE                       CMsgBotWorldState_Action_Type = 0
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_MOVE_TO_POSITION           CMsgBotWorldState_Action_Type = 1
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_MOVE_TO_TARGET             CMsgBotWorldState_Action_Type = 2
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_ATTACK_MOVE                CMsgBotWorldState_Action_Type = 3
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_ATTACK_TARGET              CMsgBotWorldState_Action_Type = 4
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_POSITION              CMsgBotWorldState_Action_Type = 5
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_TARGET                CMsgBotWorldState_Action_Type = 6
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_TARGET_TREE           CMsgBotWorldState_Action_Type = 7
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_NO_TARGET             CMsgBotWorldState_Action_Type = 8
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_TOGGLE                CMsgBotWorldState_Action_Type = 9
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_HOLD_POSITION              CMsgBotWorldState_Action_Type = 10
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_TRAIN_ABILITY              CMsgBotWorldState_Action_Type = 11
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_DROP_ITEM                  CMsgBotWorldState_Action_Type = 12
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_GIVE_ITEM                  CMsgBotWorldState_Action_Type = 13
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_PICKUP_ITEM                CMsgBotWorldState_Action_Type = 14
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_PICKUP_RUNE                CMsgBotWorldState_Action_Type = 15
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_PURCHASE_ITEM              CMsgBotWorldState_Action_Type = 16
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_SELL_ITEM                  CMsgBotWorldState_Action_Type = 17
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_DISASSEMBLE_ITEM           CMsgBotWorldState_Action_Type = 18
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_MOVE_ITEM                  CMsgBotWorldState_Action_Type = 19
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO           CMsgBotWorldState_Action_Type = 20
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_STOP                       CMsgBotWorldState_Action_Type = 21
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_TAUNT                      CMsgBotWorldState_Action_Type = 22
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_BUYBACK                    CMsgBotWorldState_Action_Type = 23
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_GLYPH                      CMsgBotWorldState_Action_Type = 24
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH      CMsgBotWorldState_Action_Type = 25
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CAST_RUNE                  CMsgBotWorldState_Action_Type = 26
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_PING_ABILITY               CMsgBotWorldState_Action_Type = 27
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_MOVE_TO_DIRECTION          CMsgBotWorldState_Action_Type = 28
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_PATROL                     CMsgBotWorldState_Action_Type = 29
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION     CMsgBotWorldState_Action_Type = 30
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_RADAR                      CMsgBotWorldState_Action_Type = 31
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK      CMsgBotWorldState_Action_Type = 32
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_CONTINUE                   CMsgBotWorldState_Action_Type = 33
	CMsgBotWorldState_Action_ACTION_CHAT                                CMsgBotWorldState_Action_Type = 40
	CMsgBotWorldState_Action_ACTION_SWAP_ITEMS                          CMsgBotWorldState_Action_Type = 41
	CMsgBotWorldState_Action_ACTION_USE_SHRINE                          CMsgBotWorldState_Action_Type = 42
	CMsgBotWorldState_Action_ACTION_COURIER                             CMsgBotWorldState_Action_Type = 43
	CMsgBotWorldState_Action_RPC_GET_ACTUAL_INCOMING_DAMAGE             CMsgBotWorldState_Action_Type = 44
	CMsgBotWorldState_Action_RPC_GET_ESTIMATED_DAMAGE_TO_TARGET         CMsgBotWorldState_Action_Type = 45
	CMsgBotWorldState_Action_OCEAN_FULL_UPDATE                          CMsgBotWorldState_Action_Type = 50
	CMsgBotWorldState_Action_OCEAN_RELOAD_CODE                          CMsgBotWorldState_Action_Type = 51
	CMsgBotWorldState_Action_OCEAN_SOFT_RESET                           CMsgBotWorldState_Action_Type = 52
	CMsgBotWorldState_Action_OCEAN_HOLD_FRAMESKIP                       CMsgBotWorldState_Action_Type = 54
	CMsgBotWorldState_Action_OCEAN_WIN_GAME                             CMsgBotWorldState_Action_Type = 63
	CMsgBotWorldState_Action_OCEAN_REPLAY_CORRECT_TIME                  CMsgBotWorldState_Action_Type = 64
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_TEXT                  CMsgBotWorldState_Action_Type = 55
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_LINE                  CMsgBotWorldState_Action_Type = 56
	CMsgBotWorldState_Action_SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION CMsgBotWorldState_Action_Type = 57
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_SCREEN_TEXT           CMsgBotWorldState_Action_Type = 58
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_BOX                   CMsgBotWorldState_Action_Type = 59
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_CIRCLE                CMsgBotWorldState_Action_Type = 60
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_DRAW_CLEAR                 CMsgBotWorldState_Action_Type = 61
	CMsgBotWorldState_Action_SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY         CMsgBotWorldState_Action_Type = 65
	CMsgBotWorldState_Action_DOTA_UNIT_ORDER_MOVE_DIRECTLY              CMsgBotWorldState_Action_Type = 62
)

// Enum value maps for CMsgBotWorldState_Action_Type.
var (
	CMsgBotWorldState_Action_Type_name = map[int32]string{
		0:  "DOTA_UNIT_ORDER_NONE",
		1:  "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
		2:  "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
		3:  "DOTA_UNIT_ORDER_ATTACK_MOVE",
		4:  "DOTA_UNIT_ORDER_ATTACK_TARGET",
		5:  "DOTA_UNIT_ORDER_CAST_POSITION",
		6:  "DOTA_UNIT_ORDER_CAST_TARGET",
		7:  "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
		8:  "DOTA_UNIT_ORDER_CAST_NO_TARGET",
		9:  "DOTA_UNIT_ORDER_CAST_TOGGLE",
		10: "DOTA_UNIT_ORDER_HOLD_POSITION",
		11: "DOTA_UNIT_ORDER_TRAIN_ABILITY",
		12: "DOTA_UNIT_ORDER_DROP_ITEM",
		13: "DOTA_UNIT_ORDER_GIVE_ITEM",
		14: "DOTA_UNIT_ORDER_PICKUP_ITEM",
		15: "DOTA_UNIT_ORDER_PICKUP_RUNE",
		16: "DOTA_UNIT_ORDER_PURCHASE_ITEM",
		17: "DOTA_UNIT_ORDER_SELL_ITEM",
		18: "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
		19: "DOTA_UNIT_ORDER_MOVE_ITEM",
		20: "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
		21: "DOTA_UNIT_ORDER_STOP",
		22: "DOTA_UNIT_ORDER_TAUNT",
		23: "DOTA_UNIT_ORDER_BUYBACK",
		24: "DOTA_UNIT_ORDER_GLYPH",
		25: "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
		26: "DOTA_UNIT_ORDER_CAST_RUNE",
		27: "DOTA_UNIT_ORDER_PING_ABILITY",
		28: "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
		29: "DOTA_UNIT_ORDER_PATROL",
		30: "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION",
		31: "DOTA_UNIT_ORDER_RADAR",
		32: "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK",
		33: "DOTA_UNIT_ORDER_CONTINUE",
		40: "ACTION_CHAT",
		41: "ACTION_SWAP_ITEMS",
		42: "ACTION_USE_SHRINE",
		43: "ACTION_COURIER",
		44: "RPC_GET_ACTUAL_INCOMING_DAMAGE",
		45: "RPC_GET_ESTIMATED_DAMAGE_TO_TARGET",
		50: "OCEAN_FULL_UPDATE",
		51: "OCEAN_RELOAD_CODE",
		52: "OCEAN_SOFT_RESET",
		54: "OCEAN_HOLD_FRAMESKIP",
		63: "OCEAN_WIN_GAME",
		64: "OCEAN_REPLAY_CORRECT_TIME",
		55: "SCRIPTING_DEBUG_DRAW_TEXT",
		56: "SCRIPTING_DEBUG_DRAW_LINE",
		57: "SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION",
		58: "SCRIPTING_DEBUG_DRAW_SCREEN_TEXT",
		59: "SCRIPTING_DEBUG_DRAW_BOX",
		60: "SCRIPTING_DEBUG_DRAW_CIRCLE",
		61: "SCRIPTING_DEBUG_DRAW_CLEAR",
		65: "SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY",
		62: "DOTA_UNIT_ORDER_MOVE_DIRECTLY",
	}
	CMsgBotWorldState_Action_Type_value = map[string]int32{
		"DOTA_UNIT_ORDER_NONE":                       0,
		"DOTA_UNIT_ORDER_MOVE_TO_POSITION":           1,
		"DOTA_UNIT_ORDER_MOVE_TO_TARGET":             2,
		"DOTA_UNIT_ORDER_ATTACK_MOVE":                3,
		"DOTA_UNIT_ORDER_ATTACK_TARGET":              4,
		"DOTA_UNIT_ORDER_CAST_POSITION":              5,
		"DOTA_UNIT_ORDER_CAST_TARGET":                6,
		"DOTA_UNIT_ORDER_CAST_TARGET_TREE":           7,
		"DOTA_UNIT_ORDER_CAST_NO_TARGET":             8,
		"DOTA_UNIT_ORDER_CAST_TOGGLE":                9,
		"DOTA_UNIT_ORDER_HOLD_POSITION":              10,
		"DOTA_UNIT_ORDER_TRAIN_ABILITY":              11,
		"DOTA_UNIT_ORDER_DROP_ITEM":                  12,
		"DOTA_UNIT_ORDER_GIVE_ITEM":                  13,
		"DOTA_UNIT_ORDER_PICKUP_ITEM":                14,
		"DOTA_UNIT_ORDER_PICKUP_RUNE":                15,
		"DOTA_UNIT_ORDER_PURCHASE_ITEM":              16,
		"DOTA_UNIT_ORDER_SELL_ITEM":                  17,
		"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM":           18,
		"DOTA_UNIT_ORDER_MOVE_ITEM":                  19,
		"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO":           20,
		"DOTA_UNIT_ORDER_STOP":                       21,
		"DOTA_UNIT_ORDER_TAUNT":                      22,
		"DOTA_UNIT_ORDER_BUYBACK":                    23,
		"DOTA_UNIT_ORDER_GLYPH":                      24,
		"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH":      25,
		"DOTA_UNIT_ORDER_CAST_RUNE":                  26,
		"DOTA_UNIT_ORDER_PING_ABILITY":               27,
		"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION":          28,
		"DOTA_UNIT_ORDER_PATROL":                     29,
		"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION":     30,
		"DOTA_UNIT_ORDER_RADAR":                      31,
		"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK":      32,
		"DOTA_UNIT_ORDER_CONTINUE":                   33,
		"ACTION_CHAT":                                40,
		"ACTION_SWAP_ITEMS":                          41,
		"ACTION_USE_SHRINE":                          42,
		"ACTION_COURIER":                             43,
		"RPC_GET_ACTUAL_INCOMING_DAMAGE":             44,
		"RPC_GET_ESTIMATED_DAMAGE_TO_TARGET":         45,
		"OCEAN_FULL_UPDATE":                          50,
		"OCEAN_RELOAD_CODE":                          51,
		"OCEAN_SOFT_RESET":                           52,
		"OCEAN_HOLD_FRAMESKIP":                       54,
		"OCEAN_WIN_GAME":                             63,
		"OCEAN_REPLAY_CORRECT_TIME":                  64,
		"SCRIPTING_DEBUG_DRAW_TEXT":                  55,
		"SCRIPTING_DEBUG_DRAW_LINE":                  56,
		"SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION": 57,
		"SCRIPTING_DEBUG_DRAW_SCREEN_TEXT":           58,
		"SCRIPTING_DEBUG_DRAW_BOX":                   59,
		"SCRIPTING_DEBUG_DRAW_CIRCLE":                60,
		"SCRIPTING_DEBUG_DRAW_CLEAR":                 61,
		"SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY":         65,
		"DOTA_UNIT_ORDER_MOVE_DIRECTLY":              62,
	}
)

func (x CMsgBotWorldState_Action_Type) Enum() *CMsgBotWorldState_Action_Type {
	p := new(CMsgBotWorldState_Action_Type)
	*p = x
	return p
}

func (x CMsgBotWorldState_Action_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgBotWorldState_Action_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[2].Descriptor()
}

func (CMsgBotWorldState_Action_Type) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes[2]
}

func (x CMsgBotWorldState_Action_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgBotWorldState_Action_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgBotWorldState_Action_Type(num)
	return nil
}

// Deprecated: Use CMsgBotWorldState_Action_Type.Descriptor instead.
func (CMsgBotWorldState_Action_Type) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 0}
}

type CMsgBotWorldState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId              *uint32                                 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	GameTime            *float32                                `protobuf:"fixed32,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DotaTime            *float32                                `protobuf:"fixed32,3,opt,name=dota_time,json=dotaTime" json:"dota_time,omitempty"`
	GameState           *uint32                                 `protobuf:"varint,4,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	HeroPickState       *uint32                                 `protobuf:"varint,5,opt,name=hero_pick_state,json=heroPickState" json:"hero_pick_state,omitempty"`
	TimeOfDay           *float32                                `protobuf:"fixed32,6,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	GlyphCooldown       *float32                                `protobuf:"fixed32,7,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	GlyphCooldownEnemy  *uint32                                 `protobuf:"varint,8,opt,name=glyph_cooldown_enemy,json=glyphCooldownEnemy" json:"glyph_cooldown_enemy,omitempty"`
	Players             []*CMsgBotWorldState_Player             `protobuf:"bytes,10,rep,name=players" json:"players,omitempty"`
	Units               []*CMsgBotWorldState_Unit               `protobuf:"bytes,11,rep,name=units" json:"units,omitempty"`
	DroppedItems        []*CMsgBotWorldState_DroppedItem        `protobuf:"bytes,12,rep,name=dropped_items,json=droppedItems" json:"dropped_items,omitempty"`
	DroppedItemsDeltas  []int32                                 `protobuf:"varint,112,rep,name=dropped_items_deltas,json=droppedItemsDeltas" json:"dropped_items_deltas,omitempty"`
	RuneInfos           []*CMsgBotWorldState_RuneInfo           `protobuf:"bytes,13,rep,name=rune_infos,json=runeInfos" json:"rune_infos,omitempty"`
	RuneInfosDeltas     []int32                                 `protobuf:"varint,113,rep,name=rune_infos_deltas,json=runeInfosDeltas" json:"rune_infos_deltas,omitempty"`
	IncomingTeleports   []*CMsgBotWorldState_TeleportInfo       `protobuf:"bytes,14,rep,name=incoming_teleports,json=incomingTeleports" json:"incoming_teleports,omitempty"`
	LinearProjectiles   []*CMsgBotWorldState_LinearProjectile   `protobuf:"bytes,15,rep,name=linear_projectiles,json=linearProjectiles" json:"linear_projectiles,omitempty"`
	AvoidanceZones      []*CMsgBotWorldState_AvoidanceZone      `protobuf:"bytes,16,rep,name=avoidance_zones,json=avoidanceZones" json:"avoidance_zones,omitempty"`
	Couriers            []*CMsgBotWorldState_Courier            `protobuf:"bytes,17,rep,name=couriers" json:"couriers,omitempty"`
	AbilityEvents       []*CMsgBotWorldState_EventAbility       `protobuf:"bytes,20,rep,name=ability_events,json=abilityEvents" json:"ability_events,omitempty"`
	DamageEvents        []*CMsgBotWorldState_EventDamage        `protobuf:"bytes,21,rep,name=damage_events,json=damageEvents" json:"damage_events,omitempty"`
	CourierKilledEvents []*CMsgBotWorldState_EventCourierKilled `protobuf:"bytes,22,rep,name=courier_killed_events,json=courierKilledEvents" json:"courier_killed_events,omitempty"`
	RoshanKilledEvents  []*CMsgBotWorldState_EventRoshanKilled  `protobuf:"bytes,23,rep,name=roshan_killed_events,json=roshanKilledEvents" json:"roshan_killed_events,omitempty"`
	TreeEvents          []*CMsgBotWorldState_EventTree          `protobuf:"bytes,24,rep,name=tree_events,json=treeEvents" json:"tree_events,omitempty"`
}

func (x *CMsgBotWorldState) Reset() {
	*x = CMsgBotWorldState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState) ProtoMessage() {}

func (x *CMsgBotWorldState) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgBotWorldState) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgBotWorldState) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgBotWorldState) GetDotaTime() float32 {
	if x != nil && x.DotaTime != nil {
		return *x.DotaTime
	}
	return 0
}

func (x *CMsgBotWorldState) GetGameState() uint32 {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return 0
}

func (x *CMsgBotWorldState) GetHeroPickState() uint32 {
	if x != nil && x.HeroPickState != nil {
		return *x.HeroPickState
	}
	return 0
}

func (x *CMsgBotWorldState) GetTimeOfDay() float32 {
	if x != nil && x.TimeOfDay != nil {
		return *x.TimeOfDay
	}
	return 0
}

func (x *CMsgBotWorldState) GetGlyphCooldown() float32 {
	if x != nil && x.GlyphCooldown != nil {
		return *x.GlyphCooldown
	}
	return 0
}

func (x *CMsgBotWorldState) GetGlyphCooldownEnemy() uint32 {
	if x != nil && x.GlyphCooldownEnemy != nil {
		return *x.GlyphCooldownEnemy
	}
	return 0
}

func (x *CMsgBotWorldState) GetPlayers() []*CMsgBotWorldState_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgBotWorldState) GetUnits() []*CMsgBotWorldState_Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState) GetDroppedItems() []*CMsgBotWorldState_DroppedItem {
	if x != nil {
		return x.DroppedItems
	}
	return nil
}

func (x *CMsgBotWorldState) GetDroppedItemsDeltas() []int32 {
	if x != nil {
		return x.DroppedItemsDeltas
	}
	return nil
}

func (x *CMsgBotWorldState) GetRuneInfos() []*CMsgBotWorldState_RuneInfo {
	if x != nil {
		return x.RuneInfos
	}
	return nil
}

func (x *CMsgBotWorldState) GetRuneInfosDeltas() []int32 {
	if x != nil {
		return x.RuneInfosDeltas
	}
	return nil
}

func (x *CMsgBotWorldState) GetIncomingTeleports() []*CMsgBotWorldState_TeleportInfo {
	if x != nil {
		return x.IncomingTeleports
	}
	return nil
}

func (x *CMsgBotWorldState) GetLinearProjectiles() []*CMsgBotWorldState_LinearProjectile {
	if x != nil {
		return x.LinearProjectiles
	}
	return nil
}

func (x *CMsgBotWorldState) GetAvoidanceZones() []*CMsgBotWorldState_AvoidanceZone {
	if x != nil {
		return x.AvoidanceZones
	}
	return nil
}

func (x *CMsgBotWorldState) GetCouriers() []*CMsgBotWorldState_Courier {
	if x != nil {
		return x.Couriers
	}
	return nil
}

func (x *CMsgBotWorldState) GetAbilityEvents() []*CMsgBotWorldState_EventAbility {
	if x != nil {
		return x.AbilityEvents
	}
	return nil
}

func (x *CMsgBotWorldState) GetDamageEvents() []*CMsgBotWorldState_EventDamage {
	if x != nil {
		return x.DamageEvents
	}
	return nil
}

func (x *CMsgBotWorldState) GetCourierKilledEvents() []*CMsgBotWorldState_EventCourierKilled {
	if x != nil {
		return x.CourierKilledEvents
	}
	return nil
}

func (x *CMsgBotWorldState) GetRoshanKilledEvents() []*CMsgBotWorldState_EventRoshanKilled {
	if x != nil {
		return x.RoshanKilledEvents
	}
	return nil
}

func (x *CMsgBotWorldState) GetTreeEvents() []*CMsgBotWorldState_EventTree {
	if x != nil {
		return x.TreeEvents
	}
	return nil
}

type CMsgBotWorldState_Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (x *CMsgBotWorldState_Vector) Reset() {
	*x = CMsgBotWorldState_Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Vector) ProtoMessage() {}

func (x *CMsgBotWorldState_Vector) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Vector.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Vector) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgBotWorldState_Vector) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgBotWorldState_Vector) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgBotWorldState_Vector) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgBotWorldState_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    *int32   `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	HeroId      *uint32  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	IsAlive     *bool    `protobuf:"varint,3,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
	RespawnTime *float32 `protobuf:"fixed32,4,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	Kills       *uint32  `protobuf:"varint,5,opt,name=kills" json:"kills,omitempty"`
	Deaths      *uint32  `protobuf:"varint,6,opt,name=deaths" json:"deaths,omitempty"`
	Assists     *uint32  `protobuf:"varint,7,opt,name=assists" json:"assists,omitempty"`
	TeamId      *uint32  `protobuf:"varint,8,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
}

func (x *CMsgBotWorldState_Player) Reset() {
	*x = CMsgBotWorldState_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Player) ProtoMessage() {}

func (x *CMsgBotWorldState_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Player.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Player) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CMsgBotWorldState_Player) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetIsAlive() bool {
	if x != nil && x.IsAlive != nil {
		return *x.IsAlive
	}
	return false
}

func (x *CMsgBotWorldState_Player) GetRespawnTime() float32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetDeaths() uint32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetAssists() uint32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMsgBotWorldState_Player) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgBotWorldState_Ability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle            *uint32  `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	AbilityId         *uint32  `protobuf:"varint,2,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Slot              *uint32  `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	CasterHandle      *uint32  `protobuf:"varint,5,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	Level             *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	CastRange         *uint32  `protobuf:"varint,10,opt,name=cast_range,json=castRange" json:"cast_range,omitempty"`
	ChannelTime       *float32 `protobuf:"fixed32,11,opt,name=channel_time,json=channelTime" json:"channel_time,omitempty"`
	CooldownRemaining *float32 `protobuf:"fixed32,12,opt,name=cooldown_remaining,json=cooldownRemaining,def=0" json:"cooldown_remaining,omitempty"`
	IsActivated       *bool    `protobuf:"varint,20,opt,name=is_activated,json=isActivated" json:"is_activated,omitempty"`
	IsToggled         *bool    `protobuf:"varint,21,opt,name=is_toggled,json=isToggled" json:"is_toggled,omitempty"`
	IsInAbilityPhase  *bool    `protobuf:"varint,22,opt,name=is_in_ability_phase,json=isInAbilityPhase" json:"is_in_ability_phase,omitempty"`
	IsChanneling      *bool    `protobuf:"varint,23,opt,name=is_channeling,json=isChanneling" json:"is_channeling,omitempty"`
	IsStolen          *bool    `protobuf:"varint,24,opt,name=is_stolen,json=isStolen" json:"is_stolen,omitempty"`
	IsFullyCastable   *bool    `protobuf:"varint,25,opt,name=is_fully_castable,json=isFullyCastable" json:"is_fully_castable,omitempty"`
	Charges           *uint32  `protobuf:"varint,30,opt,name=charges" json:"charges,omitempty"`
	SecondaryCharges  *uint32  `protobuf:"varint,31,opt,name=secondary_charges,json=secondaryCharges" json:"secondary_charges,omitempty"`
	IsCombinedLocked  *bool    `protobuf:"varint,40,opt,name=is_combined_locked,json=isCombinedLocked" json:"is_combined_locked,omitempty"`
	PowerTreadsStat   *int32   `protobuf:"varint,50,opt,name=power_treads_stat,json=powerTreadsStat,def=-1" json:"power_treads_stat,omitempty"`
}

// Default values for CMsgBotWorldState_Ability fields.
const (
	Default_CMsgBotWorldState_Ability_CooldownRemaining = float32(0)
	Default_CMsgBotWorldState_Ability_PowerTreadsStat   = int32(-1)
)

func (x *CMsgBotWorldState_Ability) Reset() {
	*x = CMsgBotWorldState_Ability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Ability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Ability) ProtoMessage() {}

func (x *CMsgBotWorldState_Ability) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Ability.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Ability) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CMsgBotWorldState_Ability) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetCasterHandle() uint32 {
	if x != nil && x.CasterHandle != nil {
		return *x.CasterHandle
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetCastRange() uint32 {
	if x != nil && x.CastRange != nil {
		return *x.CastRange
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetChannelTime() float32 {
	if x != nil && x.ChannelTime != nil {
		return *x.ChannelTime
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetCooldownRemaining() float32 {
	if x != nil && x.CooldownRemaining != nil {
		return *x.CooldownRemaining
	}
	return Default_CMsgBotWorldState_Ability_CooldownRemaining
}

func (x *CMsgBotWorldState_Ability) GetIsActivated() bool {
	if x != nil && x.IsActivated != nil {
		return *x.IsActivated
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetIsToggled() bool {
	if x != nil && x.IsToggled != nil {
		return *x.IsToggled
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetIsInAbilityPhase() bool {
	if x != nil && x.IsInAbilityPhase != nil {
		return *x.IsInAbilityPhase
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetIsChanneling() bool {
	if x != nil && x.IsChanneling != nil {
		return *x.IsChanneling
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetIsStolen() bool {
	if x != nil && x.IsStolen != nil {
		return *x.IsStolen
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetIsFullyCastable() bool {
	if x != nil && x.IsFullyCastable != nil {
		return *x.IsFullyCastable
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetCharges() uint32 {
	if x != nil && x.Charges != nil {
		return *x.Charges
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetSecondaryCharges() uint32 {
	if x != nil && x.SecondaryCharges != nil {
		return *x.SecondaryCharges
	}
	return 0
}

func (x *CMsgBotWorldState_Ability) GetIsCombinedLocked() bool {
	if x != nil && x.IsCombinedLocked != nil {
		return *x.IsCombinedLocked
	}
	return false
}

func (x *CMsgBotWorldState_Ability) GetPowerTreadsStat() int32 {
	if x != nil && x.PowerTreadsStat != nil {
		return *x.PowerTreadsStat
	}
	return Default_CMsgBotWorldState_Ability_PowerTreadsStat
}

type CMsgBotWorldState_DroppedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   *uint32                   `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Location *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (x *CMsgBotWorldState_DroppedItem) Reset() {
	*x = CMsgBotWorldState_DroppedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_DroppedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_DroppedItem) ProtoMessage() {}

func (x *CMsgBotWorldState_DroppedItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_DroppedItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_DroppedItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CMsgBotWorldState_DroppedItem) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgBotWorldState_DroppedItem) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

type CMsgBotWorldState_RuneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *int32                    `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Location      *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Status        *uint32                   `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	TimeSinceSeen *float32                  `protobuf:"fixed32,4,opt,name=time_since_seen,json=timeSinceSeen" json:"time_since_seen,omitempty"`
}

func (x *CMsgBotWorldState_RuneInfo) Reset() {
	*x = CMsgBotWorldState_RuneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_RuneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_RuneInfo) ProtoMessage() {}

func (x *CMsgBotWorldState_RuneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_RuneInfo.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_RuneInfo) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CMsgBotWorldState_RuneInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgBotWorldState_RuneInfo) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_RuneInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CMsgBotWorldState_RuneInfo) GetTimeSinceSeen() float32 {
	if x != nil && x.TimeSinceSeen != nil {
		return *x.TimeSinceSeen
	}
	return 0
}

type CMsgBotWorldState_TeleportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      *int32                    `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Location      *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	TimeRemaining *float32                  `protobuf:"fixed32,3,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (x *CMsgBotWorldState_TeleportInfo) Reset() {
	*x = CMsgBotWorldState_TeleportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_TeleportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_TeleportInfo) ProtoMessage() {}

func (x *CMsgBotWorldState_TeleportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_TeleportInfo.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_TeleportInfo) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CMsgBotWorldState_TeleportInfo) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_TeleportInfo) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_TeleportInfo) GetTimeRemaining() float32 {
	if x != nil && x.TimeRemaining != nil {
		return *x.TimeRemaining
	}
	return 0
}

type CMsgBotWorldState_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle                *uint32  `protobuf:"varint,7,opt,name=handle" json:"handle,omitempty"`
	Name                  *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StackCount            *uint32  `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	AbilityHandle         *uint32  `protobuf:"varint,3,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId             *uint32  `protobuf:"varint,4,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	RemainingDuration     *float32 `protobuf:"fixed32,5,opt,name=remaining_duration,json=remainingDuration" json:"remaining_duration,omitempty"`
	AuxiliaryUnitsHandles []uint32 `protobuf:"varint,6,rep,name=auxiliary_units_handles,json=auxiliaryUnitsHandles" json:"auxiliary_units_handles,omitempty"`
}

func (x *CMsgBotWorldState_Modifier) Reset() {
	*x = CMsgBotWorldState_Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Modifier) ProtoMessage() {}

func (x *CMsgBotWorldState_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Modifier.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Modifier) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CMsgBotWorldState_Modifier) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_Modifier) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBotWorldState_Modifier) GetStackCount() uint32 {
	if x != nil && x.StackCount != nil {
		return *x.StackCount
	}
	return 0
}

func (x *CMsgBotWorldState_Modifier) GetAbilityHandle() uint32 {
	if x != nil && x.AbilityHandle != nil {
		return *x.AbilityHandle
	}
	return 0
}

func (x *CMsgBotWorldState_Modifier) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_Modifier) GetRemainingDuration() float32 {
	if x != nil && x.RemainingDuration != nil {
		return *x.RemainingDuration
	}
	return 0
}

func (x *CMsgBotWorldState_Modifier) GetAuxiliaryUnitsHandles() []uint32 {
	if x != nil {
		return x.AuxiliaryUnitsHandles
	}
	return nil
}

type CMsgBotWorldState_LinearProjectile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle         *uint32                     `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	CasterHandle   *uint32                     `protobuf:"varint,2,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterUnitType *CMsgBotWorldState_UnitType `protobuf:"varint,9,opt,name=caster_unit_type,json=casterUnitType,enum=dota2.CMsgBotWorldState_UnitType,def=0" json:"caster_unit_type,omitempty"`
	CasterPlayerId *int32                      `protobuf:"varint,3,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle  *uint32                     `protobuf:"varint,4,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId      *uint32                     `protobuf:"varint,5,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Location       *CMsgBotWorldState_Vector   `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	Velocity       *CMsgBotWorldState_Vector   `protobuf:"bytes,7,opt,name=velocity" json:"velocity,omitempty"`
	Radius         *uint32                     `protobuf:"varint,8,opt,name=radius" json:"radius,omitempty"`
}

// Default values for CMsgBotWorldState_LinearProjectile fields.
const (
	Default_CMsgBotWorldState_LinearProjectile_CasterUnitType = CMsgBotWorldState_INVALID
)

func (x *CMsgBotWorldState_LinearProjectile) Reset() {
	*x = CMsgBotWorldState_LinearProjectile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_LinearProjectile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_LinearProjectile) ProtoMessage() {}

func (x *CMsgBotWorldState_LinearProjectile) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_LinearProjectile.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_LinearProjectile) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 7}
}

func (x *CMsgBotWorldState_LinearProjectile) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_LinearProjectile) GetCasterHandle() uint32 {
	if x != nil && x.CasterHandle != nil {
		return *x.CasterHandle
	}
	return 0
}

func (x *CMsgBotWorldState_LinearProjectile) GetCasterUnitType() CMsgBotWorldState_UnitType {
	if x != nil && x.CasterUnitType != nil {
		return *x.CasterUnitType
	}
	return Default_CMsgBotWorldState_LinearProjectile_CasterUnitType
}

func (x *CMsgBotWorldState_LinearProjectile) GetCasterPlayerId() int32 {
	if x != nil && x.CasterPlayerId != nil {
		return *x.CasterPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_LinearProjectile) GetAbilityHandle() uint32 {
	if x != nil && x.AbilityHandle != nil {
		return *x.AbilityHandle
	}
	return 0
}

func (x *CMsgBotWorldState_LinearProjectile) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_LinearProjectile) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_LinearProjectile) GetVelocity() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *CMsgBotWorldState_LinearProjectile) GetRadius() uint32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type CMsgBotWorldState_TrackingProjectile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle         *uint32                     `protobuf:"varint,10,opt,name=handle" json:"handle,omitempty"`
	CasterHandle   *uint32                     `protobuf:"varint,1,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterUnitType *CMsgBotWorldState_UnitType `protobuf:"varint,9,opt,name=caster_unit_type,json=casterUnitType,enum=dota2.CMsgBotWorldState_UnitType,def=0" json:"caster_unit_type,omitempty"`
	CasterPlayerId *int32                      `protobuf:"varint,2,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle  *uint32                     `protobuf:"varint,3,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId      *uint32                     `protobuf:"varint,4,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Location       *CMsgBotWorldState_Vector   `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Velocity       *uint32                     `protobuf:"varint,6,opt,name=velocity" json:"velocity,omitempty"`
	IsDodgeable    *bool                       `protobuf:"varint,7,opt,name=is_dodgeable,json=isDodgeable" json:"is_dodgeable,omitempty"`
	IsAttack       *bool                       `protobuf:"varint,8,opt,name=is_attack,json=isAttack" json:"is_attack,omitempty"`
}

// Default values for CMsgBotWorldState_TrackingProjectile fields.
const (
	Default_CMsgBotWorldState_TrackingProjectile_CasterUnitType = CMsgBotWorldState_INVALID
)

func (x *CMsgBotWorldState_TrackingProjectile) Reset() {
	*x = CMsgBotWorldState_TrackingProjectile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_TrackingProjectile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_TrackingProjectile) ProtoMessage() {}

func (x *CMsgBotWorldState_TrackingProjectile) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_TrackingProjectile.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_TrackingProjectile) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 8}
}

func (x *CMsgBotWorldState_TrackingProjectile) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetCasterHandle() uint32 {
	if x != nil && x.CasterHandle != nil {
		return *x.CasterHandle
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetCasterUnitType() CMsgBotWorldState_UnitType {
	if x != nil && x.CasterUnitType != nil {
		return *x.CasterUnitType
	}
	return Default_CMsgBotWorldState_TrackingProjectile_CasterUnitType
}

func (x *CMsgBotWorldState_TrackingProjectile) GetCasterPlayerId() int32 {
	if x != nil && x.CasterPlayerId != nil {
		return *x.CasterPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetAbilityHandle() uint32 {
	if x != nil && x.AbilityHandle != nil {
		return *x.AbilityHandle
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_TrackingProjectile) GetVelocity() uint32 {
	if x != nil && x.Velocity != nil {
		return *x.Velocity
	}
	return 0
}

func (x *CMsgBotWorldState_TrackingProjectile) GetIsDodgeable() bool {
	if x != nil && x.IsDodgeable != nil {
		return *x.IsDodgeable
	}
	return false
}

func (x *CMsgBotWorldState_TrackingProjectile) GetIsAttack() bool {
	if x != nil && x.IsAttack != nil {
		return *x.IsAttack
	}
	return false
}

type CMsgBotWorldState_AvoidanceZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location       *CMsgBotWorldState_Vector   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	CasterHandle   *uint32                     `protobuf:"varint,2,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterUnitType *CMsgBotWorldState_UnitType `protobuf:"varint,7,opt,name=caster_unit_type,json=casterUnitType,enum=dota2.CMsgBotWorldState_UnitType,def=0" json:"caster_unit_type,omitempty"`
	CasterPlayerId *int32                      `protobuf:"varint,3,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle  *uint32                     `protobuf:"varint,4,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId      *uint32                     `protobuf:"varint,5,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Radius         *uint32                     `protobuf:"varint,6,opt,name=radius" json:"radius,omitempty"`
}

// Default values for CMsgBotWorldState_AvoidanceZone fields.
const (
	Default_CMsgBotWorldState_AvoidanceZone_CasterUnitType = CMsgBotWorldState_INVALID
)

func (x *CMsgBotWorldState_AvoidanceZone) Reset() {
	*x = CMsgBotWorldState_AvoidanceZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_AvoidanceZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_AvoidanceZone) ProtoMessage() {}

func (x *CMsgBotWorldState_AvoidanceZone) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_AvoidanceZone.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_AvoidanceZone) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 9}
}

func (x *CMsgBotWorldState_AvoidanceZone) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_AvoidanceZone) GetCasterHandle() uint32 {
	if x != nil && x.CasterHandle != nil {
		return *x.CasterHandle
	}
	return 0
}

func (x *CMsgBotWorldState_AvoidanceZone) GetCasterUnitType() CMsgBotWorldState_UnitType {
	if x != nil && x.CasterUnitType != nil {
		return *x.CasterUnitType
	}
	return Default_CMsgBotWorldState_AvoidanceZone_CasterUnitType
}

func (x *CMsgBotWorldState_AvoidanceZone) GetCasterPlayerId() int32 {
	if x != nil && x.CasterPlayerId != nil {
		return *x.CasterPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_AvoidanceZone) GetAbilityHandle() uint32 {
	if x != nil && x.AbilityHandle != nil {
		return *x.AbilityHandle
	}
	return 0
}

func (x *CMsgBotWorldState_AvoidanceZone) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_AvoidanceZone) GetRadius() uint32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type CMsgBotWorldState_Courier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle   *uint32                         `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	State    *CMsgBotWorldState_CourierState `protobuf:"varint,2,opt,name=state,enum=dota2.CMsgBotWorldState_CourierState,def=-1" json:"state,omitempty"`
	PlayerId *int32                          `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

// Default values for CMsgBotWorldState_Courier fields.
const (
	Default_CMsgBotWorldState_Courier_State = CMsgBotWorldState_COURIER_STATE_INIT
)

func (x *CMsgBotWorldState_Courier) Reset() {
	*x = CMsgBotWorldState_Courier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Courier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Courier) ProtoMessage() {}

func (x *CMsgBotWorldState_Courier) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Courier.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Courier) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 10}
}

func (x *CMsgBotWorldState_Courier) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_Courier) GetState() CMsgBotWorldState_CourierState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CMsgBotWorldState_Courier_State
}

func (x *CMsgBotWorldState_Courier) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type CMsgBotWorldState_EventAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId      *uint32                   `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	PlayerId       *int32                    `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	UnitHandle     *uint32                   `protobuf:"varint,3,opt,name=unit_handle,json=unitHandle" json:"unit_handle,omitempty"`
	Location       *CMsgBotWorldState_Vector `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	IsChannelStart *bool                     `protobuf:"varint,5,opt,name=is_channel_start,json=isChannelStart" json:"is_channel_start,omitempty"`
}

func (x *CMsgBotWorldState_EventAbility) Reset() {
	*x = CMsgBotWorldState_EventAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_EventAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_EventAbility) ProtoMessage() {}

func (x *CMsgBotWorldState_EventAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_EventAbility.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_EventAbility) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 11}
}

func (x *CMsgBotWorldState_EventAbility) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgBotWorldState_EventAbility) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_EventAbility) GetUnitHandle() uint32 {
	if x != nil && x.UnitHandle != nil {
		return *x.UnitHandle
	}
	return 0
}

func (x *CMsgBotWorldState_EventAbility) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_EventAbility) GetIsChannelStart() bool {
	if x != nil && x.IsChannelStart != nil {
		return *x.IsChannelStart
	}
	return false
}

type CMsgBotWorldState_EventDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Damage             *uint32 `protobuf:"varint,1,opt,name=damage" json:"damage,omitempty"`
	VictimPlayerId     *int32  `protobuf:"varint,2,opt,name=victim_player_id,json=victimPlayerId" json:"victim_player_id,omitempty"`
	VictimUnitHandle   *uint32 `protobuf:"varint,3,opt,name=victim_unit_handle,json=victimUnitHandle" json:"victim_unit_handle,omitempty"`
	AttackerPlayerId   *int32  `protobuf:"varint,4,opt,name=attacker_player_id,json=attackerPlayerId" json:"attacker_player_id,omitempty"`
	AttackerUnitHandle *uint32 `protobuf:"varint,5,opt,name=attacker_unit_handle,json=attackerUnitHandle" json:"attacker_unit_handle,omitempty"`
	AbilityId          *uint32 `protobuf:"varint,6,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
}

func (x *CMsgBotWorldState_EventDamage) Reset() {
	*x = CMsgBotWorldState_EventDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_EventDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_EventDamage) ProtoMessage() {}

func (x *CMsgBotWorldState_EventDamage) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_EventDamage.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_EventDamage) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 12}
}

func (x *CMsgBotWorldState_EventDamage) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CMsgBotWorldState_EventDamage) GetVictimPlayerId() int32 {
	if x != nil && x.VictimPlayerId != nil {
		return *x.VictimPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_EventDamage) GetVictimUnitHandle() uint32 {
	if x != nil && x.VictimUnitHandle != nil {
		return *x.VictimUnitHandle
	}
	return 0
}

func (x *CMsgBotWorldState_EventDamage) GetAttackerPlayerId() int32 {
	if x != nil && x.AttackerPlayerId != nil {
		return *x.AttackerPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_EventDamage) GetAttackerUnitHandle() uint32 {
	if x != nil && x.AttackerUnitHandle != nil {
		return *x.AttackerUnitHandle
	}
	return 0
}

func (x *CMsgBotWorldState_EventDamage) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

type CMsgBotWorldState_EventCourierKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId            *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	CourierUnitHandle *uint32 `protobuf:"varint,2,opt,name=courier_unit_handle,json=courierUnitHandle" json:"courier_unit_handle,omitempty"`
	KillerPlayerId    *int32  `protobuf:"varint,3,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
	KillerUnitHandle  *uint32 `protobuf:"varint,4,opt,name=killer_unit_handle,json=killerUnitHandle" json:"killer_unit_handle,omitempty"`
}

func (x *CMsgBotWorldState_EventCourierKilled) Reset() {
	*x = CMsgBotWorldState_EventCourierKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_EventCourierKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_EventCourierKilled) ProtoMessage() {}

func (x *CMsgBotWorldState_EventCourierKilled) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_EventCourierKilled.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_EventCourierKilled) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 13}
}

func (x *CMsgBotWorldState_EventCourierKilled) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgBotWorldState_EventCourierKilled) GetCourierUnitHandle() uint32 {
	if x != nil && x.CourierUnitHandle != nil {
		return *x.CourierUnitHandle
	}
	return 0
}

func (x *CMsgBotWorldState_EventCourierKilled) GetKillerPlayerId() int32 {
	if x != nil && x.KillerPlayerId != nil {
		return *x.KillerPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_EventCourierKilled) GetKillerUnitHandle() uint32 {
	if x != nil && x.KillerUnitHandle != nil {
		return *x.KillerUnitHandle
	}
	return 0
}

type CMsgBotWorldState_EventRoshanKilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillerPlayerId   *int32  `protobuf:"varint,1,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
	KillerUnitHandle *uint32 `protobuf:"varint,2,opt,name=killer_unit_handle,json=killerUnitHandle" json:"killer_unit_handle,omitempty"`
}

func (x *CMsgBotWorldState_EventRoshanKilled) Reset() {
	*x = CMsgBotWorldState_EventRoshanKilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_EventRoshanKilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_EventRoshanKilled) ProtoMessage() {}

func (x *CMsgBotWorldState_EventRoshanKilled) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_EventRoshanKilled.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_EventRoshanKilled) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 14}
}

func (x *CMsgBotWorldState_EventRoshanKilled) GetKillerPlayerId() int32 {
	if x != nil && x.KillerPlayerId != nil {
		return *x.KillerPlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_EventRoshanKilled) GetKillerUnitHandle() uint32 {
	if x != nil && x.KillerUnitHandle != nil {
		return *x.KillerUnitHandle
	}
	return 0
}

type CMsgBotWorldState_EventTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeId    *uint32                   `protobuf:"varint,1,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Destroyed *bool                     `protobuf:"varint,2,opt,name=destroyed" json:"destroyed,omitempty"`
	Respawned *bool                     `protobuf:"varint,3,opt,name=respawned" json:"respawned,omitempty"`
	Location  *CMsgBotWorldState_Vector `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Delayed   *bool                     `protobuf:"varint,5,opt,name=delayed" json:"delayed,omitempty"`
}

func (x *CMsgBotWorldState_EventTree) Reset() {
	*x = CMsgBotWorldState_EventTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_EventTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_EventTree) ProtoMessage() {}

func (x *CMsgBotWorldState_EventTree) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_EventTree.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_EventTree) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 15}
}

func (x *CMsgBotWorldState_EventTree) GetTreeId() uint32 {
	if x != nil && x.TreeId != nil {
		return *x.TreeId
	}
	return 0
}

func (x *CMsgBotWorldState_EventTree) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

func (x *CMsgBotWorldState_EventTree) GetRespawned() bool {
	if x != nil && x.Respawned != nil {
		return *x.Respawned
	}
	return false
}

func (x *CMsgBotWorldState_EventTree) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_EventTree) GetDelayed() bool {
	if x != nil && x.Delayed != nil {
		return *x.Delayed
	}
	return false
}

type CMsgBotWorldState_Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle                      *uint32                                 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	UnitType                    *CMsgBotWorldState_UnitType             `protobuf:"varint,2,opt,name=unit_type,json=unitType,enum=dota2.CMsgBotWorldState_UnitType,def=0" json:"unit_type,omitempty"`
	Name                        *string                                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	TeamId                      *uint32                                 `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Level                       *uint32                                 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
	Location                    *CMsgBotWorldState_Vector               `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	IsAlive                     *bool                                   `protobuf:"varint,7,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
	PlayerId                    *int32                                  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	BoundingRadius              *int32                                  `protobuf:"varint,10,opt,name=bounding_radius,json=boundingRadius" json:"bounding_radius,omitempty"`
	Facing                      *int32                                  `protobuf:"varint,11,opt,name=facing" json:"facing,omitempty"`
	GroundHeight                *uint32                                 `protobuf:"varint,12,opt,name=ground_height,json=groundHeight" json:"ground_height,omitempty"`
	VisionRangeDaytime          *uint32                                 `protobuf:"varint,15,opt,name=vision_range_daytime,json=visionRangeDaytime" json:"vision_range_daytime,omitempty"`
	VisionRangeNighttime        *uint32                                 `protobuf:"varint,16,opt,name=vision_range_nighttime,json=visionRangeNighttime" json:"vision_range_nighttime,omitempty"`
	Health                      *int32                                  `protobuf:"varint,20,opt,name=health" json:"health,omitempty"`
	HealthMax                   *int32                                  `protobuf:"varint,21,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	HealthRegen                 *float32                                `protobuf:"fixed32,22,opt,name=health_regen,json=healthRegen" json:"health_regen,omitempty"`
	Mana                        *int32                                  `protobuf:"varint,25,opt,name=mana" json:"mana,omitempty"`
	ManaMax                     *int32                                  `protobuf:"varint,26,opt,name=mana_max,json=manaMax" json:"mana_max,omitempty"`
	ManaRegen                   *float32                                `protobuf:"fixed32,27,opt,name=mana_regen,json=manaRegen" json:"mana_regen,omitempty"`
	BaseMovementSpeed           *int32                                  `protobuf:"varint,30,opt,name=base_movement_speed,json=baseMovementSpeed" json:"base_movement_speed,omitempty"`
	CurrentMovementSpeed        *int32                                  `protobuf:"varint,31,opt,name=current_movement_speed,json=currentMovementSpeed" json:"current_movement_speed,omitempty"`
	AnimActivity                *int32                                  `protobuf:"varint,35,opt,name=anim_activity,json=animActivity" json:"anim_activity,omitempty"`
	AnimCycle                   *float32                                `protobuf:"fixed32,36,opt,name=anim_cycle,json=animCycle" json:"anim_cycle,omitempty"`
	BaseDamage                  *int32                                  `protobuf:"varint,40,opt,name=base_damage,json=baseDamage" json:"base_damage,omitempty"`
	BaseDamageVariance          *int32                                  `protobuf:"varint,41,opt,name=base_damage_variance,json=baseDamageVariance" json:"base_damage_variance,omitempty"`
	BonusDamage                 *int32                                  `protobuf:"varint,42,opt,name=bonus_damage,json=bonusDamage" json:"bonus_damage,omitempty"`
	AttackDamage                *int32                                  `protobuf:"varint,43,opt,name=attack_damage,json=attackDamage" json:"attack_damage,omitempty"`
	AttackRange                 *int32                                  `protobuf:"varint,44,opt,name=attack_range,json=attackRange" json:"attack_range,omitempty"`
	AttackSpeed                 *float32                                `protobuf:"fixed32,45,opt,name=attack_speed,json=attackSpeed" json:"attack_speed,omitempty"`
	AttackAnimPoint             *float32                                `protobuf:"fixed32,46,opt,name=attack_anim_point,json=attackAnimPoint" json:"attack_anim_point,omitempty"`
	AttackAcquisitionRange      *int32                                  `protobuf:"varint,47,opt,name=attack_acquisition_range,json=attackAcquisitionRange" json:"attack_acquisition_range,omitempty"`
	AttackProjectileSpeed       *int32                                  `protobuf:"varint,48,opt,name=attack_projectile_speed,json=attackProjectileSpeed" json:"attack_projectile_speed,omitempty"`
	AttackTargetHandle          *uint32                                 `protobuf:"varint,49,opt,name=attack_target_handle,json=attackTargetHandle" json:"attack_target_handle,omitempty"`
	AttackTargetName            *string                                 `protobuf:"bytes,52,opt,name=attack_target_name,json=attackTargetName" json:"attack_target_name,omitempty"`
	AttacksPerSecond            *int32                                  `protobuf:"varint,50,opt,name=attacks_per_second,json=attacksPerSecond,def=-1" json:"attacks_per_second,omitempty"`
	LastAttackTime              *float32                                `protobuf:"fixed32,51,opt,name=last_attack_time,json=lastAttackTime,def=-1" json:"last_attack_time,omitempty"`
	BountyXp                    *uint32                                 `protobuf:"varint,60,opt,name=bounty_xp,json=bountyXp" json:"bounty_xp,omitempty"`
	BountyGoldMin               *uint32                                 `protobuf:"varint,61,opt,name=bounty_gold_min,json=bountyGoldMin" json:"bounty_gold_min,omitempty"`
	BountyGoldMax               *uint32                                 `protobuf:"varint,62,opt,name=bounty_gold_max,json=bountyGoldMax" json:"bounty_gold_max,omitempty"`
	IsChanneling                *bool                                   `protobuf:"varint,65,opt,name=is_channeling,json=isChanneling" json:"is_channeling,omitempty"`
	ActiveAbilityHandle         *uint32                                 `protobuf:"varint,66,opt,name=active_ability_handle,json=activeAbilityHandle" json:"active_ability_handle,omitempty"`
	IsAttackImmune              *bool                                   `protobuf:"varint,70,opt,name=is_attack_immune,json=isAttackImmune" json:"is_attack_immune,omitempty"`
	IsBlind                     *bool                                   `protobuf:"varint,71,opt,name=is_blind,json=isBlind" json:"is_blind,omitempty"`
	IsBlockDisabled             *bool                                   `protobuf:"varint,72,opt,name=is_block_disabled,json=isBlockDisabled" json:"is_block_disabled,omitempty"`
	IsDisarmed                  *bool                                   `protobuf:"varint,73,opt,name=is_disarmed,json=isDisarmed" json:"is_disarmed,omitempty"`
	IsDominated                 *bool                                   `protobuf:"varint,74,opt,name=is_dominated,json=isDominated" json:"is_dominated,omitempty"`
	IsEvadeDisabled             *bool                                   `protobuf:"varint,75,opt,name=is_evade_disabled,json=isEvadeDisabled" json:"is_evade_disabled,omitempty"`
	IsHexed                     *bool                                   `protobuf:"varint,76,opt,name=is_hexed,json=isHexed" json:"is_hexed,omitempty"`
	IsInvisible                 *bool                                   `protobuf:"varint,77,opt,name=is_invisible,json=isInvisible" json:"is_invisible,omitempty"`
	IsInvulnerable              *bool                                   `protobuf:"varint,78,opt,name=is_invulnerable,json=isInvulnerable" json:"is_invulnerable,omitempty"`
	IsMagicImmune               *bool                                   `protobuf:"varint,79,opt,name=is_magic_immune,json=isMagicImmune" json:"is_magic_immune,omitempty"`
	IsMuted                     *bool                                   `protobuf:"varint,80,opt,name=is_muted,json=isMuted" json:"is_muted,omitempty"`
	IsNightmared                *bool                                   `protobuf:"varint,82,opt,name=is_nightmared,json=isNightmared" json:"is_nightmared,omitempty"`
	IsRooted                    *bool                                   `protobuf:"varint,83,opt,name=is_rooted,json=isRooted" json:"is_rooted,omitempty"`
	IsSilenced                  *bool                                   `protobuf:"varint,84,opt,name=is_silenced,json=isSilenced" json:"is_silenced,omitempty"`
	IsSpeciallyDeniable         *bool                                   `protobuf:"varint,85,opt,name=is_specially_deniable,json=isSpeciallyDeniable" json:"is_specially_deniable,omitempty"`
	IsStunned                   *bool                                   `protobuf:"varint,86,opt,name=is_stunned,json=isStunned" json:"is_stunned,omitempty"`
	IsUnableToMiss              *bool                                   `protobuf:"varint,87,opt,name=is_unable_to_miss,json=isUnableToMiss" json:"is_unable_to_miss,omitempty"`
	HasScepter                  *bool                                   `protobuf:"varint,88,opt,name=has_scepter,json=hasScepter" json:"has_scepter,omitempty"`
	Abilities                   []*CMsgBotWorldState_Ability            `protobuf:"bytes,90,rep,name=abilities" json:"abilities,omitempty"`
	Items                       []*CMsgBotWorldState_Ability            `protobuf:"bytes,91,rep,name=items" json:"items,omitempty"`
	Modifiers                   []*CMsgBotWorldState_Modifier           `protobuf:"bytes,92,rep,name=modifiers" json:"modifiers,omitempty"`
	IncomingTrackingProjectiles []*CMsgBotWorldState_TrackingProjectile `protobuf:"bytes,93,rep,name=incoming_tracking_projectiles,json=incomingTrackingProjectiles" json:"incoming_tracking_projectiles,omitempty"`
	ActionType                  *uint32                                 `protobuf:"varint,100,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	AbilityTargetHandle         *uint32                                 `protobuf:"varint,101,opt,name=ability_target_handle,json=abilityTargetHandle" json:"ability_target_handle,omitempty"`
	AbilityTargetName           *string                                 `protobuf:"bytes,103,opt,name=ability_target_name,json=abilityTargetName" json:"ability_target_name,omitempty"`
	IsUsingAbility              *bool                                   `protobuf:"varint,102,opt,name=is_using_ability,json=isUsingAbility" json:"is_using_ability,omitempty"`
	PrimaryAttribute            *uint32                                 `protobuf:"varint,110,opt,name=primary_attribute,json=primaryAttribute" json:"primary_attribute,omitempty"`
	IsIllusion                  *bool                                   `protobuf:"varint,111,opt,name=is_illusion,json=isIllusion" json:"is_illusion,omitempty"`
	RespawnTime                 *float32                                `protobuf:"fixed32,112,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	BuybackCost                 *uint32                                 `protobuf:"varint,113,opt,name=buyback_cost,json=buybackCost" json:"buyback_cost,omitempty"`
	BuybackCooldown             *float32                                `protobuf:"fixed32,114,opt,name=buyback_cooldown,json=buybackCooldown" json:"buyback_cooldown,omitempty"`
	SpellAmplification          *float32                                `protobuf:"fixed32,115,opt,name=spell_amplification,json=spellAmplification" json:"spell_amplification,omitempty"`
	Armor                       *float32                                `protobuf:"fixed32,116,opt,name=armor" json:"armor,omitempty"`
	MagicResist                 *float32                                `protobuf:"fixed32,117,opt,name=magic_resist,json=magicResist" json:"magic_resist,omitempty"`
	Evasion                     *float32                                `protobuf:"fixed32,118,opt,name=evasion" json:"evasion,omitempty"`
	XpNeededToLevel             *uint32                                 `protobuf:"varint,120,opt,name=xp_needed_to_level,json=xpNeededToLevel" json:"xp_needed_to_level,omitempty"`
	AbilityPoints               *uint32                                 `protobuf:"varint,121,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	ReliableGold                *int32                                  `protobuf:"varint,122,opt,name=reliable_gold,json=reliableGold,def=-1" json:"reliable_gold,omitempty"`
	UnreliableGold              *int32                                  `protobuf:"varint,123,opt,name=unreliable_gold,json=unreliableGold,def=-1" json:"unreliable_gold,omitempty"`
	LastHits                    *uint32                                 `protobuf:"varint,124,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                      *uint32                                 `protobuf:"varint,125,opt,name=denies" json:"denies,omitempty"`
	NetWorth                    *uint32                                 `protobuf:"varint,126,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Strength                    *uint32                                 `protobuf:"varint,127,opt,name=strength" json:"strength,omitempty"`
	Agility                     *uint32                                 `protobuf:"varint,128,opt,name=agility" json:"agility,omitempty"`
	Intelligence                *uint32                                 `protobuf:"varint,129,opt,name=intelligence" json:"intelligence,omitempty"`
	RemainingLifespan           *float32                                `protobuf:"fixed32,130,opt,name=remaining_lifespan,json=remainingLifespan" json:"remaining_lifespan,omitempty"`
	FlyingCourier               *bool                                   `protobuf:"varint,140,opt,name=flying_courier,json=flyingCourier" json:"flying_courier,omitempty"`
	ShrineCooldown              *float32                                `protobuf:"fixed32,150,opt,name=shrine_cooldown,json=shrineCooldown" json:"shrine_cooldown,omitempty"`
	IsShrineHealing             *bool                                   `protobuf:"varint,151,opt,name=is_shrine_healing,json=isShrineHealing" json:"is_shrine_healing,omitempty"`
}

// Default values for CMsgBotWorldState_Unit fields.
const (
	Default_CMsgBotWorldState_Unit_UnitType         = CMsgBotWorldState_INVALID
	Default_CMsgBotWorldState_Unit_AttacksPerSecond = int32(-1)
	Default_CMsgBotWorldState_Unit_LastAttackTime   = float32(-1)
	Default_CMsgBotWorldState_Unit_ReliableGold     = int32(-1)
	Default_CMsgBotWorldState_Unit_UnreliableGold   = int32(-1)
)

func (x *CMsgBotWorldState_Unit) Reset() {
	*x = CMsgBotWorldState_Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Unit) ProtoMessage() {}

func (x *CMsgBotWorldState_Unit) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Unit.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Unit) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 16}
}

func (x *CMsgBotWorldState_Unit) GetHandle() uint32 {
	if x != nil && x.Handle != nil {
		return *x.Handle
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetUnitType() CMsgBotWorldState_UnitType {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return Default_CMsgBotWorldState_Unit_UnitType
}

func (x *CMsgBotWorldState_Unit) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBotWorldState_Unit) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CMsgBotWorldState_Unit) GetIsAlive() bool {
	if x != nil && x.IsAlive != nil {
		return *x.IsAlive
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBoundingRadius() int32 {
	if x != nil && x.BoundingRadius != nil {
		return *x.BoundingRadius
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetFacing() int32 {
	if x != nil && x.Facing != nil {
		return *x.Facing
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetGroundHeight() uint32 {
	if x != nil && x.GroundHeight != nil {
		return *x.GroundHeight
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetVisionRangeDaytime() uint32 {
	if x != nil && x.VisionRangeDaytime != nil {
		return *x.VisionRangeDaytime
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetVisionRangeNighttime() uint32 {
	if x != nil && x.VisionRangeNighttime != nil {
		return *x.VisionRangeNighttime
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetHealth() int32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetHealthMax() int32 {
	if x != nil && x.HealthMax != nil {
		return *x.HealthMax
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetHealthRegen() float32 {
	if x != nil && x.HealthRegen != nil {
		return *x.HealthRegen
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetMana() int32 {
	if x != nil && x.Mana != nil {
		return *x.Mana
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetManaMax() int32 {
	if x != nil && x.ManaMax != nil {
		return *x.ManaMax
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetManaRegen() float32 {
	if x != nil && x.ManaRegen != nil {
		return *x.ManaRegen
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBaseMovementSpeed() int32 {
	if x != nil && x.BaseMovementSpeed != nil {
		return *x.BaseMovementSpeed
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetCurrentMovementSpeed() int32 {
	if x != nil && x.CurrentMovementSpeed != nil {
		return *x.CurrentMovementSpeed
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAnimActivity() int32 {
	if x != nil && x.AnimActivity != nil {
		return *x.AnimActivity
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAnimCycle() float32 {
	if x != nil && x.AnimCycle != nil {
		return *x.AnimCycle
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBaseDamage() int32 {
	if x != nil && x.BaseDamage != nil {
		return *x.BaseDamage
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBaseDamageVariance() int32 {
	if x != nil && x.BaseDamageVariance != nil {
		return *x.BaseDamageVariance
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBonusDamage() int32 {
	if x != nil && x.BonusDamage != nil {
		return *x.BonusDamage
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackDamage() int32 {
	if x != nil && x.AttackDamage != nil {
		return *x.AttackDamage
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackRange() int32 {
	if x != nil && x.AttackRange != nil {
		return *x.AttackRange
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackSpeed() float32 {
	if x != nil && x.AttackSpeed != nil {
		return *x.AttackSpeed
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackAnimPoint() float32 {
	if x != nil && x.AttackAnimPoint != nil {
		return *x.AttackAnimPoint
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackAcquisitionRange() int32 {
	if x != nil && x.AttackAcquisitionRange != nil {
		return *x.AttackAcquisitionRange
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackProjectileSpeed() int32 {
	if x != nil && x.AttackProjectileSpeed != nil {
		return *x.AttackProjectileSpeed
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackTargetHandle() uint32 {
	if x != nil && x.AttackTargetHandle != nil {
		return *x.AttackTargetHandle
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAttackTargetName() string {
	if x != nil && x.AttackTargetName != nil {
		return *x.AttackTargetName
	}
	return ""
}

func (x *CMsgBotWorldState_Unit) GetAttacksPerSecond() int32 {
	if x != nil && x.AttacksPerSecond != nil {
		return *x.AttacksPerSecond
	}
	return Default_CMsgBotWorldState_Unit_AttacksPerSecond
}

func (x *CMsgBotWorldState_Unit) GetLastAttackTime() float32 {
	if x != nil && x.LastAttackTime != nil {
		return *x.LastAttackTime
	}
	return Default_CMsgBotWorldState_Unit_LastAttackTime
}

func (x *CMsgBotWorldState_Unit) GetBountyXp() uint32 {
	if x != nil && x.BountyXp != nil {
		return *x.BountyXp
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBountyGoldMin() uint32 {
	if x != nil && x.BountyGoldMin != nil {
		return *x.BountyGoldMin
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBountyGoldMax() uint32 {
	if x != nil && x.BountyGoldMax != nil {
		return *x.BountyGoldMax
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetIsChanneling() bool {
	if x != nil && x.IsChanneling != nil {
		return *x.IsChanneling
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetActiveAbilityHandle() uint32 {
	if x != nil && x.ActiveAbilityHandle != nil {
		return *x.ActiveAbilityHandle
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetIsAttackImmune() bool {
	if x != nil && x.IsAttackImmune != nil {
		return *x.IsAttackImmune
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsBlind() bool {
	if x != nil && x.IsBlind != nil {
		return *x.IsBlind
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsBlockDisabled() bool {
	if x != nil && x.IsBlockDisabled != nil {
		return *x.IsBlockDisabled
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsDisarmed() bool {
	if x != nil && x.IsDisarmed != nil {
		return *x.IsDisarmed
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsDominated() bool {
	if x != nil && x.IsDominated != nil {
		return *x.IsDominated
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsEvadeDisabled() bool {
	if x != nil && x.IsEvadeDisabled != nil {
		return *x.IsEvadeDisabled
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsHexed() bool {
	if x != nil && x.IsHexed != nil {
		return *x.IsHexed
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsInvisible() bool {
	if x != nil && x.IsInvisible != nil {
		return *x.IsInvisible
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsInvulnerable() bool {
	if x != nil && x.IsInvulnerable != nil {
		return *x.IsInvulnerable
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsMagicImmune() bool {
	if x != nil && x.IsMagicImmune != nil {
		return *x.IsMagicImmune
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsMuted() bool {
	if x != nil && x.IsMuted != nil {
		return *x.IsMuted
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsNightmared() bool {
	if x != nil && x.IsNightmared != nil {
		return *x.IsNightmared
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsRooted() bool {
	if x != nil && x.IsRooted != nil {
		return *x.IsRooted
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsSilenced() bool {
	if x != nil && x.IsSilenced != nil {
		return *x.IsSilenced
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsSpeciallyDeniable() bool {
	if x != nil && x.IsSpeciallyDeniable != nil {
		return *x.IsSpeciallyDeniable
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsStunned() bool {
	if x != nil && x.IsStunned != nil {
		return *x.IsStunned
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetIsUnableToMiss() bool {
	if x != nil && x.IsUnableToMiss != nil {
		return *x.IsUnableToMiss
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetHasScepter() bool {
	if x != nil && x.HasScepter != nil {
		return *x.HasScepter
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetAbilities() []*CMsgBotWorldState_Ability {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *CMsgBotWorldState_Unit) GetItems() []*CMsgBotWorldState_Ability {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgBotWorldState_Unit) GetModifiers() []*CMsgBotWorldState_Modifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *CMsgBotWorldState_Unit) GetIncomingTrackingProjectiles() []*CMsgBotWorldState_TrackingProjectile {
	if x != nil {
		return x.IncomingTrackingProjectiles
	}
	return nil
}

func (x *CMsgBotWorldState_Unit) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAbilityTargetHandle() uint32 {
	if x != nil && x.AbilityTargetHandle != nil {
		return *x.AbilityTargetHandle
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAbilityTargetName() string {
	if x != nil && x.AbilityTargetName != nil {
		return *x.AbilityTargetName
	}
	return ""
}

func (x *CMsgBotWorldState_Unit) GetIsUsingAbility() bool {
	if x != nil && x.IsUsingAbility != nil {
		return *x.IsUsingAbility
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetPrimaryAttribute() uint32 {
	if x != nil && x.PrimaryAttribute != nil {
		return *x.PrimaryAttribute
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetIsIllusion() bool {
	if x != nil && x.IsIllusion != nil {
		return *x.IsIllusion
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetRespawnTime() float32 {
	if x != nil && x.RespawnTime != nil {
		return *x.RespawnTime
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBuybackCost() uint32 {
	if x != nil && x.BuybackCost != nil {
		return *x.BuybackCost
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetBuybackCooldown() float32 {
	if x != nil && x.BuybackCooldown != nil {
		return *x.BuybackCooldown
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetSpellAmplification() float32 {
	if x != nil && x.SpellAmplification != nil {
		return *x.SpellAmplification
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetArmor() float32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetMagicResist() float32 {
	if x != nil && x.MagicResist != nil {
		return *x.MagicResist
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetEvasion() float32 {
	if x != nil && x.Evasion != nil {
		return *x.Evasion
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetXpNeededToLevel() uint32 {
	if x != nil && x.XpNeededToLevel != nil {
		return *x.XpNeededToLevel
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAbilityPoints() uint32 {
	if x != nil && x.AbilityPoints != nil {
		return *x.AbilityPoints
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetReliableGold() int32 {
	if x != nil && x.ReliableGold != nil {
		return *x.ReliableGold
	}
	return Default_CMsgBotWorldState_Unit_ReliableGold
}

func (x *CMsgBotWorldState_Unit) GetUnreliableGold() int32 {
	if x != nil && x.UnreliableGold != nil {
		return *x.UnreliableGold
	}
	return Default_CMsgBotWorldState_Unit_UnreliableGold
}

func (x *CMsgBotWorldState_Unit) GetLastHits() uint32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetDenies() uint32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetStrength() uint32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetAgility() uint32 {
	if x != nil && x.Agility != nil {
		return *x.Agility
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetIntelligence() uint32 {
	if x != nil && x.Intelligence != nil {
		return *x.Intelligence
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetRemainingLifespan() float32 {
	if x != nil && x.RemainingLifespan != nil {
		return *x.RemainingLifespan
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetFlyingCourier() bool {
	if x != nil && x.FlyingCourier != nil {
		return *x.FlyingCourier
	}
	return false
}

func (x *CMsgBotWorldState_Unit) GetShrineCooldown() float32 {
	if x != nil && x.ShrineCooldown != nil {
		return *x.ShrineCooldown
	}
	return 0
}

func (x *CMsgBotWorldState_Unit) GetIsShrineHealing() bool {
	if x != nil && x.IsShrineHealing != nil {
		return *x.IsShrineHealing
	}
	return false
}

type CMsgBotWorldState_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DotaTime        *float32                                   `protobuf:"fixed32,1,opt,name=dota_time,json=dotaTime,def=-100" json:"dota_time,omitempty"`
	Actions         []*CMsgBotWorldState_Action                `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	ExtraData       *string                                    `protobuf:"bytes,3,opt,name=extraData" json:"extraData,omitempty"`
	OceanAnnotation *CMsgBotWorldState_Actions_OceanAnnotation `protobuf:"bytes,4,opt,name=oceanAnnotation" json:"oceanAnnotation,omitempty"`
	Header          *CMsgBotWorldState_Actions_Header          `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

// Default values for CMsgBotWorldState_Actions fields.
const (
	Default_CMsgBotWorldState_Actions_DotaTime = float32(-100)
)

func (x *CMsgBotWorldState_Actions) Reset() {
	*x = CMsgBotWorldState_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Actions) ProtoMessage() {}

func (x *CMsgBotWorldState_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Actions.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Actions) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 17}
}

func (x *CMsgBotWorldState_Actions) GetDotaTime() float32 {
	if x != nil && x.DotaTime != nil {
		return *x.DotaTime
	}
	return Default_CMsgBotWorldState_Actions_DotaTime
}

func (x *CMsgBotWorldState_Actions) GetActions() []*CMsgBotWorldState_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CMsgBotWorldState_Actions) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

func (x *CMsgBotWorldState_Actions) GetOceanAnnotation() *CMsgBotWorldState_Actions_OceanAnnotation {
	if x != nil {
		return x.OceanAnnotation
	}
	return nil
}

func (x *CMsgBotWorldState_Actions) GetHeader() *CMsgBotWorldState_Actions_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type CMsgBotWorldState_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  *CMsgBotWorldState_Action_Type `protobuf:"varint,1,req,name=actionType,enum=dota2.CMsgBotWorldState_Action_Type,def=0" json:"actionType,omitempty"`
	Player      *int32                         `protobuf:"varint,2,opt,name=player,def=-1" json:"player,omitempty"`
	ActionID    *int32                         `protobuf:"varint,4,opt,name=actionID,def=-1" json:"actionID,omitempty"`
	ActionDelay *int32                         `protobuf:"varint,10,opt,name=actionDelay,def=0" json:"actionDelay,omitempty"`
	// Types that are assignable to ActionData:
	//	*CMsgBotWorldState_Action_MoveToLocation_
	//	*CMsgBotWorldState_Action_MoveToTarget_
	//	*CMsgBotWorldState_Action_AttackMove_
	//	*CMsgBotWorldState_Action_AttackTarget_
	//	*CMsgBotWorldState_Action_CastLocation_
	//	*CMsgBotWorldState_Action_CastTarget_
	//	*CMsgBotWorldState_Action_CastTree_
	//	*CMsgBotWorldState_Action_Cast_
	//	*CMsgBotWorldState_Action_CastToggle_
	//	*CMsgBotWorldState_Action_HoldLocation_
	//	*CMsgBotWorldState_Action_TrainAbility_
	//	*CMsgBotWorldState_Action_DropItem_
	//	*CMsgBotWorldState_Action_PickUpItem_
	//	*CMsgBotWorldState_Action_PickupRune_
	//	*CMsgBotWorldState_Action_PurchaseItem_
	//	*CMsgBotWorldState_Action_SellItem_
	//	*CMsgBotWorldState_Action_DisassembleItem_
	//	*CMsgBotWorldState_Action_SetCombineLockItem_
	//	*CMsgBotWorldState_Action_Stop_
	//	*CMsgBotWorldState_Action_Chat_
	//	*CMsgBotWorldState_Action_SwapItems_
	//	*CMsgBotWorldState_Action_UseShrine_
	//	*CMsgBotWorldState_Action_Courier_
	//	*CMsgBotWorldState_Action_GetActualIncomingDamage_
	//	*CMsgBotWorldState_Action_GetEstimatedDamageToTarget_
	//	*CMsgBotWorldState_Action_Glyph_
	//	*CMsgBotWorldState_Action_SoftReset_
	//	*CMsgBotWorldState_Action_Buyback_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawText_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawLine_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawBox_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawCircle_
	//	*CMsgBotWorldState_Action_ScriptingDebugDrawClear_
	//	*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_
	//	*CMsgBotWorldState_Action_MoveDirectly
	//	*CMsgBotWorldState_Action_OceanWinGame_
	//	*CMsgBotWorldState_Action_OceanReplayCorrectTime_
	ActionData isCMsgBotWorldState_Action_ActionData `protobuf_oneof:"ActionData"`
}

// Default values for CMsgBotWorldState_Action fields.
const (
	Default_CMsgBotWorldState_Action_ActionType  = CMsgBotWorldState_Action_DOTA_UNIT_ORDER_NONE
	Default_CMsgBotWorldState_Action_Player      = int32(-1)
	Default_CMsgBotWorldState_Action_ActionID    = int32(-1)
	Default_CMsgBotWorldState_Action_ActionDelay = int32(0)
)

func (x *CMsgBotWorldState_Action) Reset() {
	*x = CMsgBotWorldState_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action) ProtoMessage() {}

func (x *CMsgBotWorldState_Action) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18}
}

func (x *CMsgBotWorldState_Action) GetActionType() CMsgBotWorldState_Action_Type {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return Default_CMsgBotWorldState_Action_ActionType
}

func (x *CMsgBotWorldState_Action) GetPlayer() int32 {
	if x != nil && x.Player != nil {
		return *x.Player
	}
	return Default_CMsgBotWorldState_Action_Player
}

func (x *CMsgBotWorldState_Action) GetActionID() int32 {
	if x != nil && x.ActionID != nil {
		return *x.ActionID
	}
	return Default_CMsgBotWorldState_Action_ActionID
}

func (x *CMsgBotWorldState_Action) GetActionDelay() int32 {
	if x != nil && x.ActionDelay != nil {
		return *x.ActionDelay
	}
	return Default_CMsgBotWorldState_Action_ActionDelay
}

func (m *CMsgBotWorldState_Action) GetActionData() isCMsgBotWorldState_Action_ActionData {
	if m != nil {
		return m.ActionData
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetMoveToLocation() *CMsgBotWorldState_Action_MoveToLocation {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_MoveToLocation_); ok {
		return x.MoveToLocation
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetMoveToTarget() *CMsgBotWorldState_Action_MoveToTarget {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_MoveToTarget_); ok {
		return x.MoveToTarget
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetAttackMove() *CMsgBotWorldState_Action_AttackMove {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_AttackMove_); ok {
		return x.AttackMove
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetAttackTarget() *CMsgBotWorldState_Action_AttackTarget {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_AttackTarget_); ok {
		return x.AttackTarget
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCastLocation() *CMsgBotWorldState_Action_CastLocation {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_CastLocation_); ok {
		return x.CastLocation
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCastTarget() *CMsgBotWorldState_Action_CastTarget {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_CastTarget_); ok {
		return x.CastTarget
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCastTree() *CMsgBotWorldState_Action_CastTree {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_CastTree_); ok {
		return x.CastTree
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCast() *CMsgBotWorldState_Action_Cast {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Cast_); ok {
		return x.Cast
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCastToggle() *CMsgBotWorldState_Action_CastToggle {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_CastToggle_); ok {
		return x.CastToggle
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetHoldLocation() *CMsgBotWorldState_Action_HoldLocation {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_HoldLocation_); ok {
		return x.HoldLocation
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetTrainAbility() *CMsgBotWorldState_Action_TrainAbility {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_TrainAbility_); ok {
		return x.TrainAbility
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetDropItem() *CMsgBotWorldState_Action_DropItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_DropItem_); ok {
		return x.DropItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetPickUpItem() *CMsgBotWorldState_Action_PickUpItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_PickUpItem_); ok {
		return x.PickUpItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetPickupRune() *CMsgBotWorldState_Action_PickupRune {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_PickupRune_); ok {
		return x.PickupRune
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetPurchaseItem() *CMsgBotWorldState_Action_PurchaseItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_PurchaseItem_); ok {
		return x.PurchaseItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetSellItem() *CMsgBotWorldState_Action_SellItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_SellItem_); ok {
		return x.SellItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetDisassembleItem() *CMsgBotWorldState_Action_DisassembleItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_DisassembleItem_); ok {
		return x.DisassembleItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetSetCombineLockItem() *CMsgBotWorldState_Action_SetCombineLockItem {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_SetCombineLockItem_); ok {
		return x.SetCombineLockItem
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetStop() *CMsgBotWorldState_Action_Stop {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Stop_); ok {
		return x.Stop
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetChat() *CMsgBotWorldState_Action_Chat {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Chat_); ok {
		return x.Chat
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetSwapItems() *CMsgBotWorldState_Action_SwapItems {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_SwapItems_); ok {
		return x.SwapItems
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetUseShrine() *CMsgBotWorldState_Action_UseShrine {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_UseShrine_); ok {
		return x.UseShrine
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetCourier() *CMsgBotWorldState_Action_Courier {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Courier_); ok {
		return x.Courier
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetGetActualIncomingDamage() *CMsgBotWorldState_Action_GetActualIncomingDamage {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_GetActualIncomingDamage_); ok {
		return x.GetActualIncomingDamage
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetGetEstimatedDamageToTarget() *CMsgBotWorldState_Action_GetEstimatedDamageToTarget {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_GetEstimatedDamageToTarget_); ok {
		return x.GetEstimatedDamageToTarget
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetGlyph() *CMsgBotWorldState_Action_Glyph {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Glyph_); ok {
		return x.Glyph
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetSoftReset() *CMsgBotWorldState_Action_SoftReset {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_SoftReset_); ok {
		return x.SoftReset
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetBuyback() *CMsgBotWorldState_Action_Buyback {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_Buyback_); ok {
		return x.Buyback
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawText() *CMsgBotWorldState_Action_ScriptingDebugDrawText {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawText_); ok {
		return x.ScriptingDebugDrawText
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawLine() *CMsgBotWorldState_Action_ScriptingDebugDrawLine {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawLine_); ok {
		return x.ScriptingDebugDrawLine
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawScreenText() *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_); ok {
		return x.ScriptingDebugDrawScreenText
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawBox() *CMsgBotWorldState_Action_ScriptingDebugDrawBox {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawBox_); ok {
		return x.ScriptingDebugDrawBox
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawCircle() *CMsgBotWorldState_Action_ScriptingDebugDrawCircle {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawCircle_); ok {
		return x.ScriptingDebugDrawCircle
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugDrawClear() *CMsgBotWorldState_Action_ScriptingDebugDrawClear {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugDrawClear_); ok {
		return x.ScriptingDebugDrawClear
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetScriptingDebugScreenTextPretty() *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_); ok {
		return x.ScriptingDebugScreenTextPretty
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetMoveDirectly() *CMsgBotWorldState_Action_MoveToLocation {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_MoveDirectly); ok {
		return x.MoveDirectly
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetOceanWinGame() *CMsgBotWorldState_Action_OceanWinGame {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_OceanWinGame_); ok {
		return x.OceanWinGame
	}
	return nil
}

func (x *CMsgBotWorldState_Action) GetOceanReplayCorrectTime() *CMsgBotWorldState_Action_OceanReplayCorrectTime {
	if x, ok := x.GetActionData().(*CMsgBotWorldState_Action_OceanReplayCorrectTime_); ok {
		return x.OceanReplayCorrectTime
	}
	return nil
}

type isCMsgBotWorldState_Action_ActionData interface {
	isCMsgBotWorldState_Action_ActionData()
}

type CMsgBotWorldState_Action_MoveToLocation_ struct {
	MoveToLocation *CMsgBotWorldState_Action_MoveToLocation `protobuf:"bytes,101,opt,name=moveToLocation,oneof"`
}

type CMsgBotWorldState_Action_MoveToTarget_ struct {
	MoveToTarget *CMsgBotWorldState_Action_MoveToTarget `protobuf:"bytes,102,opt,name=moveToTarget,oneof"`
}

type CMsgBotWorldState_Action_AttackMove_ struct {
	AttackMove *CMsgBotWorldState_Action_AttackMove `protobuf:"bytes,103,opt,name=attackMove,oneof"`
}

type CMsgBotWorldState_Action_AttackTarget_ struct {
	AttackTarget *CMsgBotWorldState_Action_AttackTarget `protobuf:"bytes,104,opt,name=attackTarget,oneof"`
}

type CMsgBotWorldState_Action_CastLocation_ struct {
	CastLocation *CMsgBotWorldState_Action_CastLocation `protobuf:"bytes,105,opt,name=castLocation,oneof"`
}

type CMsgBotWorldState_Action_CastTarget_ struct {
	CastTarget *CMsgBotWorldState_Action_CastTarget `protobuf:"bytes,106,opt,name=castTarget,oneof"`
}

type CMsgBotWorldState_Action_CastTree_ struct {
	CastTree *CMsgBotWorldState_Action_CastTree `protobuf:"bytes,107,opt,name=castTree,oneof"`
}

type CMsgBotWorldState_Action_Cast_ struct {
	Cast *CMsgBotWorldState_Action_Cast `protobuf:"bytes,108,opt,name=cast,oneof"`
}

type CMsgBotWorldState_Action_CastToggle_ struct {
	CastToggle *CMsgBotWorldState_Action_CastToggle `protobuf:"bytes,109,opt,name=castToggle,oneof"`
}

type CMsgBotWorldState_Action_HoldLocation_ struct {
	HoldLocation *CMsgBotWorldState_Action_HoldLocation `protobuf:"bytes,110,opt,name=holdLocation,oneof"`
}

type CMsgBotWorldState_Action_TrainAbility_ struct {
	TrainAbility *CMsgBotWorldState_Action_TrainAbility `protobuf:"bytes,111,opt,name=trainAbility,oneof"`
}

type CMsgBotWorldState_Action_DropItem_ struct {
	DropItem *CMsgBotWorldState_Action_DropItem `protobuf:"bytes,112,opt,name=dropItem,oneof"`
}

type CMsgBotWorldState_Action_PickUpItem_ struct {
	PickUpItem *CMsgBotWorldState_Action_PickUpItem `protobuf:"bytes,114,opt,name=pickUpItem,oneof"`
}

type CMsgBotWorldState_Action_PickupRune_ struct {
	PickupRune *CMsgBotWorldState_Action_PickupRune `protobuf:"bytes,115,opt,name=pickupRune,oneof"`
}

type CMsgBotWorldState_Action_PurchaseItem_ struct {
	PurchaseItem *CMsgBotWorldState_Action_PurchaseItem `protobuf:"bytes,116,opt,name=purchaseItem,oneof"`
}

type CMsgBotWorldState_Action_SellItem_ struct {
	SellItem *CMsgBotWorldState_Action_SellItem `protobuf:"bytes,117,opt,name=sellItem,oneof"`
}

type CMsgBotWorldState_Action_DisassembleItem_ struct {
	DisassembleItem *CMsgBotWorldState_Action_DisassembleItem `protobuf:"bytes,118,opt,name=disassembleItem,oneof"`
}

type CMsgBotWorldState_Action_SetCombineLockItem_ struct {
	SetCombineLockItem *CMsgBotWorldState_Action_SetCombineLockItem `protobuf:"bytes,132,opt,name=setCombineLockItem,oneof"`
}

type CMsgBotWorldState_Action_Stop_ struct {
	Stop *CMsgBotWorldState_Action_Stop `protobuf:"bytes,121,opt,name=stop,oneof"`
}

type CMsgBotWorldState_Action_Chat_ struct {
	Chat *CMsgBotWorldState_Action_Chat `protobuf:"bytes,140,opt,name=chat,oneof"`
}

type CMsgBotWorldState_Action_SwapItems_ struct {
	SwapItems *CMsgBotWorldState_Action_SwapItems `protobuf:"bytes,141,opt,name=swapItems,oneof"`
}

type CMsgBotWorldState_Action_UseShrine_ struct {
	UseShrine *CMsgBotWorldState_Action_UseShrine `protobuf:"bytes,142,opt,name=useShrine,oneof"`
}

type CMsgBotWorldState_Action_Courier_ struct {
	Courier *CMsgBotWorldState_Action_Courier `protobuf:"bytes,143,opt,name=courier,oneof"`
}

type CMsgBotWorldState_Action_GetActualIncomingDamage_ struct {
	GetActualIncomingDamage *CMsgBotWorldState_Action_GetActualIncomingDamage `protobuf:"bytes,144,opt,name=getActualIncomingDamage,oneof"`
}

type CMsgBotWorldState_Action_GetEstimatedDamageToTarget_ struct {
	GetEstimatedDamageToTarget *CMsgBotWorldState_Action_GetEstimatedDamageToTarget `protobuf:"bytes,145,opt,name=getEstimatedDamageToTarget,oneof"`
}

type CMsgBotWorldState_Action_Glyph_ struct {
	Glyph *CMsgBotWorldState_Action_Glyph `protobuf:"bytes,146,opt,name=glyph,oneof"`
}

type CMsgBotWorldState_Action_SoftReset_ struct {
	SoftReset *CMsgBotWorldState_Action_SoftReset `protobuf:"bytes,148,opt,name=softReset,oneof"`
}

type CMsgBotWorldState_Action_Buyback_ struct {
	Buyback *CMsgBotWorldState_Action_Buyback `protobuf:"bytes,149,opt,name=buyback,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawText_ struct {
	ScriptingDebugDrawText *CMsgBotWorldState_Action_ScriptingDebugDrawText `protobuf:"bytes,150,opt,name=scriptingDebugDrawText,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawLine_ struct {
	ScriptingDebugDrawLine *CMsgBotWorldState_Action_ScriptingDebugDrawLine `protobuf:"bytes,151,opt,name=scriptingDebugDrawLine,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_ struct {
	ScriptingDebugDrawScreenText *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText `protobuf:"bytes,152,opt,name=scriptingDebugDrawScreenText,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawBox_ struct {
	ScriptingDebugDrawBox *CMsgBotWorldState_Action_ScriptingDebugDrawBox `protobuf:"bytes,153,opt,name=scriptingDebugDrawBox,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawCircle_ struct {
	ScriptingDebugDrawCircle *CMsgBotWorldState_Action_ScriptingDebugDrawCircle `protobuf:"bytes,154,opt,name=scriptingDebugDrawCircle,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugDrawClear_ struct {
	ScriptingDebugDrawClear *CMsgBotWorldState_Action_ScriptingDebugDrawClear `protobuf:"bytes,155,opt,name=scriptingDebugDrawClear,oneof"`
}

type CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_ struct {
	ScriptingDebugScreenTextPretty *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty `protobuf:"bytes,159,opt,name=scriptingDebugScreenTextPretty,oneof"`
}

type CMsgBotWorldState_Action_MoveDirectly struct {
	MoveDirectly *CMsgBotWorldState_Action_MoveToLocation `protobuf:"bytes,156,opt,name=moveDirectly,oneof"`
}

type CMsgBotWorldState_Action_OceanWinGame_ struct {
	OceanWinGame *CMsgBotWorldState_Action_OceanWinGame `protobuf:"bytes,157,opt,name=oceanWinGame,oneof"`
}

type CMsgBotWorldState_Action_OceanReplayCorrectTime_ struct {
	OceanReplayCorrectTime *CMsgBotWorldState_Action_OceanReplayCorrectTime `protobuf:"bytes,158,opt,name=oceanReplayCorrectTime,oneof"`
}

func (*CMsgBotWorldState_Action_MoveToLocation_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_MoveToTarget_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_AttackMove_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_AttackTarget_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_CastLocation_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_CastTarget_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_CastTree_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_Cast_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_CastToggle_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_HoldLocation_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_TrainAbility_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_DropItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_PickUpItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_PickupRune_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_PurchaseItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_SellItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_DisassembleItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_SetCombineLockItem_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_Stop_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_Chat_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_SwapItems_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_UseShrine_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_Courier_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_GetActualIncomingDamage_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_GetEstimatedDamageToTarget_) isCMsgBotWorldState_Action_ActionData() {
}

func (*CMsgBotWorldState_Action_Glyph_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_SoftReset_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_Buyback_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawText_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawLine_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_) isCMsgBotWorldState_Action_ActionData() {
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawBox_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawCircle_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawClear_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_) isCMsgBotWorldState_Action_ActionData() {
}

func (*CMsgBotWorldState_Action_MoveDirectly) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_OceanWinGame_) isCMsgBotWorldState_Action_ActionData() {}

func (*CMsgBotWorldState_Action_OceanReplayCorrectTime_) isCMsgBotWorldState_Action_ActionData() {}

type CMsgBotWorldState_Actions_OceanAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heroes      []*CMsgBotWorldState_Actions_OceanAnnotation_Hero `protobuf:"bytes,1,rep,name=heroes" json:"heroes,omitempty"`
	AgentID     *string                                           `protobuf:"bytes,5,opt,name=agentID" json:"agentID,omitempty"`
	Rewards     []float32                                         `protobuf:"fixed32,6,rep,name=rewards" json:"rewards,omitempty"`
	RewardNames []string                                          `protobuf:"bytes,7,rep,name=reward_names,json=rewardNames" json:"reward_names,omitempty"`
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) Reset() {
	*x = CMsgBotWorldState_Actions_OceanAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Actions_OceanAnnotation) ProtoMessage() {}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Actions_OceanAnnotation.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Actions_OceanAnnotation) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 17, 0}
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) GetHeroes() []*CMsgBotWorldState_Actions_OceanAnnotation_Hero {
	if x != nil {
		return x.Heroes
	}
	return nil
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) GetAgentID() string {
	if x != nil && x.AgentID != nil {
		return *x.AgentID
	}
	return ""
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) GetRewards() []float32 {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation) GetRewardNames() []string {
	if x != nil {
		return x.RewardNames
	}
	return nil
}

type CMsgBotWorldState_Actions_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *float32 `protobuf:"fixed32,1,opt,name=startTime" json:"startTime,omitempty"`
	Name      *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgBotWorldState_Actions_Header) Reset() {
	*x = CMsgBotWorldState_Actions_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Actions_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Actions_Header) ProtoMessage() {}

func (x *CMsgBotWorldState_Actions_Header) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Actions_Header.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Actions_Header) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 17, 1}
}

func (x *CMsgBotWorldState_Actions_Header) GetStartTime() float32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgBotWorldState_Actions_Header) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgBotWorldState_Actions_OceanAnnotation_Hero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID       *int32   `protobuf:"varint,1,req,name=playerID" json:"playerID,omitempty"`
	ValueFunction  *float32 `protobuf:"fixed32,2,opt,name=valueFunction" json:"valueFunction,omitempty"`
	ActionLogp     *float32 `protobuf:"fixed32,3,opt,name=actionLogp" json:"actionLogp,omitempty"`
	Reward         *float32 `protobuf:"fixed32,4,opt,name=reward" json:"reward,omitempty"`
	InternalAction []int32  `protobuf:"varint,5,rep,name=internalAction" json:"internalAction,omitempty"`
	ActionName     *string  `protobuf:"bytes,6,opt,name=actionName" json:"actionName,omitempty"`
	DetailedStats  []byte   `protobuf:"bytes,7,opt,name=detailedStats" json:"detailedStats,omitempty"`
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) Reset() {
	*x = CMsgBotWorldState_Actions_OceanAnnotation_Hero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Actions_OceanAnnotation_Hero) ProtoMessage() {}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Actions_OceanAnnotation_Hero.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Actions_OceanAnnotation_Hero) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 17, 0, 0}
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetPlayerID() int32 {
	if x != nil && x.PlayerID != nil {
		return *x.PlayerID
	}
	return 0
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetValueFunction() float32 {
	if x != nil && x.ValueFunction != nil {
		return *x.ValueFunction
	}
	return 0
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetActionLogp() float32 {
	if x != nil && x.ActionLogp != nil {
		return *x.ActionLogp
	}
	return 0
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetReward() float32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetInternalAction() []int32 {
	if x != nil {
		return x.InternalAction
	}
	return nil
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

func (x *CMsgBotWorldState_Actions_OceanAnnotation_Hero) GetDetailedStats() []byte {
	if x != nil {
		return x.DetailedStats
	}
	return nil
}

type CMsgBotWorldState_Action_MoveToLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units    []int32                   `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Location *CMsgBotWorldState_Vector `protobuf:"bytes,2,req,name=location" json:"location,omitempty"`
}

func (x *CMsgBotWorldState_Action_MoveToLocation) Reset() {
	*x = CMsgBotWorldState_Action_MoveToLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_MoveToLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_MoveToLocation) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_MoveToLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_MoveToLocation.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_MoveToLocation) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 0}
}

func (x *CMsgBotWorldState_Action_MoveToLocation) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_MoveToLocation) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

type CMsgBotWorldState_Action_MoveToTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units  []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Target *int32  `protobuf:"varint,2,req,name=target" json:"target,omitempty"`
}

func (x *CMsgBotWorldState_Action_MoveToTarget) Reset() {
	*x = CMsgBotWorldState_Action_MoveToTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_MoveToTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_MoveToTarget) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_MoveToTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_MoveToTarget.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_MoveToTarget) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 1}
}

func (x *CMsgBotWorldState_Action_MoveToTarget) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_MoveToTarget) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

type CMsgBotWorldState_Action_AttackMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units    []int32                   `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Location *CMsgBotWorldState_Vector `protobuf:"bytes,2,req,name=location" json:"location,omitempty"`
}

func (x *CMsgBotWorldState_Action_AttackMove) Reset() {
	*x = CMsgBotWorldState_Action_AttackMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_AttackMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_AttackMove) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_AttackMove) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_AttackMove.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_AttackMove) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 2}
}

func (x *CMsgBotWorldState_Action_AttackMove) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_AttackMove) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

type CMsgBotWorldState_Action_AttackTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units  []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Target *int32  `protobuf:"varint,2,req,name=target" json:"target,omitempty"`
	Once   *bool   `protobuf:"varint,3,opt,name=once" json:"once,omitempty"`
}

func (x *CMsgBotWorldState_Action_AttackTarget) Reset() {
	*x = CMsgBotWorldState_Action_AttackTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_AttackTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_AttackTarget) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_AttackTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_AttackTarget.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_AttackTarget) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 3}
}

func (x *CMsgBotWorldState_Action_AttackTarget) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_AttackTarget) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

func (x *CMsgBotWorldState_Action_AttackTarget) GetOnce() bool {
	if x != nil && x.Once != nil {
		return *x.Once
	}
	return false
}

type CMsgBotWorldState_Action_HoldLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
}

func (x *CMsgBotWorldState_Action_HoldLocation) Reset() {
	*x = CMsgBotWorldState_Action_HoldLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_HoldLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_HoldLocation) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_HoldLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_HoldLocation.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_HoldLocation) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 4}
}

func (x *CMsgBotWorldState_Action_HoldLocation) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

type CMsgBotWorldState_Action_Stop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
}

func (x *CMsgBotWorldState_Action_Stop) Reset() {
	*x = CMsgBotWorldState_Action_Stop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Stop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Stop) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Stop) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Stop.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Stop) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 5}
}

func (x *CMsgBotWorldState_Action_Stop) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

type CMsgBotWorldState_Action_CastLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units       []int32                   `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	AbilitySlot *int32                    `protobuf:"varint,2,req,name=abilitySlot" json:"abilitySlot,omitempty"`
	Location    *CMsgBotWorldState_Vector `protobuf:"bytes,3,req,name=location" json:"location,omitempty"`
}

func (x *CMsgBotWorldState_Action_CastLocation) Reset() {
	*x = CMsgBotWorldState_Action_CastLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_CastLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_CastLocation) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_CastLocation) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_CastLocation.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_CastLocation) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 6}
}

func (x *CMsgBotWorldState_Action_CastLocation) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_CastLocation) GetAbilitySlot() int32 {
	if x != nil && x.AbilitySlot != nil {
		return *x.AbilitySlot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_CastLocation) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

type CMsgBotWorldState_Action_CastTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units       []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	AbilitySlot *int32  `protobuf:"varint,2,req,name=abilitySlot" json:"abilitySlot,omitempty"`
	Target      *int32  `protobuf:"varint,3,req,name=target" json:"target,omitempty"`
}

func (x *CMsgBotWorldState_Action_CastTarget) Reset() {
	*x = CMsgBotWorldState_Action_CastTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_CastTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_CastTarget) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_CastTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_CastTarget.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_CastTarget) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 7}
}

func (x *CMsgBotWorldState_Action_CastTarget) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_CastTarget) GetAbilitySlot() int32 {
	if x != nil && x.AbilitySlot != nil {
		return *x.AbilitySlot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_CastTarget) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

type CMsgBotWorldState_Action_CastTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units       []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	AbilitySlot *int32  `protobuf:"varint,2,req,name=abilitySlot" json:"abilitySlot,omitempty"`
	Tree        *int32  `protobuf:"varint,3,req,name=tree" json:"tree,omitempty"`
}

func (x *CMsgBotWorldState_Action_CastTree) Reset() {
	*x = CMsgBotWorldState_Action_CastTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_CastTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_CastTree) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_CastTree) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_CastTree.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_CastTree) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 8}
}

func (x *CMsgBotWorldState_Action_CastTree) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_CastTree) GetAbilitySlot() int32 {
	if x != nil && x.AbilitySlot != nil {
		return *x.AbilitySlot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_CastTree) GetTree() int32 {
	if x != nil && x.Tree != nil {
		return *x.Tree
	}
	return 0
}

type CMsgBotWorldState_Action_Cast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units       []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	AbilitySlot *int32  `protobuf:"varint,2,req,name=abilitySlot" json:"abilitySlot,omitempty"`
}

func (x *CMsgBotWorldState_Action_Cast) Reset() {
	*x = CMsgBotWorldState_Action_Cast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Cast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Cast) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Cast) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Cast.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Cast) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 9}
}

func (x *CMsgBotWorldState_Action_Cast) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_Cast) GetAbilitySlot() int32 {
	if x != nil && x.AbilitySlot != nil {
		return *x.AbilitySlot
	}
	return 0
}

type CMsgBotWorldState_Action_CastToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units       []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	AbilitySlot *int32  `protobuf:"varint,2,req,name=abilitySlot" json:"abilitySlot,omitempty"`
}

func (x *CMsgBotWorldState_Action_CastToggle) Reset() {
	*x = CMsgBotWorldState_Action_CastToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_CastToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_CastToggle) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_CastToggle) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_CastToggle.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_CastToggle) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 10}
}

func (x *CMsgBotWorldState_Action_CastToggle) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_CastToggle) GetAbilitySlot() int32 {
	if x != nil && x.AbilitySlot != nil {
		return *x.AbilitySlot
	}
	return 0
}

type CMsgBotWorldState_Action_TrainAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ability *string `protobuf:"bytes,1,req,name=ability" json:"ability,omitempty"`
	Level   *int32  `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Unit    *int32  `protobuf:"varint,3,opt,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_TrainAbility) Reset() {
	*x = CMsgBotWorldState_Action_TrainAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_TrainAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_TrainAbility) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_TrainAbility) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_TrainAbility.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_TrainAbility) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 11}
}

func (x *CMsgBotWorldState_Action_TrainAbility) GetAbility() string {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return ""
}

func (x *CMsgBotWorldState_Action_TrainAbility) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgBotWorldState_Action_TrainAbility) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_DropItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit     *int32                    `protobuf:"varint,1,opt,name=unit" json:"unit,omitempty"`
	Slot     *int32                    `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	Location *CMsgBotWorldState_Vector `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (x *CMsgBotWorldState_Action_DropItem) Reset() {
	*x = CMsgBotWorldState_Action_DropItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_DropItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_DropItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_DropItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_DropItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_DropItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 12}
}

func (x *CMsgBotWorldState_Action_DropItem) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *CMsgBotWorldState_Action_DropItem) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_DropItem) GetLocation() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Location
	}
	return nil
}

type CMsgBotWorldState_Action_PickUpItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit   *int32 `protobuf:"varint,1,opt,name=unit" json:"unit,omitempty"`
	ItemId *int32 `protobuf:"varint,2,opt,name=itemId" json:"itemId,omitempty"`
}

func (x *CMsgBotWorldState_Action_PickUpItem) Reset() {
	*x = CMsgBotWorldState_Action_PickUpItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_PickUpItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_PickUpItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_PickUpItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_PickUpItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_PickUpItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 13}
}

func (x *CMsgBotWorldState_Action_PickUpItem) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *CMsgBotWorldState_Action_PickUpItem) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgBotWorldState_Action_PurchaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item     *int32  `protobuf:"varint,1,opt,name=item" json:"item,omitempty"`
	ItemName *string `protobuf:"bytes,2,opt,name=item_name,json=itemName" json:"item_name,omitempty"`
	Unit     *int32  `protobuf:"varint,3,opt,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_PurchaseItem) Reset() {
	*x = CMsgBotWorldState_Action_PurchaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_PurchaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_PurchaseItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_PurchaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_PurchaseItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_PurchaseItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 14}
}

func (x *CMsgBotWorldState_Action_PurchaseItem) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return 0
}

func (x *CMsgBotWorldState_Action_PurchaseItem) GetItemName() string {
	if x != nil && x.ItemName != nil {
		return *x.ItemName
	}
	return ""
}

func (x *CMsgBotWorldState_Action_PurchaseItem) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_SellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *int32 `protobuf:"varint,1,opt,name=item" json:"item,omitempty"`
	Slot *int32 `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	Unit *int32 `protobuf:"varint,3,opt,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_SellItem) Reset() {
	*x = CMsgBotWorldState_Action_SellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_SellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_SellItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_SellItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_SellItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_SellItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 15}
}

func (x *CMsgBotWorldState_Action_SellItem) GetItem() int32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return 0
}

func (x *CMsgBotWorldState_Action_SellItem) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_SellItem) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_SwapItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotA *int32 `protobuf:"varint,1,req,name=slot_a,json=slotA" json:"slot_a,omitempty"`
	SlotB *int32 `protobuf:"varint,2,req,name=slot_b,json=slotB" json:"slot_b,omitempty"`
	Unit  *int32 `protobuf:"varint,3,opt,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_SwapItems) Reset() {
	*x = CMsgBotWorldState_Action_SwapItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_SwapItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_SwapItems) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_SwapItems) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_SwapItems.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_SwapItems) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 16}
}

func (x *CMsgBotWorldState_Action_SwapItems) GetSlotA() int32 {
	if x != nil && x.SlotA != nil {
		return *x.SlotA
	}
	return 0
}

func (x *CMsgBotWorldState_Action_SwapItems) GetSlotB() int32 {
	if x != nil && x.SlotB != nil {
		return *x.SlotB
	}
	return 0
}

func (x *CMsgBotWorldState_Action_SwapItems) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_DisassembleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *int32 `protobuf:"varint,1,req,name=slot" json:"slot,omitempty"`
}

func (x *CMsgBotWorldState_Action_DisassembleItem) Reset() {
	*x = CMsgBotWorldState_Action_DisassembleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_DisassembleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_DisassembleItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_DisassembleItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_DisassembleItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_DisassembleItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 17}
}

func (x *CMsgBotWorldState_Action_DisassembleItem) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type CMsgBotWorldState_Action_SetCombineLockItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot  *int32 `protobuf:"varint,1,req,name=slot" json:"slot,omitempty"`
	Value *bool  `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *CMsgBotWorldState_Action_SetCombineLockItem) Reset() {
	*x = CMsgBotWorldState_Action_SetCombineLockItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_SetCombineLockItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_SetCombineLockItem) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_SetCombineLockItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_SetCombineLockItem.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_SetCombineLockItem) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 18}
}

func (x *CMsgBotWorldState_Action_SetCombineLockItem) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgBotWorldState_Action_SetCombineLockItem) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type CMsgBotWorldState_Action_PickupRune struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Rune  *int32  `protobuf:"varint,2,req,name=rune" json:"rune,omitempty"`
}

func (x *CMsgBotWorldState_Action_PickupRune) Reset() {
	*x = CMsgBotWorldState_Action_PickupRune{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_PickupRune) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_PickupRune) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_PickupRune) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_PickupRune.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_PickupRune) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 19}
}

func (x *CMsgBotWorldState_Action_PickupRune) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_PickupRune) GetRune() int32 {
	if x != nil && x.Rune != nil {
		return *x.Rune
	}
	return 0
}

type CMsgBotWorldState_Action_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	ToAllchat *bool   `protobuf:"varint,2,req,name=to_allchat,json=toAllchat" json:"to_allchat,omitempty"`
}

func (x *CMsgBotWorldState_Action_Chat) Reset() {
	*x = CMsgBotWorldState_Action_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Chat) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Chat.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Chat) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 20}
}

func (x *CMsgBotWorldState_Action_Chat) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgBotWorldState_Action_Chat) GetToAllchat() bool {
	if x != nil && x.ToAllchat != nil {
		return *x.ToAllchat
	}
	return false
}

type CMsgBotWorldState_Action_UseShrine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units  []int32 `protobuf:"varint,1,rep,name=units" json:"units,omitempty"`
	Shrine *int32  `protobuf:"varint,2,req,name=shrine" json:"shrine,omitempty"`
}

func (x *CMsgBotWorldState_Action_UseShrine) Reset() {
	*x = CMsgBotWorldState_Action_UseShrine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_UseShrine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_UseShrine) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_UseShrine) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_UseShrine.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_UseShrine) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 21}
}

func (x *CMsgBotWorldState_Action_UseShrine) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgBotWorldState_Action_UseShrine) GetShrine() int32 {
	if x != nil && x.Shrine != nil {
		return *x.Shrine
	}
	return 0
}

type CMsgBotWorldState_Action_Courier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit    *int32 `protobuf:"varint,1,req,name=unit" json:"unit,omitempty"`
	Courier *int32 `protobuf:"varint,2,req,name=courier" json:"courier,omitempty"`
	Action  *int32 `protobuf:"varint,3,req,name=action" json:"action,omitempty"`
}

func (x *CMsgBotWorldState_Action_Courier) Reset() {
	*x = CMsgBotWorldState_Action_Courier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Courier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Courier) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Courier) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Courier.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Courier) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 22}
}

func (x *CMsgBotWorldState_Action_Courier) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *CMsgBotWorldState_Action_Courier) GetCourier() int32 {
	if x != nil && x.Courier != nil {
		return *x.Courier
	}
	return 0
}

func (x *CMsgBotWorldState_Action_Courier) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type CMsgBotWorldState_Action_GetActualIncomingDamage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit        *int32   `protobuf:"varint,1,req,name=unit" json:"unit,omitempty"`
	NDamage     *float32 `protobuf:"fixed32,2,req,name=nDamage" json:"nDamage,omitempty"`
	NDamageType *int32   `protobuf:"varint,3,req,name=nDamageType" json:"nDamageType,omitempty"`
}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) Reset() {
	*x = CMsgBotWorldState_Action_GetActualIncomingDamage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_GetActualIncomingDamage) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_GetActualIncomingDamage.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_GetActualIncomingDamage) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 23}
}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) GetNDamage() float32 {
	if x != nil && x.NDamage != nil {
		return *x.NDamage
	}
	return 0
}

func (x *CMsgBotWorldState_Action_GetActualIncomingDamage) GetNDamageType() int32 {
	if x != nil && x.NDamageType != nil {
		return *x.NDamageType
	}
	return 0
}

type CMsgBotWorldState_Action_GetEstimatedDamageToTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit                *int32   `protobuf:"varint,1,req,name=unit" json:"unit,omitempty"`
	BCurrentlyAvailable *bool    `protobuf:"varint,2,req,name=bCurrentlyAvailable" json:"bCurrentlyAvailable,omitempty"`
	HTarget             *int32   `protobuf:"varint,3,req,name=hTarget" json:"hTarget,omitempty"`
	FDuration           *float32 `protobuf:"fixed32,4,req,name=fDuration" json:"fDuration,omitempty"`
	NDamageTypes        *int32   `protobuf:"varint,5,req,name=nDamageTypes" json:"nDamageTypes,omitempty"`
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) Reset() {
	*x = CMsgBotWorldState_Action_GetEstimatedDamageToTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_GetEstimatedDamageToTarget) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_GetEstimatedDamageToTarget.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_GetEstimatedDamageToTarget) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 24}
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) GetBCurrentlyAvailable() bool {
	if x != nil && x.BCurrentlyAvailable != nil {
		return *x.BCurrentlyAvailable
	}
	return false
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) GetHTarget() int32 {
	if x != nil && x.HTarget != nil {
		return *x.HTarget
	}
	return 0
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) GetFDuration() float32 {
	if x != nil && x.FDuration != nil {
		return *x.FDuration
	}
	return 0
}

func (x *CMsgBotWorldState_Action_GetEstimatedDamageToTarget) GetNDamageTypes() int32 {
	if x != nil && x.NDamageTypes != nil {
		return *x.NDamageTypes
	}
	return 0
}

type CMsgBotWorldState_Action_Glyph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit *int32 `protobuf:"varint,1,req,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_Glyph) Reset() {
	*x = CMsgBotWorldState_Action_Glyph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Glyph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Glyph) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Glyph) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Glyph.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Glyph) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 25}
}

func (x *CMsgBotWorldState_Action_Glyph) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_SoftReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameConfig *string `protobuf:"bytes,1,opt,name=minigameConfig" json:"minigameConfig,omitempty"`
	SnapshotData   *string `protobuf:"bytes,2,opt,name=snapshotData" json:"snapshotData,omitempty"`
}

func (x *CMsgBotWorldState_Action_SoftReset) Reset() {
	*x = CMsgBotWorldState_Action_SoftReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_SoftReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_SoftReset) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_SoftReset) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_SoftReset.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_SoftReset) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 26}
}

func (x *CMsgBotWorldState_Action_SoftReset) GetMinigameConfig() string {
	if x != nil && x.MinigameConfig != nil {
		return *x.MinigameConfig
	}
	return ""
}

func (x *CMsgBotWorldState_Action_SoftReset) GetSnapshotData() string {
	if x != nil && x.SnapshotData != nil {
		return *x.SnapshotData
	}
	return ""
}

type CMsgBotWorldState_Action_Buyback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit *int32 `protobuf:"varint,1,req,name=unit" json:"unit,omitempty"`
}

func (x *CMsgBotWorldState_Action_Buyback) Reset() {
	*x = CMsgBotWorldState_Action_Buyback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_Buyback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_Buyback) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_Buyback) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_Buyback.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_Buyback) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 27}
}

func (x *CMsgBotWorldState_Action_Buyback) GetUnit() int32 {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugDrawText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin     *CMsgBotWorldState_Vector `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Text       *string                   `protobuf:"bytes,2,req,name=text" json:"text,omitempty"`
	BViewCheck *bool                     `protobuf:"varint,3,req,name=bViewCheck" json:"bViewCheck,omitempty"`
	Duration   *float32                  `protobuf:"fixed32,4,req,name=duration" json:"duration,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawText) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawText.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawText) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 28}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) GetOrigin() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) GetBViewCheck() bool {
	if x != nil && x.BViewCheck != nil {
		return *x.BViewCheck
	}
	return false
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawText) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugDrawLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin   *CMsgBotWorldState_Vector `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Target   *CMsgBotWorldState_Vector `protobuf:"bytes,2,req,name=target" json:"target,omitempty"`
	R        *int32                    `protobuf:"varint,3,req,name=r" json:"r,omitempty"`
	G        *int32                    `protobuf:"varint,4,req,name=g" json:"g,omitempty"`
	B        *int32                    `protobuf:"varint,5,req,name=b" json:"b,omitempty"`
	Ztest    *bool                     `protobuf:"varint,6,req,name=ztest" json:"ztest,omitempty"`
	Duration *float32                  `protobuf:"fixed32,7,req,name=duration" json:"duration,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawLine) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawLine.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawLine) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 29}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetOrigin() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetTarget() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetZtest() bool {
	if x != nil && x.Ztest != nil {
		return *x.Ztest
	}
	return false
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawLine) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugDrawScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X          *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y          *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	LineOffset *int32   `protobuf:"varint,3,req,name=lineOffset" json:"lineOffset,omitempty"`
	Text       *string  `protobuf:"bytes,4,req,name=text" json:"text,omitempty"`
	R          *int32   `protobuf:"varint,5,req,name=r" json:"r,omitempty"`
	G          *int32   `protobuf:"varint,6,req,name=g" json:"g,omitempty"`
	B          *int32   `protobuf:"varint,7,req,name=b" json:"b,omitempty"`
	A          *int32   `protobuf:"varint,8,req,name=a" json:"a,omitempty"`
	Duration   *float32 `protobuf:"fixed32,9,req,name=duration" json:"duration,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawScreenText.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 30}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetLineOffset() int32 {
	if x != nil && x.LineOffset != nil {
		return *x.LineOffset
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawScreenText) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X          *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y          *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	LineOffset *int32   `protobuf:"varint,3,req,name=lineOffset" json:"lineOffset,omitempty"`
	Text       *string  `protobuf:"bytes,4,req,name=text" json:"text,omitempty"`
	R          *int32   `protobuf:"varint,5,req,name=r" json:"r,omitempty"`
	G          *int32   `protobuf:"varint,6,req,name=g" json:"g,omitempty"`
	B          *int32   `protobuf:"varint,7,req,name=b" json:"b,omitempty"`
	A          *int32   `protobuf:"varint,8,req,name=a" json:"a,omitempty"`
	Duration   *float32 `protobuf:"fixed32,9,req,name=duration" json:"duration,omitempty"`
	Font       *string  `protobuf:"bytes,10,req,name=font" json:"font,omitempty"`
	Size       *float32 `protobuf:"fixed32,11,req,name=size" json:"size,omitempty"`
	BBold      *bool    `protobuf:"varint,12,req,name=bBold" json:"bBold,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 31}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetLineOffset() int32 {
	if x != nil && x.LineOffset != nil {
		return *x.LineOffset
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetFont() string {
	if x != nil && x.Font != nil {
		return *x.Font
	}
	return ""
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetSize() float32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty) GetBBold() bool {
	if x != nil && x.BBold != nil {
		return *x.BBold
	}
	return false
}

type CMsgBotWorldState_Action_ScriptingDebugDrawBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin   *CMsgBotWorldState_Vector `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Minimum  *CMsgBotWorldState_Vector `protobuf:"bytes,2,req,name=minimum" json:"minimum,omitempty"`
	Maximum  *CMsgBotWorldState_Vector `protobuf:"bytes,3,req,name=maximum" json:"maximum,omitempty"`
	R        *int32                    `protobuf:"varint,4,req,name=r" json:"r,omitempty"`
	G        *int32                    `protobuf:"varint,5,req,name=g" json:"g,omitempty"`
	B        *int32                    `protobuf:"varint,6,req,name=b" json:"b,omitempty"`
	A        *int32                    `protobuf:"varint,7,req,name=a" json:"a,omitempty"`
	Duration *float32                  `protobuf:"fixed32,8,req,name=duration" json:"duration,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawBox) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawBox.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawBox) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 32}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetOrigin() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetMinimum() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetMaximum() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Maximum
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetR() int32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetG() int32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetB() int32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetA() int32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawBox) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugDrawCircle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center   *CMsgBotWorldState_Vector `protobuf:"bytes,1,req,name=center" json:"center,omitempty"`
	VRgb     *CMsgBotWorldState_Vector `protobuf:"bytes,2,req,name=vRgb" json:"vRgb,omitempty"`
	A        *float32                  `protobuf:"fixed32,3,req,name=a" json:"a,omitempty"`
	Rad      *float32                  `protobuf:"fixed32,4,req,name=rad" json:"rad,omitempty"`
	Ztest    *bool                     `protobuf:"varint,5,req,name=ztest" json:"ztest,omitempty"`
	Duration *float32                  `protobuf:"fixed32,6,req,name=duration" json:"duration,omitempty"`
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawCircle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawCircle) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawCircle.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawCircle) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 33}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetCenter() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetVRgb() *CMsgBotWorldState_Vector {
	if x != nil {
		return x.VRgb
	}
	return nil
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetA() float32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetRad() float32 {
	if x != nil && x.Rad != nil {
		return *x.Rad
	}
	return 0
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetZtest() bool {
	if x != nil && x.Ztest != nil {
		return *x.Ztest
	}
	return false
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawCircle) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgBotWorldState_Action_ScriptingDebugDrawClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawClear) Reset() {
	*x = CMsgBotWorldState_Action_ScriptingDebugDrawClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_ScriptingDebugDrawClear) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_ScriptingDebugDrawClear) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_ScriptingDebugDrawClear.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_ScriptingDebugDrawClear) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 34}
}

type CMsgBotWorldState_Action_OceanWinGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team   *string  `protobuf:"bytes,1,req,name=team" json:"team,omitempty"`
	Reward *float32 `protobuf:"fixed32,2,opt,name=reward" json:"reward,omitempty"`
}

func (x *CMsgBotWorldState_Action_OceanWinGame) Reset() {
	*x = CMsgBotWorldState_Action_OceanWinGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_OceanWinGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_OceanWinGame) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_OceanWinGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_OceanWinGame.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_OceanWinGame) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 35}
}

func (x *CMsgBotWorldState_Action_OceanWinGame) GetTeam() string {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return ""
}

func (x *CMsgBotWorldState_Action_OceanWinGame) GetReward() float32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

type CMsgBotWorldState_Action_OceanReplayCorrectTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta *float32 `protobuf:"fixed32,1,req,name=delta" json:"delta,omitempty"`
}

func (x *CMsgBotWorldState_Action_OceanReplayCorrectTime) Reset() {
	*x = CMsgBotWorldState_Action_OceanReplayCorrectTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBotWorldState_Action_OceanReplayCorrectTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBotWorldState_Action_OceanReplayCorrectTime) ProtoMessage() {}

func (x *CMsgBotWorldState_Action_OceanReplayCorrectTime) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBotWorldState_Action_OceanReplayCorrectTime.ProtoReflect.Descriptor instead.
func (*CMsgBotWorldState_Action_OceanReplayCorrectTime) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP(), []int{0, 18, 36}
}

func (x *CMsgBotWorldState_Action_OceanReplayCorrectTime) GetDelta() float32 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

var File_dota2_dota_gcmessages_common_bot_script_proto protoreflect.FileDescriptor

var file_dota2_dota_gcmessages_common_bot_script_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x1a, 0x1b, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x76, 0x61,
	0x6c, 0x76, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x95, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x69, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x44, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x6c,
	0x79, 0x70, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67,
	0x6c, 0x79, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x6c, 0x79, 0x70, 0x68,
	0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x3f, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x04, 0xc0, 0xe4, 0x1d, 0x01, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x04, 0xc0, 0xe4,
	0x1d, 0x01, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xd0, 0xe4, 0x1d, 0x70, 0x52, 0x0c, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x73, 0x18, 0x70, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x0a,
	0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0xd0, 0xe4, 0x1d, 0x71, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x71, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x75, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x12, 0x54, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x42, 0x04, 0xc0,
	0xe4, 0x1d, 0x01, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0e, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x42, 0x04, 0xc0, 0xe4, 0x1d,
	0x01, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x13, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52,
	0x12, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x32, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x1a, 0xe3, 0x01, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x1a, 0x8d, 0x05, 0x0a, 0x07, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x12,
	0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x11, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x49, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x6c, 0x65,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73,
	0x46, 0x75, 0x6c, 0x6c, 0x79, 0x43, 0x61, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x64, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x1a, 0x63, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x65, 0x6e, 0x1a, 0x8f, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x8a, 0x02, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x61,
	0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x1a, 0xad, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x1a, 0xb6, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xe4, 0x1d,
	0x01, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x64, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0xcf, 0x02,
	0x0a, 0x0d, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x1a,
	0x95, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xe4, 0x1d,
	0x01, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x12, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xd2, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xfc, 0x01, 0x0a,
	0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x1a, 0xb5, 0x01, 0x0a, 0x12,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x1a, 0x6b, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x73, 0x68,
	0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0xb7, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x1a, 0x92, 0x1c, 0x0a, 0x04, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xe4, 0x1d, 0x01, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x47, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x6e, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x4d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x69, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x78, 0x70, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x58, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47,
	0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x76, 0x61, 0x64, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x68,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x48, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x65, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c,
	0x79, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x4d,
	0x69, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x04, 0xc0, 0xe4, 0x1d, 0x01, 0x52,
	0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x04, 0xc0, 0xe4, 0x1d,
	0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x5c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x04,
	0xc0, 0xe4, 0x1d, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x75, 0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6c, 0x65, 0x42, 0x04, 0xc0, 0xe4, 0x1d, 0x01, 0x52, 0x1b, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6c, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x65, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x78, 0x70, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x78, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x6f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x07, 0x61, 0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x61, 0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x72, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x1a,
	0x89, 0x06, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x64,
	0x6f, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x04,
	0x2d, 0x31, 0x30, 0x30, 0x52, 0x08, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x0f, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x1a, 0xa8, 0x03, 0x0a, 0x0f, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x63, 0x65, 0x61, 0x6e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52,
	0x06, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xee,
	0x01, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x3a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd0, 0x46, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x58, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x12,
	0x52, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x63, 0x61, 0x73, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x73, 0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48,
	0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x68,
	0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x55,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x63,
	0x6b, 0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x55,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x75, 0x6e, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x75, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x75, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x5b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x65, 0x0a, 0x12,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12,
	0x3b, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x09,
	0x73, 0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x65, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x18,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x7d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x48, 0x00, 0x52, 0x05, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x12,
	0x4a, 0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x62,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x71, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x71, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44,
	0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44,
	0x72, 0x61, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x1c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44,
	0x72, 0x61, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x6e, 0x0a,
	0x15, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44,
	0x72, 0x61, 0x77, 0x42, 0x6f, 0x78, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61,
	0x77, 0x42, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x15, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x42, 0x6f, 0x78, 0x12, 0x77, 0x0a,
	0x18, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x18, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x89, 0x01, 0x0a,
	0x1e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x18,
	0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x12,
	0x53, 0x0a, 0x0c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x57, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x57, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x57, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x63, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0c,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x5f, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x0c, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x24, 0x0a,
	0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x1a, 0x1c, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x1a, 0x83, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5c, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x56, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x1a, 0x3e, 0x0a,
	0x04, 0x43, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x44, 0x0a,
	0x0a, 0x43, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x6c, 0x6f, 0x74, 0x1a, 0x52, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0x6f, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x1a, 0x53, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0x46, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a,
	0x4d, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0x25,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0x3e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x36, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x75, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x65, 0x1a, 0x3f, 0x0a,
	0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x74, 0x1a, 0x39,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x65, 0x1a, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x69, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x62, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x68, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1b, 0x0a, 0x05, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x1a, 0x57, 0x0a, 0x09, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1d, 0x0a, 0x07,
	0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0xa1, 0x01, 0x0a, 0x16,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72,
	0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xe6, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x7a, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x01, 0x0a, 0x1c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x82, 0x02,
	0x0a, 0x1e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c,
	0x0a, 0x01, 0x67, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01,
	0x62, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x02, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x62, 0x42, 0x6f,
	0x6c, 0x64, 0x1a, 0x9a, 0x02, 0x0a, 0x15, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x42, 0x6f, 0x78, 0x12, 0x37, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x39, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x01, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xda, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x44, 0x72, 0x61, 0x77, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x76, 0x52, 0x67, 0x62, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x76, 0x52, 0x67, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x03, 0x72, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x7a, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x0a, 0x17,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x63, 0x65, 0x61, 0x6e,
	0x57, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x1a, 0x2e, 0x0a, 0x16, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x22, 0xea, 0x0d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10,
	0x12, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x13,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x15,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x55, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42,
	0x55, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x4c, 0x59, 0x50,
	0x48, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x53, 0x48, 0x10, 0x19, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x1a, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x1b, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x1d, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x41, 0x44, 0x41, 0x52, 0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45,
	0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57,
	0x41, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x45, 0x10,
	0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x52,
	0x49, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x50, 0x43, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x2c, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x50, 0x43,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10,
	0x2d, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x43, 0x45, 0x41, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x43, 0x45, 0x41,
	0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x33, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x43, 0x45, 0x41, 0x4e, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x43, 0x45, 0x41, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x36, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x43, 0x45, 0x41, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x3f, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x43, 0x45, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x37, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x38,
	0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f,
	0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x39,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x3a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x42,
	0x4f, 0x58, 0x10, 0x3b, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x49, 0x52,
	0x43, 0x4c, 0x45, 0x10, 0x3c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x10, 0x3d, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x54, 0x54, 0x59, 0x10, 0x41, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x10, 0x3e,
	0x42, 0x0c, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb3,
	0x01, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x52, 0x4f,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x45, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x45, 0x50,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x55, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x45, 0x50, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x53, 0x48, 0x41, 0x4e, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x41, 0x52, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x52,
	0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x0c, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55,
	0x52, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x55, 0x52, 0x49,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x55, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x41, 0x44, 0x10, 0x05, 0x42, 0x36, 0x48, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x80, 0x01, 0x00,
}

var (
	file_dota2_dota_gcmessages_common_bot_script_proto_rawDescOnce sync.Once
	file_dota2_dota_gcmessages_common_bot_script_proto_rawDescData = file_dota2_dota_gcmessages_common_bot_script_proto_rawDesc
)

func file_dota2_dota_gcmessages_common_bot_script_proto_rawDescGZIP() []byte {
	file_dota2_dota_gcmessages_common_bot_script_proto_rawDescOnce.Do(func() {
		file_dota2_dota_gcmessages_common_bot_script_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota2_dota_gcmessages_common_bot_script_proto_rawDescData)
	})
	return file_dota2_dota_gcmessages_common_bot_script_proto_rawDescData
}

var file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_dota2_dota_gcmessages_common_bot_script_proto_goTypes = []interface{}{
	(CMsgBotWorldState_UnitType)(0),                                 // 0: dota2.CMsgBotWorldState.UnitType
	(CMsgBotWorldState_CourierState)(0),                             // 1: dota2.CMsgBotWorldState.CourierState
	(CMsgBotWorldState_Action_Type)(0),                              // 2: dota2.CMsgBotWorldState.Action.Type
	(*CMsgBotWorldState)(nil),                                       // 3: dota2.CMsgBotWorldState
	(*CMsgBotWorldState_Vector)(nil),                                // 4: dota2.CMsgBotWorldState.Vector
	(*CMsgBotWorldState_Player)(nil),                                // 5: dota2.CMsgBotWorldState.Player
	(*CMsgBotWorldState_Ability)(nil),                               // 6: dota2.CMsgBotWorldState.Ability
	(*CMsgBotWorldState_DroppedItem)(nil),                           // 7: dota2.CMsgBotWorldState.DroppedItem
	(*CMsgBotWorldState_RuneInfo)(nil),                              // 8: dota2.CMsgBotWorldState.RuneInfo
	(*CMsgBotWorldState_TeleportInfo)(nil),                          // 9: dota2.CMsgBotWorldState.TeleportInfo
	(*CMsgBotWorldState_Modifier)(nil),                              // 10: dota2.CMsgBotWorldState.Modifier
	(*CMsgBotWorldState_LinearProjectile)(nil),                      // 11: dota2.CMsgBotWorldState.LinearProjectile
	(*CMsgBotWorldState_TrackingProjectile)(nil),                    // 12: dota2.CMsgBotWorldState.TrackingProjectile
	(*CMsgBotWorldState_AvoidanceZone)(nil),                         // 13: dota2.CMsgBotWorldState.AvoidanceZone
	(*CMsgBotWorldState_Courier)(nil),                               // 14: dota2.CMsgBotWorldState.Courier
	(*CMsgBotWorldState_EventAbility)(nil),                          // 15: dota2.CMsgBotWorldState.EventAbility
	(*CMsgBotWorldState_EventDamage)(nil),                           // 16: dota2.CMsgBotWorldState.EventDamage
	(*CMsgBotWorldState_EventCourierKilled)(nil),                    // 17: dota2.CMsgBotWorldState.EventCourierKilled
	(*CMsgBotWorldState_EventRoshanKilled)(nil),                     // 18: dota2.CMsgBotWorldState.EventRoshanKilled
	(*CMsgBotWorldState_EventTree)(nil),                             // 19: dota2.CMsgBotWorldState.EventTree
	(*CMsgBotWorldState_Unit)(nil),                                  // 20: dota2.CMsgBotWorldState.Unit
	(*CMsgBotWorldState_Actions)(nil),                               // 21: dota2.CMsgBotWorldState.Actions
	(*CMsgBotWorldState_Action)(nil),                                // 22: dota2.CMsgBotWorldState.Action
	(*CMsgBotWorldState_Actions_OceanAnnotation)(nil),               // 23: dota2.CMsgBotWorldState.Actions.OceanAnnotation
	(*CMsgBotWorldState_Actions_Header)(nil),                        // 24: dota2.CMsgBotWorldState.Actions.Header
	(*CMsgBotWorldState_Actions_OceanAnnotation_Hero)(nil),          // 25: dota2.CMsgBotWorldState.Actions.OceanAnnotation.Hero
	(*CMsgBotWorldState_Action_MoveToLocation)(nil),                 // 26: dota2.CMsgBotWorldState.Action.MoveToLocation
	(*CMsgBotWorldState_Action_MoveToTarget)(nil),                   // 27: dota2.CMsgBotWorldState.Action.MoveToTarget
	(*CMsgBotWorldState_Action_AttackMove)(nil),                     // 28: dota2.CMsgBotWorldState.Action.AttackMove
	(*CMsgBotWorldState_Action_AttackTarget)(nil),                   // 29: dota2.CMsgBotWorldState.Action.AttackTarget
	(*CMsgBotWorldState_Action_HoldLocation)(nil),                   // 30: dota2.CMsgBotWorldState.Action.HoldLocation
	(*CMsgBotWorldState_Action_Stop)(nil),                           // 31: dota2.CMsgBotWorldState.Action.Stop
	(*CMsgBotWorldState_Action_CastLocation)(nil),                   // 32: dota2.CMsgBotWorldState.Action.CastLocation
	(*CMsgBotWorldState_Action_CastTarget)(nil),                     // 33: dota2.CMsgBotWorldState.Action.CastTarget
	(*CMsgBotWorldState_Action_CastTree)(nil),                       // 34: dota2.CMsgBotWorldState.Action.CastTree
	(*CMsgBotWorldState_Action_Cast)(nil),                           // 35: dota2.CMsgBotWorldState.Action.Cast
	(*CMsgBotWorldState_Action_CastToggle)(nil),                     // 36: dota2.CMsgBotWorldState.Action.CastToggle
	(*CMsgBotWorldState_Action_TrainAbility)(nil),                   // 37: dota2.CMsgBotWorldState.Action.TrainAbility
	(*CMsgBotWorldState_Action_DropItem)(nil),                       // 38: dota2.CMsgBotWorldState.Action.DropItem
	(*CMsgBotWorldState_Action_PickUpItem)(nil),                     // 39: dota2.CMsgBotWorldState.Action.PickUpItem
	(*CMsgBotWorldState_Action_PurchaseItem)(nil),                   // 40: dota2.CMsgBotWorldState.Action.PurchaseItem
	(*CMsgBotWorldState_Action_SellItem)(nil),                       // 41: dota2.CMsgBotWorldState.Action.SellItem
	(*CMsgBotWorldState_Action_SwapItems)(nil),                      // 42: dota2.CMsgBotWorldState.Action.SwapItems
	(*CMsgBotWorldState_Action_DisassembleItem)(nil),                // 43: dota2.CMsgBotWorldState.Action.DisassembleItem
	(*CMsgBotWorldState_Action_SetCombineLockItem)(nil),             // 44: dota2.CMsgBotWorldState.Action.SetCombineLockItem
	(*CMsgBotWorldState_Action_PickupRune)(nil),                     // 45: dota2.CMsgBotWorldState.Action.PickupRune
	(*CMsgBotWorldState_Action_Chat)(nil),                           // 46: dota2.CMsgBotWorldState.Action.Chat
	(*CMsgBotWorldState_Action_UseShrine)(nil),                      // 47: dota2.CMsgBotWorldState.Action.UseShrine
	(*CMsgBotWorldState_Action_Courier)(nil),                        // 48: dota2.CMsgBotWorldState.Action.Courier
	(*CMsgBotWorldState_Action_GetActualIncomingDamage)(nil),        // 49: dota2.CMsgBotWorldState.Action.GetActualIncomingDamage
	(*CMsgBotWorldState_Action_GetEstimatedDamageToTarget)(nil),     // 50: dota2.CMsgBotWorldState.Action.GetEstimatedDamageToTarget
	(*CMsgBotWorldState_Action_Glyph)(nil),                          // 51: dota2.CMsgBotWorldState.Action.Glyph
	(*CMsgBotWorldState_Action_SoftReset)(nil),                      // 52: dota2.CMsgBotWorldState.Action.SoftReset
	(*CMsgBotWorldState_Action_Buyback)(nil),                        // 53: dota2.CMsgBotWorldState.Action.Buyback
	(*CMsgBotWorldState_Action_ScriptingDebugDrawText)(nil),         // 54: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawText
	(*CMsgBotWorldState_Action_ScriptingDebugDrawLine)(nil),         // 55: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawLine
	(*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText)(nil),   // 56: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
	(*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty)(nil), // 57: dota2.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
	(*CMsgBotWorldState_Action_ScriptingDebugDrawBox)(nil),          // 58: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawBox
	(*CMsgBotWorldState_Action_ScriptingDebugDrawCircle)(nil),       // 59: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawCircle
	(*CMsgBotWorldState_Action_ScriptingDebugDrawClear)(nil),        // 60: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawClear
	(*CMsgBotWorldState_Action_OceanWinGame)(nil),                   // 61: dota2.CMsgBotWorldState.Action.OceanWinGame
	(*CMsgBotWorldState_Action_OceanReplayCorrectTime)(nil),         // 62: dota2.CMsgBotWorldState.Action.OceanReplayCorrectTime
}
var file_dota2_dota_gcmessages_common_bot_script_proto_depIdxs = []int32{
	5,  // 0: dota2.CMsgBotWorldState.players:type_name -> dota2.CMsgBotWorldState.Player
	20, // 1: dota2.CMsgBotWorldState.units:type_name -> dota2.CMsgBotWorldState.Unit
	7,  // 2: dota2.CMsgBotWorldState.dropped_items:type_name -> dota2.CMsgBotWorldState.DroppedItem
	8,  // 3: dota2.CMsgBotWorldState.rune_infos:type_name -> dota2.CMsgBotWorldState.RuneInfo
	9,  // 4: dota2.CMsgBotWorldState.incoming_teleports:type_name -> dota2.CMsgBotWorldState.TeleportInfo
	11, // 5: dota2.CMsgBotWorldState.linear_projectiles:type_name -> dota2.CMsgBotWorldState.LinearProjectile
	13, // 6: dota2.CMsgBotWorldState.avoidance_zones:type_name -> dota2.CMsgBotWorldState.AvoidanceZone
	14, // 7: dota2.CMsgBotWorldState.couriers:type_name -> dota2.CMsgBotWorldState.Courier
	15, // 8: dota2.CMsgBotWorldState.ability_events:type_name -> dota2.CMsgBotWorldState.EventAbility
	16, // 9: dota2.CMsgBotWorldState.damage_events:type_name -> dota2.CMsgBotWorldState.EventDamage
	17, // 10: dota2.CMsgBotWorldState.courier_killed_events:type_name -> dota2.CMsgBotWorldState.EventCourierKilled
	18, // 11: dota2.CMsgBotWorldState.roshan_killed_events:type_name -> dota2.CMsgBotWorldState.EventRoshanKilled
	19, // 12: dota2.CMsgBotWorldState.tree_events:type_name -> dota2.CMsgBotWorldState.EventTree
	4,  // 13: dota2.CMsgBotWorldState.DroppedItem.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 14: dota2.CMsgBotWorldState.RuneInfo.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 15: dota2.CMsgBotWorldState.TeleportInfo.location:type_name -> dota2.CMsgBotWorldState.Vector
	0,  // 16: dota2.CMsgBotWorldState.LinearProjectile.caster_unit_type:type_name -> dota2.CMsgBotWorldState.UnitType
	4,  // 17: dota2.CMsgBotWorldState.LinearProjectile.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 18: dota2.CMsgBotWorldState.LinearProjectile.velocity:type_name -> dota2.CMsgBotWorldState.Vector
	0,  // 19: dota2.CMsgBotWorldState.TrackingProjectile.caster_unit_type:type_name -> dota2.CMsgBotWorldState.UnitType
	4,  // 20: dota2.CMsgBotWorldState.TrackingProjectile.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 21: dota2.CMsgBotWorldState.AvoidanceZone.location:type_name -> dota2.CMsgBotWorldState.Vector
	0,  // 22: dota2.CMsgBotWorldState.AvoidanceZone.caster_unit_type:type_name -> dota2.CMsgBotWorldState.UnitType
	1,  // 23: dota2.CMsgBotWorldState.Courier.state:type_name -> dota2.CMsgBotWorldState.CourierState
	4,  // 24: dota2.CMsgBotWorldState.EventAbility.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 25: dota2.CMsgBotWorldState.EventTree.location:type_name -> dota2.CMsgBotWorldState.Vector
	0,  // 26: dota2.CMsgBotWorldState.Unit.unit_type:type_name -> dota2.CMsgBotWorldState.UnitType
	4,  // 27: dota2.CMsgBotWorldState.Unit.location:type_name -> dota2.CMsgBotWorldState.Vector
	6,  // 28: dota2.CMsgBotWorldState.Unit.abilities:type_name -> dota2.CMsgBotWorldState.Ability
	6,  // 29: dota2.CMsgBotWorldState.Unit.items:type_name -> dota2.CMsgBotWorldState.Ability
	10, // 30: dota2.CMsgBotWorldState.Unit.modifiers:type_name -> dota2.CMsgBotWorldState.Modifier
	12, // 31: dota2.CMsgBotWorldState.Unit.incoming_tracking_projectiles:type_name -> dota2.CMsgBotWorldState.TrackingProjectile
	22, // 32: dota2.CMsgBotWorldState.Actions.actions:type_name -> dota2.CMsgBotWorldState.Action
	23, // 33: dota2.CMsgBotWorldState.Actions.oceanAnnotation:type_name -> dota2.CMsgBotWorldState.Actions.OceanAnnotation
	24, // 34: dota2.CMsgBotWorldState.Actions.header:type_name -> dota2.CMsgBotWorldState.Actions.Header
	2,  // 35: dota2.CMsgBotWorldState.Action.actionType:type_name -> dota2.CMsgBotWorldState.Action.Type
	26, // 36: dota2.CMsgBotWorldState.Action.moveToLocation:type_name -> dota2.CMsgBotWorldState.Action.MoveToLocation
	27, // 37: dota2.CMsgBotWorldState.Action.moveToTarget:type_name -> dota2.CMsgBotWorldState.Action.MoveToTarget
	28, // 38: dota2.CMsgBotWorldState.Action.attackMove:type_name -> dota2.CMsgBotWorldState.Action.AttackMove
	29, // 39: dota2.CMsgBotWorldState.Action.attackTarget:type_name -> dota2.CMsgBotWorldState.Action.AttackTarget
	32, // 40: dota2.CMsgBotWorldState.Action.castLocation:type_name -> dota2.CMsgBotWorldState.Action.CastLocation
	33, // 41: dota2.CMsgBotWorldState.Action.castTarget:type_name -> dota2.CMsgBotWorldState.Action.CastTarget
	34, // 42: dota2.CMsgBotWorldState.Action.castTree:type_name -> dota2.CMsgBotWorldState.Action.CastTree
	35, // 43: dota2.CMsgBotWorldState.Action.cast:type_name -> dota2.CMsgBotWorldState.Action.Cast
	36, // 44: dota2.CMsgBotWorldState.Action.castToggle:type_name -> dota2.CMsgBotWorldState.Action.CastToggle
	30, // 45: dota2.CMsgBotWorldState.Action.holdLocation:type_name -> dota2.CMsgBotWorldState.Action.HoldLocation
	37, // 46: dota2.CMsgBotWorldState.Action.trainAbility:type_name -> dota2.CMsgBotWorldState.Action.TrainAbility
	38, // 47: dota2.CMsgBotWorldState.Action.dropItem:type_name -> dota2.CMsgBotWorldState.Action.DropItem
	39, // 48: dota2.CMsgBotWorldState.Action.pickUpItem:type_name -> dota2.CMsgBotWorldState.Action.PickUpItem
	45, // 49: dota2.CMsgBotWorldState.Action.pickupRune:type_name -> dota2.CMsgBotWorldState.Action.PickupRune
	40, // 50: dota2.CMsgBotWorldState.Action.purchaseItem:type_name -> dota2.CMsgBotWorldState.Action.PurchaseItem
	41, // 51: dota2.CMsgBotWorldState.Action.sellItem:type_name -> dota2.CMsgBotWorldState.Action.SellItem
	43, // 52: dota2.CMsgBotWorldState.Action.disassembleItem:type_name -> dota2.CMsgBotWorldState.Action.DisassembleItem
	44, // 53: dota2.CMsgBotWorldState.Action.setCombineLockItem:type_name -> dota2.CMsgBotWorldState.Action.SetCombineLockItem
	31, // 54: dota2.CMsgBotWorldState.Action.stop:type_name -> dota2.CMsgBotWorldState.Action.Stop
	46, // 55: dota2.CMsgBotWorldState.Action.chat:type_name -> dota2.CMsgBotWorldState.Action.Chat
	42, // 56: dota2.CMsgBotWorldState.Action.swapItems:type_name -> dota2.CMsgBotWorldState.Action.SwapItems
	47, // 57: dota2.CMsgBotWorldState.Action.useShrine:type_name -> dota2.CMsgBotWorldState.Action.UseShrine
	48, // 58: dota2.CMsgBotWorldState.Action.courier:type_name -> dota2.CMsgBotWorldState.Action.Courier
	49, // 59: dota2.CMsgBotWorldState.Action.getActualIncomingDamage:type_name -> dota2.CMsgBotWorldState.Action.GetActualIncomingDamage
	50, // 60: dota2.CMsgBotWorldState.Action.getEstimatedDamageToTarget:type_name -> dota2.CMsgBotWorldState.Action.GetEstimatedDamageToTarget
	51, // 61: dota2.CMsgBotWorldState.Action.glyph:type_name -> dota2.CMsgBotWorldState.Action.Glyph
	52, // 62: dota2.CMsgBotWorldState.Action.softReset:type_name -> dota2.CMsgBotWorldState.Action.SoftReset
	53, // 63: dota2.CMsgBotWorldState.Action.buyback:type_name -> dota2.CMsgBotWorldState.Action.Buyback
	54, // 64: dota2.CMsgBotWorldState.Action.scriptingDebugDrawText:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawText
	55, // 65: dota2.CMsgBotWorldState.Action.scriptingDebugDrawLine:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawLine
	56, // 66: dota2.CMsgBotWorldState.Action.scriptingDebugDrawScreenText:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawScreenText
	58, // 67: dota2.CMsgBotWorldState.Action.scriptingDebugDrawBox:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawBox
	59, // 68: dota2.CMsgBotWorldState.Action.scriptingDebugDrawCircle:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawCircle
	60, // 69: dota2.CMsgBotWorldState.Action.scriptingDebugDrawClear:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugDrawClear
	57, // 70: dota2.CMsgBotWorldState.Action.scriptingDebugScreenTextPretty:type_name -> dota2.CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty
	26, // 71: dota2.CMsgBotWorldState.Action.moveDirectly:type_name -> dota2.CMsgBotWorldState.Action.MoveToLocation
	61, // 72: dota2.CMsgBotWorldState.Action.oceanWinGame:type_name -> dota2.CMsgBotWorldState.Action.OceanWinGame
	62, // 73: dota2.CMsgBotWorldState.Action.oceanReplayCorrectTime:type_name -> dota2.CMsgBotWorldState.Action.OceanReplayCorrectTime
	25, // 74: dota2.CMsgBotWorldState.Actions.OceanAnnotation.heroes:type_name -> dota2.CMsgBotWorldState.Actions.OceanAnnotation.Hero
	4,  // 75: dota2.CMsgBotWorldState.Action.MoveToLocation.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 76: dota2.CMsgBotWorldState.Action.AttackMove.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 77: dota2.CMsgBotWorldState.Action.CastLocation.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 78: dota2.CMsgBotWorldState.Action.DropItem.location:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 79: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawText.origin:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 80: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawLine.origin:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 81: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawLine.target:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 82: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawBox.origin:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 83: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawBox.minimum:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 84: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawBox.maximum:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 85: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.center:type_name -> dota2.CMsgBotWorldState.Vector
	4,  // 86: dota2.CMsgBotWorldState.Action.ScriptingDebugDrawCircle.vRgb:type_name -> dota2.CMsgBotWorldState.Vector
	87, // [87:87] is the sub-list for method output_type
	87, // [87:87] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_dota2_dota_gcmessages_common_bot_script_proto_init() }
func file_dota2_dota_gcmessages_common_bot_script_proto_init() {
	if File_dota2_dota_gcmessages_common_bot_script_proto != nil {
		return
	}
	file_dota2_valveextensions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Ability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_DroppedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_RuneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_TeleportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_LinearProjectile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_TrackingProjectile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_AvoidanceZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Courier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_EventAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_EventDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_EventCourierKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_EventRoshanKilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_EventTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Actions_OceanAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Actions_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Actions_OceanAnnotation_Hero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_MoveToLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_MoveToTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_AttackMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_AttackTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_HoldLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Stop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_CastLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_CastTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_CastTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Cast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_CastToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_TrainAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_DropItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_PickUpItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_PurchaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_SellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_SwapItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_DisassembleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_SetCombineLockItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_PickupRune); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_UseShrine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Courier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_GetActualIncomingDamage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_GetEstimatedDamageToTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Glyph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_SoftReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_Buyback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawCircle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_ScriptingDebugDrawClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_OceanWinGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBotWorldState_Action_OceanReplayCorrectTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*CMsgBotWorldState_Action_MoveToLocation_)(nil),
		(*CMsgBotWorldState_Action_MoveToTarget_)(nil),
		(*CMsgBotWorldState_Action_AttackMove_)(nil),
		(*CMsgBotWorldState_Action_AttackTarget_)(nil),
		(*CMsgBotWorldState_Action_CastLocation_)(nil),
		(*CMsgBotWorldState_Action_CastTarget_)(nil),
		(*CMsgBotWorldState_Action_CastTree_)(nil),
		(*CMsgBotWorldState_Action_Cast_)(nil),
		(*CMsgBotWorldState_Action_CastToggle_)(nil),
		(*CMsgBotWorldState_Action_HoldLocation_)(nil),
		(*CMsgBotWorldState_Action_TrainAbility_)(nil),
		(*CMsgBotWorldState_Action_DropItem_)(nil),
		(*CMsgBotWorldState_Action_PickUpItem_)(nil),
		(*CMsgBotWorldState_Action_PickupRune_)(nil),
		(*CMsgBotWorldState_Action_PurchaseItem_)(nil),
		(*CMsgBotWorldState_Action_SellItem_)(nil),
		(*CMsgBotWorldState_Action_DisassembleItem_)(nil),
		(*CMsgBotWorldState_Action_SetCombineLockItem_)(nil),
		(*CMsgBotWorldState_Action_Stop_)(nil),
		(*CMsgBotWorldState_Action_Chat_)(nil),
		(*CMsgBotWorldState_Action_SwapItems_)(nil),
		(*CMsgBotWorldState_Action_UseShrine_)(nil),
		(*CMsgBotWorldState_Action_Courier_)(nil),
		(*CMsgBotWorldState_Action_GetActualIncomingDamage_)(nil),
		(*CMsgBotWorldState_Action_GetEstimatedDamageToTarget_)(nil),
		(*CMsgBotWorldState_Action_Glyph_)(nil),
		(*CMsgBotWorldState_Action_SoftReset_)(nil),
		(*CMsgBotWorldState_Action_Buyback_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawText_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawLine_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawBox_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawCircle_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugDrawClear_)(nil),
		(*CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_)(nil),
		(*CMsgBotWorldState_Action_MoveDirectly)(nil),
		(*CMsgBotWorldState_Action_OceanWinGame_)(nil),
		(*CMsgBotWorldState_Action_OceanReplayCorrectTime_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota2_dota_gcmessages_common_bot_script_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota2_dota_gcmessages_common_bot_script_proto_goTypes,
		DependencyIndexes: file_dota2_dota_gcmessages_common_bot_script_proto_depIdxs,
		EnumInfos:         file_dota2_dota_gcmessages_common_bot_script_proto_enumTypes,
		MessageInfos:      file_dota2_dota_gcmessages_common_bot_script_proto_msgTypes,
	}.Build()
	File_dota2_dota_gcmessages_common_bot_script_proto = out.File
	file_dota2_dota_gcmessages_common_bot_script_proto_rawDesc = nil
	file_dota2_dota_gcmessages_common_bot_script_proto_goTypes = nil
	file_dota2_dota_gcmessages_common_bot_script_proto_depIdxs = nil
}
