// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: dota2/dota_commonmessages.proto

package dota2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDOTAStatPopupTypes int32

const (
	EDOTAStatPopupTypes_k_EDOTA_SPT_Textline  EDOTAStatPopupTypes = 0
	EDOTAStatPopupTypes_k_EDOTA_SPT_Basic     EDOTAStatPopupTypes = 1
	EDOTAStatPopupTypes_k_EDOTA_SPT_Poll      EDOTAStatPopupTypes = 2
	EDOTAStatPopupTypes_k_EDOTA_SPT_Grid      EDOTAStatPopupTypes = 3
	EDOTAStatPopupTypes_k_EDOTA_SPT_DualImage EDOTAStatPopupTypes = 4
	EDOTAStatPopupTypes_k_EDOTA_SPT_Movie     EDOTAStatPopupTypes = 5
)

// Enum value maps for EDOTAStatPopupTypes.
var (
	EDOTAStatPopupTypes_name = map[int32]string{
		0: "k_EDOTA_SPT_Textline",
		1: "k_EDOTA_SPT_Basic",
		2: "k_EDOTA_SPT_Poll",
		3: "k_EDOTA_SPT_Grid",
		4: "k_EDOTA_SPT_DualImage",
		5: "k_EDOTA_SPT_Movie",
	}
	EDOTAStatPopupTypes_value = map[string]int32{
		"k_EDOTA_SPT_Textline":  0,
		"k_EDOTA_SPT_Basic":     1,
		"k_EDOTA_SPT_Poll":      2,
		"k_EDOTA_SPT_Grid":      3,
		"k_EDOTA_SPT_DualImage": 4,
		"k_EDOTA_SPT_Movie":     5,
	}
)

func (x EDOTAStatPopupTypes) Enum() *EDOTAStatPopupTypes {
	p := new(EDOTAStatPopupTypes)
	*p = x
	return p
}

func (x EDOTAStatPopupTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTAStatPopupTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_commonmessages_proto_enumTypes[0].Descriptor()
}

func (EDOTAStatPopupTypes) Type() protoreflect.EnumType {
	return &file_dota2_dota_commonmessages_proto_enumTypes[0]
}

func (x EDOTAStatPopupTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTAStatPopupTypes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTAStatPopupTypes(num)
	return nil
}

// Deprecated: Use EDOTAStatPopupTypes.Descriptor instead.
func (EDOTAStatPopupTypes) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{0}
}

type DotaunitorderT int32

const (
	DotaunitorderT_DOTA_UNIT_ORDER_NONE                              DotaunitorderT = 0
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_POSITION                  DotaunitorderT = 1
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_TARGET                    DotaunitorderT = 2
	DotaunitorderT_DOTA_UNIT_ORDER_ATTACK_MOVE                       DotaunitorderT = 3
	DotaunitorderT_DOTA_UNIT_ORDER_ATTACK_TARGET                     DotaunitorderT = 4
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_POSITION                     DotaunitorderT = 5
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TARGET                       DotaunitorderT = 6
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TARGET_TREE                  DotaunitorderT = 7
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_NO_TARGET                    DotaunitorderT = 8
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TOGGLE                       DotaunitorderT = 9
	DotaunitorderT_DOTA_UNIT_ORDER_HOLD_POSITION                     DotaunitorderT = 10
	DotaunitorderT_DOTA_UNIT_ORDER_TRAIN_ABILITY                     DotaunitorderT = 11
	DotaunitorderT_DOTA_UNIT_ORDER_DROP_ITEM                         DotaunitorderT = 12
	DotaunitorderT_DOTA_UNIT_ORDER_GIVE_ITEM                         DotaunitorderT = 13
	DotaunitorderT_DOTA_UNIT_ORDER_PICKUP_ITEM                       DotaunitorderT = 14
	DotaunitorderT_DOTA_UNIT_ORDER_PICKUP_RUNE                       DotaunitorderT = 15
	DotaunitorderT_DOTA_UNIT_ORDER_PURCHASE_ITEM                     DotaunitorderT = 16
	DotaunitorderT_DOTA_UNIT_ORDER_SELL_ITEM                         DotaunitorderT = 17
	DotaunitorderT_DOTA_UNIT_ORDER_DISASSEMBLE_ITEM                  DotaunitorderT = 18
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_ITEM                         DotaunitorderT = 19
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO                  DotaunitorderT = 20
	DotaunitorderT_DOTA_UNIT_ORDER_STOP                              DotaunitorderT = 21
	DotaunitorderT_DOTA_UNIT_ORDER_TAUNT                             DotaunitorderT = 22
	DotaunitorderT_DOTA_UNIT_ORDER_BUYBACK                           DotaunitorderT = 23
	DotaunitorderT_DOTA_UNIT_ORDER_GLYPH                             DotaunitorderT = 24
	DotaunitorderT_DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH             DotaunitorderT = 25
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_RUNE                         DotaunitorderT = 26
	DotaunitorderT_DOTA_UNIT_ORDER_PING_ABILITY                      DotaunitorderT = 27
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_DIRECTION                 DotaunitorderT = 28
	DotaunitorderT_DOTA_UNIT_ORDER_PATROL                            DotaunitorderT = 29
	DotaunitorderT_DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION            DotaunitorderT = 30
	DotaunitorderT_DOTA_UNIT_ORDER_RADAR                             DotaunitorderT = 31
	DotaunitorderT_DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK             DotaunitorderT = 32
	DotaunitorderT_DOTA_UNIT_ORDER_CONTINUE                          DotaunitorderT = 33
	DotaunitorderT_DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED            DotaunitorderT = 34
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_RIVER_PAINT                  DotaunitorderT = 35
	DotaunitorderT_DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT    DotaunitorderT = 36
	DotaunitorderT_DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN             DotaunitorderT = 37
	DotaunitorderT_DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH DotaunitorderT = 38
)

// Enum value maps for DotaunitorderT.
var (
	DotaunitorderT_name = map[int32]string{
		0:  "DOTA_UNIT_ORDER_NONE",
		1:  "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
		2:  "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
		3:  "DOTA_UNIT_ORDER_ATTACK_MOVE",
		4:  "DOTA_UNIT_ORDER_ATTACK_TARGET",
		5:  "DOTA_UNIT_ORDER_CAST_POSITION",
		6:  "DOTA_UNIT_ORDER_CAST_TARGET",
		7:  "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
		8:  "DOTA_UNIT_ORDER_CAST_NO_TARGET",
		9:  "DOTA_UNIT_ORDER_CAST_TOGGLE",
		10: "DOTA_UNIT_ORDER_HOLD_POSITION",
		11: "DOTA_UNIT_ORDER_TRAIN_ABILITY",
		12: "DOTA_UNIT_ORDER_DROP_ITEM",
		13: "DOTA_UNIT_ORDER_GIVE_ITEM",
		14: "DOTA_UNIT_ORDER_PICKUP_ITEM",
		15: "DOTA_UNIT_ORDER_PICKUP_RUNE",
		16: "DOTA_UNIT_ORDER_PURCHASE_ITEM",
		17: "DOTA_UNIT_ORDER_SELL_ITEM",
		18: "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
		19: "DOTA_UNIT_ORDER_MOVE_ITEM",
		20: "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
		21: "DOTA_UNIT_ORDER_STOP",
		22: "DOTA_UNIT_ORDER_TAUNT",
		23: "DOTA_UNIT_ORDER_BUYBACK",
		24: "DOTA_UNIT_ORDER_GLYPH",
		25: "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
		26: "DOTA_UNIT_ORDER_CAST_RUNE",
		27: "DOTA_UNIT_ORDER_PING_ABILITY",
		28: "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
		29: "DOTA_UNIT_ORDER_PATROL",
		30: "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION",
		31: "DOTA_UNIT_ORDER_RADAR",
		32: "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK",
		33: "DOTA_UNIT_ORDER_CONTINUE",
		34: "DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED",
		35: "DOTA_UNIT_ORDER_CAST_RIVER_PAINT",
		36: "DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT",
		37: "DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN",
		38: "DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH",
	}
	DotaunitorderT_value = map[string]int32{
		"DOTA_UNIT_ORDER_NONE":                              0,
		"DOTA_UNIT_ORDER_MOVE_TO_POSITION":                  1,
		"DOTA_UNIT_ORDER_MOVE_TO_TARGET":                    2,
		"DOTA_UNIT_ORDER_ATTACK_MOVE":                       3,
		"DOTA_UNIT_ORDER_ATTACK_TARGET":                     4,
		"DOTA_UNIT_ORDER_CAST_POSITION":                     5,
		"DOTA_UNIT_ORDER_CAST_TARGET":                       6,
		"DOTA_UNIT_ORDER_CAST_TARGET_TREE":                  7,
		"DOTA_UNIT_ORDER_CAST_NO_TARGET":                    8,
		"DOTA_UNIT_ORDER_CAST_TOGGLE":                       9,
		"DOTA_UNIT_ORDER_HOLD_POSITION":                     10,
		"DOTA_UNIT_ORDER_TRAIN_ABILITY":                     11,
		"DOTA_UNIT_ORDER_DROP_ITEM":                         12,
		"DOTA_UNIT_ORDER_GIVE_ITEM":                         13,
		"DOTA_UNIT_ORDER_PICKUP_ITEM":                       14,
		"DOTA_UNIT_ORDER_PICKUP_RUNE":                       15,
		"DOTA_UNIT_ORDER_PURCHASE_ITEM":                     16,
		"DOTA_UNIT_ORDER_SELL_ITEM":                         17,
		"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM":                  18,
		"DOTA_UNIT_ORDER_MOVE_ITEM":                         19,
		"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO":                  20,
		"DOTA_UNIT_ORDER_STOP":                              21,
		"DOTA_UNIT_ORDER_TAUNT":                             22,
		"DOTA_UNIT_ORDER_BUYBACK":                           23,
		"DOTA_UNIT_ORDER_GLYPH":                             24,
		"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH":             25,
		"DOTA_UNIT_ORDER_CAST_RUNE":                         26,
		"DOTA_UNIT_ORDER_PING_ABILITY":                      27,
		"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION":                 28,
		"DOTA_UNIT_ORDER_PATROL":                            29,
		"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION":            30,
		"DOTA_UNIT_ORDER_RADAR":                             31,
		"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK":             32,
		"DOTA_UNIT_ORDER_CONTINUE":                          33,
		"DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED":            34,
		"DOTA_UNIT_ORDER_CAST_RIVER_PAINT":                  35,
		"DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT":    36,
		"DOTA_UNIT_ORDER_DROP_ITEM_AT_FOUNTAIN":             37,
		"DOTA_UNIT_ORDER_TAKE_ITEM_FROM_NEUTRAL_ITEM_STASH": 38,
	}
)

func (x DotaunitorderT) Enum() *DotaunitorderT {
	p := new(DotaunitorderT)
	*p = x
	return p
}

func (x DotaunitorderT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DotaunitorderT) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_commonmessages_proto_enumTypes[1].Descriptor()
}

func (DotaunitorderT) Type() protoreflect.EnumType {
	return &file_dota2_dota_commonmessages_proto_enumTypes[1]
}

func (x DotaunitorderT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DotaunitorderT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DotaunitorderT(num)
	return nil
}

// Deprecated: Use DotaunitorderT.Descriptor instead.
func (DotaunitorderT) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{1}
}

type CDOTAMsg_LocationPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X          *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y          *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Target     *int32 `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	DirectPing *bool  `protobuf:"varint,4,opt,name=direct_ping,json=directPing" json:"direct_ping,omitempty"`
	Type       *int32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
}

func (x *CDOTAMsg_LocationPing) Reset() {
	*x = CDOTAMsg_LocationPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_LocationPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_LocationPing) ProtoMessage() {}

func (x *CDOTAMsg_LocationPing) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_LocationPing.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_LocationPing) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CDOTAMsg_LocationPing) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTAMsg_LocationPing) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CDOTAMsg_LocationPing) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

func (x *CDOTAMsg_LocationPing) GetDirectPing() bool {
	if x != nil && x.DirectPing != nil {
		return *x.DirectPing
	}
	return false
}

func (x *CDOTAMsg_LocationPing) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CDOTAMsg_ItemAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X             *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y             *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	ItemAbilityId *int32 `protobuf:"varint,3,opt,name=item_ability_id,json=itemAbilityId" json:"item_ability_id,omitempty"`
}

func (x *CDOTAMsg_ItemAlert) Reset() {
	*x = CDOTAMsg_ItemAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_ItemAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_ItemAlert) ProtoMessage() {}

func (x *CDOTAMsg_ItemAlert) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_ItemAlert.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_ItemAlert) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CDOTAMsg_ItemAlert) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTAMsg_ItemAlert) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CDOTAMsg_ItemAlert) GetItemAbilityId() int32 {
	if x != nil && x.ItemAbilityId != nil {
		return *x.ItemAbilityId
	}
	return 0
}

type CDOTAMsg_MapLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y       *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Initial *bool  `protobuf:"varint,3,opt,name=initial" json:"initial,omitempty"`
}

func (x *CDOTAMsg_MapLine) Reset() {
	*x = CDOTAMsg_MapLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_MapLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_MapLine) ProtoMessage() {}

func (x *CDOTAMsg_MapLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_MapLine.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_MapLine) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CDOTAMsg_MapLine) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTAMsg_MapLine) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CDOTAMsg_MapLine) GetInitial() bool {
	if x != nil && x.Initial != nil {
		return *x.Initial
	}
	return false
}

type CDOTAMsg_WorldLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y       *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z       *int32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
	Initial *bool  `protobuf:"varint,4,opt,name=initial" json:"initial,omitempty"`
	End     *bool  `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
}

func (x *CDOTAMsg_WorldLine) Reset() {
	*x = CDOTAMsg_WorldLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_WorldLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_WorldLine) ProtoMessage() {}

func (x *CDOTAMsg_WorldLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_WorldLine.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_WorldLine) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CDOTAMsg_WorldLine) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTAMsg_WorldLine) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CDOTAMsg_WorldLine) GetZ() int32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *CDOTAMsg_WorldLine) GetInitial() bool {
	if x != nil && x.Initial != nil {
		return *x.Initial
	}
	return false
}

func (x *CDOTAMsg_WorldLine) GetEnd() bool {
	if x != nil && x.End != nil {
		return *x.End
	}
	return false
}

type CDOTAMsg_SendStatPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style          *EDOTAStatPopupTypes `protobuf:"varint,1,opt,name=style,enum=dota2.EDOTAStatPopupTypes,def=0" json:"style,omitempty"`
	StatStrings    []string             `protobuf:"bytes,2,rep,name=stat_strings,json=statStrings" json:"stat_strings,omitempty"`
	StatImages     []int32              `protobuf:"varint,3,rep,name=stat_images,json=statImages" json:"stat_images,omitempty"`
	StatImageTypes []int32              `protobuf:"varint,4,rep,name=stat_image_types,json=statImageTypes" json:"stat_image_types,omitempty"`
	Duration       *float32             `protobuf:"fixed32,5,opt,name=duration" json:"duration,omitempty"`
	UseHtml        *bool                `protobuf:"varint,6,opt,name=use_html,json=useHtml" json:"use_html,omitempty"`
	MovieName      *string              `protobuf:"bytes,7,opt,name=movie_name,json=movieName" json:"movie_name,omitempty"`
}

// Default values for CDOTAMsg_SendStatPopup fields.
const (
	Default_CDOTAMsg_SendStatPopup_Style = EDOTAStatPopupTypes_k_EDOTA_SPT_Textline
)

func (x *CDOTAMsg_SendStatPopup) Reset() {
	*x = CDOTAMsg_SendStatPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_SendStatPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_SendStatPopup) ProtoMessage() {}

func (x *CDOTAMsg_SendStatPopup) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_SendStatPopup.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_SendStatPopup) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CDOTAMsg_SendStatPopup) GetStyle() EDOTAStatPopupTypes {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return Default_CDOTAMsg_SendStatPopup_Style
}

func (x *CDOTAMsg_SendStatPopup) GetStatStrings() []string {
	if x != nil {
		return x.StatStrings
	}
	return nil
}

func (x *CDOTAMsg_SendStatPopup) GetStatImages() []int32 {
	if x != nil {
		return x.StatImages
	}
	return nil
}

func (x *CDOTAMsg_SendStatPopup) GetStatImageTypes() []int32 {
	if x != nil {
		return x.StatImageTypes
	}
	return nil
}

func (x *CDOTAMsg_SendStatPopup) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CDOTAMsg_SendStatPopup) GetUseHtml() bool {
	if x != nil && x.UseHtml != nil {
		return *x.UseHtml
	}
	return false
}

func (x *CDOTAMsg_SendStatPopup) GetMovieName() string {
	if x != nil && x.MovieName != nil {
		return *x.MovieName
	}
	return ""
}

type CDOTAMsg_DismissAllStatPopups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeDelay *float32 `protobuf:"fixed32,1,opt,name=time_delay,json=timeDelay" json:"time_delay,omitempty"`
}

func (x *CDOTAMsg_DismissAllStatPopups) Reset() {
	*x = CDOTAMsg_DismissAllStatPopups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_DismissAllStatPopups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_DismissAllStatPopups) ProtoMessage() {}

func (x *CDOTAMsg_DismissAllStatPopups) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_DismissAllStatPopups.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_DismissAllStatPopups) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CDOTAMsg_DismissAllStatPopups) GetTimeDelay() float32 {
	if x != nil && x.TimeDelay != nil {
		return *x.TimeDelay
	}
	return 0
}

type CDOTAMsg_CoachHUDPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X       *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y       *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Tgtpath *string `protobuf:"bytes,3,opt,name=tgtpath" json:"tgtpath,omitempty"`
}

func (x *CDOTAMsg_CoachHUDPing) Reset() {
	*x = CDOTAMsg_CoachHUDPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_CoachHUDPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_CoachHUDPing) ProtoMessage() {}

func (x *CDOTAMsg_CoachHUDPing) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_CoachHUDPing.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_CoachHUDPing) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CDOTAMsg_CoachHUDPing) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CDOTAMsg_CoachHUDPing) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CDOTAMsg_CoachHUDPing) GetTgtpath() string {
	if x != nil && x.Tgtpath != nil {
		return *x.Tgtpath
	}
	return ""
}

type CDOTAMsg_UnitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer         *int32          `protobuf:"zigzag32,1,opt,name=issuer,def=-1" json:"issuer,omitempty"`
	OrderType      *DotaunitorderT `protobuf:"varint,2,opt,name=order_type,json=orderType,enum=dota2.DotaunitorderT,def=0" json:"order_type,omitempty"`
	Units          []int32         `protobuf:"varint,3,rep,name=units" json:"units,omitempty"`
	TargetIndex    *int32          `protobuf:"varint,4,opt,name=target_index,json=targetIndex" json:"target_index,omitempty"`
	AbilityIndex   *int32          `protobuf:"varint,5,opt,name=ability_index,json=abilityIndex" json:"ability_index,omitempty"`
	Position       *CMsgVector     `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	Queue          *bool           `protobuf:"varint,7,opt,name=queue" json:"queue,omitempty"`
	SequenceNumber *int32          `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	Flags          *uint32         `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
}

// Default values for CDOTAMsg_UnitOrder fields.
const (
	Default_CDOTAMsg_UnitOrder_Issuer    = int32(-1)
	Default_CDOTAMsg_UnitOrder_OrderType = DotaunitorderT_DOTA_UNIT_ORDER_NONE
)

func (x *CDOTAMsg_UnitOrder) Reset() {
	*x = CDOTAMsg_UnitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_commonmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTAMsg_UnitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTAMsg_UnitOrder) ProtoMessage() {}

func (x *CDOTAMsg_UnitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_commonmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTAMsg_UnitOrder.ProtoReflect.Descriptor instead.
func (*CDOTAMsg_UnitOrder) Descriptor() ([]byte, []int) {
	return file_dota2_dota_commonmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CDOTAMsg_UnitOrder) GetIssuer() int32 {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return Default_CDOTAMsg_UnitOrder_Issuer
}

func (x *CDOTAMsg_UnitOrder) GetOrderType() DotaunitorderT {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return Default_CDOTAMsg_UnitOrder_OrderType
}

func (x *CDOTAMsg_UnitOrder) GetUnits() []int32 {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CDOTAMsg_UnitOrder) GetTargetIndex() int32 {
	if x != nil && x.TargetIndex != nil {
		return *x.TargetIndex
	}
	return 0
}

func (x *CDOTAMsg_UnitOrder) GetAbilityIndex() int32 {
	if x != nil && x.AbilityIndex != nil {
		return *x.AbilityIndex
	}
	return 0
}

func (x *CDOTAMsg_UnitOrder) GetPosition() *CMsgVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CDOTAMsg_UnitOrder) GetQueue() bool {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return false
}

func (x *CDOTAMsg_UnitOrder) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CDOTAMsg_UnitOrder) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

var File_dota2_dota_commonmessages_proto protoreflect.FileDescriptor

var file_dota2_dota_commonmessages_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x73, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x44, 0x4f,
	0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f,
	0x4d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x6a, 0x0a,
	0x12, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x16, 0x43, 0x44,
	0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a,
	0x14, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x54, 0x5f, 0x54, 0x65, 0x78,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x48, 0x74, 0x6d,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3e, 0x0a, 0x1d, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x44, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x22, 0x4d, 0x0a, 0x15, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x48, 0x55, 0x44, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x67, 0x74, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x67, 0x74, 0x70, 0x61, 0x74, 0x68, 0x22,
	0xdf, 0x02, 0x0a, 0x12, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x73, 0x67, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x75, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x3a, 0x14,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x2a, 0xa4, 0x01, 0x0a, 0x13, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x74, 0x61, 0x74, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x54, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53,
	0x50, 0x54, 0x5f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x54, 0x5f, 0x50, 0x6f, 0x6c, 0x6c, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x54, 0x5f,
	0x47, 0x72, 0x69, 0x64, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x53, 0x50, 0x54, 0x5f, 0x44, 0x75, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x54,
	0x5f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x10, 0x05, 0x2a, 0xef, 0x0a, 0x0a, 0x0f, 0x64, 0x6f, 0x74,
	0x61, 0x75, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x5f,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52,
	0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10,
	0x12, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x13,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x15,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x55, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42,
	0x55, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x4c, 0x59, 0x50,
	0x48, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x53, 0x48, 0x10, 0x19, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x1a, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x1b, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x1d, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x41, 0x44, 0x41, 0x52, 0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45,
	0x10, 0x21, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x49,
	0x4e, 0x54, 0x10, 0x23, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x10, 0x25, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x53, 0x48, 0x10, 0x26, 0x42, 0x36, 0x48, 0x01, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x80,
	0x01, 0x00,
}

var (
	file_dota2_dota_commonmessages_proto_rawDescOnce sync.Once
	file_dota2_dota_commonmessages_proto_rawDescData = file_dota2_dota_commonmessages_proto_rawDesc
)

func file_dota2_dota_commonmessages_proto_rawDescGZIP() []byte {
	file_dota2_dota_commonmessages_proto_rawDescOnce.Do(func() {
		file_dota2_dota_commonmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota2_dota_commonmessages_proto_rawDescData)
	})
	return file_dota2_dota_commonmessages_proto_rawDescData
}

var file_dota2_dota_commonmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota2_dota_commonmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dota2_dota_commonmessages_proto_goTypes = []interface{}{
	(EDOTAStatPopupTypes)(0),              // 0: dota2.EDOTAStatPopupTypes
	(DotaunitorderT)(0),                   // 1: dota2.dotaunitorder_t
	(*CDOTAMsg_LocationPing)(nil),         // 2: dota2.CDOTAMsg_LocationPing
	(*CDOTAMsg_ItemAlert)(nil),            // 3: dota2.CDOTAMsg_ItemAlert
	(*CDOTAMsg_MapLine)(nil),              // 4: dota2.CDOTAMsg_MapLine
	(*CDOTAMsg_WorldLine)(nil),            // 5: dota2.CDOTAMsg_WorldLine
	(*CDOTAMsg_SendStatPopup)(nil),        // 6: dota2.CDOTAMsg_SendStatPopup
	(*CDOTAMsg_DismissAllStatPopups)(nil), // 7: dota2.CDOTAMsg_DismissAllStatPopups
	(*CDOTAMsg_CoachHUDPing)(nil),         // 8: dota2.CDOTAMsg_CoachHUDPing
	(*CDOTAMsg_UnitOrder)(nil),            // 9: dota2.CDOTAMsg_UnitOrder
	(*CMsgVector)(nil),                    // 10: dota2.CMsgVector
}
var file_dota2_dota_commonmessages_proto_depIdxs = []int32{
	0,  // 0: dota2.CDOTAMsg_SendStatPopup.style:type_name -> dota2.EDOTAStatPopupTypes
	1,  // 1: dota2.CDOTAMsg_UnitOrder.order_type:type_name -> dota2.dotaunitorder_t
	10, // 2: dota2.CDOTAMsg_UnitOrder.position:type_name -> dota2.CMsgVector
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_dota2_dota_commonmessages_proto_init() }
func file_dota2_dota_commonmessages_proto_init() {
	if File_dota2_dota_commonmessages_proto != nil {
		return
	}
	file_dota2_networkbasetypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota2_dota_commonmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_LocationPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_ItemAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_MapLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_WorldLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_SendStatPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_DismissAllStatPopups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_CoachHUDPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_commonmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTAMsg_UnitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota2_dota_commonmessages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota2_dota_commonmessages_proto_goTypes,
		DependencyIndexes: file_dota2_dota_commonmessages_proto_depIdxs,
		EnumInfos:         file_dota2_dota_commonmessages_proto_enumTypes,
		MessageInfos:      file_dota2_dota_commonmessages_proto_msgTypes,
	}.Build()
	File_dota2_dota_commonmessages_proto = out.File
	file_dota2_dota_commonmessages_proto_rawDesc = nil
	file_dota2_dota_commonmessages_proto_goTypes = nil
	file_dota2_dota_commonmessages_proto_depIdxs = nil
}
