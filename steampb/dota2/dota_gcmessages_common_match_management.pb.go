// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: dota2/dota_gcmessages_common_match_management.proto

package dota2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ELaneSelection int32

const (
	ELaneSelection_k_ELaneSelection_SAFELANE     ELaneSelection = 0
	ELaneSelection_k_ELaneSelection_OFFLANE      ELaneSelection = 1
	ELaneSelection_k_ELaneSelection_MIDLANE      ELaneSelection = 2
	ELaneSelection_k_ELaneSelection_SUPPORT_SOFT ELaneSelection = 3
	ELaneSelection_k_ELaneSelection_SUPPORT_HARD ELaneSelection = 4
)

// Enum value maps for ELaneSelection.
var (
	ELaneSelection_name = map[int32]string{
		0: "k_ELaneSelection_SAFELANE",
		1: "k_ELaneSelection_OFFLANE",
		2: "k_ELaneSelection_MIDLANE",
		3: "k_ELaneSelection_SUPPORT_SOFT",
		4: "k_ELaneSelection_SUPPORT_HARD",
	}
	ELaneSelection_value = map[string]int32{
		"k_ELaneSelection_SAFELANE":     0,
		"k_ELaneSelection_OFFLANE":      1,
		"k_ELaneSelection_MIDLANE":      2,
		"k_ELaneSelection_SUPPORT_SOFT": 3,
		"k_ELaneSelection_SUPPORT_HARD": 4,
	}
)

func (x ELaneSelection) Enum() *ELaneSelection {
	p := new(ELaneSelection)
	*p = x
	return p
}

func (x ELaneSelection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELaneSelection) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[0].Descriptor()
}

func (ELaneSelection) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[0]
}

func (x ELaneSelection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELaneSelection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELaneSelection(num)
	return nil
}

// Deprecated: Use ELaneSelection.Descriptor instead.
func (ELaneSelection) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{0}
}

type ELaneSelectionFlags int32

const (
	ELaneSelectionFlags_k_ELaneSelectionFlags_None         ELaneSelectionFlags = 0
	ELaneSelectionFlags_k_ELaneSelectionFlags_SAFELANE     ELaneSelectionFlags = 1
	ELaneSelectionFlags_k_ELaneSelectionFlags_OFFLANE      ELaneSelectionFlags = 2
	ELaneSelectionFlags_k_ELaneSelectionFlags_MIDLANE      ELaneSelectionFlags = 4
	ELaneSelectionFlags_k_ELaneSelectionFlags_CORE         ELaneSelectionFlags = 7
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_SOFT ELaneSelectionFlags = 8
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_HARD ELaneSelectionFlags = 16
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT      ELaneSelectionFlags = 24
	ELaneSelectionFlags_k_ELaneSelectionFlags_ALL          ELaneSelectionFlags = 31
)

// Enum value maps for ELaneSelectionFlags.
var (
	ELaneSelectionFlags_name = map[int32]string{
		0:  "k_ELaneSelectionFlags_None",
		1:  "k_ELaneSelectionFlags_SAFELANE",
		2:  "k_ELaneSelectionFlags_OFFLANE",
		4:  "k_ELaneSelectionFlags_MIDLANE",
		7:  "k_ELaneSelectionFlags_CORE",
		8:  "k_ELaneSelectionFlags_SUPPORT_SOFT",
		16: "k_ELaneSelectionFlags_SUPPORT_HARD",
		24: "k_ELaneSelectionFlags_SUPPORT",
		31: "k_ELaneSelectionFlags_ALL",
	}
	ELaneSelectionFlags_value = map[string]int32{
		"k_ELaneSelectionFlags_None":         0,
		"k_ELaneSelectionFlags_SAFELANE":     1,
		"k_ELaneSelectionFlags_OFFLANE":      2,
		"k_ELaneSelectionFlags_MIDLANE":      4,
		"k_ELaneSelectionFlags_CORE":         7,
		"k_ELaneSelectionFlags_SUPPORT_SOFT": 8,
		"k_ELaneSelectionFlags_SUPPORT_HARD": 16,
		"k_ELaneSelectionFlags_SUPPORT":      24,
		"k_ELaneSelectionFlags_ALL":          31,
	}
)

func (x ELaneSelectionFlags) Enum() *ELaneSelectionFlags {
	p := new(ELaneSelectionFlags)
	*p = x
	return p
}

func (x ELaneSelectionFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELaneSelectionFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[1].Descriptor()
}

func (ELaneSelectionFlags) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[1]
}

func (x ELaneSelectionFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELaneSelectionFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELaneSelectionFlags(num)
	return nil
}

// Deprecated: Use ELaneSelectionFlags.Descriptor instead.
func (ELaneSelectionFlags) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1}
}

type EPartyMatchmakingFlags int32

const (
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_None            EPartyMatchmakingFlags = 0
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_LargeRankSpread EPartyMatchmakingFlags = 1
)

// Enum value maps for EPartyMatchmakingFlags.
var (
	EPartyMatchmakingFlags_name = map[int32]string{
		0: "k_EPartyMatchmakingFlags_None",
		1: "k_EPartyMatchmakingFlags_LargeRankSpread",
	}
	EPartyMatchmakingFlags_value = map[string]int32{
		"k_EPartyMatchmakingFlags_None":            0,
		"k_EPartyMatchmakingFlags_LargeRankSpread": 1,
	}
)

func (x EPartyMatchmakingFlags) Enum() *EPartyMatchmakingFlags {
	p := new(EPartyMatchmakingFlags)
	*p = x
	return p
}

func (x EPartyMatchmakingFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPartyMatchmakingFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[2].Descriptor()
}

func (EPartyMatchmakingFlags) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[2]
}

func (x EPartyMatchmakingFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPartyMatchmakingFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPartyMatchmakingFlags(num)
	return nil
}

// Deprecated: Use EPartyMatchmakingFlags.Descriptor instead.
func (EPartyMatchmakingFlags) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2}
}

type EHighPriorityMMState int32

const (
	EHighPriorityMMState_k_EHighPriorityMM_Unknown          EHighPriorityMMState = 0
	EHighPriorityMMState_k_EHighPriorityMM_MissingMMData    EHighPriorityMMState = 1
	EHighPriorityMMState_k_EHighPriorityMM_ResourceMissing  EHighPriorityMMState = 2
	EHighPriorityMMState_k_EHighPriorityMM_ManuallyDisabled EHighPriorityMMState = 3
	EHighPriorityMMState_k_EHighPriorityMM_Min_Enabled      EHighPriorityMMState = 64
	EHighPriorityMMState_k_EHighPriorityMM_AllRolesSelected EHighPriorityMMState = 65
	EHighPriorityMMState_k_EHighPriorityMM_UsingResource    EHighPriorityMMState = 66
	EHighPriorityMMState_k_EHighPriorityMM_FiveStack        EHighPriorityMMState = 67
	EHighPriorityMMState_k_EHighPriorityMM_HighDemand       EHighPriorityMMState = 68
)

// Enum value maps for EHighPriorityMMState.
var (
	EHighPriorityMMState_name = map[int32]string{
		0:  "k_EHighPriorityMM_Unknown",
		1:  "k_EHighPriorityMM_MissingMMData",
		2:  "k_EHighPriorityMM_ResourceMissing",
		3:  "k_EHighPriorityMM_ManuallyDisabled",
		64: "k_EHighPriorityMM_Min_Enabled",
		65: "k_EHighPriorityMM_AllRolesSelected",
		66: "k_EHighPriorityMM_UsingResource",
		67: "k_EHighPriorityMM_FiveStack",
		68: "k_EHighPriorityMM_HighDemand",
	}
	EHighPriorityMMState_value = map[string]int32{
		"k_EHighPriorityMM_Unknown":          0,
		"k_EHighPriorityMM_MissingMMData":    1,
		"k_EHighPriorityMM_ResourceMissing":  2,
		"k_EHighPriorityMM_ManuallyDisabled": 3,
		"k_EHighPriorityMM_Min_Enabled":      64,
		"k_EHighPriorityMM_AllRolesSelected": 65,
		"k_EHighPriorityMM_UsingResource":    66,
		"k_EHighPriorityMM_FiveStack":        67,
		"k_EHighPriorityMM_HighDemand":       68,
	}
)

func (x EHighPriorityMMState) Enum() *EHighPriorityMMState {
	p := new(EHighPriorityMMState)
	*p = x
	return p
}

func (x EHighPriorityMMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHighPriorityMMState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[3].Descriptor()
}

func (EHighPriorityMMState) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[3]
}

func (x EHighPriorityMMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHighPriorityMMState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHighPriorityMMState(num)
	return nil
}

// Deprecated: Use EHighPriorityMMState.Descriptor instead.
func (EHighPriorityMMState) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

// Enum value maps for LobbyDotaTVDelay.
var (
	LobbyDotaTVDelay_name = map[int32]string{
		0: "LobbyDotaTV_10",
		1: "LobbyDotaTV_120",
		2: "LobbyDotaTV_300",
	}
	LobbyDotaTVDelay_value = map[string]int32{
		"LobbyDotaTV_10":  0,
		"LobbyDotaTV_120": 1,
		"LobbyDotaTV_300": 2,
	}
)

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaTVDelay) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[4].Descriptor()
}

func (LobbyDotaTVDelay) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[4]
}

func (x LobbyDotaTVDelay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaTVDelay) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(num)
	return nil
}

// Deprecated: Use LobbyDotaTVDelay.Descriptor instead.
func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{4}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

// Enum value maps for LobbyDotaPauseSetting.
var (
	LobbyDotaPauseSetting_name = map[int32]string{
		0: "LobbyDotaPauseSetting_Unlimited",
		1: "LobbyDotaPauseSetting_Limited",
		2: "LobbyDotaPauseSetting_Disabled",
	}
	LobbyDotaPauseSetting_value = map[string]int32{
		"LobbyDotaPauseSetting_Unlimited": 0,
		"LobbyDotaPauseSetting_Limited":   1,
		"LobbyDotaPauseSetting_Disabled":  2,
	}
)

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyDotaPauseSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[5].Descriptor()
}

func (LobbyDotaPauseSetting) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[5]
}

func (x LobbyDotaPauseSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LobbyDotaPauseSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(num)
	return nil
}

// Deprecated: Use LobbyDotaPauseSetting.Descriptor instead.
func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{5}
}

type EReadyCheckStatus int32

const (
	EReadyCheckStatus_k_EReadyCheckStatus_Unknown  EReadyCheckStatus = 0
	EReadyCheckStatus_k_EReadyCheckStatus_NotReady EReadyCheckStatus = 1
	EReadyCheckStatus_k_EReadyCheckStatus_Ready    EReadyCheckStatus = 2
)

// Enum value maps for EReadyCheckStatus.
var (
	EReadyCheckStatus_name = map[int32]string{
		0: "k_EReadyCheckStatus_Unknown",
		1: "k_EReadyCheckStatus_NotReady",
		2: "k_EReadyCheckStatus_Ready",
	}
	EReadyCheckStatus_value = map[string]int32{
		"k_EReadyCheckStatus_Unknown":  0,
		"k_EReadyCheckStatus_NotReady": 1,
		"k_EReadyCheckStatus_Ready":    2,
	}
)

func (x EReadyCheckStatus) Enum() *EReadyCheckStatus {
	p := new(EReadyCheckStatus)
	*p = x
	return p
}

func (x EReadyCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReadyCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[6].Descriptor()
}

func (EReadyCheckStatus) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[6]
}

func (x EReadyCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReadyCheckStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReadyCheckStatus(num)
	return nil
}

// Deprecated: Use EReadyCheckStatus.Descriptor instead.
func (EReadyCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{6}
}

type EReadyCheckRequestResult int32

const (
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success           EReadyCheckRequestResult = 0
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_AlreadyInProgress EReadyCheckRequestResult = 1
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_NotInParty        EReadyCheckRequestResult = 2
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_SendError         EReadyCheckRequestResult = 3
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_UnknownError      EReadyCheckRequestResult = 4
)

// Enum value maps for EReadyCheckRequestResult.
var (
	EReadyCheckRequestResult_name = map[int32]string{
		0: "k_EReadyCheckRequestResult_Success",
		1: "k_EReadyCheckRequestResult_AlreadyInProgress",
		2: "k_EReadyCheckRequestResult_NotInParty",
		3: "k_EReadyCheckRequestResult_SendError",
		4: "k_EReadyCheckRequestResult_UnknownError",
	}
	EReadyCheckRequestResult_value = map[string]int32{
		"k_EReadyCheckRequestResult_Success":           0,
		"k_EReadyCheckRequestResult_AlreadyInProgress": 1,
		"k_EReadyCheckRequestResult_NotInParty":        2,
		"k_EReadyCheckRequestResult_SendError":         3,
		"k_EReadyCheckRequestResult_UnknownError":      4,
	}
)

func (x EReadyCheckRequestResult) Enum() *EReadyCheckRequestResult {
	p := new(EReadyCheckRequestResult)
	*p = x
	return p
}

func (x EReadyCheckRequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReadyCheckRequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[7].Descriptor()
}

func (EReadyCheckRequestResult) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[7]
}

func (x EReadyCheckRequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReadyCheckRequestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReadyCheckRequestResult(num)
	return nil
}

// Deprecated: Use EReadyCheckRequestResult.Descriptor instead.
func (EReadyCheckRequestResult) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{7}
}

type EMatchBehaviorScoreVariance int32

const (
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid EMatchBehaviorScoreVariance = 0
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Low     EMatchBehaviorScoreVariance = 1
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Medium  EMatchBehaviorScoreVariance = 2
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_High    EMatchBehaviorScoreVariance = 3
)

// Enum value maps for EMatchBehaviorScoreVariance.
var (
	EMatchBehaviorScoreVariance_name = map[int32]string{
		0: "k_EMatchBehaviorScoreVariance_Invalid",
		1: "k_EMatchBehaviorScoreVariance_Low",
		2: "k_EMatchBehaviorScoreVariance_Medium",
		3: "k_EMatchBehaviorScoreVariance_High",
	}
	EMatchBehaviorScoreVariance_value = map[string]int32{
		"k_EMatchBehaviorScoreVariance_Invalid": 0,
		"k_EMatchBehaviorScoreVariance_Low":     1,
		"k_EMatchBehaviorScoreVariance_Medium":  2,
		"k_EMatchBehaviorScoreVariance_High":    3,
	}
)

func (x EMatchBehaviorScoreVariance) Enum() *EMatchBehaviorScoreVariance {
	p := new(EMatchBehaviorScoreVariance)
	*p = x
	return p
}

func (x EMatchBehaviorScoreVariance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchBehaviorScoreVariance) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[8].Descriptor()
}

func (EMatchBehaviorScoreVariance) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[8]
}

func (x EMatchBehaviorScoreVariance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchBehaviorScoreVariance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchBehaviorScoreVariance(num)
	return nil
}

// Deprecated: Use EMatchBehaviorScoreVariance.Descriptor instead.
func (EMatchBehaviorScoreVariance) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{8}
}

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

// Enum value maps for CSODOTAParty_State.
var (
	CSODOTAParty_State_name = map[int32]string{
		0: "UI",
		1: "FINDING_MATCH",
		2: "IN_MATCH",
	}
	CSODOTAParty_State_value = map[string]int32{
		"UI":            0,
		"FINDING_MATCH": 1,
		"IN_MATCH":      2,
	}
)

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}

func (x CSODOTAParty_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTAParty_State) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[9].Descriptor()
}

func (CSODOTAParty_State) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[9]
}

func (x CSODOTAParty_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTAParty_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(num)
	return nil
}

// Deprecated: Use CSODOTAParty_State.Descriptor instead.
func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1, 0}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

// Enum value maps for CSODOTALobby_State.
var (
	CSODOTALobby_State_name = map[int32]string{
		0: "UI",
		4: "READYUP",
		1: "SERVERSETUP",
		2: "RUN",
		3: "POSTGAME",
		5: "NOTREADY",
		6: "SERVERASSIGN",
	}
	CSODOTALobby_State_value = map[string]int32{
		"UI":           0,
		"READYUP":      4,
		"SERVERSETUP":  1,
		"RUN":          2,
		"POSTGAME":     3,
		"NOTREADY":     5,
		"SERVERASSIGN": 6,
	}
)

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_State) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[10].Descriptor()
}

func (CSODOTALobby_State) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[10]
}

func (x CSODOTALobby_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(num)
	return nil
}

// Deprecated: Use CSODOTALobby_State.Descriptor instead.
func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{9, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR               CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH             CSODOTALobby_LobbyType = 12
)

// Enum value maps for CSODOTALobby_LobbyType.
var (
	CSODOTALobby_LobbyType_name = map[int32]string{
		-1: "INVALID",
		0:  "CASUAL_MATCH",
		1:  "PRACTICE",
		4:  "COOP_BOT_MATCH",
		5:  "LEGACY_TEAM_MATCH",
		6:  "LEGACY_SOLO_QUEUE_MATCH",
		7:  "COMPETITIVE_MATCH",
		8:  "CASUAL_1V1_MATCH",
		9:  "WEEKEND_TOURNEY",
		10: "LOCAL_BOT_MATCH",
		11: "SPECTATOR",
		12: "EVENT_MATCH",
	}
	CSODOTALobby_LobbyType_value = map[string]int32{
		"INVALID":                 -1,
		"CASUAL_MATCH":            0,
		"PRACTICE":                1,
		"COOP_BOT_MATCH":          4,
		"LEGACY_TEAM_MATCH":       5,
		"LEGACY_SOLO_QUEUE_MATCH": 6,
		"COMPETITIVE_MATCH":       7,
		"CASUAL_1V1_MATCH":        8,
		"WEEKEND_TOURNEY":         9,
		"LOCAL_BOT_MATCH":         10,
		"SPECTATOR":               11,
		"EVENT_MATCH":             12,
	}
)

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODOTALobby_LobbyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[11].Descriptor()
}

func (CSODOTALobby_LobbyType) Type() protoreflect.EnumType {
	return &file_dota2_dota_gcmessages_common_match_management_proto_enumTypes[11]
}

func (x CSODOTALobby_LobbyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(num)
	return nil
}

// Deprecated: Use CSODOTALobby_LobbyType.Descriptor instead.
func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{9, 1}
}

type CSODOTAPartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerType             *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,json=partnerType,enum=dota2.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool               `protobuf:"varint,2,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32            `protobuf:"varint,4,rep,packed,name=region_ping_codes,json=regionPingCodes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32            `protobuf:"varint,5,rep,packed,name=region_ping_times,json=regionPingTimes" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32             `protobuf:"varint,6,opt,name=region_ping_failed_bitmask,json=regionPingFailedBitmask" json:"region_ping_failed_bitmask,omitempty"`
	IsPlusSubscriber        *bool               `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	TourneySkillLevel       *uint32             `protobuf:"varint,7,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBuyin            *uint32             `protobuf:"varint,8,opt,name=tourney_buyin,json=tourneyBuyin" json:"tourney_buyin,omitempty"`
	TourneyPreventUntil     *uint32             `protobuf:"varint,9,opt,name=tourney_prevent_until,json=tourneyPreventUntil" json:"tourney_prevent_until,omitempty"`
	MmDataValid             *bool               `protobuf:"varint,13,opt,name=mm_data_valid,json=mmDataValid" json:"mm_data_valid,omitempty"`
	LaneSelectionFlags      *uint32             `protobuf:"varint,11,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled    *bool               `protobuf:"varint,14,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
	HasHpResource           *bool               `protobuf:"varint,15,opt,name=has_hp_resource,json=hasHpResource" json:"has_hp_resource,omitempty"`
	JoinedFromPartyfinder   *bool               `protobuf:"varint,12,opt,name=joined_from_partyfinder,json=joinedFromPartyfinder" json:"joined_from_partyfinder,omitempty"`
}

// Default values for CSODOTAPartyMember fields.
const (
	Default_CSODOTAPartyMember_PartnerType = PartnerAccountType_PARTNER_NONE
)

func (x *CSODOTAPartyMember) Reset() {
	*x = CSODOTAPartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyMember) ProtoMessage() {}

func (x *CSODOTAPartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{0}
}

func (x *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if x != nil && x.PartnerType != nil {
		return *x.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (x *CSODOTAPartyMember) GetIsCoach() bool {
	if x != nil && x.IsCoach != nil {
		return *x.IsCoach
	}
	return false
}

func (x *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if x != nil {
		return x.RegionPingCodes
	}
	return nil
}

func (x *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if x != nil {
		return x.RegionPingTimes
	}
	return nil
}

func (x *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if x != nil && x.RegionPingFailedBitmask != nil {
		return *x.RegionPingFailedBitmask
	}
	return 0
}

func (x *CSODOTAPartyMember) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CSODOTAPartyMember) GetTourneySkillLevel() uint32 {
	if x != nil && x.TourneySkillLevel != nil {
		return *x.TourneySkillLevel
	}
	return 0
}

func (x *CSODOTAPartyMember) GetTourneyBuyin() uint32 {
	if x != nil && x.TourneyBuyin != nil {
		return *x.TourneyBuyin
	}
	return 0
}

func (x *CSODOTAPartyMember) GetTourneyPreventUntil() uint32 {
	if x != nil && x.TourneyPreventUntil != nil {
		return *x.TourneyPreventUntil
	}
	return 0
}

func (x *CSODOTAPartyMember) GetMmDataValid() bool {
	if x != nil && x.MmDataValid != nil {
		return *x.MmDataValid
	}
	return false
}

func (x *CSODOTAPartyMember) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CSODOTAPartyMember) GetHighPriorityDisabled() bool {
	if x != nil && x.HighPriorityDisabled != nil {
		return *x.HighPriorityDisabled
	}
	return false
}

func (x *CSODOTAPartyMember) GetHasHpResource() bool {
	if x != nil && x.HasHpResource != nil {
		return *x.HasHpResource
	}
	return false
}

func (x *CSODOTAPartyMember) GetJoinedFromPartyfinder() bool {
	if x != nil && x.JoinedFromPartyfinder != nil {
		return *x.JoinedFromPartyfinder
	}
	return false
}

type CSODOTAParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId                         *uint64                     `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                        *uint64                     `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                       []uint64                    `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	GameModes                       *uint32                     `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State         `protobuf:"varint,6,opt,name=state,enum=dota2.CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                     `protobuf:"varint,7,opt,name=effective_started_matchmaking_time,json=effectiveStartedMatchmakingTime" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                     `protobuf:"varint,32,opt,name=raw_started_matchmaking_time,json=rawStartedMatchmakingTime" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                     `protobuf:"varint,33,opt,name=attempt_start_time,json=attemptStartTime" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                     `protobuf:"varint,34,opt,name=attempt_num,json=attemptNum" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                     `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                     `protobuf:"varint,19,opt,name=low_priority_account_id,json=lowPriorityAccountId" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType                  `protobuf:"varint,21,opt,name=match_type,json=matchType,enum=dota2.MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty          `protobuf:"varint,22,opt,name=bot_difficulty,json=botDifficulty,enum=dota2.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                     `protobuf:"varint,23,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName                        *string                     `protobuf:"bytes,51,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamUiLogo                      *uint64                     `protobuf:"varint,52,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamBaseLogo                    *uint64                     `protobuf:"varint,53,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	MatchDisabledUntilDate          *uint32                     `protobuf:"varint,24,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                     `protobuf:"varint,25,opt,name=match_disabled_account_id,json=matchDisabledAccountId" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                     `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes,json=matchmakingMaxRangeMinutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                     `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	Members                         []*CSODOTAPartyMember       `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	LowPriorityGamesRemaining       *uint32                     `protobuf:"varint,35,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	OpenForJoinRequests             *bool                       `protobuf:"varint,40,opt,name=open_for_join_requests,json=openForJoinRequests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,41,rep,name=sent_invites,json=sentInvites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,42,rep,name=recv_invites,json=recvInvites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32                     `protobuf:"varint,43,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	RegionSelectFlags               *uint32                     `protobuf:"varint,44,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	ExclusiveTournamentId           *uint32                     `protobuf:"varint,45,opt,name=exclusive_tournament_id,json=exclusiveTournamentId" json:"exclusive_tournament_id,omitempty"`
	TourneyDivisionId               *uint32                     `protobuf:"varint,47,opt,name=tourney_division_id,json=tourneyDivisionId" json:"tourney_division_id,omitempty"`
	TourneyScheduleTime             *uint32                     `protobuf:"varint,48,opt,name=tourney_schedule_time,json=tourneyScheduleTime" json:"tourney_schedule_time,omitempty"`
	TourneySkillLevel               *uint32                     `protobuf:"varint,49,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBracketRound             *uint32                     `protobuf:"varint,50,opt,name=tourney_bracket_round,json=tourneyBracketRound" json:"tourney_bracket_round,omitempty"`
	TourneyQueueDeadlineTime        *uint32                     `protobuf:"varint,54,opt,name=tourney_queue_deadline_time,json=tourneyQueueDeadlineTime" json:"tourney_queue_deadline_time,omitempty"`
	TourneyQueueDeadlineState       *ETourneyQueueDeadlineState `protobuf:"varint,55,opt,name=tourney_queue_deadline_state,json=tourneyQueueDeadlineState,enum=dota2.ETourneyQueueDeadlineState,def=0" json:"tourney_queue_deadline_state,omitempty"`
	PartyBuilderSlotsToFill         *uint32                     `protobuf:"varint,56,opt,name=party_builder_slots_to_fill,json=partyBuilderSlotsToFill" json:"party_builder_slots_to_fill,omitempty"`
	PartyBuilderMatchGroups         *uint32                     `protobuf:"varint,57,opt,name=party_builder_match_groups,json=partyBuilderMatchGroups" json:"party_builder_match_groups,omitempty"`
	PartyBuilderStartTime           *uint32                     `protobuf:"varint,58,opt,name=party_builder_start_time,json=partyBuilderStartTime" json:"party_builder_start_time,omitempty"`
	SoloQueue                       *bool                       `protobuf:"varint,59,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex                  *uint32                     `protobuf:"varint,60,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId              *uint32                     `protobuf:"varint,61,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	ReadyCheck                      *CMsgReadyCheckStatus       `protobuf:"bytes,62,opt,name=ready_check,json=readyCheck" json:"ready_check,omitempty"`
	CustomGameDisabledUntilDate     *uint32                     `protobuf:"varint,63,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	CustomGameDisabledAccountId     *uint32                     `protobuf:"varint,64,opt,name=custom_game_disabled_account_id,json=customGameDisabledAccountId" json:"custom_game_disabled_account_id,omitempty"`
	IsChallengeMatch                *bool                       `protobuf:"varint,65,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	PartySearchBeaconActive         *bool                       `protobuf:"varint,66,opt,name=party_search_beacon_active,json=partySearchBeaconActive" json:"party_search_beacon_active,omitempty"`
	MatchmakingFlags                *uint32                     `protobuf:"varint,67,opt,name=matchmaking_flags,json=matchmakingFlags" json:"matchmaking_flags,omitempty"`
	HighPriorityState               *EHighPriorityMMState       `protobuf:"varint,68,opt,name=high_priority_state,json=highPriorityState,enum=dota2.EHighPriorityMMState,def=0" json:"high_priority_state,omitempty"`
	LaneSelectionsEnabled           *bool                       `protobuf:"varint,69,opt,name=lane_selections_enabled,json=laneSelectionsEnabled" json:"lane_selections_enabled,omitempty"`
}

// Default values for CSODOTAParty fields.
const (
	Default_CSODOTAParty_State                     = CSODOTAParty_UI
	Default_CSODOTAParty_MatchType                 = MatchType_MATCH_TYPE_CASUAL
	Default_CSODOTAParty_BotDifficulty             = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
	Default_CSODOTAParty_TourneyQueueDeadlineState = ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal
	Default_CSODOTAParty_HighPriorityState         = EHighPriorityMMState_k_EHighPriorityMM_Unknown
)

func (x *CSODOTAParty) Reset() {
	*x = CSODOTAParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAParty) ProtoMessage() {}

func (x *CSODOTAParty) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAParty.ProtoReflect.Descriptor instead.
func (*CSODOTAParty) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{1}
}

func (x *CSODOTAParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSODOTAParty) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSODOTAParty) GetMemberIds() []uint64 {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *CSODOTAParty) GetGameModes() uint32 {
	if x != nil && x.GameModes != nil {
		return *x.GameModes
	}
	return 0
}

func (x *CSODOTAParty) GetState() CSODOTAParty_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSODOTAParty_State
}

func (x *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if x != nil && x.EffectiveStartedMatchmakingTime != nil {
		return *x.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (x *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if x != nil && x.RawStartedMatchmakingTime != nil {
		return *x.RawStartedMatchmakingTime
	}
	return 0
}

func (x *CSODOTAParty) GetAttemptStartTime() uint32 {
	if x != nil && x.AttemptStartTime != nil {
		return *x.AttemptStartTime
	}
	return 0
}

func (x *CSODOTAParty) GetAttemptNum() uint32 {
	if x != nil && x.AttemptNum != nil {
		return *x.AttemptNum
	}
	return 0
}

func (x *CSODOTAParty) GetMatchgroups() uint32 {
	if x != nil && x.Matchgroups != nil {
		return *x.Matchgroups
	}
	return 0
}

func (x *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if x != nil && x.LowPriorityAccountId != nil {
		return *x.LowPriorityAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (x *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (x *CSODOTAParty) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CSODOTAParty) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CSODOTAParty) GetTeamUiLogo() uint64 {
	if x != nil && x.TeamUiLogo != nil {
		return *x.TeamUiLogo
	}
	return 0
}

func (x *CSODOTAParty) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if x != nil && x.MatchDisabledUntilDate != nil {
		return *x.MatchDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if x != nil && x.MatchDisabledAccountId != nil {
		return *x.MatchDisabledAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if x != nil && x.MatchmakingMaxRangeMinutes != nil {
		return *x.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (x *CSODOTAParty) GetMatchlanguages() uint32 {
	if x != nil && x.Matchlanguages != nil {
		return *x.Matchlanguages
	}
	return 0
}

func (x *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if x != nil && x.LowPriorityGamesRemaining != nil {
		return *x.LowPriorityGamesRemaining
	}
	return 0
}

func (x *CSODOTAParty) GetOpenForJoinRequests() bool {
	if x != nil && x.OpenForJoinRequests != nil {
		return *x.OpenForJoinRequests
	}
	return false
}

func (x *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if x != nil {
		return x.SentInvites
	}
	return nil
}

func (x *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if x != nil {
		return x.RecvInvites
	}
	return nil
}

func (x *CSODOTAParty) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

func (x *CSODOTAParty) GetRegionSelectFlags() uint32 {
	if x != nil && x.RegionSelectFlags != nil {
		return *x.RegionSelectFlags
	}
	return 0
}

func (x *CSODOTAParty) GetExclusiveTournamentId() uint32 {
	if x != nil && x.ExclusiveTournamentId != nil {
		return *x.ExclusiveTournamentId
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyDivisionId() uint32 {
	if x != nil && x.TourneyDivisionId != nil {
		return *x.TourneyDivisionId
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyScheduleTime() uint32 {
	if x != nil && x.TourneyScheduleTime != nil {
		return *x.TourneyScheduleTime
	}
	return 0
}

func (x *CSODOTAParty) GetTourneySkillLevel() uint32 {
	if x != nil && x.TourneySkillLevel != nil {
		return *x.TourneySkillLevel
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyBracketRound() uint32 {
	if x != nil && x.TourneyBracketRound != nil {
		return *x.TourneyBracketRound
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyQueueDeadlineTime() uint32 {
	if x != nil && x.TourneyQueueDeadlineTime != nil {
		return *x.TourneyQueueDeadlineTime
	}
	return 0
}

func (x *CSODOTAParty) GetTourneyQueueDeadlineState() ETourneyQueueDeadlineState {
	if x != nil && x.TourneyQueueDeadlineState != nil {
		return *x.TourneyQueueDeadlineState
	}
	return Default_CSODOTAParty_TourneyQueueDeadlineState
}

func (x *CSODOTAParty) GetPartyBuilderSlotsToFill() uint32 {
	if x != nil && x.PartyBuilderSlotsToFill != nil {
		return *x.PartyBuilderSlotsToFill
	}
	return 0
}

func (x *CSODOTAParty) GetPartyBuilderMatchGroups() uint32 {
	if x != nil && x.PartyBuilderMatchGroups != nil {
		return *x.PartyBuilderMatchGroups
	}
	return 0
}

func (x *CSODOTAParty) GetPartyBuilderStartTime() uint32 {
	if x != nil && x.PartyBuilderStartTime != nil {
		return *x.PartyBuilderStartTime
	}
	return 0
}

func (x *CSODOTAParty) GetSoloQueue() bool {
	if x != nil && x.SoloQueue != nil {
		return *x.SoloQueue
	}
	return false
}

func (x *CSODOTAParty) GetBotScriptIndex() uint32 {
	if x != nil && x.BotScriptIndex != nil {
		return *x.BotScriptIndex
	}
	return 0
}

func (x *CSODOTAParty) GetSteamClanAccountId() uint32 {
	if x != nil && x.SteamClanAccountId != nil {
		return *x.SteamClanAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetReadyCheck() *CMsgReadyCheckStatus {
	if x != nil {
		return x.ReadyCheck
	}
	return nil
}

func (x *CSODOTAParty) GetCustomGameDisabledUntilDate() uint32 {
	if x != nil && x.CustomGameDisabledUntilDate != nil {
		return *x.CustomGameDisabledUntilDate
	}
	return 0
}

func (x *CSODOTAParty) GetCustomGameDisabledAccountId() uint32 {
	if x != nil && x.CustomGameDisabledAccountId != nil {
		return *x.CustomGameDisabledAccountId
	}
	return 0
}

func (x *CSODOTAParty) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CSODOTAParty) GetPartySearchBeaconActive() bool {
	if x != nil && x.PartySearchBeaconActive != nil {
		return *x.PartySearchBeaconActive
	}
	return false
}

func (x *CSODOTAParty) GetMatchmakingFlags() uint32 {
	if x != nil && x.MatchmakingFlags != nil {
		return *x.MatchmakingFlags
	}
	return 0
}

func (x *CSODOTAParty) GetHighPriorityState() EHighPriorityMMState {
	if x != nil && x.HighPriorityState != nil {
		return *x.HighPriorityState
	}
	return Default_CSODOTAParty_HighPriorityState
}

func (x *CSODOTAParty) GetLaneSelectionsEnabled() bool {
	if x != nil && x.LaneSelectionsEnabled != nil {
		return *x.LaneSelectionsEnabled
	}
	return false
}

type CSODOTAPartyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId          *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName        *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members           []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId            *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LowPriorityStatus *bool                             `protobuf:"varint,6,opt,name=low_priority_status,json=lowPriorityStatus" json:"low_priority_status,omitempty"`
	AsCoach           *bool                             `protobuf:"varint,7,opt,name=as_coach,json=asCoach" json:"as_coach,omitempty"`
	InviteGid         *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
}

func (x *CSODOTAPartyInvite) Reset() {
	*x = CSODOTAPartyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyInvite) ProtoMessage() {}

func (x *CSODOTAPartyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyInvite.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2}
}

func (x *CSODOTAPartyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetSenderId() uint64 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTAPartyInvite) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if x != nil && x.LowPriorityStatus != nil {
		return *x.LowPriorityStatus
	}
	return false
}

func (x *CSODOTAPartyInvite) GetAsCoach() bool {
	if x != nil && x.AsCoach != nil {
		return *x.AsCoach
	}
	return false
}

func (x *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if x != nil && x.InviteGid != nil {
		return *x.InviteGid
	}
	return 0
}

type CSODOTALobbyInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId             *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId            *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName          *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members             []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId        *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid           *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc       *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
}

func (x *CSODOTALobbyInvite) Reset() {
	*x = CSODOTALobbyInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobbyInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite) ProtoMessage() {}

func (x *CSODOTALobbyInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3}
}

func (x *CSODOTALobbyInvite) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderId() uint64 {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if x != nil && x.InviteGid != nil {
		return *x.InviteGid
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

type CMsgLeaverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyState          *uint32         `protobuf:"varint,1,opt,name=lobby_state,json=lobbyState" json:"lobby_state,omitempty"`
	GameState           *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=dota2.DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected      *bool           `protobuf:"varint,3,opt,name=leaver_detected,json=leaverDetected" json:"leaver_detected,omitempty"`
	FirstBloodHappened  *bool           `protobuf:"varint,4,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults *bool           `protobuf:"varint,5,opt,name=discard_match_results,json=discardMatchResults" json:"discard_match_results,omitempty"`
	MassDisconnect      *bool           `protobuf:"varint,6,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
}

// Default values for CMsgLeaverState fields.
const (
	Default_CMsgLeaverState_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
)

func (x *CMsgLeaverState) Reset() {
	*x = CMsgLeaverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLeaverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLeaverState) ProtoMessage() {}

func (x *CMsgLeaverState) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLeaverState.ProtoReflect.Descriptor instead.
func (*CMsgLeaverState) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgLeaverState) GetLobbyState() uint32 {
	if x != nil && x.LobbyState != nil {
		return *x.LobbyState
	}
	return 0
}

func (x *CMsgLeaverState) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (x *CMsgLeaverState) GetLeaverDetected() bool {
	if x != nil && x.LeaverDetected != nil {
		return *x.LeaverDetected
	}
	return false
}

func (x *CMsgLeaverState) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CMsgLeaverState) GetDiscardMatchResults() bool {
	if x != nil && x.DiscardMatchResults != nil {
		return *x.DiscardMatchResults
	}
	return false
}

func (x *CMsgLeaverState) GetMassDisconnect() bool {
	if x != nil && x.MassDisconnect != nil {
		return *x.MassDisconnect
	}
	return false
}

type CDOTALobbyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *uint64                                     `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *uint32                                     `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM                               `protobuf:"varint,3,opt,name=team,enum=dota2.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                   *string                                     `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                   *uint32                                     `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId                *uint64                                     `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel              *uint32                                     `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                 *uint32                                     `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded          *uint32                                     `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus           *DOTALeaverStatusT                          `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=dota2.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                                     `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel                *uint32                                     `protobuf:"varint,17,opt,name=channel,def=6" json:"channel,omitempty"`
	PrizeDefIndex          *uint32                                     `protobuf:"varint,18,opt,name=prize_def_index,json=prizeDefIndex" json:"prize_def_index,omitempty"`
	DisabledHeroId         []uint32                                    `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	PartnerAccountType     *PartnerAccountType                         `protobuf:"varint,21,opt,name=partner_account_type,json=partnerAccountType,enum=dota2.PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId          []uint32                                    `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam              *DOTA_GC_TEAM                               `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=dota2.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CoachRating            *uint32                                     `protobuf:"varint,42,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	PwrdCyberCafeId        *uint32                                     `protobuf:"varint,24,opt,name=pwrd_cyber_cafe_id,json=pwrdCyberCafeId" json:"pwrd_cyber_cafe_id,omitempty"`
	PwrdCyberCafeName      *string                                     `protobuf:"bytes,25,opt,name=pwrd_cyber_cafe_name,json=pwrdCyberCafeName" json:"pwrd_cyber_cafe_name,omitempty"`
	DisabledRandomHeroId   []uint32                                    `protobuf:"varint,26,rep,packed,name=disabled_random_hero_id,json=disabledRandomHeroId" json:"disabled_random_hero_id,omitempty"`
	DisabledRandomHeroBits []uint32                                    `protobuf:"fixed32,41,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	XpBonuses              []*CDOTALobbyMember_CDOTALobbyMemberXPBonus `protobuf:"bytes,27,rep,name=xp_bonuses,json=xpBonuses" json:"xp_bonuses,omitempty"`
	RankChange             *int32                                      `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman              *bool                                       `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds   []uint32                                    `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	LobbyMvpVoteAccountId  *uint32                                     `protobuf:"varint,32,opt,name=lobby_mvp_vote_account_id,json=lobbyMvpVoteAccountId" json:"lobby_mvp_vote_account_id,omitempty"`
	SearchMatchType        *MatchType                                  `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=dota2.MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked     *uint64                                     `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPlusSubscriber       *bool                                       `protobuf:"varint,36,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	RankTierUpdated        *bool                                       `protobuf:"varint,37,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	LaneSelectionFlags     *uint32                                     `protobuf:"varint,38,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	CanEarnRewards         *bool                                       `protobuf:"varint,39,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM                               `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=dota2.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	WasMvpLastGame         *bool                                       `protobuf:"varint,43,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	PendingAwards          []*CMsgPendingEventAward                    `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward                    `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType                          `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota2.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	QueuePointAdjustment   *int32                                      `protobuf:"zigzag32,47,opt,name=queue_point_adjustment,json=queuePointAdjustment" json:"queue_point_adjustment,omitempty"`
	RankTier               *int32                                      `protobuf:"varint,48,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
}

// Default values for CDOTALobbyMember fields.
const (
	Default_CDOTALobbyMember_Team               = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
	Default_CDOTALobbyMember_LeaverStatus       = DOTALeaverStatusT_DOTA_LEAVER_NONE
	Default_CDOTALobbyMember_Channel            = uint32(6)
	Default_CDOTALobbyMember_PartnerAccountType = PartnerAccountType_PARTNER_NONE
	Default_CDOTALobbyMember_CoachTeam          = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
	Default_CDOTALobbyMember_SearchMatchType    = MatchType_MATCH_TYPE_CASUAL
	Default_CDOTALobbyMember_LiveSpectatorTeam  = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
	Default_CDOTALobbyMember_RankMmrBoostType   = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None
)

func (x *CDOTALobbyMember) Reset() {
	*x = CDOTALobbyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTALobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTALobbyMember) ProtoMessage() {}

func (x *CDOTALobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTALobbyMember.ProtoReflect.Descriptor instead.
func (*CDOTALobbyMember) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{5}
}

func (x *CDOTALobbyMember) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CDOTALobbyMember) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CDOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CDOTALobbyMember_Team
}

func (x *CDOTALobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDOTALobbyMember) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CDOTALobbyMember) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CDOTALobbyMember) GetMetaLevel() uint32 {
	if x != nil && x.MetaLevel != nil {
		return *x.MetaLevel
	}
	return 0
}

func (x *CDOTALobbyMember) GetMetaXp() uint32 {
	if x != nil && x.MetaXp != nil {
		return *x.MetaXp
	}
	return 0
}

func (x *CDOTALobbyMember) GetMetaXpAwarded() uint32 {
	if x != nil && x.MetaXpAwarded != nil {
		return *x.MetaXpAwarded
	}
	return 0
}

func (x *CDOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if x != nil && x.LeaverStatus != nil {
		return *x.LeaverStatus
	}
	return Default_CDOTALobbyMember_LeaverStatus
}

func (x *CDOTALobbyMember) GetLeaverActions() uint32 {
	if x != nil && x.LeaverActions != nil {
		return *x.LeaverActions
	}
	return 0
}

func (x *CDOTALobbyMember) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_CDOTALobbyMember_Channel
}

func (x *CDOTALobbyMember) GetPrizeDefIndex() uint32 {
	if x != nil && x.PrizeDefIndex != nil {
		return *x.PrizeDefIndex
	}
	return 0
}

func (x *CDOTALobbyMember) GetDisabledHeroId() []uint32 {
	if x != nil {
		return x.DisabledHeroId
	}
	return nil
}

func (x *CDOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if x != nil && x.PartnerAccountType != nil {
		return *x.PartnerAccountType
	}
	return Default_CDOTALobbyMember_PartnerAccountType
}

func (x *CDOTALobbyMember) GetEnabledHeroId() []uint32 {
	if x != nil {
		return x.EnabledHeroId
	}
	return nil
}

func (x *CDOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if x != nil && x.CoachTeam != nil {
		return *x.CoachTeam
	}
	return Default_CDOTALobbyMember_CoachTeam
}

func (x *CDOTALobbyMember) GetCoachRating() uint32 {
	if x != nil && x.CoachRating != nil {
		return *x.CoachRating
	}
	return 0
}

func (x *CDOTALobbyMember) GetPwrdCyberCafeId() uint32 {
	if x != nil && x.PwrdCyberCafeId != nil {
		return *x.PwrdCyberCafeId
	}
	return 0
}

func (x *CDOTALobbyMember) GetPwrdCyberCafeName() string {
	if x != nil && x.PwrdCyberCafeName != nil {
		return *x.PwrdCyberCafeName
	}
	return ""
}

func (x *CDOTALobbyMember) GetDisabledRandomHeroId() []uint32 {
	if x != nil {
		return x.DisabledRandomHeroId
	}
	return nil
}

func (x *CDOTALobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if x != nil {
		return x.DisabledRandomHeroBits
	}
	return nil
}

func (x *CDOTALobbyMember) GetXpBonuses() []*CDOTALobbyMember_CDOTALobbyMemberXPBonus {
	if x != nil {
		return x.XpBonuses
	}
	return nil
}

func (x *CDOTALobbyMember) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CDOTALobbyMember) GetCameraman() bool {
	if x != nil && x.Cameraman != nil {
		return *x.Cameraman
	}
	return false
}

func (x *CDOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if x != nil {
		return x.CustomGameProductIds
	}
	return nil
}

func (x *CDOTALobbyMember) GetLobbyMvpVoteAccountId() uint32 {
	if x != nil && x.LobbyMvpVoteAccountId != nil {
		return *x.LobbyMvpVoteAccountId
	}
	return 0
}

func (x *CDOTALobbyMember) GetSearchMatchType() MatchType {
	if x != nil && x.SearchMatchType != nil {
		return *x.SearchMatchType
	}
	return Default_CDOTALobbyMember_SearchMatchType
}

func (x *CDOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if x != nil && x.FavoriteTeamPacked != nil {
		return *x.FavoriteTeamPacked
	}
	return 0
}

func (x *CDOTALobbyMember) GetIsPlusSubscriber() bool {
	if x != nil && x.IsPlusSubscriber != nil {
		return *x.IsPlusSubscriber
	}
	return false
}

func (x *CDOTALobbyMember) GetRankTierUpdated() bool {
	if x != nil && x.RankTierUpdated != nil {
		return *x.RankTierUpdated
	}
	return false
}

func (x *CDOTALobbyMember) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

func (x *CDOTALobbyMember) GetCanEarnRewards() bool {
	if x != nil && x.CanEarnRewards != nil {
		return *x.CanEarnRewards
	}
	return false
}

func (x *CDOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if x != nil && x.LiveSpectatorTeam != nil {
		return *x.LiveSpectatorTeam
	}
	return Default_CDOTALobbyMember_LiveSpectatorTeam
}

func (x *CDOTALobbyMember) GetWasMvpLastGame() bool {
	if x != nil && x.WasMvpLastGame != nil {
		return *x.WasMvpLastGame
	}
	return false
}

func (x *CDOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwards
	}
	return nil
}

func (x *CDOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if x != nil {
		return x.PendingAwardsOnVictory
	}
	return nil
}

func (x *CDOTALobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if x != nil && x.RankMmrBoostType != nil {
		return *x.RankMmrBoostType
	}
	return Default_CDOTALobbyMember_RankMmrBoostType
}

func (x *CDOTALobbyMember) GetQueuePointAdjustment() int32 {
	if x != nil && x.QueuePointAdjustment != nil {
		return *x.QueuePointAdjustment
	}
	return 0
}

func (x *CDOTALobbyMember) GetRankTier() int32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

type CLobbyTeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName                   *string `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32 `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64 `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64 `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64 `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool   `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	TeamLogoUrl                *string `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	GuildName                  *string `protobuf:"bytes,9,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
	GuildTag                   *string `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	Rank                       *uint32 `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32  `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool   `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool   `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64 `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
}

func (x *CLobbyTeamDetails) Reset() {
	*x = CLobbyTeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyTeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTeamDetails) ProtoMessage() {}

func (x *CLobbyTeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTeamDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{6}
}

func (x *CLobbyTeamDetails) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamTag() string {
	if x != nil && x.TeamTag != nil {
		return *x.TeamTag
	}
	return ""
}

func (x *CLobbyTeamDetails) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if x != nil && x.TeamLogo != nil {
		return *x.TeamLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if x != nil && x.TeamBaseLogo != nil {
		return *x.TeamBaseLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if x != nil && x.TeamBannerLogo != nil {
		return *x.TeamBannerLogo
	}
	return 0
}

func (x *CLobbyTeamDetails) GetTeamComplete() bool {
	if x != nil && x.TeamComplete != nil {
		return *x.TeamComplete
	}
	return false
}

func (x *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if x != nil && x.TeamLogoUrl != nil {
		return *x.TeamLogoUrl
	}
	return ""
}

func (x *CLobbyTeamDetails) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

func (x *CLobbyTeamDetails) GetGuildTag() string {
	if x != nil && x.GuildTag != nil {
		return *x.GuildTag
	}
	return ""
}

func (x *CLobbyTeamDetails) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CLobbyTeamDetails) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if x != nil && x.IsHomeTeam != nil {
		return *x.IsHomeTeam
	}
	return false
}

func (x *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if x != nil && x.IsChallengeMatch != nil {
		return *x.IsChallengeMatch
	}
	return false
}

func (x *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if x != nil && x.ChallengeMatchTokenAccount != nil {
		return *x.ChallengeMatchTokenAccount
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefIndex  *uint32 `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate *bool   `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop   *bool   `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId     *uint32 `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin        *uint32 `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
}

func (x *CLobbyTimedRewardDetails) Reset() {
	*x = CLobbyTimedRewardDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyTimedRewardDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyTimedRewardDetails) ProtoMessage() {}

func (x *CLobbyTimedRewardDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyTimedRewardDetails.ProtoReflect.Descriptor instead.
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{7}
}

func (x *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if x != nil && x.IsSupplyCrate != nil {
		return *x.IsSupplyCrate
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if x != nil && x.IsTimedDrop != nil {
		return *x.IsTimedDrop
	}
	return false
}

func (x *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId    *uint32 `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode  *string `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description  *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode *string `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (x *CLobbyBroadcastChannelInfo) Reset() {
	*x = CLobbyBroadcastChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLobbyBroadcastChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLobbyBroadcastChannelInfo) ProtoMessage() {}

func (x *CLobbyBroadcastChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLobbyBroadcastChannelInfo.ProtoReflect.Descriptor instead.
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{8}
}

func (x *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CSODOTALobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId                                    *uint64                       `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Members                                    []*CDOTALobbyMember           `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers                                []*CDOTALobbyMember           `protobuf:"bytes,7,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	LeaderId                                   *uint64                       `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                       `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                       `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                      `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State           `protobuf:"varint,4,opt,name=state,enum=dota2.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                       `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType       `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=dota2.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                         `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                         `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                         `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                       `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails          `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                       `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                       `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                       `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                       `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState               `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=dota2.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                       `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                       `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                 `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=dota2.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                       `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                         `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty            `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota2.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	GameVersion                                *DOTAGameVersion              `protobuf:"varint,37,opt,name=game_version,json=gameVersion,enum=dota2.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails   `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                       `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                       `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                       `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                       `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                       `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                       `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                       `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                       `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                       `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                       `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                         `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay             `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota2.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                       `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                       `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                       `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                         `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                       `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                       `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                         `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg     `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame                `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                         `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=dota2.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                         `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                       `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                       `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                       `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	PartnerType                                *PartnerAccountType           `protobuf:"varint,73,opt,name=partner_type,json=partnerType,enum=dota2.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	Visibility                                 *DOTALobbyVisibility          `protobuf:"varint,75,opt,name=visibility,enum=dota2.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                       `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                         `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                       `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                      `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                       `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	CustomGameUsesAccountRecords               *bool                         `protobuf:"varint,83,opt,name=custom_game_uses_account_records,json=customGameUsesAccountRecords" json:"custom_game_uses_account_records,omitempty"`
	GameStartTime                              *uint32                       `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting        `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=dota2.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	LobbyMvpAccountId                          *uint32                       `protobuf:"varint,89,opt,name=lobby_mvp_account_id,json=lobbyMvpAccountId" json:"lobby_mvp_account_id,omitempty"`
	WeekendTourneyDivisionId                   *uint32                       `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                       `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                       `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty            `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota2.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                       `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                       `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                      `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=dota2.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules   `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota2.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                       `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                       `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice  `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=dota2.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice  `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=dota2.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                         `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                       `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=dota2.EEvent,def=0" json:"current_primary_event,omitempty"`
	LowpriDeprecated                           *bool                         `protobuf:"varint,104,opt,name=lowpri_deprecated,json=lowpriDeprecated" json:"lowpri_deprecated,omitempty"`
	EmergencyDisabledHeroIds                   []uint32                      `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                       `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                         `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	Mutations                                  []uint32                      `protobuf:"varint,108,rep,name=mutations" json:"mutations,omitempty"`
	LanHostPingLocation                        *string                       `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                       `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                       `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	CustomGameBrowseable                       *bool                         `protobuf:"varint,112,opt,name=custom_game_browseable,json=customGameBrowseable" json:"custom_game_browseable,omitempty"`
	LeaguePhase                                *uint32                       `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	RecordDetailedStats                        *bool                         `protobuf:"varint,114,opt,name=record_detailed_stats,json=recordDetailedStats" json:"record_detailed_stats,omitempty"`
	ExperimentalGameplayEnabled                *bool                         `protobuf:"varint,116,opt,name=experimental_gameplay_enabled,json=experimentalGameplayEnabled" json:"experimental_gameplay_enabled,omitempty"`
}

// Default values for CSODOTALobby fields.
const (
	Default_CSODOTALobby_ServerId                           = uint64(0)
	Default_CSODOTALobby_State                              = CSODOTALobby_UI
	Default_CSODOTALobby_LobbyType                          = CSODOTALobby_INVALID
	Default_CSODOTALobby_ServerRegion                       = uint32(0)
	Default_CSODOTALobby_GameState                          = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
	Default_CSODOTALobby_CmPick                             = DOTA_CM_PICK_DOTA_CM_RANDOM
	Default_CSODOTALobby_AllowSpectating                    = bool(true)
	Default_CSODOTALobby_BotDifficultyRadiant               = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_GameVersion                        = DOTAGameVersion_GAME_VERSION_CURRENT
	Default_CSODOTALobby_PenaltyLevelRadiant                = uint32(0)
	Default_CSODOTALobby_PenaltyLevelDire                   = uint32(0)
	Default_CSODOTALobby_Allchat                            = bool(false)
	Default_CSODOTALobby_DotaTvDelay                        = LobbyDotaTVDelay_LobbyDotaTV_10
	Default_CSODOTALobby_MatchOutcome                       = EMatchOutcome_k_EMatchOutcome_Unknown
	Default_CSODOTALobby_PartnerType                        = PartnerAccountType_PARTNER_NONE
	Default_CSODOTALobby_Visibility                         = DOTALobbyVisibility_DOTALobbyVisibility_Public
	Default_CSODOTALobby_PauseSetting                       = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
	Default_CSODOTALobby_BotDifficultyDire                  = DOTABotDifficulty_BOT_DIFFICULTY_HARD
	Default_CSODOTALobby_SelectionPriorityRules             = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
	Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice    = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
	Default_CSODOTALobby_CurrentPrimaryEvent                = EEvent_EVENT_ID_NONE
)

func (x *CSODOTALobby) Reset() {
	*x = CSODOTALobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby) ProtoMessage() {}

func (x *CSODOTALobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby.ProtoReflect.Descriptor instead.
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{9}
}

func (x *CSODOTALobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODOTALobby) GetMembers() []*CDOTALobbyMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODOTALobby) GetLeftMembers() []*CDOTALobbyMember {
	if x != nil {
		return x.LeftMembers
	}
	return nil
}

func (x *CSODOTALobby) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CSODOTALobby) GetServerId() uint64 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (x *CSODOTALobby) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CSODOTALobby) GetPendingInvites() []uint64 {
	if x != nil {
		return x.PendingInvites
	}
	return nil
}

func (x *CSODOTALobby) GetState() CSODOTALobby_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CSODOTALobby_State
}

func (x *CSODOTALobby) GetConnect() string {
	if x != nil && x.Connect != nil {
		return *x.Connect
	}
	return ""
}

func (x *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (x *CSODOTALobby) GetAllowCheats() bool {
	if x != nil && x.AllowCheats != nil {
		return *x.AllowCheats
	}
	return false
}

func (x *CSODOTALobby) GetFillWithBots() bool {
	if x != nil && x.FillWithBots != nil {
		return *x.FillWithBots
	}
	return false
}

func (x *CSODOTALobby) GetIntroMode() bool {
	if x != nil && x.IntroMode != nil {
		return *x.IntroMode
	}
	return false
}

func (x *CSODOTALobby) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if x != nil {
		return x.TeamDetails
	}
	return nil
}

func (x *CSODOTALobby) GetTutorialLesson() uint32 {
	if x != nil && x.TutorialLesson != nil {
		return *x.TutorialLesson
	}
	return 0
}

func (x *CSODOTALobby) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CSODOTALobby) GetTournamentGameId() uint32 {
	if x != nil && x.TournamentGameId != nil {
		return *x.TournamentGameId
	}
	return 0
}

func (x *CSODOTALobby) GetServerRegion() uint32 {
	if x != nil && x.ServerRegion != nil {
		return *x.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (x *CSODOTALobby) GetGameState() DOTA_GameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (x *CSODOTALobby) GetNumSpectators() uint32 {
	if x != nil && x.NumSpectators != nil {
		return *x.NumSpectators
	}
	return 0
}

func (x *CSODOTALobby) GetMatchgroup() uint32 {
	if x != nil && x.Matchgroup != nil {
		return *x.Matchgroup
	}
	return 0
}

func (x *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if x != nil && x.CmPick != nil {
		return *x.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (x *CSODOTALobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODOTALobby) GetAllowSpectating() bool {
	if x != nil && x.AllowSpectating != nil {
		return *x.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (x *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if x != nil && x.BotDifficultyRadiant != nil {
		return *x.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (x *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (x *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if x != nil {
		return x.TimedRewardDetails
	}
	return nil
}

func (x *CSODOTALobby) GetPassKey() string {
	if x != nil && x.PassKey != nil {
		return *x.PassKey
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if x != nil && x.PenaltyLevelRadiant != nil {
		return *x.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (x *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if x != nil && x.PenaltyLevelDire != nil {
		return *x.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (x *CSODOTALobby) GetLoadGameId() uint32 {
	if x != nil && x.LoadGameId != nil {
		return *x.LoadGameId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

func (x *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if x != nil && x.RadiantSeriesWins != nil {
		return *x.RadiantSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetDireSeriesWins() uint32 {
	if x != nil && x.DireSeriesWins != nil {
		return *x.DireSeriesWins
	}
	return 0
}

func (x *CSODOTALobby) GetLootGenerated() uint32 {
	if x != nil && x.LootGenerated != nil {
		return *x.LootGenerated
	}
	return 0
}

func (x *CSODOTALobby) GetLootAwarded() uint32 {
	if x != nil && x.LootAwarded != nil {
		return *x.LootAwarded
	}
	return 0
}

func (x *CSODOTALobby) GetAllchat() bool {
	if x != nil && x.Allchat != nil {
		return *x.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (x *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if x != nil && x.DotaTvDelay != nil {
		return *x.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (x *CSODOTALobby) GetCustomGameMode() string {
	if x != nil && x.CustomGameMode != nil {
		return *x.CustomGameMode
	}
	return ""
}

func (x *CSODOTALobby) GetCustomMapName() string {
	if x != nil && x.CustomMapName != nil {
		return *x.CustomMapName
	}
	return ""
}

func (x *CSODOTALobby) GetCustomDifficulty() uint32 {
	if x != nil && x.CustomDifficulty != nil {
		return *x.CustomDifficulty
	}
	return 0
}

func (x *CSODOTALobby) GetLan() bool {
	if x != nil && x.Lan != nil {
		return *x.Lan
	}
	return false
}

func (x *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if x != nil {
		return x.BroadcastChannelInfo
	}
	return nil
}

func (x *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if x != nil && x.FirstLeaverAccountid != nil {
		return *x.FirstLeaverAccountid
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CSODOTALobby) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if x != nil {
		return x.SaveGame
	}
	return nil
}

func (x *CSODOTALobby) GetFirstBloodHappened() bool {
	if x != nil && x.FirstBloodHappened != nil {
		return *x.FirstBloodHappened
	}
	return false
}

func (x *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if x != nil && x.MatchOutcome != nil {
		return *x.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (x *CSODOTALobby) GetMassDisconnect() bool {
	if x != nil && x.MassDisconnect != nil {
		return *x.MassDisconnect
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if x != nil && x.CustomMinPlayers != nil {
		return *x.CustomMinPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if x != nil && x.CustomMaxPlayers != nil {
		return *x.CustomMaxPlayers
	}
	return 0
}

func (x *CSODOTALobby) GetPartnerType() PartnerAccountType {
	if x != nil && x.PartnerType != nil {
		return *x.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (x *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (x *CSODOTALobby) GetCustomGameCrc() uint64 {
	if x != nil && x.CustomGameCrc != nil {
		return *x.CustomGameCrc
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if x != nil && x.CustomGameAutoCreatedLobby != nil {
		return *x.CustomGameAutoCreatedLobby
	}
	return false
}

func (x *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if x != nil && x.CustomGameTimestamp != nil {
		return *x.CustomGameTimestamp
	}
	return 0
}

func (x *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if x != nil {
		return x.PreviousSeriesMatches
	}
	return nil
}

func (x *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if x != nil && x.PreviousMatchOverride != nil {
		return *x.PreviousMatchOverride
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameUsesAccountRecords() bool {
	if x != nil && x.CustomGameUsesAccountRecords != nil {
		return *x.CustomGameUsesAccountRecords
	}
	return false
}

func (x *CSODOTALobby) GetGameStartTime() uint32 {
	if x != nil && x.GameStartTime != nil {
		return *x.GameStartTime
	}
	return 0
}

func (x *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if x != nil && x.PauseSetting != nil {
		return *x.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (x *CSODOTALobby) GetLobbyMvpAccountId() uint32 {
	if x != nil && x.LobbyMvpAccountId != nil {
		return *x.LobbyMvpAccountId
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if x != nil && x.WeekendTourneyDivisionId != nil {
		return *x.WeekendTourneyDivisionId
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if x != nil && x.WeekendTourneySkillLevel != nil {
		return *x.WeekendTourneySkillLevel
	}
	return 0
}

func (x *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if x != nil && x.WeekendTourneyBracketRound != nil {
		return *x.WeekendTourneyBracketRound
	}
	return 0
}

func (x *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if x != nil && x.BotDifficultyDire != nil {
		return *x.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (x *CSODOTALobby) GetBotRadiant() uint64 {
	if x != nil && x.BotRadiant != nil {
		return *x.BotRadiant
	}
	return 0
}

func (x *CSODOTALobby) GetBotDire() uint64 {
	if x != nil && x.BotDire != nil {
		return *x.BotDire
	}
	return 0
}

func (x *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if x != nil {
		return x.EventProgressionEnabled
	}
	return nil
}

func (x *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if x != nil && x.SelectionPriorityRules != nil {
		return *x.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (x *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesPreviousSelectionPriorityTeamId != nil {
		return *x.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if x != nil && x.SeriesCurrentSelectionPriorityTeamId != nil {
		return *x.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (x *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentPriorityTeamChoice != nil {
		return *x.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if x != nil && x.SeriesCurrentNonPriorityTeamChoice != nil {
		return *x.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (x *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if x != nil && x.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *x.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (x *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if x != nil && x.CurrentPrimaryEvent != nil {
		return *x.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (x *CSODOTALobby) GetLowpriDeprecated() bool {
	if x != nil && x.LowpriDeprecated != nil {
		return *x.LowpriDeprecated
	}
	return false
}

func (x *CSODOTALobby) GetEmergencyDisabledHeroIds() []uint32 {
	if x != nil {
		return x.EmergencyDisabledHeroIds
	}
	return nil
}

func (x *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if x != nil && x.CustomGamePrivateKey != nil {
		return *x.CustomGamePrivateKey
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGamePenalties() bool {
	if x != nil && x.CustomGamePenalties != nil {
		return *x.CustomGamePenalties
	}
	return false
}

func (x *CSODOTALobby) GetMutations() []uint32 {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *CSODOTALobby) GetLanHostPingLocation() string {
	if x != nil && x.LanHostPingLocation != nil {
		return *x.LanHostPingLocation
	}
	return ""
}

func (x *CSODOTALobby) GetLeagueNodeId() uint32 {
	if x != nil && x.LeagueNodeId != nil {
		return *x.LeagueNodeId
	}
	return 0
}

func (x *CSODOTALobby) GetMatchDuration() uint32 {
	if x != nil && x.MatchDuration != nil {
		return *x.MatchDuration
	}
	return 0
}

func (x *CSODOTALobby) GetCustomGameBrowseable() bool {
	if x != nil && x.CustomGameBrowseable != nil {
		return *x.CustomGameBrowseable
	}
	return false
}

func (x *CSODOTALobby) GetLeaguePhase() uint32 {
	if x != nil && x.LeaguePhase != nil {
		return *x.LeaguePhase
	}
	return 0
}

func (x *CSODOTALobby) GetRecordDetailedStats() bool {
	if x != nil && x.RecordDetailedStats != nil {
		return *x.RecordDetailedStats
	}
	return false
}

func (x *CSODOTALobby) GetExperimentalGameplayEnabled() bool {
	if x != nil && x.ExperimentalGameplayEnabled != nil {
		return *x.ExperimentalGameplayEnabled
	}
	return false
}

type CMsgLobbyPlaytestDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *string `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
}

func (x *CMsgLobbyPlaytestDetails) Reset() {
	*x = CMsgLobbyPlaytestDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyPlaytestDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyPlaytestDetails) ProtoMessage() {}

func (x *CMsgLobbyPlaytestDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyPlaytestDetails.ProtoReflect.Descriptor instead.
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgLobbyPlaytestDetails) GetJson() string {
	if x != nil && x.Json != nil {
		return *x.Json
	}
	return ""
}

type CMsgReadyCheckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp     *uint32                             `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	FinishTimestamp    *uint32                             `protobuf:"varint,2,opt,name=finish_timestamp,json=finishTimestamp" json:"finish_timestamp,omitempty"`
	InitiatorAccountId *uint32                             `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	ReadyMembers       []*CMsgReadyCheckStatus_ReadyMember `protobuf:"bytes,4,rep,name=ready_members,json=readyMembers" json:"ready_members,omitempty"`
}

func (x *CMsgReadyCheckStatus) Reset() {
	*x = CMsgReadyCheckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyCheckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyCheckStatus) ProtoMessage() {}

func (x *CMsgReadyCheckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyCheckStatus.ProtoReflect.Descriptor instead.
func (*CMsgReadyCheckStatus) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgReadyCheckStatus) GetStartTimestamp() uint32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetFinishTimestamp() uint32 {
	if x != nil && x.FinishTimestamp != nil {
		return *x.FinishTimestamp
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetInitiatorAccountId() uint32 {
	if x != nil && x.InitiatorAccountId != nil {
		return *x.InitiatorAccountId
	}
	return 0
}

func (x *CMsgReadyCheckStatus) GetReadyMembers() []*CMsgReadyCheckStatus_ReadyMember {
	if x != nil {
		return x.ReadyMembers
	}
	return nil
}

type CMsgPartyReadyCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPartyReadyCheckRequest) Reset() {
	*x = CMsgPartyReadyCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckRequest) ProtoMessage() {}

func (x *CMsgPartyReadyCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckRequest.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckRequest) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{12}
}

type CMsgPartyReadyCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *EReadyCheckRequestResult `protobuf:"varint,1,opt,name=result,enum=dota2.EReadyCheckRequestResult,def=0" json:"result,omitempty"`
}

// Default values for CMsgPartyReadyCheckResponse fields.
const (
	Default_CMsgPartyReadyCheckResponse_Result = EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success
)

func (x *CMsgPartyReadyCheckResponse) Reset() {
	*x = CMsgPartyReadyCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckResponse) ProtoMessage() {}

func (x *CMsgPartyReadyCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckResponse.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckResponse) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgPartyReadyCheckResponse) GetResult() EReadyCheckRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgPartyReadyCheckResponse_Result
}

type CMsgPartyReadyCheckAcknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyStatus *EReadyCheckStatus `protobuf:"varint,1,opt,name=ready_status,json=readyStatus,enum=dota2.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
}

// Default values for CMsgPartyReadyCheckAcknowledge fields.
const (
	Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown
)

func (x *CMsgPartyReadyCheckAcknowledge) Reset() {
	*x = CMsgPartyReadyCheckAcknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyReadyCheckAcknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyReadyCheckAcknowledge) ProtoMessage() {}

func (x *CMsgPartyReadyCheckAcknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyReadyCheckAcknowledge.ProtoReflect.Descriptor instead.
func (*CMsgPartyReadyCheckAcknowledge) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgPartyReadyCheckAcknowledge) GetReadyStatus() EReadyCheckStatus {
	if x != nil && x.ReadyStatus != nil {
		return *x.ReadyStatus
	}
	return Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus
}

type CMsgLobbyEventGameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvData []byte `protobuf:"bytes,1,opt,name=kv_data,json=kvData" json:"kv_data,omitempty"`
}

func (x *CMsgLobbyEventGameDetails) Reset() {
	*x = CMsgLobbyEventGameDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLobbyEventGameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyEventGameDetails) ProtoMessage() {}

func (x *CMsgLobbyEventGameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyEventGameDetails.ProtoReflect.Descriptor instead.
func (*CMsgLobbyEventGameDetails) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgLobbyEventGameDetails) GetKvData() []byte {
	if x != nil {
		return x.KvData
	}
	return nil
}

type CMsgMatchMatchmakingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageQueueTime      *uint32                      `protobuf:"varint,1,opt,name=average_queue_time,json=averageQueueTime" json:"average_queue_time,omitempty"`
	MaximumQueueTime      *uint32                      `protobuf:"varint,2,opt,name=maximum_queue_time,json=maximumQueueTime" json:"maximum_queue_time,omitempty"`
	BehaviorScoreVariance *EMatchBehaviorScoreVariance `protobuf:"varint,3,opt,name=behavior_score_variance,json=behaviorScoreVariance,enum=dota2.EMatchBehaviorScoreVariance,def=0" json:"behavior_score_variance,omitempty"`
}

// Default values for CMsgMatchMatchmakingStats fields.
const (
	Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance = EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid
)

func (x *CMsgMatchMatchmakingStats) Reset() {
	*x = CMsgMatchMatchmakingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchMatchmakingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchMatchmakingStats) ProtoMessage() {}

func (x *CMsgMatchMatchmakingStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchMatchmakingStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchMatchmakingStats) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgMatchMatchmakingStats) GetAverageQueueTime() uint32 {
	if x != nil && x.AverageQueueTime != nil {
		return *x.AverageQueueTime
	}
	return 0
}

func (x *CMsgMatchMatchmakingStats) GetMaximumQueueTime() uint32 {
	if x != nil && x.MaximumQueueTime != nil {
		return *x.MaximumQueueTime
	}
	return 0
}

func (x *CMsgMatchMatchmakingStats) GetBehaviorScoreVariance() EMatchBehaviorScoreVariance {
	if x != nil && x.BehaviorScoreVariance != nil {
		return *x.BehaviorScoreVariance
	}
	return Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance
}

type CSODOTAPartyInvite_PartyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	IsCoach *bool   `protobuf:"varint,4,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
}

func (x *CSODOTAPartyInvite_PartyMember) Reset() {
	*x = CSODOTAPartyInvite_PartyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTAPartyInvite_PartyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAPartyInvite_PartyMember) ProtoMessage() {}

func (x *CSODOTAPartyInvite_PartyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAPartyInvite_PartyMember.ProtoReflect.Descriptor instead.
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CSODOTAPartyInvite_PartyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if x != nil && x.IsCoach != nil {
		return *x.IsCoach
	}
	return false
}

type CSODOTALobbyInvite_LobbyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId *uint64 `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
}

func (x *CSODOTALobbyInvite_LobbyMember) Reset() {
	*x = CSODOTALobbyInvite_LobbyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobbyInvite_LobbyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage() {}

func (x *CSODOTALobbyInvite_LobbyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobbyInvite_LobbyMember.ProtoReflect.Descriptor instead.
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CDOTALobbyMember_CDOTALobbyMemberXPBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	XpBonus   *float32 `protobuf:"fixed32,2,opt,name=xp_bonus,json=xpBonus" json:"xp_bonus,omitempty"`
	SourceKey *uint64  `protobuf:"varint,3,opt,name=source_key,json=sourceKey" json:"source_key,omitempty"`
}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) Reset() {
	*x = CDOTALobbyMember_CDOTALobbyMemberXPBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoMessage() {}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDOTALobbyMember_CDOTALobbyMemberXPBonus.ProtoReflect.Descriptor instead.
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetXpBonus() float32 {
	if x != nil && x.XpBonus != nil {
		return *x.XpBonus
	}
	return 0
}

func (x *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetSourceKey() uint64 {
	if x != nil && x.SourceKey != nil {
		return *x.SourceKey
	}
	return 0
}

type CSODOTALobby_CExtraMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
}

func (x *CSODOTALobby_CExtraMsg) Reset() {
	*x = CSODOTALobby_CExtraMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODOTALobby_CExtraMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTALobby_CExtraMsg) ProtoMessage() {}

func (x *CSODOTALobby_CExtraMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTALobby_CExtraMsg.ProtoReflect.Descriptor instead.
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgReadyCheckStatus_ReadyMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ReadyStatus *EReadyCheckStatus `protobuf:"varint,2,opt,name=ready_status,json=readyStatus,enum=dota2.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
}

// Default values for CMsgReadyCheckStatus_ReadyMember fields.
const (
	Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown
)

func (x *CMsgReadyCheckStatus_ReadyMember) Reset() {
	*x = CMsgReadyCheckStatus_ReadyMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgReadyCheckStatus_ReadyMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgReadyCheckStatus_ReadyMember) ProtoMessage() {}

func (x *CMsgReadyCheckStatus_ReadyMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgReadyCheckStatus_ReadyMember.ProtoReflect.Descriptor instead.
func (*CMsgReadyCheckStatus_ReadyMember) Descriptor() ([]byte, []int) {
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgReadyCheckStatus_ReadyMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgReadyCheckStatus_ReadyMember) GetReadyStatus() EReadyCheckStatus {
	if x != nil && x.ReadyStatus != nil {
		return *x.ReadyStatus
	}
	return Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus
}

var File_dota2_dota_gcmessages_common_match_management_proto protoreflect.FileDescriptor

var file_dota2_dota_gcmessages_common_match_management_proto_rawDesc = []byte{
	0x0a, 0x33, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x1a, 0x19, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x67,
	0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6f, 0x74,
	0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x05, 0x0a, 0x12, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x42, 0x75, 0x79,
	0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73,
	0x48, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x9a, 0x15, 0x0a, 0x0c, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x55, 0x49, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x11, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53,
	0x55, 0x41, 0x4c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57,
	0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x4f, 0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x3a, 0x16, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x53,
	0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32,
	0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x23, 0x6b, 0x5f, 0x45,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x52, 0x19, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c,
	0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x66, 0x0a,
	0x13, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x30, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x49, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x22,
	0x90, 0x03, 0x0a, 0x12, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x73, 0x43, 0x6f, 0x61, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x69, 0x64, 0x1a, 0x57, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x22, 0x93, 0x03, 0x0a, 0x12, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3c, 0x0a, 0x0b, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x43, 0x4d, 0x73,
	0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xcb, 0x10, 0x0a, 0x10, 0x43, 0x44, 0x4f, 0x54, 0x41,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x3a, 0x16, 0x44,
	0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x4f, 0x44,
	0x5f, 0x47, 0x55, 0x59, 0x53, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x61, 0x58, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x78,
	0x70, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x65, 0x74, 0x61, 0x58, 0x70, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x50,
	0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x3a, 0x10, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x36, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0c, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x3a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x77, 0x72, 0x64, 0x5f, 0x63, 0x79,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x77, 0x72, 0x64, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43, 0x61, 0x66, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x77, 0x72, 0x64, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x77, 0x72, 0x64, 0x43, 0x79, 0x62, 0x65, 0x72, 0x43, 0x61, 0x66, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x07, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x69, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x78, 0x70, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x58, 0x50, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x09,
	0x78, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x6d, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x38, 0x0a, 0x19, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x76, 0x70, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x76, 0x70, 0x56, 0x6f, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x45, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x3a, 0x13, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x43, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x11,
	0x77, 0x61, 0x73, 0x5f, 0x6d, 0x76, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x73, 0x4d, 0x76, 0x70, 0x4c,
	0x61, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x19,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6f,
	0x6e, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x16, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x6e, 0x56, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x6d,
	0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x4d, 0x52, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x6d, 0x72, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x1a, 0x67, 0x0a, 0x17, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x58,
	0x50, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x78, 0x70,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x78, 0x70,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x9e, 0x04, 0x0a, 0x11, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x1a,
	0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xba, 0x2b, 0x0a, 0x0c, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x06, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x02, 0x55, 0x49, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x19,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x63,
	0x6d, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x50, 0x49, 0x43,
	0x4b, 0x3a, 0x0e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f,
	0x4d, 0x52, 0x06, 0x63, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f,
	0x54, 0x41, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a,
	0x13, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x52, 0x14, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x14, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f,
	0x6f, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x74, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x63, 0x68, 0x61, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x61, 0x6c,
	0x6c, 0x63, 0x68, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x76,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x3a, 0x0e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61,
	0x54, 0x56, 0x5f, 0x31, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x74, 0x61, 0x54, 0x76, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6c, 0x61, 0x6e, 0x12, 0x57, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e,
	0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x2e, 0x43, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x48, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x52, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x1a, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x72, 0x63, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x63, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x50, 0x20, 0x01, 0x28, 0x07, 0x52, 0x13, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x1f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x76,
	0x70, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x18, 0x5d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x13, 0x42,
	0x4f, 0x54, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x52, 0x11, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x44, 0x69, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x52,
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x12, 0x49, 0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x60,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x80, 0x01, 0x0a,
	0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x3a, 0x23, 0x6b, 0x5f, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x2a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x25, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x29, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x23, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x1f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x9e, 0x01,
	0x0a, 0x27, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x22, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x30, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f,
	0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x70, 0x72, 0x69,
	0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x70, 0x72, 0x69, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x61, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x37,
	0x0a, 0x09, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x55, 0x49, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x55, 0x50, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53,
	0x45, 0x54, 0x55, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x4f, 0x54, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x06, 0x22, 0x80, 0x02,
	0x0a, 0x09, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d,
	0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x31, 0x56, 0x31, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x45, 0x4b, 0x45, 0x4e,
	0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0c,
	0x22, 0x2e, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50, 0x6c, 0x61,
	0x79, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x22, 0xf3, 0x02, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x86, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1b, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x7a, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32,
	0x2e, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x19,
	0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x76, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6b, 0x76, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x17, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x15, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2a, 0xb1, 0x01, 0x0a, 0x0e, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x4c, 0x41, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x49, 0x44, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41,
	0x52, 0x44, 0x10, 0x04, 0x2a, 0xd1, 0x02, 0x0a, 0x13, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x41, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4d, 0x49, 0x44,
	0x4c, 0x41, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x08, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4c, 0x61, 0x6e,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45,
	0x4c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x1f, 0x2a, 0x69, 0x0a, 0x16, 0x45, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x5f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x10, 0x01, 0x2a, 0xdc, 0x02, 0x0a, 0x14, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x4d, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b,
	0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d,
	0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x4d, 0x69, 0x6e, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x40, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x41, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x42, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x46, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x43,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x4d, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x10, 0x44, 0x2a, 0x50, 0x0a, 0x10, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54,
	0x56, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x6f, 0x74, 0x61, 0x54, 0x56, 0x5f, 0x31, 0x30, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x5f, 0x31, 0x32, 0x30, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x54, 0x56, 0x5f, 0x33,
	0x30, 0x30, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f,
	0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x1f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x6f, 0x74, 0x61,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x6f, 0x74, 0x61, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x11, 0x45, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x02, 0x2a, 0xf6, 0x01, 0x0a, 0x18, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0xc1, 0x01, 0x0a, 0x1b, 0x45,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x03, 0x42, 0x36,
	0x48, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31,
	0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x64, 0x6f,
	0x74, 0x61, 0x32, 0x80, 0x01, 0x00,
}

var (
	file_dota2_dota_gcmessages_common_match_management_proto_rawDescOnce sync.Once
	file_dota2_dota_gcmessages_common_match_management_proto_rawDescData = file_dota2_dota_gcmessages_common_match_management_proto_rawDesc
)

func file_dota2_dota_gcmessages_common_match_management_proto_rawDescGZIP() []byte {
	file_dota2_dota_gcmessages_common_match_management_proto_rawDescOnce.Do(func() {
		file_dota2_dota_gcmessages_common_match_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_dota2_dota_gcmessages_common_match_management_proto_rawDescData)
	})
	return file_dota2_dota_gcmessages_common_match_management_proto_rawDescData
}

var file_dota2_dota_gcmessages_common_match_management_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_dota2_dota_gcmessages_common_match_management_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_dota2_dota_gcmessages_common_match_management_proto_goTypes = []interface{}{
	(ELaneSelection)(0),                              // 0: dota2.ELaneSelection
	(ELaneSelectionFlags)(0),                         // 1: dota2.ELaneSelectionFlags
	(EPartyMatchmakingFlags)(0),                      // 2: dota2.EPartyMatchmakingFlags
	(EHighPriorityMMState)(0),                        // 3: dota2.EHighPriorityMMState
	(LobbyDotaTVDelay)(0),                            // 4: dota2.LobbyDotaTVDelay
	(LobbyDotaPauseSetting)(0),                       // 5: dota2.LobbyDotaPauseSetting
	(EReadyCheckStatus)(0),                           // 6: dota2.EReadyCheckStatus
	(EReadyCheckRequestResult)(0),                    // 7: dota2.EReadyCheckRequestResult
	(EMatchBehaviorScoreVariance)(0),                 // 8: dota2.EMatchBehaviorScoreVariance
	(CSODOTAParty_State)(0),                          // 9: dota2.CSODOTAParty.State
	(CSODOTALobby_State)(0),                          // 10: dota2.CSODOTALobby.State
	(CSODOTALobby_LobbyType)(0),                      // 11: dota2.CSODOTALobby.LobbyType
	(*CSODOTAPartyMember)(nil),                       // 12: dota2.CSODOTAPartyMember
	(*CSODOTAParty)(nil),                             // 13: dota2.CSODOTAParty
	(*CSODOTAPartyInvite)(nil),                       // 14: dota2.CSODOTAPartyInvite
	(*CSODOTALobbyInvite)(nil),                       // 15: dota2.CSODOTALobbyInvite
	(*CMsgLeaverState)(nil),                          // 16: dota2.CMsgLeaverState
	(*CDOTALobbyMember)(nil),                         // 17: dota2.CDOTALobbyMember
	(*CLobbyTeamDetails)(nil),                        // 18: dota2.CLobbyTeamDetails
	(*CLobbyTimedRewardDetails)(nil),                 // 19: dota2.CLobbyTimedRewardDetails
	(*CLobbyBroadcastChannelInfo)(nil),               // 20: dota2.CLobbyBroadcastChannelInfo
	(*CSODOTALobby)(nil),                             // 21: dota2.CSODOTALobby
	(*CMsgLobbyPlaytestDetails)(nil),                 // 22: dota2.CMsgLobbyPlaytestDetails
	(*CMsgReadyCheckStatus)(nil),                     // 23: dota2.CMsgReadyCheckStatus
	(*CMsgPartyReadyCheckRequest)(nil),               // 24: dota2.CMsgPartyReadyCheckRequest
	(*CMsgPartyReadyCheckResponse)(nil),              // 25: dota2.CMsgPartyReadyCheckResponse
	(*CMsgPartyReadyCheckAcknowledge)(nil),           // 26: dota2.CMsgPartyReadyCheckAcknowledge
	(*CMsgLobbyEventGameDetails)(nil),                // 27: dota2.CMsgLobbyEventGameDetails
	(*CMsgMatchMatchmakingStats)(nil),                // 28: dota2.CMsgMatchMatchmakingStats
	(*CSODOTAPartyInvite_PartyMember)(nil),           // 29: dota2.CSODOTAPartyInvite.PartyMember
	(*CSODOTALobbyInvite_LobbyMember)(nil),           // 30: dota2.CSODOTALobbyInvite.LobbyMember
	(*CDOTALobbyMember_CDOTALobbyMemberXPBonus)(nil), // 31: dota2.CDOTALobbyMember.CDOTALobbyMemberXPBonus
	(*CSODOTALobby_CExtraMsg)(nil),                   // 32: dota2.CSODOTALobby.CExtraMsg
	(*CMsgReadyCheckStatus_ReadyMember)(nil),         // 33: dota2.CMsgReadyCheckStatus.ReadyMember
	(PartnerAccountType)(0),                          // 34: dota2.PartnerAccountType
	(MatchType)(0),                                   // 35: dota2.MatchType
	(DOTABotDifficulty)(0),                           // 36: dota2.DOTABotDifficulty
	(ETourneyQueueDeadlineState)(0),                  // 37: dota2.ETourneyQueueDeadlineState
	(DOTA_GameState)(0),                              // 38: dota2.DOTA_GameState
	(DOTA_GC_TEAM)(0),                                // 39: dota2.DOTA_GC_TEAM
	(DOTALeaverStatusT)(0),                           // 40: dota2.DOTALeaverStatus_t
	(*CMsgPendingEventAward)(nil),                    // 41: dota2.CMsgPendingEventAward
	(EDOTAMMRBoostType)(0),                           // 42: dota2.EDOTAMMRBoostType
	(DOTA_CM_PICK)(0),                                // 43: dota2.DOTA_CM_PICK
	(DOTAGameVersion)(0),                             // 44: dota2.DOTAGameVersion
	(*CDOTASaveGame)(nil),                            // 45: dota2.CDOTASaveGame
	(EMatchOutcome)(0),                               // 46: dota2.EMatchOutcome
	(DOTALobbyVisibility)(0),                         // 47: dota2.DOTALobbyVisibility
	(EEvent)(0),                                      // 48: dota2.EEvent
	(DOTASelectionPriorityRules)(0),                  // 49: dota2.DOTASelectionPriorityRules
	(DOTASelectionPriorityChoice)(0),                 // 50: dota2.DOTASelectionPriorityChoice
}
var file_dota2_dota_gcmessages_common_match_management_proto_depIdxs = []int32{
	34, // 0: dota2.CSODOTAPartyMember.partner_type:type_name -> dota2.PartnerAccountType
	9,  // 1: dota2.CSODOTAParty.state:type_name -> dota2.CSODOTAParty.State
	35, // 2: dota2.CSODOTAParty.match_type:type_name -> dota2.MatchType
	36, // 3: dota2.CSODOTAParty.bot_difficulty:type_name -> dota2.DOTABotDifficulty
	12, // 4: dota2.CSODOTAParty.members:type_name -> dota2.CSODOTAPartyMember
	14, // 5: dota2.CSODOTAParty.sent_invites:type_name -> dota2.CSODOTAPartyInvite
	14, // 6: dota2.CSODOTAParty.recv_invites:type_name -> dota2.CSODOTAPartyInvite
	37, // 7: dota2.CSODOTAParty.tourney_queue_deadline_state:type_name -> dota2.ETourneyQueueDeadlineState
	23, // 8: dota2.CSODOTAParty.ready_check:type_name -> dota2.CMsgReadyCheckStatus
	3,  // 9: dota2.CSODOTAParty.high_priority_state:type_name -> dota2.EHighPriorityMMState
	29, // 10: dota2.CSODOTAPartyInvite.members:type_name -> dota2.CSODOTAPartyInvite.PartyMember
	30, // 11: dota2.CSODOTALobbyInvite.members:type_name -> dota2.CSODOTALobbyInvite.LobbyMember
	38, // 12: dota2.CMsgLeaverState.game_state:type_name -> dota2.DOTA_GameState
	39, // 13: dota2.CDOTALobbyMember.team:type_name -> dota2.DOTA_GC_TEAM
	40, // 14: dota2.CDOTALobbyMember.leaver_status:type_name -> dota2.DOTALeaverStatus_t
	34, // 15: dota2.CDOTALobbyMember.partner_account_type:type_name -> dota2.PartnerAccountType
	39, // 16: dota2.CDOTALobbyMember.coach_team:type_name -> dota2.DOTA_GC_TEAM
	31, // 17: dota2.CDOTALobbyMember.xp_bonuses:type_name -> dota2.CDOTALobbyMember.CDOTALobbyMemberXPBonus
	35, // 18: dota2.CDOTALobbyMember.search_match_type:type_name -> dota2.MatchType
	39, // 19: dota2.CDOTALobbyMember.live_spectator_team:type_name -> dota2.DOTA_GC_TEAM
	41, // 20: dota2.CDOTALobbyMember.pending_awards:type_name -> dota2.CMsgPendingEventAward
	41, // 21: dota2.CDOTALobbyMember.pending_awards_on_victory:type_name -> dota2.CMsgPendingEventAward
	42, // 22: dota2.CDOTALobbyMember.rank_mmr_boost_type:type_name -> dota2.EDOTAMMRBoostType
	17, // 23: dota2.CSODOTALobby.members:type_name -> dota2.CDOTALobbyMember
	17, // 24: dota2.CSODOTALobby.left_members:type_name -> dota2.CDOTALobbyMember
	10, // 25: dota2.CSODOTALobby.state:type_name -> dota2.CSODOTALobby.State
	11, // 26: dota2.CSODOTALobby.lobby_type:type_name -> dota2.CSODOTALobby.LobbyType
	18, // 27: dota2.CSODOTALobby.team_details:type_name -> dota2.CLobbyTeamDetails
	38, // 28: dota2.CSODOTALobby.game_state:type_name -> dota2.DOTA_GameState
	43, // 29: dota2.CSODOTALobby.cm_pick:type_name -> dota2.DOTA_CM_PICK
	36, // 30: dota2.CSODOTALobby.bot_difficulty_radiant:type_name -> dota2.DOTABotDifficulty
	44, // 31: dota2.CSODOTALobby.game_version:type_name -> dota2.DOTAGameVersion
	19, // 32: dota2.CSODOTALobby.timed_reward_details:type_name -> dota2.CLobbyTimedRewardDetails
	4,  // 33: dota2.CSODOTALobby.dota_tv_delay:type_name -> dota2.LobbyDotaTVDelay
	20, // 34: dota2.CSODOTALobby.broadcast_channel_info:type_name -> dota2.CLobbyBroadcastChannelInfo
	32, // 35: dota2.CSODOTALobby.extra_messages:type_name -> dota2.CSODOTALobby.CExtraMsg
	45, // 36: dota2.CSODOTALobby.save_game:type_name -> dota2.CDOTASaveGame
	46, // 37: dota2.CSODOTALobby.match_outcome:type_name -> dota2.EMatchOutcome
	34, // 38: dota2.CSODOTALobby.partner_type:type_name -> dota2.PartnerAccountType
	47, // 39: dota2.CSODOTALobby.visibility:type_name -> dota2.DOTALobbyVisibility
	5,  // 40: dota2.CSODOTALobby.pause_setting:type_name -> dota2.LobbyDotaPauseSetting
	36, // 41: dota2.CSODOTALobby.bot_difficulty_dire:type_name -> dota2.DOTABotDifficulty
	48, // 42: dota2.CSODOTALobby.event_progression_enabled:type_name -> dota2.EEvent
	49, // 43: dota2.CSODOTALobby.selection_priority_rules:type_name -> dota2.DOTASelectionPriorityRules
	50, // 44: dota2.CSODOTALobby.series_current_priority_team_choice:type_name -> dota2.DOTASelectionPriorityChoice
	50, // 45: dota2.CSODOTALobby.series_current_non_priority_team_choice:type_name -> dota2.DOTASelectionPriorityChoice
	48, // 46: dota2.CSODOTALobby.current_primary_event:type_name -> dota2.EEvent
	33, // 47: dota2.CMsgReadyCheckStatus.ready_members:type_name -> dota2.CMsgReadyCheckStatus.ReadyMember
	7,  // 48: dota2.CMsgPartyReadyCheckResponse.result:type_name -> dota2.EReadyCheckRequestResult
	6,  // 49: dota2.CMsgPartyReadyCheckAcknowledge.ready_status:type_name -> dota2.EReadyCheckStatus
	8,  // 50: dota2.CMsgMatchMatchmakingStats.behavior_score_variance:type_name -> dota2.EMatchBehaviorScoreVariance
	6,  // 51: dota2.CMsgReadyCheckStatus.ReadyMember.ready_status:type_name -> dota2.EReadyCheckStatus
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_dota2_dota_gcmessages_common_match_management_proto_init() }
func file_dota2_dota_gcmessages_common_match_management_proto_init() {
	if File_dota2_dota_gcmessages_common_match_management_proto != nil {
		return
	}
	file_dota2_steammessages_proto_init()
	file_dota2_gcsdk_gcmessages_proto_init()
	file_dota2_dota_shared_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobbyInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLeaverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTALobbyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyTeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyTimedRewardDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLobbyBroadcastChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyPlaytestDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyCheckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyReadyCheckAcknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLobbyEventGameDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchMatchmakingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTAPartyInvite_PartyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobbyInvite_LobbyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDOTALobbyMember_CDOTALobbyMemberXPBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODOTALobby_CExtraMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dota2_dota_gcmessages_common_match_management_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgReadyCheckStatus_ReadyMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dota2_dota_gcmessages_common_match_management_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota2_dota_gcmessages_common_match_management_proto_goTypes,
		DependencyIndexes: file_dota2_dota_gcmessages_common_match_management_proto_depIdxs,
		EnumInfos:         file_dota2_dota_gcmessages_common_match_management_proto_enumTypes,
		MessageInfos:      file_dota2_dota_gcmessages_common_match_management_proto_msgTypes,
	}.Build()
	File_dota2_dota_gcmessages_common_match_management_proto = out.File
	file_dota2_dota_gcmessages_common_match_management_proto_rawDesc = nil
	file_dota2_dota_gcmessages_common_match_management_proto_goTypes = nil
	file_dota2_dota_gcmessages_common_match_management_proto_depIdxs = nil
}
