// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: underlords/dac_gcmessages_common.proto

package underlords

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDACCommonMessages int32

const (
	EGCDACCommonMessages_k_EMsgAnyToGCReportAsserts                   EGCDACCommonMessages = 7000
	EGCDACCommonMessages_k_EMsgAnyToGCReportAssertsResponse           EGCDACCommonMessages = 7001
	EGCDACCommonMessages_k_EMsgGCItemEditorReservationsRequest        EGCDACCommonMessages = 7283
	EGCDACCommonMessages_k_EMsgGCItemEditorReservationsResponse       EGCDACCommonMessages = 7284
	EGCDACCommonMessages_k_EMsgGCItemEditorReserveItemDef             EGCDACCommonMessages = 7285
	EGCDACCommonMessages_k_EMsgGCItemEditorReserveItemDefResponse     EGCDACCommonMessages = 7286
	EGCDACCommonMessages_k_EMsgGCItemEditorReleaseReservation         EGCDACCommonMessages = 7287
	EGCDACCommonMessages_k_EMsgGCItemEditorReleaseReservationResponse EGCDACCommonMessages = 7288
)

// Enum value maps for EGCDACCommonMessages.
var (
	EGCDACCommonMessages_name = map[int32]string{
		7000: "k_EMsgAnyToGCReportAsserts",
		7001: "k_EMsgAnyToGCReportAssertsResponse",
		7283: "k_EMsgGCItemEditorReservationsRequest",
		7284: "k_EMsgGCItemEditorReservationsResponse",
		7285: "k_EMsgGCItemEditorReserveItemDef",
		7286: "k_EMsgGCItemEditorReserveItemDefResponse",
		7287: "k_EMsgGCItemEditorReleaseReservation",
		7288: "k_EMsgGCItemEditorReleaseReservationResponse",
	}
	EGCDACCommonMessages_value = map[string]int32{
		"k_EMsgAnyToGCReportAsserts":                   7000,
		"k_EMsgAnyToGCReportAssertsResponse":           7001,
		"k_EMsgGCItemEditorReservationsRequest":        7283,
		"k_EMsgGCItemEditorReservationsResponse":       7284,
		"k_EMsgGCItemEditorReserveItemDef":             7285,
		"k_EMsgGCItemEditorReserveItemDefResponse":     7286,
		"k_EMsgGCItemEditorReleaseReservation":         7287,
		"k_EMsgGCItemEditorReleaseReservationResponse": 7288,
	}
)

func (x EGCDACCommonMessages) Enum() *EGCDACCommonMessages {
	p := new(EGCDACCommonMessages)
	*p = x
	return p
}

func (x EGCDACCommonMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDACCommonMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[0].Descriptor()
}

func (EGCDACCommonMessages) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[0]
}

func (x EGCDACCommonMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDACCommonMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDACCommonMessages(num)
	return nil
}

// Deprecated: Use EGCDACCommonMessages.Descriptor instead.
func (EGCDACCommonMessages) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

type EDACStoreID int32

const (
	EDACStoreID_k_EDACStoreID_Invalid      EDACStoreID = 0
	EDACStoreID_k_EDACStoreID_iOS          EDACStoreID = 1
	EDACStoreID_k_EDACStoreID_GooglePlay   EDACStoreID = 2
	EDACStoreID_k_EDACStoreID_SteamOverlay EDACStoreID = 3
	EDACStoreID_k_EDACStoreID_Test         EDACStoreID = 4
)

// Enum value maps for EDACStoreID.
var (
	EDACStoreID_name = map[int32]string{
		0: "k_EDACStoreID_Invalid",
		1: "k_EDACStoreID_iOS",
		2: "k_EDACStoreID_GooglePlay",
		3: "k_EDACStoreID_SteamOverlay",
		4: "k_EDACStoreID_Test",
	}
	EDACStoreID_value = map[string]int32{
		"k_EDACStoreID_Invalid":      0,
		"k_EDACStoreID_iOS":          1,
		"k_EDACStoreID_GooglePlay":   2,
		"k_EDACStoreID_SteamOverlay": 3,
		"k_EDACStoreID_Test":         4,
	}
)

func (x EDACStoreID) Enum() *EDACStoreID {
	p := new(EDACStoreID)
	*p = x
	return p
}

func (x EDACStoreID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACStoreID) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[1].Descriptor()
}

func (EDACStoreID) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[1]
}

func (x EDACStoreID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACStoreID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACStoreID(num)
	return nil
}

// Deprecated: Use EDACStoreID.Descriptor instead.
func (EDACStoreID) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

type EDACRegionMode int32

const (
	EDACRegionMode_k_EDACRegionMode_ROW   EDACRegionMode = 0
	EDACRegionMode_k_EDACRegionMode_China EDACRegionMode = 1
)

// Enum value maps for EDACRegionMode.
var (
	EDACRegionMode_name = map[int32]string{
		0: "k_EDACRegionMode_ROW",
		1: "k_EDACRegionMode_China",
	}
	EDACRegionMode_value = map[string]int32{
		"k_EDACRegionMode_ROW":   0,
		"k_EDACRegionMode_China": 1,
	}
)

func (x EDACRegionMode) Enum() *EDACRegionMode {
	p := new(EDACRegionMode)
	*p = x
	return p
}

func (x EDACRegionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACRegionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[2].Descriptor()
}

func (EDACRegionMode) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[2]
}

func (x EDACRegionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACRegionMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACRegionMode(num)
	return nil
}

// Deprecated: Use EDACRegionMode.Descriptor instead.
func (EDACRegionMode) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

type EDACMatchMode int32

const (
	EDACMatchMode_k_EDACMatchMode_Invalid      EDACMatchMode = 0
	EDACMatchMode_k_EDACMatchMode_Casual       EDACMatchMode = 1
	EDACMatchMode_k_EDACMatchMode_PrivateLobby EDACMatchMode = 2
	EDACMatchMode_k_EDACMatchMode_SoloBot      EDACMatchMode = 3
	EDACMatchMode_k_EDACMatchMode_Ranked       EDACMatchMode = 4
)

// Enum value maps for EDACMatchMode.
var (
	EDACMatchMode_name = map[int32]string{
		0: "k_EDACMatchMode_Invalid",
		1: "k_EDACMatchMode_Casual",
		2: "k_EDACMatchMode_PrivateLobby",
		3: "k_EDACMatchMode_SoloBot",
		4: "k_EDACMatchMode_Ranked",
	}
	EDACMatchMode_value = map[string]int32{
		"k_EDACMatchMode_Invalid":      0,
		"k_EDACMatchMode_Casual":       1,
		"k_EDACMatchMode_PrivateLobby": 2,
		"k_EDACMatchMode_SoloBot":      3,
		"k_EDACMatchMode_Ranked":       4,
	}
)

func (x EDACMatchMode) Enum() *EDACMatchMode {
	p := new(EDACMatchMode)
	*p = x
	return p
}

func (x EDACMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[3].Descriptor()
}

func (EDACMatchMode) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[3]
}

func (x EDACMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACMatchMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACMatchMode(num)
	return nil
}

// Deprecated: Use EDACMatchMode.Descriptor instead.
func (EDACMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

type EDACGameMode int32

const (
	EDACGameMode_k_EDACGameMode_Invalid        EDACGameMode = 0
	EDACGameMode_k_EDACGameMode_Normal         EDACGameMode = 1
	EDACGameMode_k_EDACGameMode_Turbo          EDACGameMode = 2
	EDACGameMode_k_EDACGameMode_Duos           EDACGameMode = 3
	EDACGameMode_k_EDACGameMode_TechPrototypeA EDACGameMode = 4
	EDACGameMode_k_EDACGameMode_Sandbox        EDACGameMode = 5
	EDACGameMode_k_EDACGameMode_Puzzle         EDACGameMode = 6
	EDACGameMode_k_EDACGameMode_Tutorial       EDACGameMode = 7
	EDACGameMode_k_EDACGameMode_Streetfight    EDACGameMode = 8
)

// Enum value maps for EDACGameMode.
var (
	EDACGameMode_name = map[int32]string{
		0: "k_EDACGameMode_Invalid",
		1: "k_EDACGameMode_Normal",
		2: "k_EDACGameMode_Turbo",
		3: "k_EDACGameMode_Duos",
		4: "k_EDACGameMode_TechPrototypeA",
		5: "k_EDACGameMode_Sandbox",
		6: "k_EDACGameMode_Puzzle",
		7: "k_EDACGameMode_Tutorial",
		8: "k_EDACGameMode_Streetfight",
	}
	EDACGameMode_value = map[string]int32{
		"k_EDACGameMode_Invalid":        0,
		"k_EDACGameMode_Normal":         1,
		"k_EDACGameMode_Turbo":          2,
		"k_EDACGameMode_Duos":           3,
		"k_EDACGameMode_TechPrototypeA": 4,
		"k_EDACGameMode_Sandbox":        5,
		"k_EDACGameMode_Puzzle":         6,
		"k_EDACGameMode_Tutorial":       7,
		"k_EDACGameMode_Streetfight":    8,
	}
)

func (x EDACGameMode) Enum() *EDACGameMode {
	p := new(EDACGameMode)
	*p = x
	return p
}

func (x EDACGameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACGameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[4].Descriptor()
}

func (EDACGameMode) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[4]
}

func (x EDACGameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACGameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACGameMode(num)
	return nil
}

// Deprecated: Use EDACGameMode.Descriptor instead.
func (EDACGameMode) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

type EDACLobbyTeam int32

const (
	EDACLobbyTeam_k_EDACLobbyTeam_Team0     EDACLobbyTeam = 0
	EDACLobbyTeam_k_EDACLobbyTeam_Team1     EDACLobbyTeam = 1
	EDACLobbyTeam_k_EDACLobbyTeam_Team2     EDACLobbyTeam = 2
	EDACLobbyTeam_k_EDACLobbyTeam_Team3     EDACLobbyTeam = 3
	EDACLobbyTeam_k_EDACLobbyTeam_Team4     EDACLobbyTeam = 4
	EDACLobbyTeam_k_EDACLobbyTeam_Team5     EDACLobbyTeam = 5
	EDACLobbyTeam_k_EDACLobbyTeam_Team6     EDACLobbyTeam = 6
	EDACLobbyTeam_k_EDACLobbyTeam_Team7     EDACLobbyTeam = 7
	EDACLobbyTeam_k_EDACLobbyTeam_Spectator EDACLobbyTeam = 250
)

// Enum value maps for EDACLobbyTeam.
var (
	EDACLobbyTeam_name = map[int32]string{
		0:   "k_EDACLobbyTeam_Team0",
		1:   "k_EDACLobbyTeam_Team1",
		2:   "k_EDACLobbyTeam_Team2",
		3:   "k_EDACLobbyTeam_Team3",
		4:   "k_EDACLobbyTeam_Team4",
		5:   "k_EDACLobbyTeam_Team5",
		6:   "k_EDACLobbyTeam_Team6",
		7:   "k_EDACLobbyTeam_Team7",
		250: "k_EDACLobbyTeam_Spectator",
	}
	EDACLobbyTeam_value = map[string]int32{
		"k_EDACLobbyTeam_Team0":     0,
		"k_EDACLobbyTeam_Team1":     1,
		"k_EDACLobbyTeam_Team2":     2,
		"k_EDACLobbyTeam_Team3":     3,
		"k_EDACLobbyTeam_Team4":     4,
		"k_EDACLobbyTeam_Team5":     5,
		"k_EDACLobbyTeam_Team6":     6,
		"k_EDACLobbyTeam_Team7":     7,
		"k_EDACLobbyTeam_Spectator": 250,
	}
)

func (x EDACLobbyTeam) Enum() *EDACLobbyTeam {
	p := new(EDACLobbyTeam)
	*p = x
	return p
}

func (x EDACLobbyTeam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACLobbyTeam) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[5].Descriptor()
}

func (EDACLobbyTeam) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[5]
}

func (x EDACLobbyTeam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACLobbyTeam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACLobbyTeam(num)
	return nil
}

// Deprecated: Use EDACLobbyTeam.Descriptor instead.
func (EDACLobbyTeam) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

type EDACBotDifficulty int32

const (
	EDACBotDifficulty_k_EDACBotDifficulty_None      EDACBotDifficulty = 0
	EDACBotDifficulty_k_EDACBotDifficulty_Easy      EDACBotDifficulty = 1
	EDACBotDifficulty_k_EDACBotDifficulty_Medium    EDACBotDifficulty = 2
	EDACBotDifficulty_k_EDACBotDifficulty_Hard      EDACBotDifficulty = 3
	EDACBotDifficulty_k_EDACBotDifficulty_Nightmare EDACBotDifficulty = 4
	EDACBotDifficulty_k_EDACBotDifficulty_ML        EDACBotDifficulty = 5
	EDACBotDifficulty_k_EDACBotDifficulty_MommaEeb  EDACBotDifficulty = 6
)

// Enum value maps for EDACBotDifficulty.
var (
	EDACBotDifficulty_name = map[int32]string{
		0: "k_EDACBotDifficulty_None",
		1: "k_EDACBotDifficulty_Easy",
		2: "k_EDACBotDifficulty_Medium",
		3: "k_EDACBotDifficulty_Hard",
		4: "k_EDACBotDifficulty_Nightmare",
		5: "k_EDACBotDifficulty_ML",
		6: "k_EDACBotDifficulty_MommaEeb",
	}
	EDACBotDifficulty_value = map[string]int32{
		"k_EDACBotDifficulty_None":      0,
		"k_EDACBotDifficulty_Easy":      1,
		"k_EDACBotDifficulty_Medium":    2,
		"k_EDACBotDifficulty_Hard":      3,
		"k_EDACBotDifficulty_Nightmare": 4,
		"k_EDACBotDifficulty_ML":        5,
		"k_EDACBotDifficulty_MommaEeb":  6,
	}
)

func (x EDACBotDifficulty) Enum() *EDACBotDifficulty {
	p := new(EDACBotDifficulty)
	*p = x
	return p
}

func (x EDACBotDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACBotDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[6].Descriptor()
}

func (EDACBotDifficulty) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[6]
}

func (x EDACBotDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACBotDifficulty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACBotDifficulty(num)
	return nil
}

// Deprecated: Use EDACBotDifficulty.Descriptor instead.
func (EDACBotDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

type EDACAIType int32

const (
	EDACAIType_k_EDACAIType_Invalid EDACAIType = 0
	EDACAIType_k_EDACAIType_Lvl1    EDACAIType = 1
	EDACAIType_k_EDACAIType_Lvl2    EDACAIType = 2
	EDACAIType_k_EDACAIType_Lvl3    EDACAIType = 3
	EDACAIType_k_EDACAIType_Lvl4    EDACAIType = 4
	EDACAIType_k_EDACAIType_Lvl5    EDACAIType = 5
	EDACAIType_k_EDACAIType_Lvl6    EDACAIType = 6
	EDACAIType_k_EDACAIType_Lvl7    EDACAIType = 7
	EDACAIType_k_EDACAIType_Lvl8    EDACAIType = 8
	EDACAIType_k_EDACAIType_ML      EDACAIType = 19
	EDACAIType_k_EDACAIType_PB0     EDACAIType = 20
	EDACAIType_k_EDACAIType_PB1     EDACAIType = 21
	EDACAIType_k_EDACAIType_PB2     EDACAIType = 22
	EDACAIType_k_EDACAIType_PB3     EDACAIType = 23
	EDACAIType_k_EDACAIType_PB4     EDACAIType = 24
	EDACAIType_k_EDACAIType_PB5     EDACAIType = 25
	EDACAIType_k_EDACAIType_PB6     EDACAIType = 26
	EDACAIType_k_EDACAIType_PB7     EDACAIType = 27
	EDACAIType_k_EDACAIType_PB8     EDACAIType = 28
	EDACAIType_k_EDACAIType_PB9     EDACAIType = 29
	EDACAIType_k_EDACAIType_PB10    EDACAIType = 30
	EDACAIType_k_EDACAIType_PB11    EDACAIType = 31
	EDACAIType_k_EDACAIType_PB12    EDACAIType = 32
	EDACAIType_k_EDACAIType_PB13    EDACAIType = 33
	EDACAIType_k_EDACAIType_PB14    EDACAIType = 34
	EDACAIType_k_EDACAIType_PB15    EDACAIType = 35
	EDACAIType_k_EDACAIType_PB16    EDACAIType = 36
	EDACAIType_k_EDACAIType_PB17    EDACAIType = 37
	EDACAIType_k_EDACAIType_PB18    EDACAIType = 38
	EDACAIType_k_EDACAIType_PB19    EDACAIType = 39
	EDACAIType_k_EDACAIType_PB20    EDACAIType = 40
	EDACAIType_k_EDACAIType_PB21    EDACAIType = 41
	EDACAIType_k_EDACAIType_PB22    EDACAIType = 42
	EDACAIType_k_EDACAIType_PB23    EDACAIType = 43
	EDACAIType_k_EDACAIType_PB24    EDACAIType = 44
	EDACAIType_k_EDACAIType_PB25    EDACAIType = 45
	EDACAIType_k_EDACAIType_PB26    EDACAIType = 46
	EDACAIType_k_EDACAIType_PB27    EDACAIType = 47
	EDACAIType_k_EDACAIType_PB28    EDACAIType = 48
	EDACAIType_k_EDACAIType_PB29    EDACAIType = 49
	EDACAIType_k_EDACAIType_PB30    EDACAIType = 50
	EDACAIType_k_EDACAIType_PB31    EDACAIType = 51
	EDACAIType_k_EDACAIType_PB32    EDACAIType = 52
	EDACAIType_k_EDACAIType_PB33    EDACAIType = 53
	EDACAIType_k_EDACAIType_PB34    EDACAIType = 54
	EDACAIType_k_EDACAIType_PB35    EDACAIType = 55
)

// Enum value maps for EDACAIType.
var (
	EDACAIType_name = map[int32]string{
		0:  "k_EDACAIType_Invalid",
		1:  "k_EDACAIType_Lvl1",
		2:  "k_EDACAIType_Lvl2",
		3:  "k_EDACAIType_Lvl3",
		4:  "k_EDACAIType_Lvl4",
		5:  "k_EDACAIType_Lvl5",
		6:  "k_EDACAIType_Lvl6",
		7:  "k_EDACAIType_Lvl7",
		8:  "k_EDACAIType_Lvl8",
		19: "k_EDACAIType_ML",
		20: "k_EDACAIType_PB0",
		21: "k_EDACAIType_PB1",
		22: "k_EDACAIType_PB2",
		23: "k_EDACAIType_PB3",
		24: "k_EDACAIType_PB4",
		25: "k_EDACAIType_PB5",
		26: "k_EDACAIType_PB6",
		27: "k_EDACAIType_PB7",
		28: "k_EDACAIType_PB8",
		29: "k_EDACAIType_PB9",
		30: "k_EDACAIType_PB10",
		31: "k_EDACAIType_PB11",
		32: "k_EDACAIType_PB12",
		33: "k_EDACAIType_PB13",
		34: "k_EDACAIType_PB14",
		35: "k_EDACAIType_PB15",
		36: "k_EDACAIType_PB16",
		37: "k_EDACAIType_PB17",
		38: "k_EDACAIType_PB18",
		39: "k_EDACAIType_PB19",
		40: "k_EDACAIType_PB20",
		41: "k_EDACAIType_PB21",
		42: "k_EDACAIType_PB22",
		43: "k_EDACAIType_PB23",
		44: "k_EDACAIType_PB24",
		45: "k_EDACAIType_PB25",
		46: "k_EDACAIType_PB26",
		47: "k_EDACAIType_PB27",
		48: "k_EDACAIType_PB28",
		49: "k_EDACAIType_PB29",
		50: "k_EDACAIType_PB30",
		51: "k_EDACAIType_PB31",
		52: "k_EDACAIType_PB32",
		53: "k_EDACAIType_PB33",
		54: "k_EDACAIType_PB34",
		55: "k_EDACAIType_PB35",
	}
	EDACAIType_value = map[string]int32{
		"k_EDACAIType_Invalid": 0,
		"k_EDACAIType_Lvl1":    1,
		"k_EDACAIType_Lvl2":    2,
		"k_EDACAIType_Lvl3":    3,
		"k_EDACAIType_Lvl4":    4,
		"k_EDACAIType_Lvl5":    5,
		"k_EDACAIType_Lvl6":    6,
		"k_EDACAIType_Lvl7":    7,
		"k_EDACAIType_Lvl8":    8,
		"k_EDACAIType_ML":      19,
		"k_EDACAIType_PB0":     20,
		"k_EDACAIType_PB1":     21,
		"k_EDACAIType_PB2":     22,
		"k_EDACAIType_PB3":     23,
		"k_EDACAIType_PB4":     24,
		"k_EDACAIType_PB5":     25,
		"k_EDACAIType_PB6":     26,
		"k_EDACAIType_PB7":     27,
		"k_EDACAIType_PB8":     28,
		"k_EDACAIType_PB9":     29,
		"k_EDACAIType_PB10":    30,
		"k_EDACAIType_PB11":    31,
		"k_EDACAIType_PB12":    32,
		"k_EDACAIType_PB13":    33,
		"k_EDACAIType_PB14":    34,
		"k_EDACAIType_PB15":    35,
		"k_EDACAIType_PB16":    36,
		"k_EDACAIType_PB17":    37,
		"k_EDACAIType_PB18":    38,
		"k_EDACAIType_PB19":    39,
		"k_EDACAIType_PB20":    40,
		"k_EDACAIType_PB21":    41,
		"k_EDACAIType_PB22":    42,
		"k_EDACAIType_PB23":    43,
		"k_EDACAIType_PB24":    44,
		"k_EDACAIType_PB25":    45,
		"k_EDACAIType_PB26":    46,
		"k_EDACAIType_PB27":    47,
		"k_EDACAIType_PB28":    48,
		"k_EDACAIType_PB29":    49,
		"k_EDACAIType_PB30":    50,
		"k_EDACAIType_PB31":    51,
		"k_EDACAIType_PB32":    52,
		"k_EDACAIType_PB33":    53,
		"k_EDACAIType_PB34":    54,
		"k_EDACAIType_PB35":    55,
	}
)

func (x EDACAIType) Enum() *EDACAIType {
	p := new(EDACAIType)
	*p = x
	return p
}

func (x EDACAIType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACAIType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[7].Descriptor()
}

func (EDACAIType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[7]
}

func (x EDACAIType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACAIType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACAIType(num)
	return nil
}

// Deprecated: Use EDACAIType.Descriptor instead.
func (EDACAIType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

type EDACMatchState int32

const (
	EDACMatchState_k_EMatchState_InProgress           EDACMatchState = 0
	EDACMatchState_k_EMatchState_Completed            EDACMatchState = 1
	EDACMatchState_k_EMatchState_Failed_NetworkIssues EDACMatchState = 2
	EDACMatchState_k_EMatchState_Failed_ServerCrash   EDACMatchState = 3
)

// Enum value maps for EDACMatchState.
var (
	EDACMatchState_name = map[int32]string{
		0: "k_EMatchState_InProgress",
		1: "k_EMatchState_Completed",
		2: "k_EMatchState_Failed_NetworkIssues",
		3: "k_EMatchState_Failed_ServerCrash",
	}
	EDACMatchState_value = map[string]int32{
		"k_EMatchState_InProgress":           0,
		"k_EMatchState_Completed":            1,
		"k_EMatchState_Failed_NetworkIssues": 2,
		"k_EMatchState_Failed_ServerCrash":   3,
	}
)

func (x EDACMatchState) Enum() *EDACMatchState {
	p := new(EDACMatchState)
	*p = x
	return p
}

func (x EDACMatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACMatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[8].Descriptor()
}

func (EDACMatchState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[8]
}

func (x EDACMatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACMatchState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACMatchState(num)
	return nil
}

// Deprecated: Use EDACMatchState.Descriptor instead.
func (EDACMatchState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

type EDACPlayerState int32

const (
	EDACPlayerState_k_EPlayerState_Playing       EDACPlayerState = 0
	EDACPlayerState_k_EPlayerState_Eliminated    EDACPlayerState = 1
	EDACPlayerState_k_EPlayerState_Abandoned     EDACPlayerState = 2
	EDACPlayerState_k_EPlayerState_Disconnected  EDACPlayerState = 3
	EDACPlayerState_k_EPlayerState_ServerCrashed EDACPlayerState = 4
)

// Enum value maps for EDACPlayerState.
var (
	EDACPlayerState_name = map[int32]string{
		0: "k_EPlayerState_Playing",
		1: "k_EPlayerState_Eliminated",
		2: "k_EPlayerState_Abandoned",
		3: "k_EPlayerState_Disconnected",
		4: "k_EPlayerState_ServerCrashed",
	}
	EDACPlayerState_value = map[string]int32{
		"k_EPlayerState_Playing":       0,
		"k_EPlayerState_Eliminated":    1,
		"k_EPlayerState_Abandoned":     2,
		"k_EPlayerState_Disconnected":  3,
		"k_EPlayerState_ServerCrashed": 4,
	}
)

func (x EDACPlayerState) Enum() *EDACPlayerState {
	p := new(EDACPlayerState)
	*p = x
	return p
}

func (x EDACPlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACPlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[9].Descriptor()
}

func (EDACPlayerState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[9]
}

func (x EDACPlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACPlayerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACPlayerState(num)
	return nil
}

// Deprecated: Use EDACPlayerState.Descriptor instead.
func (EDACPlayerState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

type ELobbyServerState int32

const (
	ELobbyServerState_k_eLobbyServerState_Assign    ELobbyServerState = 0
	ELobbyServerState_k_eLobbyServerState_InGame    ELobbyServerState = 1
	ELobbyServerState_k_eLobbyServerState_PostMatch ELobbyServerState = 2
	ELobbyServerState_k_eLobbyServerState_SignedOut ELobbyServerState = 3
	ELobbyServerState_k_eLobbyServerState_Abandoned ELobbyServerState = 4
)

// Enum value maps for ELobbyServerState.
var (
	ELobbyServerState_name = map[int32]string{
		0: "k_eLobbyServerState_Assign",
		1: "k_eLobbyServerState_InGame",
		2: "k_eLobbyServerState_PostMatch",
		3: "k_eLobbyServerState_SignedOut",
		4: "k_eLobbyServerState_Abandoned",
	}
	ELobbyServerState_value = map[string]int32{
		"k_eLobbyServerState_Assign":    0,
		"k_eLobbyServerState_InGame":    1,
		"k_eLobbyServerState_PostMatch": 2,
		"k_eLobbyServerState_SignedOut": 3,
		"k_eLobbyServerState_Abandoned": 4,
	}
)

func (x ELobbyServerState) Enum() *ELobbyServerState {
	p := new(ELobbyServerState)
	*p = x
	return p
}

func (x ELobbyServerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELobbyServerState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[10].Descriptor()
}

func (ELobbyServerState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[10]
}

func (x ELobbyServerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELobbyServerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELobbyServerState(num)
	return nil
}

// Deprecated: Use ELobbyServerState.Descriptor instead.
func (ELobbyServerState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

type CSODACParty_EMemberRights int32

const (
	CSODACParty_k_eMemberRights_Admin        CSODACParty_EMemberRights = 1
	CSODACParty_k_eMemberRights_Creator      CSODACParty_EMemberRights = 2
	CSODACParty_k_eMemberRights_RankedMM     CSODACParty_EMemberRights = 4
	CSODACParty_k_eMemberRights_HighRankedMM CSODACParty_EMemberRights = 8
)

// Enum value maps for CSODACParty_EMemberRights.
var (
	CSODACParty_EMemberRights_name = map[int32]string{
		1: "k_eMemberRights_Admin",
		2: "k_eMemberRights_Creator",
		4: "k_eMemberRights_RankedMM",
		8: "k_eMemberRights_HighRankedMM",
	}
	CSODACParty_EMemberRights_value = map[string]int32{
		"k_eMemberRights_Admin":        1,
		"k_eMemberRights_Creator":      2,
		"k_eMemberRights_RankedMM":     4,
		"k_eMemberRights_HighRankedMM": 8,
	}
)

func (x CSODACParty_EMemberRights) Enum() *CSODACParty_EMemberRights {
	p := new(CSODACParty_EMemberRights)
	*p = x
	return p
}

func (x CSODACParty_EMemberRights) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODACParty_EMemberRights) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[11].Descriptor()
}

func (CSODACParty_EMemberRights) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[11]
}

func (x CSODACParty_EMemberRights) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODACParty_EMemberRights) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODACParty_EMemberRights(num)
	return nil
}

// Deprecated: Use CSODACParty_EMemberRights.Descriptor instead.
func (CSODACParty_EMemberRights) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 0}
}

type CSODACParty_EPlayerType int32

const (
	CSODACParty_k_ePlayerType_Player    CSODACParty_EPlayerType = 0
	CSODACParty_k_ePlayerType_Spectator CSODACParty_EPlayerType = 1
)

// Enum value maps for CSODACParty_EPlayerType.
var (
	CSODACParty_EPlayerType_name = map[int32]string{
		0: "k_ePlayerType_Player",
		1: "k_ePlayerType_Spectator",
	}
	CSODACParty_EPlayerType_value = map[string]int32{
		"k_ePlayerType_Player":    0,
		"k_ePlayerType_Spectator": 1,
	}
)

func (x CSODACParty_EPlayerType) Enum() *CSODACParty_EPlayerType {
	p := new(CSODACParty_EPlayerType)
	*p = x
	return p
}

func (x CSODACParty_EPlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODACParty_EPlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[12].Descriptor()
}

func (CSODACParty_EPlayerType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[12]
}

func (x CSODACParty_EPlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODACParty_EPlayerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODACParty_EPlayerType(num)
	return nil
}

// Deprecated: Use CSODACParty_EPlayerType.Descriptor instead.
func (CSODACParty_EPlayerType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 1}
}

type CSODACParty_ETeamFlags int32

const (
	CSODACParty_k_eTeamFlags_CanRename      CSODACParty_ETeamFlags = 1
	CSODACParty_k_eTeamFlags_RenameCooldown CSODACParty_ETeamFlags = 2
)

// Enum value maps for CSODACParty_ETeamFlags.
var (
	CSODACParty_ETeamFlags_name = map[int32]string{
		1: "k_eTeamFlags_CanRename",
		2: "k_eTeamFlags_RenameCooldown",
	}
	CSODACParty_ETeamFlags_value = map[string]int32{
		"k_eTeamFlags_CanRename":      1,
		"k_eTeamFlags_RenameCooldown": 2,
	}
)

func (x CSODACParty_ETeamFlags) Enum() *CSODACParty_ETeamFlags {
	p := new(CSODACParty_ETeamFlags)
	*p = x
	return p
}

func (x CSODACParty_ETeamFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSODACParty_ETeamFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_common_proto_enumTypes[13].Descriptor()
}

func (CSODACParty_ETeamFlags) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_common_proto_enumTypes[13]
}

func (x CSODACParty_ETeamFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSODACParty_ETeamFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSODACParty_ETeamFlags(num)
	return nil
}

// Deprecated: Use CSODACParty_ETeamFlags.Descriptor instead.
func (CSODACParty_ETeamFlags) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 2}
}

type CMsgGameModifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameModifiers) Reset() {
	*x = CMsgGameModifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModifiers) ProtoMessage() {}

func (x *CMsgGameModifiers) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModifiers.ProtoReflect.Descriptor instead.
func (*CMsgGameModifiers) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{0}
}

type CMsgTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAccountIds    []uint32 `protobuf:"varint,1,rep,packed,name=member_account_ids,json=memberAccountIds" json:"member_account_ids,omitempty"`
	TeamName            *string  `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	MmrLevelScore       *uint32  `protobuf:"varint,3,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
	MmrLevel            *uint32  `protobuf:"varint,4,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	MmrLeaderboardPlace *uint32  `protobuf:"varint,5,opt,name=mmr_leaderboard_place,json=mmrLeaderboardPlace" json:"mmr_leaderboard_place,omitempty"`
}

func (x *CMsgTeamInfo) Reset() {
	*x = CMsgTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTeamInfo) ProtoMessage() {}

func (x *CMsgTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgTeamInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgTeamInfo) GetMemberAccountIds() []uint32 {
	if x != nil {
		return x.MemberAccountIds
	}
	return nil
}

func (x *CMsgTeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgTeamInfo) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

func (x *CMsgTeamInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CMsgTeamInfo) GetMmrLeaderboardPlace() uint32 {
	if x != nil && x.MmrLeaderboardPlace != nil {
		return *x.MmrLeaderboardPlace
	}
	return 0
}

type CServerLobbyData_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             *uint32                                    `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MmrLevel              *uint32                                    `protobuf:"varint,2,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	Loadout               []*CServerLobbyData_PlayerInfo_LoadoutSlot `protobuf:"bytes,3,rep,name=loadout" json:"loadout,omitempty"`
	Events                []*CServerLobbyData_PlayerInfo_Event       `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	GlobalLeaderboardRank *uint32                                    `protobuf:"varint,5,opt,name=global_leaderboard_rank,json=globalLeaderboardRank" json:"global_leaderboard_rank,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo) Reset() {
	*x = CServerLobbyData_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2}
}

func (x *CServerLobbyData_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo) GetLoadout() []*CServerLobbyData_PlayerInfo_LoadoutSlot {
	if x != nil {
		return x.Loadout
	}
	return nil
}

func (x *CServerLobbyData_PlayerInfo) GetEvents() []*CServerLobbyData_PlayerInfo_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CServerLobbyData_PlayerInfo) GetGlobalLeaderboardRank() uint32 {
	if x != nil && x.GlobalLeaderboardRank != nil {
		return *x.GlobalLeaderboardRank
	}
	return 0
}

type CMsgRegionPingTimesClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterCodes []uint32 `protobuf:"fixed32,1,rep,packed,name=data_center_codes,json=dataCenterCodes" json:"data_center_codes,omitempty"`
	PingTimes       []uint32 `protobuf:"varint,2,rep,packed,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgRegionPingTimesClient) Reset() {
	*x = CMsgRegionPingTimesClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRegionPingTimesClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRegionPingTimesClient) ProtoMessage() {}

func (x *CMsgRegionPingTimesClient) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRegionPingTimesClient.ProtoReflect.Descriptor instead.
func (*CMsgRegionPingTimesClient) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgRegionPingTimesClient) GetDataCenterCodes() []uint32 {
	if x != nil {
		return x.DataCenterCodes
	}
	return nil
}

func (x *CMsgRegionPingTimesClient) GetPingTimes() []uint32 {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CSODACLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion         *uint32            `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	CompatibilityVersion  *uint32            `protobuf:"varint,2,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
	ServerSteamId         *uint64            `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	DevIgnoreStagingFiles *bool              `protobuf:"varint,4,opt,name=dev_ignore_staging_files,json=devIgnoreStagingFiles" json:"dev_ignore_staging_files,omitempty"`
	LobbyId               *uint64            `protobuf:"varint,5,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId               *uint64            `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerState           *ELobbyServerState `protobuf:"varint,8,opt,name=server_state,json=serverState,enum=underlords.ELobbyServerState,def=0" json:"server_state,omitempty"`
	MatchMode             *EDACMatchMode     `protobuf:"varint,10,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	UdpConnectIp          *uint32            `protobuf:"varint,11,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort        *uint32            `protobuf:"varint,12,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
	GameMode              *EDACGameMode      `protobuf:"varint,13,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
}

// Default values for CSODACLobby fields.
const (
	Default_CSODACLobby_ServerState = ELobbyServerState_k_eLobbyServerState_Assign
	Default_CSODACLobby_MatchMode   = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CSODACLobby_GameMode    = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CSODACLobby) Reset() {
	*x = CSODACLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACLobby) ProtoMessage() {}

func (x *CSODACLobby) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACLobby.ProtoReflect.Descriptor instead.
func (*CSODACLobby) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{4}
}

func (x *CSODACLobby) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CSODACLobby) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

func (x *CSODACLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSODACLobby) GetDevIgnoreStagingFiles() bool {
	if x != nil && x.DevIgnoreStagingFiles != nil {
		return *x.DevIgnoreStagingFiles
	}
	return false
}

func (x *CSODACLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODACLobby) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CSODACLobby) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return Default_CSODACLobby_ServerState
}

func (x *CSODACLobby) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CSODACLobby_MatchMode
}

func (x *CSODACLobby) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CSODACLobby) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

func (x *CSODACLobby) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CSODACLobby_GameMode
}

type CSODACParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId           *uint64                   `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Members           []*CSODACParty_Member     `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Invites           []*CSODACParty_Invite     `protobuf:"bytes,3,rep,name=invites" json:"invites,omitempty"`
	InMatchMaking     *bool                     `protobuf:"varint,5,opt,name=in_match_making,json=inMatchMaking" json:"in_match_making,omitempty"`
	PartyPassword     *string                   `protobuf:"bytes,6,opt,name=party_password,json=partyPassword" json:"party_password,omitempty"`
	LeftMembers       []*CSODACParty_LeftMember `protobuf:"bytes,10,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	JoinCode          *uint64                   `protobuf:"varint,11,opt,name=join_code,json=joinCode" json:"join_code,omitempty"`
	BotDifficulty     *EDACBotDifficulty        `protobuf:"varint,12,opt,name=bot_difficulty,json=botDifficulty,enum=underlords.EDACBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	UseCustomModifier *bool                     `protobuf:"varint,13,opt,name=use_custom_modifier,json=useCustomModifier" json:"use_custom_modifier,omitempty"`
	CustomModifier    *CMsgGameModifiers        `protobuf:"bytes,14,opt,name=custom_modifier,json=customModifier" json:"custom_modifier,omitempty"`
	Teams             []*CSODACParty_TeamInfo   `protobuf:"bytes,15,rep,name=teams" json:"teams,omitempty"`
}

// Default values for CSODACParty fields.
const (
	Default_CSODACParty_BotDifficulty = EDACBotDifficulty_k_EDACBotDifficulty_None
)

func (x *CSODACParty) Reset() {
	*x = CSODACParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACParty) ProtoMessage() {}

func (x *CSODACParty) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACParty.ProtoReflect.Descriptor instead.
func (*CSODACParty) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5}
}

func (x *CSODACParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CSODACParty) GetMembers() []*CSODACParty_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODACParty) GetInvites() []*CSODACParty_Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

func (x *CSODACParty) GetInMatchMaking() bool {
	if x != nil && x.InMatchMaking != nil {
		return *x.InMatchMaking
	}
	return false
}

func (x *CSODACParty) GetPartyPassword() string {
	if x != nil && x.PartyPassword != nil {
		return *x.PartyPassword
	}
	return ""
}

func (x *CSODACParty) GetLeftMembers() []*CSODACParty_LeftMember {
	if x != nil {
		return x.LeftMembers
	}
	return nil
}

func (x *CSODACParty) GetJoinCode() uint64 {
	if x != nil && x.JoinCode != nil {
		return *x.JoinCode
	}
	return 0
}

func (x *CSODACParty) GetBotDifficulty() EDACBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CSODACParty_BotDifficulty
}

func (x *CSODACParty) GetUseCustomModifier() bool {
	if x != nil && x.UseCustomModifier != nil {
		return *x.UseCustomModifier
	}
	return false
}

func (x *CSODACParty) GetCustomModifier() *CMsgGameModifiers {
	if x != nil {
		return x.CustomModifier
	}
	return nil
}

func (x *CSODACParty) GetTeams() []*CSODACParty_TeamInfo {
	if x != nil {
		return x.Teams
	}
	return nil
}

type CSOAccountSyncStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Id        *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Value     *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *CSOAccountSyncStorage) Reset() {
	*x = CSOAccountSyncStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOAccountSyncStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOAccountSyncStorage) ProtoMessage() {}

func (x *CSOAccountSyncStorage) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOAccountSyncStorage.ProtoReflect.Descriptor instead.
func (*CSOAccountSyncStorage) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{6}
}

func (x *CSOAccountSyncStorage) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOAccountSyncStorage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CSOAccountSyncStorage) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CSOGameAccountClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                    *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MmrLevel                     *uint32  `protobuf:"varint,2,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	MmrLeaderboard               *uint32  `protobuf:"varint,3,opt,name=mmr_leaderboard,json=mmrLeaderboard" json:"mmr_leaderboard,omitempty"`
	Flags                        *uint64  `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	UnlockRankedProgress         *uint32  `protobuf:"varint,5,opt,name=unlock_ranked_progress,json=unlockRankedProgress" json:"unlock_ranked_progress,omitempty"`
	MmrLevelPartialProgress      *float32 `protobuf:"fixed32,6,opt,name=mmr_level_partial_progress,json=mmrLevelPartialProgress" json:"mmr_level_partial_progress,omitempty"`
	MmrLevelScore                *uint32  `protobuf:"varint,8,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
	MmBanTimeStamp               *uint32  `protobuf:"varint,9,opt,name=mm_ban_time_stamp,json=mmBanTimeStamp" json:"mm_ban_time_stamp,omitempty"`
	MmBanReason                  *uint32  `protobuf:"varint,10,opt,name=mm_ban_reason,json=mmBanReason" json:"mm_ban_reason,omitempty"`
	MmRankedBanTimeStamp         *uint32  `protobuf:"varint,11,opt,name=mm_ranked_ban_time_stamp,json=mmRankedBanTimeStamp" json:"mm_ranked_ban_time_stamp,omitempty"`
	MmRankedBanReason            *uint32  `protobuf:"varint,12,opt,name=mm_ranked_ban_reason,json=mmRankedBanReason" json:"mm_ranked_ban_reason,omitempty"`
	Credits                      *uint32  `protobuf:"varint,13,opt,name=credits" json:"credits,omitempty"`
	TurboMmrLevel                *uint32  `protobuf:"varint,14,opt,name=turbo_mmr_level,json=turboMmrLevel" json:"turbo_mmr_level,omitempty"`
	TurboMmrLeaderboard          *uint32  `protobuf:"varint,15,opt,name=turbo_mmr_leaderboard,json=turboMmrLeaderboard" json:"turbo_mmr_leaderboard,omitempty"`
	TurboMmrLevelPartialProgress *float32 `protobuf:"fixed32,16,opt,name=turbo_mmr_level_partial_progress,json=turboMmrLevelPartialProgress" json:"turbo_mmr_level_partial_progress,omitempty"`
	TurboMmrLevelScore           *uint32  `protobuf:"varint,17,opt,name=turbo_mmr_level_score,json=turboMmrLevelScore" json:"turbo_mmr_level_score,omitempty"`
	Wins_1St                     *uint32  `protobuf:"varint,18,opt,name=wins_1st,json=wins1st" json:"wins_1st,omitempty"`
	Wins_2Nd                     *uint32  `protobuf:"varint,19,opt,name=wins_2nd,json=wins2nd" json:"wins_2nd,omitempty"`
	Wins_3Rd                     *uint32  `protobuf:"varint,20,opt,name=wins_3rd,json=wins3rd" json:"wins_3rd,omitempty"`
}

func (x *CSOGameAccountClient) Reset() {
	*x = CSOGameAccountClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSOGameAccountClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSOGameAccountClient) ProtoMessage() {}

func (x *CSOGameAccountClient) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSOGameAccountClient.ProtoReflect.Descriptor instead.
func (*CSOGameAccountClient) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{7}
}

func (x *CSOGameAccountClient) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmrLeaderboard() uint32 {
	if x != nil && x.MmrLeaderboard != nil {
		return *x.MmrLeaderboard
	}
	return 0
}

func (x *CSOGameAccountClient) GetFlags() uint64 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSOGameAccountClient) GetUnlockRankedProgress() uint32 {
	if x != nil && x.UnlockRankedProgress != nil {
		return *x.UnlockRankedProgress
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmrLevelPartialProgress() float32 {
	if x != nil && x.MmrLevelPartialProgress != nil {
		return *x.MmrLevelPartialProgress
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmBanTimeStamp() uint32 {
	if x != nil && x.MmBanTimeStamp != nil {
		return *x.MmBanTimeStamp
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmBanReason() uint32 {
	if x != nil && x.MmBanReason != nil {
		return *x.MmBanReason
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmRankedBanTimeStamp() uint32 {
	if x != nil && x.MmRankedBanTimeStamp != nil {
		return *x.MmRankedBanTimeStamp
	}
	return 0
}

func (x *CSOGameAccountClient) GetMmRankedBanReason() uint32 {
	if x != nil && x.MmRankedBanReason != nil {
		return *x.MmRankedBanReason
	}
	return 0
}

func (x *CSOGameAccountClient) GetCredits() uint32 {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return 0
}

func (x *CSOGameAccountClient) GetTurboMmrLevel() uint32 {
	if x != nil && x.TurboMmrLevel != nil {
		return *x.TurboMmrLevel
	}
	return 0
}

func (x *CSOGameAccountClient) GetTurboMmrLeaderboard() uint32 {
	if x != nil && x.TurboMmrLeaderboard != nil {
		return *x.TurboMmrLeaderboard
	}
	return 0
}

func (x *CSOGameAccountClient) GetTurboMmrLevelPartialProgress() float32 {
	if x != nil && x.TurboMmrLevelPartialProgress != nil {
		return *x.TurboMmrLevelPartialProgress
	}
	return 0
}

func (x *CSOGameAccountClient) GetTurboMmrLevelScore() uint32 {
	if x != nil && x.TurboMmrLevelScore != nil {
		return *x.TurboMmrLevelScore
	}
	return 0
}

func (x *CSOGameAccountClient) GetWins_1St() uint32 {
	if x != nil && x.Wins_1St != nil {
		return *x.Wins_1St
	}
	return 0
}

func (x *CSOGameAccountClient) GetWins_2Nd() uint32 {
	if x != nil && x.Wins_2Nd != nil {
		return *x.Wins_2Nd
	}
	return 0
}

func (x *CSOGameAccountClient) GetWins_3Rd() uint32 {
	if x != nil && x.Wins_3Rd != nil {
		return *x.Wins_3Rd
	}
	return 0
}

type CMsgStreetfightSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlordId      *uint32  `protobuf:"varint,1,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	StreetfightId    *uint32  `protobuf:"varint,2,opt,name=streetfight_id,json=streetfightId" json:"streetfight_id,omitempty"`
	ItemIdsForPlayer []uint32 `protobuf:"varint,3,rep,name=item_ids_for_player,json=itemIdsForPlayer" json:"item_ids_for_player,omitempty"`
	PrestigeLevel    *uint32  `protobuf:"varint,4,opt,name=prestige_level,json=prestigeLevel" json:"prestige_level,omitempty"`
}

func (x *CMsgStreetfightSettings) Reset() {
	*x = CMsgStreetfightSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStreetfightSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStreetfightSettings) ProtoMessage() {}

func (x *CMsgStreetfightSettings) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStreetfightSettings.ProtoReflect.Descriptor instead.
func (*CMsgStreetfightSettings) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgStreetfightSettings) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgStreetfightSettings) GetStreetfightId() uint32 {
	if x != nil && x.StreetfightId != nil {
		return *x.StreetfightId
	}
	return 0
}

func (x *CMsgStreetfightSettings) GetItemIdsForPlayer() []uint32 {
	if x != nil {
		return x.ItemIdsForPlayer
	}
	return nil
}

func (x *CMsgStreetfightSettings) GetPrestigeLevel() uint32 {
	if x != nil && x.PrestigeLevel != nil {
		return *x.PrestigeLevel
	}
	return 0
}

type CMsgGameModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Settings:
	//	*CMsgGameModeSettings_PuzzleId
	//	*CMsgGameModeSettings_TutorialPhase
	//	*CMsgGameModeSettings_SandboxShareCode
	//	*CMsgGameModeSettings_StreetfightSettings
	Settings isCMsgGameModeSettings_Settings `protobuf_oneof:"settings"`
}

func (x *CMsgGameModeSettings) Reset() {
	*x = CMsgGameModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeSettings) ProtoMessage() {}

func (x *CMsgGameModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeSettings.ProtoReflect.Descriptor instead.
func (*CMsgGameModeSettings) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{9}
}

func (m *CMsgGameModeSettings) GetSettings() isCMsgGameModeSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *CMsgGameModeSettings) GetPuzzleId() uint32 {
	if x, ok := x.GetSettings().(*CMsgGameModeSettings_PuzzleId); ok {
		return x.PuzzleId
	}
	return 0
}

func (x *CMsgGameModeSettings) GetTutorialPhase() uint32 {
	if x, ok := x.GetSettings().(*CMsgGameModeSettings_TutorialPhase); ok {
		return x.TutorialPhase
	}
	return 0
}

func (x *CMsgGameModeSettings) GetSandboxShareCode() string {
	if x, ok := x.GetSettings().(*CMsgGameModeSettings_SandboxShareCode); ok {
		return x.SandboxShareCode
	}
	return ""
}

func (x *CMsgGameModeSettings) GetStreetfightSettings() *CMsgStreetfightSettings {
	if x, ok := x.GetSettings().(*CMsgGameModeSettings_StreetfightSettings); ok {
		return x.StreetfightSettings
	}
	return nil
}

type isCMsgGameModeSettings_Settings interface {
	isCMsgGameModeSettings_Settings()
}

type CMsgGameModeSettings_PuzzleId struct {
	PuzzleId uint32 `protobuf:"varint,1,opt,name=puzzle_id,json=puzzleId,oneof"`
}

type CMsgGameModeSettings_TutorialPhase struct {
	TutorialPhase uint32 `protobuf:"varint,2,opt,name=tutorial_phase,json=tutorialPhase,oneof"`
}

type CMsgGameModeSettings_SandboxShareCode struct {
	SandboxShareCode string `protobuf:"bytes,3,opt,name=sandbox_share_code,json=sandboxShareCode,oneof"`
}

type CMsgGameModeSettings_StreetfightSettings struct {
	StreetfightSettings *CMsgStreetfightSettings `protobuf:"bytes,4,opt,name=streetfight_settings,json=streetfightSettings,oneof"`
}

func (*CMsgGameModeSettings_PuzzleId) isCMsgGameModeSettings_Settings() {}

func (*CMsgGameModeSettings_TutorialPhase) isCMsgGameModeSettings_Settings() {}

func (*CMsgGameModeSettings_SandboxShareCode) isCMsgGameModeSettings_Settings() {}

func (*CMsgGameModeSettings_StreetfightSettings) isCMsgGameModeSettings_Settings() {}

type CMsgStartFindingMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion    *uint32               `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	MatchMode        *EDACMatchMode        `protobuf:"varint,3,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	Platform         *EDACPlatform         `protobuf:"varint,4,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	BotDifficulty    *EDACBotDifficulty    `protobuf:"varint,5,opt,name=bot_difficulty,json=botDifficulty,enum=underlords.EDACBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	GameMode         *EDACGameMode         `protobuf:"varint,6,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	RegionMode       *EDACRegionMode       `protobuf:"varint,8,opt,name=region_mode,json=regionMode,enum=underlords.EDACRegionMode,def=0" json:"region_mode,omitempty"`
	GameModeSettings *CMsgGameModeSettings `protobuf:"bytes,9,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
}

// Default values for CMsgStartFindingMatchInfo fields.
const (
	Default_CMsgStartFindingMatchInfo_MatchMode     = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgStartFindingMatchInfo_Platform      = EDACPlatform_k_eDACPlatform_None
	Default_CMsgStartFindingMatchInfo_BotDifficulty = EDACBotDifficulty_k_EDACBotDifficulty_None
	Default_CMsgStartFindingMatchInfo_GameMode      = EDACGameMode_k_EDACGameMode_Invalid
	Default_CMsgStartFindingMatchInfo_RegionMode    = EDACRegionMode_k_EDACRegionMode_ROW
)

func (x *CMsgStartFindingMatchInfo) Reset() {
	*x = CMsgStartFindingMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStartFindingMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStartFindingMatchInfo) ProtoMessage() {}

func (x *CMsgStartFindingMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStartFindingMatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgStartFindingMatchInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgStartFindingMatchInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgStartFindingMatchInfo) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgStartFindingMatchInfo_MatchMode
}

func (x *CMsgStartFindingMatchInfo) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgStartFindingMatchInfo_Platform
}

func (x *CMsgStartFindingMatchInfo) GetBotDifficulty() EDACBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CMsgStartFindingMatchInfo_BotDifficulty
}

func (x *CMsgStartFindingMatchInfo) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgStartFindingMatchInfo_GameMode
}

func (x *CMsgStartFindingMatchInfo) GetRegionMode() EDACRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CMsgStartFindingMatchInfo_RegionMode
}

func (x *CMsgStartFindingMatchInfo) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

type CMsgAnyToGCReportAsserts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32                                   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Asserts []*CMsgAnyToGCReportAsserts_TrackedAssert `protobuf:"bytes,2,rep,name=asserts" json:"asserts,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts) Reset() {
	*x = CMsgAnyToGCReportAsserts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgAnyToGCReportAsserts) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts) GetAsserts() []*CMsgAnyToGCReportAsserts_TrackedAssert {
	if x != nil {
		return x.Asserts
	}
	return nil
}

type CMsgAnyToGCReportAssertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgAnyToGCReportAssertsResponse) Reset() {
	*x = CMsgAnyToGCReportAssertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAssertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAssertsResponse) ProtoMessage() {}

func (x *CMsgAnyToGCReportAssertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAssertsResponse.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAssertsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgAnyToGCReportAssertsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistogramBuckets []*CMsgHistogram_HistogramBucket `protobuf:"bytes,1,rep,name=histogram_buckets,json=histogramBuckets" json:"histogram_buckets,omitempty"`
}

func (x *CMsgHistogram) Reset() {
	*x = CMsgHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHistogram) ProtoMessage() {}

func (x *CMsgHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHistogram.ProtoReflect.Descriptor instead.
func (*CMsgHistogram) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgHistogram) GetHistogramBuckets() []*CMsgHistogram_HistogramBucket {
	if x != nil {
		return x.HistogramBuckets
	}
	return nil
}

type CMsgPuzzleLeaderboardHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId        *uint32        `protobuf:"varint,1,opt,name=puzzle_id,json=puzzleId" json:"puzzle_id,omitempty"`
	LeaderboardType *uint32        `protobuf:"varint,2,opt,name=leaderboard_type,json=leaderboardType" json:"leaderboard_type,omitempty"`
	Histogram       *CMsgHistogram `protobuf:"bytes,3,opt,name=histogram" json:"histogram,omitempty"`
}

func (x *CMsgPuzzleLeaderboardHistogram) Reset() {
	*x = CMsgPuzzleLeaderboardHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPuzzleLeaderboardHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPuzzleLeaderboardHistogram) ProtoMessage() {}

func (x *CMsgPuzzleLeaderboardHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPuzzleLeaderboardHistogram.ProtoReflect.Descriptor instead.
func (*CMsgPuzzleLeaderboardHistogram) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgPuzzleLeaderboardHistogram) GetPuzzleId() uint32 {
	if x != nil && x.PuzzleId != nil {
		return *x.PuzzleId
	}
	return 0
}

func (x *CMsgPuzzleLeaderboardHistogram) GetLeaderboardType() uint32 {
	if x != nil && x.LeaderboardType != nil {
		return *x.LeaderboardType
	}
	return 0
}

func (x *CMsgPuzzleLeaderboardHistogram) GetHistogram() *CMsgHistogram {
	if x != nil {
		return x.Histogram
	}
	return nil
}

type CMsgPuzzleLeaderboardHistogramList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardHistograms []*CMsgPuzzleLeaderboardHistogram `protobuf:"bytes,1,rep,name=leaderboard_histograms,json=leaderboardHistograms" json:"leaderboard_histograms,omitempty"`
}

func (x *CMsgPuzzleLeaderboardHistogramList) Reset() {
	*x = CMsgPuzzleLeaderboardHistogramList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPuzzleLeaderboardHistogramList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPuzzleLeaderboardHistogramList) ProtoMessage() {}

func (x *CMsgPuzzleLeaderboardHistogramList) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPuzzleLeaderboardHistogramList.ProtoReflect.Descriptor instead.
func (*CMsgPuzzleLeaderboardHistogramList) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgPuzzleLeaderboardHistogramList) GetLeaderboardHistograms() []*CMsgPuzzleLeaderboardHistogram {
	if x != nil {
		return x.LeaderboardHistograms
	}
	return nil
}

type CServerLobbyData_PlayerInfo_LoadoutSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadoutSlot    *uint32 `protobuf:"varint,1,opt,name=loadout_slot,json=loadoutSlot" json:"loadout_slot,omitempty"`
	DefIndex       *uint32 `protobuf:"varint,2,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	LoadoutSubSlot *uint32 `protobuf:"varint,3,opt,name=loadout_sub_slot,json=loadoutSubSlot" json:"loadout_sub_slot,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) Reset() {
	*x = CServerLobbyData_PlayerInfo_LoadoutSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo_LoadoutSlot) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo_LoadoutSlot.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo_LoadoutSlot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) GetLoadoutSlot() uint32 {
	if x != nil && x.LoadoutSlot != nil {
		return *x.LoadoutSlot
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_LoadoutSlot) GetLoadoutSubSlot() uint32 {
	if x != nil && x.LoadoutSubSlot != nil {
		return *x.LoadoutSubSlot
	}
	return 0
}

type CServerLobbyData_PlayerInfo_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId *uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Amount     *uint32 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo_Currency) Reset() {
	*x = CServerLobbyData_PlayerInfo_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo_Currency) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo_Currency.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo_Currency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CServerLobbyData_PlayerInfo_Currency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Currency) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type CServerLobbyData_PlayerInfo_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId *uint32 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	Progress    *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	SequenceId  *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	SlotId      *uint32 `protobuf:"varint,4,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	ConfigId    *uint32 `protobuf:"varint,5,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Claimed     *uint32 `protobuf:"varint,6,opt,name=claimed" json:"claimed,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo_Challenge) Reset() {
	*x = CServerLobbyData_PlayerInfo_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo_Challenge) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo_Challenge.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetConfigId() uint32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Challenge) GetClaimed() uint32 {
	if x != nil && x.Claimed != nil {
		return *x.Claimed
	}
	return 0
}

type CServerLobbyData_PlayerInfo_VirtualItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex     *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	EquipSlot    *uint32 `protobuf:"varint,2,opt,name=equip_slot,json=equipSlot" json:"equip_slot,omitempty"`
	EquipSubSlot *uint32 `protobuf:"varint,3,opt,name=equip_sub_slot,json=equipSubSlot" json:"equip_sub_slot,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) Reset() {
	*x = CServerLobbyData_PlayerInfo_VirtualItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo_VirtualItem) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo_VirtualItem.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo_VirtualItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) GetEquipSlot() uint32 {
	if x != nil && x.EquipSlot != nil {
		return *x.EquipSlot
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_VirtualItem) GetEquipSubSlot() uint32 {
	if x != nil && x.EquipSubSlot != nil {
		return *x.EquipSubSlot
	}
	return 0
}

type CServerLobbyData_PlayerInfo_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      *uint32                                    `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventOwned   *bool                                      `protobuf:"varint,2,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
	Challenges   []*CServerLobbyData_PlayerInfo_Challenge   `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
	Currencies   []*CServerLobbyData_PlayerInfo_Currency    `protobuf:"bytes,4,rep,name=currencies" json:"currencies,omitempty"`
	VirtualItems []*CServerLobbyData_PlayerInfo_VirtualItem `protobuf:"bytes,5,rep,name=virtual_items,json=virtualItems" json:"virtual_items,omitempty"`
}

func (x *CServerLobbyData_PlayerInfo_Event) Reset() {
	*x = CServerLobbyData_PlayerInfo_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerInfo_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerInfo_Event) ProtoMessage() {}

func (x *CServerLobbyData_PlayerInfo_Event) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerInfo_Event.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerInfo_Event) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CServerLobbyData_PlayerInfo_Event) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CServerLobbyData_PlayerInfo_Event) GetEventOwned() bool {
	if x != nil && x.EventOwned != nil {
		return *x.EventOwned
	}
	return false
}

func (x *CServerLobbyData_PlayerInfo_Event) GetChallenges() []*CServerLobbyData_PlayerInfo_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *CServerLobbyData_PlayerInfo_Event) GetCurrencies() []*CServerLobbyData_PlayerInfo_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *CServerLobbyData_PlayerInfo_Event) GetVirtualItems() []*CServerLobbyData_PlayerInfo_VirtualItem {
	if x != nil {
		return x.VirtualItems
	}
	return nil
}

type CSODACParty_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName          *string                  `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	RightsFlags          *uint32                  `protobuf:"varint,3,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
	IsReady              *bool                    `protobuf:"varint,4,opt,name=is_ready,json=isReady" json:"is_ready,omitempty"`
	PlayerType           *CSODACParty_EPlayerType `protobuf:"varint,5,opt,name=player_type,json=playerType,enum=underlords.CSODACParty_EPlayerType,def=0" json:"player_type,omitempty"`
	CompatibilityVersion *uint32                  `protobuf:"varint,6,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
	Platform             *EDACPlatform            `protobuf:"varint,7,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	Team                 *uint32                  `protobuf:"varint,8,opt,name=team" json:"team,omitempty"`
}

// Default values for CSODACParty_Member fields.
const (
	Default_CSODACParty_Member_PlayerType = CSODACParty_k_ePlayerType_Player
	Default_CSODACParty_Member_Platform   = EDACPlatform_k_eDACPlatform_None
)

func (x *CSODACParty_Member) Reset() {
	*x = CSODACParty_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACParty_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACParty_Member) ProtoMessage() {}

func (x *CSODACParty_Member) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACParty_Member.ProtoReflect.Descriptor instead.
func (*CSODACParty_Member) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CSODACParty_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODACParty_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODACParty_Member) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

func (x *CSODACParty_Member) GetIsReady() bool {
	if x != nil && x.IsReady != nil {
		return *x.IsReady
	}
	return false
}

func (x *CSODACParty_Member) GetPlayerType() CSODACParty_EPlayerType {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return Default_CSODACParty_Member_PlayerType
}

func (x *CSODACParty_Member) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

func (x *CSODACParty_Member) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CSODACParty_Member_Platform
}

func (x *CSODACParty_Member) GetTeam() uint32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CSODACParty_LeftMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RightsFlags *uint32                  `protobuf:"varint,2,opt,name=rights_flags,json=rightsFlags" json:"rights_flags,omitempty"`
	PlayerType  *CSODACParty_EPlayerType `protobuf:"varint,3,opt,name=player_type,json=playerType,enum=underlords.CSODACParty_EPlayerType,def=0" json:"player_type,omitempty"`
}

// Default values for CSODACParty_LeftMember fields.
const (
	Default_CSODACParty_LeftMember_PlayerType = CSODACParty_k_ePlayerType_Player
)

func (x *CSODACParty_LeftMember) Reset() {
	*x = CSODACParty_LeftMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACParty_LeftMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACParty_LeftMember) ProtoMessage() {}

func (x *CSODACParty_LeftMember) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACParty_LeftMember.ProtoReflect.Descriptor instead.
func (*CSODACParty_LeftMember) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CSODACParty_LeftMember) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODACParty_LeftMember) GetRightsFlags() uint32 {
	if x != nil && x.RightsFlags != nil {
		return *x.RightsFlags
	}
	return 0
}

func (x *CSODACParty_LeftMember) GetPlayerType() CSODACParty_EPlayerType {
	if x != nil && x.PlayerType != nil {
		return *x.PlayerType
	}
	return Default_CSODACParty_LeftMember_PlayerType
}

type CSODACParty_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	InvitedBy   *uint32 `protobuf:"varint,3,opt,name=invited_by,json=invitedBy" json:"invited_by,omitempty"`
}

func (x *CSODACParty_Invite) Reset() {
	*x = CSODACParty_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACParty_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACParty_Invite) ProtoMessage() {}

func (x *CSODACParty_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACParty_Invite.ProtoReflect.Descriptor instead.
func (*CSODACParty_Invite) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 2}
}

func (x *CSODACParty_Invite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODACParty_Invite) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODACParty_Invite) GetInvitedBy() uint32 {
	if x != nil && x.InvitedBy != nil {
		return *x.InvitedBy
	}
	return 0
}

type CSODACParty_TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIds          []uint32 `protobuf:"varint,1,rep,packed,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	TeamName            *string  `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	FirstPlayed         *uint32  `protobuf:"varint,3,opt,name=first_played,json=firstPlayed" json:"first_played,omitempty"`
	GamesPlayed         *uint32  `protobuf:"varint,4,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	NumFirstPlace       *uint32  `protobuf:"varint,6,opt,name=num_first_place,json=numFirstPlace" json:"num_first_place,omitempty"`
	NumTopThree         *uint32  `protobuf:"varint,7,opt,name=num_top_three,json=numTopThree" json:"num_top_three,omitempty"`
	MmrLevel            *uint32  `protobuf:"varint,8,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	MmrLevelProgress    *uint32  `protobuf:"varint,9,opt,name=mmr_level_progress,json=mmrLevelProgress" json:"mmr_level_progress,omitempty"`
	MmrLevelScore       *uint32  `protobuf:"varint,10,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
	Flags               *uint32  `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	LeaderboardPlace    *uint32  `protobuf:"varint,12,opt,name=leaderboard_place,json=leaderboardPlace" json:"leaderboard_place,omitempty"`
	GamesToUnlockRename *uint32  `protobuf:"varint,13,opt,name=games_to_unlock_rename,json=gamesToUnlockRename" json:"games_to_unlock_rename,omitempty"`
}

func (x *CSODACParty_TeamInfo) Reset() {
	*x = CSODACParty_TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACParty_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACParty_TeamInfo) ProtoMessage() {}

func (x *CSODACParty_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACParty_TeamInfo.ProtoReflect.Descriptor instead.
func (*CSODACParty_TeamInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{5, 3}
}

func (x *CSODACParty_TeamInfo) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *CSODACParty_TeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CSODACParty_TeamInfo) GetFirstPlayed() uint32 {
	if x != nil && x.FirstPlayed != nil {
		return *x.FirstPlayed
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetGamesPlayed() uint32 {
	if x != nil && x.GamesPlayed != nil {
		return *x.GamesPlayed
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetNumFirstPlace() uint32 {
	if x != nil && x.NumFirstPlace != nil {
		return *x.NumFirstPlace
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetNumTopThree() uint32 {
	if x != nil && x.NumTopThree != nil {
		return *x.NumTopThree
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetMmrLevelProgress() uint32 {
	if x != nil && x.MmrLevelProgress != nil {
		return *x.MmrLevelProgress
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetLeaderboardPlace() uint32 {
	if x != nil && x.LeaderboardPlace != nil {
		return *x.LeaderboardPlace
	}
	return 0
}

func (x *CSODACParty_TeamInfo) GetGamesToUnlockRename() uint32 {
	if x != nil && x.GamesToUnlockRename != nil {
		return *x.GamesToUnlockRename
	}
	return 0
}

type CMsgAnyToGCReportAsserts_TrackedAssert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	LineNumber   *uint32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
	SampleMsg    *string `protobuf:"bytes,3,opt,name=sample_msg,json=sampleMsg" json:"sample_msg,omitempty"`
	SampleStack  *string `protobuf:"bytes,4,opt,name=sample_stack,json=sampleStack" json:"sample_stack,omitempty"`
	TimesFired   *uint32 `protobuf:"varint,5,opt,name=times_fired,json=timesFired" json:"times_fired,omitempty"`
	FunctionName *string `protobuf:"bytes,6,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Condition    *string `protobuf:"bytes,7,opt,name=condition" json:"condition,omitempty"`
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) Reset() {
	*x = CMsgAnyToGCReportAsserts_TrackedAssert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAnyToGCReportAsserts_TrackedAssert) ProtoMessage() {}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAnyToGCReportAsserts_TrackedAssert.ProtoReflect.Descriptor instead.
func (*CMsgAnyToGCReportAsserts_TrackedAssert) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleMsg() string {
	if x != nil && x.SampleMsg != nil {
		return *x.SampleMsg
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetSampleStack() string {
	if x != nil && x.SampleStack != nil {
		return *x.SampleStack
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetTimesFired() uint32 {
	if x != nil && x.TimesFired != nil {
		return *x.TimesFired
	}
	return 0
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *CMsgAnyToGCReportAsserts_TrackedAssert) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

type CMsgHistogram_HistogramBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgHistogram_HistogramBucket) Reset() {
	*x = CMsgHistogram_HistogramBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHistogram_HistogramBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHistogram_HistogramBucket) ProtoMessage() {}

func (x *CMsgHistogram_HistogramBucket) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHistogram_HistogramBucket.ProtoReflect.Descriptor instead.
func (*CMsgHistogram_HistogramBucket) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_common_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgHistogram_HistogramBucket) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgHistogram_HistogramBucket) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

var File_underlords_dac_gcmessages_common_proto protoreflect.FileDescriptor

var file_underlords_dac_gcmessages_common_proto_rawDesc = []byte{
	0x0a, 0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x1a, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0c,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x12,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x10, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x22, 0xd9, 0x08, 0x0a, 0x1b, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x4d, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x45, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x77,
	0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x53, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0x43, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xbb, 0x01, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x1a, 0x6f, 0x0a, 0x0b, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x1a, 0xc2, 0x02, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x6e, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xd0, 0x04, 0x0a, 0x0b, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x76, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64,
	0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xd9, 0x0f, 0x0a, 0x0b, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f,
	0x44, 0x41, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x65, 0x66,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x42,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x18, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0xf8, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b,
	0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x1a, 0xaa, 0x01, 0x0a, 0x0a, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x69, 0x0a,
	0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0xc9, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x54, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x45, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x4d, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x5f, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x48, 0x69, 0x67, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4d, 0x4d, 0x10, 0x08, 0x22, 0x44,
	0x0a, 0x0b, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x01, 0x22, 0x49, 0x0a, 0x0a, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x22,
	0x5c, 0x0a, 0x15, 0x43, 0x53, 0x4f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x06,
	0x0a, 0x14, 0x43, 0x53, 0x4f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6d, 0x72, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6d,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x6d, 0x42, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6d, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x6d, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6d,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x75, 0x72, 0x62, 0x6f, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x75, 0x72,
	0x62, 0x6f, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x46, 0x0a, 0x20, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x74, 0x75, 0x72, 0x62,
	0x6f, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x75, 0x72, 0x62,
	0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x4d, 0x6d,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x69, 0x6e, 0x73, 0x5f, 0x31, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77,
	0x69, 0x6e, 0x73, 0x31, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x32,
	0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x73, 0x32, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x33, 0x72, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x73, 0x33, 0x72, 0x64, 0x22, 0xb9, 0x01, 0x0a,
	0x17, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xb2, 0x04, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x5e, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f, 0x57, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e,
	0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x46, 0x69, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c,
	0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x0d, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x56,
	0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x61, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x15, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x2a, 0xed, 0x02, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x44, 0x41, 0x43, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x1a,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x10, 0xd8, 0x36, 0x12, 0x27, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x41, 0x6e, 0x79, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xd9, 0x36, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0xf3, 0x38, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf4, 0x38, 0x12,
	0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x10, 0xf5, 0x38, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xf6, 0x38, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf7, 0x38,
	0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xf8, 0x38, 0x2a, 0x95, 0x01, 0x0a, 0x0b, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x5f,
	0x69, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x0e, 0x45,
	0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x68, 0x69, 0x6e,
	0x61, 0x10, 0x01, 0x2a, 0xa3, 0x01, 0x0a, 0x0d, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x6f, 0x6c, 0x6f, 0x42, 0x6f, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x8f, 0x02, 0x0a, 0x0c, 0x45, 0x44,
	0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x75,
	0x6f, 0x73, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x41, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x10, 0x08, 0x2a, 0x87, 0x02, 0x0a, 0x0d,
	0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x31, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61,
	0x6d, 0x34, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x35, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x36, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65,
	0x61, 0x6d, 0x37, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0xfa, 0x01, 0x2a, 0xee, 0x01, 0x0a, 0x11, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x45, 0x61, 0x73, 0x79, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x48,
	0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x42,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x4d, 0x4c, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4d, 0x6f, 0x6d, 0x6d,
	0x61, 0x45, 0x65, 0x62, 0x10, 0x06, 0x2a, 0xa5, 0x08, 0x0a, 0x0a, 0x45, 0x44, 0x41, 0x43, 0x41,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x76, 0x6c, 0x31, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x76, 0x6c, 0x32, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x76,
	0x6c, 0x33, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x76, 0x6c, 0x34, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x76, 0x6c, 0x35,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x76, 0x6c, 0x36, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x76, 0x6c, 0x37, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4c, 0x76, 0x6c, 0x38, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x4c, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x30,
	0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x10, 0x16, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x42, 0x33, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x34, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x35, 0x10, 0x19,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x42, 0x36, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x37, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x38,
	0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x42, 0x39, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x30, 0x10, 0x1e, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x42, 0x31, 0x31, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x32, 0x10, 0x20, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42,
	0x31, 0x33, 0x10, 0x21, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x34, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x35,
	0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x36, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x37, 0x10, 0x25,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x42, 0x31, 0x38, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x31, 0x39, 0x10, 0x27, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x42, 0x32, 0x30, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41,
	0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x31, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32,
	0x32, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x33, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x34, 0x10,
	0x2c, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x42, 0x32, 0x35, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x36, 0x10, 0x2e, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x42, 0x32, 0x37, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x32, 0x38, 0x10, 0x30, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42,
	0x32, 0x39, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x33, 0x30, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x33, 0x31,
	0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x42, 0x33, 0x32, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x33, 0x33, 0x10, 0x35,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x42, 0x33, 0x34, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x41, 0x49, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x42, 0x33, 0x35, 0x10, 0x37, 0x2a, 0x99,
	0x01, 0x0a, 0x0e, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x03, 0x2a, 0xad, 0x01, 0x0a, 0x0f, 0x45,
	0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x10, 0x04, 0x2a, 0xbc, 0x01, 0x0a, 0x11, 0x45,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x62,
	0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x04, 0x42, 0x3b, 0x48, 0x01, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x80, 0x01, 0x00,
}

var (
	file_underlords_dac_gcmessages_common_proto_rawDescOnce sync.Once
	file_underlords_dac_gcmessages_common_proto_rawDescData = file_underlords_dac_gcmessages_common_proto_rawDesc
)

func file_underlords_dac_gcmessages_common_proto_rawDescGZIP() []byte {
	file_underlords_dac_gcmessages_common_proto_rawDescOnce.Do(func() {
		file_underlords_dac_gcmessages_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_underlords_dac_gcmessages_common_proto_rawDescData)
	})
	return file_underlords_dac_gcmessages_common_proto_rawDescData
}

var file_underlords_dac_gcmessages_common_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_underlords_dac_gcmessages_common_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_underlords_dac_gcmessages_common_proto_goTypes = []interface{}{
	(EGCDACCommonMessages)(0),                       // 0: underlords.EGCDACCommonMessages
	(EDACStoreID)(0),                                // 1: underlords.EDACStoreID
	(EDACRegionMode)(0),                             // 2: underlords.EDACRegionMode
	(EDACMatchMode)(0),                              // 3: underlords.EDACMatchMode
	(EDACGameMode)(0),                               // 4: underlords.EDACGameMode
	(EDACLobbyTeam)(0),                              // 5: underlords.EDACLobbyTeam
	(EDACBotDifficulty)(0),                          // 6: underlords.EDACBotDifficulty
	(EDACAIType)(0),                                 // 7: underlords.EDACAIType
	(EDACMatchState)(0),                             // 8: underlords.EDACMatchState
	(EDACPlayerState)(0),                            // 9: underlords.EDACPlayerState
	(ELobbyServerState)(0),                          // 10: underlords.ELobbyServerState
	(CSODACParty_EMemberRights)(0),                  // 11: underlords.CSODACParty.EMemberRights
	(CSODACParty_EPlayerType)(0),                    // 12: underlords.CSODACParty.EPlayerType
	(CSODACParty_ETeamFlags)(0),                     // 13: underlords.CSODACParty.ETeamFlags
	(*CMsgGameModifiers)(nil),                       // 14: underlords.CMsgGameModifiers
	(*CMsgTeamInfo)(nil),                            // 15: underlords.CMsgTeamInfo
	(*CServerLobbyData_PlayerInfo)(nil),             // 16: underlords.CServerLobbyData_PlayerInfo
	(*CMsgRegionPingTimesClient)(nil),               // 17: underlords.CMsgRegionPingTimesClient
	(*CSODACLobby)(nil),                             // 18: underlords.CSODACLobby
	(*CSODACParty)(nil),                             // 19: underlords.CSODACParty
	(*CSOAccountSyncStorage)(nil),                   // 20: underlords.CSOAccountSyncStorage
	(*CSOGameAccountClient)(nil),                    // 21: underlords.CSOGameAccountClient
	(*CMsgStreetfightSettings)(nil),                 // 22: underlords.CMsgStreetfightSettings
	(*CMsgGameModeSettings)(nil),                    // 23: underlords.CMsgGameModeSettings
	(*CMsgStartFindingMatchInfo)(nil),               // 24: underlords.CMsgStartFindingMatchInfo
	(*CMsgAnyToGCReportAsserts)(nil),                // 25: underlords.CMsgAnyToGCReportAsserts
	(*CMsgAnyToGCReportAssertsResponse)(nil),        // 26: underlords.CMsgAnyToGCReportAssertsResponse
	(*CMsgHistogram)(nil),                           // 27: underlords.CMsgHistogram
	(*CMsgPuzzleLeaderboardHistogram)(nil),          // 28: underlords.CMsgPuzzleLeaderboardHistogram
	(*CMsgPuzzleLeaderboardHistogramList)(nil),      // 29: underlords.CMsgPuzzleLeaderboardHistogramList
	(*CServerLobbyData_PlayerInfo_LoadoutSlot)(nil), // 30: underlords.CServerLobbyData_PlayerInfo.LoadoutSlot
	(*CServerLobbyData_PlayerInfo_Currency)(nil),    // 31: underlords.CServerLobbyData_PlayerInfo.Currency
	(*CServerLobbyData_PlayerInfo_Challenge)(nil),   // 32: underlords.CServerLobbyData_PlayerInfo.Challenge
	(*CServerLobbyData_PlayerInfo_VirtualItem)(nil), // 33: underlords.CServerLobbyData_PlayerInfo.VirtualItem
	(*CServerLobbyData_PlayerInfo_Event)(nil),       // 34: underlords.CServerLobbyData_PlayerInfo.Event
	(*CSODACParty_Member)(nil),                      // 35: underlords.CSODACParty.Member
	(*CSODACParty_LeftMember)(nil),                  // 36: underlords.CSODACParty.LeftMember
	(*CSODACParty_Invite)(nil),                      // 37: underlords.CSODACParty.Invite
	(*CSODACParty_TeamInfo)(nil),                    // 38: underlords.CSODACParty.TeamInfo
	(*CMsgAnyToGCReportAsserts_TrackedAssert)(nil),  // 39: underlords.CMsgAnyToGCReportAsserts.TrackedAssert
	(*CMsgHistogram_HistogramBucket)(nil),           // 40: underlords.CMsgHistogram.HistogramBucket
	(EDACPlatform)(0),                               // 41: underlords.EDACPlatform
}
var file_underlords_dac_gcmessages_common_proto_depIdxs = []int32{
	30, // 0: underlords.CServerLobbyData_PlayerInfo.loadout:type_name -> underlords.CServerLobbyData_PlayerInfo.LoadoutSlot
	34, // 1: underlords.CServerLobbyData_PlayerInfo.events:type_name -> underlords.CServerLobbyData_PlayerInfo.Event
	10, // 2: underlords.CSODACLobby.server_state:type_name -> underlords.ELobbyServerState
	3,  // 3: underlords.CSODACLobby.match_mode:type_name -> underlords.EDACMatchMode
	4,  // 4: underlords.CSODACLobby.game_mode:type_name -> underlords.EDACGameMode
	35, // 5: underlords.CSODACParty.members:type_name -> underlords.CSODACParty.Member
	37, // 6: underlords.CSODACParty.invites:type_name -> underlords.CSODACParty.Invite
	36, // 7: underlords.CSODACParty.left_members:type_name -> underlords.CSODACParty.LeftMember
	6,  // 8: underlords.CSODACParty.bot_difficulty:type_name -> underlords.EDACBotDifficulty
	14, // 9: underlords.CSODACParty.custom_modifier:type_name -> underlords.CMsgGameModifiers
	38, // 10: underlords.CSODACParty.teams:type_name -> underlords.CSODACParty.TeamInfo
	22, // 11: underlords.CMsgGameModeSettings.streetfight_settings:type_name -> underlords.CMsgStreetfightSettings
	3,  // 12: underlords.CMsgStartFindingMatchInfo.match_mode:type_name -> underlords.EDACMatchMode
	41, // 13: underlords.CMsgStartFindingMatchInfo.platform:type_name -> underlords.EDACPlatform
	6,  // 14: underlords.CMsgStartFindingMatchInfo.bot_difficulty:type_name -> underlords.EDACBotDifficulty
	4,  // 15: underlords.CMsgStartFindingMatchInfo.game_mode:type_name -> underlords.EDACGameMode
	2,  // 16: underlords.CMsgStartFindingMatchInfo.region_mode:type_name -> underlords.EDACRegionMode
	23, // 17: underlords.CMsgStartFindingMatchInfo.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	39, // 18: underlords.CMsgAnyToGCReportAsserts.asserts:type_name -> underlords.CMsgAnyToGCReportAsserts.TrackedAssert
	40, // 19: underlords.CMsgHistogram.histogram_buckets:type_name -> underlords.CMsgHistogram.HistogramBucket
	27, // 20: underlords.CMsgPuzzleLeaderboardHistogram.histogram:type_name -> underlords.CMsgHistogram
	28, // 21: underlords.CMsgPuzzleLeaderboardHistogramList.leaderboard_histograms:type_name -> underlords.CMsgPuzzleLeaderboardHistogram
	32, // 22: underlords.CServerLobbyData_PlayerInfo.Event.challenges:type_name -> underlords.CServerLobbyData_PlayerInfo.Challenge
	31, // 23: underlords.CServerLobbyData_PlayerInfo.Event.currencies:type_name -> underlords.CServerLobbyData_PlayerInfo.Currency
	33, // 24: underlords.CServerLobbyData_PlayerInfo.Event.virtual_items:type_name -> underlords.CServerLobbyData_PlayerInfo.VirtualItem
	12, // 25: underlords.CSODACParty.Member.player_type:type_name -> underlords.CSODACParty.EPlayerType
	41, // 26: underlords.CSODACParty.Member.platform:type_name -> underlords.EDACPlatform
	12, // 27: underlords.CSODACParty.LeftMember.player_type:type_name -> underlords.CSODACParty.EPlayerType
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_underlords_dac_gcmessages_common_proto_init() }
func file_underlords_dac_gcmessages_common_proto_init() {
	if File_underlords_dac_gcmessages_common_proto != nil {
		return
	}
	file_underlords_steammessages_proto_init()
	file_underlords_econ_gcmessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_underlords_dac_gcmessages_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRegionPingTimesClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOAccountSyncStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSOGameAccountClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStreetfightSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStartFindingMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAsserts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAssertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPuzzleLeaderboardHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPuzzleLeaderboardHistogramList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo_LoadoutSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo_VirtualItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerInfo_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACParty_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACParty_LeftMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACParty_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACParty_TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAnyToGCReportAsserts_TrackedAssert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgHistogram_HistogramBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_underlords_dac_gcmessages_common_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CMsgGameModeSettings_PuzzleId)(nil),
		(*CMsgGameModeSettings_TutorialPhase)(nil),
		(*CMsgGameModeSettings_SandboxShareCode)(nil),
		(*CMsgGameModeSettings_StreetfightSettings)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_underlords_dac_gcmessages_common_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_underlords_dac_gcmessages_common_proto_goTypes,
		DependencyIndexes: file_underlords_dac_gcmessages_common_proto_depIdxs,
		EnumInfos:         file_underlords_dac_gcmessages_common_proto_enumTypes,
		MessageInfos:      file_underlords_dac_gcmessages_common_proto_msgTypes,
	}.Build()
	File_underlords_dac_gcmessages_common_proto = out.File
	file_underlords_dac_gcmessages_common_proto_rawDesc = nil
	file_underlords_dac_gcmessages_common_proto_goTypes = nil
	file_underlords_dac_gcmessages_common_proto_depIdxs = nil
}
