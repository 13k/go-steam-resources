// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: underlords/dac_gcmessages_client.proto

package underlords

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDACClientMessages int32

const (
	EGCDACClientMessages_k_EMsgClientToGCStartMatchmaking                           EGCDACClientMessages = 9010
	EGCDACClientMessages_k_EMsgClientToGCStartMatchmakingResponse                   EGCDACClientMessages = 9011
	EGCDACClientMessages_k_EMsgClientToGCStopMatchmaking                            EGCDACClientMessages = 9012
	EGCDACClientMessages_k_EMsgClientToGCStopMatchmakingResponse                    EGCDACClientMessages = 9013
	EGCDACClientMessages_k_EMsgGCToClientMatchmakingStopped                         EGCDACClientMessages = 9014
	EGCDACClientMessages_k_EMsgClientToGCLeaveLobby                                 EGCDACClientMessages = 9015
	EGCDACClientMessages_k_EMsgClientToGCLeaveLobbyResponse                         EGCDACClientMessages = 9016
	EGCDACClientMessages_k_EMsgClientToGCIsInMatchmaking                            EGCDACClientMessages = 9017
	EGCDACClientMessages_k_EMsgClientToGCIsInMatchmakingResponse                    EGCDACClientMessages = 9018
	EGCDACClientMessages_k_EMsgGCToClientSDRTicket                                  EGCDACClientMessages = 9120
	EGCDACClientMessages_k_EMsgClientToGCReplacementSDRTicket                       EGCDACClientMessages = 9121
	EGCDACClientMessages_k_EMsgClientToGCReplacementSDRTicketResponse               EGCDACClientMessages = 9122
	EGCDACClientMessages_k_EMsgClientToGCPartyCreate                                EGCDACClientMessages = 9123
	EGCDACClientMessages_k_EMsgClientToGCPartyCreateResponse                        EGCDACClientMessages = 9124
	EGCDACClientMessages_k_EMsgClientToGCPartyLeave                                 EGCDACClientMessages = 9125
	EGCDACClientMessages_k_EMsgClientToGCPartyLeaveResponse                         EGCDACClientMessages = 9126
	EGCDACClientMessages_k_EMsgClientToGCPartyJoin                                  EGCDACClientMessages = 9127
	EGCDACClientMessages_k_EMsgClientToGCPartyJoinResponse                          EGCDACClientMessages = 9128
	EGCDACClientMessages_k_EMsgClientToGCPartyAction                                EGCDACClientMessages = 9129
	EGCDACClientMessages_k_EMsgClientToGCPartyActionResponse                        EGCDACClientMessages = 9130
	EGCDACClientMessages_k_EMsgClientToGCPartyStartMatch                            EGCDACClientMessages = 9131
	EGCDACClientMessages_k_EMsgClientToGCPartyStartMatchResponse                    EGCDACClientMessages = 9132
	EGCDACClientMessages_k_EMsgClientToGCPartyInviteUser                            EGCDACClientMessages = 9133
	EGCDACClientMessages_k_EMsgClientToGCPartyInviteUserResponse                    EGCDACClientMessages = 9134
	EGCDACClientMessages_k_EMsgGCToClientPartyEvent                                 EGCDACClientMessages = 9135
	EGCDACClientMessages_k_EMsgClientToGCPartyClientVersion                         EGCDACClientMessages = 9136
	EGCDACClientMessages_k_EMsgGCToClientCanRejoinParty                             EGCDACClientMessages = 9137
	EGCDACClientMessages_k_EMsgClientToGCPartyJoinViaCode                           EGCDACClientMessages = 9138
	EGCDACClientMessages_k_EMsgClientToGCPartyJoinViaCodeResponse                   EGCDACClientMessages = 9139
	EGCDACClientMessages_k_EMsgGCToClientDevMMStatus                                EGCDACClientMessages = 9140
	EGCDACClientMessages_k_EMsgClientToGCDevForceMatchFormation                     EGCDACClientMessages = 9141
	EGCDACClientMessages_k_EMsgClientToGCEventRequestInfo                           EGCDACClientMessages = 9142
	EGCDACClientMessages_k_EMsgGCToClientEventInfo                                  EGCDACClientMessages = 9143
	EGCDACClientMessages_k_EMsgClientToGCEventClaim                                 EGCDACClientMessages = 9144
	EGCDACClientMessages_k_EMsgClientToGCEventClaimResponse                         EGCDACClientMessages = 9145
	EGCDACClientMessages_k_EMsgClientToGCEquipLoadout                               EGCDACClientMessages = 9146
	EGCDACClientMessages_k_EMsgClientToGCEquipLoadoutResponse                       EGCDACClientMessages = 9147
	EGCDACClientMessages_k_EMsgClientToGCSpectateUser                               EGCDACClientMessages = 9148
	EGCDACClientMessages_k_EMsgClientToGCSpectateUserResponse                       EGCDACClientMessages = 9149
	EGCDACClientMessages_k_EMsgClientToGCRecordLocalBotMatch                        EGCDACClientMessages = 9150
	EGCDACClientMessages_k_EMsgClientToGCRerollChallenge                            EGCDACClientMessages = 9151
	EGCDACClientMessages_k_EMsgClientToGCRerollChallengeResponse                    EGCDACClientMessages = 9152
	EGCDACClientMessages_k_EMsgClientToGCClaimChallengeReward                       EGCDACClientMessages = 9153
	EGCDACClientMessages_k_EMsgClientToGCClaimChallengeRewardResponse               EGCDACClientMessages = 9154
	EGCDACClientMessages_k_EMsgClientToGCCreateFriendCode                           EGCDACClientMessages = 9155
	EGCDACClientMessages_k_EMsgClientToGCCreateFriendCodeResponse                   EGCDACClientMessages = 9156
	EGCDACClientMessages_k_EMsgClientToGCGetFriendCodes                             EGCDACClientMessages = 9157
	EGCDACClientMessages_k_EMsgClientToGCGetFriendCodesResponse                     EGCDACClientMessages = 9158
	EGCDACClientMessages_k_EMsgClientToGCCheckFriendCode                            EGCDACClientMessages = 9159
	EGCDACClientMessages_k_EMsgClientToGCCheckFriendCodeResponse                    EGCDACClientMessages = 9160
	EGCDACClientMessages_k_EMsgClientToGCRedeemFriendCode                           EGCDACClientMessages = 9161
	EGCDACClientMessages_k_EMsgClientToGCRedeemFriendCodeResponse                   EGCDACClientMessages = 9162
	EGCDACClientMessages_k_EMsgClientToGCRevokeFriendCode                           EGCDACClientMessages = 9163
	EGCDACClientMessages_k_EMsgClientToGCRevokeFriendCodeResponse                   EGCDACClientMessages = 9164
	EGCDACClientMessages_k_EMsgClientToGCEventRequestInfoSync                       EGCDACClientMessages = 9165
	EGCDACClientMessages_k_EMsgClientToGCEventRequestInfoSyncResponse               EGCDACClientMessages = 9166
	EGCDACClientMessages_k_EMsgClientToGCDevEventOperation                          EGCDACClientMessages = 9169
	EGCDACClientMessages_k_EMsgClientToGCDevEventOperationResponse                  EGCDACClientMessages = 9170
	EGCDACClientMessages_k_EMsgGCToClientUpdateConsoleCommands                      EGCDACClientMessages = 9171
	EGCDACClientMessages_k_EMsgClientToGCPerformAutoActions                         EGCDACClientMessages = 9172
	EGCDACClientMessages_k_EMsgClientToGCPerformAutoActionsResponse                 EGCDACClientMessages = 9173
	EGCDACClientMessages_k_EMsgClientToGCCanPurchaseItem                            EGCDACClientMessages = 9176
	EGCDACClientMessages_k_EMsgClientToGCCanPurchaseItemResponse                    EGCDACClientMessages = 9177
	EGCDACClientMessages_k_EMsgClientToGCHandleItemPurchase                         EGCDACClientMessages = 9178
	EGCDACClientMessages_k_EMsgClientToGCHandleItemPurchaseResponse                 EGCDACClientMessages = 9179
	EGCDACClientMessages_k_EMsgClientToGCEventEquipVirtualItems                     EGCDACClientMessages = 9188
	EGCDACClientMessages_k_EMsgClientToGCEventEquipVirtualItemsResponse             EGCDACClientMessages = 9189
	EGCDACClientMessages_k_EMsgClientToGCClearPurchaseReserve                       EGCDACClientMessages = 9190
	EGCDACClientMessages_k_EMsgClientToGCClearPurchaseReserveResponse               EGCDACClientMessages = 9191
	EGCDACClientMessages_k_EMsgGCToClientAcquireRegionModeInfo                      EGCDACClientMessages = 9192
	EGCDACClientMessages_k_EMsgGCToClientDurationControlWarning                     EGCDACClientMessages = 9193
	EGCDACClientMessages_k_EMsgClientToGCGetRegionModeInfo                          EGCDACClientMessages = 9194
	EGCDACClientMessages_k_EMsgClientToGCGetRegionModeInfoResponse                  EGCDACClientMessages = 9195
	EGCDACClientMessages_k_EMsgGCToClientGameModifiersUpdated                       EGCDACClientMessages = 9196
	EGCDACClientMessages_k_EMsgClientToGCEventChallengeProgress                     EGCDACClientMessages = 9197
	EGCDACClientMessages_k_EMsgClientToGCEventChallengeProgressResponse             EGCDACClientMessages = 9198
	EGCDACClientMessages_k_EMsgClientToGCAssociateDevice                            EGCDACClientMessages = 9199
	EGCDACClientMessages_k_EMsgClientToGCAssociateDeviceResponse                    EGCDACClientMessages = 9200
	EGCDACClientMessages_k_EMsgClientToGCEventPurchase                              EGCDACClientMessages = 9201
	EGCDACClientMessages_k_EMsgClientToGCEventPurchaseResponse                      EGCDACClientMessages = 9202
	EGCDACClientMessages_k_EMsgClientToGCPartySetGameModifier                       EGCDACClientMessages = 9203
	EGCDACClientMessages_k_EMsgClientToGCPartySetGameModifierResponse               EGCDACClientMessages = 9204
	EGCDACClientMessages_k_EMsgClientToGCAckSupportCredits                          EGCDACClientMessages = 9205
	EGCDACClientMessages_k_EMsgClientToGCAckSupportCreditsResponse                  EGCDACClientMessages = 9206
	EGCDACClientMessages_k_EMsgClientToGCSetTeamName                                EGCDACClientMessages = 9207
	EGCDACClientMessages_k_EMsgClientToGCSetTeamNameResponse                        EGCDACClientMessages = 9208
	EGCDACClientMessages_k_EMsgClientToGCDevOperation                               EGCDACClientMessages = 9212
	EGCDACClientMessages_k_EMsgClientToGCDevOperationResponse                       EGCDACClientMessages = 9213
	EGCDACClientMessages_k_EMsgClientToGCUpdateAccountSync                          EGCDACClientMessages = 9214
	EGCDACClientMessages_k_EMsgClientToGCUpdateAccountSyncResponse                  EGCDACClientMessages = 9215
	EGCDACClientMessages_k_EMsgClientToGCGetDuosRanks                               EGCDACClientMessages = 9216
	EGCDACClientMessages_k_EMsgClientToGCGetDuosRanksResponse                       EGCDACClientMessages = 9217
	EGCDACClientMessages_k_EMsgClientToGCGetProfile                                 EGCDACClientMessages = 9218
	EGCDACClientMessages_k_EMsgClientToGCGetProfileResponse                         EGCDACClientMessages = 9219
	EGCDACClientMessages_k_EMsgClientToGCGetMatchHistory                            EGCDACClientMessages = 9220
	EGCDACClientMessages_k_EMsgClientToGCGetMatchHistoryResponse                    EGCDACClientMessages = 9221
	EGCDACClientMessages_k_EMsgClientToGCEventPurchaseCurrency                      EGCDACClientMessages = 9222
	EGCDACClientMessages_k_EMsgClientToGCEventPurchaseCurrencyResponse              EGCDACClientMessages = 9223
	EGCDACClientMessages_k_EMsgClientToGCGetFriendRanks                             EGCDACClientMessages = 9224
	EGCDACClientMessages_k_EMsgClientToGCGetFriendRanksResponse                     EGCDACClientMessages = 9225
	EGCDACClientMessages_k_EMsgClientToGCGetPuzzleLeaderboards                      EGCDACClientMessages = 9226
	EGCDACClientMessages_k_EMsgClientToGCGetPuzzleLeaderboardsResponse              EGCDACClientMessages = 9227
	EGCDACClientMessages_k_EMsgClientToGCGetPostMatchStats                          EGCDACClientMessages = 9228
	EGCDACClientMessages_k_EMsgClientToGCGetPostMatchStatsResponse                  EGCDACClientMessages = 9229
	EGCDACClientMessages_k_EMsgClientToGCEventChallengeProgressWithCurrency         EGCDACClientMessages = 9230
	EGCDACClientMessages_k_EMsgClientToGCEventChallengeProgressWithCurrencyResponse EGCDACClientMessages = 9231
)

// Enum value maps for EGCDACClientMessages.
var (
	EGCDACClientMessages_name = map[int32]string{
		9010: "k_EMsgClientToGCStartMatchmaking",
		9011: "k_EMsgClientToGCStartMatchmakingResponse",
		9012: "k_EMsgClientToGCStopMatchmaking",
		9013: "k_EMsgClientToGCStopMatchmakingResponse",
		9014: "k_EMsgGCToClientMatchmakingStopped",
		9015: "k_EMsgClientToGCLeaveLobby",
		9016: "k_EMsgClientToGCLeaveLobbyResponse",
		9017: "k_EMsgClientToGCIsInMatchmaking",
		9018: "k_EMsgClientToGCIsInMatchmakingResponse",
		9120: "k_EMsgGCToClientSDRTicket",
		9121: "k_EMsgClientToGCReplacementSDRTicket",
		9122: "k_EMsgClientToGCReplacementSDRTicketResponse",
		9123: "k_EMsgClientToGCPartyCreate",
		9124: "k_EMsgClientToGCPartyCreateResponse",
		9125: "k_EMsgClientToGCPartyLeave",
		9126: "k_EMsgClientToGCPartyLeaveResponse",
		9127: "k_EMsgClientToGCPartyJoin",
		9128: "k_EMsgClientToGCPartyJoinResponse",
		9129: "k_EMsgClientToGCPartyAction",
		9130: "k_EMsgClientToGCPartyActionResponse",
		9131: "k_EMsgClientToGCPartyStartMatch",
		9132: "k_EMsgClientToGCPartyStartMatchResponse",
		9133: "k_EMsgClientToGCPartyInviteUser",
		9134: "k_EMsgClientToGCPartyInviteUserResponse",
		9135: "k_EMsgGCToClientPartyEvent",
		9136: "k_EMsgClientToGCPartyClientVersion",
		9137: "k_EMsgGCToClientCanRejoinParty",
		9138: "k_EMsgClientToGCPartyJoinViaCode",
		9139: "k_EMsgClientToGCPartyJoinViaCodeResponse",
		9140: "k_EMsgGCToClientDevMMStatus",
		9141: "k_EMsgClientToGCDevForceMatchFormation",
		9142: "k_EMsgClientToGCEventRequestInfo",
		9143: "k_EMsgGCToClientEventInfo",
		9144: "k_EMsgClientToGCEventClaim",
		9145: "k_EMsgClientToGCEventClaimResponse",
		9146: "k_EMsgClientToGCEquipLoadout",
		9147: "k_EMsgClientToGCEquipLoadoutResponse",
		9148: "k_EMsgClientToGCSpectateUser",
		9149: "k_EMsgClientToGCSpectateUserResponse",
		9150: "k_EMsgClientToGCRecordLocalBotMatch",
		9151: "k_EMsgClientToGCRerollChallenge",
		9152: "k_EMsgClientToGCRerollChallengeResponse",
		9153: "k_EMsgClientToGCClaimChallengeReward",
		9154: "k_EMsgClientToGCClaimChallengeRewardResponse",
		9155: "k_EMsgClientToGCCreateFriendCode",
		9156: "k_EMsgClientToGCCreateFriendCodeResponse",
		9157: "k_EMsgClientToGCGetFriendCodes",
		9158: "k_EMsgClientToGCGetFriendCodesResponse",
		9159: "k_EMsgClientToGCCheckFriendCode",
		9160: "k_EMsgClientToGCCheckFriendCodeResponse",
		9161: "k_EMsgClientToGCRedeemFriendCode",
		9162: "k_EMsgClientToGCRedeemFriendCodeResponse",
		9163: "k_EMsgClientToGCRevokeFriendCode",
		9164: "k_EMsgClientToGCRevokeFriendCodeResponse",
		9165: "k_EMsgClientToGCEventRequestInfoSync",
		9166: "k_EMsgClientToGCEventRequestInfoSyncResponse",
		9169: "k_EMsgClientToGCDevEventOperation",
		9170: "k_EMsgClientToGCDevEventOperationResponse",
		9171: "k_EMsgGCToClientUpdateConsoleCommands",
		9172: "k_EMsgClientToGCPerformAutoActions",
		9173: "k_EMsgClientToGCPerformAutoActionsResponse",
		9176: "k_EMsgClientToGCCanPurchaseItem",
		9177: "k_EMsgClientToGCCanPurchaseItemResponse",
		9178: "k_EMsgClientToGCHandleItemPurchase",
		9179: "k_EMsgClientToGCHandleItemPurchaseResponse",
		9188: "k_EMsgClientToGCEventEquipVirtualItems",
		9189: "k_EMsgClientToGCEventEquipVirtualItemsResponse",
		9190: "k_EMsgClientToGCClearPurchaseReserve",
		9191: "k_EMsgClientToGCClearPurchaseReserveResponse",
		9192: "k_EMsgGCToClientAcquireRegionModeInfo",
		9193: "k_EMsgGCToClientDurationControlWarning",
		9194: "k_EMsgClientToGCGetRegionModeInfo",
		9195: "k_EMsgClientToGCGetRegionModeInfoResponse",
		9196: "k_EMsgGCToClientGameModifiersUpdated",
		9197: "k_EMsgClientToGCEventChallengeProgress",
		9198: "k_EMsgClientToGCEventChallengeProgressResponse",
		9199: "k_EMsgClientToGCAssociateDevice",
		9200: "k_EMsgClientToGCAssociateDeviceResponse",
		9201: "k_EMsgClientToGCEventPurchase",
		9202: "k_EMsgClientToGCEventPurchaseResponse",
		9203: "k_EMsgClientToGCPartySetGameModifier",
		9204: "k_EMsgClientToGCPartySetGameModifierResponse",
		9205: "k_EMsgClientToGCAckSupportCredits",
		9206: "k_EMsgClientToGCAckSupportCreditsResponse",
		9207: "k_EMsgClientToGCSetTeamName",
		9208: "k_EMsgClientToGCSetTeamNameResponse",
		9212: "k_EMsgClientToGCDevOperation",
		9213: "k_EMsgClientToGCDevOperationResponse",
		9214: "k_EMsgClientToGCUpdateAccountSync",
		9215: "k_EMsgClientToGCUpdateAccountSyncResponse",
		9216: "k_EMsgClientToGCGetDuosRanks",
		9217: "k_EMsgClientToGCGetDuosRanksResponse",
		9218: "k_EMsgClientToGCGetProfile",
		9219: "k_EMsgClientToGCGetProfileResponse",
		9220: "k_EMsgClientToGCGetMatchHistory",
		9221: "k_EMsgClientToGCGetMatchHistoryResponse",
		9222: "k_EMsgClientToGCEventPurchaseCurrency",
		9223: "k_EMsgClientToGCEventPurchaseCurrencyResponse",
		9224: "k_EMsgClientToGCGetFriendRanks",
		9225: "k_EMsgClientToGCGetFriendRanksResponse",
		9226: "k_EMsgClientToGCGetPuzzleLeaderboards",
		9227: "k_EMsgClientToGCGetPuzzleLeaderboardsResponse",
		9228: "k_EMsgClientToGCGetPostMatchStats",
		9229: "k_EMsgClientToGCGetPostMatchStatsResponse",
		9230: "k_EMsgClientToGCEventChallengeProgressWithCurrency",
		9231: "k_EMsgClientToGCEventChallengeProgressWithCurrencyResponse",
	}
	EGCDACClientMessages_value = map[string]int32{
		"k_EMsgClientToGCStartMatchmaking":                           9010,
		"k_EMsgClientToGCStartMatchmakingResponse":                   9011,
		"k_EMsgClientToGCStopMatchmaking":                            9012,
		"k_EMsgClientToGCStopMatchmakingResponse":                    9013,
		"k_EMsgGCToClientMatchmakingStopped":                         9014,
		"k_EMsgClientToGCLeaveLobby":                                 9015,
		"k_EMsgClientToGCLeaveLobbyResponse":                         9016,
		"k_EMsgClientToGCIsInMatchmaking":                            9017,
		"k_EMsgClientToGCIsInMatchmakingResponse":                    9018,
		"k_EMsgGCToClientSDRTicket":                                  9120,
		"k_EMsgClientToGCReplacementSDRTicket":                       9121,
		"k_EMsgClientToGCReplacementSDRTicketResponse":               9122,
		"k_EMsgClientToGCPartyCreate":                                9123,
		"k_EMsgClientToGCPartyCreateResponse":                        9124,
		"k_EMsgClientToGCPartyLeave":                                 9125,
		"k_EMsgClientToGCPartyLeaveResponse":                         9126,
		"k_EMsgClientToGCPartyJoin":                                  9127,
		"k_EMsgClientToGCPartyJoinResponse":                          9128,
		"k_EMsgClientToGCPartyAction":                                9129,
		"k_EMsgClientToGCPartyActionResponse":                        9130,
		"k_EMsgClientToGCPartyStartMatch":                            9131,
		"k_EMsgClientToGCPartyStartMatchResponse":                    9132,
		"k_EMsgClientToGCPartyInviteUser":                            9133,
		"k_EMsgClientToGCPartyInviteUserResponse":                    9134,
		"k_EMsgGCToClientPartyEvent":                                 9135,
		"k_EMsgClientToGCPartyClientVersion":                         9136,
		"k_EMsgGCToClientCanRejoinParty":                             9137,
		"k_EMsgClientToGCPartyJoinViaCode":                           9138,
		"k_EMsgClientToGCPartyJoinViaCodeResponse":                   9139,
		"k_EMsgGCToClientDevMMStatus":                                9140,
		"k_EMsgClientToGCDevForceMatchFormation":                     9141,
		"k_EMsgClientToGCEventRequestInfo":                           9142,
		"k_EMsgGCToClientEventInfo":                                  9143,
		"k_EMsgClientToGCEventClaim":                                 9144,
		"k_EMsgClientToGCEventClaimResponse":                         9145,
		"k_EMsgClientToGCEquipLoadout":                               9146,
		"k_EMsgClientToGCEquipLoadoutResponse":                       9147,
		"k_EMsgClientToGCSpectateUser":                               9148,
		"k_EMsgClientToGCSpectateUserResponse":                       9149,
		"k_EMsgClientToGCRecordLocalBotMatch":                        9150,
		"k_EMsgClientToGCRerollChallenge":                            9151,
		"k_EMsgClientToGCRerollChallengeResponse":                    9152,
		"k_EMsgClientToGCClaimChallengeReward":                       9153,
		"k_EMsgClientToGCClaimChallengeRewardResponse":               9154,
		"k_EMsgClientToGCCreateFriendCode":                           9155,
		"k_EMsgClientToGCCreateFriendCodeResponse":                   9156,
		"k_EMsgClientToGCGetFriendCodes":                             9157,
		"k_EMsgClientToGCGetFriendCodesResponse":                     9158,
		"k_EMsgClientToGCCheckFriendCode":                            9159,
		"k_EMsgClientToGCCheckFriendCodeResponse":                    9160,
		"k_EMsgClientToGCRedeemFriendCode":                           9161,
		"k_EMsgClientToGCRedeemFriendCodeResponse":                   9162,
		"k_EMsgClientToGCRevokeFriendCode":                           9163,
		"k_EMsgClientToGCRevokeFriendCodeResponse":                   9164,
		"k_EMsgClientToGCEventRequestInfoSync":                       9165,
		"k_EMsgClientToGCEventRequestInfoSyncResponse":               9166,
		"k_EMsgClientToGCDevEventOperation":                          9169,
		"k_EMsgClientToGCDevEventOperationResponse":                  9170,
		"k_EMsgGCToClientUpdateConsoleCommands":                      9171,
		"k_EMsgClientToGCPerformAutoActions":                         9172,
		"k_EMsgClientToGCPerformAutoActionsResponse":                 9173,
		"k_EMsgClientToGCCanPurchaseItem":                            9176,
		"k_EMsgClientToGCCanPurchaseItemResponse":                    9177,
		"k_EMsgClientToGCHandleItemPurchase":                         9178,
		"k_EMsgClientToGCHandleItemPurchaseResponse":                 9179,
		"k_EMsgClientToGCEventEquipVirtualItems":                     9188,
		"k_EMsgClientToGCEventEquipVirtualItemsResponse":             9189,
		"k_EMsgClientToGCClearPurchaseReserve":                       9190,
		"k_EMsgClientToGCClearPurchaseReserveResponse":               9191,
		"k_EMsgGCToClientAcquireRegionModeInfo":                      9192,
		"k_EMsgGCToClientDurationControlWarning":                     9193,
		"k_EMsgClientToGCGetRegionModeInfo":                          9194,
		"k_EMsgClientToGCGetRegionModeInfoResponse":                  9195,
		"k_EMsgGCToClientGameModifiersUpdated":                       9196,
		"k_EMsgClientToGCEventChallengeProgress":                     9197,
		"k_EMsgClientToGCEventChallengeProgressResponse":             9198,
		"k_EMsgClientToGCAssociateDevice":                            9199,
		"k_EMsgClientToGCAssociateDeviceResponse":                    9200,
		"k_EMsgClientToGCEventPurchase":                              9201,
		"k_EMsgClientToGCEventPurchaseResponse":                      9202,
		"k_EMsgClientToGCPartySetGameModifier":                       9203,
		"k_EMsgClientToGCPartySetGameModifierResponse":               9204,
		"k_EMsgClientToGCAckSupportCredits":                          9205,
		"k_EMsgClientToGCAckSupportCreditsResponse":                  9206,
		"k_EMsgClientToGCSetTeamName":                                9207,
		"k_EMsgClientToGCSetTeamNameResponse":                        9208,
		"k_EMsgClientToGCDevOperation":                               9212,
		"k_EMsgClientToGCDevOperationResponse":                       9213,
		"k_EMsgClientToGCUpdateAccountSync":                          9214,
		"k_EMsgClientToGCUpdateAccountSyncResponse":                  9215,
		"k_EMsgClientToGCGetDuosRanks":                               9216,
		"k_EMsgClientToGCGetDuosRanksResponse":                       9217,
		"k_EMsgClientToGCGetProfile":                                 9218,
		"k_EMsgClientToGCGetProfileResponse":                         9219,
		"k_EMsgClientToGCGetMatchHistory":                            9220,
		"k_EMsgClientToGCGetMatchHistoryResponse":                    9221,
		"k_EMsgClientToGCEventPurchaseCurrency":                      9222,
		"k_EMsgClientToGCEventPurchaseCurrencyResponse":              9223,
		"k_EMsgClientToGCGetFriendRanks":                             9224,
		"k_EMsgClientToGCGetFriendRanksResponse":                     9225,
		"k_EMsgClientToGCGetPuzzleLeaderboards":                      9226,
		"k_EMsgClientToGCGetPuzzleLeaderboardsResponse":              9227,
		"k_EMsgClientToGCGetPostMatchStats":                          9228,
		"k_EMsgClientToGCGetPostMatchStatsResponse":                  9229,
		"k_EMsgClientToGCEventChallengeProgressWithCurrency":         9230,
		"k_EMsgClientToGCEventChallengeProgressWithCurrencyResponse": 9231,
	}
)

func (x EGCDACClientMessages) Enum() *EGCDACClientMessages {
	p := new(EGCDACClientMessages)
	*p = x
	return p
}

func (x EGCDACClientMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDACClientMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[0].Descriptor()
}

func (EGCDACClientMessages) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[0]
}

func (x EGCDACClientMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDACClientMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDACClientMessages(num)
	return nil
}

// Deprecated: Use EGCDACClientMessages.Descriptor instead.
func (EGCDACClientMessages) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

type EItemEditorReservationResult int32

const (
	EItemEditorReservationResult_k_EItemEditorReservationResult_OK            EItemEditorReservationResult = 1
	EItemEditorReservationResult_k_EItemEditorReservationResult_AlreadyExists EItemEditorReservationResult = 2
	EItemEditorReservationResult_k_EItemEditorReservationResult_Reserved      EItemEditorReservationResult = 3
	EItemEditorReservationResult_k_EItemEditorReservationResult_TimedOut      EItemEditorReservationResult = 4
)

// Enum value maps for EItemEditorReservationResult.
var (
	EItemEditorReservationResult_name = map[int32]string{
		1: "k_EItemEditorReservationResult_OK",
		2: "k_EItemEditorReservationResult_AlreadyExists",
		3: "k_EItemEditorReservationResult_Reserved",
		4: "k_EItemEditorReservationResult_TimedOut",
	}
	EItemEditorReservationResult_value = map[string]int32{
		"k_EItemEditorReservationResult_OK":            1,
		"k_EItemEditorReservationResult_AlreadyExists": 2,
		"k_EItemEditorReservationResult_Reserved":      3,
		"k_EItemEditorReservationResult_TimedOut":      4,
	}
)

func (x EItemEditorReservationResult) Enum() *EItemEditorReservationResult {
	p := new(EItemEditorReservationResult)
	*p = x
	return p
}

func (x EItemEditorReservationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemEditorReservationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[1].Descriptor()
}

func (EItemEditorReservationResult) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[1]
}

func (x EItemEditorReservationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemEditorReservationResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemEditorReservationResult(num)
	return nil
}

// Deprecated: Use EItemEditorReservationResult.Descriptor instead.
func (EItemEditorReservationResult) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

type EClientStatsEvent int32

const (
	EClientStatsEvent_k_EClientStatsEvent_Boot              EClientStatsEvent = 1
	EClientStatsEvent_k_EClientStatsEvent_StartMatch        EClientStatsEvent = 2
	EClientStatsEvent_k_EClientStatsEvent_AbandonMatch      EClientStatsEvent = 3
	EClientStatsEvent_k_EClientStatsEvent_FinishMatch       EClientStatsEvent = 4
	EClientStatsEvent_k_EClientStatsEvent_StartSteamSignon  EClientStatsEvent = 5
	EClientStatsEvent_k_EClientStatsEvent_FinishSteamSignon EClientStatsEvent = 6
)

// Enum value maps for EClientStatsEvent.
var (
	EClientStatsEvent_name = map[int32]string{
		1: "k_EClientStatsEvent_Boot",
		2: "k_EClientStatsEvent_StartMatch",
		3: "k_EClientStatsEvent_AbandonMatch",
		4: "k_EClientStatsEvent_FinishMatch",
		5: "k_EClientStatsEvent_StartSteamSignon",
		6: "k_EClientStatsEvent_FinishSteamSignon",
	}
	EClientStatsEvent_value = map[string]int32{
		"k_EClientStatsEvent_Boot":              1,
		"k_EClientStatsEvent_StartMatch":        2,
		"k_EClientStatsEvent_AbandonMatch":      3,
		"k_EClientStatsEvent_FinishMatch":       4,
		"k_EClientStatsEvent_StartSteamSignon":  5,
		"k_EClientStatsEvent_FinishSteamSignon": 6,
	}
)

func (x EClientStatsEvent) Enum() *EClientStatsEvent {
	p := new(EClientStatsEvent)
	*p = x
	return p
}

func (x EClientStatsEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientStatsEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[2].Descriptor()
}

func (EClientStatsEvent) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[2]
}

func (x EClientStatsEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientStatsEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientStatsEvent(num)
	return nil
}

// Deprecated: Use EClientStatsEvent.Descriptor instead.
func (EClientStatsEvent) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

type CMsgWebAPIClientDeviceInfo_EFlags int32

const (
	CMsgWebAPIClientDeviceInfo_k_eFlags_StartedTutorial    CMsgWebAPIClientDeviceInfo_EFlags = 1
	CMsgWebAPIClientDeviceInfo_k_eFlags_FinishedTutorial   CMsgWebAPIClientDeviceInfo_EFlags = 2
	CMsgWebAPIClientDeviceInfo_k_eFlags_SideLoaded         CMsgWebAPIClientDeviceInfo_EFlags = 4
	CMsgWebAPIClientDeviceInfo_k_eFlags_China              CMsgWebAPIClientDeviceInfo_EFlags = 8
	CMsgWebAPIClientDeviceInfo_k_eFlags_RegisteredAccount  CMsgWebAPIClientDeviceInfo_EFlags = 16
	CMsgWebAPIClientDeviceInfo_k_eFlags_StartedTutorialBot CMsgWebAPIClientDeviceInfo_EFlags = 32
)

// Enum value maps for CMsgWebAPIClientDeviceInfo_EFlags.
var (
	CMsgWebAPIClientDeviceInfo_EFlags_name = map[int32]string{
		1:  "k_eFlags_StartedTutorial",
		2:  "k_eFlags_FinishedTutorial",
		4:  "k_eFlags_SideLoaded",
		8:  "k_eFlags_China",
		16: "k_eFlags_RegisteredAccount",
		32: "k_eFlags_StartedTutorialBot",
	}
	CMsgWebAPIClientDeviceInfo_EFlags_value = map[string]int32{
		"k_eFlags_StartedTutorial":    1,
		"k_eFlags_FinishedTutorial":   2,
		"k_eFlags_SideLoaded":         4,
		"k_eFlags_China":              8,
		"k_eFlags_RegisteredAccount":  16,
		"k_eFlags_StartedTutorialBot": 32,
	}
)

func (x CMsgWebAPIClientDeviceInfo_EFlags) Enum() *CMsgWebAPIClientDeviceInfo_EFlags {
	p := new(CMsgWebAPIClientDeviceInfo_EFlags)
	*p = x
	return p
}

func (x CMsgWebAPIClientDeviceInfo_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgWebAPIClientDeviceInfo_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[3].Descriptor()
}

func (CMsgWebAPIClientDeviceInfo_EFlags) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[3]
}

func (x CMsgWebAPIClientDeviceInfo_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgWebAPIClientDeviceInfo_EFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgWebAPIClientDeviceInfo_EFlags(num)
	return nil
}

// Deprecated: Use CMsgWebAPIClientDeviceInfo_EFlags.Descriptor instead.
func (CMsgWebAPIClientDeviceInfo_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{0, 0}
}

type CMsgClientToGCStartMatchmakingResponse_EResultCode int32

const (
	CMsgClientToGCStartMatchmakingResponse_k_EResult_OK                     CMsgClientToGCStartMatchmakingResponse_EResultCode = 0
	CMsgClientToGCStartMatchmakingResponse_k_EResult_AlreadyFindingMatch    CMsgClientToGCStartMatchmakingResponse_EResultCode = 1
	CMsgClientToGCStartMatchmakingResponse_k_EResult_PartyMemberInLobby     CMsgClientToGCStartMatchmakingResponse_EResultCode = 2
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InvalidClientVersion   CMsgClientToGCStartMatchmakingResponse_EResultCode = 3
	CMsgClientToGCStartMatchmakingResponse_k_EResult_MatchmakingDisabled    CMsgClientToGCStartMatchmakingResponse_EResultCode = 4
	CMsgClientToGCStartMatchmakingResponse_k_EResult_MatchmakingTooBusy     CMsgClientToGCStartMatchmakingResponse_EResultCode = 5
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InternalError          CMsgClientToGCStartMatchmakingResponse_EResultCode = 6
	CMsgClientToGCStartMatchmakingResponse_k_EResult_NoRegionPings          CMsgClientToGCStartMatchmakingResponse_EResultCode = 7
	CMsgClientToGCStartMatchmakingResponse_k_EResult_InParty                CMsgClientToGCStartMatchmakingResponse_EResultCode = 8
	CMsgClientToGCStartMatchmakingResponse_k_EResult_ModeLocked             CMsgClientToGCStartMatchmakingResponse_EResultCode = 9
	CMsgClientToGCStartMatchmakingResponse_k_EResult_ModeBanned             CMsgClientToGCStartMatchmakingResponse_EResultCode = 10
	CMsgClientToGCStartMatchmakingResponse_k_EResult_RegionInfoNotProvided  CMsgClientToGCStartMatchmakingResponse_EResultCode = 11
	CMsgClientToGCStartMatchmakingResponse_k_EResult_DurationControlBlocked CMsgClientToGCStartMatchmakingResponse_EResultCode = 12
)

// Enum value maps for CMsgClientToGCStartMatchmakingResponse_EResultCode.
var (
	CMsgClientToGCStartMatchmakingResponse_EResultCode_name = map[int32]string{
		0:  "k_EResult_OK",
		1:  "k_EResult_AlreadyFindingMatch",
		2:  "k_EResult_PartyMemberInLobby",
		3:  "k_EResult_InvalidClientVersion",
		4:  "k_EResult_MatchmakingDisabled",
		5:  "k_EResult_MatchmakingTooBusy",
		6:  "k_EResult_InternalError",
		7:  "k_EResult_NoRegionPings",
		8:  "k_EResult_InParty",
		9:  "k_EResult_ModeLocked",
		10: "k_EResult_ModeBanned",
		11: "k_EResult_RegionInfoNotProvided",
		12: "k_EResult_DurationControlBlocked",
	}
	CMsgClientToGCStartMatchmakingResponse_EResultCode_value = map[string]int32{
		"k_EResult_OK":                     0,
		"k_EResult_AlreadyFindingMatch":    1,
		"k_EResult_PartyMemberInLobby":     2,
		"k_EResult_InvalidClientVersion":   3,
		"k_EResult_MatchmakingDisabled":    4,
		"k_EResult_MatchmakingTooBusy":     5,
		"k_EResult_InternalError":          6,
		"k_EResult_NoRegionPings":          7,
		"k_EResult_InParty":                8,
		"k_EResult_ModeLocked":             9,
		"k_EResult_ModeBanned":             10,
		"k_EResult_RegionInfoNotProvided":  11,
		"k_EResult_DurationControlBlocked": 12,
	}
)

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) Enum() *CMsgClientToGCStartMatchmakingResponse_EResultCode {
	p := new(CMsgClientToGCStartMatchmakingResponse_EResultCode)
	*p = x
	return p
}

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCStartMatchmakingResponse_EResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[4].Descriptor()
}

func (CMsgClientToGCStartMatchmakingResponse_EResultCode) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[4]
}

func (x CMsgClientToGCStartMatchmakingResponse_EResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCStartMatchmakingResponse_EResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCStartMatchmakingResponse_EResultCode(num)
	return nil
}

// Deprecated: Use CMsgClientToGCStartMatchmakingResponse_EResultCode.Descriptor instead.
func (CMsgClientToGCStartMatchmakingResponse_EResultCode) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgGCToClientMatchmakingStopped_EReason int32

const (
	CMsgGCToClientMatchmakingStopped_k_EResult_Unspecified    CMsgGCToClientMatchmakingStopped_EReason = 0
	CMsgGCToClientMatchmakingStopped_k_EResult_VersionUpdated CMsgGCToClientMatchmakingStopped_EReason = 1
)

// Enum value maps for CMsgGCToClientMatchmakingStopped_EReason.
var (
	CMsgGCToClientMatchmakingStopped_EReason_name = map[int32]string{
		0: "k_EResult_Unspecified",
		1: "k_EResult_VersionUpdated",
	}
	CMsgGCToClientMatchmakingStopped_EReason_value = map[string]int32{
		"k_EResult_Unspecified":    0,
		"k_EResult_VersionUpdated": 1,
	}
)

func (x CMsgGCToClientMatchmakingStopped_EReason) Enum() *CMsgGCToClientMatchmakingStopped_EReason {
	p := new(CMsgGCToClientMatchmakingStopped_EReason)
	*p = x
	return p
}

func (x CMsgGCToClientMatchmakingStopped_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientMatchmakingStopped_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[5].Descriptor()
}

func (CMsgGCToClientMatchmakingStopped_EReason) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[5]
}

func (x CMsgGCToClientMatchmakingStopped_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientMatchmakingStopped_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientMatchmakingStopped_EReason(num)
	return nil
}

// Deprecated: Use CMsgGCToClientMatchmakingStopped_EReason.Descriptor instead.
func (CMsgGCToClientMatchmakingStopped_EReason) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{7, 0}
}

type CMsgClientToGCPartyCreateResponse_EResponse int32

const (
	CMsgClientToGCPartyCreateResponse_k_eInternalError          CMsgClientToGCPartyCreateResponse_EResponse = 0
	CMsgClientToGCPartyCreateResponse_k_eSuccess                CMsgClientToGCPartyCreateResponse_EResponse = 1
	CMsgClientToGCPartyCreateResponse_k_eAlreadyInParty         CMsgClientToGCPartyCreateResponse_EResponse = 2
	CMsgClientToGCPartyCreateResponse_k_eDisabled               CMsgClientToGCPartyCreateResponse_EResponse = 3
	CMsgClientToGCPartyCreateResponse_k_eInvalidVersion         CMsgClientToGCPartyCreateResponse_EResponse = 4
	CMsgClientToGCPartyCreateResponse_k_eNoRegionPings          CMsgClientToGCPartyCreateResponse_EResponse = 5
	CMsgClientToGCPartyCreateResponse_k_eTooBusy                CMsgClientToGCPartyCreateResponse_EResponse = 6
	CMsgClientToGCPartyCreateResponse_k_eRateLimited            CMsgClientToGCPartyCreateResponse_EResponse = 7
	CMsgClientToGCPartyCreateResponse_k_eNotFriends             CMsgClientToGCPartyCreateResponse_EResponse = 8
	CMsgClientToGCPartyCreateResponse_k_eRegionInfoNotProvided  CMsgClientToGCPartyCreateResponse_EResponse = 9
	CMsgClientToGCPartyCreateResponse_k_eDurationControlBlocked CMsgClientToGCPartyCreateResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCPartyCreateResponse_EResponse.
var (
	CMsgClientToGCPartyCreateResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eAlreadyInParty",
		3:  "k_eDisabled",
		4:  "k_eInvalidVersion",
		5:  "k_eNoRegionPings",
		6:  "k_eTooBusy",
		7:  "k_eRateLimited",
		8:  "k_eNotFriends",
		9:  "k_eRegionInfoNotProvided",
		10: "k_eDurationControlBlocked",
	}
	CMsgClientToGCPartyCreateResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eAlreadyInParty":         2,
		"k_eDisabled":               3,
		"k_eInvalidVersion":         4,
		"k_eNoRegionPings":          5,
		"k_eTooBusy":                6,
		"k_eRateLimited":            7,
		"k_eNotFriends":             8,
		"k_eRegionInfoNotProvided":  9,
		"k_eDurationControlBlocked": 10,
	}
)

func (x CMsgClientToGCPartyCreateResponse_EResponse) Enum() *CMsgClientToGCPartyCreateResponse_EResponse {
	p := new(CMsgClientToGCPartyCreateResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyCreateResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyCreateResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[6].Descriptor()
}

func (CMsgClientToGCPartyCreateResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[6]
}

func (x CMsgClientToGCPartyCreateResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyCreateResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyCreateResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyCreateResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyCreateResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{17, 0}
}

type CMsgClientToGCPartyLeaveResponse_EResponse int32

const (
	CMsgClientToGCPartyLeaveResponse_k_eInternalError CMsgClientToGCPartyLeaveResponse_EResponse = 0
	CMsgClientToGCPartyLeaveResponse_k_eSuccess       CMsgClientToGCPartyLeaveResponse_EResponse = 1
	CMsgClientToGCPartyLeaveResponse_k_eNotInParty    CMsgClientToGCPartyLeaveResponse_EResponse = 2
	CMsgClientToGCPartyLeaveResponse_k_eInMatchMaking CMsgClientToGCPartyLeaveResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCPartyLeaveResponse_EResponse.
var (
	CMsgClientToGCPartyLeaveResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eNotInParty",
		3: "k_eInMatchMaking",
	}
	CMsgClientToGCPartyLeaveResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eNotInParty":    2,
		"k_eInMatchMaking": 3,
	}
)

func (x CMsgClientToGCPartyLeaveResponse_EResponse) Enum() *CMsgClientToGCPartyLeaveResponse_EResponse {
	p := new(CMsgClientToGCPartyLeaveResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyLeaveResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyLeaveResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[7].Descriptor()
}

func (CMsgClientToGCPartyLeaveResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[7]
}

func (x CMsgClientToGCPartyLeaveResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyLeaveResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyLeaveResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyLeaveResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyLeaveResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{19, 0}
}

type CMsgClientToGCPartyJoinResponse_EResponse int32

const (
	CMsgClientToGCPartyJoinResponse_k_eInternalError          CMsgClientToGCPartyJoinResponse_EResponse = 0
	CMsgClientToGCPartyJoinResponse_k_eSuccess                CMsgClientToGCPartyJoinResponse_EResponse = 1
	CMsgClientToGCPartyJoinResponse_k_eAlreadyInParty         CMsgClientToGCPartyJoinResponse_EResponse = 2
	CMsgClientToGCPartyJoinResponse_k_eDisabled               CMsgClientToGCPartyJoinResponse_EResponse = 3
	CMsgClientToGCPartyJoinResponse_k_eInvalidPartyID         CMsgClientToGCPartyJoinResponse_EResponse = 4
	CMsgClientToGCPartyJoinResponse_k_eInvalidPermissions     CMsgClientToGCPartyJoinResponse_EResponse = 5
	CMsgClientToGCPartyJoinResponse_k_eInvalidVersion         CMsgClientToGCPartyJoinResponse_EResponse = 6
	CMsgClientToGCPartyJoinResponse_k_eNoRegionPings          CMsgClientToGCPartyJoinResponse_EResponse = 7
	CMsgClientToGCPartyJoinResponse_k_eTooBusy                CMsgClientToGCPartyJoinResponse_EResponse = 8
	CMsgClientToGCPartyJoinResponse_k_eInvalidCode            CMsgClientToGCPartyJoinResponse_EResponse = 9
	CMsgClientToGCPartyJoinResponse_k_eRateLimited            CMsgClientToGCPartyJoinResponse_EResponse = 10
	CMsgClientToGCPartyJoinResponse_k_eRegionInfoNotProvided  CMsgClientToGCPartyJoinResponse_EResponse = 11
	CMsgClientToGCPartyJoinResponse_k_eDurationControlBlocked CMsgClientToGCPartyJoinResponse_EResponse = 12
)

// Enum value maps for CMsgClientToGCPartyJoinResponse_EResponse.
var (
	CMsgClientToGCPartyJoinResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eAlreadyInParty",
		3:  "k_eDisabled",
		4:  "k_eInvalidPartyID",
		5:  "k_eInvalidPermissions",
		6:  "k_eInvalidVersion",
		7:  "k_eNoRegionPings",
		8:  "k_eTooBusy",
		9:  "k_eInvalidCode",
		10: "k_eRateLimited",
		11: "k_eRegionInfoNotProvided",
		12: "k_eDurationControlBlocked",
	}
	CMsgClientToGCPartyJoinResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eAlreadyInParty":         2,
		"k_eDisabled":               3,
		"k_eInvalidPartyID":         4,
		"k_eInvalidPermissions":     5,
		"k_eInvalidVersion":         6,
		"k_eNoRegionPings":          7,
		"k_eTooBusy":                8,
		"k_eInvalidCode":            9,
		"k_eRateLimited":            10,
		"k_eRegionInfoNotProvided":  11,
		"k_eDurationControlBlocked": 12,
	}
)

func (x CMsgClientToGCPartyJoinResponse_EResponse) Enum() *CMsgClientToGCPartyJoinResponse_EResponse {
	p := new(CMsgClientToGCPartyJoinResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyJoinResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyJoinResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[8].Descriptor()
}

func (CMsgClientToGCPartyJoinResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[8]
}

func (x CMsgClientToGCPartyJoinResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyJoinResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyJoinResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyJoinResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyJoinResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{21, 0}
}

type CMsgClientToGCPartyAction_EAction int32

const (
	CMsgClientToGCPartyAction_k_eKickUser         CMsgClientToGCPartyAction_EAction = 1
	CMsgClientToGCPartyAction_k_eCancelInvite     CMsgClientToGCPartyAction_EAction = 2
	CMsgClientToGCPartyAction_k_eCancelFindMatch  CMsgClientToGCPartyAction_EAction = 3
	CMsgClientToGCPartyAction_k_eSetReady         CMsgClientToGCPartyAction_EAction = 4
	CMsgClientToGCPartyAction_k_eSetPlayerType    CMsgClientToGCPartyAction_EAction = 5
	CMsgClientToGCPartyAction_k_eSetBotDifficulty CMsgClientToGCPartyAction_EAction = 6
	CMsgClientToGCPartyAction_k_eEnablePartyCode  CMsgClientToGCPartyAction_EAction = 7
	CMsgClientToGCPartyAction_k_eSetMemberTeam    CMsgClientToGCPartyAction_EAction = 8
)

// Enum value maps for CMsgClientToGCPartyAction_EAction.
var (
	CMsgClientToGCPartyAction_EAction_name = map[int32]string{
		1: "k_eKickUser",
		2: "k_eCancelInvite",
		3: "k_eCancelFindMatch",
		4: "k_eSetReady",
		5: "k_eSetPlayerType",
		6: "k_eSetBotDifficulty",
		7: "k_eEnablePartyCode",
		8: "k_eSetMemberTeam",
	}
	CMsgClientToGCPartyAction_EAction_value = map[string]int32{
		"k_eKickUser":         1,
		"k_eCancelInvite":     2,
		"k_eCancelFindMatch":  3,
		"k_eSetReady":         4,
		"k_eSetPlayerType":    5,
		"k_eSetBotDifficulty": 6,
		"k_eEnablePartyCode":  7,
		"k_eSetMemberTeam":    8,
	}
)

func (x CMsgClientToGCPartyAction_EAction) Enum() *CMsgClientToGCPartyAction_EAction {
	p := new(CMsgClientToGCPartyAction_EAction)
	*p = x
	return p
}

func (x CMsgClientToGCPartyAction_EAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyAction_EAction) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[9].Descriptor()
}

func (CMsgClientToGCPartyAction_EAction) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[9]
}

func (x CMsgClientToGCPartyAction_EAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyAction_EAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyAction_EAction(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyAction_EAction.Descriptor instead.
func (CMsgClientToGCPartyAction_EAction) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{22, 0}
}

type CMsgClientToGCPartyActionResponse_EResponse int32

const (
	CMsgClientToGCPartyActionResponse_k_eInternalError      CMsgClientToGCPartyActionResponse_EResponse = 0
	CMsgClientToGCPartyActionResponse_k_eSuccess            CMsgClientToGCPartyActionResponse_EResponse = 1
	CMsgClientToGCPartyActionResponse_k_eInvalidPartyID     CMsgClientToGCPartyActionResponse_EResponse = 2
	CMsgClientToGCPartyActionResponse_k_eInvalidPermissions CMsgClientToGCPartyActionResponse_EResponse = 3
	CMsgClientToGCPartyActionResponse_k_eInvalidTarget      CMsgClientToGCPartyActionResponse_EResponse = 4
	CMsgClientToGCPartyActionResponse_k_eInvalidValue       CMsgClientToGCPartyActionResponse_EResponse = 5
	CMsgClientToGCPartyActionResponse_k_eInMatchMaking      CMsgClientToGCPartyActionResponse_EResponse = 6
	CMsgClientToGCPartyActionResponse_k_eInMatch            CMsgClientToGCPartyActionResponse_EResponse = 7
	CMsgClientToGCPartyActionResponse_k_eDisabled           CMsgClientToGCPartyActionResponse_EResponse = 8
	CMsgClientToGCPartyActionResponse_k_eTooBusy            CMsgClientToGCPartyActionResponse_EResponse = 9
	CMsgClientToGCPartyActionResponse_k_eRateLimited        CMsgClientToGCPartyActionResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCPartyActionResponse_EResponse.
var (
	CMsgClientToGCPartyActionResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eInvalidPartyID",
		3:  "k_eInvalidPermissions",
		4:  "k_eInvalidTarget",
		5:  "k_eInvalidValue",
		6:  "k_eInMatchMaking",
		7:  "k_eInMatch",
		8:  "k_eDisabled",
		9:  "k_eTooBusy",
		10: "k_eRateLimited",
	}
	CMsgClientToGCPartyActionResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eInvalidPartyID":     2,
		"k_eInvalidPermissions": 3,
		"k_eInvalidTarget":      4,
		"k_eInvalidValue":       5,
		"k_eInMatchMaking":      6,
		"k_eInMatch":            7,
		"k_eDisabled":           8,
		"k_eTooBusy":            9,
		"k_eRateLimited":        10,
	}
)

func (x CMsgClientToGCPartyActionResponse_EResponse) Enum() *CMsgClientToGCPartyActionResponse_EResponse {
	p := new(CMsgClientToGCPartyActionResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyActionResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyActionResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCPartyActionResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[10]
}

func (x CMsgClientToGCPartyActionResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyActionResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyActionResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyActionResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyActionResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{23, 0}
}

type CMsgClientToGCPartyStartMatchResponse_EResponse int32

const (
	CMsgClientToGCPartyStartMatchResponse_k_eInternalError               CMsgClientToGCPartyStartMatchResponse_EResponse = 0
	CMsgClientToGCPartyStartMatchResponse_k_eSuccess                     CMsgClientToGCPartyStartMatchResponse_EResponse = 1
	CMsgClientToGCPartyStartMatchResponse_k_eDisabled                    CMsgClientToGCPartyStartMatchResponse_EResponse = 2
	CMsgClientToGCPartyStartMatchResponse_k_eInvalidPartyID              CMsgClientToGCPartyStartMatchResponse_EResponse = 3
	CMsgClientToGCPartyStartMatchResponse_k_eInvalidPermissions          CMsgClientToGCPartyStartMatchResponse_EResponse = 4
	CMsgClientToGCPartyStartMatchResponse_k_eTooBusy                     CMsgClientToGCPartyStartMatchResponse_EResponse = 5
	CMsgClientToGCPartyStartMatchResponse_k_eInMatchmaking               CMsgClientToGCPartyStartMatchResponse_EResponse = 6
	CMsgClientToGCPartyStartMatchResponse_k_eInMatch                     CMsgClientToGCPartyStartMatchResponse_EResponse = 7
	CMsgClientToGCPartyStartMatchResponse_k_eInvalidVersion              CMsgClientToGCPartyStartMatchResponse_EResponse = 10
	CMsgClientToGCPartyStartMatchResponse_k_ePlayersNotReady             CMsgClientToGCPartyStartMatchResponse_EResponse = 11
	CMsgClientToGCPartyStartMatchResponse_k_eCannotSelectRegion          CMsgClientToGCPartyStartMatchResponse_EResponse = 12
	CMsgClientToGCPartyStartMatchResponse_k_eNotAllPlayersAvailable      CMsgClientToGCPartyStartMatchResponse_EResponse = 13
	CMsgClientToGCPartyStartMatchResponse_k_eTooManyPlayersForMM         CMsgClientToGCPartyStartMatchResponse_EResponse = 14
	CMsgClientToGCPartyStartMatchResponse_k_eTooManyPlayersForPrivate    CMsgClientToGCPartyStartMatchResponse_EResponse = 15
	CMsgClientToGCPartyStartMatchResponse_k_eTooManySpectatorsForMM      CMsgClientToGCPartyStartMatchResponse_EResponse = 16
	CMsgClientToGCPartyStartMatchResponse_k_eTooManySpectatorsForPrivate CMsgClientToGCPartyStartMatchResponse_EResponse = 17
	CMsgClientToGCPartyStartMatchResponse_k_eTooFewPlayersForMM          CMsgClientToGCPartyStartMatchResponse_EResponse = 18
	CMsgClientToGCPartyStartMatchResponse_k_eTooFewPlayersForPrivate     CMsgClientToGCPartyStartMatchResponse_EResponse = 19
	CMsgClientToGCPartyStartMatchResponse_k_eMismatchedVersions          CMsgClientToGCPartyStartMatchResponse_EResponse = 20
	CMsgClientToGCPartyStartMatchResponse_k_eInvalidPartyMatchMode       CMsgClientToGCPartyStartMatchResponse_EResponse = 21
	CMsgClientToGCPartyStartMatchResponse_k_eNotAllPlayersCanPlayRanked  CMsgClientToGCPartyStartMatchResponse_EResponse = 22
	CMsgClientToGCPartyStartMatchResponse_k_ePlayerBannedFromMode        CMsgClientToGCPartyStartMatchResponse_EResponse = 23
	CMsgClientToGCPartyStartMatchResponse_k_eTooManyPlayersOnTeam        CMsgClientToGCPartyStartMatchResponse_EResponse = 24
	CMsgClientToGCPartyStartMatchResponse_k_eUnableToFillTeam            CMsgClientToGCPartyStartMatchResponse_EResponse = 25
	CMsgClientToGCPartyStartMatchResponse_k_eInvalidTeam                 CMsgClientToGCPartyStartMatchResponse_EResponse = 26
)

// Enum value maps for CMsgClientToGCPartyStartMatchResponse_EResponse.
var (
	CMsgClientToGCPartyStartMatchResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eInvalidPartyID",
		4:  "k_eInvalidPermissions",
		5:  "k_eTooBusy",
		6:  "k_eInMatchmaking",
		7:  "k_eInMatch",
		10: "k_eInvalidVersion",
		11: "k_ePlayersNotReady",
		12: "k_eCannotSelectRegion",
		13: "k_eNotAllPlayersAvailable",
		14: "k_eTooManyPlayersForMM",
		15: "k_eTooManyPlayersForPrivate",
		16: "k_eTooManySpectatorsForMM",
		17: "k_eTooManySpectatorsForPrivate",
		18: "k_eTooFewPlayersForMM",
		19: "k_eTooFewPlayersForPrivate",
		20: "k_eMismatchedVersions",
		21: "k_eInvalidPartyMatchMode",
		22: "k_eNotAllPlayersCanPlayRanked",
		23: "k_ePlayerBannedFromMode",
		24: "k_eTooManyPlayersOnTeam",
		25: "k_eUnableToFillTeam",
		26: "k_eInvalidTeam",
	}
	CMsgClientToGCPartyStartMatchResponse_EResponse_value = map[string]int32{
		"k_eInternalError":               0,
		"k_eSuccess":                     1,
		"k_eDisabled":                    2,
		"k_eInvalidPartyID":              3,
		"k_eInvalidPermissions":          4,
		"k_eTooBusy":                     5,
		"k_eInMatchmaking":               6,
		"k_eInMatch":                     7,
		"k_eInvalidVersion":              10,
		"k_ePlayersNotReady":             11,
		"k_eCannotSelectRegion":          12,
		"k_eNotAllPlayersAvailable":      13,
		"k_eTooManyPlayersForMM":         14,
		"k_eTooManyPlayersForPrivate":    15,
		"k_eTooManySpectatorsForMM":      16,
		"k_eTooManySpectatorsForPrivate": 17,
		"k_eTooFewPlayersForMM":          18,
		"k_eTooFewPlayersForPrivate":     19,
		"k_eMismatchedVersions":          20,
		"k_eInvalidPartyMatchMode":       21,
		"k_eNotAllPlayersCanPlayRanked":  22,
		"k_ePlayerBannedFromMode":        23,
		"k_eTooManyPlayersOnTeam":        24,
		"k_eUnableToFillTeam":            25,
		"k_eInvalidTeam":                 26,
	}
)

func (x CMsgClientToGCPartyStartMatchResponse_EResponse) Enum() *CMsgClientToGCPartyStartMatchResponse_EResponse {
	p := new(CMsgClientToGCPartyStartMatchResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyStartMatchResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyStartMatchResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[11].Descriptor()
}

func (CMsgClientToGCPartyStartMatchResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[11]
}

func (x CMsgClientToGCPartyStartMatchResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyStartMatchResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyStartMatchResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyStartMatchResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyStartMatchResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{25, 0}
}

type CMsgClientToGCPartyInviteUserResponse_EResponse int32

const (
	CMsgClientToGCPartyInviteUserResponse_k_eInternalError      CMsgClientToGCPartyInviteUserResponse_EResponse = 0
	CMsgClientToGCPartyInviteUserResponse_k_eSuccess            CMsgClientToGCPartyInviteUserResponse_EResponse = 1
	CMsgClientToGCPartyInviteUserResponse_k_eAlreadyInvited     CMsgClientToGCPartyInviteUserResponse_EResponse = 2
	CMsgClientToGCPartyInviteUserResponse_k_eInvalidPermissions CMsgClientToGCPartyInviteUserResponse_EResponse = 3
	CMsgClientToGCPartyInviteUserResponse_k_eInvalidPartyID     CMsgClientToGCPartyInviteUserResponse_EResponse = 4
	CMsgClientToGCPartyInviteUserResponse_k_eDisabled           CMsgClientToGCPartyInviteUserResponse_EResponse = 5
	CMsgClientToGCPartyInviteUserResponse_k_eTooManyInvites     CMsgClientToGCPartyInviteUserResponse_EResponse = 6
	CMsgClientToGCPartyInviteUserResponse_k_eNotFriends         CMsgClientToGCPartyInviteUserResponse_EResponse = 7
	CMsgClientToGCPartyInviteUserResponse_k_eTooBusy            CMsgClientToGCPartyInviteUserResponse_EResponse = 8
	CMsgClientToGCPartyInviteUserResponse_k_eRateLimited        CMsgClientToGCPartyInviteUserResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCPartyInviteUserResponse_EResponse.
var (
	CMsgClientToGCPartyInviteUserResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eAlreadyInvited",
		3: "k_eInvalidPermissions",
		4: "k_eInvalidPartyID",
		5: "k_eDisabled",
		6: "k_eTooManyInvites",
		7: "k_eNotFriends",
		8: "k_eTooBusy",
		9: "k_eRateLimited",
	}
	CMsgClientToGCPartyInviteUserResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eAlreadyInvited":     2,
		"k_eInvalidPermissions": 3,
		"k_eInvalidPartyID":     4,
		"k_eDisabled":           5,
		"k_eTooManyInvites":     6,
		"k_eNotFriends":         7,
		"k_eTooBusy":            8,
		"k_eRateLimited":        9,
	}
)

func (x CMsgClientToGCPartyInviteUserResponse_EResponse) Enum() *CMsgClientToGCPartyInviteUserResponse_EResponse {
	p := new(CMsgClientToGCPartyInviteUserResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartyInviteUserResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartyInviteUserResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[12].Descriptor()
}

func (CMsgClientToGCPartyInviteUserResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[12]
}

func (x CMsgClientToGCPartyInviteUserResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartyInviteUserResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartyInviteUserResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartyInviteUserResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartyInviteUserResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{27, 0}
}

type CMsgGCToClientPartyEvent_EEvent int32

const (
	CMsgGCToClientPartyEvent_k_ePlayerKicked                      CMsgGCToClientPartyEvent_EEvent = 1
	CMsgGCToClientPartyEvent_k_eJoinedParty                       CMsgGCToClientPartyEvent_EEvent = 3
	CMsgGCToClientPartyEvent_k_eMatchCompleted                    CMsgGCToClientPartyEvent_EEvent = 4
	CMsgGCToClientPartyEvent_k_eMatchMakingStopped_User           CMsgGCToClientPartyEvent_EEvent = 5
	CMsgGCToClientPartyEvent_k_eMatchMakingStopped_Version        CMsgGCToClientPartyEvent_EEvent = 6
	CMsgGCToClientPartyEvent_k_eMatchMakingStopped_NoServerRegion CMsgGCToClientPartyEvent_EEvent = 7
	CMsgGCToClientPartyEvent_k_eLeftParty                         CMsgGCToClientPartyEvent_EEvent = 8
	CMsgGCToClientPartyEvent_k_eDeclinedInvite                    CMsgGCToClientPartyEvent_EEvent = 9
	CMsgGCToClientPartyEvent_k_eMatchMakingStopped_FailedOther    CMsgGCToClientPartyEvent_EEvent = 10
)

// Enum value maps for CMsgGCToClientPartyEvent_EEvent.
var (
	CMsgGCToClientPartyEvent_EEvent_name = map[int32]string{
		1:  "k_ePlayerKicked",
		3:  "k_eJoinedParty",
		4:  "k_eMatchCompleted",
		5:  "k_eMatchMakingStopped_User",
		6:  "k_eMatchMakingStopped_Version",
		7:  "k_eMatchMakingStopped_NoServerRegion",
		8:  "k_eLeftParty",
		9:  "k_eDeclinedInvite",
		10: "k_eMatchMakingStopped_FailedOther",
	}
	CMsgGCToClientPartyEvent_EEvent_value = map[string]int32{
		"k_ePlayerKicked":                      1,
		"k_eJoinedParty":                       3,
		"k_eMatchCompleted":                    4,
		"k_eMatchMakingStopped_User":           5,
		"k_eMatchMakingStopped_Version":        6,
		"k_eMatchMakingStopped_NoServerRegion": 7,
		"k_eLeftParty":                         8,
		"k_eDeclinedInvite":                    9,
		"k_eMatchMakingStopped_FailedOther":    10,
	}
)

func (x CMsgGCToClientPartyEvent_EEvent) Enum() *CMsgGCToClientPartyEvent_EEvent {
	p := new(CMsgGCToClientPartyEvent_EEvent)
	*p = x
	return p
}

func (x CMsgGCToClientPartyEvent_EEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientPartyEvent_EEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[13].Descriptor()
}

func (CMsgGCToClientPartyEvent_EEvent) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[13]
}

func (x CMsgGCToClientPartyEvent_EEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientPartyEvent_EEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientPartyEvent_EEvent(num)
	return nil
}

// Deprecated: Use CMsgGCToClientPartyEvent_EEvent.Descriptor instead.
func (CMsgGCToClientPartyEvent_EEvent) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{28, 0}
}

type CMsgClientToGCEventRequestInfoSyncResponse_EResponse int32

const (
	CMsgClientToGCEventRequestInfoSyncResponse_k_eInternalError      CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 0
	CMsgClientToGCEventRequestInfoSyncResponse_k_eSuccess            CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 1
	CMsgClientToGCEventRequestInfoSyncResponse_k_eInvalidEventID     CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 3
	CMsgClientToGCEventRequestInfoSyncResponse_k_eInvalidPermissions CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 4
	CMsgClientToGCEventRequestInfoSyncResponse_k_eRateLimited        CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 5
	CMsgClientToGCEventRequestInfoSyncResponse_k_eDisabled           CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 6
	CMsgClientToGCEventRequestInfoSyncResponse_k_eTooBusy            CMsgClientToGCEventRequestInfoSyncResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCEventRequestInfoSyncResponse_EResponse.
var (
	CMsgClientToGCEventRequestInfoSyncResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		3: "k_eInvalidEventID",
		4: "k_eInvalidPermissions",
		5: "k_eRateLimited",
		6: "k_eDisabled",
		7: "k_eTooBusy",
	}
	CMsgClientToGCEventRequestInfoSyncResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eInvalidEventID":     3,
		"k_eInvalidPermissions": 4,
		"k_eRateLimited":        5,
		"k_eDisabled":           6,
		"k_eTooBusy":            7,
	}
)

func (x CMsgClientToGCEventRequestInfoSyncResponse_EResponse) Enum() *CMsgClientToGCEventRequestInfoSyncResponse_EResponse {
	p := new(CMsgClientToGCEventRequestInfoSyncResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventRequestInfoSyncResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventRequestInfoSyncResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[14].Descriptor()
}

func (CMsgClientToGCEventRequestInfoSyncResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[14]
}

func (x CMsgClientToGCEventRequestInfoSyncResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventRequestInfoSyncResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventRequestInfoSyncResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventRequestInfoSyncResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventRequestInfoSyncResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{45, 0}
}

type CMsgClientToGCEventClaimResponse_EResponse int32

const (
	CMsgClientToGCEventClaimResponse_k_eInternalError         CMsgClientToGCEventClaimResponse_EResponse = 0
	CMsgClientToGCEventClaimResponse_k_eSuccess               CMsgClientToGCEventClaimResponse_EResponse = 1
	CMsgClientToGCEventClaimResponse_k_eStartingValueMismatch CMsgClientToGCEventClaimResponse_EResponse = 2
	CMsgClientToGCEventClaimResponse_k_eInvalidEventID        CMsgClientToGCEventClaimResponse_EResponse = 3
	CMsgClientToGCEventClaimResponse_k_eInvalidClaimID        CMsgClientToGCEventClaimResponse_EResponse = 4
	CMsgClientToGCEventClaimResponse_k_eRequirementsNotMet    CMsgClientToGCEventClaimResponse_EResponse = 5
	CMsgClientToGCEventClaimResponse_k_eDisabled              CMsgClientToGCEventClaimResponse_EResponse = 6
	CMsgClientToGCEventClaimResponse_k_eTooBusy               CMsgClientToGCEventClaimResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCEventClaimResponse_EResponse.
var (
	CMsgClientToGCEventClaimResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eStartingValueMismatch",
		3: "k_eInvalidEventID",
		4: "k_eInvalidClaimID",
		5: "k_eRequirementsNotMet",
		6: "k_eDisabled",
		7: "k_eTooBusy",
	}
	CMsgClientToGCEventClaimResponse_EResponse_value = map[string]int32{
		"k_eInternalError":         0,
		"k_eSuccess":               1,
		"k_eStartingValueMismatch": 2,
		"k_eInvalidEventID":        3,
		"k_eInvalidClaimID":        4,
		"k_eRequirementsNotMet":    5,
		"k_eDisabled":              6,
		"k_eTooBusy":               7,
	}
)

func (x CMsgClientToGCEventClaimResponse_EResponse) Enum() *CMsgClientToGCEventClaimResponse_EResponse {
	p := new(CMsgClientToGCEventClaimResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventClaimResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventClaimResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[15].Descriptor()
}

func (CMsgClientToGCEventClaimResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[15]
}

func (x CMsgClientToGCEventClaimResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventClaimResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventClaimResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventClaimResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventClaimResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{49, 0}
}

type CMsgClientToGCEquipLoadoutResponse_EResponse int32

const (
	CMsgClientToGCEquipLoadoutResponse_k_eInternalError      CMsgClientToGCEquipLoadoutResponse_EResponse = 0
	CMsgClientToGCEquipLoadoutResponse_k_eSuccess            CMsgClientToGCEquipLoadoutResponse_EResponse = 1
	CMsgClientToGCEquipLoadoutResponse_k_eDisabled           CMsgClientToGCEquipLoadoutResponse_EResponse = 2
	CMsgClientToGCEquipLoadoutResponse_k_eTooBusy            CMsgClientToGCEquipLoadoutResponse_EResponse = 3
	CMsgClientToGCEquipLoadoutResponse_k_eInvalidLoadoutSlot CMsgClientToGCEquipLoadoutResponse_EResponse = 4
	CMsgClientToGCEquipLoadoutResponse_k_eInvalidItem        CMsgClientToGCEquipLoadoutResponse_EResponse = 5
	CMsgClientToGCEquipLoadoutResponse_k_eInvalidItemType    CMsgClientToGCEquipLoadoutResponse_EResponse = 6
	CMsgClientToGCEquipLoadoutResponse_k_eItemExpired        CMsgClientToGCEquipLoadoutResponse_EResponse = 7
	CMsgClientToGCEquipLoadoutResponse_k_eRateLimited        CMsgClientToGCEquipLoadoutResponse_EResponse = 8
	CMsgClientToGCEquipLoadoutResponse_k_eTooManyChanges     CMsgClientToGCEquipLoadoutResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCEquipLoadoutResponse_EResponse.
var (
	CMsgClientToGCEquipLoadoutResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidLoadoutSlot",
		5: "k_eInvalidItem",
		6: "k_eInvalidItemType",
		7: "k_eItemExpired",
		8: "k_eRateLimited",
		9: "k_eTooManyChanges",
	}
	CMsgClientToGCEquipLoadoutResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eTooBusy":            3,
		"k_eInvalidLoadoutSlot": 4,
		"k_eInvalidItem":        5,
		"k_eInvalidItemType":    6,
		"k_eItemExpired":        7,
		"k_eRateLimited":        8,
		"k_eTooManyChanges":     9,
	}
)

func (x CMsgClientToGCEquipLoadoutResponse_EResponse) Enum() *CMsgClientToGCEquipLoadoutResponse_EResponse {
	p := new(CMsgClientToGCEquipLoadoutResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEquipLoadoutResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEquipLoadoutResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[16].Descriptor()
}

func (CMsgClientToGCEquipLoadoutResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[16]
}

func (x CMsgClientToGCEquipLoadoutResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEquipLoadoutResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEquipLoadoutResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEquipLoadoutResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEquipLoadoutResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{51, 0}
}

type CMsgClientToGCSpectateUserResponse_EResponse int32

const (
	CMsgClientToGCSpectateUserResponse_k_eInternalError          CMsgClientToGCSpectateUserResponse_EResponse = 0
	CMsgClientToGCSpectateUserResponse_k_eSuccess                CMsgClientToGCSpectateUserResponse_EResponse = 1
	CMsgClientToGCSpectateUserResponse_k_eDisabled               CMsgClientToGCSpectateUserResponse_EResponse = 2
	CMsgClientToGCSpectateUserResponse_k_eTooBusy                CMsgClientToGCSpectateUserResponse_EResponse = 3
	CMsgClientToGCSpectateUserResponse_k_eRateLimited            CMsgClientToGCSpectateUserResponse_EResponse = 4
	CMsgClientToGCSpectateUserResponse_k_eNotInGame              CMsgClientToGCSpectateUserResponse_EResponse = 5
	CMsgClientToGCSpectateUserResponse_k_eDisabledForGame        CMsgClientToGCSpectateUserResponse_EResponse = 6
	CMsgClientToGCSpectateUserResponse_k_eServerFull             CMsgClientToGCSpectateUserResponse_EResponse = 7
	CMsgClientToGCSpectateUserResponse_k_eNotFriends             CMsgClientToGCSpectateUserResponse_EResponse = 8
	CMsgClientToGCSpectateUserResponse_k_eRegionInfoNotProvided  CMsgClientToGCSpectateUserResponse_EResponse = 9
	CMsgClientToGCSpectateUserResponse_k_eDurationControlBlocked CMsgClientToGCSpectateUserResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCSpectateUserResponse_EResponse.
var (
	CMsgClientToGCSpectateUserResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eRateLimited",
		5:  "k_eNotInGame",
		6:  "k_eDisabledForGame",
		7:  "k_eServerFull",
		8:  "k_eNotFriends",
		9:  "k_eRegionInfoNotProvided",
		10: "k_eDurationControlBlocked",
	}
	CMsgClientToGCSpectateUserResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eDisabled":               2,
		"k_eTooBusy":                3,
		"k_eRateLimited":            4,
		"k_eNotInGame":              5,
		"k_eDisabledForGame":        6,
		"k_eServerFull":             7,
		"k_eNotFriends":             8,
		"k_eRegionInfoNotProvided":  9,
		"k_eDurationControlBlocked": 10,
	}
)

func (x CMsgClientToGCSpectateUserResponse_EResponse) Enum() *CMsgClientToGCSpectateUserResponse_EResponse {
	p := new(CMsgClientToGCSpectateUserResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSpectateUserResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSpectateUserResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[17].Descriptor()
}

func (CMsgClientToGCSpectateUserResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[17]
}

func (x CMsgClientToGCSpectateUserResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSpectateUserResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSpectateUserResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSpectateUserResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSpectateUserResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{53, 0}
}

type CMsgClientToGCRerollChallengeResponse_EResponse int32

const (
	CMsgClientToGCRerollChallengeResponse_k_eInternalError       CMsgClientToGCRerollChallengeResponse_EResponse = 0
	CMsgClientToGCRerollChallengeResponse_k_eSuccess             CMsgClientToGCRerollChallengeResponse_EResponse = 1
	CMsgClientToGCRerollChallengeResponse_k_eDisabled            CMsgClientToGCRerollChallengeResponse_EResponse = 2
	CMsgClientToGCRerollChallengeResponse_k_eTooBusy             CMsgClientToGCRerollChallengeResponse_EResponse = 3
	CMsgClientToGCRerollChallengeResponse_k_eRateLimited         CMsgClientToGCRerollChallengeResponse_EResponse = 4
	CMsgClientToGCRerollChallengeResponse_k_eRerollCooldown      CMsgClientToGCRerollChallengeResponse_EResponse = 5
	CMsgClientToGCRerollChallengeResponse_k_eNotComplete         CMsgClientToGCRerollChallengeResponse_EResponse = 6
	CMsgClientToGCRerollChallengeResponse_k_eCannotReroll        CMsgClientToGCRerollChallengeResponse_EResponse = 7
	CMsgClientToGCRerollChallengeResponse_k_eSequenceMismatch    CMsgClientToGCRerollChallengeResponse_EResponse = 8
	CMsgClientToGCRerollChallengeResponse_k_eRewardsNotClaimed   CMsgClientToGCRerollChallengeResponse_EResponse = 9
	CMsgClientToGCRerollChallengeResponse_k_eEventInactive       CMsgClientToGCRerollChallengeResponse_EResponse = 10
	CMsgClientToGCRerollChallengeResponse_k_eRequiresOwningEvent CMsgClientToGCRerollChallengeResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCRerollChallengeResponse_EResponse.
var (
	CMsgClientToGCRerollChallengeResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eRateLimited",
		5:  "k_eRerollCooldown",
		6:  "k_eNotComplete",
		7:  "k_eCannotReroll",
		8:  "k_eSequenceMismatch",
		9:  "k_eRewardsNotClaimed",
		10: "k_eEventInactive",
		11: "k_eRequiresOwningEvent",
	}
	CMsgClientToGCRerollChallengeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":       0,
		"k_eSuccess":             1,
		"k_eDisabled":            2,
		"k_eTooBusy":             3,
		"k_eRateLimited":         4,
		"k_eRerollCooldown":      5,
		"k_eNotComplete":         6,
		"k_eCannotReroll":        7,
		"k_eSequenceMismatch":    8,
		"k_eRewardsNotClaimed":   9,
		"k_eEventInactive":       10,
		"k_eRequiresOwningEvent": 11,
	}
)

func (x CMsgClientToGCRerollChallengeResponse_EResponse) Enum() *CMsgClientToGCRerollChallengeResponse_EResponse {
	p := new(CMsgClientToGCRerollChallengeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRerollChallengeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRerollChallengeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[18].Descriptor()
}

func (CMsgClientToGCRerollChallengeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[18]
}

func (x CMsgClientToGCRerollChallengeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRerollChallengeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRerollChallengeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRerollChallengeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRerollChallengeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{56, 0}
}

type CMsgClientToGCClaimChallengeRewardResponse_EResponse int32

const (
	CMsgClientToGCClaimChallengeRewardResponse_k_eInternalError    CMsgClientToGCClaimChallengeRewardResponse_EResponse = 0
	CMsgClientToGCClaimChallengeRewardResponse_k_eSuccess          CMsgClientToGCClaimChallengeRewardResponse_EResponse = 1
	CMsgClientToGCClaimChallengeRewardResponse_k_eDisabled         CMsgClientToGCClaimChallengeRewardResponse_EResponse = 2
	CMsgClientToGCClaimChallengeRewardResponse_k_eTooBusy          CMsgClientToGCClaimChallengeRewardResponse_EResponse = 3
	CMsgClientToGCClaimChallengeRewardResponse_k_eRateLimited      CMsgClientToGCClaimChallengeRewardResponse_EResponse = 4
	CMsgClientToGCClaimChallengeRewardResponse_k_eNotComplete      CMsgClientToGCClaimChallengeRewardResponse_EResponse = 5
	CMsgClientToGCClaimChallengeRewardResponse_k_eAlreadyClaimed   CMsgClientToGCClaimChallengeRewardResponse_EResponse = 6
	CMsgClientToGCClaimChallengeRewardResponse_k_eSequenceMismatch CMsgClientToGCClaimChallengeRewardResponse_EResponse = 7
	CMsgClientToGCClaimChallengeRewardResponse_k_eEventInactive    CMsgClientToGCClaimChallengeRewardResponse_EResponse = 8
	CMsgClientToGCClaimChallengeRewardResponse_k_eNoRewards        CMsgClientToGCClaimChallengeRewardResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCClaimChallengeRewardResponse_EResponse.
var (
	CMsgClientToGCClaimChallengeRewardResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
		5: "k_eNotComplete",
		6: "k_eAlreadyClaimed",
		7: "k_eSequenceMismatch",
		8: "k_eEventInactive",
		9: "k_eNoRewards",
	}
	CMsgClientToGCClaimChallengeRewardResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eDisabled":         2,
		"k_eTooBusy":          3,
		"k_eRateLimited":      4,
		"k_eNotComplete":      5,
		"k_eAlreadyClaimed":   6,
		"k_eSequenceMismatch": 7,
		"k_eEventInactive":    8,
		"k_eNoRewards":        9,
	}
)

func (x CMsgClientToGCClaimChallengeRewardResponse_EResponse) Enum() *CMsgClientToGCClaimChallengeRewardResponse_EResponse {
	p := new(CMsgClientToGCClaimChallengeRewardResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCClaimChallengeRewardResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCClaimChallengeRewardResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[19].Descriptor()
}

func (CMsgClientToGCClaimChallengeRewardResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[19]
}

func (x CMsgClientToGCClaimChallengeRewardResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCClaimChallengeRewardResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCClaimChallengeRewardResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCClaimChallengeRewardResponse_EResponse.Descriptor instead.
func (CMsgClientToGCClaimChallengeRewardResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{58, 0}
}

type CMsgClientToGCGetFriendCodesResponse_EResponse int32

const (
	CMsgClientToGCGetFriendCodesResponse_k_eInternalError CMsgClientToGCGetFriendCodesResponse_EResponse = 0
	CMsgClientToGCGetFriendCodesResponse_k_eSuccess       CMsgClientToGCGetFriendCodesResponse_EResponse = 1
	CMsgClientToGCGetFriendCodesResponse_k_eDisabled      CMsgClientToGCGetFriendCodesResponse_EResponse = 2
	CMsgClientToGCGetFriendCodesResponse_k_eTooBusy       CMsgClientToGCGetFriendCodesResponse_EResponse = 3
	CMsgClientToGCGetFriendCodesResponse_k_eRateLimited   CMsgClientToGCGetFriendCodesResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetFriendCodesResponse_EResponse.
var (
	CMsgClientToGCGetFriendCodesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
	}
	CMsgClientToGCGetFriendCodesResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
	}
)

func (x CMsgClientToGCGetFriendCodesResponse_EResponse) Enum() *CMsgClientToGCGetFriendCodesResponse_EResponse {
	p := new(CMsgClientToGCGetFriendCodesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetFriendCodesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetFriendCodesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[20].Descriptor()
}

func (CMsgClientToGCGetFriendCodesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[20]
}

func (x CMsgClientToGCGetFriendCodesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetFriendCodesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetFriendCodesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetFriendCodesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetFriendCodesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{60, 0}
}

type CMsgClientToGCCreateFriendCodeResponse_EResponse int32

const (
	CMsgClientToGCCreateFriendCodeResponse_k_eInternalError CMsgClientToGCCreateFriendCodeResponse_EResponse = 0
	CMsgClientToGCCreateFriendCodeResponse_k_eSuccess       CMsgClientToGCCreateFriendCodeResponse_EResponse = 1
	CMsgClientToGCCreateFriendCodeResponse_k_eDisabled      CMsgClientToGCCreateFriendCodeResponse_EResponse = 2
	CMsgClientToGCCreateFriendCodeResponse_k_eTooBusy       CMsgClientToGCCreateFriendCodeResponse_EResponse = 3
	CMsgClientToGCCreateFriendCodeResponse_k_eRateLimited   CMsgClientToGCCreateFriendCodeResponse_EResponse = 4
	CMsgClientToGCCreateFriendCodeResponse_k_eTooManyCodes  CMsgClientToGCCreateFriendCodeResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCCreateFriendCodeResponse_EResponse.
var (
	CMsgClientToGCCreateFriendCodeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
		5: "k_eTooManyCodes",
	}
	CMsgClientToGCCreateFriendCodeResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
		"k_eTooManyCodes":  5,
	}
)

func (x CMsgClientToGCCreateFriendCodeResponse_EResponse) Enum() *CMsgClientToGCCreateFriendCodeResponse_EResponse {
	p := new(CMsgClientToGCCreateFriendCodeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCCreateFriendCodeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreateFriendCodeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[21].Descriptor()
}

func (CMsgClientToGCCreateFriendCodeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[21]
}

func (x CMsgClientToGCCreateFriendCodeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreateFriendCodeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreateFriendCodeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreateFriendCodeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCCreateFriendCodeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{62, 0}
}

type CMsgClientToGCCheckFriendCodeResponse_EResponse int32

const (
	CMsgClientToGCCheckFriendCodeResponse_k_eInternalError           CMsgClientToGCCheckFriendCodeResponse_EResponse = 0
	CMsgClientToGCCheckFriendCodeResponse_k_eSuccess                 CMsgClientToGCCheckFriendCodeResponse_EResponse = 1
	CMsgClientToGCCheckFriendCodeResponse_k_eDisabled                CMsgClientToGCCheckFriendCodeResponse_EResponse = 2
	CMsgClientToGCCheckFriendCodeResponse_k_eTooBusy                 CMsgClientToGCCheckFriendCodeResponse_EResponse = 3
	CMsgClientToGCCheckFriendCodeResponse_k_eRateLimited             CMsgClientToGCCheckFriendCodeResponse_EResponse = 4
	CMsgClientToGCCheckFriendCodeResponse_k_eInvalidKey              CMsgClientToGCCheckFriendCodeResponse_EResponse = 5
	CMsgClientToGCCheckFriendCodeResponse_k_eKeyExpired              CMsgClientToGCCheckFriendCodeResponse_EResponse = 6
	CMsgClientToGCCheckFriendCodeResponse_k_eKeyConsumed             CMsgClientToGCCheckFriendCodeResponse_EResponse = 7
	CMsgClientToGCCheckFriendCodeResponse_k_eAlreadyFriends          CMsgClientToGCCheckFriendCodeResponse_EResponse = 8
	CMsgClientToGCCheckFriendCodeResponse_k_eTargetHasTooManyFriends CMsgClientToGCCheckFriendCodeResponse_EResponse = 9
	CMsgClientToGCCheckFriendCodeResponse_k_eHaveTooManyFriends      CMsgClientToGCCheckFriendCodeResponse_EResponse = 10
	CMsgClientToGCCheckFriendCodeResponse_k_eBlocked                 CMsgClientToGCCheckFriendCodeResponse_EResponse = 11
	CMsgClientToGCCheckFriendCodeResponse_k_eIgnored                 CMsgClientToGCCheckFriendCodeResponse_EResponse = 12
)

// Enum value maps for CMsgClientToGCCheckFriendCodeResponse_EResponse.
var (
	CMsgClientToGCCheckFriendCodeResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eRateLimited",
		5:  "k_eInvalidKey",
		6:  "k_eKeyExpired",
		7:  "k_eKeyConsumed",
		8:  "k_eAlreadyFriends",
		9:  "k_eTargetHasTooManyFriends",
		10: "k_eHaveTooManyFriends",
		11: "k_eBlocked",
		12: "k_eIgnored",
	}
	CMsgClientToGCCheckFriendCodeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eDisabled":                2,
		"k_eTooBusy":                 3,
		"k_eRateLimited":             4,
		"k_eInvalidKey":              5,
		"k_eKeyExpired":              6,
		"k_eKeyConsumed":             7,
		"k_eAlreadyFriends":          8,
		"k_eTargetHasTooManyFriends": 9,
		"k_eHaveTooManyFriends":      10,
		"k_eBlocked":                 11,
		"k_eIgnored":                 12,
	}
)

func (x CMsgClientToGCCheckFriendCodeResponse_EResponse) Enum() *CMsgClientToGCCheckFriendCodeResponse_EResponse {
	p := new(CMsgClientToGCCheckFriendCodeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCCheckFriendCodeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCheckFriendCodeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[22].Descriptor()
}

func (CMsgClientToGCCheckFriendCodeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[22]
}

func (x CMsgClientToGCCheckFriendCodeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCheckFriendCodeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCheckFriendCodeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCheckFriendCodeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCCheckFriendCodeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{64, 0}
}

type CMsgClientToGCRevokeFriendCodeResponse_EResponse int32

const (
	CMsgClientToGCRevokeFriendCodeResponse_k_eInternalError CMsgClientToGCRevokeFriendCodeResponse_EResponse = 0
	CMsgClientToGCRevokeFriendCodeResponse_k_eSuccess       CMsgClientToGCRevokeFriendCodeResponse_EResponse = 1
	CMsgClientToGCRevokeFriendCodeResponse_k_eDisabled      CMsgClientToGCRevokeFriendCodeResponse_EResponse = 2
	CMsgClientToGCRevokeFriendCodeResponse_k_eTooBusy       CMsgClientToGCRevokeFriendCodeResponse_EResponse = 3
	CMsgClientToGCRevokeFriendCodeResponse_k_eRateLimited   CMsgClientToGCRevokeFriendCodeResponse_EResponse = 4
	CMsgClientToGCRevokeFriendCodeResponse_k_eInvalidKey    CMsgClientToGCRevokeFriendCodeResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCRevokeFriendCodeResponse_EResponse.
var (
	CMsgClientToGCRevokeFriendCodeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
		5: "k_eInvalidKey",
	}
	CMsgClientToGCRevokeFriendCodeResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
		"k_eInvalidKey":    5,
	}
)

func (x CMsgClientToGCRevokeFriendCodeResponse_EResponse) Enum() *CMsgClientToGCRevokeFriendCodeResponse_EResponse {
	p := new(CMsgClientToGCRevokeFriendCodeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRevokeFriendCodeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRevokeFriendCodeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[23].Descriptor()
}

func (CMsgClientToGCRevokeFriendCodeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[23]
}

func (x CMsgClientToGCRevokeFriendCodeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRevokeFriendCodeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRevokeFriendCodeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRevokeFriendCodeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRevokeFriendCodeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{68, 0}
}

type CMsgClientToGCDevEventOperation_EOperation int32

const (
	CMsgClientToGCDevEventOperation_k_eOp_Reset             CMsgClientToGCDevEventOperation_EOperation = 0
	CMsgClientToGCDevEventOperation_k_eOp_GrantCurrency     CMsgClientToGCDevEventOperation_EOperation = 1
	CMsgClientToGCDevEventOperation_k_eOp_GrantChallenge    CMsgClientToGCDevEventOperation_EOperation = 2
	CMsgClientToGCDevEventOperation_k_eOp_RerollCooldown    CMsgClientToGCDevEventOperation_EOperation = 3
	CMsgClientToGCDevEventOperation_k_eOp_SetCurrencyLevel  CMsgClientToGCDevEventOperation_EOperation = 4
	CMsgClientToGCDevEventOperation_k_eOp_SetCurrencyValue  CMsgClientToGCDevEventOperation_EOperation = 5
	CMsgClientToGCDevEventOperation_k_eOp_SetChallengeValue CMsgClientToGCDevEventOperation_EOperation = 6
	CMsgClientToGCDevEventOperation_k_eOp_GrantOwnership    CMsgClientToGCDevEventOperation_EOperation = 7
	CMsgClientToGCDevEventOperation_k_eOp_GrantVirtualItem  CMsgClientToGCDevEventOperation_EOperation = 8
	CMsgClientToGCDevEventOperation_k_eOp_RevokeVirtualItem CMsgClientToGCDevEventOperation_EOperation = 9
	CMsgClientToGCDevEventOperation_k_eOp_SetChallenge      CMsgClientToGCDevEventOperation_EOperation = 10
)

// Enum value maps for CMsgClientToGCDevEventOperation_EOperation.
var (
	CMsgClientToGCDevEventOperation_EOperation_name = map[int32]string{
		0:  "k_eOp_Reset",
		1:  "k_eOp_GrantCurrency",
		2:  "k_eOp_GrantChallenge",
		3:  "k_eOp_RerollCooldown",
		4:  "k_eOp_SetCurrencyLevel",
		5:  "k_eOp_SetCurrencyValue",
		6:  "k_eOp_SetChallengeValue",
		7:  "k_eOp_GrantOwnership",
		8:  "k_eOp_GrantVirtualItem",
		9:  "k_eOp_RevokeVirtualItem",
		10: "k_eOp_SetChallenge",
	}
	CMsgClientToGCDevEventOperation_EOperation_value = map[string]int32{
		"k_eOp_Reset":             0,
		"k_eOp_GrantCurrency":     1,
		"k_eOp_GrantChallenge":    2,
		"k_eOp_RerollCooldown":    3,
		"k_eOp_SetCurrencyLevel":  4,
		"k_eOp_SetCurrencyValue":  5,
		"k_eOp_SetChallengeValue": 6,
		"k_eOp_GrantOwnership":    7,
		"k_eOp_GrantVirtualItem":  8,
		"k_eOp_RevokeVirtualItem": 9,
		"k_eOp_SetChallenge":      10,
	}
)

func (x CMsgClientToGCDevEventOperation_EOperation) Enum() *CMsgClientToGCDevEventOperation_EOperation {
	p := new(CMsgClientToGCDevEventOperation_EOperation)
	*p = x
	return p
}

func (x CMsgClientToGCDevEventOperation_EOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCDevEventOperation_EOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[24].Descriptor()
}

func (CMsgClientToGCDevEventOperation_EOperation) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[24]
}

func (x CMsgClientToGCDevEventOperation_EOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCDevEventOperation_EOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCDevEventOperation_EOperation(num)
	return nil
}

// Deprecated: Use CMsgClientToGCDevEventOperation_EOperation.Descriptor instead.
func (CMsgClientToGCDevEventOperation_EOperation) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{69, 0}
}

type CMsgClientToGCPerformAutoActionsResponse_EResponse int32

const (
	CMsgClientToGCPerformAutoActionsResponse_k_eInternalError  CMsgClientToGCPerformAutoActionsResponse_EResponse = 0
	CMsgClientToGCPerformAutoActionsResponse_k_eSuccess        CMsgClientToGCPerformAutoActionsResponse_EResponse = 1
	CMsgClientToGCPerformAutoActionsResponse_k_eDisabled       CMsgClientToGCPerformAutoActionsResponse_EResponse = 2
	CMsgClientToGCPerformAutoActionsResponse_k_eTooBusy        CMsgClientToGCPerformAutoActionsResponse_EResponse = 3
	CMsgClientToGCPerformAutoActionsResponse_k_eInvalidEventID CMsgClientToGCPerformAutoActionsResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCPerformAutoActionsResponse_EResponse.
var (
	CMsgClientToGCPerformAutoActionsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidEventID",
	}
	CMsgClientToGCPerformAutoActionsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eDisabled":       2,
		"k_eTooBusy":        3,
		"k_eInvalidEventID": 4,
	}
)

func (x CMsgClientToGCPerformAutoActionsResponse_EResponse) Enum() *CMsgClientToGCPerformAutoActionsResponse_EResponse {
	p := new(CMsgClientToGCPerformAutoActionsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPerformAutoActionsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPerformAutoActionsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[25].Descriptor()
}

func (CMsgClientToGCPerformAutoActionsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[25]
}

func (x CMsgClientToGCPerformAutoActionsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPerformAutoActionsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPerformAutoActionsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPerformAutoActionsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPerformAutoActionsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{73, 0}
}

type CMsgClientToGCCanPurchaseItemResponse_EResponse int32

const (
	CMsgClientToGCCanPurchaseItemResponse_k_eInternalError           CMsgClientToGCCanPurchaseItemResponse_EResponse = 0
	CMsgClientToGCCanPurchaseItemResponse_k_eSuccess                 CMsgClientToGCCanPurchaseItemResponse_EResponse = 1
	CMsgClientToGCCanPurchaseItemResponse_k_eDisabled                CMsgClientToGCCanPurchaseItemResponse_EResponse = 2
	CMsgClientToGCCanPurchaseItemResponse_k_eTooBusy                 CMsgClientToGCCanPurchaseItemResponse_EResponse = 3
	CMsgClientToGCCanPurchaseItemResponse_k_eItemDisabled            CMsgClientToGCCanPurchaseItemResponse_EResponse = 4
	CMsgClientToGCCanPurchaseItemResponse_k_eInvalidItem             CMsgClientToGCCanPurchaseItemResponse_EResponse = 5
	CMsgClientToGCCanPurchaseItemResponse_k_eStoreDisabled           CMsgClientToGCCanPurchaseItemResponse_EResponse = 6
	CMsgClientToGCCanPurchaseItemResponse_k_eInvalidClientVersion    CMsgClientToGCCanPurchaseItemResponse_EResponse = 7
	CMsgClientToGCCanPurchaseItemResponse_k_eInvalidQuantity         CMsgClientToGCCanPurchaseItemResponse_EResponse = 8
	CMsgClientToGCCanPurchaseItemResponse_k_eOutstandingReservations CMsgClientToGCCanPurchaseItemResponse_EResponse = 9
	CMsgClientToGCCanPurchaseItemResponse_k_eExceedsCreditLimit      CMsgClientToGCCanPurchaseItemResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCCanPurchaseItemResponse_EResponse.
var (
	CMsgClientToGCCanPurchaseItemResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eItemDisabled",
		5:  "k_eInvalidItem",
		6:  "k_eStoreDisabled",
		7:  "k_eInvalidClientVersion",
		8:  "k_eInvalidQuantity",
		9:  "k_eOutstandingReservations",
		10: "k_eExceedsCreditLimit",
	}
	CMsgClientToGCCanPurchaseItemResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eDisabled":                2,
		"k_eTooBusy":                 3,
		"k_eItemDisabled":            4,
		"k_eInvalidItem":             5,
		"k_eStoreDisabled":           6,
		"k_eInvalidClientVersion":    7,
		"k_eInvalidQuantity":         8,
		"k_eOutstandingReservations": 9,
		"k_eExceedsCreditLimit":      10,
	}
)

func (x CMsgClientToGCCanPurchaseItemResponse_EResponse) Enum() *CMsgClientToGCCanPurchaseItemResponse_EResponse {
	p := new(CMsgClientToGCCanPurchaseItemResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCCanPurchaseItemResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCanPurchaseItemResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[26].Descriptor()
}

func (CMsgClientToGCCanPurchaseItemResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[26]
}

func (x CMsgClientToGCCanPurchaseItemResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCanPurchaseItemResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCanPurchaseItemResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCanPurchaseItemResponse_EResponse.Descriptor instead.
func (CMsgClientToGCCanPurchaseItemResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{75, 0}
}

type CMsgClientToGCHandleItemPurchaseResponse_EResponse int32

const (
	CMsgClientToGCHandleItemPurchaseResponse_k_eInternalError           CMsgClientToGCHandleItemPurchaseResponse_EResponse = 0
	CMsgClientToGCHandleItemPurchaseResponse_k_eSuccess                 CMsgClientToGCHandleItemPurchaseResponse_EResponse = 1
	CMsgClientToGCHandleItemPurchaseResponse_k_eStoreDisabled           CMsgClientToGCHandleItemPurchaseResponse_EResponse = 2
	CMsgClientToGCHandleItemPurchaseResponse_k_eTooBusy                 CMsgClientToGCHandleItemPurchaseResponse_EResponse = 3
	CMsgClientToGCHandleItemPurchaseResponse_k_eInvalidReceipt          CMsgClientToGCHandleItemPurchaseResponse_EResponse = 4
	CMsgClientToGCHandleItemPurchaseResponse_k_eUnableToValidateReceipt CMsgClientToGCHandleItemPurchaseResponse_EResponse = 5
	CMsgClientToGCHandleItemPurchaseResponse_k_eInvalidClientVersion    CMsgClientToGCHandleItemPurchaseResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCHandleItemPurchaseResponse_EResponse.
var (
	CMsgClientToGCHandleItemPurchaseResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eStoreDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidReceipt",
		5: "k_eUnableToValidateReceipt",
		6: "k_eInvalidClientVersion",
	}
	CMsgClientToGCHandleItemPurchaseResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eStoreDisabled":           2,
		"k_eTooBusy":                 3,
		"k_eInvalidReceipt":          4,
		"k_eUnableToValidateReceipt": 5,
		"k_eInvalidClientVersion":    6,
	}
)

func (x CMsgClientToGCHandleItemPurchaseResponse_EResponse) Enum() *CMsgClientToGCHandleItemPurchaseResponse_EResponse {
	p := new(CMsgClientToGCHandleItemPurchaseResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCHandleItemPurchaseResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCHandleItemPurchaseResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[27].Descriptor()
}

func (CMsgClientToGCHandleItemPurchaseResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[27]
}

func (x CMsgClientToGCHandleItemPurchaseResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCHandleItemPurchaseResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCHandleItemPurchaseResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCHandleItemPurchaseResponse_EResponse.Descriptor instead.
func (CMsgClientToGCHandleItemPurchaseResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{77, 0}
}

type CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse int32

const (
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eInternalError          CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 0
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eSuccess                CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 1
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_ePurchaseItemError      CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 2
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eInvalidOrderID         CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 3
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eUnableToValidate       CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 4
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eAlreadyResolved        CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 5
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eResolvedOnOtherAccount CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 6
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_ePurchaseRefunded       CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 7
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_ePurchasePending        CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 8
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_ePurchaseCanceled       CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse = 9
)

// Enum value maps for CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse.
var (
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_ePurchaseItemError",
		3: "k_eInvalidOrderID",
		4: "k_eUnableToValidate",
		5: "k_eAlreadyResolved",
		6: "k_eResolvedOnOtherAccount",
		7: "k_ePurchaseRefunded",
		8: "k_ePurchasePending",
		9: "k_ePurchaseCanceled",
	}
	CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_ePurchaseItemError":      2,
		"k_eInvalidOrderID":         3,
		"k_eUnableToValidate":       4,
		"k_eAlreadyResolved":        5,
		"k_eResolvedOnOtherAccount": 6,
		"k_ePurchaseRefunded":       7,
		"k_ePurchasePending":        8,
		"k_ePurchaseCanceled":       9,
	}
)

func (x CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) Enum() *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse {
	p := new(CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse)
	*p = x
	return p
}

func (x CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[28].Descriptor()
}

func (CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[28]
}

func (x CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse.Descriptor instead.
func (CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{77, 0, 0}
}

type CMsgClientToGCEventEquipVirtualItemsResponse_EResponse int32

const (
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eInternalError  CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 0
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eSuccess        CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 1
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eDisabled       CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 2
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eTooBusy        CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 3
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eInvalidItem    CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 4
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eInvalidSlot    CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 5
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eEventInactive  CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 6
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eTooManyEquips  CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 7
	CMsgClientToGCEventEquipVirtualItemsResponse_k_eDuplicateEquip CMsgClientToGCEventEquipVirtualItemsResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCEventEquipVirtualItemsResponse_EResponse.
var (
	CMsgClientToGCEventEquipVirtualItemsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidItem",
		5: "k_eInvalidSlot",
		6: "k_eEventInactive",
		7: "k_eTooManyEquips",
		8: "k_eDuplicateEquip",
	}
	CMsgClientToGCEventEquipVirtualItemsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eDisabled":       2,
		"k_eTooBusy":        3,
		"k_eInvalidItem":    4,
		"k_eInvalidSlot":    5,
		"k_eEventInactive":  6,
		"k_eTooManyEquips":  7,
		"k_eDuplicateEquip": 8,
	}
)

func (x CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) Enum() *CMsgClientToGCEventEquipVirtualItemsResponse_EResponse {
	p := new(CMsgClientToGCEventEquipVirtualItemsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[29].Descriptor()
}

func (CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[29]
}

func (x CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventEquipVirtualItemsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventEquipVirtualItemsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventEquipVirtualItemsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{79, 0}
}

type CMsgClientToGCClearPurchaseReserveResponse_EResponse int32

const (
	CMsgClientToGCClearPurchaseReserveResponse_k_eInternalError CMsgClientToGCClearPurchaseReserveResponse_EResponse = 0
	CMsgClientToGCClearPurchaseReserveResponse_k_eSuccess       CMsgClientToGCClearPurchaseReserveResponse_EResponse = 1
	CMsgClientToGCClearPurchaseReserveResponse_k_eTooBusy       CMsgClientToGCClearPurchaseReserveResponse_EResponse = 2
)

// Enum value maps for CMsgClientToGCClearPurchaseReserveResponse_EResponse.
var (
	CMsgClientToGCClearPurchaseReserveResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
	}
	CMsgClientToGCClearPurchaseReserveResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
	}
)

func (x CMsgClientToGCClearPurchaseReserveResponse_EResponse) Enum() *CMsgClientToGCClearPurchaseReserveResponse_EResponse {
	p := new(CMsgClientToGCClearPurchaseReserveResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCClearPurchaseReserveResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCClearPurchaseReserveResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[30].Descriptor()
}

func (CMsgClientToGCClearPurchaseReserveResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[30]
}

func (x CMsgClientToGCClearPurchaseReserveResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCClearPurchaseReserveResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCClearPurchaseReserveResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCClearPurchaseReserveResponse_EResponse.Descriptor instead.
func (CMsgClientToGCClearPurchaseReserveResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{81, 0}
}

type CMsgClientToGCEventChallengeProgressResponse_EResponse int32

const (
	CMsgClientToGCEventChallengeProgressResponse_k_eInternalError          CMsgClientToGCEventChallengeProgressResponse_EResponse = 0
	CMsgClientToGCEventChallengeProgressResponse_k_eSuccess                CMsgClientToGCEventChallengeProgressResponse_EResponse = 1
	CMsgClientToGCEventChallengeProgressResponse_k_eDisabled               CMsgClientToGCEventChallengeProgressResponse_EResponse = 2
	CMsgClientToGCEventChallengeProgressResponse_k_eTooBusy                CMsgClientToGCEventChallengeProgressResponse_EResponse = 3
	CMsgClientToGCEventChallengeProgressResponse_k_eEventInactive          CMsgClientToGCEventChallengeProgressResponse_EResponse = 4
	CMsgClientToGCEventChallengeProgressResponse_k_eInvalidSlot            CMsgClientToGCEventChallengeProgressResponse_EResponse = 5
	CMsgClientToGCEventChallengeProgressResponse_k_eInvalidChallengeConfig CMsgClientToGCEventChallengeProgressResponse_EResponse = 6
	CMsgClientToGCEventChallengeProgressResponse_k_eSequenceMismatch       CMsgClientToGCEventChallengeProgressResponse_EResponse = 7
	CMsgClientToGCEventChallengeProgressResponse_k_eRateLimited            CMsgClientToGCEventChallengeProgressResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCEventChallengeProgressResponse_EResponse.
var (
	CMsgClientToGCEventChallengeProgressResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eEventInactive",
		5: "k_eInvalidSlot",
		6: "k_eInvalidChallengeConfig",
		7: "k_eSequenceMismatch",
		8: "k_eRateLimited",
	}
	CMsgClientToGCEventChallengeProgressResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eDisabled":               2,
		"k_eTooBusy":                3,
		"k_eEventInactive":          4,
		"k_eInvalidSlot":            5,
		"k_eInvalidChallengeConfig": 6,
		"k_eSequenceMismatch":       7,
		"k_eRateLimited":            8,
	}
)

func (x CMsgClientToGCEventChallengeProgressResponse_EResponse) Enum() *CMsgClientToGCEventChallengeProgressResponse_EResponse {
	p := new(CMsgClientToGCEventChallengeProgressResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventChallengeProgressResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventChallengeProgressResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[31].Descriptor()
}

func (CMsgClientToGCEventChallengeProgressResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[31]
}

func (x CMsgClientToGCEventChallengeProgressResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventChallengeProgressResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventChallengeProgressResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventChallengeProgressResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventChallengeProgressResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{88, 0}
}

type CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse int32

const (
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInternalError          CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 0
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eSuccess                CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 1
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eDisabled               CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 2
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eTooBusy                CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 3
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eEventInactive          CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 4
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInvalidSlot            CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 5
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInvalidChallengeConfig CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 6
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eSequenceMismatch       CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 7
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInvalidCurrency        CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 8
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInsufficientCurrency   CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 9
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eRateLimited            CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 10
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInvalidStartingBalance CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse.
var (
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eEventInactive",
		5:  "k_eInvalidSlot",
		6:  "k_eInvalidChallengeConfig",
		7:  "k_eSequenceMismatch",
		8:  "k_eInvalidCurrency",
		9:  "k_eInsufficientCurrency",
		10: "k_eRateLimited",
		11: "k_eInvalidStartingBalance",
	}
	CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eDisabled":               2,
		"k_eTooBusy":                3,
		"k_eEventInactive":          4,
		"k_eInvalidSlot":            5,
		"k_eInvalidChallengeConfig": 6,
		"k_eSequenceMismatch":       7,
		"k_eInvalidCurrency":        8,
		"k_eInsufficientCurrency":   9,
		"k_eRateLimited":            10,
		"k_eInvalidStartingBalance": 11,
	}
)

func (x CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) Enum() *CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse {
	p := new(CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[32].Descriptor()
}

func (CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[32]
}

func (x CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{90, 0}
}

type CMsgClientToGCAssociateDeviceResponse_EResponse int32

const (
	CMsgClientToGCAssociateDeviceResponse_k_eInternalError CMsgClientToGCAssociateDeviceResponse_EResponse = 0
	CMsgClientToGCAssociateDeviceResponse_k_eSuccess       CMsgClientToGCAssociateDeviceResponse_EResponse = 1
	CMsgClientToGCAssociateDeviceResponse_k_eDisabled      CMsgClientToGCAssociateDeviceResponse_EResponse = 2
	CMsgClientToGCAssociateDeviceResponse_k_eTooBusy       CMsgClientToGCAssociateDeviceResponse_EResponse = 3
	CMsgClientToGCAssociateDeviceResponse_k_eRateLimited   CMsgClientToGCAssociateDeviceResponse_EResponse = 4
	CMsgClientToGCAssociateDeviceResponse_k_eNotFound      CMsgClientToGCAssociateDeviceResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCAssociateDeviceResponse_EResponse.
var (
	CMsgClientToGCAssociateDeviceResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
		5: "k_eNotFound",
	}
	CMsgClientToGCAssociateDeviceResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
		"k_eNotFound":      5,
	}
)

func (x CMsgClientToGCAssociateDeviceResponse_EResponse) Enum() *CMsgClientToGCAssociateDeviceResponse_EResponse {
	p := new(CMsgClientToGCAssociateDeviceResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCAssociateDeviceResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCAssociateDeviceResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[33].Descriptor()
}

func (CMsgClientToGCAssociateDeviceResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[33]
}

func (x CMsgClientToGCAssociateDeviceResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCAssociateDeviceResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCAssociateDeviceResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCAssociateDeviceResponse_EResponse.Descriptor instead.
func (CMsgClientToGCAssociateDeviceResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{92, 0}
}

type CMsgClientToGCEventPurchaseResponse_EResponse int32

const (
	CMsgClientToGCEventPurchaseResponse_k_eInternalError        CMsgClientToGCEventPurchaseResponse_EResponse = 0
	CMsgClientToGCEventPurchaseResponse_k_eSuccess              CMsgClientToGCEventPurchaseResponse_EResponse = 1
	CMsgClientToGCEventPurchaseResponse_k_eDisabled             CMsgClientToGCEventPurchaseResponse_EResponse = 2
	CMsgClientToGCEventPurchaseResponse_k_eTooBusy              CMsgClientToGCEventPurchaseResponse_EResponse = 3
	CMsgClientToGCEventPurchaseResponse_k_eInvalidEvent         CMsgClientToGCEventPurchaseResponse_EResponse = 5
	CMsgClientToGCEventPurchaseResponse_k_eInsufficientCredits  CMsgClientToGCEventPurchaseResponse_EResponse = 6
	CMsgClientToGCEventPurchaseResponse_k_eExpectedCostMismatch CMsgClientToGCEventPurchaseResponse_EResponse = 7
	CMsgClientToGCEventPurchaseResponse_k_eAlreadyOwned         CMsgClientToGCEventPurchaseResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCEventPurchaseResponse_EResponse.
var (
	CMsgClientToGCEventPurchaseResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		5: "k_eInvalidEvent",
		6: "k_eInsufficientCredits",
		7: "k_eExpectedCostMismatch",
		8: "k_eAlreadyOwned",
	}
	CMsgClientToGCEventPurchaseResponse_EResponse_value = map[string]int32{
		"k_eInternalError":        0,
		"k_eSuccess":              1,
		"k_eDisabled":             2,
		"k_eTooBusy":              3,
		"k_eInvalidEvent":         5,
		"k_eInsufficientCredits":  6,
		"k_eExpectedCostMismatch": 7,
		"k_eAlreadyOwned":         8,
	}
)

func (x CMsgClientToGCEventPurchaseResponse_EResponse) Enum() *CMsgClientToGCEventPurchaseResponse_EResponse {
	p := new(CMsgClientToGCEventPurchaseResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventPurchaseResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventPurchaseResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[34].Descriptor()
}

func (CMsgClientToGCEventPurchaseResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[34]
}

func (x CMsgClientToGCEventPurchaseResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventPurchaseResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventPurchaseResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventPurchaseResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventPurchaseResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{94, 0}
}

type CMsgClientToGCPartySetGameModifierResponse_EResponse int32

const (
	CMsgClientToGCPartySetGameModifierResponse_k_eInternalError      CMsgClientToGCPartySetGameModifierResponse_EResponse = 0
	CMsgClientToGCPartySetGameModifierResponse_k_eSuccess            CMsgClientToGCPartySetGameModifierResponse_EResponse = 1
	CMsgClientToGCPartySetGameModifierResponse_k_eDisabled           CMsgClientToGCPartySetGameModifierResponse_EResponse = 2
	CMsgClientToGCPartySetGameModifierResponse_k_eTooBusy            CMsgClientToGCPartySetGameModifierResponse_EResponse = 3
	CMsgClientToGCPartySetGameModifierResponse_k_eInvalidPartyID     CMsgClientToGCPartySetGameModifierResponse_EResponse = 4
	CMsgClientToGCPartySetGameModifierResponse_k_eInvalidPermissions CMsgClientToGCPartySetGameModifierResponse_EResponse = 5
	CMsgClientToGCPartySetGameModifierResponse_k_eInvalidModifier    CMsgClientToGCPartySetGameModifierResponse_EResponse = 6
	CMsgClientToGCPartySetGameModifierResponse_k_eInMatchMaking      CMsgClientToGCPartySetGameModifierResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCPartySetGameModifierResponse_EResponse.
var (
	CMsgClientToGCPartySetGameModifierResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidPartyID",
		5: "k_eInvalidPermissions",
		6: "k_eInvalidModifier",
		7: "k_eInMatchMaking",
	}
	CMsgClientToGCPartySetGameModifierResponse_EResponse_value = map[string]int32{
		"k_eInternalError":      0,
		"k_eSuccess":            1,
		"k_eDisabled":           2,
		"k_eTooBusy":            3,
		"k_eInvalidPartyID":     4,
		"k_eInvalidPermissions": 5,
		"k_eInvalidModifier":    6,
		"k_eInMatchMaking":      7,
	}
)

func (x CMsgClientToGCPartySetGameModifierResponse_EResponse) Enum() *CMsgClientToGCPartySetGameModifierResponse_EResponse {
	p := new(CMsgClientToGCPartySetGameModifierResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPartySetGameModifierResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPartySetGameModifierResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[35].Descriptor()
}

func (CMsgClientToGCPartySetGameModifierResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[35]
}

func (x CMsgClientToGCPartySetGameModifierResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPartySetGameModifierResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPartySetGameModifierResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPartySetGameModifierResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPartySetGameModifierResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{96, 0}
}

type CMsgClientToGCAckSupportCreditsResponse_EResponse int32

const (
	CMsgClientToGCAckSupportCreditsResponse_k_eInternalError CMsgClientToGCAckSupportCreditsResponse_EResponse = 0
	CMsgClientToGCAckSupportCreditsResponse_k_eSuccess       CMsgClientToGCAckSupportCreditsResponse_EResponse = 1
	CMsgClientToGCAckSupportCreditsResponse_k_eDisabled      CMsgClientToGCAckSupportCreditsResponse_EResponse = 2
	CMsgClientToGCAckSupportCreditsResponse_k_eTooBusy       CMsgClientToGCAckSupportCreditsResponse_EResponse = 3
	CMsgClientToGCAckSupportCreditsResponse_k_eInvalidItem   CMsgClientToGCAckSupportCreditsResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCAckSupportCreditsResponse_EResponse.
var (
	CMsgClientToGCAckSupportCreditsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidItem",
	}
	CMsgClientToGCAckSupportCreditsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eInvalidItem":   4,
	}
)

func (x CMsgClientToGCAckSupportCreditsResponse_EResponse) Enum() *CMsgClientToGCAckSupportCreditsResponse_EResponse {
	p := new(CMsgClientToGCAckSupportCreditsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCAckSupportCreditsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCAckSupportCreditsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[36].Descriptor()
}

func (CMsgClientToGCAckSupportCreditsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[36]
}

func (x CMsgClientToGCAckSupportCreditsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCAckSupportCreditsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCAckSupportCreditsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCAckSupportCreditsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCAckSupportCreditsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{98, 0}
}

type CMsgClientToGCSetTeamNameResponse_EResponse int32

const (
	CMsgClientToGCSetTeamNameResponse_k_eInternalError   CMsgClientToGCSetTeamNameResponse_EResponse = 0
	CMsgClientToGCSetTeamNameResponse_k_eSuccess         CMsgClientToGCSetTeamNameResponse_EResponse = 1
	CMsgClientToGCSetTeamNameResponse_k_eDisabled        CMsgClientToGCSetTeamNameResponse_EResponse = 2
	CMsgClientToGCSetTeamNameResponse_k_eTooBusy         CMsgClientToGCSetTeamNameResponse_EResponse = 3
	CMsgClientToGCSetTeamNameResponse_k_eNotUnlocked     CMsgClientToGCSetTeamNameResponse_EResponse = 4
	CMsgClientToGCSetTeamNameResponse_k_eInCooldown      CMsgClientToGCSetTeamNameResponse_EResponse = 5
	CMsgClientToGCSetTeamNameResponse_k_eNameTooLong     CMsgClientToGCSetTeamNameResponse_EResponse = 6
	CMsgClientToGCSetTeamNameResponse_k_eCommunityBanned CMsgClientToGCSetTeamNameResponse_EResponse = 7
	CMsgClientToGCSetTeamNameResponse_k_eGameBanned      CMsgClientToGCSetTeamNameResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCSetTeamNameResponse_EResponse.
var (
	CMsgClientToGCSetTeamNameResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eNotUnlocked",
		5: "k_eInCooldown",
		6: "k_eNameTooLong",
		7: "k_eCommunityBanned",
		8: "k_eGameBanned",
	}
	CMsgClientToGCSetTeamNameResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eDisabled":        2,
		"k_eTooBusy":         3,
		"k_eNotUnlocked":     4,
		"k_eInCooldown":      5,
		"k_eNameTooLong":     6,
		"k_eCommunityBanned": 7,
		"k_eGameBanned":      8,
	}
)

func (x CMsgClientToGCSetTeamNameResponse_EResponse) Enum() *CMsgClientToGCSetTeamNameResponse_EResponse {
	p := new(CMsgClientToGCSetTeamNameResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSetTeamNameResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetTeamNameResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[37].Descriptor()
}

func (CMsgClientToGCSetTeamNameResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[37]
}

func (x CMsgClientToGCSetTeamNameResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetTeamNameResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetTeamNameResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetTeamNameResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSetTeamNameResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{100, 0}
}

type CMsgClientToGCDevOperation_EOperation int32

const (
	CMsgClientToGCDevOperation_k_eSetGACFlags           CMsgClientToGCDevOperation_EOperation = 0
	CMsgClientToGCDevOperation_k_eGrantCreditObject     CMsgClientToGCDevOperation_EOperation = 1
	CMsgClientToGCDevOperation_k_eClearAllCredits       CMsgClientToGCDevOperation_EOperation = 2
	CMsgClientToGCDevOperation_k_eForceAccountSyncValue CMsgClientToGCDevOperation_EOperation = 3
	CMsgClientToGCDevOperation_k_eSetAccountSearchKey   CMsgClientToGCDevOperation_EOperation = 4
)

// Enum value maps for CMsgClientToGCDevOperation_EOperation.
var (
	CMsgClientToGCDevOperation_EOperation_name = map[int32]string{
		0: "k_eSetGACFlags",
		1: "k_eGrantCreditObject",
		2: "k_eClearAllCredits",
		3: "k_eForceAccountSyncValue",
		4: "k_eSetAccountSearchKey",
	}
	CMsgClientToGCDevOperation_EOperation_value = map[string]int32{
		"k_eSetGACFlags":           0,
		"k_eGrantCreditObject":     1,
		"k_eClearAllCredits":       2,
		"k_eForceAccountSyncValue": 3,
		"k_eSetAccountSearchKey":   4,
	}
)

func (x CMsgClientToGCDevOperation_EOperation) Enum() *CMsgClientToGCDevOperation_EOperation {
	p := new(CMsgClientToGCDevOperation_EOperation)
	*p = x
	return p
}

func (x CMsgClientToGCDevOperation_EOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCDevOperation_EOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[38].Descriptor()
}

func (CMsgClientToGCDevOperation_EOperation) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[38]
}

func (x CMsgClientToGCDevOperation_EOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCDevOperation_EOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCDevOperation_EOperation(num)
	return nil
}

// Deprecated: Use CMsgClientToGCDevOperation_EOperation.Descriptor instead.
func (CMsgClientToGCDevOperation_EOperation) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{101, 0}
}

type CMsgClientToGCUpdateAccountSyncResponse_EResponse int32

const (
	CMsgClientToGCUpdateAccountSyncResponse_k_eInternalError  CMsgClientToGCUpdateAccountSyncResponse_EResponse = 0
	CMsgClientToGCUpdateAccountSyncResponse_k_eSuccess        CMsgClientToGCUpdateAccountSyncResponse_EResponse = 1
	CMsgClientToGCUpdateAccountSyncResponse_k_eDisabled       CMsgClientToGCUpdateAccountSyncResponse_EResponse = 2
	CMsgClientToGCUpdateAccountSyncResponse_k_eTooBusy        CMsgClientToGCUpdateAccountSyncResponse_EResponse = 3
	CMsgClientToGCUpdateAccountSyncResponse_k_eInvalidMessage CMsgClientToGCUpdateAccountSyncResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCUpdateAccountSyncResponse_EResponse.
var (
	CMsgClientToGCUpdateAccountSyncResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidMessage",
	}
	CMsgClientToGCUpdateAccountSyncResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eDisabled":       2,
		"k_eTooBusy":        3,
		"k_eInvalidMessage": 4,
	}
)

func (x CMsgClientToGCUpdateAccountSyncResponse_EResponse) Enum() *CMsgClientToGCUpdateAccountSyncResponse_EResponse {
	p := new(CMsgClientToGCUpdateAccountSyncResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCUpdateAccountSyncResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCUpdateAccountSyncResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[39].Descriptor()
}

func (CMsgClientToGCUpdateAccountSyncResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[39]
}

func (x CMsgClientToGCUpdateAccountSyncResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCUpdateAccountSyncResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCUpdateAccountSyncResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCUpdateAccountSyncResponse_EResponse.Descriptor instead.
func (CMsgClientToGCUpdateAccountSyncResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{104, 0}
}

type CMsgClientToGCGetDuosRanks_ESortOrder int32

const (
	CMsgClientToGCGetDuosRanks_k_eSort_LastPlayed    CMsgClientToGCGetDuosRanks_ESortOrder = 0
	CMsgClientToGCGetDuosRanks_k_eSort_HighestRanked CMsgClientToGCGetDuosRanks_ESortOrder = 1
	CMsgClientToGCGetDuosRanks_k_eSort_MostGames     CMsgClientToGCGetDuosRanks_ESortOrder = 2
)

// Enum value maps for CMsgClientToGCGetDuosRanks_ESortOrder.
var (
	CMsgClientToGCGetDuosRanks_ESortOrder_name = map[int32]string{
		0: "k_eSort_LastPlayed",
		1: "k_eSort_HighestRanked",
		2: "k_eSort_MostGames",
	}
	CMsgClientToGCGetDuosRanks_ESortOrder_value = map[string]int32{
		"k_eSort_LastPlayed":    0,
		"k_eSort_HighestRanked": 1,
		"k_eSort_MostGames":     2,
	}
)

func (x CMsgClientToGCGetDuosRanks_ESortOrder) Enum() *CMsgClientToGCGetDuosRanks_ESortOrder {
	p := new(CMsgClientToGCGetDuosRanks_ESortOrder)
	*p = x
	return p
}

func (x CMsgClientToGCGetDuosRanks_ESortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetDuosRanks_ESortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[40].Descriptor()
}

func (CMsgClientToGCGetDuosRanks_ESortOrder) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[40]
}

func (x CMsgClientToGCGetDuosRanks_ESortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetDuosRanks_ESortOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetDuosRanks_ESortOrder(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetDuosRanks_ESortOrder.Descriptor instead.
func (CMsgClientToGCGetDuosRanks_ESortOrder) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{105, 0}
}

type CMsgClientToGCGetDuosRanksResponse_EResponse int32

const (
	CMsgClientToGCGetDuosRanksResponse_k_eInternalError     CMsgClientToGCGetDuosRanksResponse_EResponse = 0
	CMsgClientToGCGetDuosRanksResponse_k_eSuccess           CMsgClientToGCGetDuosRanksResponse_EResponse = 1
	CMsgClientToGCGetDuosRanksResponse_k_eDisabled          CMsgClientToGCGetDuosRanksResponse_EResponse = 2
	CMsgClientToGCGetDuosRanksResponse_k_eTooBusy           CMsgClientToGCGetDuosRanksResponse_EResponse = 3
	CMsgClientToGCGetDuosRanksResponse_k_eInvalidMessage    CMsgClientToGCGetDuosRanksResponse_EResponse = 4
	CMsgClientToGCGetDuosRanksResponse_k_eRateLimited       CMsgClientToGCGetDuosRanksResponse_EResponse = 5
	CMsgClientToGCGetDuosRanksResponse_k_eInvalidPermission CMsgClientToGCGetDuosRanksResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCGetDuosRanksResponse_EResponse.
var (
	CMsgClientToGCGetDuosRanksResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidMessage",
		5: "k_eRateLimited",
		6: "k_eInvalidPermission",
	}
	CMsgClientToGCGetDuosRanksResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eSuccess":           1,
		"k_eDisabled":          2,
		"k_eTooBusy":           3,
		"k_eInvalidMessage":    4,
		"k_eRateLimited":       5,
		"k_eInvalidPermission": 6,
	}
)

func (x CMsgClientToGCGetDuosRanksResponse_EResponse) Enum() *CMsgClientToGCGetDuosRanksResponse_EResponse {
	p := new(CMsgClientToGCGetDuosRanksResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetDuosRanksResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetDuosRanksResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[41].Descriptor()
}

func (CMsgClientToGCGetDuosRanksResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[41]
}

func (x CMsgClientToGCGetDuosRanksResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetDuosRanksResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetDuosRanksResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetDuosRanksResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetDuosRanksResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{106, 0}
}

type CMsgClientToGCGetProfileResponse_EResponse int32

const (
	CMsgClientToGCGetProfileResponse_k_eInternalError     CMsgClientToGCGetProfileResponse_EResponse = 0
	CMsgClientToGCGetProfileResponse_k_eSuccess           CMsgClientToGCGetProfileResponse_EResponse = 1
	CMsgClientToGCGetProfileResponse_k_eDisabled          CMsgClientToGCGetProfileResponse_EResponse = 2
	CMsgClientToGCGetProfileResponse_k_eTooBusy           CMsgClientToGCGetProfileResponse_EResponse = 3
	CMsgClientToGCGetProfileResponse_k_eInvalidMessage    CMsgClientToGCGetProfileResponse_EResponse = 4
	CMsgClientToGCGetProfileResponse_k_eRateLimited       CMsgClientToGCGetProfileResponse_EResponse = 5
	CMsgClientToGCGetProfileResponse_k_eInvalidPermission CMsgClientToGCGetProfileResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCGetProfileResponse_EResponse.
var (
	CMsgClientToGCGetProfileResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidMessage",
		5: "k_eRateLimited",
		6: "k_eInvalidPermission",
	}
	CMsgClientToGCGetProfileResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eSuccess":           1,
		"k_eDisabled":          2,
		"k_eTooBusy":           3,
		"k_eInvalidMessage":    4,
		"k_eRateLimited":       5,
		"k_eInvalidPermission": 6,
	}
)

func (x CMsgClientToGCGetProfileResponse_EResponse) Enum() *CMsgClientToGCGetProfileResponse_EResponse {
	p := new(CMsgClientToGCGetProfileResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetProfileResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetProfileResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[42].Descriptor()
}

func (CMsgClientToGCGetProfileResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[42]
}

func (x CMsgClientToGCGetProfileResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetProfileResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetProfileResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetProfileResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetProfileResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{108, 0}
}

type CMsgClientToGCGetMatchHistoryResponse_EResponse int32

const (
	CMsgClientToGCGetMatchHistoryResponse_k_eInternalError     CMsgClientToGCGetMatchHistoryResponse_EResponse = 0
	CMsgClientToGCGetMatchHistoryResponse_k_eSuccess           CMsgClientToGCGetMatchHistoryResponse_EResponse = 1
	CMsgClientToGCGetMatchHistoryResponse_k_eDisabled          CMsgClientToGCGetMatchHistoryResponse_EResponse = 2
	CMsgClientToGCGetMatchHistoryResponse_k_eTooBusy           CMsgClientToGCGetMatchHistoryResponse_EResponse = 3
	CMsgClientToGCGetMatchHistoryResponse_k_eInvalidMessage    CMsgClientToGCGetMatchHistoryResponse_EResponse = 4
	CMsgClientToGCGetMatchHistoryResponse_k_eRateLimited       CMsgClientToGCGetMatchHistoryResponse_EResponse = 5
	CMsgClientToGCGetMatchHistoryResponse_k_eInvalidPermission CMsgClientToGCGetMatchHistoryResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCGetMatchHistoryResponse_EResponse.
var (
	CMsgClientToGCGetMatchHistoryResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eInvalidMessage",
		5: "k_eRateLimited",
		6: "k_eInvalidPermission",
	}
	CMsgClientToGCGetMatchHistoryResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eSuccess":           1,
		"k_eDisabled":          2,
		"k_eTooBusy":           3,
		"k_eInvalidMessage":    4,
		"k_eRateLimited":       5,
		"k_eInvalidPermission": 6,
	}
)

func (x CMsgClientToGCGetMatchHistoryResponse_EResponse) Enum() *CMsgClientToGCGetMatchHistoryResponse_EResponse {
	p := new(CMsgClientToGCGetMatchHistoryResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetMatchHistoryResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetMatchHistoryResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[43].Descriptor()
}

func (CMsgClientToGCGetMatchHistoryResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[43]
}

func (x CMsgClientToGCGetMatchHistoryResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetMatchHistoryResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetMatchHistoryResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetMatchHistoryResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{110, 0}
}

type CMsgClientToGCEventPurchaseCurrencyResponse_EResponse int32

const (
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInternalError          CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 0
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eSuccess                CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 1
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eDisabled               CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 2
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eTooBusy                CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 3
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eEventNotOwned          CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 4
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInvalidCurrency        CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 5
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eEventClosed            CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 6
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInvalidQuantity        CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 7
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInvalidExpectedCost    CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 8
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInvalidStartingBalance CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 9
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eInsufficientCredits    CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 10
	CMsgClientToGCEventPurchaseCurrencyResponse_k_eCurrencyOverflow       CMsgClientToGCEventPurchaseCurrencyResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCEventPurchaseCurrencyResponse_EResponse.
var (
	CMsgClientToGCEventPurchaseCurrencyResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDisabled",
		3:  "k_eTooBusy",
		4:  "k_eEventNotOwned",
		5:  "k_eInvalidCurrency",
		6:  "k_eEventClosed",
		7:  "k_eInvalidQuantity",
		8:  "k_eInvalidExpectedCost",
		9:  "k_eInvalidStartingBalance",
		10: "k_eInsufficientCredits",
		11: "k_eCurrencyOverflow",
	}
	CMsgClientToGCEventPurchaseCurrencyResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eDisabled":               2,
		"k_eTooBusy":                3,
		"k_eEventNotOwned":          4,
		"k_eInvalidCurrency":        5,
		"k_eEventClosed":            6,
		"k_eInvalidQuantity":        7,
		"k_eInvalidExpectedCost":    8,
		"k_eInvalidStartingBalance": 9,
		"k_eInsufficientCredits":    10,
		"k_eCurrencyOverflow":       11,
	}
)

func (x CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) Enum() *CMsgClientToGCEventPurchaseCurrencyResponse_EResponse {
	p := new(CMsgClientToGCEventPurchaseCurrencyResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[44].Descriptor()
}

func (CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[44]
}

func (x CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCEventPurchaseCurrencyResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCEventPurchaseCurrencyResponse_EResponse.Descriptor instead.
func (CMsgClientToGCEventPurchaseCurrencyResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{112, 0}
}

type CMsgClientToGCGetFriendRanksResponse_EResponse int32

const (
	CMsgClientToGCGetFriendRanksResponse_k_eInternalError CMsgClientToGCGetFriendRanksResponse_EResponse = 0
	CMsgClientToGCGetFriendRanksResponse_k_eSuccess       CMsgClientToGCGetFriendRanksResponse_EResponse = 1
	CMsgClientToGCGetFriendRanksResponse_k_eDisabled      CMsgClientToGCGetFriendRanksResponse_EResponse = 2
	CMsgClientToGCGetFriendRanksResponse_k_eTooBusy       CMsgClientToGCGetFriendRanksResponse_EResponse = 3
	CMsgClientToGCGetFriendRanksResponse_k_eRateLimited   CMsgClientToGCGetFriendRanksResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetFriendRanksResponse_EResponse.
var (
	CMsgClientToGCGetFriendRanksResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
	}
	CMsgClientToGCGetFriendRanksResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
	}
)

func (x CMsgClientToGCGetFriendRanksResponse_EResponse) Enum() *CMsgClientToGCGetFriendRanksResponse_EResponse {
	p := new(CMsgClientToGCGetFriendRanksResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetFriendRanksResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetFriendRanksResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[45].Descriptor()
}

func (CMsgClientToGCGetFriendRanksResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[45]
}

func (x CMsgClientToGCGetFriendRanksResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetFriendRanksResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetFriendRanksResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetFriendRanksResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetFriendRanksResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{114, 0}
}

type CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse int32

const (
	CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eInternalError CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse = 0
	CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eSuccess       CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse = 1
	CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eDisabled      CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse = 2
	CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eTooBusy       CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse = 3
	CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eRateLimited   CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse.
var (
	CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
	}
	CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
	}
)

func (x CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) Enum() *CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse {
	p := new(CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[46].Descriptor()
}

func (CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[46]
}

func (x CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{116, 0}
}

type CMsgClientToGCGetPostMatchStatsResponse_EResponse int32

const (
	CMsgClientToGCGetPostMatchStatsResponse_k_eInternalError CMsgClientToGCGetPostMatchStatsResponse_EResponse = 0
	CMsgClientToGCGetPostMatchStatsResponse_k_eSuccess       CMsgClientToGCGetPostMatchStatsResponse_EResponse = 1
	CMsgClientToGCGetPostMatchStatsResponse_k_eDisabled      CMsgClientToGCGetPostMatchStatsResponse_EResponse = 2
	CMsgClientToGCGetPostMatchStatsResponse_k_eTooBusy       CMsgClientToGCGetPostMatchStatsResponse_EResponse = 3
	CMsgClientToGCGetPostMatchStatsResponse_k_eRateLimited   CMsgClientToGCGetPostMatchStatsResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetPostMatchStatsResponse_EResponse.
var (
	CMsgClientToGCGetPostMatchStatsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eRateLimited",
	}
	CMsgClientToGCGetPostMatchStatsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eDisabled":      2,
		"k_eTooBusy":       3,
		"k_eRateLimited":   4,
	}
)

func (x CMsgClientToGCGetPostMatchStatsResponse_EResponse) Enum() *CMsgClientToGCGetPostMatchStatsResponse_EResponse {
	p := new(CMsgClientToGCGetPostMatchStatsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetPostMatchStatsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetPostMatchStatsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_client_proto_enumTypes[47].Descriptor()
}

func (CMsgClientToGCGetPostMatchStatsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_client_proto_enumTypes[47]
}

func (x CMsgClientToGCGetPostMatchStatsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetPostMatchStatsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetPostMatchStatsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetPostMatchStatsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetPostMatchStatsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{118, 0}
}

type CMsgWebAPIClientDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId            *uint64       `protobuf:"fixed64,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Platform            *EDACPlatform `protobuf:"varint,2,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	Salt                *uint32       `protobuf:"fixed32,3,opt,name=salt" json:"salt,omitempty"`
	TimeStamp           *uint32       `protobuf:"varint,4,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	AccessKey           *uint64       `protobuf:"fixed64,5,opt,name=access_key,json=accessKey" json:"access_key,omitempty"`
	ClientVersion       *uint32       `protobuf:"varint,6,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Flags               *uint32       `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	BotMatchesStarted   *uint32       `protobuf:"varint,8,opt,name=bot_matches_started,json=botMatchesStarted" json:"bot_matches_started,omitempty"`
	BotMatchesCompleted *uint32       `protobuf:"varint,9,opt,name=bot_matches_completed,json=botMatchesCompleted" json:"bot_matches_completed,omitempty"`
	Country             *string       `protobuf:"bytes,10,opt,name=country" json:"country,omitempty"`
	TimesLaunched       *uint32       `protobuf:"varint,11,opt,name=times_launched,json=timesLaunched" json:"times_launched,omitempty"`
}

// Default values for CMsgWebAPIClientDeviceInfo fields.
const (
	Default_CMsgWebAPIClientDeviceInfo_Platform = EDACPlatform_k_eDACPlatform_None
)

func (x *CMsgWebAPIClientDeviceInfo) Reset() {
	*x = CMsgWebAPIClientDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWebAPIClientDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWebAPIClientDeviceInfo) ProtoMessage() {}

func (x *CMsgWebAPIClientDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWebAPIClientDeviceInfo.ProtoReflect.Descriptor instead.
func (*CMsgWebAPIClientDeviceInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgWebAPIClientDeviceInfo) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgWebAPIClientDeviceInfo_Platform
}

func (x *CMsgWebAPIClientDeviceInfo) GetSalt() uint32 {
	if x != nil && x.Salt != nil {
		return *x.Salt
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetAccessKey() uint64 {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetBotMatchesStarted() uint32 {
	if x != nil && x.BotMatchesStarted != nil {
		return *x.BotMatchesStarted
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetBotMatchesCompleted() uint32 {
	if x != nil && x.BotMatchesCompleted != nil {
		return *x.BotMatchesCompleted
	}
	return 0
}

func (x *CMsgWebAPIClientDeviceInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CMsgWebAPIClientDeviceInfo) GetTimesLaunched() uint32 {
	if x != nil && x.TimesLaunched != nil {
		return *x.TimesLaunched
	}
	return 0
}

type CMsgPartyMMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform              *EDACPlatform              `protobuf:"varint,1,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	PingTimes             *CMsgRegionPingTimesClient `protobuf:"bytes,2,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
	ClientVersion         *uint32                    `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	RegionMode            *EDACRegionMode            `protobuf:"varint,5,opt,name=region_mode,json=regionMode,enum=underlords.EDACRegionMode,def=0" json:"region_mode,omitempty"`
	ActiveChallengeSlotId *uint32                    `protobuf:"varint,6,opt,name=active_challenge_slot_id,json=activeChallengeSlotId" json:"active_challenge_slot_id,omitempty"`
}

// Default values for CMsgPartyMMInfo fields.
const (
	Default_CMsgPartyMMInfo_Platform   = EDACPlatform_k_eDACPlatform_None
	Default_CMsgPartyMMInfo_RegionMode = EDACRegionMode_k_EDACRegionMode_ROW
)

func (x *CMsgPartyMMInfo) Reset() {
	*x = CMsgPartyMMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPartyMMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartyMMInfo) ProtoMessage() {}

func (x *CMsgPartyMMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartyMMInfo.ProtoReflect.Descriptor instead.
func (*CMsgPartyMMInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgPartyMMInfo) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgPartyMMInfo_Platform
}

func (x *CMsgPartyMMInfo) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

func (x *CMsgPartyMMInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgPartyMMInfo) GetRegionMode() EDACRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CMsgPartyMMInfo_RegionMode
}

func (x *CMsgPartyMMInfo) GetActiveChallengeSlotId() uint32 {
	if x != nil && x.ActiveChallengeSlotId != nil {
		return *x.ActiveChallengeSlotId
	}
	return 0
}

type CMsgDACClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SideLoaded *bool           `protobuf:"varint,1,opt,name=side_loaded,json=sideLoaded" json:"side_loaded,omitempty"`
	RegionMode *EDACRegionMode `protobuf:"varint,2,opt,name=region_mode,json=regionMode,enum=underlords.EDACRegionMode,def=0" json:"region_mode,omitempty"`
}

// Default values for CMsgDACClientHello fields.
const (
	Default_CMsgDACClientHello_RegionMode = EDACRegionMode_k_EDACRegionMode_ROW
)

func (x *CMsgDACClientHello) Reset() {
	*x = CMsgDACClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDACClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDACClientHello) ProtoMessage() {}

func (x *CMsgDACClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDACClientHello.ProtoReflect.Descriptor instead.
func (*CMsgDACClientHello) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgDACClientHello) GetSideLoaded() bool {
	if x != nil && x.SideLoaded != nil {
		return *x.SideLoaded
	}
	return false
}

func (x *CMsgDACClientHello) GetRegionMode() EDACRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CMsgDACClientHello_RegionMode
}

type CMsgClientToGCStartMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchInfo *CMsgStartFindingMatchInfo `protobuf:"bytes,1,opt,name=match_info,json=matchInfo" json:"match_info,omitempty"`
	PingTimes *CMsgRegionPingTimesClient `protobuf:"bytes,2,opt,name=ping_times,json=pingTimes" json:"ping_times,omitempty"`
}

func (x *CMsgClientToGCStartMatchmaking) Reset() {
	*x = CMsgClientToGCStartMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStartMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStartMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCStartMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStartMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStartMatchmaking) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientToGCStartMatchmaking) GetMatchInfo() *CMsgStartFindingMatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *CMsgClientToGCStartMatchmaking) GetPingTimes() *CMsgRegionPingTimesClient {
	if x != nil {
		return x.PingTimes
	}
	return nil
}

type CMsgClientToGCStartMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *CMsgClientToGCStartMatchmakingResponse_EResultCode `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCStartMatchmakingResponse_EResultCode,def=0" json:"result,omitempty"`
	DebugMessage *string                                             `protobuf:"bytes,2,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
}

// Default values for CMsgClientToGCStartMatchmakingResponse fields.
const (
	Default_CMsgClientToGCStartMatchmakingResponse_Result = CMsgClientToGCStartMatchmakingResponse_k_EResult_OK
)

func (x *CMsgClientToGCStartMatchmakingResponse) Reset() {
	*x = CMsgClientToGCStartMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStartMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStartMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCStartMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStartMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStartMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientToGCStartMatchmakingResponse) GetResult() CMsgClientToGCStartMatchmakingResponse_EResultCode {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCStartMatchmakingResponse_Result
}

func (x *CMsgClientToGCStartMatchmakingResponse) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

type CMsgClientToGCStopMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCStopMatchmaking) Reset() {
	*x = CMsgClientToGCStopMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStopMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStopMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCStopMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStopMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStopMatchmaking) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{5}
}

type CMsgClientToGCStopMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgClientToGCStopMatchmakingResponse) Reset() {
	*x = CMsgClientToGCStopMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCStopMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStopMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCStopMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStopMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStopMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientToGCStopMatchmakingResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCToClientMatchmakingStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *CMsgGCToClientMatchmakingStopped_EReason `protobuf:"varint,1,opt,name=reason,enum=underlords.CMsgGCToClientMatchmakingStopped_EReason,def=0" json:"reason,omitempty"`
}

// Default values for CMsgGCToClientMatchmakingStopped fields.
const (
	Default_CMsgGCToClientMatchmakingStopped_Reason = CMsgGCToClientMatchmakingStopped_k_EResult_Unspecified
)

func (x *CMsgGCToClientMatchmakingStopped) Reset() {
	*x = CMsgGCToClientMatchmakingStopped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientMatchmakingStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientMatchmakingStopped) ProtoMessage() {}

func (x *CMsgGCToClientMatchmakingStopped) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientMatchmakingStopped.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientMatchmakingStopped) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGCToClientMatchmakingStopped) GetReason() CMsgGCToClientMatchmakingStopped_EReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Default_CMsgGCToClientMatchmakingStopped_Reason
}

type CMsgClientToGCLeaveLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgClientToGCLeaveLobby) Reset() {
	*x = CMsgClientToGCLeaveLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveLobby) ProtoMessage() {}

func (x *CMsgClientToGCLeaveLobby) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveLobby) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientToGCLeaveLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgClientToGCLeaveLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCLeaveLobbyResponse) Reset() {
	*x = CMsgClientToGCLeaveLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCLeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCLeaveLobbyResponse) ProtoMessage() {}

func (x *CMsgClientToGCLeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCLeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCLeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{9}
}

type CMsgClientWelcomeDAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency                  *uint32           `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	ExtraMessages             []*CExtraMsgBlock `protobuf:"bytes,2,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	CompatibilityVersion      *uint32           `protobuf:"varint,3,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
	SteamAnnouncementGid      *uint64           `protobuf:"varint,5,opt,name=steam_announcement_gid,json=steamAnnouncementGid" json:"steam_announcement_gid,omitempty"`
	ConsoleCommands           []string          `protobuf:"bytes,6,rep,name=console_commands,json=consoleCommands" json:"console_commands,omitempty"`
	PatchNotesPreviewPassword *string           `protobuf:"bytes,7,opt,name=patch_notes_preview_password,json=patchNotesPreviewPassword" json:"patch_notes_preview_password,omitempty"`
	LatestCompatVersion       *uint32           `protobuf:"varint,8,opt,name=latest_compat_version,json=latestCompatVersion" json:"latest_compat_version,omitempty"`
	LatestClientVersion       *uint32           `protobuf:"varint,9,opt,name=latest_client_version,json=latestClientVersion" json:"latest_client_version,omitempty"`
}

func (x *CMsgClientWelcomeDAC) Reset() {
	*x = CMsgClientWelcomeDAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientWelcomeDAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientWelcomeDAC) ProtoMessage() {}

func (x *CMsgClientWelcomeDAC) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientWelcomeDAC.ProtoReflect.Descriptor instead.
func (*CMsgClientWelcomeDAC) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientWelcomeDAC) GetCurrency() uint32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgClientWelcomeDAC) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CMsgClientWelcomeDAC) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

func (x *CMsgClientWelcomeDAC) GetSteamAnnouncementGid() uint64 {
	if x != nil && x.SteamAnnouncementGid != nil {
		return *x.SteamAnnouncementGid
	}
	return 0
}

func (x *CMsgClientWelcomeDAC) GetConsoleCommands() []string {
	if x != nil {
		return x.ConsoleCommands
	}
	return nil
}

func (x *CMsgClientWelcomeDAC) GetPatchNotesPreviewPassword() string {
	if x != nil && x.PatchNotesPreviewPassword != nil {
		return *x.PatchNotesPreviewPassword
	}
	return ""
}

func (x *CMsgClientWelcomeDAC) GetLatestCompatVersion() uint32 {
	if x != nil && x.LatestCompatVersion != nil {
		return *x.LatestCompatVersion
	}
	return 0
}

func (x *CMsgClientWelcomeDAC) GetLatestClientVersion() uint32 {
	if x != nil && x.LatestClientVersion != nil {
		return *x.LatestClientVersion
	}
	return 0
}

type CMsgClientToGCIsInMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCIsInMatchmaking) Reset() {
	*x = CMsgClientToGCIsInMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCIsInMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCIsInMatchmaking) ProtoMessage() {}

func (x *CMsgClientToGCIsInMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCIsInMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCIsInMatchmaking) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{11}
}

type CMsgClientToGCIsInMatchmakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMatchmaking *bool `protobuf:"varint,1,opt,name=in_matchmaking,json=inMatchmaking" json:"in_matchmaking,omitempty"`
}

func (x *CMsgClientToGCIsInMatchmakingResponse) Reset() {
	*x = CMsgClientToGCIsInMatchmakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCIsInMatchmakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCIsInMatchmakingResponse) ProtoMessage() {}

func (x *CMsgClientToGCIsInMatchmakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCIsInMatchmakingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCIsInMatchmakingResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientToGCIsInMatchmakingResponse) GetInMatchmaking() bool {
	if x != nil && x.InMatchmaking != nil {
		return *x.InMatchmaking
	}
	return false
}

type CMsgGCToClientSDRTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
}

func (x *CMsgGCToClientSDRTicket) Reset() {
	*x = CMsgGCToClientSDRTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientSDRTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSDRTicket) ProtoMessage() {}

func (x *CMsgGCToClientSDRTicket) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSDRTicket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSDRTicket) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgGCToClientSDRTicket) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

type CMsgClientToGCReplacementSDRTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId *uint64 `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgClientToGCReplacementSDRTicket) Reset() {
	*x = CMsgClientToGCReplacementSDRTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCReplacementSDRTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCReplacementSDRTicket) ProtoMessage() {}

func (x *CMsgClientToGCReplacementSDRTicket) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCReplacementSDRTicket.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCReplacementSDRTicket) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientToGCReplacementSDRTicket) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgClientToGCReplacementSDRTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       *string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) Reset() {
	*x = CMsgClientToGCReplacementSDRTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCReplacementSDRTicketResponse) ProtoMessage() {}

func (x *CMsgClientToGCReplacementSDRTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCReplacementSDRTicketResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCReplacementSDRTicketResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *CMsgClientToGCReplacementSDRTicketResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type CMsgClientToGCPartyCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyMmInfo      *CMsgPartyMMInfo `protobuf:"bytes,1,opt,name=party_mm_info,json=partyMmInfo" json:"party_mm_info,omitempty"`
	StartReady       *bool            `protobuf:"varint,2,opt,name=start_ready,json=startReady" json:"start_ready,omitempty"`
	InviteAccountId  *uint32          `protobuf:"varint,3,opt,name=invite_account_id,json=inviteAccountId" json:"invite_account_id,omitempty"`
	DisablePartyCode *bool            `protobuf:"varint,4,opt,name=disable_party_code,json=disablePartyCode" json:"disable_party_code,omitempty"`
}

func (x *CMsgClientToGCPartyCreate) Reset() {
	*x = CMsgClientToGCPartyCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyCreate) ProtoMessage() {}

func (x *CMsgClientToGCPartyCreate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyCreate.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyCreate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgClientToGCPartyCreate) GetPartyMmInfo() *CMsgPartyMMInfo {
	if x != nil {
		return x.PartyMmInfo
	}
	return nil
}

func (x *CMsgClientToGCPartyCreate) GetStartReady() bool {
	if x != nil && x.StartReady != nil {
		return *x.StartReady
	}
	return false
}

func (x *CMsgClientToGCPartyCreate) GetInviteAccountId() uint32 {
	if x != nil && x.InviteAccountId != nil {
		return *x.InviteAccountId
	}
	return 0
}

func (x *CMsgClientToGCPartyCreate) GetDisablePartyCode() bool {
	if x != nil && x.DisablePartyCode != nil {
		return *x.DisablePartyCode
	}
	return false
}

type CMsgClientToGCPartyCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCPartyCreateResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyCreateResponse_EResponse,def=0" json:"result,omitempty"`
	PartyId *uint64                                      `protobuf:"fixed64,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

// Default values for CMsgClientToGCPartyCreateResponse fields.
const (
	Default_CMsgClientToGCPartyCreateResponse_Result = CMsgClientToGCPartyCreateResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyCreateResponse) Reset() {
	*x = CMsgClientToGCPartyCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyCreateResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyCreateResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyCreateResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientToGCPartyCreateResponse) GetResult() CMsgClientToGCPartyCreateResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyCreateResponse_Result
}

func (x *CMsgClientToGCPartyCreateResponse) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgClientToGCPartyLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

func (x *CMsgClientToGCPartyLeave) Reset() {
	*x = CMsgClientToGCPartyLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyLeave) ProtoMessage() {}

func (x *CMsgClientToGCPartyLeave) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyLeave.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyLeave) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientToGCPartyLeave) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgClientToGCPartyLeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPartyLeaveResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyLeaveResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPartyLeaveResponse fields.
const (
	Default_CMsgClientToGCPartyLeaveResponse_Result = CMsgClientToGCPartyLeaveResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyLeaveResponse) Reset() {
	*x = CMsgClientToGCPartyLeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyLeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyLeaveResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyLeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyLeaveResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyLeaveResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgClientToGCPartyLeaveResponse) GetResult() CMsgClientToGCPartyLeaveResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyLeaveResponse_Result
}

type CMsgClientToGCPartyJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId     *uint64          `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	IsRejoin    *bool            `protobuf:"varint,2,opt,name=is_rejoin,json=isRejoin" json:"is_rejoin,omitempty"`
	PartyMmInfo *CMsgPartyMMInfo `protobuf:"bytes,3,opt,name=party_mm_info,json=partyMmInfo" json:"party_mm_info,omitempty"`
	StartReady  *bool            `protobuf:"varint,4,opt,name=start_ready,json=startReady" json:"start_ready,omitempty"`
}

func (x *CMsgClientToGCPartyJoin) Reset() {
	*x = CMsgClientToGCPartyJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyJoin) ProtoMessage() {}

func (x *CMsgClientToGCPartyJoin) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyJoin.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyJoin) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientToGCPartyJoin) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartyJoin) GetIsRejoin() bool {
	if x != nil && x.IsRejoin != nil {
		return *x.IsRejoin
	}
	return false
}

func (x *CMsgClientToGCPartyJoin) GetPartyMmInfo() *CMsgPartyMMInfo {
	if x != nil {
		return x.PartyMmInfo
	}
	return nil
}

func (x *CMsgClientToGCPartyJoin) GetStartReady() bool {
	if x != nil && x.StartReady != nil {
		return *x.StartReady
	}
	return false
}

type CMsgClientToGCPartyJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPartyJoinResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyJoinResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPartyJoinResponse fields.
const (
	Default_CMsgClientToGCPartyJoinResponse_Result = CMsgClientToGCPartyJoinResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyJoinResponse) Reset() {
	*x = CMsgClientToGCPartyJoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyJoinResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyJoinResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyJoinResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientToGCPartyJoinResponse) GetResult() CMsgClientToGCPartyJoinResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyJoinResponse_Result
}

type CMsgClientToGCPartyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId         *uint64                            `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	TargetAccountId *uint32                            `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ActionId        *CMsgClientToGCPartyAction_EAction `protobuf:"varint,3,opt,name=action_id,json=actionId,enum=underlords.CMsgClientToGCPartyAction_EAction,def=1" json:"action_id,omitempty"`
	UintValue       *uint64                            `protobuf:"varint,4,opt,name=uint_value,json=uintValue" json:"uint_value,omitempty"`
	BoolValue       *bool                              `protobuf:"varint,5,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
}

// Default values for CMsgClientToGCPartyAction fields.
const (
	Default_CMsgClientToGCPartyAction_ActionId = CMsgClientToGCPartyAction_k_eKickUser
)

func (x *CMsgClientToGCPartyAction) Reset() {
	*x = CMsgClientToGCPartyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyAction) ProtoMessage() {}

func (x *CMsgClientToGCPartyAction) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyAction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyAction) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientToGCPartyAction) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartyAction) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgClientToGCPartyAction) GetActionId() CMsgClientToGCPartyAction_EAction {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return Default_CMsgClientToGCPartyAction_ActionId
}

func (x *CMsgClientToGCPartyAction) GetUintValue() uint64 {
	if x != nil && x.UintValue != nil {
		return *x.UintValue
	}
	return 0
}

func (x *CMsgClientToGCPartyAction) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

type CMsgClientToGCPartyActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPartyActionResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyActionResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPartyActionResponse fields.
const (
	Default_CMsgClientToGCPartyActionResponse_Result = CMsgClientToGCPartyActionResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyActionResponse) Reset() {
	*x = CMsgClientToGCPartyActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyActionResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyActionResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientToGCPartyActionResponse) GetResult() CMsgClientToGCPartyActionResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyActionResponse_Result
}

type CMsgClientToGCPartyStartMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId               *uint64               `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ServerSearchKey       *string               `protobuf:"bytes,3,opt,name=server_search_key,json=serverSearchKey" json:"server_search_key,omitempty"`
	MatchMode             *EDACMatchMode        `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	DevIgnoreStagingFiles *bool                 `protobuf:"varint,5,opt,name=dev_ignore_staging_files,json=devIgnoreStagingFiles" json:"dev_ignore_staging_files,omitempty"`
	GameMode              *EDACGameMode         `protobuf:"varint,6,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	BotDifficulty         *EDACBotDifficulty    `protobuf:"varint,7,opt,name=bot_difficulty,json=botDifficulty,enum=underlords.EDACBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	GameModeSettings      *CMsgGameModeSettings `protobuf:"bytes,8,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
}

// Default values for CMsgClientToGCPartyStartMatch fields.
const (
	Default_CMsgClientToGCPartyStartMatch_MatchMode     = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgClientToGCPartyStartMatch_GameMode      = EDACGameMode_k_EDACGameMode_Invalid
	Default_CMsgClientToGCPartyStartMatch_BotDifficulty = EDACBotDifficulty_k_EDACBotDifficulty_None
)

func (x *CMsgClientToGCPartyStartMatch) Reset() {
	*x = CMsgClientToGCPartyStartMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyStartMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyStartMatch) ProtoMessage() {}

func (x *CMsgClientToGCPartyStartMatch) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyStartMatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyStartMatch) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientToGCPartyStartMatch) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartyStartMatch) GetServerSearchKey() string {
	if x != nil && x.ServerSearchKey != nil {
		return *x.ServerSearchKey
	}
	return ""
}

func (x *CMsgClientToGCPartyStartMatch) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientToGCPartyStartMatch_MatchMode
}

func (x *CMsgClientToGCPartyStartMatch) GetDevIgnoreStagingFiles() bool {
	if x != nil && x.DevIgnoreStagingFiles != nil {
		return *x.DevIgnoreStagingFiles
	}
	return false
}

func (x *CMsgClientToGCPartyStartMatch) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgClientToGCPartyStartMatch_GameMode
}

func (x *CMsgClientToGCPartyStartMatch) GetBotDifficulty() EDACBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CMsgClientToGCPartyStartMatch_BotDifficulty
}

func (x *CMsgClientToGCPartyStartMatch) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

type CMsgClientToGCPartyStartMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCPartyStartMatchResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyStartMatchResponse_EResponse,def=0" json:"result,omitempty"`
	AccountId *uint32                                          `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

// Default values for CMsgClientToGCPartyStartMatchResponse fields.
const (
	Default_CMsgClientToGCPartyStartMatchResponse_Result = CMsgClientToGCPartyStartMatchResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyStartMatchResponse) Reset() {
	*x = CMsgClientToGCPartyStartMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyStartMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyStartMatchResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyStartMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyStartMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyStartMatchResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientToGCPartyStartMatchResponse) GetResult() CMsgClientToGCPartyStartMatchResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyStartMatchResponse_Result
}

func (x *CMsgClientToGCPartyStartMatchResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCPartyInviteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId         *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	InviteAccountId *uint32 `protobuf:"varint,2,opt,name=invite_account_id,json=inviteAccountId" json:"invite_account_id,omitempty"`
}

func (x *CMsgClientToGCPartyInviteUser) Reset() {
	*x = CMsgClientToGCPartyInviteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyInviteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyInviteUser) ProtoMessage() {}

func (x *CMsgClientToGCPartyInviteUser) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyInviteUser.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyInviteUser) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientToGCPartyInviteUser) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartyInviteUser) GetInviteAccountId() uint32 {
	if x != nil && x.InviteAccountId != nil {
		return *x.InviteAccountId
	}
	return 0
}

type CMsgClientToGCPartyInviteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *CMsgClientToGCPartyInviteUserResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyInviteUserResponse_EResponse,def=0" json:"result,omitempty"`
	UserOnline *bool                                            `protobuf:"varint,2,opt,name=user_online,json=userOnline" json:"user_online,omitempty"`
}

// Default values for CMsgClientToGCPartyInviteUserResponse fields.
const (
	Default_CMsgClientToGCPartyInviteUserResponse_Result = CMsgClientToGCPartyInviteUserResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyInviteUserResponse) Reset() {
	*x = CMsgClientToGCPartyInviteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyInviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyInviteUserResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyInviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyInviteUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyInviteUserResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgClientToGCPartyInviteUserResponse) GetResult() CMsgClientToGCPartyInviteUserResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyInviteUserResponse_Result
}

func (x *CMsgClientToGCPartyInviteUserResponse) GetUserOnline() bool {
	if x != nil && x.UserOnline != nil {
		return *x.UserOnline
	}
	return false
}

type CMsgGCToClientPartyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId            *uint64                          `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	Event              *CMsgGCToClientPartyEvent_EEvent `protobuf:"varint,2,opt,name=event,enum=underlords.CMsgGCToClientPartyEvent_EEvent,def=1" json:"event,omitempty"`
	InitiatorAccountId *uint32                          `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	TargetAccountId    *uint32                          `protobuf:"varint,4,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	BytesData          []byte                           `protobuf:"bytes,5,opt,name=bytes_data,json=bytesData" json:"bytes_data,omitempty"`
	StrData            *string                          `protobuf:"bytes,6,opt,name=str_data,json=strData" json:"str_data,omitempty"`
	UintData           *uint64                          `protobuf:"varint,7,opt,name=uint_data,json=uintData" json:"uint_data,omitempty"`
}

// Default values for CMsgGCToClientPartyEvent fields.
const (
	Default_CMsgGCToClientPartyEvent_Event = CMsgGCToClientPartyEvent_k_ePlayerKicked
)

func (x *CMsgGCToClientPartyEvent) Reset() {
	*x = CMsgGCToClientPartyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientPartyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPartyEvent) ProtoMessage() {}

func (x *CMsgGCToClientPartyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPartyEvent.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPartyEvent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgGCToClientPartyEvent) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgGCToClientPartyEvent) GetEvent() CMsgGCToClientPartyEvent_EEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgGCToClientPartyEvent_Event
}

func (x *CMsgGCToClientPartyEvent) GetInitiatorAccountId() uint32 {
	if x != nil && x.InitiatorAccountId != nil {
		return *x.InitiatorAccountId
	}
	return 0
}

func (x *CMsgGCToClientPartyEvent) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgGCToClientPartyEvent) GetBytesData() []byte {
	if x != nil {
		return x.BytesData
	}
	return nil
}

func (x *CMsgGCToClientPartyEvent) GetStrData() string {
	if x != nil && x.StrData != nil {
		return *x.StrData
	}
	return ""
}

func (x *CMsgGCToClientPartyEvent) GetUintData() uint64 {
	if x != nil && x.UintData != nil {
		return *x.UintData
	}
	return 0
}

type CMsgClientToGCPartyClientVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId     *uint64          `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	PartyMmInfo *CMsgPartyMMInfo `protobuf:"bytes,2,opt,name=party_mm_info,json=partyMmInfo" json:"party_mm_info,omitempty"`
}

func (x *CMsgClientToGCPartyClientVersion) Reset() {
	*x = CMsgClientToGCPartyClientVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyClientVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyClientVersion) ProtoMessage() {}

func (x *CMsgClientToGCPartyClientVersion) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyClientVersion.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyClientVersion) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientToGCPartyClientVersion) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartyClientVersion) GetPartyMmInfo() *CMsgPartyMMInfo {
	if x != nil {
		return x.PartyMmInfo
	}
	return nil
}

type CMsgGCToClientCanRejoinParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *uint64 `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

func (x *CMsgGCToClientCanRejoinParty) Reset() {
	*x = CMsgGCToClientCanRejoinParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientCanRejoinParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCanRejoinParty) ProtoMessage() {}

func (x *CMsgGCToClientCanRejoinParty) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCanRejoinParty.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCanRejoinParty) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgGCToClientCanRejoinParty) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgClientToGCPartyJoinViaCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinCode    *uint64          `protobuf:"varint,1,opt,name=join_code,json=joinCode" json:"join_code,omitempty"`
	PartyMmInfo *CMsgPartyMMInfo `protobuf:"bytes,2,opt,name=party_mm_info,json=partyMmInfo" json:"party_mm_info,omitempty"`
	StartReady  *bool            `protobuf:"varint,3,opt,name=start_ready,json=startReady" json:"start_ready,omitempty"`
}

func (x *CMsgClientToGCPartyJoinViaCode) Reset() {
	*x = CMsgClientToGCPartyJoinViaCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyJoinViaCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyJoinViaCode) ProtoMessage() {}

func (x *CMsgClientToGCPartyJoinViaCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyJoinViaCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyJoinViaCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientToGCPartyJoinViaCode) GetJoinCode() uint64 {
	if x != nil && x.JoinCode != nil {
		return *x.JoinCode
	}
	return 0
}

func (x *CMsgClientToGCPartyJoinViaCode) GetPartyMmInfo() *CMsgPartyMMInfo {
	if x != nil {
		return x.PartyMmInfo
	}
	return nil
}

func (x *CMsgClientToGCPartyJoinViaCode) GetStartReady() bool {
	if x != nil && x.StartReady != nil {
		return *x.StartReady
	}
	return false
}

type CMsgClientToGCPartyJoinViaCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCPartyJoinResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartyJoinResponse_EResponse,def=0" json:"result,omitempty"`
	PartyId *uint64                                    `protobuf:"fixed64,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

// Default values for CMsgClientToGCPartyJoinViaCodeResponse fields.
const (
	Default_CMsgClientToGCPartyJoinViaCodeResponse_Result = CMsgClientToGCPartyJoinResponse_k_eInternalError
)

func (x *CMsgClientToGCPartyJoinViaCodeResponse) Reset() {
	*x = CMsgClientToGCPartyJoinViaCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartyJoinViaCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartyJoinViaCodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartyJoinViaCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartyJoinViaCodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartyJoinViaCodeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientToGCPartyJoinViaCodeResponse) GetResult() CMsgClientToGCPartyJoinResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartyJoinViaCodeResponse_Result
}

func (x *CMsgClientToGCPartyJoinViaCodeResponse) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

type CMsgGCToClientDevMMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []*CMsgGCToClientDevMMStatus_Party `protobuf:"bytes,2,rep,name=parties" json:"parties,omitempty"`
}

func (x *CMsgGCToClientDevMMStatus) Reset() {
	*x = CMsgGCToClientDevMMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientDevMMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientDevMMStatus) ProtoMessage() {}

func (x *CMsgGCToClientDevMMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientDevMMStatus.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientDevMMStatus) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgGCToClientDevMMStatus) GetParties() []*CMsgGCToClientDevMMStatus_Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

type CMsgGCItemEditorReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCItemEditorReservationsRequest) Reset() {
	*x = CMsgGCItemEditorReservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservationsRequest) ProtoMessage() {}

func (x *CMsgGCItemEditorReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservationsRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservationsRequest) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{34}
}

type CMsgGCItemEditorReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CMsgGCItemEditorReservation) Reset() {
	*x = CMsgGCItemEditorReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservation) ProtoMessage() {}

func (x *CMsgGCItemEditorReservation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservation.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGCItemEditorReservation) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReservation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgGCItemEditorReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reservations []*CMsgGCItemEditorReservation `protobuf:"bytes,1,rep,name=reservations" json:"reservations,omitempty"`
}

func (x *CMsgGCItemEditorReservationsResponse) Reset() {
	*x = CMsgGCItemEditorReservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservationsResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservationsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservationsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGCItemEditorReservationsResponse) GetReservations() []*CMsgGCItemEditorReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CMsgGCItemEditorReserveItemDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (x *CMsgGCItemEditorReserveItemDef) Reset() {
	*x = CMsgGCItemEditorReserveItemDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReserveItemDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReserveItemDef) ProtoMessage() {}

func (x *CMsgGCItemEditorReserveItemDef) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReserveItemDef.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReserveItemDef) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCItemEditorReserveItemDef) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReserveItemDef) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type CMsgGCItemEditorReserveItemDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Result   *uint32 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgGCItemEditorReserveItemDefResponse) Reset() {
	*x = CMsgGCItemEditorReserveItemDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReserveItemDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReserveItemDefResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReserveItemDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReserveItemDefResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReserveItemDefResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgGCItemEditorReleaseReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (x *CMsgGCItemEditorReleaseReservation) Reset() {
	*x = CMsgGCItemEditorReleaseReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReleaseReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReleaseReservation) ProtoMessage() {}

func (x *CMsgGCItemEditorReleaseReservation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReleaseReservation.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReleaseReservation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgGCItemEditorReleaseReservation) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReleaseReservation) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type CMsgGCItemEditorReleaseReservationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Released *bool   `protobuf:"varint,2,opt,name=released" json:"released,omitempty"`
}

func (x *CMsgGCItemEditorReleaseReservationResponse) Reset() {
	*x = CMsgGCItemEditorReleaseReservationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCItemEditorReleaseReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReleaseReservationResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReleaseReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReleaseReservationResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReleaseReservationResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGCItemEditorReleaseReservationResponse) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReleaseReservationResponse) GetReleased() bool {
	if x != nil && x.Released != nil {
		return *x.Released
	}
	return false
}

type CMsgClientToGCDevForceMatchFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCDevForceMatchFormation) Reset() {
	*x = CMsgClientToGCDevForceMatchFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCDevForceMatchFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDevForceMatchFormation) ProtoMessage() {}

func (x *CMsgClientToGCDevForceMatchFormation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDevForceMatchFormation.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDevForceMatchFormation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{41}
}

type CMsgClientToGCEventRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId   *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (x *CMsgClientToGCEventRequestInfo) Reset() {
	*x = CMsgClientToGCEventRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventRequestInfo) ProtoMessage() {}

func (x *CMsgClientToGCEventRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventRequestInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventRequestInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgClientToGCEventRequestInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCEventRequestInfo) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgGCToClientEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          *uint32                                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId            *uint32                                     `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventState         *CMsgGCToClientEventInfo_EventState         `protobuf:"bytes,3,opt,name=event_state,json=eventState" json:"event_state,omitempty"`
	Currencies         []*CMsgGCToClientEventInfo_Currency         `protobuf:"bytes,5,rep,name=currencies" json:"currencies,omitempty"`
	Claims             []*CMsgGCToClientEventInfo_Claim            `protobuf:"bytes,6,rep,name=claims" json:"claims,omitempty"`
	Challenges         []*CMsgGCToClientEventInfo_Challenge        `protobuf:"bytes,7,rep,name=challenges" json:"challenges,omitempty"`
	VirtualItems       []*CMsgGCToClientEventInfo_VirtualItem      `protobuf:"bytes,8,rep,name=virtual_items,json=virtualItems" json:"virtual_items,omitempty"`
	VirtualItemEquips  []*CMsgGCToClientEventInfo_VirtualItemEquip `protobuf:"bytes,9,rep,name=virtual_item_equips,json=virtualItemEquips" json:"virtual_item_equips,omitempty"`
	VirtualItemRevokes []*CMsgGCToClientEventInfo_VirtualItem      `protobuf:"bytes,11,rep,name=virtual_item_revokes,json=virtualItemRevokes" json:"virtual_item_revokes,omitempty"`
	MergeContents      *bool                                       `protobuf:"varint,10,opt,name=merge_contents,json=mergeContents" json:"merge_contents,omitempty"`
}

func (x *CMsgGCToClientEventInfo) Reset() {
	*x = CMsgGCToClientEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGCToClientEventInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo) GetEventState() *CMsgGCToClientEventInfo_EventState {
	if x != nil {
		return x.EventState
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetCurrencies() []*CMsgGCToClientEventInfo_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetClaims() []*CMsgGCToClientEventInfo_Claim {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetChallenges() []*CMsgGCToClientEventInfo_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetVirtualItems() []*CMsgGCToClientEventInfo_VirtualItem {
	if x != nil {
		return x.VirtualItems
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetVirtualItemEquips() []*CMsgGCToClientEventInfo_VirtualItemEquip {
	if x != nil {
		return x.VirtualItemEquips
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetVirtualItemRevokes() []*CMsgGCToClientEventInfo_VirtualItem {
	if x != nil {
		return x.VirtualItemRevokes
	}
	return nil
}

func (x *CMsgGCToClientEventInfo) GetMergeContents() bool {
	if x != nil && x.MergeContents != nil {
		return *x.MergeContents
	}
	return false
}

type CMsgClientToGCEventRequestInfoSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId   *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (x *CMsgClientToGCEventRequestInfoSync) Reset() {
	*x = CMsgClientToGCEventRequestInfoSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventRequestInfoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventRequestInfoSync) ProtoMessage() {}

func (x *CMsgClientToGCEventRequestInfoSync) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventRequestInfoSync.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventRequestInfoSync) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgClientToGCEventRequestInfoSync) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCEventRequestInfoSync) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCEventRequestInfoSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCEventRequestInfoSyncResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventRequestInfoSyncResponse_EResponse,def=0" json:"result,omitempty"`
	EventInfo *CMsgGCToClientEventInfo                              `protobuf:"bytes,2,opt,name=event_info,json=eventInfo" json:"event_info,omitempty"`
}

// Default values for CMsgClientToGCEventRequestInfoSyncResponse fields.
const (
	Default_CMsgClientToGCEventRequestInfoSyncResponse_Result = CMsgClientToGCEventRequestInfoSyncResponse_k_eInternalError
)

func (x *CMsgClientToGCEventRequestInfoSyncResponse) Reset() {
	*x = CMsgClientToGCEventRequestInfoSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventRequestInfoSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventRequestInfoSyncResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventRequestInfoSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventRequestInfoSyncResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventRequestInfoSyncResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgClientToGCEventRequestInfoSyncResponse) GetResult() CMsgClientToGCEventRequestInfoSyncResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventRequestInfoSyncResponse_Result
}

func (x *CMsgClientToGCEventRequestInfoSyncResponse) GetEventInfo() *CMsgGCToClientEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

type CMsgGCToClientEventInfoSerialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventInfo *CMsgGCToClientEventInfo `protobuf:"bytes,1,opt,name=event_info,json=eventInfo" json:"event_info,omitempty"`
	TimeStamp *uint32                  `protobuf:"varint,2,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Version   *uint32                  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	AccountId *uint32                  `protobuf:"varint,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGCToClientEventInfoSerialize) Reset() {
	*x = CMsgGCToClientEventInfoSerialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfoSerialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfoSerialize) ProtoMessage() {}

func (x *CMsgGCToClientEventInfoSerialize) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfoSerialize.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfoSerialize) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgGCToClientEventInfoSerialize) GetEventInfo() *CMsgGCToClientEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

func (x *CMsgGCToClientEventInfoSerialize) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgGCToClientEventInfoSerialize) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCToClientEventInfoSerialize) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCEventClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ClaimId       *uint32 `protobuf:"varint,2,opt,name=claim_id,json=claimId" json:"claim_id,omitempty"`
	StartingValue *uint32 `protobuf:"varint,3,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
}

func (x *CMsgClientToGCEventClaim) Reset() {
	*x = CMsgClientToGCEventClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventClaim) ProtoMessage() {}

func (x *CMsgClientToGCEventClaim) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventClaim.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventClaim) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgClientToGCEventClaim) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventClaim) GetClaimId() uint32 {
	if x != nil && x.ClaimId != nil {
		return *x.ClaimId
	}
	return 0
}

func (x *CMsgClientToGCEventClaim) GetStartingValue() uint32 {
	if x != nil && x.StartingValue != nil {
		return *x.StartingValue
	}
	return 0
}

type CMsgEventClaimRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items        []*CMsgEventClaimRewards_Item        `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Achievements []*CMsgEventClaimRewards_Achievement `protobuf:"bytes,2,rep,name=achievements" json:"achievements,omitempty"`
	Currencies   []*CMsgEventClaimRewards_Currency    `protobuf:"bytes,3,rep,name=currencies" json:"currencies,omitempty"`
	Challenges   []*CMsgEventClaimRewards_Challenge   `protobuf:"bytes,4,rep,name=challenges" json:"challenges,omitempty"`
}

func (x *CMsgEventClaimRewards) Reset() {
	*x = CMsgEventClaimRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEventClaimRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventClaimRewards) ProtoMessage() {}

func (x *CMsgEventClaimRewards) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventClaimRewards.ProtoReflect.Descriptor instead.
func (*CMsgEventClaimRewards) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgEventClaimRewards) GetItems() []*CMsgEventClaimRewards_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgEventClaimRewards) GetAchievements() []*CMsgEventClaimRewards_Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgEventClaimRewards) GetCurrencies() []*CMsgEventClaimRewards_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *CMsgEventClaimRewards) GetChallenges() []*CMsgEventClaimRewards_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type CMsgClientToGCEventClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCEventClaimResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventClaimResponse_EResponse,def=0" json:"result,omitempty"`
	Rewards *CMsgEventClaimRewards                      `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

// Default values for CMsgClientToGCEventClaimResponse fields.
const (
	Default_CMsgClientToGCEventClaimResponse_Result = CMsgClientToGCEventClaimResponse_k_eInternalError
)

func (x *CMsgClientToGCEventClaimResponse) Reset() {
	*x = CMsgClientToGCEventClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventClaimResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventClaimResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventClaimResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgClientToGCEventClaimResponse) GetResult() CMsgClientToGCEventClaimResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventClaimResponse_Result
}

func (x *CMsgClientToGCEventClaimResponse) GetRewards() *CMsgEventClaimRewards {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CMsgClientToGCEquipLoadout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadoutSlot    []uint32 `protobuf:"varint,1,rep,name=loadout_slot,json=loadoutSlot" json:"loadout_slot,omitempty"`
	ItemId         []uint64 `protobuf:"varint,2,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	LoadoutSubSlot []uint32 `protobuf:"varint,3,rep,name=loadout_sub_slot,json=loadoutSubSlot" json:"loadout_sub_slot,omitempty"`
}

func (x *CMsgClientToGCEquipLoadout) Reset() {
	*x = CMsgClientToGCEquipLoadout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEquipLoadout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEquipLoadout) ProtoMessage() {}

func (x *CMsgClientToGCEquipLoadout) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEquipLoadout.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEquipLoadout) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgClientToGCEquipLoadout) GetLoadoutSlot() []uint32 {
	if x != nil {
		return x.LoadoutSlot
	}
	return nil
}

func (x *CMsgClientToGCEquipLoadout) GetItemId() []uint64 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

func (x *CMsgClientToGCEquipLoadout) GetLoadoutSubSlot() []uint32 {
	if x != nil {
		return x.LoadoutSubSlot
	}
	return nil
}

type CMsgClientToGCEquipLoadoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEquipLoadoutResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEquipLoadoutResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEquipLoadoutResponse fields.
const (
	Default_CMsgClientToGCEquipLoadoutResponse_Result = CMsgClientToGCEquipLoadoutResponse_k_eInternalError
)

func (x *CMsgClientToGCEquipLoadoutResponse) Reset() {
	*x = CMsgClientToGCEquipLoadoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEquipLoadoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEquipLoadoutResponse) ProtoMessage() {}

func (x *CMsgClientToGCEquipLoadoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEquipLoadoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEquipLoadoutResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientToGCEquipLoadoutResponse) GetResult() CMsgClientToGCEquipLoadoutResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEquipLoadoutResponse_Result
}

type CMsgClientToGCSpectateUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpectateAccountId *uint32         `protobuf:"varint,1,opt,name=spectate_account_id,json=spectateAccountId" json:"spectate_account_id,omitempty"`
	RegionMode        *EDACRegionMode `protobuf:"varint,2,opt,name=region_mode,json=regionMode,enum=underlords.EDACRegionMode,def=0" json:"region_mode,omitempty"`
}

// Default values for CMsgClientToGCSpectateUser fields.
const (
	Default_CMsgClientToGCSpectateUser_RegionMode = EDACRegionMode_k_EDACRegionMode_ROW
)

func (x *CMsgClientToGCSpectateUser) Reset() {
	*x = CMsgClientToGCSpectateUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSpectateUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSpectateUser) ProtoMessage() {}

func (x *CMsgClientToGCSpectateUser) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSpectateUser.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSpectateUser) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgClientToGCSpectateUser) GetSpectateAccountId() uint32 {
	if x != nil && x.SpectateAccountId != nil {
		return *x.SpectateAccountId
	}
	return 0
}

func (x *CMsgClientToGCSpectateUser) GetRegionMode() EDACRegionMode {
	if x != nil && x.RegionMode != nil {
		return *x.RegionMode
	}
	return Default_CMsgClientToGCSpectateUser_RegionMode
}

type CMsgClientToGCSpectateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         *CMsgClientToGCSpectateUserResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCSpectateUserResponse_EResponse,def=0" json:"result,omitempty"`
	ServerSteamId  *uint64                                       `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	SdrKey         []byte                                        `protobuf:"bytes,4,opt,name=sdr_key,json=sdrKey" json:"sdr_key,omitempty"`
	UdpConnectIp   *uint32                                       `protobuf:"varint,5,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort *uint32                                       `protobuf:"varint,6,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
}

// Default values for CMsgClientToGCSpectateUserResponse fields.
const (
	Default_CMsgClientToGCSpectateUserResponse_Result = CMsgClientToGCSpectateUserResponse_k_eInternalError
)

func (x *CMsgClientToGCSpectateUserResponse) Reset() {
	*x = CMsgClientToGCSpectateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSpectateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSpectateUserResponse) ProtoMessage() {}

func (x *CMsgClientToGCSpectateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSpectateUserResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSpectateUserResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgClientToGCSpectateUserResponse) GetResult() CMsgClientToGCSpectateUserResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSpectateUserResponse_Result
}

func (x *CMsgClientToGCSpectateUserResponse) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgClientToGCSpectateUserResponse) GetSdrKey() []byte {
	if x != nil {
		return x.SdrKey
	}
	return nil
}

func (x *CMsgClientToGCSpectateUserResponse) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CMsgClientToGCSpectateUserResponse) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

type CMsgClientToGCRecordLocalBotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp        *uint32       `protobuf:"varint,1,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Version          *uint32       `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	DurationS        *uint32       `protobuf:"varint,3,opt,name=duration_s,json=durationS" json:"duration_s,omitempty"`
	FinalPlace       *uint32       `protobuf:"varint,4,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
	Difficulty       *uint32       `protobuf:"varint,5,opt,name=difficulty" json:"difficulty,omitempty"`
	Rounds           *uint32       `protobuf:"varint,6,opt,name=rounds" json:"rounds,omitempty"`
	RemainingPlayers *uint32       `protobuf:"varint,7,opt,name=remaining_players,json=remainingPlayers" json:"remaining_players,omitempty"`
	Platform         *EDACPlatform `protobuf:"varint,8,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	IsTutorial       *bool         `protobuf:"varint,9,opt,name=is_tutorial,json=isTutorial" json:"is_tutorial,omitempty"`
	GameMode         *EDACGameMode `protobuf:"varint,10,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
}

// Default values for CMsgClientToGCRecordLocalBotMatch fields.
const (
	Default_CMsgClientToGCRecordLocalBotMatch_Platform = EDACPlatform_k_eDACPlatform_None
	Default_CMsgClientToGCRecordLocalBotMatch_GameMode = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CMsgClientToGCRecordLocalBotMatch) Reset() {
	*x = CMsgClientToGCRecordLocalBotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRecordLocalBotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecordLocalBotMatch) ProtoMessage() {}

func (x *CMsgClientToGCRecordLocalBotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecordLocalBotMatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecordLocalBotMatch) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetDurationS() uint32 {
	if x != nil && x.DurationS != nil {
		return *x.DurationS
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetFinalPlace() uint32 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetRounds() uint32 {
	if x != nil && x.Rounds != nil {
		return *x.Rounds
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetRemainingPlayers() uint32 {
	if x != nil && x.RemainingPlayers != nil {
		return *x.RemainingPlayers
	}
	return 0
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgClientToGCRecordLocalBotMatch_Platform
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetIsTutorial() bool {
	if x != nil && x.IsTutorial != nil {
		return *x.IsTutorial
	}
	return false
}

func (x *CMsgClientToGCRecordLocalBotMatch) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgClientToGCRecordLocalBotMatch_GameMode
}

type CMsgClientToGCRerollChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId     *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
}

func (x *CMsgClientToGCRerollChallenge) Reset() {
	*x = CMsgClientToGCRerollChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRerollChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRerollChallenge) ProtoMessage() {}

func (x *CMsgClientToGCRerollChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRerollChallenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRerollChallenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgClientToGCRerollChallenge) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCRerollChallenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCRerollChallenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

type CMsgClientToGCRerollChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCRerollChallengeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCRerollChallengeResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCRerollChallengeResponse fields.
const (
	Default_CMsgClientToGCRerollChallengeResponse_Result = CMsgClientToGCRerollChallengeResponse_k_eInternalError
)

func (x *CMsgClientToGCRerollChallengeResponse) Reset() {
	*x = CMsgClientToGCRerollChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRerollChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRerollChallengeResponse) ProtoMessage() {}

func (x *CMsgClientToGCRerollChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRerollChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRerollChallengeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientToGCRerollChallengeResponse) GetResult() CMsgClientToGCRerollChallengeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRerollChallengeResponse_Result
}

type CMsgClientToGCClaimChallengeReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId          *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId      *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	StartingClaimed *uint32 `protobuf:"varint,4,opt,name=starting_claimed,json=startingClaimed" json:"starting_claimed,omitempty"`
}

func (x *CMsgClientToGCClaimChallengeReward) Reset() {
	*x = CMsgClientToGCClaimChallengeReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCClaimChallengeReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimChallengeReward) ProtoMessage() {}

func (x *CMsgClientToGCClaimChallengeReward) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimChallengeReward.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimChallengeReward) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgClientToGCClaimChallengeReward) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCClaimChallengeReward) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCClaimChallengeReward) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgClientToGCClaimChallengeReward) GetStartingClaimed() uint32 {
	if x != nil && x.StartingClaimed != nil {
		return *x.StartingClaimed
	}
	return 0
}

type CMsgClientToGCClaimChallengeRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCClaimChallengeRewardResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCClaimChallengeRewardResponse_EResponse,def=0" json:"result,omitempty"`
	Rewards *CMsgEventClaimRewards                                `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

// Default values for CMsgClientToGCClaimChallengeRewardResponse fields.
const (
	Default_CMsgClientToGCClaimChallengeRewardResponse_Result = CMsgClientToGCClaimChallengeRewardResponse_k_eInternalError
)

func (x *CMsgClientToGCClaimChallengeRewardResponse) Reset() {
	*x = CMsgClientToGCClaimChallengeRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCClaimChallengeRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimChallengeRewardResponse) ProtoMessage() {}

func (x *CMsgClientToGCClaimChallengeRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimChallengeRewardResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimChallengeRewardResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgClientToGCClaimChallengeRewardResponse) GetResult() CMsgClientToGCClaimChallengeRewardResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCClaimChallengeRewardResponse_Result
}

func (x *CMsgClientToGCClaimChallengeRewardResponse) GetRewards() *CMsgEventClaimRewards {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CMsgClientToGCGetFriendCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCGetFriendCodes) Reset() {
	*x = CMsgClientToGCGetFriendCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendCodes) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendCodes) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendCodes.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendCodes) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{59}
}

type CMsgClientToGCGetFriendCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *CMsgClientToGCGetFriendCodesResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetFriendCodesResponse_EResponse,def=0" json:"result,omitempty"`
	CodeList []*CMsgClientToGCGetFriendCodesResponse_Code    `protobuf:"bytes,2,rep,name=code_list,json=codeList" json:"code_list,omitempty"`
}

// Default values for CMsgClientToGCGetFriendCodesResponse fields.
const (
	Default_CMsgClientToGCGetFriendCodesResponse_Result = CMsgClientToGCGetFriendCodesResponse_k_eInternalError
)

func (x *CMsgClientToGCGetFriendCodesResponse) Reset() {
	*x = CMsgClientToGCGetFriendCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendCodesResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendCodesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendCodesResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgClientToGCGetFriendCodesResponse) GetResult() CMsgClientToGCGetFriendCodesResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetFriendCodesResponse_Result
}

func (x *CMsgClientToGCGetFriendCodesResponse) GetCodeList() []*CMsgClientToGCGetFriendCodesResponse_Code {
	if x != nil {
		return x.CodeList
	}
	return nil
}

type CMsgClientToGCCreateFriendCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCCreateFriendCode) Reset() {
	*x = CMsgClientToGCCreateFriendCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCreateFriendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateFriendCode) ProtoMessage() {}

func (x *CMsgClientToGCCreateFriendCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateFriendCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateFriendCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{61}
}

type CMsgClientToGCCreateFriendCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCCreateFriendCodeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCCreateFriendCodeResponse_EResponse,def=0" json:"result,omitempty"`
	Code   *CMsgClientToGCGetFriendCodesResponse_Code        `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

// Default values for CMsgClientToGCCreateFriendCodeResponse fields.
const (
	Default_CMsgClientToGCCreateFriendCodeResponse_Result = CMsgClientToGCCreateFriendCodeResponse_k_eInternalError
)

func (x *CMsgClientToGCCreateFriendCodeResponse) Reset() {
	*x = CMsgClientToGCCreateFriendCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCreateFriendCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateFriendCodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCCreateFriendCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateFriendCodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateFriendCodeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgClientToGCCreateFriendCodeResponse) GetResult() CMsgClientToGCCreateFriendCodeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCreateFriendCodeResponse_Result
}

func (x *CMsgClientToGCCreateFriendCodeResponse) GetCode() *CMsgClientToGCGetFriendCodesResponse_Code {
	if x != nil {
		return x.Code
	}
	return nil
}

type CMsgClientToGCCheckFriendCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendCode *uint64 `protobuf:"varint,1,opt,name=friend_code,json=friendCode" json:"friend_code,omitempty"`
}

func (x *CMsgClientToGCCheckFriendCode) Reset() {
	*x = CMsgClientToGCCheckFriendCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCheckFriendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCheckFriendCode) ProtoMessage() {}

func (x *CMsgClientToGCCheckFriendCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCheckFriendCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCheckFriendCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgClientToGCCheckFriendCode) GetFriendCode() uint64 {
	if x != nil && x.FriendCode != nil {
		return *x.FriendCode
	}
	return 0
}

type CMsgClientToGCCheckFriendCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *CMsgClientToGCCheckFriendCodeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCCheckFriendCodeResponse_EResponse,def=0" json:"result,omitempty"`
	AccountId *uint32                                          `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

// Default values for CMsgClientToGCCheckFriendCodeResponse fields.
const (
	Default_CMsgClientToGCCheckFriendCodeResponse_Result = CMsgClientToGCCheckFriendCodeResponse_k_eInternalError
)

func (x *CMsgClientToGCCheckFriendCodeResponse) Reset() {
	*x = CMsgClientToGCCheckFriendCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCheckFriendCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCheckFriendCodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCCheckFriendCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCheckFriendCodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCheckFriendCodeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgClientToGCCheckFriendCodeResponse) GetResult() CMsgClientToGCCheckFriendCodeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCheckFriendCodeResponse_Result
}

func (x *CMsgClientToGCCheckFriendCodeResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCRedeemFriendCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendCode      *uint64 `protobuf:"varint,1,opt,name=friend_code,json=friendCode" json:"friend_code,omitempty"`
	TargetAccountId *uint32 `protobuf:"varint,2,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
}

func (x *CMsgClientToGCRedeemFriendCode) Reset() {
	*x = CMsgClientToGCRedeemFriendCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRedeemFriendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRedeemFriendCode) ProtoMessage() {}

func (x *CMsgClientToGCRedeemFriendCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRedeemFriendCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRedeemFriendCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgClientToGCRedeemFriendCode) GetFriendCode() uint64 {
	if x != nil && x.FriendCode != nil {
		return *x.FriendCode
	}
	return 0
}

func (x *CMsgClientToGCRedeemFriendCode) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

type CMsgClientToGCRedeemFriendCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCCheckFriendCodeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCCheckFriendCodeResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCRedeemFriendCodeResponse fields.
const (
	Default_CMsgClientToGCRedeemFriendCodeResponse_Result = CMsgClientToGCCheckFriendCodeResponse_k_eInternalError
)

func (x *CMsgClientToGCRedeemFriendCodeResponse) Reset() {
	*x = CMsgClientToGCRedeemFriendCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRedeemFriendCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRedeemFriendCodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCRedeemFriendCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRedeemFriendCodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRedeemFriendCodeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgClientToGCRedeemFriendCodeResponse) GetResult() CMsgClientToGCCheckFriendCodeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRedeemFriendCodeResponse_Result
}

type CMsgClientToGCRevokeFriendCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendCode *uint64 `protobuf:"varint,1,opt,name=friend_code,json=friendCode" json:"friend_code,omitempty"`
}

func (x *CMsgClientToGCRevokeFriendCode) Reset() {
	*x = CMsgClientToGCRevokeFriendCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRevokeFriendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRevokeFriendCode) ProtoMessage() {}

func (x *CMsgClientToGCRevokeFriendCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRevokeFriendCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRevokeFriendCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgClientToGCRevokeFriendCode) GetFriendCode() uint64 {
	if x != nil && x.FriendCode != nil {
		return *x.FriendCode
	}
	return 0
}

type CMsgClientToGCRevokeFriendCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCRevokeFriendCodeResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCRevokeFriendCodeResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCRevokeFriendCodeResponse fields.
const (
	Default_CMsgClientToGCRevokeFriendCodeResponse_Result = CMsgClientToGCRevokeFriendCodeResponse_k_eInternalError
)

func (x *CMsgClientToGCRevokeFriendCodeResponse) Reset() {
	*x = CMsgClientToGCRevokeFriendCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCRevokeFriendCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRevokeFriendCodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCRevokeFriendCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRevokeFriendCodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRevokeFriendCodeResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgClientToGCRevokeFriendCodeResponse) GetResult() CMsgClientToGCRevokeFriendCodeResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRevokeFriendCodeResponse_Result
}

type CMsgClientToGCDevEventOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *CMsgClientToGCDevEventOperation_EOperation `protobuf:"varint,1,opt,name=operation,enum=underlords.CMsgClientToGCDevEventOperation_EOperation,def=0" json:"operation,omitempty"`
	EventId   *uint32                                     `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Id        *uint32                                     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Amount    *uint32                                     `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	UintVal1  *uint64                                     `protobuf:"varint,5,opt,name=uint_val1,json=uintVal1" json:"uint_val1,omitempty"`
	UintVal2  *uint64                                     `protobuf:"varint,6,opt,name=uint_val2,json=uintVal2" json:"uint_val2,omitempty"`
}

// Default values for CMsgClientToGCDevEventOperation fields.
const (
	Default_CMsgClientToGCDevEventOperation_Operation = CMsgClientToGCDevEventOperation_k_eOp_Reset
)

func (x *CMsgClientToGCDevEventOperation) Reset() {
	*x = CMsgClientToGCDevEventOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCDevEventOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDevEventOperation) ProtoMessage() {}

func (x *CMsgClientToGCDevEventOperation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDevEventOperation.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDevEventOperation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgClientToGCDevEventOperation) GetOperation() CMsgClientToGCDevEventOperation_EOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return Default_CMsgClientToGCDevEventOperation_Operation
}

func (x *CMsgClientToGCDevEventOperation) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCDevEventOperation) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgClientToGCDevEventOperation) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CMsgClientToGCDevEventOperation) GetUintVal1() uint64 {
	if x != nil && x.UintVal1 != nil {
		return *x.UintVal1
	}
	return 0
}

func (x *CMsgClientToGCDevEventOperation) GetUintVal2() uint64 {
	if x != nil && x.UintVal2 != nil {
		return *x.UintVal2
	}
	return 0
}

type CMsgClientToGCDevEventOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCDevEventOperationResponse) Reset() {
	*x = CMsgClientToGCDevEventOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCDevEventOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDevEventOperationResponse) ProtoMessage() {}

func (x *CMsgClientToGCDevEventOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDevEventOperationResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDevEventOperationResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{70}
}

type CMsgGCToClientUpdateConsoleCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleCommands []string `protobuf:"bytes,1,rep,name=console_commands,json=consoleCommands" json:"console_commands,omitempty"`
}

func (x *CMsgGCToClientUpdateConsoleCommands) Reset() {
	*x = CMsgGCToClientUpdateConsoleCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientUpdateConsoleCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientUpdateConsoleCommands) ProtoMessage() {}

func (x *CMsgGCToClientUpdateConsoleCommands) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientUpdateConsoleCommands.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientUpdateConsoleCommands) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgGCToClientUpdateConsoleCommands) GetConsoleCommands() []string {
	if x != nil {
		return x.ConsoleCommands
	}
	return nil
}

type CMsgClientToGCPerformAutoActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId              *uint32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	UpdateChallengeSlots []uint32 `protobuf:"varint,4,rep,name=update_challenge_slots,json=updateChallengeSlots" json:"update_challenge_slots,omitempty"`
	UpdateClaims         []uint32 `protobuf:"varint,5,rep,name=update_claims,json=updateClaims" json:"update_claims,omitempty"`
	ClientVersion        *uint32  `protobuf:"varint,6,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *CMsgClientToGCPerformAutoActions) Reset() {
	*x = CMsgClientToGCPerformAutoActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPerformAutoActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPerformAutoActions) ProtoMessage() {}

func (x *CMsgClientToGCPerformAutoActions) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPerformAutoActions.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPerformAutoActions) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgClientToGCPerformAutoActions) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCPerformAutoActions) GetUpdateChallengeSlots() []uint32 {
	if x != nil {
		return x.UpdateChallengeSlots
	}
	return nil
}

func (x *CMsgClientToGCPerformAutoActions) GetUpdateClaims() []uint32 {
	if x != nil {
		return x.UpdateClaims
	}
	return nil
}

func (x *CMsgClientToGCPerformAutoActions) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CMsgClientToGCPerformAutoActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCPerformAutoActionsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPerformAutoActionsResponse_EResponse,def=0" json:"result,omitempty"`
	Rewards *CMsgEventClaimRewards                              `protobuf:"bytes,2,opt,name=rewards" json:"rewards,omitempty"`
}

// Default values for CMsgClientToGCPerformAutoActionsResponse fields.
const (
	Default_CMsgClientToGCPerformAutoActionsResponse_Result = CMsgClientToGCPerformAutoActionsResponse_k_eInternalError
)

func (x *CMsgClientToGCPerformAutoActionsResponse) Reset() {
	*x = CMsgClientToGCPerformAutoActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPerformAutoActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPerformAutoActionsResponse) ProtoMessage() {}

func (x *CMsgClientToGCPerformAutoActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPerformAutoActionsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPerformAutoActionsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgClientToGCPerformAutoActionsResponse) GetResult() CMsgClientToGCPerformAutoActionsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPerformAutoActionsResponse_Result
}

func (x *CMsgClientToGCPerformAutoActionsResponse) GetRewards() *CMsgEventClaimRewards {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CMsgClientToGCCanPurchaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex           *uint32       `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ClientVersion      *uint32       `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	StoreId            *EDACStoreID  `protobuf:"varint,3,opt,name=store_id,json=storeId,enum=underlords.EDACStoreID,def=0" json:"store_id,omitempty"`
	Quantity           *uint32       `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	Platform           *EDACPlatform `protobuf:"varint,5,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	DeviceId           *uint64       `protobuf:"varint,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	CreateReservation  *bool         `protobuf:"varint,7,opt,name=create_reservation,json=createReservation" json:"create_reservation,omitempty"`
	IgnoreReservations *bool         `protobuf:"varint,8,opt,name=ignore_reservations,json=ignoreReservations" json:"ignore_reservations,omitempty"`
}

// Default values for CMsgClientToGCCanPurchaseItem fields.
const (
	Default_CMsgClientToGCCanPurchaseItem_StoreId  = EDACStoreID_k_EDACStoreID_Invalid
	Default_CMsgClientToGCCanPurchaseItem_Platform = EDACPlatform_k_eDACPlatform_None
)

func (x *CMsgClientToGCCanPurchaseItem) Reset() {
	*x = CMsgClientToGCCanPurchaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCanPurchaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCanPurchaseItem) ProtoMessage() {}

func (x *CMsgClientToGCCanPurchaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCanPurchaseItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCanPurchaseItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgClientToGCCanPurchaseItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItem) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItem) GetStoreId() EDACStoreID {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return Default_CMsgClientToGCCanPurchaseItem_StoreId
}

func (x *CMsgClientToGCCanPurchaseItem) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItem) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgClientToGCCanPurchaseItem_Platform
}

func (x *CMsgClientToGCCanPurchaseItem) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItem) GetCreateReservation() bool {
	if x != nil && x.CreateReservation != nil {
		return *x.CreateReservation
	}
	return false
}

func (x *CMsgClientToGCCanPurchaseItem) GetIgnoreReservations() bool {
	if x != nil && x.IgnoreReservations != nil {
		return *x.IgnoreReservations
	}
	return false
}

type CMsgClientToGCCanPurchaseItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *CMsgClientToGCCanPurchaseItemResponse_EResponse     `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCCanPurchaseItemResponse_EResponse,def=0" json:"result,omitempty"`
	Reservations []*CMsgClientToGCCanPurchaseItemResponse_Reservation `protobuf:"bytes,2,rep,name=reservations" json:"reservations,omitempty"`
}

// Default values for CMsgClientToGCCanPurchaseItemResponse fields.
const (
	Default_CMsgClientToGCCanPurchaseItemResponse_Result = CMsgClientToGCCanPurchaseItemResponse_k_eInternalError
)

func (x *CMsgClientToGCCanPurchaseItemResponse) Reset() {
	*x = CMsgClientToGCCanPurchaseItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCanPurchaseItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCanPurchaseItemResponse) ProtoMessage() {}

func (x *CMsgClientToGCCanPurchaseItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCanPurchaseItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCanPurchaseItemResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgClientToGCCanPurchaseItemResponse) GetResult() CMsgClientToGCCanPurchaseItemResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCanPurchaseItemResponse_Result
}

func (x *CMsgClientToGCCanPurchaseItemResponse) GetReservations() []*CMsgClientToGCCanPurchaseItemResponse_Reservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CMsgClientToGCHandleItemPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId             *EDACStoreID                                           `protobuf:"varint,1,opt,name=store_id,json=storeId,enum=underlords.EDACStoreID,def=0" json:"store_id,omitempty"`
	ClientVersion       *uint32                                                `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	DeviceId            *uint64                                                `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	StoreInfoIos        *CMsgClientToGCHandleItemPurchase_StoreInfoIOS         `protobuf:"bytes,4,opt,name=store_info_ios,json=storeInfoIos" json:"store_info_ios,omitempty"`
	StoreInfoGooglePlay *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay `protobuf:"bytes,5,opt,name=store_info_google_play,json=storeInfoGooglePlay" json:"store_info_google_play,omitempty"`
	StoreInfoTest       []*CMsgClientToGCHandleItemPurchase_StoreInfo_Test     `protobuf:"bytes,6,rep,name=store_info_test,json=storeInfoTest" json:"store_info_test,omitempty"`
	Platform            *EDACPlatform                                          `protobuf:"varint,7,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
}

// Default values for CMsgClientToGCHandleItemPurchase fields.
const (
	Default_CMsgClientToGCHandleItemPurchase_StoreId  = EDACStoreID_k_EDACStoreID_Invalid
	Default_CMsgClientToGCHandleItemPurchase_Platform = EDACPlatform_k_eDACPlatform_None
)

func (x *CMsgClientToGCHandleItemPurchase) Reset() {
	*x = CMsgClientToGCHandleItemPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchase) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchase.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchase) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgClientToGCHandleItemPurchase) GetStoreId() EDACStoreID {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return Default_CMsgClientToGCHandleItemPurchase_StoreId
}

func (x *CMsgClientToGCHandleItemPurchase) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CMsgClientToGCHandleItemPurchase) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgClientToGCHandleItemPurchase) GetStoreInfoIos() *CMsgClientToGCHandleItemPurchase_StoreInfoIOS {
	if x != nil {
		return x.StoreInfoIos
	}
	return nil
}

func (x *CMsgClientToGCHandleItemPurchase) GetStoreInfoGooglePlay() *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay {
	if x != nil {
		return x.StoreInfoGooglePlay
	}
	return nil
}

func (x *CMsgClientToGCHandleItemPurchase) GetStoreInfoTest() []*CMsgClientToGCHandleItemPurchase_StoreInfo_Test {
	if x != nil {
		return x.StoreInfoTest
	}
	return nil
}

func (x *CMsgClientToGCHandleItemPurchase) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgClientToGCHandleItemPurchase_Platform
}

type CMsgClientToGCHandleItemPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *CMsgClientToGCHandleItemPurchaseResponse_EResponse          `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCHandleItemPurchaseResponse_EResponse,def=0" json:"result,omitempty"`
	PurchaseResponses []*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse `protobuf:"bytes,2,rep,name=purchase_responses,json=purchaseResponses" json:"purchase_responses,omitempty"`
}

// Default values for CMsgClientToGCHandleItemPurchaseResponse fields.
const (
	Default_CMsgClientToGCHandleItemPurchaseResponse_Result = CMsgClientToGCHandleItemPurchaseResponse_k_eInternalError
)

func (x *CMsgClientToGCHandleItemPurchaseResponse) Reset() {
	*x = CMsgClientToGCHandleItemPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgClientToGCHandleItemPurchaseResponse) GetResult() CMsgClientToGCHandleItemPurchaseResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCHandleItemPurchaseResponse_Result
}

func (x *CMsgClientToGCHandleItemPurchaseResponse) GetPurchaseResponses() []*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse {
	if x != nil {
		return x.PurchaseResponses
	}
	return nil
}

type CMsgClientToGCEventEquipVirtualItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   *uint32                                       `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EquipList []*CMsgClientToGCEventEquipVirtualItems_Equip `protobuf:"bytes,2,rep,name=equip_list,json=equipList" json:"equip_list,omitempty"`
}

func (x *CMsgClientToGCEventEquipVirtualItems) Reset() {
	*x = CMsgClientToGCEventEquipVirtualItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventEquipVirtualItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventEquipVirtualItems) ProtoMessage() {}

func (x *CMsgClientToGCEventEquipVirtualItems) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventEquipVirtualItems.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventEquipVirtualItems) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgClientToGCEventEquipVirtualItems) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventEquipVirtualItems) GetEquipList() []*CMsgClientToGCEventEquipVirtualItems_Equip {
	if x != nil {
		return x.EquipList
	}
	return nil
}

type CMsgClientToGCEventEquipVirtualItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEventEquipVirtualItemsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventEquipVirtualItemsResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEventEquipVirtualItemsResponse fields.
const (
	Default_CMsgClientToGCEventEquipVirtualItemsResponse_Result = CMsgClientToGCEventEquipVirtualItemsResponse_k_eInternalError
)

func (x *CMsgClientToGCEventEquipVirtualItemsResponse) Reset() {
	*x = CMsgClientToGCEventEquipVirtualItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventEquipVirtualItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventEquipVirtualItemsResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventEquipVirtualItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventEquipVirtualItemsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventEquipVirtualItemsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgClientToGCEventEquipVirtualItemsResponse) GetResult() CMsgClientToGCEventEquipVirtualItemsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventEquipVirtualItemsResponse_Result
}

type CMsgClientToGCClearPurchaseReserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32      `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	StoreId  *EDACStoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,enum=underlords.EDACStoreID,def=0" json:"store_id,omitempty"`
	DeviceId *uint64      `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

// Default values for CMsgClientToGCClearPurchaseReserve fields.
const (
	Default_CMsgClientToGCClearPurchaseReserve_StoreId = EDACStoreID_k_EDACStoreID_Invalid
)

func (x *CMsgClientToGCClearPurchaseReserve) Reset() {
	*x = CMsgClientToGCClearPurchaseReserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCClearPurchaseReserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClearPurchaseReserve) ProtoMessage() {}

func (x *CMsgClientToGCClearPurchaseReserve) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClearPurchaseReserve.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClearPurchaseReserve) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgClientToGCClearPurchaseReserve) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCClearPurchaseReserve) GetStoreId() EDACStoreID {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return Default_CMsgClientToGCClearPurchaseReserve_StoreId
}

func (x *CMsgClientToGCClearPurchaseReserve) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

type CMsgClientToGCClearPurchaseReserveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCClearPurchaseReserveResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCClearPurchaseReserveResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCClearPurchaseReserveResponse fields.
const (
	Default_CMsgClientToGCClearPurchaseReserveResponse_Result = CMsgClientToGCClearPurchaseReserveResponse_k_eInternalError
)

func (x *CMsgClientToGCClearPurchaseReserveResponse) Reset() {
	*x = CMsgClientToGCClearPurchaseReserveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCClearPurchaseReserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClearPurchaseReserveResponse) ProtoMessage() {}

func (x *CMsgClientToGCClearPurchaseReserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClearPurchaseReserveResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClearPurchaseReserveResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgClientToGCClearPurchaseReserveResponse) GetResult() CMsgClientToGCClearPurchaseReserveResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCClearPurchaseReserveResponse_Result
}

type CMsgGCToClientAcquireRegionModeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (x *CMsgGCToClientAcquireRegionModeInfo) Reset() {
	*x = CMsgGCToClientAcquireRegionModeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientAcquireRegionModeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientAcquireRegionModeInfo) ProtoMessage() {}

func (x *CMsgGCToClientAcquireRegionModeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientAcquireRegionModeInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientAcquireRegionModeInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgGCToClientAcquireRegionModeInfo) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgGCToClientDurationControlWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemaining *uint32 `protobuf:"varint,1,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (x *CMsgGCToClientDurationControlWarning) Reset() {
	*x = CMsgGCToClientDurationControlWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientDurationControlWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientDurationControlWarning) ProtoMessage() {}

func (x *CMsgGCToClientDurationControlWarning) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientDurationControlWarning.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientDurationControlWarning) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgGCToClientDurationControlWarning) GetTimeRemaining() uint32 {
	if x != nil && x.TimeRemaining != nil {
		return *x.TimeRemaining
	}
	return 0
}

type CMsgClientToGCGetRegionModeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCGetRegionModeInfo) Reset() {
	*x = CMsgClientToGCGetRegionModeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetRegionModeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetRegionModeInfo) ProtoMessage() {}

func (x *CMsgClientToGCGetRegionModeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetRegionModeInfo.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetRegionModeInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{84}
}

type CMsgClientToGCGetRegionModeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password *string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (x *CMsgClientToGCGetRegionModeInfoResponse) Reset() {
	*x = CMsgClientToGCGetRegionModeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetRegionModeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetRegionModeInfoResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetRegionModeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetRegionModeInfoResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetRegionModeInfoResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgClientToGCGetRegionModeInfoResponse) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgGCToClientGameModifiersUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModifiers  *CMsgGameModifiers `protobuf:"bytes,1,opt,name=game_modifiers,json=gameModifiers" json:"game_modifiers,omitempty"`
	NextUpdateTime *uint32            `protobuf:"varint,2,opt,name=next_update_time,json=nextUpdateTime" json:"next_update_time,omitempty"`
}

func (x *CMsgGCToClientGameModifiersUpdated) Reset() {
	*x = CMsgGCToClientGameModifiersUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientGameModifiersUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGameModifiersUpdated) ProtoMessage() {}

func (x *CMsgGCToClientGameModifiersUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGameModifiersUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGameModifiersUpdated) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgGCToClientGameModifiersUpdated) GetGameModifiers() *CMsgGameModifiers {
	if x != nil {
		return x.GameModifiers
	}
	return nil
}

func (x *CMsgGCToClientGameModifiersUpdated) GetNextUpdateTime() uint32 {
	if x != nil && x.NextUpdateTime != nil {
		return *x.NextUpdateTime
	}
	return 0
}

type CMsgClientToGCEventChallengeProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId     *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress   *uint32 `protobuf:"varint,4,opt,name=progress" json:"progress,omitempty"`
	AuditData  *uint64 `protobuf:"varint,5,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
}

func (x *CMsgClientToGCEventChallengeProgress) Reset() {
	*x = CMsgClientToGCEventChallengeProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventChallengeProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventChallengeProgress) ProtoMessage() {}

func (x *CMsgClientToGCEventChallengeProgress) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventChallengeProgress.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventChallengeProgress) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgClientToGCEventChallengeProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgress) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgress) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgress) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

type CMsgClientToGCEventChallengeProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEventChallengeProgressResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventChallengeProgressResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEventChallengeProgressResponse fields.
const (
	Default_CMsgClientToGCEventChallengeProgressResponse_Result = CMsgClientToGCEventChallengeProgressResponse_k_eInternalError
)

func (x *CMsgClientToGCEventChallengeProgressResponse) Reset() {
	*x = CMsgClientToGCEventChallengeProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventChallengeProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventChallengeProgressResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventChallengeProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventChallengeProgressResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventChallengeProgressResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgClientToGCEventChallengeProgressResponse) GetResult() CMsgClientToGCEventChallengeProgressResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventChallengeProgressResponse_Result
}

type CMsgClientToGCEventChallengeProgressWithCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId          *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId      *uint32 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress        *uint32 `protobuf:"varint,4,opt,name=progress" json:"progress,omitempty"`
	CurrencyId      *uint32 `protobuf:"varint,5,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	StartingBalance *uint32 `protobuf:"varint,6,opt,name=starting_balance,json=startingBalance" json:"starting_balance,omitempty"`
	AuditData       *uint64 `protobuf:"varint,7,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) Reset() {
	*x = CMsgClientToGCEventChallengeProgressWithCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventChallengeProgressWithCurrency) ProtoMessage() {}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventChallengeProgressWithCurrency.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventChallengeProgressWithCurrency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetStartingBalance() uint32 {
	if x != nil && x.StartingBalance != nil {
		return *x.StartingBalance
	}
	return 0
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrency) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

type CMsgClientToGCEventChallengeProgressWithCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEventChallengeProgressWithCurrencyResponse fields.
const (
	Default_CMsgClientToGCEventChallengeProgressWithCurrencyResponse_Result = CMsgClientToGCEventChallengeProgressWithCurrencyResponse_k_eInternalError
)

func (x *CMsgClientToGCEventChallengeProgressWithCurrencyResponse) Reset() {
	*x = CMsgClientToGCEventChallengeProgressWithCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventChallengeProgressWithCurrencyResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventChallengeProgressWithCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventChallengeProgressWithCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventChallengeProgressWithCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgClientToGCEventChallengeProgressWithCurrencyResponse) GetResult() CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventChallengeProgressWithCurrencyResponse_Result
}

type CMsgClientToGCAssociateDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId *uint64       `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Platform *EDACPlatform `protobuf:"varint,2,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	Salt     *uint32       `protobuf:"varint,3,opt,name=salt" json:"salt,omitempty"`
}

// Default values for CMsgClientToGCAssociateDevice fields.
const (
	Default_CMsgClientToGCAssociateDevice_Platform = EDACPlatform_k_eDACPlatform_None
)

func (x *CMsgClientToGCAssociateDevice) Reset() {
	*x = CMsgClientToGCAssociateDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAssociateDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAssociateDevice) ProtoMessage() {}

func (x *CMsgClientToGCAssociateDevice) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAssociateDevice.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAssociateDevice) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgClientToGCAssociateDevice) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgClientToGCAssociateDevice) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgClientToGCAssociateDevice_Platform
}

func (x *CMsgClientToGCAssociateDevice) GetSalt() uint32 {
	if x != nil && x.Salt != nil {
		return *x.Salt
	}
	return 0
}

type CMsgClientToGCAssociateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCAssociateDeviceResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCAssociateDeviceResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCAssociateDeviceResponse fields.
const (
	Default_CMsgClientToGCAssociateDeviceResponse_Result = CMsgClientToGCAssociateDeviceResponse_k_eInternalError
)

func (x *CMsgClientToGCAssociateDeviceResponse) Reset() {
	*x = CMsgClientToGCAssociateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAssociateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAssociateDeviceResponse) ProtoMessage() {}

func (x *CMsgClientToGCAssociateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAssociateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAssociateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgClientToGCAssociateDeviceResponse) GetResult() CMsgClientToGCAssociateDeviceResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCAssociateDeviceResponse_Result
}

type CMsgClientToGCEventPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ExpectedCredits *uint32 `protobuf:"varint,2,opt,name=expected_credits,json=expectedCredits" json:"expected_credits,omitempty"`
}

func (x *CMsgClientToGCEventPurchase) Reset() {
	*x = CMsgClientToGCEventPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventPurchase) ProtoMessage() {}

func (x *CMsgClientToGCEventPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventPurchase.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventPurchase) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientToGCEventPurchase) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventPurchase) GetExpectedCredits() uint32 {
	if x != nil && x.ExpectedCredits != nil {
		return *x.ExpectedCredits
	}
	return 0
}

type CMsgClientToGCEventPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEventPurchaseResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventPurchaseResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEventPurchaseResponse fields.
const (
	Default_CMsgClientToGCEventPurchaseResponse_Result = CMsgClientToGCEventPurchaseResponse_k_eInternalError
)

func (x *CMsgClientToGCEventPurchaseResponse) Reset() {
	*x = CMsgClientToGCEventPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventPurchaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventPurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgClientToGCEventPurchaseResponse) GetResult() CMsgClientToGCEventPurchaseResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventPurchaseResponse_Result
}

type CMsgClientToGCPartySetGameModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId           *uint64            `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	UseCustomModifier *bool              `protobuf:"varint,2,opt,name=use_custom_modifier,json=useCustomModifier" json:"use_custom_modifier,omitempty"`
	CustomModifier    *CMsgGameModifiers `protobuf:"bytes,3,opt,name=custom_modifier,json=customModifier" json:"custom_modifier,omitempty"`
}

func (x *CMsgClientToGCPartySetGameModifier) Reset() {
	*x = CMsgClientToGCPartySetGameModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartySetGameModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartySetGameModifier) ProtoMessage() {}

func (x *CMsgClientToGCPartySetGameModifier) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartySetGameModifier.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartySetGameModifier) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgClientToGCPartySetGameModifier) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCPartySetGameModifier) GetUseCustomModifier() bool {
	if x != nil && x.UseCustomModifier != nil {
		return *x.UseCustomModifier
	}
	return false
}

func (x *CMsgClientToGCPartySetGameModifier) GetCustomModifier() *CMsgGameModifiers {
	if x != nil {
		return x.CustomModifier
	}
	return nil
}

type CMsgClientToGCPartySetGameModifierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCPartySetGameModifierResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCPartySetGameModifierResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCPartySetGameModifierResponse fields.
const (
	Default_CMsgClientToGCPartySetGameModifierResponse_Result = CMsgClientToGCPartySetGameModifierResponse_k_eInternalError
)

func (x *CMsgClientToGCPartySetGameModifierResponse) Reset() {
	*x = CMsgClientToGCPartySetGameModifierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCPartySetGameModifierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPartySetGameModifierResponse) ProtoMessage() {}

func (x *CMsgClientToGCPartySetGameModifierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPartySetGameModifierResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPartySetGameModifierResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgClientToGCPartySetGameModifierResponse) GetResult() CMsgClientToGCPartySetGameModifierResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPartySetGameModifierResponse_Result
}

type CMsgClientToGCAckSupportCredits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgClientToGCAckSupportCredits) Reset() {
	*x = CMsgClientToGCAckSupportCredits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAckSupportCredits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAckSupportCredits) ProtoMessage() {}

func (x *CMsgClientToGCAckSupportCredits) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAckSupportCredits.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAckSupportCredits) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgClientToGCAckSupportCredits) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgClientToGCAckSupportCreditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCAckSupportCreditsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCAckSupportCreditsResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCAckSupportCreditsResponse fields.
const (
	Default_CMsgClientToGCAckSupportCreditsResponse_Result = CMsgClientToGCAckSupportCreditsResponse_k_eInternalError
)

func (x *CMsgClientToGCAckSupportCreditsResponse) Reset() {
	*x = CMsgClientToGCAckSupportCreditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCAckSupportCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAckSupportCreditsResponse) ProtoMessage() {}

func (x *CMsgClientToGCAckSupportCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAckSupportCreditsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAckSupportCreditsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgClientToGCAckSupportCreditsResponse) GetResult() CMsgClientToGCAckSupportCreditsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCAckSupportCreditsResponse_Result
}

type CMsgClientToGCSetTeamName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoutingId      *uint32 `protobuf:"varint,1,opt,name=routing_id,json=routingId" json:"routing_id,omitempty"`
	OtherAccountId *uint32 `protobuf:"varint,2,opt,name=other_account_id,json=otherAccountId" json:"other_account_id,omitempty"`
	TeamName       *string `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
}

func (x *CMsgClientToGCSetTeamName) Reset() {
	*x = CMsgClientToGCSetTeamName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetTeamName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetTeamName) ProtoMessage() {}

func (x *CMsgClientToGCSetTeamName) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetTeamName.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetTeamName) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgClientToGCSetTeamName) GetRoutingId() uint32 {
	if x != nil && x.RoutingId != nil {
		return *x.RoutingId
	}
	return 0
}

func (x *CMsgClientToGCSetTeamName) GetOtherAccountId() uint32 {
	if x != nil && x.OtherAccountId != nil {
		return *x.OtherAccountId
	}
	return 0
}

func (x *CMsgClientToGCSetTeamName) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

type CMsgClientToGCSetTeamNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCSetTeamNameResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCSetTeamNameResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCSetTeamNameResponse fields.
const (
	Default_CMsgClientToGCSetTeamNameResponse_Result = CMsgClientToGCSetTeamNameResponse_k_eInternalError
)

func (x *CMsgClientToGCSetTeamNameResponse) Reset() {
	*x = CMsgClientToGCSetTeamNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCSetTeamNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetTeamNameResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetTeamNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetTeamNameResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetTeamNameResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgClientToGCSetTeamNameResponse) GetResult() CMsgClientToGCSetTeamNameResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSetTeamNameResponse_Result
}

type CMsgClientToGCDevOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op          *CMsgClientToGCDevOperation_EOperation `protobuf:"varint,1,opt,name=op,enum=underlords.CMsgClientToGCDevOperation_EOperation,def=0" json:"op,omitempty"`
	UintValue   *uint64                                `protobuf:"varint,2,opt,name=uint_value,json=uintValue" json:"uint_value,omitempty"`
	StrValue    *string                                `protobuf:"bytes,3,opt,name=str_value,json=strValue" json:"str_value,omitempty"`
	UintValue_2 *uint64                                `protobuf:"varint,4,opt,name=uint_value_2,json=uintValue2" json:"uint_value_2,omitempty"`
}

// Default values for CMsgClientToGCDevOperation fields.
const (
	Default_CMsgClientToGCDevOperation_Op = CMsgClientToGCDevOperation_k_eSetGACFlags
)

func (x *CMsgClientToGCDevOperation) Reset() {
	*x = CMsgClientToGCDevOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCDevOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDevOperation) ProtoMessage() {}

func (x *CMsgClientToGCDevOperation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDevOperation.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDevOperation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgClientToGCDevOperation) GetOp() CMsgClientToGCDevOperation_EOperation {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return Default_CMsgClientToGCDevOperation_Op
}

func (x *CMsgClientToGCDevOperation) GetUintValue() uint64 {
	if x != nil && x.UintValue != nil {
		return *x.UintValue
	}
	return 0
}

func (x *CMsgClientToGCDevOperation) GetStrValue() string {
	if x != nil && x.StrValue != nil {
		return *x.StrValue
	}
	return ""
}

func (x *CMsgClientToGCDevOperation) GetUintValue_2() uint64 {
	if x != nil && x.UintValue_2 != nil {
		return *x.UintValue_2
	}
	return 0
}

type CMsgClientToGCDevOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCDevOperationResponse) Reset() {
	*x = CMsgClientToGCDevOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCDevOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDevOperationResponse) ProtoMessage() {}

func (x *CMsgClientToGCDevOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDevOperationResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDevOperationResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{102}
}

type CMsgClientToGCUpdateAccountSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []uint32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	Values []uint32 `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
}

func (x *CMsgClientToGCUpdateAccountSync) Reset() {
	*x = CMsgClientToGCUpdateAccountSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCUpdateAccountSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateAccountSync) ProtoMessage() {}

func (x *CMsgClientToGCUpdateAccountSync) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateAccountSync.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateAccountSync) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgClientToGCUpdateAccountSync) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CMsgClientToGCUpdateAccountSync) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CMsgClientToGCUpdateAccountSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCUpdateAccountSyncResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCUpdateAccountSyncResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCUpdateAccountSyncResponse fields.
const (
	Default_CMsgClientToGCUpdateAccountSyncResponse_Result = CMsgClientToGCUpdateAccountSyncResponse_k_eInternalError
)

func (x *CMsgClientToGCUpdateAccountSyncResponse) Reset() {
	*x = CMsgClientToGCUpdateAccountSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCUpdateAccountSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateAccountSyncResponse) ProtoMessage() {}

func (x *CMsgClientToGCUpdateAccountSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateAccountSyncResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateAccountSyncResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgClientToGCUpdateAccountSyncResponse) GetResult() CMsgClientToGCUpdateAccountSyncResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUpdateAccountSyncResponse_Result
}

type CMsgClientToGCGetDuosRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *uint32                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CursorValue *uint32                                `protobuf:"varint,2,opt,name=cursor_value,json=cursorValue" json:"cursor_value,omitempty"`
	BatchSize   *uint32                                `protobuf:"varint,3,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	SortOrder   *CMsgClientToGCGetDuosRanks_ESortOrder `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,enum=underlords.CMsgClientToGCGetDuosRanks_ESortOrder,def=0" json:"sort_order,omitempty"`
}

// Default values for CMsgClientToGCGetDuosRanks fields.
const (
	Default_CMsgClientToGCGetDuosRanks_SortOrder = CMsgClientToGCGetDuosRanks_k_eSort_LastPlayed
)

func (x *CMsgClientToGCGetDuosRanks) Reset() {
	*x = CMsgClientToGCGetDuosRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetDuosRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDuosRanks) ProtoMessage() {}

func (x *CMsgClientToGCGetDuosRanks) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDuosRanks.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDuosRanks) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgClientToGCGetDuosRanks) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanks) GetCursorValue() uint32 {
	if x != nil && x.CursorValue != nil {
		return *x.CursorValue
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanks) GetBatchSize() uint32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanks) GetSortOrder() CMsgClientToGCGetDuosRanks_ESortOrder {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return Default_CMsgClientToGCGetDuosRanks_SortOrder
}

type CMsgClientToGCGetDuosRanksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *CMsgClientToGCGetDuosRanksResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetDuosRanksResponse_EResponse,def=0" json:"result,omitempty"`
	Teams       []*CMsgClientToGCGetDuosRanksResponse_Team    `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	CursorValue *uint32                                       `protobuf:"varint,3,opt,name=cursor_value,json=cursorValue" json:"cursor_value,omitempty"`
}

// Default values for CMsgClientToGCGetDuosRanksResponse fields.
const (
	Default_CMsgClientToGCGetDuosRanksResponse_Result = CMsgClientToGCGetDuosRanksResponse_k_eInternalError
)

func (x *CMsgClientToGCGetDuosRanksResponse) Reset() {
	*x = CMsgClientToGCGetDuosRanksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetDuosRanksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDuosRanksResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetDuosRanksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDuosRanksResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDuosRanksResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgClientToGCGetDuosRanksResponse) GetResult() CMsgClientToGCGetDuosRanksResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetDuosRanksResponse_Result
}

func (x *CMsgClientToGCGetDuosRanksResponse) GetTeams() []*CMsgClientToGCGetDuosRanksResponse_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CMsgClientToGCGetDuosRanksResponse) GetCursorValue() uint32 {
	if x != nil && x.CursorValue != nil {
		return *x.CursorValue
	}
	return 0
}

type CMsgClientToGCGetProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgClientToGCGetProfile) Reset() {
	*x = CMsgClientToGCGetProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfile) ProtoMessage() {}

func (x *CMsgClientToGCGetProfile) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfile.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfile) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgClientToGCGetProfile) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                       *CMsgClientToGCGetProfileResponse_EResponse           `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetProfileResponse_EResponse,def=0" json:"result,omitempty"`
	BpProgress                   *int32                                                `protobuf:"varint,10,opt,name=bp_progress,json=bpProgress" json:"bp_progress,omitempty"`
	CitycrawlProgress            []*CMsgClientToGCGetProfileResponse_CityCrawlProgress `protobuf:"bytes,20,rep,name=citycrawl_progress,json=citycrawlProgress" json:"citycrawl_progress,omitempty"`
	KnockoutRankScore            *int32                                                `protobuf:"varint,30,opt,name=knockout_rank_score,json=knockoutRankScore" json:"knockout_rank_score,omitempty"`
	StandardRankScore            *int32                                                `protobuf:"varint,31,opt,name=standard_rank_score,json=standardRankScore" json:"standard_rank_score,omitempty"`
	StatsUnderlordWinrate_1      *int32                                                `protobuf:"varint,40,opt,name=stats_underlord_winrate_1,json=statsUnderlordWinrate1" json:"stats_underlord_winrate_1,omitempty"`
	StatsUnderlordWinrate_2      *int32                                                `protobuf:"varint,41,opt,name=stats_underlord_winrate_2,json=statsUnderlordWinrate2" json:"stats_underlord_winrate_2,omitempty"`
	StatsUnderlordWinrate_3      *int32                                                `protobuf:"varint,42,opt,name=stats_underlord_winrate_3,json=statsUnderlordWinrate3" json:"stats_underlord_winrate_3,omitempty"`
	StatsUnderlordWinrate_4      *int32                                                `protobuf:"varint,43,opt,name=stats_underlord_winrate_4,json=statsUnderlordWinrate4" json:"stats_underlord_winrate_4,omitempty"`
	SelectedUnderlordId          *uint32                                               `protobuf:"varint,50,opt,name=selected_underlord_id,json=selectedUnderlordId" json:"selected_underlord_id,omitempty"`
	SelectedUnderlordPosterTitle *uint32                                               `protobuf:"varint,51,opt,name=selected_underlord_poster_title,json=selectedUnderlordPosterTitle" json:"selected_underlord_poster_title,omitempty"`
	StatsFirstFinishes           *int32                                                `protobuf:"varint,60,opt,name=stats_first_finishes,json=statsFirstFinishes" json:"stats_first_finishes,omitempty"`
	StatsSecondFinishes          *int32                                                `protobuf:"varint,61,opt,name=stats_second_finishes,json=statsSecondFinishes" json:"stats_second_finishes,omitempty"`
	StatsThirdFinishes           *int32                                                `protobuf:"varint,62,opt,name=stats_third_finishes,json=statsThirdFinishes" json:"stats_third_finishes,omitempty"`
	StatsGamesPlayed             *int32                                                `protobuf:"varint,70,opt,name=stats_games_played,json=statsGamesPlayed" json:"stats_games_played,omitempty"`
	StatsMostTotalDamage         *int32                                                `protobuf:"varint,71,opt,name=stats_most_total_damage,json=statsMostTotalDamage" json:"stats_most_total_damage,omitempty"`
	StatsHighestNetWorth         *int32                                                `protobuf:"varint,72,opt,name=stats_highest_net_worth,json=statsHighestNetWorth" json:"stats_highest_net_worth,omitempty"`
	StatsLatestRound             *int32                                                `protobuf:"varint,73,opt,name=stats_latest_round,json=statsLatestRound" json:"stats_latest_round,omitempty"`
	StatsUndefeatedKnockoutGames *int32                                                `protobuf:"varint,74,opt,name=stats_undefeated_knockout_games,json=statsUndefeatedKnockoutGames" json:"stats_undefeated_knockout_games,omitempty"`
}

// Default values for CMsgClientToGCGetProfileResponse fields.
const (
	Default_CMsgClientToGCGetProfileResponse_Result = CMsgClientToGCGetProfileResponse_k_eInternalError
)

func (x *CMsgClientToGCGetProfileResponse) Reset() {
	*x = CMsgClientToGCGetProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfileResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfileResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfileResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgClientToGCGetProfileResponse) GetResult() CMsgClientToGCGetProfileResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetProfileResponse_Result
}

func (x *CMsgClientToGCGetProfileResponse) GetBpProgress() int32 {
	if x != nil && x.BpProgress != nil {
		return *x.BpProgress
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetCitycrawlProgress() []*CMsgClientToGCGetProfileResponse_CityCrawlProgress {
	if x != nil {
		return x.CitycrawlProgress
	}
	return nil
}

func (x *CMsgClientToGCGetProfileResponse) GetKnockoutRankScore() int32 {
	if x != nil && x.KnockoutRankScore != nil {
		return *x.KnockoutRankScore
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStandardRankScore() int32 {
	if x != nil && x.StandardRankScore != nil {
		return *x.StandardRankScore
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsUnderlordWinrate_1() int32 {
	if x != nil && x.StatsUnderlordWinrate_1 != nil {
		return *x.StatsUnderlordWinrate_1
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsUnderlordWinrate_2() int32 {
	if x != nil && x.StatsUnderlordWinrate_2 != nil {
		return *x.StatsUnderlordWinrate_2
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsUnderlordWinrate_3() int32 {
	if x != nil && x.StatsUnderlordWinrate_3 != nil {
		return *x.StatsUnderlordWinrate_3
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsUnderlordWinrate_4() int32 {
	if x != nil && x.StatsUnderlordWinrate_4 != nil {
		return *x.StatsUnderlordWinrate_4
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetSelectedUnderlordId() uint32 {
	if x != nil && x.SelectedUnderlordId != nil {
		return *x.SelectedUnderlordId
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetSelectedUnderlordPosterTitle() uint32 {
	if x != nil && x.SelectedUnderlordPosterTitle != nil {
		return *x.SelectedUnderlordPosterTitle
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsFirstFinishes() int32 {
	if x != nil && x.StatsFirstFinishes != nil {
		return *x.StatsFirstFinishes
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsSecondFinishes() int32 {
	if x != nil && x.StatsSecondFinishes != nil {
		return *x.StatsSecondFinishes
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsThirdFinishes() int32 {
	if x != nil && x.StatsThirdFinishes != nil {
		return *x.StatsThirdFinishes
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsGamesPlayed() int32 {
	if x != nil && x.StatsGamesPlayed != nil {
		return *x.StatsGamesPlayed
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsMostTotalDamage() int32 {
	if x != nil && x.StatsMostTotalDamage != nil {
		return *x.StatsMostTotalDamage
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsHighestNetWorth() int32 {
	if x != nil && x.StatsHighestNetWorth != nil {
		return *x.StatsHighestNetWorth
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsLatestRound() int32 {
	if x != nil && x.StatsLatestRound != nil {
		return *x.StatsLatestRound
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse) GetStatsUndefeatedKnockoutGames() int32 {
	if x != nil && x.StatsUndefeatedKnockoutGames != nil {
		return *x.StatsUndefeatedKnockoutGames
	}
	return 0
}

type CMsgClientToGCGetMatchHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RequestRows   *uint32 `protobuf:"varint,2,opt,name=request_rows,json=requestRows" json:"request_rows,omitempty"`
	MatchIdCursor *uint64 `protobuf:"varint,3,opt,name=match_id_cursor,json=matchIdCursor" json:"match_id_cursor,omitempty"`
}

func (x *CMsgClientToGCGetMatchHistory) Reset() {
	*x = CMsgClientToGCGetMatchHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistory) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistory) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistory.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistory) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgClientToGCGetMatchHistory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistory) GetRequestRows() uint32 {
	if x != nil && x.RequestRows != nil {
		return *x.RequestRows
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistory) GetMatchIdCursor() uint64 {
	if x != nil && x.MatchIdCursor != nil {
		return *x.MatchIdCursor
	}
	return 0
}

type CMsgClientToGCGetMatchHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        *CMsgClientToGCGetMatchHistoryResponse_EResponse    `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetMatchHistoryResponse_EResponse,def=0" json:"result,omitempty"`
	Matches       []*CMsgClientToGCGetMatchHistoryResponse_Match      `protobuf:"bytes,2,rep,name=matches" json:"matches,omitempty"`
	MatchIdCursor *uint64                                             `protobuf:"varint,3,opt,name=match_id_cursor,json=matchIdCursor" json:"match_id_cursor,omitempty"`
	MatchStats    []*CMsgClientToGCGetMatchHistoryResponse_MatchStats `protobuf:"bytes,4,rep,name=match_stats,json=matchStats" json:"match_stats,omitempty"`
}

// Default values for CMsgClientToGCGetMatchHistoryResponse fields.
const (
	Default_CMsgClientToGCGetMatchHistoryResponse_Result = CMsgClientToGCGetMatchHistoryResponse_k_eInternalError
)

func (x *CMsgClientToGCGetMatchHistoryResponse) Reset() {
	*x = CMsgClientToGCGetMatchHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistoryResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistoryResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgClientToGCGetMatchHistoryResponse) GetResult() CMsgClientToGCGetMatchHistoryResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetMatchHistoryResponse_Result
}

func (x *CMsgClientToGCGetMatchHistoryResponse) GetMatches() []*CMsgClientToGCGetMatchHistoryResponse_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgClientToGCGetMatchHistoryResponse) GetMatchIdCursor() uint64 {
	if x != nil && x.MatchIdCursor != nil {
		return *x.MatchIdCursor
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse) GetMatchStats() []*CMsgClientToGCGetMatchHistoryResponse_MatchStats {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

type CMsgClientToGCEventPurchaseCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId          *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	PurchaseQuantity *uint32 `protobuf:"varint,2,opt,name=purchase_quantity,json=purchaseQuantity" json:"purchase_quantity,omitempty"`
	ExpectedCost     *uint32 `protobuf:"varint,3,opt,name=expected_cost,json=expectedCost" json:"expected_cost,omitempty"`
	CurrencyId       *uint32 `protobuf:"varint,4,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	StartingBalance  *uint32 `protobuf:"varint,5,opt,name=starting_balance,json=startingBalance" json:"starting_balance,omitempty"`
}

func (x *CMsgClientToGCEventPurchaseCurrency) Reset() {
	*x = CMsgClientToGCEventPurchaseCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventPurchaseCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventPurchaseCurrency) ProtoMessage() {}

func (x *CMsgClientToGCEventPurchaseCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventPurchaseCurrency.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventPurchaseCurrency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgClientToGCEventPurchaseCurrency) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCEventPurchaseCurrency) GetPurchaseQuantity() uint32 {
	if x != nil && x.PurchaseQuantity != nil {
		return *x.PurchaseQuantity
	}
	return 0
}

func (x *CMsgClientToGCEventPurchaseCurrency) GetExpectedCost() uint32 {
	if x != nil && x.ExpectedCost != nil {
		return *x.ExpectedCost
	}
	return 0
}

func (x *CMsgClientToGCEventPurchaseCurrency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgClientToGCEventPurchaseCurrency) GetStartingBalance() uint32 {
	if x != nil && x.StartingBalance != nil {
		return *x.StartingBalance
	}
	return 0
}

type CMsgClientToGCEventPurchaseCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgClientToGCEventPurchaseCurrencyResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCEventPurchaseCurrencyResponse_EResponse,def=0" json:"result,omitempty"`
}

// Default values for CMsgClientToGCEventPurchaseCurrencyResponse fields.
const (
	Default_CMsgClientToGCEventPurchaseCurrencyResponse_Result = CMsgClientToGCEventPurchaseCurrencyResponse_k_eInternalError
)

func (x *CMsgClientToGCEventPurchaseCurrencyResponse) Reset() {
	*x = CMsgClientToGCEventPurchaseCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventPurchaseCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventPurchaseCurrencyResponse) ProtoMessage() {}

func (x *CMsgClientToGCEventPurchaseCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventPurchaseCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventPurchaseCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgClientToGCEventPurchaseCurrencyResponse) GetResult() CMsgClientToGCEventPurchaseCurrencyResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCEventPurchaseCurrencyResponse_Result
}

type CMsgClientToGCGetFriendRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientToGCGetFriendRanks) Reset() {
	*x = CMsgClientToGCGetFriendRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendRanks) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendRanks) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendRanks.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendRanks) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{113}
}

type CMsgClientToGCGetFriendRanksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *CMsgClientToGCGetFriendRanksResponse_EResponse    `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetFriendRanksResponse_EResponse,def=0" json:"result,omitempty"`
	Friends []*CMsgClientToGCGetFriendRanksResponse_FriendRank `protobuf:"bytes,2,rep,name=friends" json:"friends,omitempty"`
}

// Default values for CMsgClientToGCGetFriendRanksResponse fields.
const (
	Default_CMsgClientToGCGetFriendRanksResponse_Result = CMsgClientToGCGetFriendRanksResponse_k_eInternalError
)

func (x *CMsgClientToGCGetFriendRanksResponse) Reset() {
	*x = CMsgClientToGCGetFriendRanksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendRanksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendRanksResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendRanksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendRanksResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendRanksResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgClientToGCGetFriendRanksResponse) GetResult() CMsgClientToGCGetFriendRanksResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetFriendRanksResponse_Result
}

func (x *CMsgClientToGCGetFriendRanksResponse) GetFriends() []*CMsgClientToGCGetFriendRanksResponse_FriendRank {
	if x != nil {
		return x.Friends
	}
	return nil
}

type CMsgClientToGCGetPuzzleLeaderboards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId *uint32 `protobuf:"varint,1,opt,name=puzzle_id,json=puzzleId" json:"puzzle_id,omitempty"`
	Count    *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CMsgClientToGCGetPuzzleLeaderboards) Reset() {
	*x = CMsgClientToGCGetPuzzleLeaderboards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPuzzleLeaderboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPuzzleLeaderboards) ProtoMessage() {}

func (x *CMsgClientToGCGetPuzzleLeaderboards) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPuzzleLeaderboards.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPuzzleLeaderboards) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgClientToGCGetPuzzleLeaderboards) GetPuzzleId() uint32 {
	if x != nil && x.PuzzleId != nil {
		return *x.PuzzleId
	}
	return 0
}

func (x *CMsgClientToGCGetPuzzleLeaderboards) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgClientToGCGetPuzzleLeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse     `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse,def=0" json:"result,omitempty"`
	Leaderboards []*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard `protobuf:"bytes,2,rep,name=leaderboards" json:"leaderboards,omitempty"`
}

// Default values for CMsgClientToGCGetPuzzleLeaderboardsResponse fields.
const (
	Default_CMsgClientToGCGetPuzzleLeaderboardsResponse_Result = CMsgClientToGCGetPuzzleLeaderboardsResponse_k_eInternalError
)

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse) Reset() {
	*x = CMsgClientToGCGetPuzzleLeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPuzzleLeaderboardsResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPuzzleLeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPuzzleLeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse) GetResult() CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetPuzzleLeaderboardsResponse_Result
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse) GetLeaderboards() []*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type CMsgClientToGCGetPostMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgClientToGCGetPostMatchStats) Reset() {
	*x = CMsgClientToGCGetPostMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPostMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPostMatchStats) ProtoMessage() {}

func (x *CMsgClientToGCGetPostMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPostMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPostMatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgClientToGCGetPostMatchStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgClientToGCGetPostMatchStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *CMsgClientToGCGetPostMatchStatsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCGetPostMatchStatsResponse_EResponse,def=0" json:"result,omitempty"`
	MatchStats *CMsgPublicPostMatchStats                          `protobuf:"bytes,2,opt,name=match_stats,json=matchStats" json:"match_stats,omitempty"`
}

// Default values for CMsgClientToGCGetPostMatchStatsResponse fields.
const (
	Default_CMsgClientToGCGetPostMatchStatsResponse_Result = CMsgClientToGCGetPostMatchStatsResponse_k_eInternalError
)

func (x *CMsgClientToGCGetPostMatchStatsResponse) Reset() {
	*x = CMsgClientToGCGetPostMatchStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPostMatchStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPostMatchStatsResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetPostMatchStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPostMatchStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPostMatchStatsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgClientToGCGetPostMatchStatsResponse) GetResult() CMsgClientToGCGetPostMatchStatsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetPostMatchStatsResponse_Result
}

func (x *CMsgClientToGCGetPostMatchStatsResponse) GetMatchStats() *CMsgPublicPostMatchStats {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

type CMsgMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp             *uint32                          `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	MatchMode             *EDACMatchMode                   `protobuf:"varint,2,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode              *EDACGameMode                    `protobuf:"varint,3,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	MmrMin                *uint32                          `protobuf:"varint,4,opt,name=mmr_min,json=mmrMin" json:"mmr_min,omitempty"`
	MmrMax                *uint32                          `protobuf:"varint,5,opt,name=mmr_max,json=mmrMax" json:"mmr_max,omitempty"`
	NumGames              *uint32                          `protobuf:"varint,10,opt,name=num_games,json=numGames" json:"num_games,omitempty"`
	NumPlayers            *uint32                          `protobuf:"varint,11,opt,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	TotalDurationSeconds  *uint64                          `protobuf:"varint,12,opt,name=total_duration_seconds,json=totalDurationSeconds" json:"total_duration_seconds,omitempty"`
	TotalRounds           *uint64                          `protobuf:"varint,13,opt,name=total_rounds,json=totalRounds" json:"total_rounds,omitempty"`
	PlayerDurationSeconds *uint64                          `protobuf:"varint,14,opt,name=player_duration_seconds,json=playerDurationSeconds" json:"player_duration_seconds,omitempty"`
	PlayerRounds          *uint64                          `protobuf:"varint,15,opt,name=player_rounds,json=playerRounds" json:"player_rounds,omitempty"`
	RoundStats            []*CMsgMatchStats_RoundStats     `protobuf:"bytes,20,rep,name=round_stats,json=roundStats" json:"round_stats,omitempty"`
	UnderlordStats        []*CMsgMatchStats_UnderlordStats `protobuf:"bytes,21,rep,name=underlord_stats,json=underlordStats" json:"underlord_stats,omitempty"`
	EntityInfos           []*CMsgMatchStats_EntityInfo     `protobuf:"bytes,22,rep,name=entity_infos,json=entityInfos" json:"entity_infos,omitempty"`
}

// Default values for CMsgMatchStats fields.
const (
	Default_CMsgMatchStats_MatchMode = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgMatchStats_GameMode  = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CMsgMatchStats) Reset() {
	*x = CMsgMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStats) ProtoMessage() {}

func (x *CMsgMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{119}
}

func (x *CMsgMatchStats) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgMatchStats) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgMatchStats_MatchMode
}

func (x *CMsgMatchStats) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgMatchStats_GameMode
}

func (x *CMsgMatchStats) GetMmrMin() uint32 {
	if x != nil && x.MmrMin != nil {
		return *x.MmrMin
	}
	return 0
}

func (x *CMsgMatchStats) GetMmrMax() uint32 {
	if x != nil && x.MmrMax != nil {
		return *x.MmrMax
	}
	return 0
}

func (x *CMsgMatchStats) GetNumGames() uint32 {
	if x != nil && x.NumGames != nil {
		return *x.NumGames
	}
	return 0
}

func (x *CMsgMatchStats) GetNumPlayers() uint32 {
	if x != nil && x.NumPlayers != nil {
		return *x.NumPlayers
	}
	return 0
}

func (x *CMsgMatchStats) GetTotalDurationSeconds() uint64 {
	if x != nil && x.TotalDurationSeconds != nil {
		return *x.TotalDurationSeconds
	}
	return 0
}

func (x *CMsgMatchStats) GetTotalRounds() uint64 {
	if x != nil && x.TotalRounds != nil {
		return *x.TotalRounds
	}
	return 0
}

func (x *CMsgMatchStats) GetPlayerDurationSeconds() uint64 {
	if x != nil && x.PlayerDurationSeconds != nil {
		return *x.PlayerDurationSeconds
	}
	return 0
}

func (x *CMsgMatchStats) GetPlayerRounds() uint64 {
	if x != nil && x.PlayerRounds != nil {
		return *x.PlayerRounds
	}
	return 0
}

func (x *CMsgMatchStats) GetRoundStats() []*CMsgMatchStats_RoundStats {
	if x != nil {
		return x.RoundStats
	}
	return nil
}

func (x *CMsgMatchStats) GetUnderlordStats() []*CMsgMatchStats_UnderlordStats {
	if x != nil {
		return x.UnderlordStats
	}
	return nil
}

func (x *CMsgMatchStats) GetEntityInfos() []*CMsgMatchStats_EntityInfo {
	if x != nil {
		return x.EntityInfos
	}
	return nil
}

type CMsgGCToClientDevMMStatus_Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartySize     *uint32        `protobuf:"varint,1,opt,name=party_size,json=partySize" json:"party_size,omitempty"`
	CompatVersion *uint32        `protobuf:"varint,2,opt,name=compat_version,json=compatVersion" json:"compat_version,omitempty"`
	GameMode      *EDACGameMode  `protobuf:"varint,3,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	MatchMode     *EDACMatchMode `protobuf:"varint,4,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
}

// Default values for CMsgGCToClientDevMMStatus_Party fields.
const (
	Default_CMsgGCToClientDevMMStatus_Party_GameMode  = EDACGameMode_k_EDACGameMode_Invalid
	Default_CMsgGCToClientDevMMStatus_Party_MatchMode = EDACMatchMode_k_EDACMatchMode_Invalid
)

func (x *CMsgGCToClientDevMMStatus_Party) Reset() {
	*x = CMsgGCToClientDevMMStatus_Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientDevMMStatus_Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientDevMMStatus_Party) ProtoMessage() {}

func (x *CMsgGCToClientDevMMStatus_Party) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientDevMMStatus_Party.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientDevMMStatus_Party) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{33, 0}
}

func (x *CMsgGCToClientDevMMStatus_Party) GetPartySize() uint32 {
	if x != nil && x.PartySize != nil {
		return *x.PartySize
	}
	return 0
}

func (x *CMsgGCToClientDevMMStatus_Party) GetCompatVersion() uint32 {
	if x != nil && x.CompatVersion != nil {
		return *x.CompatVersion
	}
	return 0
}

func (x *CMsgGCToClientDevMMStatus_Party) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgGCToClientDevMMStatus_Party_GameMode
}

func (x *CMsgGCToClientDevMMStatus_Party) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgGCToClientDevMMStatus_Party_MatchMode
}

type CMsgGCToClientEventInfo_EventState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventOwned *bool `protobuf:"varint,1,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
}

func (x *CMsgGCToClientEventInfo_EventState) Reset() {
	*x = CMsgGCToClientEventInfo_EventState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_EventState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_EventState) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_EventState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_EventState.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_EventState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CMsgGCToClientEventInfo_EventState) GetEventOwned() bool {
	if x != nil && x.EventOwned != nil {
		return *x.EventOwned
	}
	return false
}

type CMsgGCToClientEventInfo_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId *uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Balance    *uint32 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
}

func (x *CMsgGCToClientEventInfo_Currency) Reset() {
	*x = CMsgGCToClientEventInfo_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_Currency) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_Currency.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_Currency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 1}
}

func (x *CMsgGCToClientEventInfo_Currency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Currency) GetBalance() uint32 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

type CMsgGCToClientEventInfo_Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimId   *uint32 `protobuf:"varint,1,opt,name=claim_id,json=claimId" json:"claim_id,omitempty"`
	NumClaims *uint32 `protobuf:"varint,2,opt,name=num_claims,json=numClaims" json:"num_claims,omitempty"`
}

func (x *CMsgGCToClientEventInfo_Claim) Reset() {
	*x = CMsgGCToClientEventInfo_Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_Claim) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_Claim) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_Claim.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_Claim) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 2}
}

func (x *CMsgGCToClientEventInfo_Claim) GetClaimId() uint32 {
	if x != nil && x.ClaimId != nil {
		return *x.ClaimId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Claim) GetNumClaims() uint32 {
	if x != nil && x.NumClaims != nil {
		return *x.NumClaims
	}
	return 0
}

type CMsgGCToClientEventInfo_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId      *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId  *uint32 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	ChallengeId *uint32 `protobuf:"varint,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	CreatedTime *uint32 `protobuf:"varint,4,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	Claimed     *uint32 `protobuf:"varint,5,opt,name=claimed" json:"claimed,omitempty"`
	Progress    *uint32 `protobuf:"varint,6,opt,name=progress" json:"progress,omitempty"`
	ConfigId    *uint32 `protobuf:"varint,7,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Active      *bool   `protobuf:"varint,8,opt,name=active" json:"active,omitempty"`
}

func (x *CMsgGCToClientEventInfo_Challenge) Reset() {
	*x = CMsgGCToClientEventInfo_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_Challenge) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 3}
}

func (x *CMsgGCToClientEventInfo_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetCreatedTime() uint32 {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetClaimed() uint32 {
	if x != nil && x.Claimed != nil {
		return *x.Claimed
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetConfigId() uint32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_Challenge) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type CMsgGCToClientEventInfo_VirtualItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CMsgGCToClientEventInfo_VirtualItem) Reset() {
	*x = CMsgGCToClientEventInfo_VirtualItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_VirtualItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_VirtualItem) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_VirtualItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_VirtualItem.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_VirtualItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 4}
}

func (x *CMsgGCToClientEventInfo_VirtualItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CMsgGCToClientEventInfo_VirtualItemEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquipSlot    *uint32 `protobuf:"varint,1,opt,name=equip_slot,json=equipSlot" json:"equip_slot,omitempty"`
	EquipSubSlot *uint32 `protobuf:"varint,2,opt,name=equip_sub_slot,json=equipSubSlot" json:"equip_sub_slot,omitempty"`
	DefIndex     *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) Reset() {
	*x = CMsgGCToClientEventInfo_VirtualItemEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEventInfo_VirtualItemEquip) ProtoMessage() {}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEventInfo_VirtualItemEquip.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEventInfo_VirtualItemEquip) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{43, 5}
}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) GetEquipSlot() uint32 {
	if x != nil && x.EquipSlot != nil {
		return *x.EquipSlot
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) GetEquipSubSlot() uint32 {
	if x != nil && x.EquipSubSlot != nil {
		return *x.EquipSubSlot
	}
	return 0
}

func (x *CMsgGCToClientEventInfo_VirtualItemEquip) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CMsgEventClaimRewards_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex *uint32 `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	ItemId   *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgEventClaimRewards_Item) Reset() {
	*x = CMsgEventClaimRewards_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEventClaimRewards_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventClaimRewards_Item) ProtoMessage() {}

func (x *CMsgEventClaimRewards_Item) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventClaimRewards_Item.ProtoReflect.Descriptor instead.
func (*CMsgEventClaimRewards_Item) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CMsgEventClaimRewards_Item) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgEventClaimRewards_Item) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgEventClaimRewards_Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId *uint32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Progress      *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
}

func (x *CMsgEventClaimRewards_Achievement) Reset() {
	*x = CMsgEventClaimRewards_Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEventClaimRewards_Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventClaimRewards_Achievement) ProtoMessage() {}

func (x *CMsgEventClaimRewards_Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventClaimRewards_Achievement.ProtoReflect.Descriptor instead.
func (*CMsgEventClaimRewards_Achievement) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{48, 1}
}

func (x *CMsgEventClaimRewards_Achievement) GetAchievementId() uint32 {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return 0
}

func (x *CMsgEventClaimRewards_Achievement) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CMsgEventClaimRewards_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId *uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Grant      *uint32 `protobuf:"varint,2,opt,name=grant" json:"grant,omitempty"`
}

func (x *CMsgEventClaimRewards_Currency) Reset() {
	*x = CMsgEventClaimRewards_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEventClaimRewards_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventClaimRewards_Currency) ProtoMessage() {}

func (x *CMsgEventClaimRewards_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventClaimRewards_Currency.ProtoReflect.Descriptor instead.
func (*CMsgEventClaimRewards_Currency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{48, 2}
}

func (x *CMsgEventClaimRewards_Currency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgEventClaimRewards_Currency) GetGrant() uint32 {
	if x != nil && x.Grant != nil {
		return *x.Grant
	}
	return 0
}

type CMsgEventClaimRewards_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeSlot *uint32 `protobuf:"varint,1,opt,name=challenge_slot,json=challengeSlot" json:"challenge_slot,omitempty"`
	Progress      *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Activated     *bool   `protobuf:"varint,3,opt,name=activated" json:"activated,omitempty"`
	Rolled        *bool   `protobuf:"varint,4,opt,name=rolled" json:"rolled,omitempty"`
}

func (x *CMsgEventClaimRewards_Challenge) Reset() {
	*x = CMsgEventClaimRewards_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEventClaimRewards_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventClaimRewards_Challenge) ProtoMessage() {}

func (x *CMsgEventClaimRewards_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventClaimRewards_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgEventClaimRewards_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{48, 3}
}

func (x *CMsgEventClaimRewards_Challenge) GetChallengeSlot() uint32 {
	if x != nil && x.ChallengeSlot != nil {
		return *x.ChallengeSlot
	}
	return 0
}

func (x *CMsgEventClaimRewards_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgEventClaimRewards_Challenge) GetActivated() bool {
	if x != nil && x.Activated != nil {
		return *x.Activated
	}
	return false
}

func (x *CMsgEventClaimRewards_Challenge) GetRolled() bool {
	if x != nil && x.Rolled != nil {
		return *x.Rolled
	}
	return false
}

type CMsgClientToGCGetFriendCodesResponse_Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendCode    *uint64 `protobuf:"varint,1,opt,name=friend_code,json=friendCode" json:"friend_code,omitempty"`
	RemainingUses *uint32 `protobuf:"varint,2,opt,name=remaining_uses,json=remainingUses" json:"remaining_uses,omitempty"`
	ExpiryTime    *uint32 `protobuf:"varint,3,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) Reset() {
	*x = CMsgClientToGCGetFriendCodesResponse_Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendCodesResponse_Code) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendCodesResponse_Code.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendCodesResponse_Code) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{60, 0}
}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) GetFriendCode() uint64 {
	if x != nil && x.FriendCode != nil {
		return *x.FriendCode
	}
	return 0
}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) GetRemainingUses() uint32 {
	if x != nil && x.RemainingUses != nil {
		return *x.RemainingUses
	}
	return 0
}

func (x *CMsgClientToGCGetFriendCodesResponse_Code) GetExpiryTime() uint32 {
	if x != nil && x.ExpiryTime != nil {
		return *x.ExpiryTime
	}
	return 0
}

type CMsgClientToGCCanPurchaseItemResponse_Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId   *EDACStoreID `protobuf:"varint,1,opt,name=store_id,json=storeId,enum=underlords.EDACStoreID,def=0" json:"store_id,omitempty"`
	Quantity  *uint32      `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	TimeStamp *uint32      `protobuf:"varint,3,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	DeviceId  *uint64      `protobuf:"varint,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

// Default values for CMsgClientToGCCanPurchaseItemResponse_Reservation fields.
const (
	Default_CMsgClientToGCCanPurchaseItemResponse_Reservation_StoreId = EDACStoreID_k_EDACStoreID_Invalid
)

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) Reset() {
	*x = CMsgClientToGCCanPurchaseItemResponse_Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCanPurchaseItemResponse_Reservation) ProtoMessage() {}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCanPurchaseItemResponse_Reservation.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCanPurchaseItemResponse_Reservation) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{75, 0}
}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) GetStoreId() EDACStoreID {
	if x != nil && x.StoreId != nil {
		return *x.StoreId
	}
	return Default_CMsgClientToGCCanPurchaseItemResponse_Reservation_StoreId
}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *CMsgClientToGCCanPurchaseItemResponse_Reservation) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

type CMsgClientToGCHandleItemPurchase_StoreInfoIOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt []byte `protobuf:"bytes,1,opt,name=receipt" json:"receipt,omitempty"`
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfoIOS) Reset() {
	*x = CMsgClientToGCHandleItemPurchase_StoreInfoIOS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfoIOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchase_StoreInfoIOS) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfoIOS) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchase_StoreInfoIOS.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchase_StoreInfoIOS) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{76, 0}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfoIOS) GetReceipt() []byte {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	StoreSkuId *string `protobuf:"bytes,2,opt,name=store_sku_id,json=storeSkuId" json:"store_sku_id,omitempty"`
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) Reset() {
	*x = CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{76, 1}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay) GetStoreSkuId() string {
	if x != nil && x.StoreSkuId != nil {
		return *x.StoreSkuId
	}
	return ""
}

type CMsgClientToGCHandleItemPurchase_StoreInfo_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	DefIndex *uint32 `protobuf:"varint,2,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Quantity *uint32 `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) Reset() {
	*x = CMsgClientToGCHandleItemPurchase_StoreInfo_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchase_StoreInfo_Test) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchase_StoreInfo_Test.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchase_StoreInfo_Test) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{76, 2}
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCHandleItemPurchase_StoreInfo_Test) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse,def=0" json:"result,omitempty"`
	PurchaseItemResult *CMsgClientToGCCanPurchaseItemResponse_EResponse                             `protobuf:"varint,2,opt,name=purchase_item_result,json=purchaseItemResult,enum=underlords.CMsgClientToGCCanPurchaseItemResponse_EResponse,def=0" json:"purchase_item_result,omitempty"`
	StoreSkuId         *string                                                                      `protobuf:"bytes,3,opt,name=store_sku_id,json=storeSkuId" json:"store_sku_id,omitempty"`
	Token              *string                                                                      `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

// Default values for CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse fields.
const (
	Default_CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_Result             = CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_k_eInternalError
	Default_CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_PurchaseItemResult = CMsgClientToGCCanPurchaseItemResponse_k_eInternalError
)

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) Reset() {
	*x = CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{77, 0}
}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) GetResult() CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_Result
}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) GetPurchaseItemResult() CMsgClientToGCCanPurchaseItemResponse_EResponse {
	if x != nil && x.PurchaseItemResult != nil {
		return *x.PurchaseItemResult
	}
	return Default_CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_PurchaseItemResult
}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) GetStoreSkuId() string {
	if x != nil && x.StoreSkuId != nil {
		return *x.StoreSkuId
	}
	return ""
}

func (x *CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type CMsgClientToGCEventEquipVirtualItems_Equip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefIndex     *uint32 `protobuf:"varint,2,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	EquipSlot    *uint32 `protobuf:"varint,3,opt,name=equip_slot,json=equipSlot" json:"equip_slot,omitempty"`
	EquipSubSlot *uint32 `protobuf:"varint,4,opt,name=equip_sub_slot,json=equipSubSlot" json:"equip_sub_slot,omitempty"`
}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) Reset() {
	*x = CMsgClientToGCEventEquipVirtualItems_Equip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEventEquipVirtualItems_Equip) ProtoMessage() {}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEventEquipVirtualItems_Equip.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEventEquipVirtualItems_Equip) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{78, 0}
}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) GetEquipSlot() uint32 {
	if x != nil && x.EquipSlot != nil {
		return *x.EquipSlot
	}
	return 0
}

func (x *CMsgClientToGCEventEquipVirtualItems_Equip) GetEquipSubSlot() uint32 {
	if x != nil && x.EquipSubSlot != nil {
		return *x.EquipSubSlot
	}
	return 0
}

type CMsgClientToGCGetDuosRanksResponse_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherAccountId   *uint32 `protobuf:"varint,1,opt,name=other_account_id,json=otherAccountId" json:"other_account_id,omitempty"`
	LastPlayed       *uint32 `protobuf:"varint,2,opt,name=last_played,json=lastPlayed" json:"last_played,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	GamesPlayed      *uint32 `protobuf:"varint,4,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	NumFirstPlace    *uint32 `protobuf:"varint,6,opt,name=num_first_place,json=numFirstPlace" json:"num_first_place,omitempty"`
	NumTopThree      *uint32 `protobuf:"varint,7,opt,name=num_top_three,json=numTopThree" json:"num_top_three,omitempty"`
	MmrLevel         *uint32 `protobuf:"varint,8,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	MmrLevelProgress *uint32 `protobuf:"varint,9,opt,name=mmr_level_progress,json=mmrLevelProgress" json:"mmr_level_progress,omitempty"`
	MmrLevelScore    *uint32 `protobuf:"varint,10,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
	LeaderboardPlace *uint32 `protobuf:"varint,12,opt,name=leaderboard_place,json=leaderboardPlace" json:"leaderboard_place,omitempty"`
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) Reset() {
	*x = CMsgClientToGCGetDuosRanksResponse_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDuosRanksResponse_Team) ProtoMessage() {}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDuosRanksResponse_Team.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDuosRanksResponse_Team) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{106, 0}
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetOtherAccountId() uint32 {
	if x != nil && x.OtherAccountId != nil {
		return *x.OtherAccountId
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetLastPlayed() uint32 {
	if x != nil && x.LastPlayed != nil {
		return *x.LastPlayed
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetGamesPlayed() uint32 {
	if x != nil && x.GamesPlayed != nil {
		return *x.GamesPlayed
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetNumFirstPlace() uint32 {
	if x != nil && x.NumFirstPlace != nil {
		return *x.NumFirstPlace
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetNumTopThree() uint32 {
	if x != nil && x.NumTopThree != nil {
		return *x.NumTopThree
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetMmrLevelProgress() uint32 {
	if x != nil && x.MmrLevelProgress != nil {
		return *x.MmrLevelProgress
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

func (x *CMsgClientToGCGetDuosRanksResponse_Team) GetLeaderboardPlace() uint32 {
	if x != nil && x.LeaderboardPlace != nil {
		return *x.LeaderboardPlace
	}
	return 0
}

type CMsgClientToGCGetProfileResponse_CityCrawlProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlordId *uint32 `protobuf:"varint,1,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	Progress    *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Total       *uint32 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) Reset() {
	*x = CMsgClientToGCGetProfileResponse_CityCrawlProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfileResponse_CityCrawlProgress) ProtoMessage() {}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfileResponse_CityCrawlProgress.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfileResponse_CityCrawlProgress) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{108, 0}
}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgClientToGCGetProfileResponse_CityCrawlProgress) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CMsgClientToGCGetMatchHistoryResponse_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        *uint32        `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	MatchId          *uint64        `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	EliminationPlace *uint32        `protobuf:"varint,3,opt,name=elimination_place,json=eliminationPlace" json:"elimination_place,omitempty"`
	EliminationTime  *uint32        `protobuf:"varint,4,opt,name=elimination_time,json=eliminationTime" json:"elimination_time,omitempty"`
	EliminationRound *uint32        `protobuf:"varint,5,opt,name=elimination_round,json=eliminationRound" json:"elimination_round,omitempty"`
	Platform         *EDACPlatform  `protobuf:"varint,6,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	UnderlordId      *uint32        `protobuf:"varint,7,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	MatchMode        *EDACMatchMode `protobuf:"varint,8,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode         *EDACGameMode  `protobuf:"varint,9,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	MatchLength      *uint32        `protobuf:"varint,10,opt,name=match_length,json=matchLength" json:"match_length,omitempty"`
	MatchRounds      *uint32        `protobuf:"varint,11,opt,name=match_rounds,json=matchRounds" json:"match_rounds,omitempty"`
	EventId          *uint32        `protobuf:"varint,12,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	DuosPartner      *uint32        `protobuf:"varint,13,opt,name=duos_partner,json=duosPartner" json:"duos_partner,omitempty"`
	MatchSalt        *uint32        `protobuf:"varint,14,opt,name=match_salt,json=matchSalt" json:"match_salt,omitempty"`
}

// Default values for CMsgClientToGCGetMatchHistoryResponse_Match fields.
const (
	Default_CMsgClientToGCGetMatchHistoryResponse_Match_Platform  = EDACPlatform_k_eDACPlatform_None
	Default_CMsgClientToGCGetMatchHistoryResponse_Match_MatchMode = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgClientToGCGetMatchHistoryResponse_Match_GameMode  = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) Reset() {
	*x = CMsgClientToGCGetMatchHistoryResponse_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistoryResponse_Match) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse_Match.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistoryResponse_Match) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{110, 0}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetEliminationPlace() uint32 {
	if x != nil && x.EliminationPlace != nil {
		return *x.EliminationPlace
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetEliminationTime() uint32 {
	if x != nil && x.EliminationTime != nil {
		return *x.EliminationTime
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetEliminationRound() uint32 {
	if x != nil && x.EliminationRound != nil {
		return *x.EliminationRound
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgClientToGCGetMatchHistoryResponse_Match_Platform
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientToGCGetMatchHistoryResponse_Match_MatchMode
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgClientToGCGetMatchHistoryResponse_Match_GameMode
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetMatchLength() uint32 {
	if x != nil && x.MatchLength != nil {
		return *x.MatchLength
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetMatchRounds() uint32 {
	if x != nil && x.MatchRounds != nil {
		return *x.MatchRounds
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetDuosPartner() uint32 {
	if x != nil && x.DuosPartner != nil {
		return *x.DuosPartner
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_Match) GetMatchSalt() uint32 {
	if x != nil && x.MatchSalt != nil {
		return *x.MatchSalt
	}
	return 0
}

type CMsgClientToGCGetMatchHistoryResponse_MatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StatId  []uint32 `protobuf:"varint,2,rep,name=stat_id,json=statId" json:"stat_id,omitempty"`
	Value   []uint32 `protobuf:"varint,3,rep,name=value" json:"value,omitempty"`
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) Reset() {
	*x = CMsgClientToGCGetMatchHistoryResponse_MatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetMatchHistoryResponse_MatchStats) ProtoMessage() {}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetMatchHistoryResponse_MatchStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetMatchHistoryResponse_MatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{110, 1}
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) GetStatId() []uint32 {
	if x != nil {
		return x.StatId
	}
	return nil
}

func (x *CMsgClientToGCGetMatchHistoryResponse_MatchStats) GetValue() []uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgClientToGCGetFriendRanksResponse_FriendRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MmrLevel      *uint32 `protobuf:"varint,2,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	TurboMmrLevel *uint32 `protobuf:"varint,3,opt,name=turbo_mmr_level,json=turboMmrLevel" json:"turbo_mmr_level,omitempty"`
}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) Reset() {
	*x = CMsgClientToGCGetFriendRanksResponse_FriendRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFriendRanksResponse_FriendRank) ProtoMessage() {}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFriendRanksResponse_FriendRank.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFriendRanksResponse_FriendRank) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{114, 0}
}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CMsgClientToGCGetFriendRanksResponse_FriendRank) GetTurboMmrLevel() uint32 {
	if x != nil && x.TurboMmrLevel != nil {
		return *x.TurboMmrLevel
	}
	return 0
}

type CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Persona   *string `protobuf:"bytes,2,opt,name=persona" json:"persona,omitempty"`
	Value     *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) Reset() {
	*x = CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) ProtoMessage() {}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{116, 0}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) GetPersona() string {
	if x != nil && x.Persona != nil {
		return *x.Persona
	}
	return ""
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardType  *uint32                                                         `protobuf:"varint,1,opt,name=leaderboard_type,json=leaderboardType" json:"leaderboard_type,omitempty"`
	LeaderboardEntry []*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry `protobuf:"bytes,2,rep,name=leaderboard_entry,json=leaderboardEntry" json:"leaderboard_entry,omitempty"`
	Histogram        *CMsgHistogram                                                  `protobuf:"bytes,3,opt,name=histogram" json:"histogram,omitempty"`
	BoardCode        *string                                                         `protobuf:"bytes,4,opt,name=board_code,json=boardCode" json:"board_code,omitempty"`
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) Reset() {
	*x = CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) ProtoMessage() {}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{116, 1}
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) GetLeaderboardType() uint32 {
	if x != nil && x.LeaderboardType != nil {
		return *x.LeaderboardType
	}
	return 0
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) GetLeaderboardEntry() []*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry {
	if x != nil {
		return x.LeaderboardEntry
	}
	return nil
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) GetHistogram() *CMsgHistogram {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard) GetBoardCode() string {
	if x != nil && x.BoardCode != nil {
		return *x.BoardCode
	}
	return ""
}

type CMsgMatchStats_RoundUnitStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId   *uint32 `protobuf:"varint,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	NumWins    *uint32 `protobuf:"varint,2,opt,name=num_wins,json=numWins" json:"num_wins,omitempty"`
	NumLosses  *uint32 `protobuf:"varint,3,opt,name=num_losses,json=numLosses" json:"num_losses,omitempty"`
	FinalPlace *uint64 `protobuf:"varint,4,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
}

func (x *CMsgMatchStats_RoundUnitStats) Reset() {
	*x = CMsgMatchStats_RoundUnitStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchStats_RoundUnitStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStats_RoundUnitStats) ProtoMessage() {}

func (x *CMsgMatchStats_RoundUnitStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStats_RoundUnitStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchStats_RoundUnitStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{119, 0}
}

func (x *CMsgMatchStats_RoundUnitStats) GetEntityId() uint32 {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return 0
}

func (x *CMsgMatchStats_RoundUnitStats) GetNumWins() uint32 {
	if x != nil && x.NumWins != nil {
		return *x.NumWins
	}
	return 0
}

func (x *CMsgMatchStats_RoundUnitStats) GetNumLosses() uint32 {
	if x != nil && x.NumLosses != nil {
		return *x.NumLosses
	}
	return 0
}

func (x *CMsgMatchStats_RoundUnitStats) GetFinalPlace() uint64 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

type CMsgMatchStats_RoundStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundMin        *uint32                          `protobuf:"varint,1,opt,name=round_min,json=roundMin" json:"round_min,omitempty"`
	RoundMax        *uint32                          `protobuf:"varint,2,opt,name=round_max,json=roundMax" json:"round_max,omitempty"`
	NumCombatRounds *uint32                          `protobuf:"varint,3,opt,name=num_combat_rounds,json=numCombatRounds" json:"num_combat_rounds,omitempty"`
	StartingLife    *uint64                          `protobuf:"varint,4,opt,name=starting_life,json=startingLife" json:"starting_life,omitempty"`
	PlayerLevel     *uint64                          `protobuf:"varint,5,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Rerolls         *uint64                          `protobuf:"varint,6,opt,name=rerolls" json:"rerolls,omitempty"`
	Gold            *uint64                          `protobuf:"varint,7,opt,name=gold" json:"gold,omitempty"`
	InterestGold    *uint64                          `protobuf:"varint,8,opt,name=interest_gold,json=interestGold" json:"interest_gold,omitempty"`
	StreakGold      *uint64                          `protobuf:"varint,9,opt,name=streak_gold,json=streakGold" json:"streak_gold,omitempty"`
	BonusGold       *uint64                          `protobuf:"varint,10,opt,name=bonus_gold,json=bonusGold" json:"bonus_gold,omitempty"`
	TotalDamage     *uint64                          `protobuf:"varint,11,opt,name=total_damage,json=totalDamage" json:"total_damage,omitempty"`
	TotalLosses     *uint64                          `protobuf:"varint,12,opt,name=total_losses,json=totalLosses" json:"total_losses,omitempty"`
	IsCreep         *bool                            `protobuf:"varint,13,opt,name=is_creep,json=isCreep" json:"is_creep,omitempty"`
	UnitStats       []*CMsgMatchStats_RoundUnitStats `protobuf:"bytes,14,rep,name=unit_stats,json=unitStats" json:"unit_stats,omitempty"`
}

func (x *CMsgMatchStats_RoundStats) Reset() {
	*x = CMsgMatchStats_RoundStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchStats_RoundStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStats_RoundStats) ProtoMessage() {}

func (x *CMsgMatchStats_RoundStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStats_RoundStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchStats_RoundStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{119, 1}
}

func (x *CMsgMatchStats_RoundStats) GetRoundMin() uint32 {
	if x != nil && x.RoundMin != nil {
		return *x.RoundMin
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetRoundMax() uint32 {
	if x != nil && x.RoundMax != nil {
		return *x.RoundMax
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetNumCombatRounds() uint32 {
	if x != nil && x.NumCombatRounds != nil {
		return *x.NumCombatRounds
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetStartingLife() uint64 {
	if x != nil && x.StartingLife != nil {
		return *x.StartingLife
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetPlayerLevel() uint64 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetRerolls() uint64 {
	if x != nil && x.Rerolls != nil {
		return *x.Rerolls
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetGold() uint64 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetInterestGold() uint64 {
	if x != nil && x.InterestGold != nil {
		return *x.InterestGold
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetStreakGold() uint64 {
	if x != nil && x.StreakGold != nil {
		return *x.StreakGold
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetBonusGold() uint64 {
	if x != nil && x.BonusGold != nil {
		return *x.BonusGold
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetTotalDamage() uint64 {
	if x != nil && x.TotalDamage != nil {
		return *x.TotalDamage
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetTotalLosses() uint64 {
	if x != nil && x.TotalLosses != nil {
		return *x.TotalLosses
	}
	return 0
}

func (x *CMsgMatchStats_RoundStats) GetIsCreep() bool {
	if x != nil && x.IsCreep != nil {
		return *x.IsCreep
	}
	return false
}

func (x *CMsgMatchStats_RoundStats) GetUnitStats() []*CMsgMatchStats_RoundUnitStats {
	if x != nil {
		return x.UnitStats
	}
	return nil
}

type CMsgMatchStats_UnderlordStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlordId  *uint32 `protobuf:"varint,1,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	TotalPlayers *uint32 `protobuf:"varint,2,opt,name=total_players,json=totalPlayers" json:"total_players,omitempty"`
	TotalPlace   *uint64 `protobuf:"varint,3,opt,name=total_place,json=totalPlace" json:"total_place,omitempty"`
}

func (x *CMsgMatchStats_UnderlordStats) Reset() {
	*x = CMsgMatchStats_UnderlordStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchStats_UnderlordStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStats_UnderlordStats) ProtoMessage() {}

func (x *CMsgMatchStats_UnderlordStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStats_UnderlordStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchStats_UnderlordStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{119, 2}
}

func (x *CMsgMatchStats_UnderlordStats) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgMatchStats_UnderlordStats) GetTotalPlayers() uint32 {
	if x != nil && x.TotalPlayers != nil {
		return *x.TotalPlayers
	}
	return 0
}

func (x *CMsgMatchStats_UnderlordStats) GetTotalPlace() uint64 {
	if x != nil && x.TotalPlace != nil {
		return *x.TotalPlace
	}
	return 0
}

type CMsgMatchStats_EntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId *uint32 `protobuf:"varint,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type     *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *CMsgMatchStats_EntityInfo) Reset() {
	*x = CMsgMatchStats_EntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchStats_EntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchStats_EntityInfo) ProtoMessage() {}

func (x *CMsgMatchStats_EntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_client_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchStats_EntityInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchStats_EntityInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_client_proto_rawDescGZIP(), []int{119, 3}
}

func (x *CMsgMatchStats_EntityInfo) GetEntityId() uint32 {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return 0
}

func (x *CMsgMatchStats_EntityInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgMatchStats_EntityInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

var File_underlords_dac_gcmessages_client_proto protoreflect.FileDescriptor

var file_underlords_dac_gcmessages_client_proto_rawDesc = []byte{
	0x0a, 0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x1a, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x64, 0x61, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x6e,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xee, 0x04, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41,
	0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41,
	0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a,
	0x06, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x5f, 0x53, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x74,
	0x10, 0x20, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4d, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x4f, 0x57, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x41, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f, 0x57, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44,
	0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0xd3, 0x04, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a,
	0x0c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x0b, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e,
	0x67, 0x73, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x0a, 0x12,
	0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0c, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f,
	0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcb,
	0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0x35, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x41, 0x43,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1f,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22,
	0x4e, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22,
	0x31, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x3f, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd7,
	0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x6e, 0x67, 0x73, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65,
	0x4e, 0x6f, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0a, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xe0, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x4d, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0xb2, 0x03, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad,
	0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10,
	0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0c, 0x22, 0xb1,
	0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0b, 0x6b, 0x5f, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x07, 0x45,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4b, 0x69, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x65, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x08, 0x22, 0xf2, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x22, 0xf1, 0x03, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x65, 0x76, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x62,
	0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x12, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc1, 0x06, 0x0a, 0x25,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x91, 0x05, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x43, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x4d, 0x10, 0x0e, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x0f, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x4d, 0x10, 0x10, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10,
	0x11, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x46, 0x65, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x4d, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x46, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d,
	0x61, 0x6e, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x1a, 0x22,
	0x66, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x03, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x10, 0x09, 0x22, 0xc6, 0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0f, 0x6b, 0x5f, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x69,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x02, 0x0a, 0x06, 0x45, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x0a, 0x22, 0x7e,
	0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39,
	0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x4d, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x26,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xef, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4e, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x73, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x79, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x2a, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9e, 0x0a, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x4d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x2d, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x1a, 0x45, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x41, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x1a, 0xf6, 0x01, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x2a, 0x0a, 0x0b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x74, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x53, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5e, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x07,
	0x22, 0xbe, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x05, 0x0a, 0x15, 0x43,
	0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x3c,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x1a, 0x50, 0x0a, 0x0b,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x41,
	0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x1a, 0x84, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x5f, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e,
	0x6f, 0x74, 0x4d, 0x65, 0x74, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x07, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x53, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xe3, 0x02,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x10, 0x09, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4f, 0x57, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x64, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x64, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0xf3, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0a, 0x22, 0xbc, 0x03, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x03, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52,
	0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x02,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x72,
	0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65,
	0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4e, 0x6f, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x77,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x22, 0xa4, 0x01, 0x0a, 0x22,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x09, 0x22,
	0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xb9, 0x03, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x6f, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x22, 0x20, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x02,
	0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x49, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x10, 0x05, 0x22, 0x40, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4b, 0x65, 0x79, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x48, 0x61, 0x76, 0x65, 0x54,
	0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x0c, 0x22,
	0x6d, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f,
	0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x41, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x79, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x10,
	0x05, 0x22, 0xae, 0x04, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x0b, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x32, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x4f,
	0x70, 0x5f, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x65, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x4f, 0x70,
	0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10,
	0x07, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x08, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x65, 0x4f, 0x70, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x65, 0x4f, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x10, 0x0a, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x69, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x04,
	0x22, 0x92, 0x03, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x44, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41,
	0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41,
	0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa8, 0x05, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x44, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x44, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x4f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x0a,
	0x22, 0x97, 0x06, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44,
	0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x4f, 0x53, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6f, 0x73, 0x12, 0x76, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x63,
	0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x29,
	0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x4f, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x1a, 0x4e, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x1a, 0x5f, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x91, 0x08, 0x0a, 0x28, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x74, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xd6, 0x04, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x7f, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x12, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6b,
	0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x11, 0x45, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x09,
	0x22, 0xab, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x22, 0x83,
	0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x69, 0x0a, 0x05, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x53, 0x75, 0x62,
	0x53, 0x6c, 0x6f, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x4d, 0x61, 0x6e, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x73, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x5f, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x10, 0x08, 0x22, 0xa9, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x44, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x44, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x41, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x22, 0x41, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x4d, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x45, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x22, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x02, 0x0a, 0x2c, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x08, 0x22, 0x8e, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x03, 0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0b, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x05, 0x22, 0x63, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x10, 0x08, 0x22, 0xb7, 0x01, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb2, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x22, 0x3a, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x66, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x22,
	0x81, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x08, 0x22, 0xdc, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65,
	0x76, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0e, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74, 0x47, 0x41, 0x43,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x45, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x74,
	0x47, 0x41, 0x43, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f,
	0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x41, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x65, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x10, 0x04, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x1f,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x27, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x69,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x04, 0x22, 0xbb, 0x02, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6f, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x73, 0x2e, 0x45, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x3a, 0x12, 0x6b, 0x5f, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x56, 0x0a, 0x0a, 0x45, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x5f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x5f, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0x02, 0x22, 0x90, 0x06, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6f,
	0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6f,
	0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xfd, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6d, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x22, 0x39, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x0b, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x62, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6d, 0x0a,
	0x12, 0x63, 0x69, 0x74, 0x79, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x63, 0x69, 0x74, 0x79, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6b, 0x6e, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f,
	0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x57,
	0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x31, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x32, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x32, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x33, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x33, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x34, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x34, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x73, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x6e, 0x6f, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4b,
	0x6e, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x11,
	0x43, 0x69, 0x74, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x06,
	0x22, 0x89, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xd6, 0x09, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xf9, 0x04, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f,
	0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x6f, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x61, 0x6c, 0x74, 0x1a, 0x56, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x06, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x08, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x10, 0x0b, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x73, 0x22, 0xbd, 0x03, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x55, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x70, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x6d, 0x6d, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x75, 0x72,
	0x62, 0x6f, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x66, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x10, 0x04, 0x22, 0x58, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x05, 0x0a,
	0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x0c, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x1a, 0x61, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x75, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x66, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x22, 0x3c, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x66, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x22, 0xb0, 0x0c, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44,
	0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x6d, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x6d, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6d, 0x72, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x6d, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x57,
	0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x1a, 0xf8, 0x03, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x63, 0x72, 0x65, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x65, 0x70, 0x12, 0x48, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x79,
	0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x1a, 0x51, 0x0a, 0x0a, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xa0, 0x23, 0x0a,
	0x14, 0x45, 0x47, 0x43, 0x44, 0x41, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xb2, 0x46, 0x12, 0x2d, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb3, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53,
	0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xb4,
	0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb5, 0x46, 0x12,
	0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0xb6, 0x46, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0xb7, 0x46, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xb8, 0x46, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xb9, 0x46, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x73, 0x49, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xba, 0x46, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x10, 0xa0, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0xa1,
	0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x44, 0x52, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xa2, 0x47, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x10, 0xa3, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa4, 0x47,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0xa5,
	0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa6, 0x47, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0xa7, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xa8, 0x47, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xa9, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xaa, 0x47, 0x12, 0x24,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0xab, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0xac, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0xad, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xae, 0x47, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0xaf, 0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xb0, 0x47,
	0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x10, 0xb1, 0x47, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xb2, 0x47, 0x12, 0x2d, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb3, 0x47, 0x12, 0x20, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x76, 0x4d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xb4, 0x47, 0x12, 0x2b, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x44, 0x65, 0x76, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb5, 0x47, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb6,
	0x47, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb7,
	0x47, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x10,
	0xb8, 0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb9, 0x47, 0x12, 0x21, 0x0a, 0x1c, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x10, 0xba, 0x47, 0x12, 0x29,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbb, 0x47, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0xbc, 0x47, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbd, 0x47, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xbe,
	0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x10, 0xbf, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x72, 0x6f, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xc0, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xc1, 0x47,
	0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xc2, 0x47, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xc3, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc4, 0x47, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x10, 0xc5, 0x47, 0x12, 0x2b,
	0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc6, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xc7,
	0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc8, 0x47, 0x12,
	0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x10, 0xc9, 0x47, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xca, 0x47, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xcb, 0x47, 0x12, 0x2d, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcc, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x79, 0x6e, 0x63, 0x10, 0xcd, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xce, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd1,
	0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd2,
	0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x10, 0xd3, 0x47, 0x12, 0x27, 0x0a,
	0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0xd4, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd5, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xd8, 0x47, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd9, 0x47, 0x12, 0x27, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x10, 0xda, 0x47, 0x12, 0x2f, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xdb, 0x47, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10,
	0xe4, 0x47, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xe5, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10,
	0xe6, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xe7, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xe8,
	0x47, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xe9, 0x47, 0x12, 0x26,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0xea, 0x47, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xeb, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xec,
	0x47, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0xed, 0x47, 0x12, 0x33,
	0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xee, 0x47, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0xef, 0x47, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf0, 0x47, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0xf1, 0x47, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf2, 0x47, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10,
	0xf3, 0x47, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xf4, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0xf5, 0x47, 0x12, 0x2e, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x41, 0x63, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf6, 0x47, 0x12, 0x20, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0xf7, 0x47, 0x12,
	0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf8, 0x47, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x76,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xfc, 0x47, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x44, 0x65, 0x76, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfd, 0x47, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x10, 0xfe, 0x47, 0x12,
	0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xff, 0x47, 0x12,
	0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x10,
	0x80, 0x48, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6f, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x81, 0x48, 0x12, 0x1f, 0x0a,
	0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x82, 0x48, 0x12, 0x27,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x83, 0x48, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x84, 0x48, 0x12, 0x2c, 0x0a,
	0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x85, 0x48, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x10, 0x86, 0x48, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x87, 0x48, 0x12, 0x23, 0x0a, 0x1e, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x10, 0x88, 0x48,
	0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x89, 0x48, 0x12, 0x2a, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x10, 0x8a, 0x48, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8b, 0x48, 0x12, 0x26, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x10, 0x8c, 0x48, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x8d, 0x48, 0x12, 0x37, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x8e, 0x48, 0x12, 0x3f,
	0x0a, 0x3a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8f, 0x48, 0x2a,
	0xd1, 0x01, 0x0a, 0x1c, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x10, 0x04, 0x2a, 0xf5, 0x01, 0x0a, 0x11, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x10, 0x05,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x10, 0x06, 0x42, 0x3e, 0x48, 0x01, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x80, 0x01, 0x00,
}

var (
	file_underlords_dac_gcmessages_client_proto_rawDescOnce sync.Once
	file_underlords_dac_gcmessages_client_proto_rawDescData = file_underlords_dac_gcmessages_client_proto_rawDesc
)

func file_underlords_dac_gcmessages_client_proto_rawDescGZIP() []byte {
	file_underlords_dac_gcmessages_client_proto_rawDescOnce.Do(func() {
		file_underlords_dac_gcmessages_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_underlords_dac_gcmessages_client_proto_rawDescData)
	})
	return file_underlords_dac_gcmessages_client_proto_rawDescData
}

var file_underlords_dac_gcmessages_client_proto_enumTypes = make([]protoimpl.EnumInfo, 48)
var file_underlords_dac_gcmessages_client_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_underlords_dac_gcmessages_client_proto_goTypes = []interface{}{
	(EGCDACClientMessages)(0),                                                        // 0: underlords.EGCDACClientMessages
	(EItemEditorReservationResult)(0),                                                // 1: underlords.EItemEditorReservationResult
	(EClientStatsEvent)(0),                                                           // 2: underlords.EClientStatsEvent
	(CMsgWebAPIClientDeviceInfo_EFlags)(0),                                           // 3: underlords.CMsgWebAPIClientDeviceInfo.EFlags
	(CMsgClientToGCStartMatchmakingResponse_EResultCode)(0),                          // 4: underlords.CMsgClientToGCStartMatchmakingResponse.EResultCode
	(CMsgGCToClientMatchmakingStopped_EReason)(0),                                    // 5: underlords.CMsgGCToClientMatchmakingStopped.EReason
	(CMsgClientToGCPartyCreateResponse_EResponse)(0),                                 // 6: underlords.CMsgClientToGCPartyCreateResponse.EResponse
	(CMsgClientToGCPartyLeaveResponse_EResponse)(0),                                  // 7: underlords.CMsgClientToGCPartyLeaveResponse.EResponse
	(CMsgClientToGCPartyJoinResponse_EResponse)(0),                                   // 8: underlords.CMsgClientToGCPartyJoinResponse.EResponse
	(CMsgClientToGCPartyAction_EAction)(0),                                           // 9: underlords.CMsgClientToGCPartyAction.EAction
	(CMsgClientToGCPartyActionResponse_EResponse)(0),                                 // 10: underlords.CMsgClientToGCPartyActionResponse.EResponse
	(CMsgClientToGCPartyStartMatchResponse_EResponse)(0),                             // 11: underlords.CMsgClientToGCPartyStartMatchResponse.EResponse
	(CMsgClientToGCPartyInviteUserResponse_EResponse)(0),                             // 12: underlords.CMsgClientToGCPartyInviteUserResponse.EResponse
	(CMsgGCToClientPartyEvent_EEvent)(0),                                             // 13: underlords.CMsgGCToClientPartyEvent.EEvent
	(CMsgClientToGCEventRequestInfoSyncResponse_EResponse)(0),                        // 14: underlords.CMsgClientToGCEventRequestInfoSyncResponse.EResponse
	(CMsgClientToGCEventClaimResponse_EResponse)(0),                                  // 15: underlords.CMsgClientToGCEventClaimResponse.EResponse
	(CMsgClientToGCEquipLoadoutResponse_EResponse)(0),                                // 16: underlords.CMsgClientToGCEquipLoadoutResponse.EResponse
	(CMsgClientToGCSpectateUserResponse_EResponse)(0),                                // 17: underlords.CMsgClientToGCSpectateUserResponse.EResponse
	(CMsgClientToGCRerollChallengeResponse_EResponse)(0),                             // 18: underlords.CMsgClientToGCRerollChallengeResponse.EResponse
	(CMsgClientToGCClaimChallengeRewardResponse_EResponse)(0),                        // 19: underlords.CMsgClientToGCClaimChallengeRewardResponse.EResponse
	(CMsgClientToGCGetFriendCodesResponse_EResponse)(0),                              // 20: underlords.CMsgClientToGCGetFriendCodesResponse.EResponse
	(CMsgClientToGCCreateFriendCodeResponse_EResponse)(0),                            // 21: underlords.CMsgClientToGCCreateFriendCodeResponse.EResponse
	(CMsgClientToGCCheckFriendCodeResponse_EResponse)(0),                             // 22: underlords.CMsgClientToGCCheckFriendCodeResponse.EResponse
	(CMsgClientToGCRevokeFriendCodeResponse_EResponse)(0),                            // 23: underlords.CMsgClientToGCRevokeFriendCodeResponse.EResponse
	(CMsgClientToGCDevEventOperation_EOperation)(0),                                  // 24: underlords.CMsgClientToGCDevEventOperation.EOperation
	(CMsgClientToGCPerformAutoActionsResponse_EResponse)(0),                          // 25: underlords.CMsgClientToGCPerformAutoActionsResponse.EResponse
	(CMsgClientToGCCanPurchaseItemResponse_EResponse)(0),                             // 26: underlords.CMsgClientToGCCanPurchaseItemResponse.EResponse
	(CMsgClientToGCHandleItemPurchaseResponse_EResponse)(0),                          // 27: underlords.CMsgClientToGCHandleItemPurchaseResponse.EResponse
	(CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse_EPurchaseResponse)(0), // 28: underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse.EPurchaseResponse
	(CMsgClientToGCEventEquipVirtualItemsResponse_EResponse)(0),                      // 29: underlords.CMsgClientToGCEventEquipVirtualItemsResponse.EResponse
	(CMsgClientToGCClearPurchaseReserveResponse_EResponse)(0),                        // 30: underlords.CMsgClientToGCClearPurchaseReserveResponse.EResponse
	(CMsgClientToGCEventChallengeProgressResponse_EResponse)(0),                      // 31: underlords.CMsgClientToGCEventChallengeProgressResponse.EResponse
	(CMsgClientToGCEventChallengeProgressWithCurrencyResponse_EResponse)(0),          // 32: underlords.CMsgClientToGCEventChallengeProgressWithCurrencyResponse.EResponse
	(CMsgClientToGCAssociateDeviceResponse_EResponse)(0),                             // 33: underlords.CMsgClientToGCAssociateDeviceResponse.EResponse
	(CMsgClientToGCEventPurchaseResponse_EResponse)(0),                               // 34: underlords.CMsgClientToGCEventPurchaseResponse.EResponse
	(CMsgClientToGCPartySetGameModifierResponse_EResponse)(0),                        // 35: underlords.CMsgClientToGCPartySetGameModifierResponse.EResponse
	(CMsgClientToGCAckSupportCreditsResponse_EResponse)(0),                           // 36: underlords.CMsgClientToGCAckSupportCreditsResponse.EResponse
	(CMsgClientToGCSetTeamNameResponse_EResponse)(0),                                 // 37: underlords.CMsgClientToGCSetTeamNameResponse.EResponse
	(CMsgClientToGCDevOperation_EOperation)(0),                                       // 38: underlords.CMsgClientToGCDevOperation.EOperation
	(CMsgClientToGCUpdateAccountSyncResponse_EResponse)(0),                           // 39: underlords.CMsgClientToGCUpdateAccountSyncResponse.EResponse
	(CMsgClientToGCGetDuosRanks_ESortOrder)(0),                                       // 40: underlords.CMsgClientToGCGetDuosRanks.ESortOrder
	(CMsgClientToGCGetDuosRanksResponse_EResponse)(0),                                // 41: underlords.CMsgClientToGCGetDuosRanksResponse.EResponse
	(CMsgClientToGCGetProfileResponse_EResponse)(0),                                  // 42: underlords.CMsgClientToGCGetProfileResponse.EResponse
	(CMsgClientToGCGetMatchHistoryResponse_EResponse)(0),                             // 43: underlords.CMsgClientToGCGetMatchHistoryResponse.EResponse
	(CMsgClientToGCEventPurchaseCurrencyResponse_EResponse)(0),                       // 44: underlords.CMsgClientToGCEventPurchaseCurrencyResponse.EResponse
	(CMsgClientToGCGetFriendRanksResponse_EResponse)(0),                              // 45: underlords.CMsgClientToGCGetFriendRanksResponse.EResponse
	(CMsgClientToGCGetPuzzleLeaderboardsResponse_EResponse)(0),                       // 46: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.EResponse
	(CMsgClientToGCGetPostMatchStatsResponse_EResponse)(0),                           // 47: underlords.CMsgClientToGCGetPostMatchStatsResponse.EResponse
	(*CMsgWebAPIClientDeviceInfo)(nil),                                               // 48: underlords.CMsgWebAPIClientDeviceInfo
	(*CMsgPartyMMInfo)(nil),                                                          // 49: underlords.CMsgPartyMMInfo
	(*CMsgDACClientHello)(nil),                                                       // 50: underlords.CMsgDACClientHello
	(*CMsgClientToGCStartMatchmaking)(nil),                                           // 51: underlords.CMsgClientToGCStartMatchmaking
	(*CMsgClientToGCStartMatchmakingResponse)(nil),                                   // 52: underlords.CMsgClientToGCStartMatchmakingResponse
	(*CMsgClientToGCStopMatchmaking)(nil),                                            // 53: underlords.CMsgClientToGCStopMatchmaking
	(*CMsgClientToGCStopMatchmakingResponse)(nil),                                    // 54: underlords.CMsgClientToGCStopMatchmakingResponse
	(*CMsgGCToClientMatchmakingStopped)(nil),                                         // 55: underlords.CMsgGCToClientMatchmakingStopped
	(*CMsgClientToGCLeaveLobby)(nil),                                                 // 56: underlords.CMsgClientToGCLeaveLobby
	(*CMsgClientToGCLeaveLobbyResponse)(nil),                                         // 57: underlords.CMsgClientToGCLeaveLobbyResponse
	(*CMsgClientWelcomeDAC)(nil),                                                     // 58: underlords.CMsgClientWelcomeDAC
	(*CMsgClientToGCIsInMatchmaking)(nil),                                            // 59: underlords.CMsgClientToGCIsInMatchmaking
	(*CMsgClientToGCIsInMatchmakingResponse)(nil),                                    // 60: underlords.CMsgClientToGCIsInMatchmakingResponse
	(*CMsgGCToClientSDRTicket)(nil),                                                  // 61: underlords.CMsgGCToClientSDRTicket
	(*CMsgClientToGCReplacementSDRTicket)(nil),                                       // 62: underlords.CMsgClientToGCReplacementSDRTicket
	(*CMsgClientToGCReplacementSDRTicketResponse)(nil),                               // 63: underlords.CMsgClientToGCReplacementSDRTicketResponse
	(*CMsgClientToGCPartyCreate)(nil),                                                // 64: underlords.CMsgClientToGCPartyCreate
	(*CMsgClientToGCPartyCreateResponse)(nil),                                        // 65: underlords.CMsgClientToGCPartyCreateResponse
	(*CMsgClientToGCPartyLeave)(nil),                                                 // 66: underlords.CMsgClientToGCPartyLeave
	(*CMsgClientToGCPartyLeaveResponse)(nil),                                         // 67: underlords.CMsgClientToGCPartyLeaveResponse
	(*CMsgClientToGCPartyJoin)(nil),                                                  // 68: underlords.CMsgClientToGCPartyJoin
	(*CMsgClientToGCPartyJoinResponse)(nil),                                          // 69: underlords.CMsgClientToGCPartyJoinResponse
	(*CMsgClientToGCPartyAction)(nil),                                                // 70: underlords.CMsgClientToGCPartyAction
	(*CMsgClientToGCPartyActionResponse)(nil),                                        // 71: underlords.CMsgClientToGCPartyActionResponse
	(*CMsgClientToGCPartyStartMatch)(nil),                                            // 72: underlords.CMsgClientToGCPartyStartMatch
	(*CMsgClientToGCPartyStartMatchResponse)(nil),                                    // 73: underlords.CMsgClientToGCPartyStartMatchResponse
	(*CMsgClientToGCPartyInviteUser)(nil),                                            // 74: underlords.CMsgClientToGCPartyInviteUser
	(*CMsgClientToGCPartyInviteUserResponse)(nil),                                    // 75: underlords.CMsgClientToGCPartyInviteUserResponse
	(*CMsgGCToClientPartyEvent)(nil),                                                 // 76: underlords.CMsgGCToClientPartyEvent
	(*CMsgClientToGCPartyClientVersion)(nil),                                         // 77: underlords.CMsgClientToGCPartyClientVersion
	(*CMsgGCToClientCanRejoinParty)(nil),                                             // 78: underlords.CMsgGCToClientCanRejoinParty
	(*CMsgClientToGCPartyJoinViaCode)(nil),                                           // 79: underlords.CMsgClientToGCPartyJoinViaCode
	(*CMsgClientToGCPartyJoinViaCodeResponse)(nil),                                   // 80: underlords.CMsgClientToGCPartyJoinViaCodeResponse
	(*CMsgGCToClientDevMMStatus)(nil),                                                // 81: underlords.CMsgGCToClientDevMMStatus
	(*CMsgGCItemEditorReservationsRequest)(nil),                                      // 82: underlords.CMsgGCItemEditorReservationsRequest
	(*CMsgGCItemEditorReservation)(nil),                                              // 83: underlords.CMsgGCItemEditorReservation
	(*CMsgGCItemEditorReservationsResponse)(nil),                                     // 84: underlords.CMsgGCItemEditorReservationsResponse
	(*CMsgGCItemEditorReserveItemDef)(nil),                                           // 85: underlords.CMsgGCItemEditorReserveItemDef
	(*CMsgGCItemEditorReserveItemDefResponse)(nil),                                   // 86: underlords.CMsgGCItemEditorReserveItemDefResponse
	(*CMsgGCItemEditorReleaseReservation)(nil),                                       // 87: underlords.CMsgGCItemEditorReleaseReservation
	(*CMsgGCItemEditorReleaseReservationResponse)(nil),                               // 88: underlords.CMsgGCItemEditorReleaseReservationResponse
	(*CMsgClientToGCDevForceMatchFormation)(nil),                                     // 89: underlords.CMsgClientToGCDevForceMatchFormation
	(*CMsgClientToGCEventRequestInfo)(nil),                                           // 90: underlords.CMsgClientToGCEventRequestInfo
	(*CMsgGCToClientEventInfo)(nil),                                                  // 91: underlords.CMsgGCToClientEventInfo
	(*CMsgClientToGCEventRequestInfoSync)(nil),                                       // 92: underlords.CMsgClientToGCEventRequestInfoSync
	(*CMsgClientToGCEventRequestInfoSyncResponse)(nil),                               // 93: underlords.CMsgClientToGCEventRequestInfoSyncResponse
	(*CMsgGCToClientEventInfoSerialize)(nil),                                         // 94: underlords.CMsgGCToClientEventInfoSerialize
	(*CMsgClientToGCEventClaim)(nil),                                                 // 95: underlords.CMsgClientToGCEventClaim
	(*CMsgEventClaimRewards)(nil),                                                    // 96: underlords.CMsgEventClaimRewards
	(*CMsgClientToGCEventClaimResponse)(nil),                                         // 97: underlords.CMsgClientToGCEventClaimResponse
	(*CMsgClientToGCEquipLoadout)(nil),                                               // 98: underlords.CMsgClientToGCEquipLoadout
	(*CMsgClientToGCEquipLoadoutResponse)(nil),                                       // 99: underlords.CMsgClientToGCEquipLoadoutResponse
	(*CMsgClientToGCSpectateUser)(nil),                                               // 100: underlords.CMsgClientToGCSpectateUser
	(*CMsgClientToGCSpectateUserResponse)(nil),                                       // 101: underlords.CMsgClientToGCSpectateUserResponse
	(*CMsgClientToGCRecordLocalBotMatch)(nil),                                        // 102: underlords.CMsgClientToGCRecordLocalBotMatch
	(*CMsgClientToGCRerollChallenge)(nil),                                            // 103: underlords.CMsgClientToGCRerollChallenge
	(*CMsgClientToGCRerollChallengeResponse)(nil),                                    // 104: underlords.CMsgClientToGCRerollChallengeResponse
	(*CMsgClientToGCClaimChallengeReward)(nil),                                       // 105: underlords.CMsgClientToGCClaimChallengeReward
	(*CMsgClientToGCClaimChallengeRewardResponse)(nil),                               // 106: underlords.CMsgClientToGCClaimChallengeRewardResponse
	(*CMsgClientToGCGetFriendCodes)(nil),                                             // 107: underlords.CMsgClientToGCGetFriendCodes
	(*CMsgClientToGCGetFriendCodesResponse)(nil),                                     // 108: underlords.CMsgClientToGCGetFriendCodesResponse
	(*CMsgClientToGCCreateFriendCode)(nil),                                           // 109: underlords.CMsgClientToGCCreateFriendCode
	(*CMsgClientToGCCreateFriendCodeResponse)(nil),                                   // 110: underlords.CMsgClientToGCCreateFriendCodeResponse
	(*CMsgClientToGCCheckFriendCode)(nil),                                            // 111: underlords.CMsgClientToGCCheckFriendCode
	(*CMsgClientToGCCheckFriendCodeResponse)(nil),                                    // 112: underlords.CMsgClientToGCCheckFriendCodeResponse
	(*CMsgClientToGCRedeemFriendCode)(nil),                                           // 113: underlords.CMsgClientToGCRedeemFriendCode
	(*CMsgClientToGCRedeemFriendCodeResponse)(nil),                                   // 114: underlords.CMsgClientToGCRedeemFriendCodeResponse
	(*CMsgClientToGCRevokeFriendCode)(nil),                                           // 115: underlords.CMsgClientToGCRevokeFriendCode
	(*CMsgClientToGCRevokeFriendCodeResponse)(nil),                                   // 116: underlords.CMsgClientToGCRevokeFriendCodeResponse
	(*CMsgClientToGCDevEventOperation)(nil),                                          // 117: underlords.CMsgClientToGCDevEventOperation
	(*CMsgClientToGCDevEventOperationResponse)(nil),                                  // 118: underlords.CMsgClientToGCDevEventOperationResponse
	(*CMsgGCToClientUpdateConsoleCommands)(nil),                                      // 119: underlords.CMsgGCToClientUpdateConsoleCommands
	(*CMsgClientToGCPerformAutoActions)(nil),                                         // 120: underlords.CMsgClientToGCPerformAutoActions
	(*CMsgClientToGCPerformAutoActionsResponse)(nil),                                 // 121: underlords.CMsgClientToGCPerformAutoActionsResponse
	(*CMsgClientToGCCanPurchaseItem)(nil),                                            // 122: underlords.CMsgClientToGCCanPurchaseItem
	(*CMsgClientToGCCanPurchaseItemResponse)(nil),                                    // 123: underlords.CMsgClientToGCCanPurchaseItemResponse
	(*CMsgClientToGCHandleItemPurchase)(nil),                                         // 124: underlords.CMsgClientToGCHandleItemPurchase
	(*CMsgClientToGCHandleItemPurchaseResponse)(nil),                                 // 125: underlords.CMsgClientToGCHandleItemPurchaseResponse
	(*CMsgClientToGCEventEquipVirtualItems)(nil),                                     // 126: underlords.CMsgClientToGCEventEquipVirtualItems
	(*CMsgClientToGCEventEquipVirtualItemsResponse)(nil),                             // 127: underlords.CMsgClientToGCEventEquipVirtualItemsResponse
	(*CMsgClientToGCClearPurchaseReserve)(nil),                                       // 128: underlords.CMsgClientToGCClearPurchaseReserve
	(*CMsgClientToGCClearPurchaseReserveResponse)(nil),                               // 129: underlords.CMsgClientToGCClearPurchaseReserveResponse
	(*CMsgGCToClientAcquireRegionModeInfo)(nil),                                      // 130: underlords.CMsgGCToClientAcquireRegionModeInfo
	(*CMsgGCToClientDurationControlWarning)(nil),                                     // 131: underlords.CMsgGCToClientDurationControlWarning
	(*CMsgClientToGCGetRegionModeInfo)(nil),                                          // 132: underlords.CMsgClientToGCGetRegionModeInfo
	(*CMsgClientToGCGetRegionModeInfoResponse)(nil),                                  // 133: underlords.CMsgClientToGCGetRegionModeInfoResponse
	(*CMsgGCToClientGameModifiersUpdated)(nil),                                       // 134: underlords.CMsgGCToClientGameModifiersUpdated
	(*CMsgClientToGCEventChallengeProgress)(nil),                                     // 135: underlords.CMsgClientToGCEventChallengeProgress
	(*CMsgClientToGCEventChallengeProgressResponse)(nil),                             // 136: underlords.CMsgClientToGCEventChallengeProgressResponse
	(*CMsgClientToGCEventChallengeProgressWithCurrency)(nil),                         // 137: underlords.CMsgClientToGCEventChallengeProgressWithCurrency
	(*CMsgClientToGCEventChallengeProgressWithCurrencyResponse)(nil),                 // 138: underlords.CMsgClientToGCEventChallengeProgressWithCurrencyResponse
	(*CMsgClientToGCAssociateDevice)(nil),                                            // 139: underlords.CMsgClientToGCAssociateDevice
	(*CMsgClientToGCAssociateDeviceResponse)(nil),                                    // 140: underlords.CMsgClientToGCAssociateDeviceResponse
	(*CMsgClientToGCEventPurchase)(nil),                                              // 141: underlords.CMsgClientToGCEventPurchase
	(*CMsgClientToGCEventPurchaseResponse)(nil),                                      // 142: underlords.CMsgClientToGCEventPurchaseResponse
	(*CMsgClientToGCPartySetGameModifier)(nil),                                       // 143: underlords.CMsgClientToGCPartySetGameModifier
	(*CMsgClientToGCPartySetGameModifierResponse)(nil),                               // 144: underlords.CMsgClientToGCPartySetGameModifierResponse
	(*CMsgClientToGCAckSupportCredits)(nil),                                          // 145: underlords.CMsgClientToGCAckSupportCredits
	(*CMsgClientToGCAckSupportCreditsResponse)(nil),                                  // 146: underlords.CMsgClientToGCAckSupportCreditsResponse
	(*CMsgClientToGCSetTeamName)(nil),                                                // 147: underlords.CMsgClientToGCSetTeamName
	(*CMsgClientToGCSetTeamNameResponse)(nil),                                        // 148: underlords.CMsgClientToGCSetTeamNameResponse
	(*CMsgClientToGCDevOperation)(nil),                                               // 149: underlords.CMsgClientToGCDevOperation
	(*CMsgClientToGCDevOperationResponse)(nil),                                       // 150: underlords.CMsgClientToGCDevOperationResponse
	(*CMsgClientToGCUpdateAccountSync)(nil),                                          // 151: underlords.CMsgClientToGCUpdateAccountSync
	(*CMsgClientToGCUpdateAccountSyncResponse)(nil),                                  // 152: underlords.CMsgClientToGCUpdateAccountSyncResponse
	(*CMsgClientToGCGetDuosRanks)(nil),                                               // 153: underlords.CMsgClientToGCGetDuosRanks
	(*CMsgClientToGCGetDuosRanksResponse)(nil),                                       // 154: underlords.CMsgClientToGCGetDuosRanksResponse
	(*CMsgClientToGCGetProfile)(nil),                                                 // 155: underlords.CMsgClientToGCGetProfile
	(*CMsgClientToGCGetProfileResponse)(nil),                                         // 156: underlords.CMsgClientToGCGetProfileResponse
	(*CMsgClientToGCGetMatchHistory)(nil),                                            // 157: underlords.CMsgClientToGCGetMatchHistory
	(*CMsgClientToGCGetMatchHistoryResponse)(nil),                                    // 158: underlords.CMsgClientToGCGetMatchHistoryResponse
	(*CMsgClientToGCEventPurchaseCurrency)(nil),                                      // 159: underlords.CMsgClientToGCEventPurchaseCurrency
	(*CMsgClientToGCEventPurchaseCurrencyResponse)(nil),                              // 160: underlords.CMsgClientToGCEventPurchaseCurrencyResponse
	(*CMsgClientToGCGetFriendRanks)(nil),                                             // 161: underlords.CMsgClientToGCGetFriendRanks
	(*CMsgClientToGCGetFriendRanksResponse)(nil),                                     // 162: underlords.CMsgClientToGCGetFriendRanksResponse
	(*CMsgClientToGCGetPuzzleLeaderboards)(nil),                                      // 163: underlords.CMsgClientToGCGetPuzzleLeaderboards
	(*CMsgClientToGCGetPuzzleLeaderboardsResponse)(nil),                              // 164: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse
	(*CMsgClientToGCGetPostMatchStats)(nil),                                          // 165: underlords.CMsgClientToGCGetPostMatchStats
	(*CMsgClientToGCGetPostMatchStatsResponse)(nil),                                  // 166: underlords.CMsgClientToGCGetPostMatchStatsResponse
	(*CMsgMatchStats)(nil),                                                           // 167: underlords.CMsgMatchStats
	(*CMsgGCToClientDevMMStatus_Party)(nil),                                          // 168: underlords.CMsgGCToClientDevMMStatus.Party
	(*CMsgGCToClientEventInfo_EventState)(nil),                                       // 169: underlords.CMsgGCToClientEventInfo.EventState
	(*CMsgGCToClientEventInfo_Currency)(nil),                                         // 170: underlords.CMsgGCToClientEventInfo.Currency
	(*CMsgGCToClientEventInfo_Claim)(nil),                                            // 171: underlords.CMsgGCToClientEventInfo.Claim
	(*CMsgGCToClientEventInfo_Challenge)(nil),                                        // 172: underlords.CMsgGCToClientEventInfo.Challenge
	(*CMsgGCToClientEventInfo_VirtualItem)(nil),                                      // 173: underlords.CMsgGCToClientEventInfo.VirtualItem
	(*CMsgGCToClientEventInfo_VirtualItemEquip)(nil),                                 // 174: underlords.CMsgGCToClientEventInfo.VirtualItemEquip
	(*CMsgEventClaimRewards_Item)(nil),                                               // 175: underlords.CMsgEventClaimRewards.Item
	(*CMsgEventClaimRewards_Achievement)(nil),                                        // 176: underlords.CMsgEventClaimRewards.Achievement
	(*CMsgEventClaimRewards_Currency)(nil),                                           // 177: underlords.CMsgEventClaimRewards.Currency
	(*CMsgEventClaimRewards_Challenge)(nil),                                          // 178: underlords.CMsgEventClaimRewards.Challenge
	(*CMsgClientToGCGetFriendCodesResponse_Code)(nil),                                // 179: underlords.CMsgClientToGCGetFriendCodesResponse.Code
	(*CMsgClientToGCCanPurchaseItemResponse_Reservation)(nil),                        // 180: underlords.CMsgClientToGCCanPurchaseItemResponse.Reservation
	(*CMsgClientToGCHandleItemPurchase_StoreInfoIOS)(nil),                            // 181: underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_iOS
	(*CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay)(nil),                    // 182: underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_GooglePlay
	(*CMsgClientToGCHandleItemPurchase_StoreInfo_Test)(nil),                          // 183: underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_Test
	(*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse)(nil),                // 184: underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse
	(*CMsgClientToGCEventEquipVirtualItems_Equip)(nil),                               // 185: underlords.CMsgClientToGCEventEquipVirtualItems.Equip
	(*CMsgClientToGCGetDuosRanksResponse_Team)(nil),                                  // 186: underlords.CMsgClientToGCGetDuosRanksResponse.Team
	(*CMsgClientToGCGetProfileResponse_CityCrawlProgress)(nil),                       // 187: underlords.CMsgClientToGCGetProfileResponse.CityCrawlProgress
	(*CMsgClientToGCGetMatchHistoryResponse_Match)(nil),                              // 188: underlords.CMsgClientToGCGetMatchHistoryResponse.Match
	(*CMsgClientToGCGetMatchHistoryResponse_MatchStats)(nil),                         // 189: underlords.CMsgClientToGCGetMatchHistoryResponse.MatchStats
	(*CMsgClientToGCGetFriendRanksResponse_FriendRank)(nil),                          // 190: underlords.CMsgClientToGCGetFriendRanksResponse.FriendRank
	(*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry)(nil),             // 191: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.LeaderboardEntry
	(*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard)(nil),                  // 192: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.Leaderboard
	(*CMsgMatchStats_RoundUnitStats)(nil),                                            // 193: underlords.CMsgMatchStats.RoundUnitStats
	(*CMsgMatchStats_RoundStats)(nil),                                                // 194: underlords.CMsgMatchStats.RoundStats
	(*CMsgMatchStats_UnderlordStats)(nil),                                            // 195: underlords.CMsgMatchStats.UnderlordStats
	(*CMsgMatchStats_EntityInfo)(nil),                                                // 196: underlords.CMsgMatchStats.EntityInfo
	(EDACPlatform)(0),                                                                // 197: underlords.EDACPlatform
	(*CMsgRegionPingTimesClient)(nil),                                                // 198: underlords.CMsgRegionPingTimesClient
	(EDACRegionMode)(0),                                                              // 199: underlords.EDACRegionMode
	(*CMsgStartFindingMatchInfo)(nil),                                                // 200: underlords.CMsgStartFindingMatchInfo
	(*CExtraMsgBlock)(nil),                                                           // 201: underlords.CExtraMsgBlock
	(EDACMatchMode)(0),                                                               // 202: underlords.EDACMatchMode
	(EDACGameMode)(0),                                                                // 203: underlords.EDACGameMode
	(EDACBotDifficulty)(0),                                                           // 204: underlords.EDACBotDifficulty
	(*CMsgGameModeSettings)(nil),                                                     // 205: underlords.CMsgGameModeSettings
	(EDACStoreID)(0),                                                                 // 206: underlords.EDACStoreID
	(*CMsgGameModifiers)(nil),                                                        // 207: underlords.CMsgGameModifiers
	(*CMsgPublicPostMatchStats)(nil),                                                 // 208: underlords.CMsgPublicPostMatchStats
	(*CMsgHistogram)(nil),                                                            // 209: underlords.CMsgHistogram
}
var file_underlords_dac_gcmessages_client_proto_depIdxs = []int32{
	197, // 0: underlords.CMsgWebAPIClientDeviceInfo.platform:type_name -> underlords.EDACPlatform
	197, // 1: underlords.CMsgPartyMMInfo.platform:type_name -> underlords.EDACPlatform
	198, // 2: underlords.CMsgPartyMMInfo.ping_times:type_name -> underlords.CMsgRegionPingTimesClient
	199, // 3: underlords.CMsgPartyMMInfo.region_mode:type_name -> underlords.EDACRegionMode
	199, // 4: underlords.CMsgDACClientHello.region_mode:type_name -> underlords.EDACRegionMode
	200, // 5: underlords.CMsgClientToGCStartMatchmaking.match_info:type_name -> underlords.CMsgStartFindingMatchInfo
	198, // 6: underlords.CMsgClientToGCStartMatchmaking.ping_times:type_name -> underlords.CMsgRegionPingTimesClient
	4,   // 7: underlords.CMsgClientToGCStartMatchmakingResponse.result:type_name -> underlords.CMsgClientToGCStartMatchmakingResponse.EResultCode
	5,   // 8: underlords.CMsgGCToClientMatchmakingStopped.reason:type_name -> underlords.CMsgGCToClientMatchmakingStopped.EReason
	201, // 9: underlords.CMsgClientWelcomeDAC.extra_messages:type_name -> underlords.CExtraMsgBlock
	49,  // 10: underlords.CMsgClientToGCPartyCreate.party_mm_info:type_name -> underlords.CMsgPartyMMInfo
	6,   // 11: underlords.CMsgClientToGCPartyCreateResponse.result:type_name -> underlords.CMsgClientToGCPartyCreateResponse.EResponse
	7,   // 12: underlords.CMsgClientToGCPartyLeaveResponse.result:type_name -> underlords.CMsgClientToGCPartyLeaveResponse.EResponse
	49,  // 13: underlords.CMsgClientToGCPartyJoin.party_mm_info:type_name -> underlords.CMsgPartyMMInfo
	8,   // 14: underlords.CMsgClientToGCPartyJoinResponse.result:type_name -> underlords.CMsgClientToGCPartyJoinResponse.EResponse
	9,   // 15: underlords.CMsgClientToGCPartyAction.action_id:type_name -> underlords.CMsgClientToGCPartyAction.EAction
	10,  // 16: underlords.CMsgClientToGCPartyActionResponse.result:type_name -> underlords.CMsgClientToGCPartyActionResponse.EResponse
	202, // 17: underlords.CMsgClientToGCPartyStartMatch.match_mode:type_name -> underlords.EDACMatchMode
	203, // 18: underlords.CMsgClientToGCPartyStartMatch.game_mode:type_name -> underlords.EDACGameMode
	204, // 19: underlords.CMsgClientToGCPartyStartMatch.bot_difficulty:type_name -> underlords.EDACBotDifficulty
	205, // 20: underlords.CMsgClientToGCPartyStartMatch.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	11,  // 21: underlords.CMsgClientToGCPartyStartMatchResponse.result:type_name -> underlords.CMsgClientToGCPartyStartMatchResponse.EResponse
	12,  // 22: underlords.CMsgClientToGCPartyInviteUserResponse.result:type_name -> underlords.CMsgClientToGCPartyInviteUserResponse.EResponse
	13,  // 23: underlords.CMsgGCToClientPartyEvent.event:type_name -> underlords.CMsgGCToClientPartyEvent.EEvent
	49,  // 24: underlords.CMsgClientToGCPartyClientVersion.party_mm_info:type_name -> underlords.CMsgPartyMMInfo
	49,  // 25: underlords.CMsgClientToGCPartyJoinViaCode.party_mm_info:type_name -> underlords.CMsgPartyMMInfo
	8,   // 26: underlords.CMsgClientToGCPartyJoinViaCodeResponse.result:type_name -> underlords.CMsgClientToGCPartyJoinResponse.EResponse
	168, // 27: underlords.CMsgGCToClientDevMMStatus.parties:type_name -> underlords.CMsgGCToClientDevMMStatus.Party
	83,  // 28: underlords.CMsgGCItemEditorReservationsResponse.reservations:type_name -> underlords.CMsgGCItemEditorReservation
	169, // 29: underlords.CMsgGCToClientEventInfo.event_state:type_name -> underlords.CMsgGCToClientEventInfo.EventState
	170, // 30: underlords.CMsgGCToClientEventInfo.currencies:type_name -> underlords.CMsgGCToClientEventInfo.Currency
	171, // 31: underlords.CMsgGCToClientEventInfo.claims:type_name -> underlords.CMsgGCToClientEventInfo.Claim
	172, // 32: underlords.CMsgGCToClientEventInfo.challenges:type_name -> underlords.CMsgGCToClientEventInfo.Challenge
	173, // 33: underlords.CMsgGCToClientEventInfo.virtual_items:type_name -> underlords.CMsgGCToClientEventInfo.VirtualItem
	174, // 34: underlords.CMsgGCToClientEventInfo.virtual_item_equips:type_name -> underlords.CMsgGCToClientEventInfo.VirtualItemEquip
	173, // 35: underlords.CMsgGCToClientEventInfo.virtual_item_revokes:type_name -> underlords.CMsgGCToClientEventInfo.VirtualItem
	14,  // 36: underlords.CMsgClientToGCEventRequestInfoSyncResponse.result:type_name -> underlords.CMsgClientToGCEventRequestInfoSyncResponse.EResponse
	91,  // 37: underlords.CMsgClientToGCEventRequestInfoSyncResponse.event_info:type_name -> underlords.CMsgGCToClientEventInfo
	91,  // 38: underlords.CMsgGCToClientEventInfoSerialize.event_info:type_name -> underlords.CMsgGCToClientEventInfo
	175, // 39: underlords.CMsgEventClaimRewards.items:type_name -> underlords.CMsgEventClaimRewards.Item
	176, // 40: underlords.CMsgEventClaimRewards.achievements:type_name -> underlords.CMsgEventClaimRewards.Achievement
	177, // 41: underlords.CMsgEventClaimRewards.currencies:type_name -> underlords.CMsgEventClaimRewards.Currency
	178, // 42: underlords.CMsgEventClaimRewards.challenges:type_name -> underlords.CMsgEventClaimRewards.Challenge
	15,  // 43: underlords.CMsgClientToGCEventClaimResponse.result:type_name -> underlords.CMsgClientToGCEventClaimResponse.EResponse
	96,  // 44: underlords.CMsgClientToGCEventClaimResponse.rewards:type_name -> underlords.CMsgEventClaimRewards
	16,  // 45: underlords.CMsgClientToGCEquipLoadoutResponse.result:type_name -> underlords.CMsgClientToGCEquipLoadoutResponse.EResponse
	199, // 46: underlords.CMsgClientToGCSpectateUser.region_mode:type_name -> underlords.EDACRegionMode
	17,  // 47: underlords.CMsgClientToGCSpectateUserResponse.result:type_name -> underlords.CMsgClientToGCSpectateUserResponse.EResponse
	197, // 48: underlords.CMsgClientToGCRecordLocalBotMatch.platform:type_name -> underlords.EDACPlatform
	203, // 49: underlords.CMsgClientToGCRecordLocalBotMatch.game_mode:type_name -> underlords.EDACGameMode
	18,  // 50: underlords.CMsgClientToGCRerollChallengeResponse.result:type_name -> underlords.CMsgClientToGCRerollChallengeResponse.EResponse
	19,  // 51: underlords.CMsgClientToGCClaimChallengeRewardResponse.result:type_name -> underlords.CMsgClientToGCClaimChallengeRewardResponse.EResponse
	96,  // 52: underlords.CMsgClientToGCClaimChallengeRewardResponse.rewards:type_name -> underlords.CMsgEventClaimRewards
	20,  // 53: underlords.CMsgClientToGCGetFriendCodesResponse.result:type_name -> underlords.CMsgClientToGCGetFriendCodesResponse.EResponse
	179, // 54: underlords.CMsgClientToGCGetFriendCodesResponse.code_list:type_name -> underlords.CMsgClientToGCGetFriendCodesResponse.Code
	21,  // 55: underlords.CMsgClientToGCCreateFriendCodeResponse.result:type_name -> underlords.CMsgClientToGCCreateFriendCodeResponse.EResponse
	179, // 56: underlords.CMsgClientToGCCreateFriendCodeResponse.code:type_name -> underlords.CMsgClientToGCGetFriendCodesResponse.Code
	22,  // 57: underlords.CMsgClientToGCCheckFriendCodeResponse.result:type_name -> underlords.CMsgClientToGCCheckFriendCodeResponse.EResponse
	22,  // 58: underlords.CMsgClientToGCRedeemFriendCodeResponse.result:type_name -> underlords.CMsgClientToGCCheckFriendCodeResponse.EResponse
	23,  // 59: underlords.CMsgClientToGCRevokeFriendCodeResponse.result:type_name -> underlords.CMsgClientToGCRevokeFriendCodeResponse.EResponse
	24,  // 60: underlords.CMsgClientToGCDevEventOperation.operation:type_name -> underlords.CMsgClientToGCDevEventOperation.EOperation
	25,  // 61: underlords.CMsgClientToGCPerformAutoActionsResponse.result:type_name -> underlords.CMsgClientToGCPerformAutoActionsResponse.EResponse
	96,  // 62: underlords.CMsgClientToGCPerformAutoActionsResponse.rewards:type_name -> underlords.CMsgEventClaimRewards
	206, // 63: underlords.CMsgClientToGCCanPurchaseItem.store_id:type_name -> underlords.EDACStoreID
	197, // 64: underlords.CMsgClientToGCCanPurchaseItem.platform:type_name -> underlords.EDACPlatform
	26,  // 65: underlords.CMsgClientToGCCanPurchaseItemResponse.result:type_name -> underlords.CMsgClientToGCCanPurchaseItemResponse.EResponse
	180, // 66: underlords.CMsgClientToGCCanPurchaseItemResponse.reservations:type_name -> underlords.CMsgClientToGCCanPurchaseItemResponse.Reservation
	206, // 67: underlords.CMsgClientToGCHandleItemPurchase.store_id:type_name -> underlords.EDACStoreID
	181, // 68: underlords.CMsgClientToGCHandleItemPurchase.store_info_ios:type_name -> underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_iOS
	182, // 69: underlords.CMsgClientToGCHandleItemPurchase.store_info_google_play:type_name -> underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_GooglePlay
	183, // 70: underlords.CMsgClientToGCHandleItemPurchase.store_info_test:type_name -> underlords.CMsgClientToGCHandleItemPurchase.StoreInfo_Test
	197, // 71: underlords.CMsgClientToGCHandleItemPurchase.platform:type_name -> underlords.EDACPlatform
	27,  // 72: underlords.CMsgClientToGCHandleItemPurchaseResponse.result:type_name -> underlords.CMsgClientToGCHandleItemPurchaseResponse.EResponse
	184, // 73: underlords.CMsgClientToGCHandleItemPurchaseResponse.purchase_responses:type_name -> underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse
	185, // 74: underlords.CMsgClientToGCEventEquipVirtualItems.equip_list:type_name -> underlords.CMsgClientToGCEventEquipVirtualItems.Equip
	29,  // 75: underlords.CMsgClientToGCEventEquipVirtualItemsResponse.result:type_name -> underlords.CMsgClientToGCEventEquipVirtualItemsResponse.EResponse
	206, // 76: underlords.CMsgClientToGCClearPurchaseReserve.store_id:type_name -> underlords.EDACStoreID
	30,  // 77: underlords.CMsgClientToGCClearPurchaseReserveResponse.result:type_name -> underlords.CMsgClientToGCClearPurchaseReserveResponse.EResponse
	207, // 78: underlords.CMsgGCToClientGameModifiersUpdated.game_modifiers:type_name -> underlords.CMsgGameModifiers
	31,  // 79: underlords.CMsgClientToGCEventChallengeProgressResponse.result:type_name -> underlords.CMsgClientToGCEventChallengeProgressResponse.EResponse
	32,  // 80: underlords.CMsgClientToGCEventChallengeProgressWithCurrencyResponse.result:type_name -> underlords.CMsgClientToGCEventChallengeProgressWithCurrencyResponse.EResponse
	197, // 81: underlords.CMsgClientToGCAssociateDevice.platform:type_name -> underlords.EDACPlatform
	33,  // 82: underlords.CMsgClientToGCAssociateDeviceResponse.result:type_name -> underlords.CMsgClientToGCAssociateDeviceResponse.EResponse
	34,  // 83: underlords.CMsgClientToGCEventPurchaseResponse.result:type_name -> underlords.CMsgClientToGCEventPurchaseResponse.EResponse
	207, // 84: underlords.CMsgClientToGCPartySetGameModifier.custom_modifier:type_name -> underlords.CMsgGameModifiers
	35,  // 85: underlords.CMsgClientToGCPartySetGameModifierResponse.result:type_name -> underlords.CMsgClientToGCPartySetGameModifierResponse.EResponse
	36,  // 86: underlords.CMsgClientToGCAckSupportCreditsResponse.result:type_name -> underlords.CMsgClientToGCAckSupportCreditsResponse.EResponse
	37,  // 87: underlords.CMsgClientToGCSetTeamNameResponse.result:type_name -> underlords.CMsgClientToGCSetTeamNameResponse.EResponse
	38,  // 88: underlords.CMsgClientToGCDevOperation.op:type_name -> underlords.CMsgClientToGCDevOperation.EOperation
	39,  // 89: underlords.CMsgClientToGCUpdateAccountSyncResponse.result:type_name -> underlords.CMsgClientToGCUpdateAccountSyncResponse.EResponse
	40,  // 90: underlords.CMsgClientToGCGetDuosRanks.sort_order:type_name -> underlords.CMsgClientToGCGetDuosRanks.ESortOrder
	41,  // 91: underlords.CMsgClientToGCGetDuosRanksResponse.result:type_name -> underlords.CMsgClientToGCGetDuosRanksResponse.EResponse
	186, // 92: underlords.CMsgClientToGCGetDuosRanksResponse.teams:type_name -> underlords.CMsgClientToGCGetDuosRanksResponse.Team
	42,  // 93: underlords.CMsgClientToGCGetProfileResponse.result:type_name -> underlords.CMsgClientToGCGetProfileResponse.EResponse
	187, // 94: underlords.CMsgClientToGCGetProfileResponse.citycrawl_progress:type_name -> underlords.CMsgClientToGCGetProfileResponse.CityCrawlProgress
	43,  // 95: underlords.CMsgClientToGCGetMatchHistoryResponse.result:type_name -> underlords.CMsgClientToGCGetMatchHistoryResponse.EResponse
	188, // 96: underlords.CMsgClientToGCGetMatchHistoryResponse.matches:type_name -> underlords.CMsgClientToGCGetMatchHistoryResponse.Match
	189, // 97: underlords.CMsgClientToGCGetMatchHistoryResponse.match_stats:type_name -> underlords.CMsgClientToGCGetMatchHistoryResponse.MatchStats
	44,  // 98: underlords.CMsgClientToGCEventPurchaseCurrencyResponse.result:type_name -> underlords.CMsgClientToGCEventPurchaseCurrencyResponse.EResponse
	45,  // 99: underlords.CMsgClientToGCGetFriendRanksResponse.result:type_name -> underlords.CMsgClientToGCGetFriendRanksResponse.EResponse
	190, // 100: underlords.CMsgClientToGCGetFriendRanksResponse.friends:type_name -> underlords.CMsgClientToGCGetFriendRanksResponse.FriendRank
	46,  // 101: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.result:type_name -> underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.EResponse
	192, // 102: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.leaderboards:type_name -> underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.Leaderboard
	47,  // 103: underlords.CMsgClientToGCGetPostMatchStatsResponse.result:type_name -> underlords.CMsgClientToGCGetPostMatchStatsResponse.EResponse
	208, // 104: underlords.CMsgClientToGCGetPostMatchStatsResponse.match_stats:type_name -> underlords.CMsgPublicPostMatchStats
	202, // 105: underlords.CMsgMatchStats.match_mode:type_name -> underlords.EDACMatchMode
	203, // 106: underlords.CMsgMatchStats.game_mode:type_name -> underlords.EDACGameMode
	194, // 107: underlords.CMsgMatchStats.round_stats:type_name -> underlords.CMsgMatchStats.RoundStats
	195, // 108: underlords.CMsgMatchStats.underlord_stats:type_name -> underlords.CMsgMatchStats.UnderlordStats
	196, // 109: underlords.CMsgMatchStats.entity_infos:type_name -> underlords.CMsgMatchStats.EntityInfo
	203, // 110: underlords.CMsgGCToClientDevMMStatus.Party.game_mode:type_name -> underlords.EDACGameMode
	202, // 111: underlords.CMsgGCToClientDevMMStatus.Party.match_mode:type_name -> underlords.EDACMatchMode
	206, // 112: underlords.CMsgClientToGCCanPurchaseItemResponse.Reservation.store_id:type_name -> underlords.EDACStoreID
	28,  // 113: underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse.result:type_name -> underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse.EPurchaseResponse
	26,  // 114: underlords.CMsgClientToGCHandleItemPurchaseResponse.PurchaseResponse.purchase_item_result:type_name -> underlords.CMsgClientToGCCanPurchaseItemResponse.EResponse
	197, // 115: underlords.CMsgClientToGCGetMatchHistoryResponse.Match.platform:type_name -> underlords.EDACPlatform
	202, // 116: underlords.CMsgClientToGCGetMatchHistoryResponse.Match.match_mode:type_name -> underlords.EDACMatchMode
	203, // 117: underlords.CMsgClientToGCGetMatchHistoryResponse.Match.game_mode:type_name -> underlords.EDACGameMode
	191, // 118: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.Leaderboard.leaderboard_entry:type_name -> underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.LeaderboardEntry
	209, // 119: underlords.CMsgClientToGCGetPuzzleLeaderboardsResponse.Leaderboard.histogram:type_name -> underlords.CMsgHistogram
	193, // 120: underlords.CMsgMatchStats.RoundStats.unit_stats:type_name -> underlords.CMsgMatchStats.RoundUnitStats
	121, // [121:121] is the sub-list for method output_type
	121, // [121:121] is the sub-list for method input_type
	121, // [121:121] is the sub-list for extension type_name
	121, // [121:121] is the sub-list for extension extendee
	0,   // [0:121] is the sub-list for field type_name
}

func init() { file_underlords_dac_gcmessages_client_proto_init() }
func file_underlords_dac_gcmessages_client_proto_init() {
	if File_underlords_dac_gcmessages_client_proto != nil {
		return
	}
	file_underlords_steammessages_proto_init()
	file_underlords_dac_gamemessages_proto_init()
	file_underlords_dac_gcmessages_common_proto_init()
	file_underlords_econ_gcmessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_underlords_dac_gcmessages_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWebAPIClientDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPartyMMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDACClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStartMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStartMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStopMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCStopMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientMatchmakingStopped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCLeaveLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientWelcomeDAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCIsInMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCIsInMatchmakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientSDRTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCReplacementSDRTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCReplacementSDRTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyLeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyJoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyStartMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyStartMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyInviteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyInviteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientPartyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyClientVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientCanRejoinParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyJoinViaCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartyJoinViaCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientDevMMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReserveItemDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReserveItemDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReleaseReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCItemEditorReleaseReservationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCDevForceMatchFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventRequestInfoSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventRequestInfoSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfoSerialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEventClaimRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEquipLoadout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEquipLoadoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSpectateUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSpectateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRecordLocalBotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRerollChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRerollChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCClaimChallengeReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCClaimChallengeRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCreateFriendCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCreateFriendCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCheckFriendCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCheckFriendCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRedeemFriendCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRedeemFriendCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRevokeFriendCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCRevokeFriendCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCDevEventOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCDevEventOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientUpdateConsoleCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPerformAutoActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPerformAutoActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCanPurchaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCanPurchaseItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventEquipVirtualItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventEquipVirtualItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCClearPurchaseReserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCClearPurchaseReserveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientAcquireRegionModeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientDurationControlWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetRegionModeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetRegionModeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientGameModifiersUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventChallengeProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventChallengeProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventChallengeProgressWithCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventChallengeProgressWithCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAssociateDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAssociateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartySetGameModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCPartySetGameModifierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAckSupportCredits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCAckSupportCreditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetTeamName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCSetTeamNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCDevOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCDevOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCUpdateAccountSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCUpdateAccountSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetDuosRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetDuosRanksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventPurchaseCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventPurchaseCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendRanksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPuzzleLeaderboards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPuzzleLeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPostMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPostMatchStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientDevMMStatus_Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_EventState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_VirtualItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToClientEventInfo_VirtualItemEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEventClaimRewards_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEventClaimRewards_Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEventClaimRewards_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEventClaimRewards_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendCodesResponse_Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCCanPurchaseItemResponse_Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchase_StoreInfoIOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchase_StoreInfo_GooglePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchase_StoreInfo_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCHandleItemPurchaseResponse_PurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCEventEquipVirtualItems_Equip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetDuosRanksResponse_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetProfileResponse_CityCrawlProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistoryResponse_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetMatchHistoryResponse_MatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetFriendRanksResponse_FriendRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPuzzleLeaderboardsResponse_LeaderboardEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToGCGetPuzzleLeaderboardsResponse_Leaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchStats_RoundUnitStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchStats_RoundStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchStats_UnderlordStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_client_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchStats_EntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_underlords_dac_gcmessages_client_proto_rawDesc,
			NumEnums:      48,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_underlords_dac_gcmessages_client_proto_goTypes,
		DependencyIndexes: file_underlords_dac_gcmessages_client_proto_depIdxs,
		EnumInfos:         file_underlords_dac_gcmessages_client_proto_enumTypes,
		MessageInfos:      file_underlords_dac_gcmessages_client_proto_msgTypes,
	}.Build()
	File_underlords_dac_gcmessages_client_proto = out.File
	file_underlords_dac_gcmessages_client_proto_rawDesc = nil
	file_underlords_dac_gcmessages_client_proto_goTypes = nil
	file_underlords_dac_gcmessages_client_proto_depIdxs = nil
}
